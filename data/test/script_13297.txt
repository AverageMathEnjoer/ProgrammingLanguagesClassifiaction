b'\xef\xbb\xbf// UVa1412 Fund Management\n// \xe6\x9c\xac\xe7\xa8\x8b\xe5\xba\x8f\xe4\xbc\x9a\xe8\xb6\x85\xe6\x97\xb6\xef\xbc\x8c\xe5\x8f\xaa\xe6\x98\xaf\xe7\x94\xa8\xe6\x9d\xa5\xe7\xa4\xba\xe8\x8c\x83\xe7\x94\xa8\xe7\xbc\x96\xe7\xa0\x81/\xe8\xa7\xa3\xe7\xa0\x81\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xe7\xbc\x96\xe5\x86\x99\xe5\xa4\x8d\xe6\x9d\x82\xe7\x8a\xb6\xe6\x80\x81\xe5\x8a\xa8\xe6\x80\x81\xe8\xa7\x84\xe5\x88\x92\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\n// Rujia Liu\n#include<cstdio>\n#include<cstring>\n#include<map>\nusing namespace std;\n\nconst double INF = 1e30;\nconst int maxn = 8;\nconst int maxm = 100 + 5;\n\nmap<int, double> d[maxm];\nmap<int, int> opt[maxm], prev[maxm];\nint m, n, s[maxn], k[maxn], kk;\ndouble c, price[maxn][maxm];\nchar name[maxn][10];\n\nint encode(int* portfolio) {\n  int h = 0;\n  for(int i = 0; i < n; i++) h = h * 9 + portfolio[i];\n  return h;\n}\n\nint decode(int h, int* portfolio) {\n  int totlot = 0;\n  for(int i = n-1; i >= 0; i--) {\n    portfolio[i] = h % 9;\n    totlot += portfolio[i];\n    h /= 9;\n  }\n  return totlot;\n}\n\nvoid update(int oldh, int day, int h, double v, int o) {\n  if(d[day].count(h) == 0 || v > d[day][h]) {\n    d[day][h] = v;\n    opt[day][h] = o;\n    prev[day][h] = oldh;\n  }\n}\n\ndouble dp() {\n  int portfolio[maxn];\n  d[0][0] = c;\n  for(int day = 0; day < m; day++)\n    for(map<int, double>::iterator it = d[day].begin(); it != d[day].end(); it++) {\n      int h = it->first;\n      double v = it->second;\n      int totlot = decode(h, portfolio);\n\n      update(h, day+1, h, v, 0); // HOLD\n      for(int i = 0; i < n; i++) {\n        if(portfolio[i] < k[i] && totlot < kk && v >= price[i][day] - 1e-3) {\n          portfolio[i]++;\n          update(h, day+1, encode(portfolio), v - price[i][day], i+1); // BUY\n          portfolio[i]--;\n        }\n        if(portfolio[i] > 0) {\n          portfolio[i]--;\n          update(h, day+1, encode(portfolio), v + price[i][day], -i-1); // SELL\n          portfolio[i]++;\n        }\n      }\n    }\n  return d[m][0];\n}\n\nvoid print_ans(int day, int h) {\n  if(day == 0) return;\n  print_ans(day-1, prev[day][h]);\n  if(opt[day][h] == 0) printf("HOLD\\n");\n  else if(opt[day][h] > 0) printf("BUY %s\\n", name[opt[day][h]-1]);\n  else printf("SELL %s\\n", name[-opt[day][h]-1]);\n}\n\nint main() {\n  int kase = 0;\n  while(scanf("%lf%d%d%d", &c, &m, &n, &kk) == 4) {\n    if(kase++ > 0) printf("\\n");\n    for(int i = 0; i < n; i++) {\n      scanf("%s%d%d", name[i], &s[i], &k[i]);\n      for(int j = 0; j < m; j++) { scanf("%lf", &price[i][j]); price[i][j] *= s[i]; }\n    }\n    for(int i = 0; i <= m; i++) { d[i].clear(); opt[i].clear(); prev[i].clear(); }\n\n    double ans = dp();\n    printf("%.2lf\\n", ans);\n    print_ans(m, 0);\n  }\n  return 0;\n}\n'