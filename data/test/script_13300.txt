b'#\' Import and use a custom language\n#\'\n#\' If your language is not available or if you wish to customize the outputs\'\n#\' language to suit your preference, you can set up a translations file (see\n#\' details) and import it with this function.\n#\' @aliases use_custom_lang\n#\' \n#\' @param file Character. The path to the translations file.\n#\'\n#\' @details To build the translations file, copy the \n#\' \\emph{language_template.csv} file located in the installed \n#\' package\'s \\emph{includes} directory and fill out the \\sQuote{custom} column\n#\' using a text editor, leaving column titles unchanged. The file must also\n#\' retain its \\emph{UTF-8} encoding.\n#\'\n#\' @keywords utilities\n#\' @importFrom utils read.csv\n#\' @importFrom tcltk tclvalue tkgetOpenFile\n#\' @export\nuse_custom_lang <- function(file) {\n  \n  if (!"file" %in% names(match.call())) {\n    if (interactive() && isTRUE(capabilities("tcltk"))) {\n      file <- character()\n      file <- try(tclvalue(tkgetOpenFile(initialdir = "~",\n                                         filetypes = "{{csv files} {*.csv}}")),\n                  silent = TRUE)\n      if (inherits(file, "try-error")) {\n        stop("Window dialog not permitted; \'file\' argument must be specified")\n      }\n      if (file == "") {\n        stop("operation cancelled")\n      }\n    } else {\n      stop("Window dialog not permitted; \'file\' argument must be specified")\n    }\n  }\n  \n  if (is.character(file)) {\n    tr <- read.csv(file = file, strip.white = TRUE, stringsAsFactors = FALSE,\n                   encoding = "UTF-8")\n  } else if (is.data.frame(file)) {\n    # used when called from define_keywords()\n    tr <- file\n  } else {\n    stop("invalid \'file\' argument class: ", class(file))\n  }\n  \n  if (nrow(tr) == ncol(.translations)) {\n    items <- tr$item\n    tr <- as.data.frame(t(tr$custom), stringsAsFactors = FALSE)\n    colnames(tr) <- items\n    rownames(tr) <- "custom"\n  } \n  \n  # Check contents\n  expected <- ncol(.translations)\n  tmp <- tr[,intersect(colnames(.translations), colnames(tr))]\n  tmp <- tmp[,!is.na(tmp[1,])]\n  nb_in   <- ncol(tmp)\n  nb_blank <- sum(as.character(tmp[1,]) == "")\n  cols_missing <- setdiff(colnames(.translations), colnames(tmp))\n  pct_actual <- round((nb_in - nb_blank) * 100 / expected)\n  \n  if (pct_actual < 60) {\n    warning("input file contains only ", pct_actual, "% of translated terms; ",\n            "English will be used for missing terms")\n  } else if (pct_actual < 100) {\n    message("no translation found for the following term(s) ; English will be ",\n    "used as fall-back values:\\n    ", \n            paste(cols_missing, sQuote(.translations[1,cols_missing]),\n                                 sep = " : ", collapse = "\\n    "))\n  }\n  \n  if (nb_in < expected) {\n    tr <- .translations["en",]\n    tr[,colnames(tmp)] <- tmp[1,]\n    rownames(tr) <- "custom"\n  }\n  \n  .st_env$custom_lang <- tr\n  st_options(lang = "custom")\n  # message("Operation successful")\n}\n'