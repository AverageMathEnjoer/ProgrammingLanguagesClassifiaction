b'import Data.List \n\ndata Person = Person String | \n              Celebrity String\n              deriving (Show, Eq)\n\ntype Party = [Person]\n\nknows :: Person -> Person -> Bool\nknows (Person p) (Celebrity c) = True\nknows (Celebrity c) (Person p) = False\nknows (Celebrity c1) (Celebrity c2) = True\n-- Most people at the party don\'t know each other\n-- except for Ernie and Bert\nknows (Person "Ernie") (Person "Bert") = True\nknows (Person "Bert") (Person "Ernie") = True\n-- Everyone knows themselves\nknows (Person p1) (Person p2) \n    | p1 == p2  = True\n    | otherwise = False\n\ntom = Celebrity "Tom Cruise"\ncam = Celebrity "Cameron Diaz"\nmatt = Celebrity "Matt Damon"\n\njohn = Person "John Doe"\njane = Person "Jane Doe"\njoe = Person "Joe Bloggs"\nernie = Person "Ernie"\nbert = Person "Bert"\n\ncelebs :: [Person]\ncelebs = [cam, matt, tom]\n\nparty = [bert, cam, ernie, joe, john, jane, matt, tom]\n\nsplitIntoTwo :: [a] -> [([a], [a])]\nsplitIntoTwo []     = []\nsplitIntoTwo xs     = zip subs $ reverse subs\n                      where subs = subsequences xs\n\nis_clique :: ([Person], [Person]) -> Bool\nis_clique ([], _)   = False\nis_clique (_, [])   = False\nis_clique (cs, ps) = and [p `knows` c | c <- cs, p <- ps] && and [not (c `knows` p) | c <- cs, p <- ps]\n\nfind_clique :: Party -> [Person]\nfind_clique p = head [cs | (cs, ps) <- splitIntoTwo p, is_clique (cs, ps) == True]\n\n\nmain = putStrLn $ show $ find_clique party\n'