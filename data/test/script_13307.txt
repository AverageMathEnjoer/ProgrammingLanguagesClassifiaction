b'\xef\xbb\xbf// UVa221 Urban Elevations\n// Rujia Liu\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\n\nconst int maxn = 100 + 5;\n\nstruct Building {\n  int id;\n  double x, y, w, d, h;\n  bool operator < (const Building& rhs) const {\n    return x < rhs.x || (x == rhs.x && y < rhs.y);\n  }\n} b[maxn];\n\nint n;\ndouble x[maxn*2];\n\nbool cover(int i, double mx) {\n  return b[i].x <= mx && b[i].x+b[i].w >= mx;\n}\n\n// \xe5\x88\xa4\xe6\x96\xad\xe5\xbb\xba\xe7\xad\x91\xe7\x89\xa9i\xe5\x9c\xa8x=mx\xe5\xa4\x84\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x81\nbool visible(int i, double mx) {\n  if(!cover(i, mx)) return false;\n  for(int k = 0; k < n; k++)\n    if(b[k].y < b[i].y && b[k].h >= b[i].h && cover(k, mx)) return false;\n  return true;\n}\n\nint main() {\n  int kase = 0;\n  while(scanf("%d", &n) == 1 && n) {\n    for(int i = 0; i < n; i++) {\n      scanf("%lf%lf%lf%lf%lf", &b[i].x, &b[i].y, &b[i].w, &b[i].d, &b[i].h);\n      x[i*2] = b[i].x; x[i*2+1] = b[i].x + b[i].w;\n      b[i].id = i+1;\n    }\n    sort(b, b+n);\n    sort(x, x+n*2);\n    int m = unique(x, x+n*2) - x; // x\xe5\x9d\x90\xe6\xa0\x87\xe6\x8e\x92\xe5\xba\x8f\xe5\x90\x8e\xe5\x8e\xbb\xe9\x87\x8d\xef\xbc\x8c\xe5\xbe\x97\xe5\x88\xb0m\xe4\xb8\xaa\xe5\x9d\x90\xe6\xa0\x87\n\n    if(kase++) printf("\\n");\n    printf("For map #%d, the visible buildings are numbered as follows:\\n%d", kase, b[0].id);\n    for(int i = 1; i < n; i++) {\n      bool vis = false;\n      for(int j = 0; j < m-1; j++)\n        if(visible(i, (x[j] + x[j+1]) / 2)) { vis = true; break; }\n      if(vis) printf(" %d", b[i].id);\n    }\n    printf("\\n");\n  }\n  return 0;\n}\n'