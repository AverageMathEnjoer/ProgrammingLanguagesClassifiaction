b'\xef\xbb\xbfusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Reflection;\nusing System.Text;\nusing Castle.DynamicProxy;\nusing Core.Aspects.Autofac.Exception;\nusing Core.CrossCuttingConcerns.Logging.Log4Net.Loggers;\n\nnamespace Core.Utilities.Interceptors\n{\n    public class AspectInterceptorSelector:IInterceptorSelector\n    {\n        public IInterceptor[] SelectInterceptors(Type type, MethodInfo method, IInterceptor[] interceptors)\n        {\n            var classAttributes = type.GetCustomAttributes<MethodInterceptionBaseAttribute>\n                (true).ToList();\n            var methodAttributes = type.GetMethod(method.Name)\n                .GetCustomAttributes<MethodInterceptionBaseAttribute>(true);\n            classAttributes.AddRange(methodAttributes);\n            classAttributes.Add(new ExceptionLogAspect(typeof(FileLogger)));\n\n            return classAttributes.OrderBy(x => x.Priority).ToArray();\n        }\n    }\n}\n'