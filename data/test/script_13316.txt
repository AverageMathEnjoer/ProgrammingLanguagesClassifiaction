b'package droidninja.filepicker.adapters\n\nimport android.content.Context\nimport android.net.Uri\nimport androidx.recyclerview.widget.RecyclerView\nimport android.text.format.Formatter\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.Filter\nimport android.widget.Filterable\nimport android.widget.ImageView\nimport android.widget.TextView\n\nimport java.util.ArrayList\n\nimport droidninja.filepicker.FilePickerConst\nimport droidninja.filepicker.PickerManager\nimport droidninja.filepicker.R\nimport droidninja.filepicker.models.Document\nimport droidninja.filepicker.views.SmoothCheckBox\n\n/**\n * Created by droidNinja on 29/07/16.\n */\nclass FileListAdapter(private val context: Context, private var mFilteredList: List<Document>, selectedPaths: MutableList<Uri>,\n                      private val mListener: FileAdapterListener?) : SelectableAdapter<FileListAdapter.FileViewHolder, Document>(mFilteredList, selectedPaths), Filterable {\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): FileViewHolder {\n        val itemView = LayoutInflater.from(context).inflate(R.layout.item_doc_layout, parent, false)\n\n        return FileViewHolder(itemView)\n    }\n\n    override fun onBindViewHolder(holder: FileViewHolder, position: Int) {\n        val document = mFilteredList[position]\n\n        val drawable = document.fileType?.drawable ?: R.drawable.icon_file_unknown\n        holder.imageView.setImageResource(drawable)\n        if (drawable == R.drawable.icon_file_unknown || drawable == R.drawable.icon_file_pdf) {\n            holder.fileTypeTv.visibility = View.VISIBLE\n            holder.fileTypeTv.text = document.fileType?.title\n        } else {\n            holder.fileTypeTv.visibility = View.GONE\n        }\n\n        holder.fileNameTextView.text = document.name\n        holder.fileSizeTextView.text = Formatter.formatShortFileSize(context, java.lang.Long.parseLong(document.size\n                ?: "0"))\n\n        holder.itemView.setOnClickListener { onItemClicked(document, holder) }\n\n        //in some cases, it will prevent unwanted situations\n        holder.checkBox.setOnCheckedChangeListener(null)\n        holder.checkBox.setOnClickListener { onItemClicked(document, holder) }\n\n        //if true, your checkbox will be selected, else unselected\n        holder.checkBox.isChecked = isSelected(document)\n\n        holder.itemView.setBackgroundResource(\n                if (isSelected(document)) R.color.bg_gray else android.R.color.white)\n        holder.checkBox.visibility = if (isSelected(document)) View.VISIBLE else View.GONE\n\n        holder.checkBox.setOnCheckedChangeListener(object : SmoothCheckBox.OnCheckedChangeListener {\n            override fun onCheckedChanged(checkBox: SmoothCheckBox, isChecked: Boolean) {\n                toggleSelection(document)\n                if (isChecked) {\n                    PickerManager.add(document.path, FilePickerConst.FILE_TYPE_DOCUMENT)\n                } else {\n                    PickerManager.remove(document.path, FilePickerConst.FILE_TYPE_DOCUMENT)\n                }\n                holder.itemView.setBackgroundResource(if (isChecked) R.color.bg_gray else android.R.color.white)\n            }\n        })\n    }\n\n    private fun onItemClicked(document: Document, holder: FileViewHolder) {\n        if (PickerManager.getMaxCount() == 1) {\n            PickerManager.add(document.path, FilePickerConst.FILE_TYPE_DOCUMENT)\n        } else {\n            if (holder.checkBox.isChecked) {\n                holder.checkBox.setChecked(!holder.checkBox.isChecked, true)\n                holder.checkBox.visibility = View.GONE\n            } else if (PickerManager.shouldAdd()) {\n                holder.checkBox.setChecked(!holder.checkBox.isChecked, true)\n                holder.checkBox.visibility = View.VISIBLE\n            }\n        }\n\n        mListener?.onItemSelected()\n    }\n\n    override fun getItemCount(): Int {\n        return mFilteredList.size\n    }\n\n    override fun getFilter(): Filter {\n        return object : Filter() {\n            override fun performFiltering(charSequence: CharSequence): Filter.FilterResults {\n\n                val charString = charSequence.toString()\n\n                if (charString.isEmpty()) {\n\n                    mFilteredList = items\n                } else {\n\n                    val filteredList = ArrayList<Document>()\n\n                    for (document in items) {\n\n                        if (document.name.toLowerCase().contains(charString)) {\n\n                            filteredList.add(document)\n                        }\n                    }\n\n                    mFilteredList = filteredList\n                }\n\n                val filterResults = Filter.FilterResults()\n                filterResults.values = mFilteredList\n                return filterResults\n            }\n\n            @Suppress("UNCHECKED_CAST")\n            override fun publishResults(charSequence: CharSequence, filterResults: Filter.FilterResults) {\n                mFilteredList = filterResults.values as List<Document>\n                notifyDataSetChanged()\n            }\n        }\n    }\n\n    class FileViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        internal var fileTypeTv: TextView\n\n        internal var checkBox: SmoothCheckBox\n\n        internal var imageView: ImageView\n\n        internal var fileNameTextView: TextView\n\n        internal var fileSizeTextView: TextView\n\n        init {\n            checkBox = itemView.findViewById(R.id.checkbox)\n            imageView = itemView.findViewById(R.id.file_iv)\n            fileNameTextView = itemView.findViewById(R.id.file_name_tv)\n            fileTypeTv = itemView.findViewById(R.id.file_type_tv)\n            fileSizeTextView = itemView.findViewById(R.id.file_size_tv)\n        }\n    }\n}\n'