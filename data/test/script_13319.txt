b'{-# LANGUAGE DataKinds #-}\n{-# LANGUAGE TypeApplications #-}\n{-# LANGUAGE TypeFamilies #-}\n\nmodule Cachix.Client.Servant\n  ( isErr,\n    cachixClient,\n    deployClientV1,\n    deployClientV2,\n  )\nwhere\n\nimport qualified Cachix.API as API\nimport qualified Cachix.API.Deploy.V1 as API.Deploy.V1\nimport qualified Cachix.API.Deploy.V2 as API.Deploy.V2\nimport Cachix.Types.ContentTypes ()\nimport Network.HTTP.Types (Status)\nimport Protolude\nimport Servant.API.Generic\nimport Servant.Auth.Client ()\nimport qualified Servant.Client\nimport Servant.Client.Generic (AsClientT)\nimport Servant.Client.Streaming\nimport Servant.Conduit ()\n\nisErr :: ClientError -> Status -> Bool\nisErr (Servant.Client.FailureResponse _ resp) status\n  | Servant.Client.responseStatusCode resp == status = True\nisErr _ _ = False\n\ncachixClient :: API.BinaryCacheAPI (AsClientT ClientM)\ncachixClient = fromServant $ client (Proxy @API.API)\n\ndeployClientV1 :: API.Deploy.V1.DeployAPI (AsClientT ClientM)\ndeployClientV1 = fromServant $ client (Proxy @API.Deploy.V1.API)\n\ndeployClientV2 :: API.Deploy.V2.DeployAPI (AsClientT ClientM)\ndeployClientV2 = fromServant $ client (Proxy @API.Deploy.V2.API)\n'