b'/*\n * Copyright 2013 - 2016 Mario Arias\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.funktionale.validation\n\nimport org.funktionale.either.Disjunction\n\nclass Validation<out E : Any>(vararg disjunctionSequence: Disjunction<E, *>) {\n\n    val failures: List<E> = disjunctionSequence.filter { it.isLeft() }.map { it.swap().get() }\n\n    val hasFailures: Boolean = failures.isNotEmpty()\n\n}\n\nfun <L : Any, R : Any, R1 : Any, R2 : Any> validate(\n        p1: Disjunction<L, R1>,\n        p2: Disjunction<L, R2>,\n        ifValid: (R1, R2) -> R\n): Disjunction<List<L>, R> {\n    val validation = Validation(p1, p2)\n    return if (validation.hasFailures) {\n        Disjunction.Left(validation.failures)\n    } else {\n        Disjunction.Right(ifValid(p1.get(), p2.get()))\n    }\n}\n\nfun <L : Any, R : Any, R1 : Any, R2 : Any, R3 : Any> validate(\n        p1: Disjunction<L, R1>,\n        p2: Disjunction<L, R2>,\n        p3: Disjunction<L, R3>,\n        ifValid: (R1, R2, R3) -> R\n): Disjunction<List<L>, R> {\n    val validation = Validation(p1, p2, p3)\n    return if (validation.hasFailures) {\n        Disjunction.Left(validation.failures)\n    } else {\n        Disjunction.Right(ifValid(p1.get(), p2.get(), p3.get()))\n    }\n}\n\nfun <L : Any, R : Any, R1 : Any, R2 : Any, R3 : Any, R4 : Any> validate(\n        p1: Disjunction<L, R1>,\n        p2: Disjunction<L, R2>,\n        p3: Disjunction<L, R3>,\n        p4: Disjunction<L, R4>,\n        ifValid: (R1, R2, R3, R4) -> R\n): Disjunction<List<L>, R> {\n    val validation = Validation(p1, p2, p3, p4)\n    return if (validation.hasFailures) {\n        Disjunction.Left(validation.failures)\n    } else {\n        Disjunction.Right(ifValid(p1.get(), p2.get(), p3.get(), p4.get()))\n    }\n}\n\nfun <L : Any, R : Any, R1 : Any, R2 : Any, R3 : Any, R4 : Any, R5 : Any> validate(\n        p1: Disjunction<L, R1>,\n        p2: Disjunction<L, R2>,\n        p3: Disjunction<L, R3>,\n        p4: Disjunction<L, R4>,\n        p5: Disjunction<L, R5>,\n        ifValid: (R1, R2, R3, R4, R5) -> R\n): Disjunction<List<L>, R> {\n    val validation = Validation(p1, p2, p3, p4, p5)\n    return if (validation.hasFailures) {\n        Disjunction.Left(validation.failures)\n    } else {\n        Disjunction.Right(ifValid(p1.get(), p2.get(), p3.get(), p4.get(), p5.get()))\n    }\n}\n\nfun <L : Any, R : Any, R1 : Any, R2 : Any, R3 : Any, R4 : Any, R5 : Any, R6 : Any> validate(\n        p1: Disjunction<L, R1>,\n        p2: Disjunction<L, R2>,\n        p3: Disjunction<L, R3>,\n        p4: Disjunction<L, R4>,\n        p5: Disjunction<L, R5>,\n        p6: Disjunction<L, R6>,\n        ifValid: (R1, R2, R3, R4, R5, R6) -> R\n): Disjunction<List<L>, R> {\n    val validation = Validation(p1, p2, p3, p4, p5, p6)\n    return if (validation.hasFailures) {\n        Disjunction.Left(validation.failures)\n    } else {\n        Disjunction.Right(ifValid(p1.get(), p2.get(), p3.get(), p4.get(), p5.get(), p6.get()))\n    }\n}\n\nfun <L : Any, R : Any, R1 : Any, R2 : Any, R3 : Any, R4 : Any, R5 : Any, R6 : Any, R7 : Any> validate(\n        p1: Disjunction<L, R1>,\n        p2: Disjunction<L, R2>,\n        p3: Disjunction<L, R3>,\n        p4: Disjunction<L, R4>,\n        p5: Disjunction<L, R5>,\n        p6: Disjunction<L, R6>,\n        p7: Disjunction<L, R7>,\n        ifValid: (R1, R2, R3, R4, R5, R6, R7) -> R\n): Disjunction<List<L>, R> {\n    val validation = Validation(p1, p2, p3, p4, p5, p6, p7)\n    return if (validation.hasFailures) {\n        Disjunction.Left(validation.failures)\n    } else {\n        Disjunction.Right(ifValid(p1.get(), p2.get(), p3.get(), p4.get(), p5.get(), p6.get(), p7.get()))\n    }\n}\n\nfun <L : Any, R : Any, R1 : Any, R2 : Any, R3 : Any, R4 : Any, R5 : Any, R6 : Any, R7 : Any, R8 : Any> validate(\n        p1: Disjunction<L, R1>,\n        p2: Disjunction<L, R2>,\n        p3: Disjunction<L, R3>,\n        p4: Disjunction<L, R4>,\n        p5: Disjunction<L, R5>,\n        p6: Disjunction<L, R6>,\n        p7: Disjunction<L, R7>,\n        p8: Disjunction<L, R8>,\n        ifValid: (R1, R2, R3, R4, R5, R6, R7, R8) -> R\n): Disjunction<List<L>, R> {\n    val validation = Validation(p1, p2, p3, p4, p5, p6, p7, p8)\n    return if (validation.hasFailures) {\n        Disjunction.Left(validation.failures)\n    } else {\n        Disjunction.Right(ifValid(p1.get(), p2.get(), p3.get(), p4.get(), p5.get(), p6.get(), p7.get(), p8.get()))\n    }\n}\n\nfun <L : Any, R : Any, R1 : Any, R2 : Any, R3 : Any, R4 : Any, R5 : Any, R6 : Any, R7 : Any, R8 : Any, R9 : Any> validate(\n        p1: Disjunction<L, R1>,\n        p2: Disjunction<L, R2>,\n        p3: Disjunction<L, R3>,\n        p4: Disjunction<L, R4>,\n        p5: Disjunction<L, R5>,\n        p6: Disjunction<L, R6>,\n        p7: Disjunction<L, R7>,\n        p8: Disjunction<L, R8>,\n        p9: Disjunction<L, R9>,\n        ifValid: (R1, R2, R3, R4, R5, R6, R7, R8, R9) -> R\n): Disjunction<List<L>, R> {\n    val validation = Validation(p1, p2, p3, p4, p5, p6, p7, p8, p9)\n    return if (validation.hasFailures) {\n        Disjunction.Left(validation.failures)\n    } else {\n        Disjunction.Right(ifValid(p1.get(), p2.get(), p3.get(), p4.get(), p5.get(), p6.get(), p7.get(), p8.get(), p9.get()))\n    }\n}\n\nfun <L : Any, R : Any, R1 : Any, R2 : Any, R3 : Any, R4 : Any, R5 : Any, R6 : Any, R7 : Any, R8 : Any, R9 : Any, R10 : Any> validate(\n        p1: Disjunction<L, R1>,\n        p2: Disjunction<L, R2>,\n        p3: Disjunction<L, R3>,\n        p4: Disjunction<L, R4>,\n        p5: Disjunction<L, R5>,\n        p6: Disjunction<L, R6>,\n        p7: Disjunction<L, R7>,\n        p8: Disjunction<L, R8>,\n        p9: Disjunction<L, R9>,\n        p10: Disjunction<L, R10>,\n        ifValid: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10) -> R\n): Disjunction<List<L>, R> {\n    val validation = Validation(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10)\n    return if (validation.hasFailures) {\n        Disjunction.Left(validation.failures)\n    } else {\n        Disjunction.Right(ifValid(p1.get(), p2.get(), p3.get(), p4.get(), p5.get(), p6.get(), p7.get(), p8.get(), p9.get(), p10.get()))\n    }\n}\n\nfun <L : Any, R : Any, R1 : Any, R2 : Any, R3 : Any, R4 : Any, R5 : Any, R6 : Any, R7 : Any, R8 : Any, R9 : Any, R10 : Any, R11 : Any> validate(\n        p1: Disjunction<L, R1>,\n        p2: Disjunction<L, R2>,\n        p3: Disjunction<L, R3>,\n        p4: Disjunction<L, R4>,\n        p5: Disjunction<L, R5>,\n        p6: Disjunction<L, R6>,\n        p7: Disjunction<L, R7>,\n        p8: Disjunction<L, R8>,\n        p9: Disjunction<L, R9>,\n        p10: Disjunction<L, R10>,\n        p11: Disjunction<L, R11>,\n        ifValid: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11) -> R\n): Disjunction<List<L>, R> {\n    val validation = Validation(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11)\n    return if (validation.hasFailures) {\n        Disjunction.Left(validation.failures)\n    } else {\n        Disjunction.Right(ifValid(p1.get(), p2.get(), p3.get(), p4.get(), p5.get(), p6.get(), p7.get(), p8.get(), p9.get(), p10.get(), p11.get()))\n    }\n}\n\nfun <L : Any, R : Any, R1 : Any, R2 : Any, R3 : Any, R4 : Any, R5 : Any, R6 : Any, R7 : Any, R8 : Any, R9 : Any, R10 : Any, R11 : Any, R12 : Any> validate(\n        p1: Disjunction<L, R1>,\n        p2: Disjunction<L, R2>,\n        p3: Disjunction<L, R3>,\n        p4: Disjunction<L, R4>,\n        p5: Disjunction<L, R5>,\n        p6: Disjunction<L, R6>,\n        p7: Disjunction<L, R7>,\n        p8: Disjunction<L, R8>,\n        p9: Disjunction<L, R9>,\n        p10: Disjunction<L, R10>,\n        p11: Disjunction<L, R11>,\n        p12: Disjunction<L, R12>,\n        ifValid: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12) -> R\n): Disjunction<List<L>, R> {\n    val validation = Validation(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12)\n    return if (validation.hasFailures) {\n        Disjunction.Left(validation.failures)\n    } else {\n        Disjunction.Right(ifValid(p1.get(), p2.get(), p3.get(), p4.get(), p5.get(), p6.get(), p7.get(), p8.get(), p9.get(), p10.get(), p11.get(), p12.get()))\n    }\n}\n\nfun <L : Any, R : Any, R1 : Any, R2 : Any, R3 : Any, R4 : Any, R5 : Any, R6 : Any, R7 : Any, R8 : Any, R9 : Any, R10 : Any, R11 : Any, R12 : Any, R13 : Any> validate(\n        p1: Disjunction<L, R1>,\n        p2: Disjunction<L, R2>,\n        p3: Disjunction<L, R3>,\n        p4: Disjunction<L, R4>,\n        p5: Disjunction<L, R5>,\n        p6: Disjunction<L, R6>,\n        p7: Disjunction<L, R7>,\n        p8: Disjunction<L, R8>,\n        p9: Disjunction<L, R9>,\n        p10: Disjunction<L, R10>,\n        p11: Disjunction<L, R11>,\n        p12: Disjunction<L, R12>,\n        p13: Disjunction<L, R13>,\n        ifValid: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13) -> R\n): Disjunction<List<L>, R> {\n    val validation = Validation(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13)\n    return if (validation.hasFailures) {\n        Disjunction.Left(validation.failures)\n    } else {\n        Disjunction.Right(ifValid(p1.get(), p2.get(), p3.get(), p4.get(), p5.get(), p6.get(), p7.get(), p8.get(), p9.get(), p10.get(), p11.get(), p12.get(), p13.get()))\n    }\n}\n\nfun <L : Any, R : Any, R1 : Any, R2 : Any, R3 : Any, R4 : Any, R5 : Any, R6 : Any, R7 : Any, R8 : Any, R9 : Any, R10 : Any, R11 : Any, R12 : Any, R13 : Any, R14 : Any> validate(\n        p1: Disjunction<L, R1>,\n        p2: Disjunction<L, R2>,\n        p3: Disjunction<L, R3>,\n        p4: Disjunction<L, R4>,\n        p5: Disjunction<L, R5>,\n        p6: Disjunction<L, R6>,\n        p7: Disjunction<L, R7>,\n        p8: Disjunction<L, R8>,\n        p9: Disjunction<L, R9>,\n        p10: Disjunction<L, R10>,\n        p11: Disjunction<L, R11>,\n        p12: Disjunction<L, R12>,\n        p13: Disjunction<L, R13>,\n        p14: Disjunction<L, R14>,\n        ifValid: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14) -> R\n): Disjunction<List<L>, R> {\n    val validation = Validation(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14)\n    return if (validation.hasFailures) {\n        Disjunction.Left(validation.failures)\n    } else {\n        Disjunction.Right(ifValid(p1.get(), p2.get(), p3.get(), p4.get(), p5.get(), p6.get(), p7.get(), p8.get(), p9.get(), p10.get(), p11.get(), p12.get(), p13.get(), p14.get()))\n    }\n}\n\nfun <L : Any, R : Any, R1 : Any, R2 : Any, R3 : Any, R4 : Any, R5 : Any, R6 : Any, R7 : Any, R8 : Any, R9 : Any, R10 : Any, R11 : Any, R12 : Any, R13 : Any, R14 : Any, R15 : Any> validate(\n        p1: Disjunction<L, R1>,\n        p2: Disjunction<L, R2>,\n        p3: Disjunction<L, R3>,\n        p4: Disjunction<L, R4>,\n        p5: Disjunction<L, R5>,\n        p6: Disjunction<L, R6>,\n        p7: Disjunction<L, R7>,\n        p8: Disjunction<L, R8>,\n        p9: Disjunction<L, R9>,\n        p10: Disjunction<L, R10>,\n        p11: Disjunction<L, R11>,\n        p12: Disjunction<L, R12>,\n        p13: Disjunction<L, R13>,\n        p14: Disjunction<L, R14>,\n        p15: Disjunction<L, R15>,\n        ifValid: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15) -> R\n): Disjunction<List<L>, R> {\n    val validation = Validation(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15)\n    return if (validation.hasFailures) {\n        Disjunction.Left(validation.failures)\n    } else {\n        Disjunction.Right(ifValid(p1.get(), p2.get(), p3.get(), p4.get(), p5.get(), p6.get(), p7.get(), p8.get(), p9.get(), p10.get(), p11.get(), p12.get(), p13.get(), p14.get(), p15.get()))\n    }\n}\n\nfun <L : Any, R : Any, R1 : Any, R2 : Any, R3 : Any, R4 : Any, R5 : Any, R6 : Any, R7 : Any, R8 : Any, R9 : Any, R10 : Any, R11 : Any, R12 : Any, R13 : Any, R14 : Any, R15 : Any, R16 : Any> validate(\n        p1: Disjunction<L, R1>,\n        p2: Disjunction<L, R2>,\n        p3: Disjunction<L, R3>,\n        p4: Disjunction<L, R4>,\n        p5: Disjunction<L, R5>,\n        p6: Disjunction<L, R6>,\n        p7: Disjunction<L, R7>,\n        p8: Disjunction<L, R8>,\n        p9: Disjunction<L, R9>,\n        p10: Disjunction<L, R10>,\n        p11: Disjunction<L, R11>,\n        p12: Disjunction<L, R12>,\n        p13: Disjunction<L, R13>,\n        p14: Disjunction<L, R14>,\n        p15: Disjunction<L, R15>,\n        p16: Disjunction<L, R16>,\n        ifValid: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16) -> R\n): Disjunction<List<L>, R> {\n    val validation = Validation(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16)\n    return if (validation.hasFailures) {\n        Disjunction.Left(validation.failures)\n    } else {\n        Disjunction.Right(ifValid(p1.get(), p2.get(), p3.get(), p4.get(), p5.get(), p6.get(), p7.get(), p8.get(), p9.get(), p10.get(), p11.get(), p12.get(), p13.get(), p14.get(), p15.get(), p16.get()))\n    }\n}\n\nfun <L : Any, R : Any, R1 : Any, R2 : Any, R3 : Any, R4 : Any, R5 : Any, R6 : Any, R7 : Any, R8 : Any, R9 : Any, R10 : Any, R11 : Any, R12 : Any, R13 : Any, R14 : Any, R15 : Any, R16 : Any, R17 : Any> validate(\n        p1: Disjunction<L, R1>,\n        p2: Disjunction<L, R2>,\n        p3: Disjunction<L, R3>,\n        p4: Disjunction<L, R4>,\n        p5: Disjunction<L, R5>,\n        p6: Disjunction<L, R6>,\n        p7: Disjunction<L, R7>,\n        p8: Disjunction<L, R8>,\n        p9: Disjunction<L, R9>,\n        p10: Disjunction<L, R10>,\n        p11: Disjunction<L, R11>,\n        p12: Disjunction<L, R12>,\n        p13: Disjunction<L, R13>,\n        p14: Disjunction<L, R14>,\n        p15: Disjunction<L, R15>,\n        p16: Disjunction<L, R16>,\n        p17: Disjunction<L, R17>,\n        ifValid: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17) -> R\n): Disjunction<List<L>, R> {\n    val validation = Validation(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17)\n    return if (validation.hasFailures) {\n        Disjunction.Left(validation.failures)\n    } else {\n        Disjunction.Right(ifValid(p1.get(), p2.get(), p3.get(), p4.get(), p5.get(), p6.get(), p7.get(), p8.get(), p9.get(), p10.get(), p11.get(), p12.get(), p13.get(), p14.get(), p15.get(), p16.get(), p17.get()))\n    }\n}\n\nfun <L : Any, R : Any, R1 : Any, R2 : Any, R3 : Any, R4 : Any, R5 : Any, R6 : Any, R7 : Any, R8 : Any, R9 : Any, R10 : Any, R11 : Any, R12 : Any, R13 : Any, R14 : Any, R15 : Any, R16 : Any, R17 : Any, R18 : Any> validate(\n        p1: Disjunction<L, R1>,\n        p2: Disjunction<L, R2>,\n        p3: Disjunction<L, R3>,\n        p4: Disjunction<L, R4>,\n        p5: Disjunction<L, R5>,\n        p6: Disjunction<L, R6>,\n        p7: Disjunction<L, R7>,\n        p8: Disjunction<L, R8>,\n        p9: Disjunction<L, R9>,\n        p10: Disjunction<L, R10>,\n        p11: Disjunction<L, R11>,\n        p12: Disjunction<L, R12>,\n        p13: Disjunction<L, R13>,\n        p14: Disjunction<L, R14>,\n        p15: Disjunction<L, R15>,\n        p16: Disjunction<L, R16>,\n        p17: Disjunction<L, R17>,\n        p18: Disjunction<L, R18>,\n        ifValid: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18) -> R\n): Disjunction<List<L>, R> {\n    val validation = Validation(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18)\n    return if (validation.hasFailures) {\n        Disjunction.Left(validation.failures)\n    } else {\n        Disjunction.Right(ifValid(p1.get(), p2.get(), p3.get(), p4.get(), p5.get(), p6.get(), p7.get(), p8.get(), p9.get(), p10.get(), p11.get(), p12.get(), p13.get(), p14.get(), p15.get(), p16.get(), p17.get(), p18.get()))\n    }\n}\n\nfun <L : Any, R : Any, R1 : Any, R2 : Any, R3 : Any, R4 : Any, R5 : Any, R6 : Any, R7 : Any, R8 : Any, R9 : Any, R10 : Any, R11 : Any, R12 : Any, R13 : Any, R14 : Any, R15 : Any, R16 : Any, R17 : Any, R18 : Any, R19 : Any> validate(\n        p1: Disjunction<L, R1>,\n        p2: Disjunction<L, R2>,\n        p3: Disjunction<L, R3>,\n        p4: Disjunction<L, R4>,\n        p5: Disjunction<L, R5>,\n        p6: Disjunction<L, R6>,\n        p7: Disjunction<L, R7>,\n        p8: Disjunction<L, R8>,\n        p9: Disjunction<L, R9>,\n        p10: Disjunction<L, R10>,\n        p11: Disjunction<L, R11>,\n        p12: Disjunction<L, R12>,\n        p13: Disjunction<L, R13>,\n        p14: Disjunction<L, R14>,\n        p15: Disjunction<L, R15>,\n        p16: Disjunction<L, R16>,\n        p17: Disjunction<L, R17>,\n        p18: Disjunction<L, R18>,\n        p19: Disjunction<L, R19>,\n        ifValid: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19) -> R\n): Disjunction<List<L>, R> {\n    val validation = Validation(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19)\n    return if (validation.hasFailures) {\n        Disjunction.Left(validation.failures)\n    } else {\n        Disjunction.Right(ifValid(p1.get(), p2.get(), p3.get(), p4.get(), p5.get(), p6.get(), p7.get(), p8.get(), p9.get(), p10.get(), p11.get(), p12.get(), p13.get(), p14.get(), p15.get(), p16.get(), p17.get(), p18.get(), p19.get()))\n    }\n}\n\nfun <L : Any, R : Any, R1 : Any, R2 : Any, R3 : Any, R4 : Any, R5 : Any, R6 : Any, R7 : Any, R8 : Any, R9 : Any, R10 : Any, R11 : Any, R12 : Any, R13 : Any, R14 : Any, R15 : Any, R16 : Any, R17 : Any, R18 : Any, R19 : Any, R20 : Any> validate(\n        p1: Disjunction<L, R1>,\n        p2: Disjunction<L, R2>,\n        p3: Disjunction<L, R3>,\n        p4: Disjunction<L, R4>,\n        p5: Disjunction<L, R5>,\n        p6: Disjunction<L, R6>,\n        p7: Disjunction<L, R7>,\n        p8: Disjunction<L, R8>,\n        p9: Disjunction<L, R9>,\n        p10: Disjunction<L, R10>,\n        p11: Disjunction<L, R11>,\n        p12: Disjunction<L, R12>,\n        p13: Disjunction<L, R13>,\n        p14: Disjunction<L, R14>,\n        p15: Disjunction<L, R15>,\n        p16: Disjunction<L, R16>,\n        p17: Disjunction<L, R17>,\n        p18: Disjunction<L, R18>,\n        p19: Disjunction<L, R19>,\n        p20: Disjunction<L, R20>,\n        ifValid: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20) -> R\n): Disjunction<List<L>, R> {\n    val validation = Validation(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20)\n    return if (validation.hasFailures) {\n        Disjunction.Left(validation.failures)\n    } else {\n        Disjunction.Right(ifValid(p1.get(), p2.get(), p3.get(), p4.get(), p5.get(), p6.get(), p7.get(), p8.get(), p9.get(), p10.get(), p11.get(), p12.get(), p13.get(), p14.get(), p15.get(), p16.get(), p17.get(), p18.get(), p19.get(), p20.get()))\n    }\n}\n\nfun <L : Any, R : Any, R1 : Any, R2 : Any, R3 : Any, R4 : Any, R5 : Any, R6 : Any, R7 : Any, R8 : Any, R9 : Any, R10 : Any, R11 : Any, R12 : Any, R13 : Any, R14 : Any, R15 : Any, R16 : Any, R17 : Any, R18 : Any, R19 : Any, R20 : Any, R21 : Any> validate(\n        p1: Disjunction<L, R1>,\n        p2: Disjunction<L, R2>,\n        p3: Disjunction<L, R3>,\n        p4: Disjunction<L, R4>,\n        p5: Disjunction<L, R5>,\n        p6: Disjunction<L, R6>,\n        p7: Disjunction<L, R7>,\n        p8: Disjunction<L, R8>,\n        p9: Disjunction<L, R9>,\n        p10: Disjunction<L, R10>,\n        p11: Disjunction<L, R11>,\n        p12: Disjunction<L, R12>,\n        p13: Disjunction<L, R13>,\n        p14: Disjunction<L, R14>,\n        p15: Disjunction<L, R15>,\n        p16: Disjunction<L, R16>,\n        p17: Disjunction<L, R17>,\n        p18: Disjunction<L, R18>,\n        p19: Disjunction<L, R19>,\n        p20: Disjunction<L, R20>,\n        p21: Disjunction<L, R21>,\n        ifValid: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21) -> R\n): Disjunction<List<L>, R> {\n    val validation = Validation(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21)\n    return if (validation.hasFailures) {\n        Disjunction.Left(validation.failures)\n    } else {\n        Disjunction.Right(ifValid(p1.get(), p2.get(), p3.get(), p4.get(), p5.get(), p6.get(), p7.get(), p8.get(), p9.get(), p10.get(), p11.get(), p12.get(), p13.get(), p14.get(), p15.get(), p16.get(), p17.get(), p18.get(), p19.get(), p20.get(), p21.get()))\n    }\n}\n\nfun <L : Any, R : Any, R1 : Any, R2 : Any, R3 : Any, R4 : Any, R5 : Any, R6 : Any, R7 : Any, R8 : Any, R9 : Any, R10 : Any, R11 : Any, R12 : Any, R13 : Any, R14 : Any, R15 : Any, R16 : Any, R17 : Any, R18 : Any, R19 : Any, R20 : Any, R21 : Any, R22 : Any> validate(\n        p1: Disjunction<L, R1>,\n        p2: Disjunction<L, R2>,\n        p3: Disjunction<L, R3>,\n        p4: Disjunction<L, R4>,\n        p5: Disjunction<L, R5>,\n        p6: Disjunction<L, R6>,\n        p7: Disjunction<L, R7>,\n        p8: Disjunction<L, R8>,\n        p9: Disjunction<L, R9>,\n        p10: Disjunction<L, R10>,\n        p11: Disjunction<L, R11>,\n        p12: Disjunction<L, R12>,\n        p13: Disjunction<L, R13>,\n        p14: Disjunction<L, R14>,\n        p15: Disjunction<L, R15>,\n        p16: Disjunction<L, R16>,\n        p17: Disjunction<L, R17>,\n        p18: Disjunction<L, R18>,\n        p19: Disjunction<L, R19>,\n        p20: Disjunction<L, R20>,\n        p21: Disjunction<L, R21>,\n        p22: Disjunction<L, R22>,\n        ifValid: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22) -> R\n): Disjunction<List<L>, R> {\n    val validation = Validation(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22)\n    return if (validation.hasFailures) {\n        Disjunction.Left(validation.failures)\n    } else {\n        Disjunction.Right(ifValid(p1.get(), p2.get(), p3.get(), p4.get(), p5.get(), p6.get(), p7.get(), p8.get(), p9.get(), p10.get(), p11.get(), p12.get(), p13.get(), p14.get(), p15.get(), p16.get(), p17.get(), p18.get(), p19.get(), p20.get(), p21.get(), p22.get()))\n    }\n}\n\n'