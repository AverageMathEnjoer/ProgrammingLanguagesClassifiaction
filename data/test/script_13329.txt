b'package com.loper7.date_time_picker.dialog\n\nimport android.annotation.SuppressLint\nimport android.content.Context\nimport android.graphics.Color\nimport android.graphics.drawable.GradientDrawable\nimport android.os.Bundle\nimport android.text.Html\nimport android.util.Log\nimport android.view.View\nimport android.widget.FrameLayout\nimport android.widget.LinearLayout\nimport android.widget.TextView\nimport androidx.annotation.ColorInt\nimport androidx.core.content.ContextCompat\nimport com.google.android.material.bottomsheet.BottomSheetBehavior\nimport com.google.android.material.bottomsheet.BottomSheetDialog\nimport com.loper7.date_time_picker.DateTimeConfig\nimport com.loper7.date_time_picker.DateTimeConfig.DATE_DEFAULT\nimport com.loper7.date_time_picker.DateTimeConfig.DATE_LUNAR\nimport com.loper7.date_time_picker.DateTimePicker\nimport com.loper7.date_time_picker.R\nimport com.loper7.date_time_picker.utils.StringUtils\nimport com.loper7.date_time_picker.utils.lunar.Lunar\nimport org.jetbrains.annotations.NotNull\nimport java.util.*\n\n\n/**\n *\n * @ProjectName:    DatePicker\n * @Package:        com.loper7.date_time_picker.dialog\n * @ClassName:      DateDateDateTimePickerDialog\n * @CreateDate:     2020/3/3 0003 11:38\n * @Description:\n * @Author:         LOPER7\n * @Email:          loper7@163.com\n */\nopen class CardDatePickerDialog(context: Context) :\n    BottomSheetDialog(context, R.style.DateTimePicker_BottomSheetDialog), View.OnClickListener {\n    companion object {\n        const val CARD = 0 //\xe5\x8d\xa1\xe7\x89\x87\n        const val CUBE = 1 //\xe6\x96\xb9\xe5\xbd\xa2\n        const val STACK = 2 //\xe9\xa1\xb6\xe9\x83\xa8\xe5\x9c\x86\xe8\xa7\x92\n\n        fun builder(context: Context): Builder {\n            return lazy { Builder(context) }.value\n        }\n    }\n\n    private var builder: Builder? = null\n\n    private var tv_cancel: TextView? = null\n    private var tv_submit: TextView? = null\n    private var tv_title: TextView? = null\n    private var tv_choose_date: TextView? = null\n    private var btn_today: TextView? = null\n    private var datePicker: DateTimePicker? = null\n    private var tv_go_back: TextView? = null\n    private var linear_now: LinearLayout? = null\n    private var linear_bg: LinearLayout? = null\n    private var mBehavior: BottomSheetBehavior<FrameLayout>? = null\n    private var divider_top:View?=null\n    private var divider_bottom:View?=null\n    private var divider_line:View?=null\n\n    private var millisecond: Long = 0\n\n\n    constructor(context: Context, builder: Builder) : this(context) {\n        this.builder = builder\n    }\n\n    init {\n        builder = builder(context)\n    }\n\n\n    @SuppressLint("SetTextI18n")\n    override fun onCreate(savedInstanceState: Bundle?) {\n        setContentView(R.layout.dt_dialog_time_picker)\n        super.onCreate(savedInstanceState)\n\n\n        val bottomSheet = delegate.findViewById<FrameLayout>(R.id.design_bottom_sheet)\n        bottomSheet!!.setBackgroundColor(Color.TRANSPARENT)\n\n\n        tv_cancel = findViewById(R.id.dialog_cancel)\n        tv_submit = findViewById(R.id.dialog_submit)\n        datePicker = findViewById(R.id.dateTimePicker)\n        tv_title = findViewById(R.id.tv_title)\n        btn_today = findViewById(R.id.btn_today)\n        tv_choose_date = findViewById(R.id.tv_choose_date)\n        tv_go_back = findViewById(R.id.tv_go_back)\n        linear_now = findViewById(R.id.linear_now)\n        linear_bg = findViewById(R.id.linear_bg)\n        divider_top = findViewById(R.id.divider_top)\n        divider_bottom = findViewById(R.id.divider_bottom)\n        divider_line = findViewById(R.id.dialog_select_border)\n\n        mBehavior = BottomSheetBehavior.from(bottomSheet)\n\n        //\xe6\xbb\x91\xe5\x8a\xa8\xe5\x85\xb3\xe9\x97\xad\n        mBehavior?.isHideable = builder?.touchHideable ?: true\n\n        //\xe8\x83\x8c\xe6\x99\xaf\xe6\xa8\xa1\xe5\xbc\x8f\n        if (builder!!.model != 0) {\n            val parmas = LinearLayout.LayoutParams(linear_bg!!.layoutParams)\n            when (builder!!.model) {\n                CARD -> {\n                    parmas.setMargins(dip2px(12f), dip2px(12f), dip2px(12f), dip2px(12f))\n                    linear_bg!!.layoutParams = parmas\n                    linear_bg!!.setBackgroundResource(R.drawable.shape_bg_round_white_5)\n                }\n                CUBE -> {\n                    parmas.setMargins(0, 0, 0, 0)\n                    linear_bg!!.layoutParams = parmas\n                    linear_bg!!.setBackgroundColor(\n                        ContextCompat.getColor(\n                            context,\n                            R.color.colorTextWhite\n                        )\n                    )\n                }\n                STACK -> {\n                    parmas.setMargins(0, 0, 0, 0)\n                    linear_bg!!.layoutParams = parmas\n                    linear_bg!!.setBackgroundResource(R.drawable.shape_bg_top_round_white_15)\n                }\n                else -> {\n                    parmas.setMargins(0, 0, 0, 0)\n                    linear_bg!!.layoutParams = parmas\n                    linear_bg!!.setBackgroundResource(builder!!.model)\n                }\n            }\n        }\n\n        //\xe6\xa0\x87\xe9\xa2\x98\n        if (builder!!.titleValue.isNullOrEmpty()) {\n            tv_title!!.visibility = View.GONE\n        } else {\n            tv_title?.text = builder!!.titleValue\n            tv_title?.visibility = View.VISIBLE\n        }\n\n        //\xe6\x8c\x89\xe9\x92\xae\n        tv_cancel?.text = builder!!.cancelText\n        tv_submit?.text = builder!!.chooseText\n\n        //\xe8\xae\xbe\xe7\xbd\xae\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89layout\n        datePicker!!.setLayout(builder!!.pickerLayoutResId)\n        //\xe6\x98\xbe\xe7\xa4\xba\xe6\xa0\x87\xe7\xad\xbe\n        datePicker!!.showLabel(builder!!.dateLabel)\n        //\xe8\xae\xbe\xe7\xbd\xae\xe6\xa0\x87\xe7\xad\xbe\xe6\x96\x87\xe5\xad\x97\n        datePicker!!.setLabelText(\n            builder!!.yearLabel,\n            builder!!.monthLabel,\n            builder!!.dayLabel,\n            builder!!.hourLabel,\n            builder!!.minLabel,\n            builder!!.secondLabel\n        )\n\n        //\xe6\x98\xbe\xe7\xa4\xba\xe6\xa8\xa1\xe5\xbc\x8f\n        if (builder!!.displayTypes == null) {\n            builder!!.displayTypes = intArrayOf(\n                DateTimeConfig.YEAR,\n                DateTimeConfig.MONTH,\n                DateTimeConfig.DAY,\n                DateTimeConfig.HOUR,\n                DateTimeConfig.MIN,\n                DateTimeConfig.SECOND\n            )\n        }\n\n        datePicker!!.setDisplayType(builder!!.displayTypes)\n        //\xe5\x9b\x9e\xe5\x88\xb0\xe5\xbd\x93\xe5\x89\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xb1\x95\xe7\xa4\xba\n        if (builder!!.displayTypes != null) {\n            var year_month_day_hour = 0\n            for (i in builder!!.displayTypes!!) {\n                if (i == DateTimeConfig.YEAR && year_month_day_hour <= 0) {\n                    year_month_day_hour = 0\n                    tv_go_back!!.text = "\xe5\x9b\x9e\xe5\x88\xb0\xe4\xbb\x8a\xe5\xb9\xb4"\n                    btn_today!!.text = "\xe4\xbb\x8a"\n                }\n                if (i == DateTimeConfig.MONTH && year_month_day_hour <= 1) {\n                    year_month_day_hour = 1\n                    tv_go_back!!.text = "\xe5\x9b\x9e\xe5\x88\xb0\xe6\x9c\xac\xe6\x9c\x88"\n                    btn_today!!.text = "\xe6\x9c\xac"\n                }\n                if (i == DateTimeConfig.DAY && year_month_day_hour <= 2) {\n                    year_month_day_hour = 2\n                    tv_go_back!!.text = "\xe5\x9b\x9e\xe5\x88\xb0\xe4\xbb\x8a\xe6\x97\xa5"\n                    btn_today!!.text = "\xe4\xbb\x8a"\n                }\n                if ((i == DateTimeConfig.HOUR || i == DateTimeConfig.MIN) && year_month_day_hour <= 3) {\n                    year_month_day_hour = 3\n                    tv_go_back!!.text = "\xe5\x9b\x9e\xe5\x88\xb0\xe6\xad\xa4\xe5\x88\xbb"\n                    btn_today!!.text = "\xe6\xad\xa4"\n                }\n            }\n\n        }\n        linear_now!!.visibility = if (builder!!.backNow) View.VISIBLE else View.GONE\n        tv_choose_date!!.visibility = if (builder!!.focusDateInfo) View.VISIBLE else View.GONE\n\n        //\xe5\xbc\xba\xe5\x88\xb6\xe5\x85\xb3\xe9\x97\xad\xe5\x9b\xbd\xe9\x99\x85\xe5\x8c\x96\xef\xbc\x88\xe4\xb8\x8d\xe5\x8f\x97\xe7\xb3\xbb\xe7\xbb\x9f\xe8\xaf\xad\xe8\xa8\x80\xe5\xbd\xb1\xe5\x93\x8d\xef\xbc\x89\n        datePicker!!.setGlobal(DateTimeConfig.GLOBAL_CHINA)\n        //\xe8\xae\xbe\xe7\xbd\xae\xe6\x9c\x80\xe5\xb0\x8f\xe6\x97\xb6\xe9\x97\xb4\n        datePicker!!.setMinMillisecond(builder!!.minTime)\n        //\xe8\xae\xbe\xe7\xbd\xae\xe6\x9c\x80\xe5\xa4\xa7\xe6\x97\xb6\xe9\x97\xb4\n        datePicker!!.setMaxMillisecond(builder!!.maxTime)\n        //\xe8\xae\xbe\xe7\xbd\xae\xe9\xbb\x98\xe8\xae\xa4\xe6\x97\xb6\xe9\x97\xb4\n        datePicker!!.setDefaultMillisecond(builder!!.defaultMillisecond)\n        //\xe8\xae\xbe\xe7\xbd\xae\xe6\x98\xaf\xe5\x90\xa6\xe5\xbe\xaa\xe7\x8e\xaf\xe6\xbb\x9a\xe5\x8a\xa8\n        datePicker!!.setWrapSelectorWheel(\n            builder!!.wrapSelectorWheelTypes,\n            builder!!.wrapSelectorWheel\n        )\n\n        datePicker!!.setTextSize(13, 15)\n        if (builder!!.themeColor != 0) {\n            datePicker!!.setThemeColor(builder!!.themeColor)\n            tv_submit!!.setTextColor(builder!!.themeColor)\n\n            val gd = GradientDrawable()\n            gd.setColor(builder!!.themeColor)\n            gd.cornerRadius = dip2px(60f).toFloat()\n            btn_today!!.background = gd\n        }\n\n        if (builder!!.assistColor != 0) {\n            tv_title?.setTextColor(builder!!.assistColor)\n            tv_choose_date?.setTextColor(builder!!.assistColor)\n            tv_go_back?.setTextColor(builder!!.assistColor)\n            tv_cancel?.setTextColor(builder!!.assistColor)\n            datePicker!!.setTextColor(builder!!.assistColor)\n\n\n        }\n        if (builder!!.dividerColor != 0) {\n            divider_top?.setBackgroundColor(builder!!.dividerColor)\n            divider_bottom?.setBackgroundColor(builder!!.dividerColor)\n            divider_line?.setBackgroundColor(builder!!.dividerColor)\n            datePicker!!.setDividerColor(builder!!.dividerColor)\n        }\n\n        tv_cancel!!.setOnClickListener(this)\n        tv_submit!!.setOnClickListener(this)\n        btn_today!!.setOnClickListener(this)\n\n        datePicker!!.setOnDateTimeChangedListener { millisecond ->\n            this@CardDatePickerDialog.millisecond = millisecond\n            var calendar = Calendar.getInstance()\n            calendar.clear()\n            calendar.timeInMillis = millisecond\n            when (builder?.chooseDateModel) {\n                DATE_LUNAR -> {\n                    Lunar.getInstance(calendar).apply {\n                        var str = if (this == null)\n                            "\xe6\x9a\x82\xe6\x97\xa0\xe5\x86\x9c\xe5\x8e\x86\xe4\xbf\xa1\xe6\x81\xaf"\n                        else\n                            "\xe5\x86\x9c\xe5\x8e\x86 $yearName$monthName$dayName ${StringUtils.getWeek(millisecond)}"\n                        tv_choose_date?.text = Html.fromHtml(str)\n                    }\n                }\n                else -> tv_choose_date?.text =\n                    StringUtils.conversionTime(millisecond, "yyyy\xe5\xb9\xb4MM\xe6\x9c\x88dd\xe6\x97\xa5 ") + StringUtils.getWeek(\n                        millisecond\n                    )\n            }\n        }\n    }\n\n    override fun onStart() {\n        super.onStart()\n        mBehavior?.state = BottomSheetBehavior.STATE_EXPANDED\n    }\n\n    override fun onClick(v: View) {\n        this.dismiss()\n        when (v.id) {\n\n            R.id.btn_today -> {\n                builder?.onChooseListener?.invoke(Calendar.getInstance().timeInMillis)\n            }\n            R.id.dialog_submit -> {\n                builder?.onChooseListener?.invoke(millisecond)\n            }\n            R.id.dialog_cancel -> {\n                builder?.onCancelListener?.invoke()\n            }\n        }\n        this.dismiss()\n    }\n\n\n    class Builder(private var context: Context) {\n        @JvmField\n        var backNow: Boolean = true\n\n        @JvmField\n        var focusDateInfo: Boolean = true\n\n        @JvmField\n        var dateLabel: Boolean = true\n\n        @JvmField\n        var cancelText: String = "\xe5\x8f\x96\xe6\xb6\x88"\n\n        @JvmField\n        var chooseText: String = "\xe7\xa1\xae\xe5\xae\x9a"\n\n        @JvmField\n        var titleValue: String? = null\n\n        @JvmField\n        var defaultMillisecond: Long = 0\n\n        @JvmField\n        var minTime: Long = 0\n\n        @JvmField\n        var maxTime: Long = 0\n\n        @JvmField\n        var displayTypes: IntArray? = null\n\n        @JvmField\n        var model: Int = CARD\n\n        @JvmField\n        var themeColor: Int = 0\n\n        @JvmField\n        var assistColor: Int = 0\n\n        @JvmField\n        var dividerColor: Int = 0\n\n        @JvmField\n        var pickerLayoutResId: Int = 0\n\n        @JvmField\n        var wrapSelectorWheel: Boolean = true\n\n        @JvmField\n        var wrapSelectorWheelTypes: MutableList<Int>? = mutableListOf()\n\n        @JvmField\n        var touchHideable: Boolean = true\n\n        @JvmField\n        var chooseDateModel: Int = DATE_DEFAULT\n\n        @JvmField\n        var onChooseListener: ((Long) -> Unit)? = null\n\n        @JvmField\n        var onCancelListener: (() -> Unit)? = null\n\n\n        var yearLabel = "\xe5\xb9\xb4"\n        var monthLabel = "\xe6\x9c\x88"\n        var dayLabel = "\xe6\x97\xa5"\n        var hourLabel = "\xe6\x97\xb6"\n        var minLabel = "\xe5\x88\x86"\n        var secondLabel = "\xe7\xa7\x92"\n\n        /**\n         * \xe8\xae\xbe\xe7\xbd\xae\xe6\xa0\x87\xe9\xa2\x98\n         * @param value \xe6\xa0\x87\xe9\xa2\x98\n         * @return Builder\n         */\n        fun setTitle(value: String): Builder {\n            this.titleValue = value\n            return this\n        }\n\n        /**\n         * \xe8\xae\xbe\xe7\xbd\xae\xe6\x98\xbe\xe7\xa4\xba\xe5\x80\xbc\n         * @param types \xe8\xa6\x81\xe6\x98\xbe\xe7\xa4\xba\xe7\x9a\x84\xe5\xb9\xb4\xe6\x9c\x88\xe6\x97\xa5\xe6\x97\xb6\xe5\x88\x86\xe7\xa7\x92\xe6\xa0\x87\xe7\xad\xbe\n         * @return Builder\n         */\n        fun setDisplayType(vararg types: Int): Builder {\n            this.displayTypes = types\n            return this\n        }\n\n        /**\n         * \xe8\xae\xbe\xe7\xbd\xae\xe6\x98\xbe\xe7\xa4\xba\xe5\x80\xbc\n         * @param types \xe8\xa6\x81\xe6\x98\xbe\xe7\xa4\xba\xe7\x9a\x84\xe5\xb9\xb4\xe6\x9c\x88\xe6\x97\xa5\xe6\x97\xb6\xe5\x88\x86\xe7\xa7\x92\xe6\xa0\x87\xe7\xad\xbe\n         * @return Builder\n         */\n        fun setDisplayType(types: MutableList<Int>?): Builder {\n            this.displayTypes = types?.toIntArray()\n            return this\n        }\n\n        /**\n         * \xe8\xae\xbe\xe7\xbd\xae\xe9\xbb\x98\xe8\xae\xa4\xe6\x97\xb6\xe9\x97\xb4\n         * @param millisecond \xe9\xbb\x98\xe8\xae\xa4\xe6\x97\xb6\xe9\x97\xb4\n         * @return Builder\n         */\n        fun setDefaultTime(millisecond: Long): Builder {\n            this.defaultMillisecond = millisecond\n            return this\n        }\n\n        /**\n         * \xe8\xae\xbe\xe7\xbd\xae\xe8\x8c\x83\xe5\x9b\xb4\xe6\x9c\x80\xe5\xb0\x8f\xe5\x80\xbc\n         * @param millisecond \xe8\x8c\x83\xe5\x9b\xb4\xe6\x9c\x80\xe5\xb0\x8f\xe5\x80\xbc\n         * @return Builder\n         */\n        fun setMinTime(millisecond: Long): Builder {\n            this.minTime = millisecond\n            return this\n        }\n\n        /**\n         * \xe8\xae\xbe\xe7\xbd\xae\xe8\x8c\x83\xe5\x9b\xb4\xe6\x9c\x80\xe5\xa4\xa7\xe5\x80\xbc\n         * @param millisecond\n         * @return Builder\n         */\n        fun setMaxTime(millisecond: Long): Builder {\n            this.maxTime = millisecond\n            return this\n        }\n\n        /**\n         * \xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xbe\xe7\xa4\xba\xe5\x9b\x9e\xe5\x88\xb0\xe5\xbd\x93\xe5\x89\x8d\n         * @param b \xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xbe\xe7\xa4\xba\xe5\x9b\x9e\xe5\x88\xb0\xe5\xbd\x93\xe5\x89\x8d\n         * @return Builder\n         */\n        fun showBackNow(b: Boolean): Builder {\n            this.backNow = b\n            return this\n        }\n\n        /**\n         * \xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xbe\xe7\xa4\xba\xe9\x80\x89\xe4\xb8\xad\xe6\x97\xa5\xe6\x9c\x9f\xe4\xbf\xa1\xe6\x81\xaf\n         * @param b \xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xbe\xe7\xa4\xba\xe9\x80\x89\xe4\xb8\xad\xe6\x97\xa5\xe6\x9c\x9f\xe4\xbf\xa1\xe6\x81\xaf\n         * @return Builder\n         */\n        fun showFocusDateInfo(b: Boolean): Builder {\n            this.focusDateInfo = b\n            return this\n        }\n\n        /**\n         * \xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xbe\xe7\xa4\xba\xe5\x8d\x95\xe4\xbd\x8d\xe6\xa0\x87\xe7\xad\xbe\n         * @param b \xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xbe\xe7\xa4\xba\xe5\x8d\x95\xe4\xbd\x8d\xe6\xa0\x87\xe7\xad\xbe\n         * @return Builder\n         */\n        fun showDateLabel(b: Boolean): Builder {\n            this.dateLabel = b\n            return this\n        }\n\n        /**\n         * \xe6\x98\xbe\xe7\xa4\xba\xe6\xa8\xa1\xe5\xbc\x8f\n         * @param model  CARD,CUBE,STACK\n         * @return Builder\n         */\n        fun setBackGroundModel(model: Int): Builder {\n            this.model = model\n            return this\n        }\n\n        /**\n         * \xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xbb\xe9\xa2\x98\xe9\xa2\x9c\xe8\x89\xb2\n         * @param themeColor \xe4\xb8\xbb\xe9\xa2\x98\xe9\xa2\x9c\xe8\x89\xb2\n         * @return Builder\n         */\n        fun setThemeColor(@ColorInt themeColor: Int): Builder {\n            this.themeColor = themeColor\n            return this\n        }\n\n        /**\n         * \xe8\xae\xbe\xe7\xbd\xae\xe6\xa0\x87\xe7\xad\xbe\xe6\x96\x87\xe5\xad\x97\n         * @param year \xe5\xb9\xb4\xe6\xa0\x87\xe7\xad\xbe\n         * @param month \xe6\x9c\x88\xe6\xa0\x87\xe7\xad\xbe\n         * @param day \xe6\x97\xa5\xe6\xa0\x87\xe7\xad\xbe\n         * @param hour \xe6\x97\xb6\xe6\xa0\x87\xe7\xad\xbe\n         * @param min \xe5\x88\x86\xe6\xa0\x87\xe7\xad\xbe\n         * @param second \xe7\xa7\x92\xe6\xa0\x87\xe7\xad\xbe\n         *setLabelText("\xe5\xb9\xb4","\xe6\x9c\x88","\xe6\x97\xa5","\xe6\x97\xb6")\n         *setLabelText(month="\xe6\x9c\x88",hour="\xe6\x97\xb6")\n         * @return Builder\n         */\n        fun setLabelText(\n            year: String = yearLabel,\n            month: String = monthLabel,\n            day: String = dayLabel,\n            hour: String = hourLabel,\n            min: String = minLabel,\n            second: String = secondLabel\n        ): Builder {\n            this.yearLabel = year\n            this.monthLabel = month\n            this.dayLabel = day\n            this.hourLabel = hour\n            this.minLabel = min\n            this.secondLabel = second\n            return this\n        }\n\n        /**\n         *\xe8\xae\xbe\xe7\xbd\xae\xe6\x98\xaf\xe5\x90\xa6\xe5\xbe\xaa\xe7\x8e\xaf\xe6\xbb\x9a\xe5\x8a\xa8\n         *{@link #setWrapSelectorWheel()}\n         * @return Builder\n         */\n        fun setWrapSelectorWheel(vararg types: Int, wrapSelector: Boolean): Builder {\n            return setWrapSelectorWheel(types.toMutableList(), wrapSelector)\n        }\n\n        /**\n         * \xe8\xae\xbe\xe7\xbd\xae\xe6\x98\xaf\xe5\x90\xa6\xe5\xbe\xaa\xe7\x8e\xaf\xe6\xbb\x9a\xe5\x8a\xa8\n         * @param wrapSelector\n         * @return Builder\n         */\n        fun setWrapSelectorWheel(wrapSelector: Boolean): Builder {\n            return setWrapSelectorWheel(null, wrapSelector)\n        }\n\n        /**\n         * \xe8\xae\xbe\xe7\xbd\xae\xe6\x98\xaf\xe5\x90\xa6\xe5\xbe\xaa\xe7\x8e\xaf\xe6\xbb\x9a\xe5\x8a\xa8\n         * @param types \xe9\x9c\x80\xe8\xa6\x81\xe8\xae\xbe\xe7\xbd\xae\xe7\x9a\x84\xe6\xa0\x87\xe7\xad\xbe\xe9\xa1\xb9\n         * @param wrapSelector \xe6\x98\xaf\xe5\x90\xa6\xe5\xbe\xaa\xe7\x8e\xaf\xe6\xbb\x9a\xe5\x8a\xa8\n         * @return Builder\n         */\n        fun setWrapSelectorWheel(types: MutableList<Int>?, wrapSelector: Boolean): Builder {\n            this.wrapSelectorWheelTypes = types\n            this.wrapSelectorWheel = wrapSelector\n            return this\n        }\n\n\n        /**\n         * \xe7\xbb\x91\xe5\xae\x9a\xe9\x80\x89\xe6\x8b\xa9\xe7\x9b\x91\xe5\x90\xac\n         * @param text \xe6\x8c\x89\xe9\x92\xae\xe6\x96\x87\xe5\xad\x97\n         * @param listener \xe9\x80\x89\xe6\x8b\xa9\xe7\x9b\x91\xe5\x90\xac\xe5\x87\xbd\xe6\x95\xb0 long \xe6\x97\xb6\xe9\x97\xb4\xe6\x88\xb3\n         * @return Builder\n         */\n        fun setOnChoose(text: String = "\xe7\xa1\xae\xe5\xae\x9a", listener: ((Long) -> Unit)? = null): Builder {\n            this.onChooseListener = listener\n            this.chooseText = text\n            return this\n        }\n\n        /**\n         * \xe7\xbb\x91\xe5\xae\x9a\xe5\x8f\x96\xe6\xb6\x88\xe7\x9b\x91\xe5\x90\xac\n         * @param text \xe6\x8c\x89\xe9\x92\xae\xe6\x96\x87\xe5\xad\x97\n         * @param listener \xe5\x8f\x96\xe6\xb6\x88\xe7\x9b\x91\xe5\x90\xac\xe5\x87\xbd\xe6\x95\xb0\n         * @return Builder\n         */\n        fun setOnCancel(text: String = "\xe5\x8f\x96\xe6\xb6\x88", listener: (() -> Unit)? = null): Builder {\n            this.onCancelListener = listener\n            this.cancelText = text\n            return this\n        }\n\n        /**\n         * \xe8\xae\xbe\xe7\xbd\xae\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe9\x80\x89\xe6\x8b\xa9\xe5\x99\xa8layout\n         * @param layoutResId xml\xe8\xb5\x84\xe6\xba\x90id\n         */\n        fun setPickerLayout(@NotNull layoutResId: Int): Builder {\n            this.pickerLayoutResId = layoutResId\n            return this\n        }\n\n        /**\n         * \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe4\xbb\xa5\xe6\xbb\x91\xe5\x8a\xa8\xe5\x85\xb3\xe9\x97\xad\xe5\xbc\xb9\xe7\xaa\x97\n         * @param touchHideable \xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xba true\n         */\n        fun setTouchHideable(touchHideable: Boolean = true): Builder {\n            this.touchHideable = touchHideable\n            return this\n        }\n\n        /**\n         * \xe8\xae\xbe\xe7\xbd\xaedialog\xe9\x80\x89\xe4\xb8\xad\xe6\x97\xa5\xe6\x9c\x9f\xe4\xbf\xa1\xe6\x81\xaf\xe5\xb1\x95\xe7\xa4\xba\xe6\xa0\xbc\xe5\xbc\x8f\n         * @param value 1:LUNAR 0:DEFAULT\n         * @return Builder\n         */\n        fun setChooseDateModel(value: Int): Builder {\n            this.chooseDateModel = value\n            return this\n        }\n\n        /**\n         * \xe8\xbf\x99\xe5\x8f\xaadialog\xe5\x86\x85\xe8\xbe\x85\xe5\x8a\xa9\xe6\x96\x87\xe5\xad\x97\xe7\x9a\x84\xe9\xa2\x9c\xe8\x89\xb2\n         * @return Builder\n         */\n        fun setAssistColor(@ColorInt value: Int): Builder {\n            this.assistColor = value\n            return this\n        }\n\n        /**\n         * \xe8\xbf\x99\xe5\x8f\xaadialog\xe5\x86\x85\xe5\x88\x86\xe5\x89\xb2\xe7\xba\xbf\xe9\xa2\x9c\xe8\x89\xb2\n         * @return Builder\n         */\n        fun setDividerColor(@ColorInt value: Int): Builder {\n            this.dividerColor = value\n            return this\n        }\n\n        fun build(): CardDatePickerDialog {\n            return CardDatePickerDialog(context, this)\n        }\n    }\n\n\n    /**\n     * \xe6\xa0\xb9\xe6\x8d\xae\xe6\x89\x8b\xe6\x9c\xba\xe7\x9a\x84\xe5\x88\x86\xe8\xbe\xa8\xe7\x8e\x87dp \xe8\xbd\xac\xe6\x88\x90px(\xe5\x83\x8f\xe7\xb4\xa0)\n     */\n    private fun dip2px(dpValue: Float): Int {\n        val scale = context.resources.displayMetrics.density\n        return (dpValue * scale + 0.5f).toInt()\n    }\n\n    /**\n     * \xe6\xa0\xb9\xe6\x8d\xae\xe6\x89\x8b\xe6\x9c\xba\xe7\x9a\x84\xe5\x88\x86\xe8\xbe\xa8\xe7\x8e\x87px(\xe5\x83\x8f\xe7\xb4\xa0) \xe8\xbd\xac\xe6\x88\x90dp\n     */\n    private fun px2dip(pxValue: Float): Int {\n        val scale = context.resources.displayMetrics.density\n        return (pxValue / scale + 0.5f).toInt()\n    }\n\n}'