b'package droidninja.filepicker.fragments\n\nimport android.app.Activity\nimport android.content.Context\nimport android.content.Intent\nimport android.os.Bundle\nimport android.view.*\nimport android.widget.TextView\nimport android.widget.Toast\nimport androidx.lifecycle.Observer\nimport androidx.lifecycle.ViewModelProvider\nimport androidx.recyclerview.widget.DefaultItemAnimator\nimport androidx.recyclerview.widget.OrientationHelper\nimport androidx.recyclerview.widget.RecyclerView\nimport androidx.recyclerview.widget.StaggeredGridLayoutManager\nimport com.bumptech.glide.Glide\nimport com.bumptech.glide.RequestManager\nimport droidninja.filepicker.FilePickerConst\nimport droidninja.filepicker.PickerManager\nimport droidninja.filepicker.R\nimport droidninja.filepicker.adapters.FileAdapterListener\nimport droidninja.filepicker.adapters.PhotoGridAdapter\nimport droidninja.filepicker.models.Media\nimport droidninja.filepicker.utils.AndroidLifecycleUtils\nimport droidninja.filepicker.utils.ImageCaptureManager\nimport droidninja.filepicker.viewmodels.VMMediaPicker\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.withContext\nimport java.io.IOException\n\n\nclass MediaDetailPickerFragment : BaseFragment(), FileAdapterListener {\n    lateinit var recyclerView: RecyclerView\n\n    lateinit var emptyView: TextView\n    lateinit var viewModel: VMMediaPicker\n\n    private var mListener: PhotoPickerFragmentListener? = null\n    private var photoGridAdapter: PhotoGridAdapter? = null\n    private var imageCaptureManager: ImageCaptureManager? = null\n    private lateinit var mGlideRequestManager: RequestManager\n    private var fileType: Int = 0\n    private var imageFileSize: Int = FilePickerConst.DEFAULT_FILE_SIZE\n    private var videoFileSize: Int = FilePickerConst.DEFAULT_FILE_SIZE\n    private var selectAllItem: MenuItem? = null\n\n\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n                              savedInstanceState: Bundle?): View? {\n        // Inflate the layout for this fragment\n        return inflater.inflate(R.layout.fragment_photo_picker, container, false)\n    }\n\n    override fun onAttach(context: Context) {\n        super.onAttach(context)\n        if (context is PhotoPickerFragmentListener) {\n            mListener = context\n        } else {\n            throw RuntimeException("$context must implement PhotoPickerFragmentListener")\n        }\n    }\n\n    override fun onDetach() {\n        super.onDetach()\n        mListener = null\n    }\n\n    override fun onItemSelected() {\n        mListener?.onItemSelected()\n        photoGridAdapter?.let { adapter ->\n            selectAllItem?.let { menuItem ->\n                if (adapter.itemCount == adapter.selectedItemCount) {\n                    menuItem.setIcon(R.drawable.ic_select_all)\n                    menuItem.isChecked = true\n                }\n            }\n        }\n    }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setHasOptionsMenu(PickerManager.hasSelectAll())\n        mGlideRequestManager = Glide.with(this)\n        viewModel = ViewModelProvider(this, ViewModelProvider.AndroidViewModelFactory(requireActivity().application)).get(VMMediaPicker::class.java)\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        initView(view)\n    }\n\n    private fun initView(view: View) {\n        recyclerView = view.findViewById(R.id.recyclerview)\n        emptyView = view.findViewById(R.id.empty_view)\n        arguments?.let {\n            fileType = it.getInt(BaseFragment.FILE_TYPE)\n            imageFileSize = it.getInt(FilePickerConst.EXTRA_IMAGE_FILE_SIZE)\n            videoFileSize = it.getInt(FilePickerConst.EXTRA_VIDEO_FILE_SIZE)\n            activity?.let {\n                imageCaptureManager = ImageCaptureManager(it)\n            }\n            val spanCount = PickerManager.spanTypes[FilePickerConst.SPAN_TYPE.DETAIL_SPAN] ?: 3\n            val layoutManager = StaggeredGridLayoutManager(spanCount, OrientationHelper.VERTICAL)\n            layoutManager.gapStrategy = StaggeredGridLayoutManager.GAP_HANDLING_MOVE_ITEMS_BETWEEN_SPANS\n            recyclerView.layoutManager = layoutManager\n            recyclerView.itemAnimator = DefaultItemAnimator()\n\n            recyclerView.addOnScrollListener(object : RecyclerView.OnScrollListener() {\n                override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) {\n                    super.onScrolled(recyclerView, dx, dy)\n                    // Log.d(">>> Picker >>>", "dy = " + dy);\n                    if (Math.abs(dy) > SCROLL_THRESHOLD) {\n                        mGlideRequestManager.pauseRequests()\n                    } else {\n                        resumeRequestsIfNotDestroyed()\n                    }\n                }\n\n                override fun onScrollStateChanged(recyclerView: RecyclerView, newState: Int) {\n                    if (newState == RecyclerView.SCROLL_STATE_IDLE) {\n                        resumeRequestsIfNotDestroyed()\n                    }\n                }\n            })\n        }\n\n        viewModel.lvMediaData.observe(viewLifecycleOwner, Observer { data ->\n            updateList(data)\n        })\n\n        viewModel.lvDataChanged.observe(viewLifecycleOwner, Observer {\n            viewModel.getMedia(mediaType = fileType, imageFileSize = imageFileSize, videoFileSize = videoFileSize)\n        })\n\n        viewModel.getMedia(mediaType = fileType, imageFileSize = imageFileSize, videoFileSize = videoFileSize)\n    }\n\n    private fun updateList(medias: List<Media>) {\n        view?.let { _ ->\n            if (medias.isNotEmpty()) {\n                emptyView.visibility = View.GONE\n            } else {\n                emptyView.visibility = View.VISIBLE\n            }\n\n            context?.let {\n                if (photoGridAdapter != null) {\n                    photoGridAdapter?.setData(medias, PickerManager.selectedPhotos)\n                } else {\n                    photoGridAdapter = PhotoGridAdapter(it, mGlideRequestManager, medias, PickerManager.selectedPhotos, fileType == FilePickerConst.MEDIA_TYPE_IMAGE && PickerManager.isEnableCamera, this)\n                    recyclerView.adapter = photoGridAdapter\n                    photoGridAdapter?.setCameraListener(View.OnClickListener {\n                        try {\n                            uiScope.launch {\n                                val intent = withContext(Dispatchers.IO) { imageCaptureManager?.dispatchTakePictureIntent() }\n                                if (intent != null)\n                                    startActivityForResult(intent, ImageCaptureManager.REQUEST_TAKE_PHOTO)\n                                else\n                                    Toast.makeText(activity, R.string.no_camera_exists, Toast.LENGTH_SHORT).show()\n                            }\n                        } catch (e: IOException) {\n                            e.printStackTrace()\n                        }\n                    })\n                }\n            }\n        }\n    }\n\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n        super.onActivityResult(requestCode, resultCode, data)\n        when (requestCode) {\n            ImageCaptureManager.REQUEST_TAKE_PHOTO -> if (resultCode == Activity.RESULT_OK) {\n                val imagePath = imageCaptureManager?.currentPhotoPath\n                if (imagePath != null) {\n                    if (PickerManager.getMaxCount() == 1) {\n                        PickerManager.add(imagePath, FilePickerConst.FILE_TYPE_MEDIA)\n                        mListener?.onItemSelected()\n                    }\n                }\n            } else {\n                uiScope.launch(Dispatchers.IO) {\n                    imageCaptureManager?.deleteContentUri(imageCaptureManager?.currentPhotoPath)\n                }\n            }\n        }\n    }\n\n    private fun resumeRequestsIfNotDestroyed() {\n        if (!AndroidLifecycleUtils.canLoadImage(this)) {\n            return\n        }\n\n        mGlideRequestManager.resumeRequests()\n    }\n\n    override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {\n        inflater.inflate(R.menu.select_menu, menu)\n        selectAllItem = menu.findItem(R.id.action_select)\n        menu.findItem(R.id.action_done)?.isVisible = PickerManager.getMaxCount() > 1\n        onItemSelected()\n        super.onCreateOptionsMenu(menu, inflater)\n    }\n\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\n        val itemId = item.itemId\n        if (itemId == R.id.action_select) {\n            photoGridAdapter?.let { adapter ->\n                adapter.selectAll()\n                selectAllItem?.let {\n                    if (it.isChecked) {\n                        PickerManager.clearSelections()\n                        adapter.clearSelection()\n                        it.setIcon(R.drawable.ic_deselect_all)\n                    } else {\n                        adapter.selectAll()\n                        PickerManager.add(adapter.selectedPaths, FilePickerConst.FILE_TYPE_MEDIA)\n                        it.setIcon(R.drawable.ic_select_all)\n                    }\n                    selectAllItem?.isChecked = !it.isChecked\n                    mListener?.onItemSelected()\n                }\n            }\n            return true\n        } else {\n            return super.onOptionsItemSelected(item)\n        }\n    }\n\n    companion object {\n\n        private val TAG = MediaDetailPickerFragment::class.java.simpleName\n        private val SCROLL_THRESHOLD = 30\n\n        fun newInstance(fileType: Int, imageFileSize: Int, videoFileSize: Int): MediaDetailPickerFragment {\n            val mediaDetailPickerFragment = MediaDetailPickerFragment()\n            val bun = Bundle()\n            bun.putInt(BaseFragment.Companion.FILE_TYPE, fileType)\n            bun.putInt(FilePickerConst.EXTRA_IMAGE_FILE_SIZE, imageFileSize)\n            bun.putInt(FilePickerConst.EXTRA_VIDEO_FILE_SIZE, videoFileSize)\n            mediaDetailPickerFragment.arguments = bun\n            return mediaDetailPickerFragment\n        }\n    }\n}// Required empty public constructor\n'