b'\n#\' Create new project scaffolding\n#\'\n#\' Create all the scaffolding for a new project in a new directory. The scaffolding includes a README file, different folders to hold raw data, analyses, etc, and optionally also \\code{testthat} infrastructure. Also, optionally, set a private or public GitHub repo with continuous integration (Travis-CI, GitHub Actions...).\n#\'\n#\' @param name Character. Name of the new project. A new folder will be created with that name.\n#\' @param path Character. Path where the new project should be created (default is the current working directory).\n#\' @param package Logical. Create package structure or a simple project?\n#\' @param github Logical. Create GitHub repository? Note this requires some working infrastructure like \\code{git} and a \\code{GITHUB_PAT}. See instructions here \\url{https://usethis.r-lib.org/articles/articles/usethis-setup.html}.\n#\' @param private.repo Logical. Default is TRUE.\n#\' @param ci Logical. Use continuous integration in your GitHub repository? Current options are "none" (default), "travis" (uses Travis-CI), "circle" (uses Circle-CI), "appveyor" (uses AppVeyor), or "gh-actions" (uses GitHub Actions).\n#\' @param makefile Logical. If TRUE, adds a template \\code{makefile.R} file to the project.\n#\' @param pipe Logical. Use magrittr\'s pipe in your package?\n#\' @param testthat Logical. Add testthat infrastructure?\n#\' @param verbose Print verbose output in the console while creating the new project? Default is FALSE.\n#\' @param open.project Logical. If TRUE (the default) will open the newly created Rstudio project in a new session.\n#\'\n#\' @return A new directory with R package structure, slightly modified.\n#\' @export\n#\' @details If using github = TRUE, you will be asked if you want to commit some files. Reply positively to continue.\n#\'\n#\' @examples\n#\' \\dontrun{\n#\' library("template")\n#\' new_project("myproject")\n#\' new_project("myproject", github = TRUE, private.repo = TRUE)\n#\' }\nnew_project <- function(name, path = ".",\n                        package = TRUE,\n                        github = FALSE, private.repo = TRUE, ci = "none",\n                        makefile = TRUE, pipe = TRUE, testthat = FALSE,\n                        verbose = FALSE, open.project = TRUE){\n\n  if (!isTRUE(verbose)) {\n    options(usethis.quiet = TRUE)\n  }\n\n  if (isTRUE(package)) {\n    usethis::create_package(file.path(path, name), open = FALSE)\n  } else {\n    usethis::create_project(file.path(path, name), open = FALSE)\n  }\n\n  # usethis::proj_set(name, force = TRUE)\n  usethis::local_project(path = file.path(path, name), force = TRUE)\n\n  # Add folders\n  usethis::use_readme_rmd(open = FALSE)\n  if (isTRUE(package)) {\n    usethis::use_data_raw(open = FALSE)\n  } else {\n    dir.create("data-raw")\n  }\n  dir.create("data")\n  dir.create("analyses")\n  dir.create("manuscript")\n\n  # Add makefile.R\n  if (isTRUE(makefile)) {\n    file.copy(from = system.file("makefile", "makefile.R", package = "template"),\n              to = usethis::proj_get())\n  }\n\n\n  if (isTRUE(package)) {\n\n    usethis::use_package_doc(open = FALSE)\n\n    if (isTRUE(pipe)) {\n      usethis::use_pipe()\n    }\n\n    if (isTRUE(testthat)) {\n      usethis::use_testthat()\n    }\n\n    usethis::use_build_ignore(c("analyses", "manuscript", "makefile.R"))\n\n  }\n\n\n  if (isTRUE(github)) {\n    usethis::use_git()\n    usethis::use_github(private = private.repo)\n    # usethis::use_github_links(name)\n\n    ## Continuous integration services\n    stopifnot(ci %in% c("none", "travis", "gh-actions", "circle", "appveyor"))\n\n    if (ci == "travis") {\n      usethis::use_travis()\n      #usethis::use_travis_badge()\n    }\n\n    if (ci == "gh-actions") {\n      usethis::use_github_actions()\n      # usethis::use_github_action_check_release()\n      #usethis::use_github_actions_badge()\n    }\n\n    if (ci == "circle") {\n      usethis::use_circleci()\n    }\n\n    if (ci == "appveyor") {\n      usethis::use_appveyor()\n    }\n\n  }\n\n  # Open Rstudio project in new session at the end?\n  if (isTRUE(open.project)) {\n    if (rstudioapi::isAvailable()) {\n      rstudioapi::openProject(paste0(name, ".Rproj"), newSession = TRUE)\n    }\n  }\n\n\n}\n'