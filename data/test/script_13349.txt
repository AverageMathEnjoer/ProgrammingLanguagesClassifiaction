b'import com.github.eprendre.tingshu.utils.Book\nimport com.github.eprendre.tingshu.utils.Episode\nimport org.jsoup.Jsoup\nimport org.junit.Test\nimport java.net.URLEncoder\n\nclass JiuZhouTest {\n\n    @Test\n    fun search() {\n        val keywords = "\xe4\xb8\x96\xe7\x95\x8c"\n        val encodedKeywords = URLEncoder.encode(keywords, "utf-8")\n        val page = 1\n        val url = "http://www.unss.net/vodsearch/${encodedKeywords}----------${page}---.html"\n        val doc = Jsoup.connect(url).testConfig(false).get()\n\n        var currentPage = 1\n        var totalPage = 1\n        val pages = doc.selectFirst(".stui-page > .visible-xs")?.text() ?: ""\n        if (pages.isNotEmpty()) {\n            pages.split("/").let {\n                currentPage = it[0].toInt()\n                totalPage = it[1].toInt()\n            }\n        }\n\n        println(currentPage)\n        println(totalPage)\n\n        val list = ArrayList<Book>()\n        val elementList = doc.select(".stui-vodlist__media > li")\n        elementList.forEach { item ->\n            val thumb = item.selectFirst(".thumb > .v-thumb")\n            val coverUrl = thumb.attr("data-original")\n            val bookUrl = thumb.absUrl("href")\n            val title = thumb.attr("title")\n            val status = thumb.selectFirst(".text-right").text()\n            val pList = item.select(".detail > p")\n            val author = pList[0].text()\n            val artist = pList[1].text()\n            val desc = pList[2].text()\n            list.add(Book(coverUrl, bookUrl, title, author, artist).apply {\n                this.status = status\n                this.intro = desc\n            })\n        }\n        println(list)\n    }\n\n    @Test\n    fun bookDetail() {\n        val bookUrl = "http://www.unss.net/voddetail/65586.html"\n        val doc = Jsoup.connect(bookUrl).testConfig(false).get()\n        val tabs = doc.select(".nav-tabs > li")\n        val playlists = doc.select(".tab-content > div")\n\n        val episodes = ArrayList<Episode>()\n        tabs.forEachIndexed { index, tab ->\n            val tabTitle = tab.text()\n            val list = playlists[index].select("ul > li > a").map { element ->\n                val title = "$tabTitle - ${element.text()}"\n                val url = element.absUrl("href")\n                Episode(title, url)\n            }\n            episodes.addAll(list)\n        }\n\n        println(episodes)\n    }\n\n    @Test\n    fun categoryList() {\n        val url = "http://www.unss.net/vodtype/4.html"\n        val list = ArrayList<Book>()\n        val doc = Jsoup.connect(url).testConfig(false).get()\n\n        var currentPage = 1\n        var totalPage = 1\n        var nextUrl = ""\n        val pages = doc.selectFirst(".stui-page > .visible-xs")?.text() ?: ""\n        if (pages.isNotEmpty()) {\n            pages.split("/").let {\n                currentPage = it[0].toInt()\n                totalPage = it[1].toInt()\n            }\n            nextUrl = doc.select(".stui-page > li").first { it.text() == "\xe4\xb8\x8b\xe4\xb8\x80\xe9\xa1\xb5" }\n                .selectFirst("a").absUrl("href")\n        }\n\n        println(currentPage)\n        println(totalPage)\n        println(nextUrl)\n\n        val elementList = doc.select(".stui-vodlist > li > div")\n        elementList.forEach { item ->\n            val thumb = item.selectFirst(".stui-vodlist__thumb")\n            val coverUrl = thumb.attr("data-original")\n            val bookUrl = thumb.absUrl("href")\n            val title = thumb.attr("title")\n            val status = thumb.selectFirst(".text-right").text()\n            val author = ""\n            val artist = ""\n            list.add(Book(coverUrl, bookUrl, title, author, artist).apply {\n                this.status = status\n            })\n        }\n        println(list)\n\n    }\n}'