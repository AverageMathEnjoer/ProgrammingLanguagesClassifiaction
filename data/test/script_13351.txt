b'{-# LANGUAGE CPP #-}\n{-# LANGUAGE RecordWildCards #-}\n\n-- |\n-- Module      : Hoodle.StartUp\n-- Copyright   : (c) 2012, 2014 Ian-Woo Kim\n--\n-- License     : BSD3\n-- Maintainer  : Ian-Woo Kim <ianwookim@gmail.com>\n-- Stability   : experimental\n-- Portability : GHC\nmodule Hoodle.StartUp where\n\nimport qualified Config.Dyre as Dyre\nimport Hoodle.Command (commandLineProcess)\nimport Hoodle.ProgType (mode)\nimport Hoodle.Script (ScriptConfig (..), showError)\nimport System.Console.CmdArgs (cmdArgs)\nimport System.Environment (getEnv)\nimport System.FilePath ((</>))\n\n-- |\nhoodleMain :: ScriptConfig -> IO ()\nhoodleMain ScriptConfig {..} = do\n  case errorMsg of\n    Nothing -> return ()\n    Just em -> putStrLn $ "Error: " ++ em\n  maybe (return ()) putStrLn message\n  param <- cmdArgs mode\n  commandLineProcess param hook\n\n-- |\nhoodleStartMain :: ScriptConfig -> IO ()\nhoodleStartMain =\n  Dyre.wrapMain $\n    Dyre.newParams "start" hoodleMain showError\n\n-- |\ndirHoodled :: IO FilePath\ndirHoodled = do\n  homedir <- getEnv "HOME"\n  return (homedir </> ".hoodle.d")\n'