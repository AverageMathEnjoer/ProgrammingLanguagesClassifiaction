b'\xef\xbb\xbfusing Asn1;\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace Rubeus\n{\n    //PrincipalName::= SEQUENCE {\n    //        name-type[0] Int32,\n    //        name-string[1] SEQUENCE OF KerberosString\n    //}\n\n    public class PrincipalName\n    {\n        public PrincipalName()\n        {\n            /*\n   Name Type       Value  Meaning\n\n   NT-UNKNOWN        0    Name type not known\n   NT-PRINCIPAL      1    Just the name of the principal as in DCE,\n                            or for users\n   NT-SRV-INST       2    Service and other unique instance (krbtgt)\n   NT-SRV-HST        3    Service with host name as instance\n                            (telnet, rcommands)\n   NT-SRV-XHST       4    Service with host as remaining components\n   NT-UID            5    Unique ID\n   NT-X500-PRINCIPAL 6    Encoded X.509 Distinguished name [RFC2253]\n   NT-SMTP-NAME      7    Name in form of SMTP email name\n                            (e.g., user@example.com)\n   NT-ENTERPRISE    10    Enterprise name - may be mapped to principal\n                            name\n             */\n\n            name_type = Interop.PRINCIPAL_TYPE.NT_PRINCIPAL;\n\n            name_string = new List<string>();\n        }\n\n        public PrincipalName(string principal)\n        {\n            // create with principal\n            name_type = Interop.PRINCIPAL_TYPE.NT_PRINCIPAL;\n\n            name_string = new List<string>();\n            name_string.Add(principal);\n        }\n\n        public PrincipalName(AsnElt body)\n        {\n            // KRB_NT_PRINCIPAL = 1\n            //      means just the name of the principal\n            // KRB_NT_SRV_INST = 2\n            //      service and other unique instance (krbtgt)\n\n            name_type = (Interop.PRINCIPAL_TYPE)body.Sub[0].Sub[0].GetInteger();\n\n            int numberOfNames = body.Sub[1].Sub[0].Sub.Length;\n\n            name_string = new List<string>();\n\n            for (int i = 0; i < numberOfNames; i++)\n            {\n                name_string.Add(Encoding.ASCII.GetString(body.Sub[1].Sub[0].Sub[i].GetOctetString()));\n            }\n        }\n\n        public AsnElt Encode()\n        {\n            // name-type[0] Int32\n            AsnElt nameTypeElt = AsnElt.MakeInteger((long)name_type);\n            AsnElt nameTypeSeq = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] { nameTypeElt });\n            nameTypeSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 0, nameTypeSeq);\n\n\n            // name-string[1] SEQUENCE OF KerberosString\n            //  add in the name string sequence (one or more)\n            AsnElt[] strings = new AsnElt[name_string.Count];\n\n            for (int i = 0; i < name_string.Count; ++i)\n            {\n                string name = name_string[i];\n                AsnElt nameStringElt = AsnElt.MakeString(AsnElt.IA5String, name);\n                nameStringElt = AsnElt.MakeImplicit(AsnElt.UNIVERSAL, AsnElt.GeneralString, nameStringElt);\n                strings[i] = nameStringElt;\n            }\n\n            AsnElt stringSeq = AsnElt.Make(AsnElt.SEQUENCE, strings);\n            AsnElt stringSeq2 = AsnElt.Make(AsnElt.SEQUENCE, new[] { stringSeq } );\n            stringSeq2 = AsnElt.MakeImplicit(AsnElt.CONTEXT, 1, stringSeq2);\n\n\n            // build the final sequences\n            AsnElt seq = AsnElt.Make(AsnElt.SEQUENCE, new[] { nameTypeSeq, stringSeq2 });\n\n            AsnElt seq2 = AsnElt.Make(AsnElt.SEQUENCE, new[] { seq });\n\n            return seq2;\n        }\n\n        public Interop.PRINCIPAL_TYPE name_type { get; set; }\n\n        public List<string> name_string { get; set; }\n    }\n}'