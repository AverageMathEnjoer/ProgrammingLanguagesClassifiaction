b"import System.Environment (getArgs)\nimport Data.Set\n\nnub' :: Ord a => [a] -> [a]\nnub' = hub' empty empty . preprocess\n\npreprocess :: Ord a => [a] -> [(a, Set a)]\npreprocess xs = zip xs (tail (scanr insert empty xs))\n\nhub' :: Ord a => Set a -> Set a -> [(a, Set a)] -> [a]\nhub' ps ws [] = []\nhub' ps ws ((x, xs) : xss) = \n    if member x ps then \n        hub' ps ws xss \n    else case (member x xs, member x ws) of\n        (False, False)   -> eus ++ [x] ++ hub' qs empty xss\n        (False, True)    -> eus ++ [x] ++ hub' qs vs xss\n        (True, False)    -> hub' ps (insert x us) xss\n        (True, True)     -> hub' ps ws xss\n        where (us, vs) = split x ws\n              eus = elems us\n              qs = Prelude.foldr insert ps eus\n\n"