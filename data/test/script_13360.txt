b"{-# LANGUAGE GADTs #-}\n{-# LANGUAGE RecordWildCards #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n\n-- |\n-- Module      : Hoodle.Widget.Dispatch\n-- Copyright   : (c) 2011-2014 Ian-Woo Kim\n--\n-- License     : BSD3\n-- Maintainer  : Ian-Woo Kim <ianwookim@gmail.com>\n-- Stability   : experimental\n-- Portability : GHC\nmodule Hoodle.Widget.Dispatch where\n\nimport Control.Applicative ((<|>))\nimport Control.Lens (view)\nimport Control.Monad (guard, (<=<))\nimport Control.Monad.State (get, lift, liftIO)\nimport Control.Monad.Trans.Maybe (MaybeT (..))\nimport qualified Data.ByteString.Char8 as B\nimport Data.Foldable (forM_)\nimport Data.Hoodle.BBox (bbxed_content)\nimport Data.Hoodle.Simple (Link (..))\nimport qualified Data.Text.Encoding as TE\nimport Graphics.Hoodle.Render.Type.Item (RItem (..))\nimport Graphics.Hoodle.Render.Util.HitTest (isPointInBBox)\nimport Hoodle.Coroutine.Link (openLinkAction)\nimport Hoodle.Device (PointerCoord (..))\nimport Hoodle.Type.Canvas\n  ( CanvasId,\n    CanvasInfo,\n    currentPageNum,\n    drawArea,\n    forBoth',\n    notifiedItem,\n    pageArrangement,\n    unboxBiAct,\n    viewInfo,\n  )\nimport Hoodle.Type.Coroutine (MainCoroutine)\nimport Hoodle.Type.HoodleState\n  ( HoodleState,\n    currentUnit,\n    doesFollowLinks,\n    getCanvasInfo,\n    settings,\n    unitHoodles,\n  )\nimport Hoodle.Type.PageArrangement\n  ( PageCoordinate (..),\n    PageNum (..),\n  )\nimport Hoodle.Util (urlParse)\nimport Hoodle.View.Coordinate\n  ( desktop2Page,\n    device2Desktop,\n    makeCanvasGeometry,\n  )\nimport Hoodle.Widget.Clock\n  ( checkPointerInClock,\n    startClockWidget,\n  )\nimport Hoodle.Widget.Layer\n  ( checkPointerInLayer,\n    startLayerWidget,\n  )\nimport Hoodle.Widget.PanZoom\n  ( PanZoomTouch (PenMode),\n    checkPointerInPanZoom,\n    startPanZoomWidget,\n  )\n\nwidgetCheckPen ::\n  CanvasId ->\n  PointerCoord ->\n  -- | default action\n  MainCoroutine () ->\n  MainCoroutine ()\nwidgetCheckPen cid pcoord defact =\n  get >>= \\xst -> forBoth' unboxBiAct (chk xst) ((getCanvasInfo cid . view (unitHoodles . currentUnit)) xst)\n  where\n    chk :: HoodleState -> CanvasInfo a -> MainCoroutine ()\n    chk xstate cinfo = do\n      let cvs = view drawArea cinfo\n          pnum = (PageNum . view currentPageNum) cinfo\n          arr = view (viewInfo . pageArrangement) cinfo\n      geometry <- liftIO $ makeCanvasGeometry pnum arr cvs\n      let triplet = (cid, cinfo, geometry)\n      m <-\n        runMaybeT $\n          (lift . startPanZoomWidget PenMode triplet <=< MaybeT . return . checkPointerInPanZoom triplet) pcoord\n            <|> (lift . startLayerWidget triplet <=< MaybeT . return . checkPointerInLayer triplet) pcoord\n            <|> (lift . startClockWidget triplet <=< MaybeT . return . checkPointerInClock triplet) pcoord\n            <|> ( do\n                    guard (view (settings . doesFollowLinks) xstate)\n                    (pnum', bbox, ritem) <- (MaybeT . return . view notifiedItem) cinfo\n                    (pnum'', PageCoord (x, y)) <- (MaybeT . return . desktop2Page geometry . device2Desktop geometry) pcoord\n                    guard (pnum' == pnum'')\n                    guard (isPointInBBox bbox (x, y))\n                    case ritem of\n                      RItemLink lnkbbx _ -> do\n                        let lnk = bbxed_content lnkbbx\n                            loc = link_location lnk\n                            mid = case lnk of\n                              LinkAnchor {..} -> Just (TE.decodeUtf8 link_linkeddocid, TE.decodeUtf8 link_anchorid)\n                              _ -> Nothing\n                        forM_ ((urlParse . B.unpack) loc) (\\url -> lift (openLinkAction url mid))\n                        MaybeT (return (Just ()))\n                      _ -> MaybeT (return Nothing)\n                )\n      case m of\n        Nothing -> defact\n        Just _ -> return ()\n"