b'import com.github.eprendre.tingshu.utils.Book\nimport com.github.eprendre.tingshu.utils.Episode\nimport org.jsoup.Jsoup\nimport org.junit.Test\nimport java.net.URLEncoder\n\nclass Wap520Test {\n\n    @Test\n    fun search() {\n        val keywords = "\xe5\x87\xa1\xe4\xba\xba\xe4\xbf\xae\xe4\xbb\x99\xe4\xbc\xa0"\n\n        val url = "http://wap.fushu520.com/search.html"\n        val requestParams = mapOf("searchword" to keywords, "searchtype" to "novelname")\n\n        val doc = Jsoup.connect(url)\n            .testConfig(false)\n            .headers(mapOf("Referer" to "http://wap.fushu520.com/"))\n            .data(requestParams)\n            .post()\n\n        val list = ArrayList<Book>()\n\n        val elementList = doc.select(".book-ol > .book-li")\n        elementList.forEach { item ->\n            var coverUrl = item.selectFirst(".book-cover").attr("data-original")\n            if (coverUrl.startsWith("/")) {\n                coverUrl = "http://wap.fushu520.com$coverUrl"\n            }\n            val bookUrl = item.selectFirst("a").absUrl("href")\n            val title = item.selectFirst(".book-title").text().trim()\n            val a = item.selectFirst(".book-meta").text().trim().split(" ")\n            var author = ""\n            var artist = ""\n            if (a.isNotEmpty()) {\n                author = a[0]\n                if (a.size > 1) {\n                    artist = a[1]\n                }\n            }\n            val intro = item.selectFirst(".book-desc").text().trim()\n            list.add(Book(coverUrl, bookUrl, title, author, artist).apply {\n                this.intro = intro\n            })\n        }\n\n        println(list)\n    }\n\n    @Test\n    fun bookDetail() {\n        val bookUrl = "http://wap.fushu520.com/tingshu/9200/"\n        val doc = Jsoup.connect(bookUrl).testConfig(false).get()\n        val episodes = doc.select("#playlist > ul > li > a").map {\n            val title = it.text()\n            val url = it.absUrl("href")\n            Episode(title, url)\n        }\n        println(episodes)\n    }\n\n    @Test\n    fun audioUrl() {\n        val url = "http://wap.fushu520.com/mp3/9200/1.html"\n        val doc = Jsoup.connect(url).testConfig(false).get()\n        println(doc)\n    }\n\n    @Test\n    fun categoryList() {\n        val url = "http://wap.fushu520.com/sort/xuanhuan.html"\n\n        val doc = Jsoup.connect(url)\n            .testConfig(false)\n            .headers(mapOf("Referer" to "http://wap.fushu520.com/"))\n            .get()\n\n        val nextUrl = doc.selectFirst(".paging > .next").absUrl("href")\n        val totalPage = Regex(".+\\\\/(\\\\d+)\\\\.html").find(nextUrl)!!.groupValues[1].toInt()\n        val currentPage = if (url == nextUrl) {\n            totalPage\n        } else {\n            totalPage - 1\n        }\n\n        val list = ArrayList<Book>()\n\n        val elementList = doc.select(".book-ol > .book-li")\n        elementList.forEach { item ->\n            var coverUrl = item.selectFirst(".book-cover").attr("data-original")\n            if (coverUrl.startsWith("/")) {\n                coverUrl = "http://wap.fushu520.com$coverUrl"\n            }\n            val bookUrl = item.selectFirst("a").absUrl("href")\n            val title = item.selectFirst(".book-title").text().trim()\n            val a = item.selectFirst(".book-meta").text().trim().split(" ")\n            var author = ""\n            var artist = ""\n            if (a.isNotEmpty()) {\n                author = a[0]\n                if (a.size > 1) {\n                    artist = a[1]\n                }\n            }\n            val intro = item.selectFirst(".book-desc").text().trim()\n            list.add(Book(coverUrl, bookUrl, title, author, artist).apply {\n                this.intro = intro\n            })\n        }\n\n        println(list)\n    }\n\n    @Test\n    fun menus() {\n        val doc = Jsoup.connect("http://wap.fushu520.com/sort/").get()\n        val items = doc.select(".pd-module-box > dl > dd > a")\n        items.forEach {\n            val title = it.text()\n            val url = it.absUrl("href")\n            println("CategoryTab(\\"${title}\\", \\"${url}\\"),")\n        }\n    }\n}'