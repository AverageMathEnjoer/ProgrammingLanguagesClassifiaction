b'public class IPSearch3Span\n    {\n        private static readonly Lazy<IPSearch3Span> lazy = new(() => new IPSearch3Span());\n        public static IPSearch3Span Instance { get { return lazy.Value; } }\n        private IPSearch3Span() { LoadDat(); }\n\n        private static uint[,] prefMap = new uint[256, 2];\n        private static uint[] endArr;\n        private static string[] addrArr;\n        private void LoadDat()\n        {\n            string datPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, @"qqzeng-ip-ultimate.dat");\n            byte[] data = File.ReadAllBytes(datPath);\n            Span<byte> span = data;\n            for (int k = 0; k < 256; k++)\n            {\n                int i = k * 8 + 4;\n                uint startIndex = ToInt32(span[i..(i + 4)]);\n                uint endIndex = ToInt32(span[(i + 4)..(i + 8)]);\n                prefMap[k, 0] = startIndex; prefMap[k, 1] = endIndex;\n            }\n            uint RecordSize = ToInt32(span[0..4]);\n            endArr = new uint[RecordSize];\n            addrArr = new string[RecordSize];\n            int endArrIndex = 0;\n            int addrArrIndex = 0;\n            int p = 2052;\n            for (int i = 0; i < RecordSize; i++, p += 8)\n            {\n                uint endipnum = ToInt32(span[p..(p + 4)]);\n                uint offset = ToInt24(span[(4 + p)..(7 + p)]);\n                int length = span[7 + p];\n\n                endArr[endArrIndex++] = endipnum;\n                addrArr[addrArrIndex++] = Encoding.UTF8.GetString(data, (int)offset, length);\n            }\n\n        }\n\n\n\n        public string Query(string ip)\n        {\n            long val = IpToInt(ip, out long prefix);\n            long low = prefMap[prefix, 0], high = prefMap[prefix, 1];\n            long cur = low == high ? low : BinarySearch(low, high, val);\n            return addrArr[cur];\n        }\n\n        private long IpToInt(string ipString, out long prefix)\n        {\n            int end = ipString.Length;\n            long[] parts = new long[4];\n            int dotCount = 0;\n            int current = 0;\n            long currentValue = 0;\n\n            for (; current < end; current++)\n            {\n                char ch = ipString[current];\n\n                if (ch >= \'0\' && ch <= \'9\')\n                {\n                    currentValue = currentValue * 10 + (ch - \'0\');\n                }\n                else if (ch == \'.\')\n                {\n                    parts[dotCount++] = currentValue;\n                    currentValue = 0;\n                }\n                else\n                {\n                    break;\n                }\n            }\n\n            parts[dotCount] = currentValue;\n            prefix = parts[0];\n            return (parts[0] << 24) | ((parts[1] & 0xff) << 16) | ((parts[2] & 0xff) << 8) | (parts[3] & 0xff);\n        }\n\n\n        // \xe4\xba\x8c\xe5\x88\x86\xe9\x80\xbc\xe8\xbf\x91 O(logN)  \n        private long BinarySearch(long low, long high, long k)\n        {\n            long M = 0;\n            while (low <= high)\n            {\n                long mid = low + ((high - low) >> 1);\n                if (endArr[mid] >= k)\n                {\n                    M = mid;\n                    high = mid - 1;\n                }\n                else\n                {\n                    low = mid + 1;\n                }\n            }\n            return M;\n        }\n\n\n        //\xe5\xb0\x8f\xe7\xab\xaf\xe5\xba\x8f\n        private uint ToInt32(Span<byte> span)\n        {\n            return (uint)span[0] | (uint)span[1] << 8 | (uint)span[2] << 16 | (uint)span[3] << 24;\n        }\n\n        private uint ToInt24(Span<byte> span)\n        {\n            return (uint)span[0] | (uint)span[1] << 8 | (uint)span[2] << 16;\n        }\n\n\n\n    }\n\n    /*\n    \xef\xbc\x88\xe8\xb0\x83\xe7\x94\xa8\xe4\xbe\x8b\xe5\xad\x90\xef\xbc\x89\xef\xbc\x9a   \n    string result = IPSearch3Span.Instance.Query("1.2.3.4");\n   --> result="\xe4\xba\x9a\xe6\xb4\xb2|\xe4\xb8\xad\xe5\x9b\xbd|\xe9\xa6\x99\xe6\xb8\xaf|\xe4\xb9\x9d\xe9\xbe\x99|\xe6\xb2\xb9\xe5\xb0\x96\xe6\x97\xba|\xe6\x96\xb0\xe4\xb8\x96\xe7\x95\x8c\xe7\x94\xb5\xe8\xae\xaf|810200|Hong Kong|HK|114.17495|22.327115"\n    */\n'