b'-- % cabal install hspec\n-- % runghc <this_file>\n\nimport Test.Hspec\n\nmain :: IO ()\nmain = hspec $ do\n    describe "my_catalan" $\n        it "calculates the same results of formula" $ do\n            let xs = [1..10]\n            map my_catalan xs `shouldBe` map catalanFormula xs\n    describe "my_catalan2" $\n        it "calculates the same results of formula" $ do\n            let xs = [1..10]\n            map my_catalan2 xs `shouldBe` map catalanFormula xs\n    describe "my_coin" $ do\n        it "calculates the same results of America coins " $ do\n            let xs = [1..150]\n            map (`my_coin` [1,5,10,25,50]) xs `shouldBe` map usCoin xs\n        it "calculates the same results of Japanese coins " $ do\n            let xs = [1..150]\n            map (`my_coin` [1,5,10,50,100,500]) xs `shouldBe` map jaCoin xs\n\n----------------------------------------------------------------\n\ncatalanFormula :: Integer -> Integer\ncatalanFormula n = bang (2 * n) `div` bang (n + 1) `div` bang n\n  where\n    bang x = product [1..x]\n\nusCoinA,usCoinB,usCoinC,usCoinD,usCoin :: Integer -> Integer\nusCoinA n | n < 0 = 0\nusCoinA _         = 1\nusCoinB n | n < 0 = 0\nusCoinB n         = usCoinA n + usCoinB (n - 5)\nusCoinC n | n < 0 = 0\nusCoinC n         = usCoinB n + usCoinC (n - 10)\nusCoinD n | n < 0 = 0\nusCoinD n         = usCoinC n + usCoinD (n - 25)\nusCoin  n | n < 0 = 0\nusCoin  n         = usCoinD n + usCoin  (n - 50)\n\njaCoinA,jaCoinB,jaCoinC,jaCoinD,jaCoinE,jaCoin :: Integer -> Integer\njaCoinA n | n < 0 = 0\njaCoinA _         = 1\njaCoinB n | n < 0 = 0\njaCoinB n         = jaCoinA n + jaCoinB (n - 5)\njaCoinC n | n < 0 = 0\njaCoinC n         = jaCoinB n + jaCoinC (n - 10)\njaCoinD n | n < 0 = 0\njaCoinD n         = jaCoinC n + jaCoinD (n - 50)\njaCoinE n | n < 0 = 0\njaCoinE n         = jaCoinD n + jaCoinE (n - 100)\njaCoin  n | n < 0 = 0\njaCoin  n         = jaCoinE n + jaCoin  (n - 500)\n\n----------------------------------------------------------------\n\nmy_catalan :: Integer -> Integer\nmy_catalan x = my_cat x x\n\nmy_cat :: Integer -> Integer -> Integer\nmy_cat _ 0 = 1\nmy_cat m n\n  | m == n    = undefined\n  | otherwise = undefined\n\n----------------------------------------------------------------\n\nmy_catalan2 :: Integer -> Integer\nmy_catalan2 0 = 1\nmy_catalan2 n = sum (zipWith (*) xs ys)\n  where\n    xs = undefined\n    ys = undefined\n\n----------------------------------------------------------------\n\nmy_coin :: Integer -> [Integer] -> Integer\nmy_coin 0 _   = 1\nmy_coin _ []  = 0\nmy_coin n (c:cs)\n  | n < 0     = 0\n  | otherwise = undefined\n'