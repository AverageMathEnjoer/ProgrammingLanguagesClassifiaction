b'{-# LANGUAGE OverloadedStrings #-}\n\n-- Generate PDF file with font descriptor containing indirect fields\n\nmodule Main\n(\n  main\n)\nwhere\n\nimport qualified Data.ByteString.Lazy as BSL\nimport qualified Data.Vector as Vector\nimport qualified Data.HashMap.Strict as HashMap\nimport Control.Monad\nimport qualified System.IO.Streams as Streams\n\nimport Pdf.Core\nimport Pdf.Core.Types\nimport Pdf.Core.Writer\n\nmain :: IO ()\nmain = do\n  let tr = HashMap.fromList [\n        ("Size", Number $ fromIntegral $ length objects),\n        ("Root", Ref catalogRef)\n        ]\n      objects = [\n        (Dict catalog, catalogRef),\n        (Dict rootNode, rootNodeRef),\n        (Dict page, pageRef),\n        (Dict font, fontRef),\n        (Dict fontDesc, fontDescRef),\n        (Number 0, flagsRef)\n        ]\n      streams = [\n        (contentDict, contentData, contentRef),\n        (xobjDict, xobjData, xobjRef),\n        (xobj1Dict, xobj1Data, xobj1Ref)\n        ]\n      catalog = HashMap.fromList [\n        ("Type", Name "Catalog"),\n        ("Pages", Ref rootNodeRef)\n        ]\n      rootNode = HashMap.fromList [\n        ("Type", Name "Pages"),\n        ("Kids", Array $ Vector.fromList [Ref pageRef]),\n        ("Count", Number 1)\n        ]\n      page = HashMap.fromList [\n        ("Type", Name "Page"),\n        ("Parent", Ref rootNodeRef),\n        ("Contents", Ref contentRef),\n        ("Resources", Dict resourcesDict),\n        ("MediaBox", Array $ Vector.fromList [\n          Number 0,\n          Number 0,\n          Number 200,\n          Number 200\n          ])\n        ]\n      resourcesDict = HashMap.fromList [\n        ("Font", Dict $ HashMap.fromList [\n          ("F1", Ref fontRef)\n          ]),\n        ("XObject", Dict $ HashMap.fromList [\n          ("X1", Ref xobjRef)\n          ])\n        ]\n      font = HashMap.fromList [\n        ("Type", Name "Font"),\n        ("Subtype", Name "Type1"),\n        ("BaseFont", Name "Helvetica"),\n        ("FontDescriptor", Ref fontDescRef)\n        ]\n      fontDesc = HashMap.fromList [\n        ("Type", Name "FontDescriptor"),\n        ("FontName", Name "Helvetica"),\n        ("Flags", Ref flagsRef),  -- ^ It\'s an indirect reference!\n        ("Rectangle", Array (rectangleToArray $ Rectangle 0 0 10 10)),\n        ("ItalicAngle", Number (-10)),\n        ("Ascent", Number 8),\n        ("Descent", Number 2)\n        ]\n      xobjResourceDict = HashMap.fromList [\n        ("Font", Dict $ HashMap.fromList [\n          ("F1", Ref fontRef)\n          ]),\n        ("XObject", Dict $ HashMap.fromList [\n          ("X1", Ref xobj1Ref)\n          ])\n        ]\n      xobjDict = HashMap.fromList [\n        ("Length", Number $ fromIntegral $ BSL.length xobjData),\n        ("Type", Name "XObject"),\n        ("Subtype", Name "Form"),\n        ("Resources", Dict xobjResourceDict),\n        ("BBox", Array $ Vector.fromList [\n          Number 0,\n          Number 0,\n          Number 200,\n          Number 200\n          ])\n        ]\n      xobjData = "BT /F1 12 Tf 10 10 TD (XObject is here) Tj ET /X1 Do"\n      xobj1ResourceDict = HashMap.fromList [\n        ("Font", Dict $ HashMap.fromList [\n          ("F1", Ref fontRef)\n          ])\n        ]\n      xobj1Dict = HashMap.fromList [\n        ("Length", Number $ fromIntegral $ BSL.length xobj1Data),\n        ("Type", Name "XObject"),\n        ("Subtype", Name "Form"),\n        ("Resources", Dict xobj1ResourceDict),\n        ("BBox", Array $ Vector.fromList [\n          Number 0,\n          Number 0,\n          Number 200,\n          Number 200\n          ])\n        ]\n      xobj1Data = "BT /F1 12 Tf 50 50 TD (nested XObject is here) Tj ET"\n      contentDict = HashMap.fromList [\n        ("Length", Number $ fromIntegral $ BSL.length contentData)\n        ]\n      contentData = "BT /F1 12 Tf 100 100 TD (Hello World!!!) Tj ET /X1 Do"\n      catalogRef = R 1 0\n      rootNodeRef = R 2 0\n      pageRef = R 3 0\n      contentRef = R 4 0\n      fontRef = R 5 0\n      fontDescRef = R 6 0\n      flagsRef = R 7 0\n      xobjRef = R 8 0\n      xobj1Ref = R 9 0\n\n  writer <- makeWriter Streams.stdout\n  writeHeader writer\n  forM_ objects $ \\(obj, ref) ->\n    writeObject writer ref obj\n  forM_ streams $ \\(dict, dat, ref) ->\n    writeStream writer ref dict dat\n  writeXRefTable writer 0 tr\n'