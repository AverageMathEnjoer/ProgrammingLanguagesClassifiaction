b'{-# LANGUAGE QuasiQuotes #-}\n\nmodule NixConfSpec where\n\nimport Cachix.Client.NixConf as NixConf\nimport Cachix.Types.BinaryCache (BinaryCache (..))\nimport Cachix.Types.Permission (Permission (..))\nimport Data.String.Here\nimport Protolude\nimport Test.Hspec\n\nproperty :: Text -> Expectation\nproperty x = NixConf.render <$> parse x `shouldBe` Right x\n\nbc :: BinaryCache\nbc =\n  BinaryCache\n    { name = "name",\n      uri = "https://name.cachix.org",\n      isPublic = True,\n      permission = Admin,\n      publicSigningKeys = ["pub"],\n      githubUsername = "foobar"\n    }\n\nspec :: Spec\nspec = do\n  describe "render . parse" $ do\n    it "handles single value substituters" $\n      property "substituters = a\\n"\n    it "handles multi value substituters" $\n      property "substituters = a b c\\n"\n    it "handles all known keys" $\n      property "substituters = a b c\\ntrusted-users = him me\\ntrusted-public-keys = a\\n"\n    it "random content" $\n      property "blabla = foobar\\nfoo = bar\\n"\n  describe "add" $ do\n    it "merges binary caches from both files" $\n      let globalConf =\n            NixConf\n              [ Substituters ["bc1"],\n                TrustedPublicKeys ["pub1"]\n              ]\n          localConf =\n            NixConf\n              [ Substituters ["bc2"],\n                TrustedPublicKeys ["pub2"]\n              ]\n          result =\n            NixConf\n              [ Substituters [defaultPublicURI, "bc1", "bc2", "https://name.cachix.org"],\n                TrustedPublicKeys [defaultSigningKey, "pub1", "pub2", "pub"]\n              ]\n       in add bc [globalConf, localConf] localConf `shouldBe` result\n    it "is noop if binary cache exists in one file" $\n      let globalConf =\n            NixConf\n              [ Substituters [defaultPublicURI, "https://name.cachix.org"],\n                TrustedPublicKeys [defaultSigningKey, "pub"]\n              ]\n          localConf = NixConf []\n          result =\n            NixConf\n              [ Substituters [defaultPublicURI, "https://name.cachix.org"],\n                TrustedPublicKeys [defaultSigningKey, "pub"]\n              ]\n       in add bc [globalConf, localConf] localConf `shouldBe` result\n    it "preserves other nixconf entries" $\n      let globalConf =\n            NixConf\n              [ Substituters ["http"],\n                TrustedPublicKeys ["pub1"],\n                TrustedUsers ["user"],\n                Other "foo"\n              ]\n          localConf =\n            NixConf\n              [ TrustedUsers ["user2"],\n                Other "bar"\n              ]\n          result =\n            NixConf\n              [ TrustedUsers ["user2"],\n                Other "bar",\n                Substituters [defaultPublicURI, "http", "https://name.cachix.org"],\n                TrustedPublicKeys [defaultSigningKey, "pub1", "pub"]\n              ]\n       in add bc [globalConf, localConf] localConf `shouldBe` result\n    it "removed duplicates" $\n      let globalConf =\n            NixConf\n              [ Substituters ["bc1", "bc1"],\n                TrustedPublicKeys ["pub1", "pub1"]\n              ]\n          localConf =\n            NixConf\n              [ Substituters ["bc2", "bc2"],\n                TrustedPublicKeys ["pub2", "pub2"]\n              ]\n          result =\n            NixConf\n              [ Substituters [defaultPublicURI, "bc1", "bc2", "https://name.cachix.org"],\n                TrustedPublicKeys [defaultSigningKey, "pub1", "pub2", "pub"]\n              ]\n       in add bc [globalConf, localConf] localConf `shouldBe` result\n    it "adds binary cache and defaults if no existing entries exist" $\n      let globalConf = NixConf []\n          localConf = NixConf []\n          result =\n            NixConf\n              [ Substituters [defaultPublicURI, "https://name.cachix.org"],\n                TrustedPublicKeys [defaultSigningKey, "pub"]\n              ]\n       in add bc [globalConf, localConf] localConf `shouldBe` result\n  describe "parse" $ do\n    it "parses substituters" $\n      parse "substituters = a\\n"\n        `shouldBe` Right (NixConf [Substituters ["a"]])\n    it "parses long key" $\n      parse "binary-caches-parallel-connections = 40\\n"\n        `shouldBe` Right (NixConf [Other "binary-caches-parallel-connections = 40"])\n    it "parses substituters with multiple values" $\n      parse "substituters = a b c\\n"\n        `shouldBe` Right (NixConf [Substituters ["a", "b", "c"]])\n    it "parses equal sign after the first key as literal" $\n      parse "substituters = a b c= d\\n"\n        `shouldBe` Right (NixConf [Substituters ["a", "b", "c=", "d"]])\n    it "parses with missing endline" $\n      parse "allowed-users = *"\n        `shouldBe` Right (NixConf [Other "allowed-users = *"])\n    it "parses a complex example" $\n      parse realExample\n        `shouldBe` Right\n          ( NixConf\n              [ Other "",\n                Substituters ["a", "b", "c"],\n                TrustedUsers ["him", "me"],\n                TrustedPublicKeys ["a"],\n                Other "blabla =  asd",\n                Other "# comment",\n                Other "",\n                Other ""\n              ]\n          )\n\nrealExample :: Text\nrealExample =\n  [hereLit|\nsubstituters = a  b c\ntrusted-users = him me\ntrusted-public-keys  =  a\nblabla =  asd\n# comment\n\n\n|]\n'