b'# Arguments validation for freq, ctable, descr and dfSummary functions.\n# Another function for validating st_options arguments follows.\n#\' @importFrom checkmate test_int test_logical test_choice test_string test_number\n#\' @importFrom dplyr n_distinct\n#\' @importFrom stats na.omit\n#\' @keywords internal\ncheck_args <- function(mc, dotArgs) {\n  \n  caller      <- sub(".+::","",as.character(sys.call(-1))[1])\n  pf          <- parent.frame()\n  errmsg      <- character()\n  caller_orig <- caller\n  \n  if (caller == "FUN") {\n    pf$flag_by <- TRUE\n    # When stby() was called, deduce caller from formals\n    if ("cumul" %in% names(pf))\n      caller <- "freq"\n    else if ("transpose" %in% names(pf))\n      caller <- "descr"\n    else if ("chisq" %in% names(pf))\n      caller <- "ctable"\n    else if ("graph.col" %in% names(pf))\n      caller <- "dfSummary"\n  } else {\n    pf$flag_by <- FALSE\n  }\n  \n  # Deprecated arguments -------------------------------------------------------\n  if ("file" %in% names(dotArgs)) {\n    message(paste("\'file\' argument is deprecated; use with print() or view(),",\n                  "e.g. print(x, file=", dotArgs$file))\n  }\n  \n  if ("omit.headings" %in% names(dotArgs)) {\n    errmsg %+=% "\'omit.headings\' is deprecated; use \'headings\' instead"\n  }\n  \n  # Arguments common to all functions ------------------------------------------\n  if (is.null(pf$x)) {\n    tmp_x_name <- deparse(substitute(x, env = parent.frame()))\n    errmsg %+=% paste(tmp_x_name, "is either NULL or does not exist")\n  }\n  \n  if ("round.digits" %in% names(mc) && \n      !isTRUE(test_int(pf$round.digits))) {\n    errmsg %+=% "\'round.digits\' must be a whole number"\n  }\n  \n  if ("style" %in% names(mc)) {\n    if (caller %in% c("freq", "descr", "ctable")) {\n      if (!isTRUE(test_choice(pf$style, \n                              c("simple", "grid", "rmarkdown", "jira")))) {\n        errmsg %+=% "\'style\' must be one of \'simple\', \'grid\', \'rmarkdown\', or \'jira\'"\n      }\n    }\n  }\n  \n  if ("plain.ascii" %in% names(mc) && \n      !isTRUE(test_logical(pf$plain.ascii, \n                           len = 1, any.missing = FALSE))) {\n    errmsg %+=% "\'plain.ascii\' must be either TRUE or FALSE"\n  }\n  \n  if ("justify" %in% names(mc)) {\n    if (caller == "freq") {\n      if (!isTRUE(test_string(pf$justify, min.chars = 1)) ||\n          !isTRUE(test_choice(tolower(substr(pf$justify,1,1)), \n                              c("l", "c", "m", "r", "d")))) {\n        errmsg %+=% "\'justify\' must be one of \'l\', \'c\', \'r\', or \'d\' (default)"\n      }\n    } else if (!isTRUE(test_choice(tolower(substr(pf$justify,1,1)), \n                                   c("l", "c", "m", "r")))) {\n      errmsg %+=% "\'justify\' must be one of \'l\', \'c\', or \'r\'"\n    }\n    \n    pf$justify <- switch(tolower(substr(pf$justify, 1, 1)),\n                         l = "left",\n                         c = "center",\n                         m = "center",\n                         d = "default",\n                         r = "right")\n  }\n  \n  if ("display.labels" %in% names(mc) &&\n      !isTRUE(test_logical(pf$display.labels, \n                           len = 1, any.missing = FALSE))) {\n    errmsg %+=% "\'display.labels\' must be either TRUE or FALSE"\n  }\n  \n  if ("headings" %in% names(mc) &&\n      !isTRUE(test_logical(pf$headings, \n                           len = 1, any.missing = FALSE))) {\n    errmsg %+=% "\'headings\' must be either TRUE or FALSE"\n  }\n  \n  # freq-specific arguments ----------------------------------------------------\n  if (caller == "freq") {\n    \n    if ("report.nas" %in% names(mc) && \n        !isTRUE(test_logical(pf$report.nas, \n                             len = 1, any.missing = FALSE))) {\n      errmsg %+=% "\'report.nas\' must be either TRUE or FALSE"\n    }\n    \n    if ("display.type" %in% names(mc) &&\n        !isTRUE(test_logical(pf$display.type, \n                             len = 1, any.missing = FALSE))) {\n      errmsg %+=% "\'display.type\' must be either TRUE or FALSE"\n    }\n    \n    if ("cumul" %in% names(mc) && \n        !isTRUE(test_logical(pf$cumul, len = 1, any.missing = FALSE))) {\n      errmsg %+=% "\'cumul\' must be either TRUE or FALSE"\n    }\n    \n    if ("order" %in% names(mc)) {\n      order <- switch(tolower(substr(sub("[+-]", "", pf$order), 1, 1)),\n                      d = "default",\n                      l = "level",\n                      f = "freq",\n                      n = "name")\n      \n      if (!isTRUE(test_choice(order, \n                              c("default", "level", "freq", "name")))) {\n        errmsg %+=% paste("\'order\' must be one of \'default\', \'level\',",\n                          "\'freq\', or \'name\'")\n      } else if (order == "level" && !is.factor(pf$x)) {\n        errmsg %+=% paste("\'order\' can be set to \'level\' only for factors.",\n                          "Use \'name\' or \'freq\', or convert object to factor",\n                          "prior to calling freq()")\n      }\n      \n      order_sign <- sub("^.*([-+]).*$", "\\\\1", pf$order)\n      order_sign <- ifelse(order_sign %in% c("+", "-"), order_sign, "+")\n      \n      pf$order <- order\n      pf$order_sign <- order_sign\n      \n    } else {\n      pf$order_sign <- "+"\n    }\n    \n    if ("rows" %in% names(mc)) {\n      \n      if (NA %in% pf$rows) {\n        errmsg %+=% paste("\'rows\' cannot contain NA; NA\'s are always displayed",\n                          "last; use \'report.nas\' to turn off na reporting")\n      }\n      \n      if (is.character(pf$rows) && length(pf$rows) > 1 &&\n          !all(pf$rows %in% unique(pf$x))) {\n        errmsg %+=% paste("the following items used in the \'rows\' argument",\n                          "are not found in the data:", \n                          paste(setdiff(pf$rows, unique(pf$x)), sep = ","))\n      }\n      \n      if (is.numeric(pf$rows) && length(pf$rows) > 0) {\n        if (0 %in% pf$rows || length(unique(sign(pf$rows))) > 1 ||\n            (sign(pf$rows[1]) == -1 && \n             length(pf$rows) >= n_distinct(pf$x, na.rm = TRUE))) {\n          errmsg %+=% "Invalid \'rows\' argument"\n        } else if (!is.null(pf$x) && \n                   max(abs(pf$rows)) > n_distinct(pf$x, na.rm = TRUE)) {\n          nmax <- n_distinct(pf$x, na.rm = TRUE)\n          wrong_ind <- which(abs(pf$rows) > nmax)\n          if (length(wrong_ind)) {\n            message("There are only ", nmax, " rows to show; higher ",\n                    "numbers will be ignored")\n            pf$rows <- pf$rows[-wrong_ind]\n          }\n        } \n      } else if (length(pf$rows) > 0 && max(table(pf$rows)) > 1) {\n        warning("one or more elements in the rows argument appears more than once")\n      }\n    }\n  }\n  \n  # freq & ctable arguments ----------------------------------------------------\n  if (caller %in% c("freq", "ctable")) {\n    if ("totals" %in% names(mc) && \n        !isTRUE(test_logical(pf$totals, \n                             len = 1, any.missing = FALSE))) {\n      errmsg %+=% "\'totals\' must be either TRUE or FALSE"\n    }\n    \n    if (!identical(pf$weights, NA)) {\n      if (is.null(pf$weights)) {\n        errmsg %+=% "weights vector not found"\n      } else if (caller_orig != "FUN" && \n                 length(pf$weights) != nrow(as.data.frame(pf$x))) {\n        errmsg %+=% "weights vector must have same length as \'x\'"      \n      }\n    }\n  }\n  \n  # freq & descr arguments -----------------------------------------------------\n  if (caller %in% c("freq", "descr")) {\n    if ("rescale.weights" %in% names(mc) &&\n        !isTRUE(test_logical(pf$rescale.weights, \n                             len = 1, any.missing = FALSE))) {\n      errmsg %+=% "\'rescale.weights\' must be either TRUE or FALSE"\n    }\n  }\n  \n  # ctable-specific arguments --------------------------------------------------\n  if (caller == "ctable") {\n    if (is.null(pf$y)) {\n      tmp_y_name <- deparse(substitute(y, env = parent.frame()))\n      errmsg %+=% paste(tmp_y_name, "is either NULL or does not exist")\n    }\n    \n    if ("prop" %in% names(mc)) {\n      prop <- tolower(substr(pf$prop, 1, 1))\n      if (!isTRUE(test_choice(prop, c("t", "r", "c", "n")))) {\n        errmsg %+=% "\'prop\' must be one of \'t\', \'r\', \'c\', or \'n\'"\n      }\n      if (nchar(prop > 1)) {\n        pf$prop <- prop\n      }\n    }\n    \n    if ("useNA" %in% names(mc) &&\n        !isTRUE(test_choice(pf$useNA, \n                            c("ifany", "always", "no")))) {\n      errmsg %+=% "\'useNA\' must be one of \'ifany\', \'always\', or \'no\'"\n    }\n    \n    if ("dnn" %in% names(mc) &&\n        !isTRUE(test_character(pf$dnn, any.missing = FALSE, \n                               len = 2, unique = TRUE))) {\n      errmsg %+=% "\'dnn\' must be a character vector of 2 distinct values"\n    }\n    \n    if ("OR" %in% names(mc) && !isFALSE(pf$OR)) {\n      if (isTRUE(pf$OR)) {\n        pf$OR <- .95\n      } else {\n        if (!test_number(pf$OR, na.ok = FALSE, lower = .5, upper = .999)) {\n          errmsg %+=% "\'OR\' must be TRUE, FALSE, or a number between .5 and .999"\n        }\n        if (length(as.numeric(na.omit(unique(pf$x)))) != 2 ||\n            length(as.numeric(na.omit(unique(pf$y)))) != 2) {\n          errmsg %+=% "\'OR\' can only be used with 2 x 2 tables"\n        }\n      }\n    }\n    \n    if ("RR" %in% names(mc) && !isFALSE(pf$RR)) {\n      if (isTRUE(pf$RR)) {\n        pf$RR <- .95\n      } else {\n        if (!test_number(pf$RR, na.ok = FALSE, lower = .5, upper = .999)) {\n          errmsg %+=% "\'RR\' must be TRUE/FALSE or a number between .5 and .999"\n        }\n        if (length(as.numeric(na.omit(unique(pf$x)))) != 2 ||\n            length(as.numeric(na.omit(unique(pf$y)))) != 2) {\n          errmsg %+=% "\'RR\' can only be used with 2 x 2 tables"\n        }\n      }\n    }\n  }\n  \n  # descr arguments ------------------------------------------------------------\n  if (caller == "descr") {\n    if ("na.rm" %in% names(mc) &&\n        !isTRUE(test_logical(pf$na.rm, \n                             len = 1, any.missing = FALSE))) {\n      errmsg %+=% "\'na.rm\' must be either TRUE or FALSE"\n    }\n    \n    if ("transpose" %in% names(mc) &&\n        !isTRUE(test_logical(pf$transpose))) {\n      errmsg %+=% "\'transpose\' must be either TRUE or FALSE"\n    }\n    \n    if ("order" %in% names(mc)) {\n      if (length(pf$order) == 1) {\n        if (tolower(pf$order) == "s") {\n          pf$order <- "sort"\n        } else if (tolower(pf$order) == "p") {\n          pf$order <- "preserve"\n        }\n        \n        if (!pf$order %in% c("sort", "preserve")) {\n          errmsg %+=% paste0("\'order\' must be one of \'sort\', ",\n                             "\'preserve\', or a vector of variable names")\n        }\n      } else {\n        # order has length > 1 -- all elements must correspond to column names\n        if (length(ind <- which(!pf$order %in% colnames(pf$x.df))) > 0) {\n          errmsg %+=% paste("Following ordering element(s) not recognized:", \n                            paste(pf$order[ind], sep = ", "),\n                            collapse = " ")\n        }\n      }\n    }\n    \n    if (!identical(pf$weights, NA)) {\n      if (is.null(pf$weights)) {\n        errmsg %+=% "weights vector not found"\n      } else if (caller_orig != "FUN" && (length(pf$weights) != nrow(pf$x.df))) {\n        errmsg %+=% "weights vector must have same length as \'x\'"      \n      }\n    }\n  }\n  \n  # dfSummary arguments --------------------------------------------------------\n  if (caller == "dfSummary") {\n\n    if (!isTRUE(test_choice(pf$style, c("grid", "multiline")))) {\n      errmsg %+=% "\'style\' must be either \'grid\' or \'multiline\'"\n    }\n    \n    if ("varnumbers" %in% names(mc) &&\n        !isTRUE(test_logical(pf$varnumbers, \n                             len = 1, any.missing = FALSE))) {\n      errmsg %+=% "\'varnumbers\' must be either TRUE or FALSE"\n    }\n    \n    if ("labels.col" %in% names(mc) &&\n        !isTRUE(test_logical(pf$labels.col, \n                             len = 1, any.missing = FALSE))) {\n      errmsg %+=% "\'labels.col\' must be either TRUE or FALSE"\n    }\n    \n    if ("valid.col" %in% names(mc) &&\n        !isTRUE(test_logical(pf$valid.col, \n                             len = 1, any.missing = FALSE))) {\n      errmsg %+=% "\'valid.col\' must be either TRUE or FALSE"\n    }\n    \n    if ("na.col" %in% names(mc) &&\n        !isTRUE(test_logical(pf$na.col, \n                             len = 1, any.missing = FALSE))) {\n      errmsg %+=% "\'na.col\' must be either TRUE or FALSE"\n    }\n    \n    if ("graph.col" %in% names(mc) &&\n        !isTRUE(test_logical(pf$graph.col, \n                             len = 1, any.missing = FALSE))) {\n      errmsg %+=% "\'graph.col\' must be either TRUE or FALSE"\n    }\n    \n    if ("graph.magnif" %in% names(mc) && pf$graph.magnif <= 0) {\n      errmsg %+=% "\'graph.magnif\' must be > 0"\n    }\n    \n    if ("style" %in% names(mc) && pf$style == "rmarkdown") {\n      message("\'rmarkdown\' style not supported - using \'multiline\' instead")\n      pf$style <- "multiline"\n    }\n    \n    if ("trim.strings" %in% names(mc) &&\n        !isTRUE(test_logical(pf$trim.strings, \n                             len = 1, any.missing = FALSE))) {\n      errmsg %+=% "\'trim.strings\' must be either TRUE or FALSE"\n    }\n    \n    if ("silent" %in% names(mc) &&\n        !isTRUE(test_logical(pf$silent, len = 1, any.missing = FALSE))) {\n      errmsg %+=% "\'silent\' must be either TRUE or FALSE"\n    }\n    \n    if ("tmp.img.dir" %in% names(mc) && !is.na(pf$tmp.img.dir) &&\n        (!isTRUE(test_character(pf$tmp.img.dir, min.chars = 1, len = 1, )) ||\n         nchar(pf$tmp.img.dir) > 5)) {\n      errmsg %+=% "\'tmp.img.dir\' must have at least 1 and at most 5 characters"\n    }\n    \n    if ("tmp.img.dir" %in% names(mc) && !is.na(pf$tmp.img.dir) &&\n        isFALSE(st_options("use.x11"))) {\n      message("\'tmp.img.dir\' will be ignored since use.x11 option is set to ",\n              "FALSE")\n    }\n  }\n  return(errmsg)\n}\n\ncheck_args_tb <- function(mc) {\n  \n  pf <- parent.frame()\n  errmsg <- character()\n\n  if ("order" %in% names(mc) &&\n      !isTRUE(test_choice(pf$order, c(1, 2, 3)))) {\n    errmsg %+=% "\'order\' must be one of 1, 2, or 3"\n  }\n  \n  if ("na.rm" %in% names(mc) && \n      !isTRUE(test_logical(pf$na.rm, len = 1, any.missing = FALSE))) {\n    errmsg %+=% "\'na.rm\' must be either TRUE or FALSE"\n  }\n\n  if ("drop.val.col" %in% names(mc) && \n      !isTRUE(test_logical(pf$drop.val.col, len = 1, any.missing = FALSE))) {\n    errmsg %+=% "\'drop.val.col\' must be either TRUE or FALSE"\n  }\n  \n  return(errmsg)\n}\n\ncheck_args_print <- function(mc) {\n  \n  pf <- parent.frame()\n  errmsg <- character()\n  \n  if (!isTRUE(test_choice(pf$method, \n                          c("pander", "browser", "viewer", "render")))) {\n    errmsg %+=% paste("\'method\' must be one of \'pander\', \'browser\', \'viewer\',",\n                      "or \'render\'")\n  }\n\n  if (!isTRUE(test_int(pf$max.tbl.height, lower = 100, na.ok = FALSE)) &&\n      !is.infinite(pf$max.tbl.height)) {\n    errmsg %+=% "\'max.tbl.height\' must be an integer between 100 and Inf"\n  } \n  \n  if (pf$file == "" && isTRUE(pf$append)) {\n    errmsg %+=% "\'append\' is set to TRUE but no file name has been specified"\n  }\n\n  if (pf$file != "" && isTRUE(pf$append) && !file.exists(pf$file)) {\n    errmsg %+=% "\'append\' is set to TRUE but specified file does not exist"\n  }\n\n  if (pf$file != "" && isTRUE(pf$append) && !is.na(pf$report.title)) {\n    errmsg %+=% "Appending existing file -- \'report.title\' arg. will be ignored"\n  }\n\n  if (!isTRUE(test_string(pf$report.title, na.ok = TRUE))) {\n    errmsg %+=% "\'report.title\' must either be NA or a character string"\n  }\n\n  if (!isTRUE(test_logical(pf$escape.pipe, len = 1, any.missing = FALSE))) {\n    errmsg %+=% "\'escape.pipe\' must be either TRUE or FALSE"\n  }\n\n  if (!is.na(pf$custom.css) && \n      !isTRUE(check_file_exists(pf$custom.css, access = "r"))) {\n    errmsg %+=% "\'custom.css\' must point to an existing file."\n  }\n\n  if (!isTRUE(test_logical(pf$silent, len = 1, any.missing = FALSE))) {\n    errmsg %+=% "\'silent\' must be either TRUE or FALSE"\n  }\n\n  if (pf$file != "" && !isTRUE(test_path_for_output(pf$file, overwrite = TRUE))) {\n     errmsg %+=% "\'file\' path is not valid - check that directory exists"\n  }\n  \n  # # Change method to browser when file name was (most likely) provided by user\n  # if (grepl("\\\\.html$", pf$file, ignore.case = TRUE, perl = TRUE) &&\n  #     !grepl(pattern = tempdir(), x = pf$file, fixed = TRUE) && \n  #     pf$method == "pander") {\n  #   pf$method <- "browser"\n  #   message("Switching method to \'browser\'")\n  # }\n  # \n  if (pf$method == "pander" && !is.na(pf$table.classes)) {\n    errmsg %+=% "\'table.classes\' option does not apply to method \'pander\'"\n  }\n  \n  if (pf$method == "pander" && !is.na(pf$custom.css)) {\n    errmsg %+=% "\'custom.css\' option does not apply to method \'pander\'"\n  }\n  \n  # Set plain.ascii to false and adjust style when file extension is .md or .Rmd\n  if (grepl("\\\\.r?md$", pf$file, ignore.case = TRUE, perl = TRUE) \n      && !"style" %in% names(pf$dotArgs)) {\n    if (isTRUE(attr(pf$x, "format_info")$plain.ascii) && \n        !"plain.ascii" %in% names(pf$dotArgs)) {\n      tmp_msg_flag <- TRUE\n      pf$dotArgs %+=% list(plain.ascii = FALSE)\n    } else {\n      tmp_msg_flag <- FALSE\n    }\n\n    newstyle = switch(attr(pf$x, "st_type"),\n                      freq      = "rmarkdown",\n                      ctable    = "grid",\n                      descr     = "rmarkdown",\n                      dfSummary = "grid")\n    \n    if (attr(pf$x, "format_info")$style %in% c("simple", "multiline")) {\n      pf$dotArgs %+=% list(style = newstyle)\n      if (isTRUE(tmp_msg_flag)) {\n        message("Setting \'plain.ascii\' to FALSE and changing style to \'",\n                newstyle, "\' for improved markdown compatibility")\n      } else {\n        message("Changing style to \'", newstyle, \n                "\' for improved markdown compatibility")\n      }\n    } else if (isTRUE(tmp_msg_flag)) {\n      message("Setting \'plain.ascii\' to FALSE for improved markdown ",\n              "compatibility")\n    }\n  }\n  \n  if (pf$file != "" && identical(pf$method, "render")) {\n    message(\'To write content to a file, use method="pander", or \',\n            \'method="browser", or leave method unspecified\')\n  }\n  \n  if (is.na(pf$footnote)) {\n    pf$footnote <- ""\n  }\n\n  if (!"silent" %in% names(mc)) {\n    if (attr(pf$x, "st_type") == "descr") {\n      pf$silent <- st_options("descr.silent")\n    } else if (attr(pf$x, "st_type") == "dfSummary") {\n      pf$silent <- st_options("dfSummary.silent")\n    }\n  }\n return(errmsg)\n}\n  \n# check_args_st_options ---------------------------------------------------\n#\' @importFrom checkmate test_int test_logical test_choice \n#\' test_file_exists test_character\ncheck_args_st_options <- function(mc) {\n  \n  pf <- parent.frame()\n  errmsg <- character()\n  \n  if ("omit.headings" %in% names(mc)) {\n    errmsg %+=% "\'omit.headings\' is deprecated; use \'headings\' instead"\n  }\n  \n  if ("style" %in% names(mc)) {\n    if (!isTRUE(test_choice(pf$style, \n                            c("simple", "grid", "rmarkdown", "jira")))) {\n      errmsg %+=% paste("\'style\' must be one of \'simple\', \'grid\', \'markdown\', ",\n                        "or \'jira\'; See documentation for details")\n    }\n  }\n  \n  if ("plain.ascii" %in% names(mc) && \n      !isTRUE(test_logical(pf$plain.ascii, len = 1, any.missing = FALSE))) {\n    errmsg %+=% "\'plain.ascii\' must be either TRUE or FALSE"\n  }\n  \n  if ("round.digits" %in% names(mc) && !isTRUE(test_int(pf$round.digits))) {\n    errmsg %+=% "\'round.digits\' must be a whole number"\n  }\n  \n  if ("headings" %in% names(mc) &&\n      !isTRUE(test_logical(pf$headings, len = 1, any.missing = FALSE))) {\n    errmsg %+=% "\'headings\' must be either TRUE or FALSE"\n  }\n  \n  if ("footnote" %in% names(mc) &&\n      !isTRUE(test_character(pf$footnote)) && !is.na(pf$footnote)) {\n    errmsg %+=% "\'footnote\' must be either a string or NA"\n  }\n  \n  if ("display.labels" %in% names(mc) &&\n      !isTRUE(test_logical(pf$display.labels, \n                           len = 1, any.missing = FALSE))) {\n    errmsg %+=% "\'display.labels\' must be either TRUE or FALSE"\n  }\n  \n  if ("bootstrap.css" %in% names(mc) &&\n      !isTRUE(test_logical(pf$bootstrap.css, \n                           len = 1, any.missing = FALSE))) {\n    errmsg %+=% "\'bootstrap.css\' must be either TRUE or FALSE"\n  }\n  \n  if ("custom.css" %in% names(mc) && !is.na(pf$custom.css) &&\n      !isTRUE(test_file_exists(pf$custom.css, access = "r"))) {\n    errmsg %+=% "\'custom.css\' file not found"\n  }\n  \n  if ("escape.pipe" %in% names(mc) &&\n      !isTRUE(test_logical(pf$escape.pipe, len = 1, any.missing = FALSE))) {\n    errmsg %+=% "\'escape.pipe\' must be either TRUE or FALSE"\n  }\n  \n  if ("freq.cumul" %in% names(mc) &&\n      !isTRUE(test_logical(pf$freq.cumul, len = 1, any.missing = FALSE))) {\n    errmsg %+=% "\'freq.cumul\' must be either TRUE or FALSE"\n  }\n  \n  if ("freq.totals" %in% names(mc) &&\n      !isTRUE(test_logical(pf$freq.totals, len = 1, any.missing = FALSE))) {\n    errmsg %+=% "\'freq.totals\' must be either TRUE or FALSE"\n  }\n  \n  if ("freq.report.nas" %in% names(mc) &&\n      !isTRUE(test_logical(pf$freq.report.nas, len = 1, any.missing = FALSE))) {\n    errmsg %+=% "\'freq.report.nas\' must be either TRUE or FALSE"\n  }\n  \n  if ("freq.ignore.threshold" %in% names(mc) &&\n      !isTRUE(test_int(pf$freq.ignore.threshold, lower = 0)) &&\n      !is.infinite(pf$freq.ignore.threshold)) {\n    errmsg %+=% "\'freq.ignore.threshold\' must be an integer greater than 0"\n  }\n  \n  if ("freq.silent" %in% names(mc) &&\n      !isTRUE(test_logical(pf$freq.silent, len = 1, any.missing = FALSE))) {\n    errmsg %+=% "\'freq.silent\' must be either TRUE or FALSE"\n  }\n  \n  if ("ctable.prop" %in% names(mc) &&\n      !isTRUE(test_choice(pf$ctable.prop, c("r", "c", "t", "n")))) {\n    errmsg %+=% "\'ctable.prop\' must be one of \\"r\\", \\"c\\", \\"t\\", or \\"n\\""\n  }\n  \n  if ("ctable.totals" %in% names(mc) &&\n      !isTRUE(test_logical(pf$ctable.totals, len = 1, any.missing = FALSE))) {\n    errmsg %+=% "\'ctable.totals\' must be either TRUE or FALSE"\n  }\n  \n  if ("descr_stats" %in% names(mc)) {\n    valid_stats <- c("mean", "sd", "min", "q1", "med", "q3","max", "mad", \n                     "iqr", "cv", "skewness", "se.skewness", "kurtosis", \n                     "n.valid", "pct.valid")\n    \n    if (length(pf$descr_stats) == 1 && \n        !(pf$descr_stats %in% c("fivevnum", "common")) &&\n        !(pf$descr_stats %in% valid_stats)) {\n      errmsg %+=%\n        paste("\'descr_stats\' value", dQuote(pf$descr_stats), "not recognized;",\n              "allowed values are: ", \n              paste(\'"fivenum", "common", or a combination of :\',\n                    paste0(dQuote(valid_stats), sep = ", ")))\n    }\n  }\n  \n  if ("descr.transpose" %in% names(mc) &&\n      !isTRUE(test_logical(pf$descr.transpose, len = 1, any.missing = FALSE))) {\n    errmsg %+=% "\'descr.transpose\' must be either TRUE or FALSE"\n  }\n  \n  if ("descr.silent" %in% names(mc) &&\n      !isTRUE(test_logical(pf$descr.silent, len = 1, any.missing = FALSE))) {\n    errmsg %+=% "\'descr.silent\' must be either TRUE or FALSE"\n  }\n\n  if ("dfSummary.style" %in% names(mc) &&\n      !isTRUE(test_choice(pf$dfSummary.style, \n                          c("grid", "multiline")))) {\n    errmsg %+=% "\'dfSummary.style\' must be either \'grid\' or \'multiline\'"\n  }\n    \n  if ("dfSummary.varnumbers" %in% names(mc) &&\n      !isTRUE(test_logical(pf$dfSummary.varnumbers, \n                           len = 1, any.missing = FALSE))) {\n    errmsg %+=% "\'dfSummary.varnumbers\' must be either TRUE or FALSE"\n  }\n  \n  if ("dfSummary.labels.col" %in% names(mc) &&\n      !isTRUE(test_logical(pf$dfSummary.labels.col,\n                           len = 1, any.missing = FALSE))) {\n    errmsg %+=% "\'dfSummary.labels.col\' must be either TRUE or FALSE"\n  }\n  \n  if ("dfSummary.valid.col" %in% names(mc) &&\n      !isTRUE(test_logical(pf$dfSummary.valid.col,\n                           len = 1, any.missing = FALSE))) {\n    errmsg %+=% "\'dfSummary.valid.col\' must be either TRUE or FALSE"\n  }\n  \n  if ("dfSummary.na.col" %in% names(mc) &&\n      !isTRUE(test_logical(pf$dfSummary.na.col, \n                           len = 1, any.missing = FALSE))) {\n    errmsg %+=% "\'dfSummary.na.col\' must be either TRUE or FALSE"\n  }\n  \n  if ("dfSummary.graph.col" %in% names(mc) &&\n      !isTRUE(test_logical(pf$dfSummary.graph.col,\n                           len = 1, any.missing = FALSE))) {\n    errmsg %+=% "\'dfSummary.graph.col\' must be either TRUE or FALSE"\n  }\n  \n  if ("dfSummary.graph.magnif" %in% names(mc) && \n      pf$dfSummary.graph.magnif <= 0) {\n    errmsg %+=% "\'dfSummary.graph.magnif\' must be > 0"\n  }\n\n  if ("dfSummary.silent" %in% names(mc) &&\n      !isTRUE(test_logical(pf$dfSummary.silent,\n                           len = 1, any.missing = FALSE))) {\n    errmsg %+=% "\'dfSummary.silent\' must be either TRUE or FALSE"\n  }\n  \n  if ("dfSummary.custom.1" %in% names(mc) &&\n      !isTRUE(is.expression(pf$dfSummary.custom.1)) &&\n      !is.na(pf$dfSummary.custom.1) && \n      !pf$dfSummary.custom.1 %in% c("default", "reset")) {\n    errmsg %+=% "\'dfSummary.custom.1\' must be an expression, NA, or \'default\'"\n  }\n\n  if ("dfSummary.custom.2" %in% names(mc) &&\n      !isTRUE(is.expression(pf$dfSummary.custom.2)) &&\n      !is.na(pf$dfSummary.custom.2))  {\n    errmsg %+=% "\'dfSummary.custom.2\' must be an expression, or NA"\n  }\n  \n  if ("tmp.img.dir" %in% names(mc) && !is.na(pf$tmp.img.dir) &&\n       (!isTRUE(test_character(pf$tmp.img.dir, min.chars = 1, len = 1)) ||\n       nchar(pf$tmp.img.dir) > 5)) {\n    errmsg %+=% "\'tmp.img.dir\' must have at least 1 and at most 5 characters"\n  }\n\n  if ("subtitle.emphasis" %in% names(mc) &&\n      !isTRUE(test_logical(pf$subtitle.emphasis, \n                           len = 1, any.missing = FALSE))) {\n    errmsg %+=% "\'subtitle.emphasis\' must be either TRUE or FALSE"\n  }\n    \n  if ("lang" %in% names(mc) && !pf$lang %in% \n      c(rownames(.translations), "custom")) {\n    errmsg %+=% paste0("\'lang\' can take the following values only: ",\n                       paste(rownames(.translations), collapse = ", "))\n  }\n\n  if ("option" %in% names(mc) && \n      any(grepl("dfSummary.custom", pf$option)) && "value" %in% names(mc)) {\n    errmsg %+=% paste0("\'dfSummary.custom expressions must be defined using ",\n                       "syntax st_options(dfSummary.custom.1 = expression(...)")\n  }\n  \n  if ("use.x11" %in% names(mc) &&\n      !isTRUE(test_logical(pf$use.x11, len = 1, any.missing = FALSE))) {\n    errmsg %+=% "\'use.x11\' must be either TRUE or FALSE"\n  }\n  \n  return(errmsg)\n}\n'