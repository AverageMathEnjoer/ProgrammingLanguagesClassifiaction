b'import Test.Tasty\nimport Test.Tasty.HUnit\nimport Control.Concurrent\nimport Control.Exception\nimport Control.Monad\nimport System.Environment\n\n\n-- verbose versions of everything, to make it easier to debug from travis logs\n\nverbose :: String -> IO ()\nverbose msg = putStrLn ("resource-release-test.hs: " ++ msg)\n\nverboseSleep :: Int -> IO ()\nverboseSleep seconds = do\n  verbose ("sleep " ++ show seconds)\n  threadDelay (seconds * 1000000)\n\nverboseTouchFile :: FilePath -> IO ()\nverboseTouchFile filePath = do\n  verbose ("touch " ++ filePath)\n  writeFile filePath ""\n\n\nmain :: IO ()\nmain = do\n  dir:args <- getArgs\n  withArgs args $ do\n    defaultMain $ testCase "Test" $ do\n      let body = do\n            verboseTouchFile (dir ++ "/test-has-started")\n            forever $ verboseSleep 1  -- wait for resource-release-test.sh to kill us\n          releaseResources = do\n            verbose "resource-release-test.hs: releasing resources..."\n            verboseSleep 1  -- bug: the program terminates here, before the resources are released\n            verboseTouchFile (dir ++ "/resources-are-released")\n      body `finally` releaseResources\n'