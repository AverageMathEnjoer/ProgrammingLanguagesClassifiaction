b'module Database.Beam.Migrate.Tool.Database where\n\nimport           Database.Beam.Migrate.Backend\nimport           Database.Beam.Migrate.Log\nimport           Database.Beam.Migrate.Tool.Backend\nimport           Database.Beam.Migrate.Tool.CmdLine\nimport           Database.Beam.Migrate.Tool.Registry\n\nimport           Control.Monad\n\nimport qualified Data.HashMap.Strict as HM\n\nlistDatabases :: MigrateCmdLine -> IO ()\nlistDatabases cmdLine = do\n  reg <- lookupRegistry cmdLine\n\n  forM_ (HM.toList (migrationRegistryDatabases reg)) $ \\(DatabaseName dbName, _) ->\n    putStrLn dbName\n\nrenameDatabase :: MigrateCmdLine -> DatabaseName -> DatabaseName -> IO ()\nrenameDatabase cmdLine from to =\n  updatingRegistry cmdLine $ \\reg ->\n  case HM.lookup from (migrationRegistryDatabases reg) of\n    Nothing -> fail ("No such database " ++ unDatabaseName from)\n    Just db ->\n      pure ((), reg { migrationRegistryDatabases = HM.insert to db $\n                                                   HM.delete from  $\n                                                   migrationRegistryDatabases reg })\n\nshowDatabase :: MigrateCmdLine -> DatabaseName -> IO ()\nshowDatabase cmdLine dbName@(DatabaseName dbNameStr) = do\n  reg <- lookupRegistry cmdLine\n\n  case HM.lookup dbName (migrationRegistryDatabases reg) of\n    Nothing -> fail "No such database"\n    Just MigrationDatabase {..} -> do\n      putStrLn ("Database \'" ++ dbNameStr ++ "\'")\n      putStrLn ("  Backend: " ++ unModuleName migrationDbBackend)\n      putStrLn ("  Conn   : " ++ migrationDbConnString)\n\ninitDatabase :: MigrateCmdLine -> DatabaseName -> ModuleName -> String -> IO ()\ninitDatabase cmdLine dbName moduleName connStr =\n  updatingRegistry cmdLine $ \\reg -> do\n  case HM.lookup dbName (migrationRegistryDatabases reg) of\n    Just {} -> fail "Database already exists"\n    Nothing -> do\n      -- Get the constraints and see if the migration table already exists\n      SomeBeamMigrationBackend be@BeamMigrationBackend { backendTransact = transact } <-\n        loadBackend\' cmdLine moduleName\n      _ <- transact connStr (ensureBackendTables be)\n\n      let db = MigrationDatabase moduleName connStr\n      pure ((), reg { migrationRegistryDatabases =\n                        HM.insert dbName db (migrationRegistryDatabases reg) })\n\n'