b'{-# LANGUAGE OverloadedStrings #-}\n\nmodule Main\n(\n  main\n)\nwhere\n\nimport Pdf.Content\nimport Pdf.Document\n\nimport qualified Data.Text as Text\nimport Data.IORef\nimport Data.Maybe\nimport Control.Monad\nimport Control.Monad.IO.Class\nimport System.Directory\nimport System.FilePath\nimport System.Random (randomIO)\nimport System.Process\nimport System.Exit\nimport Graphics.UI.Gtk hiding (Rectangle, rectangle, FontMap)\nimport Graphics.Rendering.Cairo hiding (transform, Glyph)\n\ndata ViewerState = ViewerState {\n  viewerPage :: Page,\n  viewerPageNum :: Int,\n  viewerRenderIM :: Bool,\n  viewerRenderText :: Bool,\n  viewerRenderGlyphs :: Bool\n  }\n\nmain :: IO ()\nmain = do\n  [file] <- initGUI\n\n  withPdfFile file $ \\pdf -> do\n    (rootNode, totalPages, title) <- do\n      encrypted <- isEncrypted pdf\n      when encrypted $ do\n        ok <- setUserPassword pdf ""\n        unless ok $\n          error "Password is wrong"\n\n      doc <- document pdf\n\n      title <- do\n        maybe_info <- documentInfo doc\n        case maybe_info of\n          Nothing -> return Nothing\n          Just info -> infoTitle info\n\n      root <- documentCatalog doc >>= catalogPageNode\n      total <- pageNodeNKids root\n\n      return (root, total, title)\n\n    firstPage <- pageNodePageByNum rootNode 0\n\n    viewerState <- newIORef ViewerState {\n      viewerPage = firstPage,\n      viewerPageNum = 0,\n      viewerRenderIM = False,\n      viewerRenderText = True,\n      viewerRenderGlyphs = False\n      }\n\n    let winTitle = fromMaybe "Untitled" title\n\n    window <- windowNew\n    set window [\n      windowDefaultWidth := 300,\n      windowDefaultHeight := 300,\n      windowTitle := winTitle\n      ]\n    _ <- on window deleteEvent $ liftIO mainQuit >> return True\n\n    vbox <- vBoxNew False 10\n    containerAdd window vbox\n\n    hbuttonBox <- hButtonBoxNew\n    boxPackStart vbox hbuttonBox PackNatural 0\n\n    prevButton <- buttonNewWithLabel ("Prev" :: String)\n    boxPackStart hbuttonBox prevButton PackNatural 0\n\n    nextButton <- buttonNewWithLabel ("Next" :: String)\n    boxPackStart hbuttonBox nextButton PackNatural 0\n\n    renderPdfToggle <- checkButtonNewWithLabel ("Render via ImageMagick" :: String)\n    set renderPdfToggle [\n      toggleButtonActive := False\n      ]\n    boxPackStart hbuttonBox renderPdfToggle PackNatural 0\n\n    renderTextToggle <- checkButtonNewWithLabel ("Render extracted text" :: String)\n    set renderTextToggle [\n      toggleButtonActive := True\n      ]\n    boxPackStart hbuttonBox renderTextToggle PackNatural 0\n\n    renderGlyphsToggle <- checkButtonNewWithLabel ("Render glyphs" :: String)\n    set renderGlyphsToggle [\n      toggleButtonActive := False\n      ]\n    boxPackStart hbuttonBox renderGlyphsToggle PackNatural 0\n\n    frame <- frameNew\n    boxPackStart vbox frame PackGrow 0\n\n    canvas <- drawingAreaNew\n    containerAdd frame canvas\n\n    _ <- on renderPdfToggle toggled $ do\n      st <- get renderPdfToggle toggleButtonActive\n      modifyIORef viewerState $ \\s -> s {\n        viewerRenderIM = st\n        }\n      widgetQueueDraw canvas\n\n    _ <- on renderTextToggle toggled $ do\n      st <- get renderTextToggle toggleButtonActive\n      modifyIORef viewerState $ \\s -> s {\n        viewerRenderText = st\n        }\n      widgetQueueDraw canvas\n\n    _ <- on renderGlyphsToggle toggled $ do\n      st <- get renderGlyphsToggle toggleButtonActive\n      modifyIORef viewerState $ \\s -> s {\n        viewerRenderGlyphs = st\n        }\n      widgetQueueDraw canvas\n\n    _ <- on prevButton buttonActivated $ do\n      num <- viewerPageNum <$> readIORef viewerState\n      when (num > 0) $ do\n        p <- pageNodePageByNum rootNode (num - 1)\n        modifyIORef viewerState $ \\s -> s {\n          viewerPage = p,\n          viewerPageNum = num - 1\n          }\n        widgetQueueDraw canvas\n\n    _ <- on nextButton buttonActivated $ do\n      num <- viewerPageNum <$> readIORef viewerState\n      when (num < totalPages - 1) $ do\n        p <- pageNodePageByNum rootNode (num + 1)\n        modifyIORef viewerState $ \\s -> s {\n          viewerPage = p,\n          viewerPageNum = num + 1\n          }\n        widgetQueueDraw canvas\n\n    widgetShowAll window\n    draw <- widgetGetDrawWindow canvas\n    _ <- on canvas exposeEvent $ do\n      liftIO $ renderWithDrawable draw $ onDraw file viewerState\n      return True\n\n    mainGUI\n\nonDraw :: FilePath -> IORef ViewerState -> Render ()\nonDraw file viewerState = do\n  st <- liftIO $ readIORef viewerState\n  let pg = viewerPage st\n      num = viewerPageNum st\n\n  when (viewerRenderIM st) $ do\n    randomNum <- liftIO $ randomIO :: Render Int\n    tmpDir <- liftIO $ getTemporaryDirectory\n    let tmpFile = tmpDir </> ("pdf-toolbox-viewer-" ++ show randomNum ++ ".png")\n    (_, _, _, procHandle) <- liftIO $ createProcess $ proc "convert" [file ++ "[" ++ show num ++ "]", tmpFile]\n    hasPng <- (== ExitSuccess) <$> liftIO (waitForProcess procHandle)\n    if hasPng\n      then do\n        surface <- liftIO $ imageSurfaceCreateFromPNG tmpFile\n        setSourceSurface surface 0 0\n        paint\n        surfaceFinish surface\n        liftIO $ removeFile tmpFile\n      else liftIO $ putStrLn "Can\'t render pdf via ImageMagick. Please check that you have \\"convert\\" in PATH"\n\n  setSourceRGB 1 1 1\n  setLineWidth 1\n\n  Rectangle llx lly urx ury <- liftIO $ pageMediaBox pg\n\n  moveTo llx lly\n  lineTo llx ury\n  lineTo urx ury\n  lineTo urx lly\n  lineTo llx lly\n  closePath\n  stroke\n\n  glyphs <- liftIO $ (concat . map spGlyphs) <$> pageExtractGlyphs pg\n  forM_ glyphs $ \\glyph -> do\n    let Vector x1 y1 = glyphTopLeft glyph\n        Vector x2 y2 = glyphBottomRight glyph\n    when (viewerRenderText st) $ do\n      setSourceRGB 0 0 0\n      case glyphText glyph of\n        Nothing -> return ()\n        Just txt -> do\n          moveTo x1 (ury - y1)\n          showText $ Text.unpack txt\n          stroke\n    when (viewerRenderGlyphs st) $ do\n      setSourceRGBA 0 0 0 0.2\n      rectangle x1 (ury - y1) (x2 - x1) (y2 - y1)\n      fill\n'