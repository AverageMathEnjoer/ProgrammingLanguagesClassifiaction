b'module Cachix.Client.HumanSize where\n\nimport Protolude\nimport Text.Printf (printf)\nimport qualified Prelude\n\nhumanSize :: Double -> Text\nhumanSize size\n  | size < unitstep 1 = render "B" size\n  | size < unitstep 2 = render "KiB" $ size / unitstep 1\n  | size < unitstep 3 = render "MiB" $ size / unitstep 2\n  | size < unitstep 4 = render "GiB" $ size / unitstep 3\n  | otherwise = render "TiB" $ size / unitstep 4\n  where\n    unitstep :: Int -> Double\n    unitstep i = 1024.0 ^ i\n    render :: Text -> Double -> Text\n    render unit unitsize =\n      toS (printf "%.2f" unitsize :: Prelude.String) <> " " <> unit\n'