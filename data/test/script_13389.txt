b'#\' Save currently active R graph to bitmap format\n#\' \n#\' Save the currently active R graph or a graph passed as an object or function \n#\' to bitmap format with sensible defaults\n#\' \n#\' \n#\' @importFrom grDevices dev.size\n#\' @importFrom grDevices png\n#\' @importFrom grDevices tiff\n#\' @importFrom grDevices jpeg\n#\' @aliases graph2bitmap graph2png graph2tif graph2jpg\n#\' @param x given \\code{ggplot2} plot or \\code{lattice} plot object to export; if\n#\' set to \\code{NULL} the currently active R graph will be exported; not\n#\' supported for base R plots.\n#\' @param file name of output file. Any extension is ignored and added\n#\' according to the requested output type. If file already exists it is overwritten.\n#\' @param fun plot passed on as a function used to create it; useful especially\n#\' for base R plots.\n#\' @param type desired output type - \\code{PNG}, \\code{TIF} or \\code{JPG} are currently supported.\n#\' \\code{PNG} is the preferred format, as it is a lossless format, and compresses better\n#\' than \\code{TIF}.\n#\' @param aspectr desired width to height aspect ratio. If set to \\code{NULL}, the\n#\' aspect ratio of the graphics device is used. Can also be combined with one\n#\' value for either the desired width or height of the graph.\n#\' @param width desired width in inches; can be combined with a desired\n#\' aspect ratio aspectr.\n#\' @param height desired height in inches; can be combined with a desired\n#\' aspect ratio aspectr.\n#\' @param dpi desired output in dpi; defaults to 600 dpi.\n#\' @param scaling scale width & height by a certain percentage.\n#\' @param font desired font to use for labels in PNG and TIFF output; defaults to \n#\' \\code{"Arial"} on Windows systems and to \\code{"Helvetica"} on other systems.\n#\' @param bg desired background colour, e.g. \\code{"white"} or \\code{"transparent"}.\n#\' @param cairo logical, specifying whether or not to use \\code{Cairographics} for export.\n#\' @param tiffcompression compression to use for \\code{TIF} files.\n#\' @param jpegquality quality of \\code{JPEG} compression.\n#\' @param \\dots any other options are passed on to \\code{grDevices}\' \\code{\\link{png}}, \n#\' \\code{\\link{tiff}}, or \\code{\\link{jpeg}} function (according to the supplied \\code{type}).\n#\' @return No return value\n#\' @author Tom Wenseleers\n#\' @example examples/graph2bitmap.R\n#\' @seealso \\code{\\link{graph2office}}, \\code{\\link{graph2vector}}, \\code{\\link{graph2svg}}, \\code{\\link{graph2pdf}},\n#\' \\code{\\link{graph2eps}}\n#\' @export\n#\' \ngraph2bitmap = function(x = NULL, file = "Rplot", fun = NULL, \n                        type = c("PNG","JPG","TIF"), aspectr = NULL, \n                        width = NULL, height = NULL, dpi = 300,  scaling = 100, \n                        font = ifelse(Sys.info()["sysname"] == "Windows", "Arial","Helvetica")[[1]], \n                        bg = "white", cairo = TRUE, \n                        tiffcompression = c("lzw","rle","jpeg","zip","lzw+p","zip+p"), \n                        jpegquality = 99, ...) {\n  # Get initial graphical state\n  dev.init <- dev.list()\n  \n  # Format arguments \n  type <- toupper(type)\n  type <- match.arg(type, c("PNG", "JPG", "TIF"))\n  if (type == "JPG") type <- "JPEG"\n  if (type == "TIFF") type <- "TIF"\n  tiffcompression <- match.arg(tiffcompression)\n  ext <- paste0(".", tolower(type))\n  file <- sub("^(.*)[.].*", "\\\\1", file)  # remove extension if given\n  file <- paste0(file, ext)  # add extension\n  obj <- x\n  if (is.null(obj) & is.null(fun)) p = captureplot() else p = obj\n  if (inherits(p,"list")) \n    stop("base R plots cannot be passed as objects, use ggplot2 or lattice plots instead")\n  myplot = if (is.null(fun)) function(pl = p) print(pl) else fun\n  \n  # Get graphical device information \n  if(!identical(options()$device, FALSE)){\n    plotsize = dev.size()\n  } else {\n    plotsize = c(7,5) # default device size: 10 inch x 10 inch\n  }\n  \n  w <- plotsize[[1]]\n  h <- plotsize[[2]]\n  plotaspectr <- plotsize[[1]] / plotsize[[2]]\n  if ( !is.null(aspectr) & is.null(height) & is.null(width)) { \n    plotaspectr <- aspectr\n    if (plotaspectr >= 1) { h <- w / plotaspectr } else { w <- h * plotaspectr } \n  }\n  if ((is.null(height))&(!is.null(width))) { w = width; h = w / plotaspectr }\n  if ((is.null(width))&(!is.null(height))) { h = height; w = h / plotaspectr } \n  # if width and height is given override other scaling params\n  if ((!is.null(width))&(!is.null(height))) { w = width; h = height }  \n  w = w*scaling/100; h = h*scaling/100;\n \n  if (type == "PNG") {\n    png( filename = file, \n        type = ifelse(cairo,"cairo-png","windows"),\n        units = "in", \n        width = w, \n        height = h, \n        family = font,\n        res = dpi,\n        bg = bg, ...)\n    myplot()\n    dev.reset(dev.init)\n  }\n  \n  if (type == "TIF") {\n    tiff( filename = file, \n         type = ifelse(cairo,"cairo","windows"),\n         compression = tiffcompression,\n         units = "in", \n         width = w, \n         height = h, \n         family = font, \n         res = dpi,\n         bg = bg, ...)\n    myplot()\n    dev.reset(dev.init)\n  }\n  \n  if (type == "JPEG") { \n    jpeg(filename = file, \n         quality = jpegquality,\n         units = "in", \n         width = w, \n         height = h, \n         res = dpi,\n         bg = bg, ...)\n    myplot()\n    dev.reset(dev.init)\n  }  \n  message(paste0("Exported graph as ",file))\n}\n\n#\' @describeIn graph2bitmap \n#\' Save currently active R graph to png file\n#\' @export\ngraph2png = function(...) graph2bitmap(type = "PNG", ...)\n\n#\' @describeIn graph2bitmap \n#\' Save currently active R graph to TIF file\n#\' @export\ngraph2tif = function(...) graph2bitmap(type = "TIF", ...)\n\n#\' @describeIn graph2bitmap \n#\' Save currently active R graph to JPEG file\n#\' @export\ngraph2jpg = function(...) graph2bitmap(type = "JPG", ...) \n'