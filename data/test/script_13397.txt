b'// UVa1395 Slim Span\n// Rujia Liu\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nconst int maxn = 100 + 10;\nconst int INF = 1000000000;\nint n;\n\nint pa[maxn];\nint findset(int x) { return pa[x] != x ? pa[x] = findset(pa[x]) : x; } \n\nstruct Edge {\n  int u, v, d;\n  Edge(int u, int v, int d):u(u),v(v),d(d) {}\n  bool operator < (const Edge& rhs) const {\n    return d < rhs.d;\n  }\n};\n\nvector<Edge> e;\n\nint solve() {\n  int m = e.size();\n  sort(e.begin(), e.end());\n  int ans = INF;\n  for(int L = 0; L < m; L++) {\n    for(int i = 1; i <= n; i++) pa[i] = i;\n    int cnt = n; // number of sets\n    for(int R = L; R < m; R++) {\n      int u = findset(e[R].u), v = findset(e[R].v);\n      if(u != v) {\n        pa[u] = v;\n        if(--cnt == 1) { ans = min(ans, e[R].d-e[L].d); break; }\n      }\n    }\n  }\n  if(ans == INF) ans = -1;\n  return ans;\n}\n\nint main() {\n  int m, u, v, d;\n  while(scanf("%d%d", &n, &m) == 2 && n) {\n    e.clear();\n    for(int i = 0; i < m; i++) {\n      scanf("%d%d%d", &u, &v, &d);\n      e.push_back(Edge(u, v, d));\n    }\n    printf("%d\\n", solve());\n  }\n  return 0;\n}\n'