b"{-# LANGUAGE ExistentialQuantification #-}\n-- | This module contains data types and combinators for defining a\n-- 'Schema' for your 'Resource'. A 'Schema' has three type parameters,\n-- specifying the identifiers for a single resource, a listing, and a\n-- top-level (static) action. After routing, these identifiers will be\n-- passed to the 'Handler'.\nmodule Rest.Schema\n  ( -- * A set of combinators for creating schemas.\n\n    -- ** Top level\n    withListing\n  , noListing\n  , singleton\n    -- ** Named endpoints\n  , named\n  , static\n  , single\n  , singleBy\n  , singleRead\n  , listing\n  , listingBy\n  , listingRead\n    -- ** Unnamed endpoints\n  , unnamedSingle\n  , unnamedSingleRead\n  , unnamedListing\n  , unnamedListingRead\n\n    -- * The core schema data types.\n\n  , Schema (..)\n  , Step (..)\n  , Cardinality (..)\n  , Getter (..)\n  , Id (..)\n  , Endpoint\n  ) where\n\nimport Rest.Dictionary (Ident (..))\nimport Rest.Info (Info)\n\n-- * A set of combinators for creating schemas.\n\n-- ** Top level\n\n-- | A schema with a top level listing.\n\nwithListing :: mid -> Step sid mid aid -> Schema sid mid aid\nwithListing mid = Schema (Just (Many mid))\n\n-- | A schema with no top level listing.\n\nnoListing :: Step sid mid aid -> Schema sid mid aid\nnoListing = Schema Nothing\n\n-- | A schema with a singleton at the top level.\n\nsingleton :: sid -> Step sid mid aid -> Schema sid mid aid\nsingleton sid = Schema (Just (Single sid))\n\n-- ** Named endpoints\n\n-- | A list of named endpoints.\n\nnamed :: [(String, Endpoint sid mid aid)] -> Step sid mid aid\nnamed = Named\n\n-- | A top level action endpoint for this resource.\n\nstatic :: aid -> Endpoint sid mid aid\nstatic = Left\n\n-- | A singleton resource endpoint.\n\nsingle :: sid -> Endpoint sid mid aid\nsingle = Right . Single . Singleton\n\n-- | A single resource endpoint with a string identifier.\n\nsingleBy :: (String -> sid) -> Endpoint sid mid aid\nsingleBy = singleIdent StringId\n\n-- | A single resource endpoint with an identifier that can be read.\n\nsingleRead :: (Read a, Info a) => (a -> sid) -> Endpoint sid mid aid\nsingleRead = singleIdent ReadId\n\n-- | A single resource identified as specified by the 'Ident'.\n\nsingleIdent :: Ident a -> (a -> sid) -> Endpoint sid mid aid\nsingleIdent ident = Right . Single . By . Id ident\n\n-- | A listing endpoint.\n\nlisting :: mid -> Endpoint sid mid aid\nlisting = Right . Many . Singleton\n\n-- | A listing endpoint with a string identifier.\n\nlistingBy :: (String -> mid) -> Endpoint sid mid aid\nlistingBy = listingIdent StringId\n\n-- | A listing with an identifier that can be read.\n\nlistingRead :: (Read a, Info a) => (a -> mid) -> Endpoint sid mid aid\nlistingRead = listingIdent ReadId\n\n-- | A listing identified as specified by the 'Ident'.\nlistingIdent :: Ident a -> (a -> mid) -> Endpoint sid mid aid\nlistingIdent ident = Right . Many . By . Id ident\n\n-- ** Unnamed endpoints\n\n-- | An unnamed single resource with a string identifier.\n\nunnamedSingle :: (String -> sid) -> Step sid mid aid\nunnamedSingle = unnamedSingleIdent StringId\n\n-- | An unnamed single resource with an identifier that can be read.\n\nunnamedSingleRead :: (Read a, Info a) => (a -> sid) -> Step sid mid aid\nunnamedSingleRead = unnamedSingleIdent ReadId\n\n-- | An unnamed single resource identified as specified by the\n-- 'Ident'.\n\nunnamedSingleIdent :: Ident a -> (a -> sid) -> Step sid mid aid\nunnamedSingleIdent ident = Unnamed . Single . Id ident\n\n-- | An unnamed listing with a string identifier.\n\nunnamedListing :: (String -> mid) -> Step sid mid aid\nunnamedListing = unnamedListingIdent StringId\n\n-- | An unnamed listing with an identifier that can be read.\nunnamedListingRead :: (Read a, Info a) => (a -> mid) -> Step sid mid aid\nunnamedListingRead = unnamedListingIdent ReadId\n\n-- | An unnamed listing identified as specified by the 'Ident'.\n\nunnamedListingIdent :: Ident a -> (a -> mid) -> Step sid mid aid\nunnamedListingIdent ident = Unnamed . Many . Id ident\n\n-- * The core schema data types.\n\n-- | A 'Schema' describes how (part of the) route to a resource looks,\n-- and returns an identifier for a single resource ('sid'), many\n-- resources ('mid') or a static action ('aid').\n-- The first argument specifies the top level resource (no path\n-- segments). The second specifies a what happens at the first step in\n-- the path.\n\ndata Schema sid mid aid = Schema (Maybe (Cardinality sid mid)) (Step sid mid aid)\n\n-- | A step in the routing of a resource. A part of the uri either\n-- identifies a 'Named' resource, or an 'Unnamed' resource. Named\n-- resources can be static actions ('Left') or one or many singletons or\n-- by's.\n\ndata Step sid mid aid = Named   [(String, Endpoint sid mid aid)]\n                      | Unnamed (Cardinality (Id sid) (Id mid))\n\n-- | Specifies if we're identifying a single resource, or many (a\n-- listing).\ndata Cardinality s m = Single s\n                     | Many   m\n\n-- | A 'Getter' can either be a 'Singleton' (there is only one) or it\n-- can be identified 'By' an 'Id'entifier.\n\ndata Getter id = Singleton id | By (Id id)\n\n-- | An identification of an item in a resource. It contains a\n-- dictionary describing how to identify the resource, and a function\n-- for this identification type to an @id@.\n\ndata Id id = forall a. Id (Ident a) (a -> id)\n\n-- | A named endpoint: an static action, a single item of many items.\n\ntype Endpoint sid mid aid = Either aid (Cardinality (Getter sid) (Getter mid))\n"