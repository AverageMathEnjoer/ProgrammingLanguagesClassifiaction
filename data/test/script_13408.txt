b'package co.joebirch.composeplayground\n\nimport android.os.Bundle\nimport androidx.activity.compose.setContent\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.compose.foundation.ExperimentalFoundationApi\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.material.Scaffold\nimport androidx.compose.material.Text\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.text.TextStyle\nimport androidx.compose.ui.text.style.TextIndent\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport co.joebirch.composeplayground.animation.Animation\nimport co.joebirch.composeplayground.core.Core\nimport co.joebirch.composeplayground.foundation.Foundation\nimport co.joebirch.composeplayground.graphics.Graphics\nimport co.joebirch.composeplayground.layout.Layout\nimport co.joebirch.composeplayground.material.Material\nimport co.joebirch.composeplayground.resource.Resource\n\n@ExperimentalFoundationApi\nclass HomeActivity : AppCompatActivity() {\n\n    class HomeState(category: Category? = null) {\n        var category by mutableStateOf(category)\n    }\n\n    private val currentState = HomeState()\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        val mappedData = mapOf(\n            Pair(\n                Animation.Heading, listOf(\n                    Animation.Crossfade,\n                    Animation.SingleColor,\n                    Animation.SingleFloat,\n                    Animation.Transitions,\n                    Animation.AnimatedValues,\n                    Animation.RotatingShape,\n                    Animation.PulsingShape,\n                    Animation.InterationAnimation\n                )\n            ),\n            Pair(\n                Core.Heading,\n                listOf(\n                    Core.Gesture,\n                    Core.Opacity,\n                    Core.Dialog,\n                    Core.Popup,\n                    Core.Shadow\n                )\n            ),\n            Pair(Graphics.Heading, listOf(Graphics.Color)),\n            Pair(\n                Material.Heading, listOf(\n                    Material.AlertDialog,\n                    Material.Border,\n                    Material.BottomAppBar,\n                    Material.BottomNavigation,\n                    Material.Button,\n                    Material.Card,\n                    Material.Checkbox,\n                    Material.Divider,\n                    Material.Fab,\n                    Material.IconButton,\n                    Material.Progress,\n                    Material.RadioButton,\n                    Material.Scaffold,\n                    Material.Slider,\n                    Material.Switch,\n                    Material.Snackbar,\n                    Material.TabRow,\n                    Material.TextField,\n                    Material.TopAppBar\n                )\n            ),\n            Pair(\n                Layout.Heading, listOf(\n                    Layout.Column,\n                    Layout.HorizontalArrangement,\n                    Layout.Row,\n                    Layout.Spacer,\n                    Layout.Stack,\n                    Layout.VerticalArrangement\n                )\n            ),\n            Pair(\n                Foundation.Heading, listOf(\n                    Foundation.Border,\n                    Foundation.Clickable,\n                    Foundation.Shape,\n                    Foundation.Text,\n                    Foundation.TextStyle\n                )\n            ),\n            Pair(\n                Resource.Heading, listOf(\n                    Resource.Color,\n                    Resource.StringResource,\n                    Resource.Primitive\n                )\n            )\n        )\n\n        setContent {\n            val state = remember { currentState }\n\n            Scaffold(content = {\n                if (state.category == null) {\n                    LazyColumn(content = {\n                        mappedData.keys.toList().forEach {\n                            item {\n                                val selected = remember { mutableStateOf(false) }\n                                Text(\n                                    text = it.label,\n                                    style = TextStyle(color = Color.Black, fontSize = 20.sp),\n                                    modifier = Modifier.padding(16.dp).clickable(onClick = {\n                                        selected.value = !selected.value\n                                    }).fillMaxWidth()\n                                )\n                                if (selected.value) {\n                                    Column {\n                                        mappedData.getValue(it).toList().forEach {\n                                            Text(\n                                                it.label,\n                                                style = TextStyle(\n                                                    color = Color.Black, fontSize = 14.sp,\n                                                    textIndent = TextIndent(firstLine = 16.sp)\n                                                ),\n                                                modifier = Modifier\n                                                    .padding(16.dp)\n                                                    .clickable(onClick = {\n                                                        state.category = it\n                                                    })\n                                                    .fillMaxWidth()\n                                            )\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    })\n                } else {\n                    state.category!!.intent!!.build()\n                }\n            })\n        }\n    }\n\n    override fun onBackPressed() {\n        if (currentState.category != null) {\n            currentState.category = null\n        } else {\n            super.onBackPressed()\n        }\n    }\n\n}'