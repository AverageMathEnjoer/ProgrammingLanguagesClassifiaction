b'/*\n    SPDX-FileCopyrightText: 2022 Milian Wolff <mail@milianw.de>\n\n    SPDX-License-Identifier: LGPL-2.1-or-later\n*/\n\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n\n#include <dlfcn.h>\n\nextern "C" {\n__attribute__((weak)) void* __libc_dlopen_mode(const char* filename, int flag);\n}\n\nnamespace {\nvoid dlopenLine(const char* lib)\n{\n#ifdef __FreeBSD__\n\n    fprintf(stdout, "\'dlopen@plt\'(\\"%s\\", 0x%x)\\n", lib, RTLD_NOW);\n\n#else\n\n    if (&__libc_dlopen_mode) {\n        // __libc_dlopen_mode was available directly in glibc before libdl got merged into it\n        fprintf(stdout, "__libc_dlopen_mode(\\"%s\\", 0x80000000 | 0x002)\\n", lib);\n        return;\n    }\n\n#ifdef __USE_GNU\n    fprintf(stdout, "dlmopen(0x%x, \\"%s\\", 0x%x)\\n", LM_ID_BASE, lib, RTLD_NOW);\n#else\n    fprintf(stdout, "dlopen(\\"%s\\", 0x%x)\\n", lib, RTLD_NOW);\n#endif\n\n#endif\n}\n}\n\nint main(int argc, char** argv)\n{\n    if (argc < 2) {\n        fprintf(stderr, "missing check\\n");\n        return EXIT_FAILURE;\n    }\n\n    const auto check = argv[1];\n    if (strcmp(check, "dlopen") == 0) {\n        if (argc != 3) {\n            fprintf(stderr, "missing lib arg\\n");\n            return EXIT_FAILURE;\n        }\n        dlopenLine(argv[2]);\n        return EXIT_SUCCESS;\n    }\n\n    fprintf(stderr, "unsupported check %s\\n", check);\n    return EXIT_FAILURE;\n}\n'