b'package co.joebirch.composeplayground.foundation\n\nimport androidx.compose.foundation.indication\nimport androidx.compose.foundation.interaction.MutableInteractionSource\nimport androidx.compose.material.Text\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.selection.toggleable\nimport androidx.compose.material.ripple.rememberRipple\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.SolidColor\nimport androidx.compose.ui.unit.dp\nimport co.joebirch.composeplayground.ComposableLayout\n\nobject ToggleableView : ComposableLayout {\n\n    @Composable\n    override fun build() {\n        Column(\n            modifier = Modifier\n                .fillMaxSize()\n                .padding(32.dp),\n            verticalArrangement = Arrangement.SpaceEvenly,\n            horizontalAlignment = Alignment.CenterHorizontally\n        ) {\n            ToggleableComponent()\n            DisabledToggleableComponent()\n            IndicationToggleableComponent()\n        }\n    }\n\n}\n\n@Composable\nfun ToggleableComponent() {\n    val state = remember { mutableStateOf(false) }\n    Text(\n        text = "Jetpack Compose",\n        modifier = Modifier.toggleable(\n            value = state.value,\n            onValueChange = { value ->\n                state.value = value\n            }\n        )\n    )\n}\n\n@Composable\nfun DisabledToggleableComponent() {\n    val state = remember { mutableStateOf(false) }\n    Text(\n        text = "Jetpack Compose",\n        modifier = Modifier.toggleable(\n            value = state.value,\n            onValueChange = { value ->\n                state.value = value\n            },\n            enabled = false\n        )\n    )\n}\n\n@Composable\nfun IndicationToggleableComponent() {\n    val state = remember { mutableStateOf(false) }\n    Text(\n        text = "Jetpack Compose",\n        modifier = Modifier\n            .toggleable(\n                value = state.value,\n                onValueChange = { value ->\n                    state.value = value\n                }\n            )\n            .indication(\n                indication = rememberRipple(),\n                interactionSource = MutableInteractionSource()\n            )\n    )\n}'