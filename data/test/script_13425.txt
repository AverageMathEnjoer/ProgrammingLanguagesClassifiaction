b'module MolSeq where\n\nimport Data.List (genericLength)\n\n\n-- Exercise 1: The MolSeq data type.\n-- (Also a little exercise 3: Create functions that return the name and sequence of a MolSeq value.)\n\ndata SeqType = DNA | Protein deriving (Show, Eq)\ndata MolSeq = MolSeq { seqType :: SeqType\n                     , seqName :: String\n                     , seqSequence :: String\n                     } deriving Show\n\n\nalphabet :: SeqType -> String\nalphabet DNA = "ACGT"\nalphabet Protein = "ACDEFGHIKLMNPQRSTVWXY"\n\n\n-- Exercise 2: The seq builder function. Assuming sequences only\n-- consisting of A, C, G or T are DNA sequences.\nstring2seq name seq = MolSeq typeguess name seq\n  where typeguess = if all (`elem` alphabet DNA) seq then DNA else Protein\n\n\n-- The rest of exercise 3: Create a function that returns the length of the sequence of a MolSeq.\nseqLength = length . seqSequence\n\n\n-- Exercise 4: The seqDistance function figuring out d_{a,b} for two MolSeqs.\n-- A guard to make sure the sequences being compared are of the same type and equally long.\nseqDistance (MolSeq sta _ sqa) (MolSeq stb _ sqb) | sta == stb && length sqa == length sqb =\n\n  -- The Jukes-Cantor and Poisson model expressed in terms of alpha and the magic alphabet size\n  -- determined constant.\n  if alpha > magic_constant - 0.01\n     then 2*magic_constant + 1.8\n     else negate $ magic_constant * log (1 - alpha/magic_constant)\n\n  where alpha = hamming sqa sqb / genericLength sqa\n        magic_constant = 1 - (recip . genericLength . alphabet $ sta)\n\nseqDistance _ _ = error "seqDistance: Cannot compare sequences of different type or length!"\n\n\n-- Get the hamming distance of two strings. (Undefined behaviour\n-- with strings of differing lengths.)\nhamming = genericLength . filter (uncurry (/=)) .: zip\n  where (.:) = (.).(.); infixr 8 .:\n '