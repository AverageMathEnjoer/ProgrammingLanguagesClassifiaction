b'#I @"packages/FsReveal/fsreveal/"\n#I @"packages/FAKE/tools/"\n#I @"packages/Suave/lib/net40"\n\n#r "FakeLib.dll"\n#r "Suave.dll"\n\n#load "fsreveal.fsx"\n\n// Git configuration (used for publishing documentation in gh-pages branch)\n// The profile where the project is posted\nlet gitOwner = "myGitUser"\nlet gitHome = "https://github.com/" + gitOwner\n// The name of the project on GitHub\nlet gitProjectName = "MyProject"\n// The name of the GitHub repo subdirectory to publish slides to\nlet gitSubDir = ""\n\nopen FsReveal\nopen Fake\nopen Fake.Git\nopen System.IO\nopen System.Diagnostics\nopen Suave\nopen Suave.Web\nopen Suave.Http\nopen Suave.Operators\nopen Suave.Sockets\nopen Suave.Sockets.Control\nopen Suave.Sockets.AsyncSocket\nopen Suave.WebSocket\nopen Suave.Utils\nopen Suave.Files\n\nlet outDir = __SOURCE_DIRECTORY__ </> "output"\nlet slidesDir = __SOURCE_DIRECTORY__ </> "slides"\n\nTarget "Clean" (fun _ ->\n    CleanDirs [outDir]\n)\n\nlet fsiEvaluator = \n    let evaluator = FSharp.Literate.FsiEvaluator()\n    evaluator.EvaluationFailed.Add(fun err -> \n        traceImportant <| sprintf "Evaluating F# snippet failed:\\n%s\\nThe snippet evaluated:\\n%s" err.StdErr err.Text )\n    evaluator \n\nlet copyStylesheet() =\n    try\n        CopyFile (outDir </> "css" </> "custom.css") (slidesDir </> "custom.css")\n    with\n    | exn -> traceImportant <| sprintf "Could not copy stylesheet: %s" exn.Message\n\nlet copyPics() =\n    try\n      CopyDir (outDir </> "images") (slidesDir </> "images") (fun f -> true)\n    with\n    | exn -> traceImportant <| sprintf "Could not copy picture: %s" exn.Message\n\nlet generateFor (file:FileInfo) = \n    try\n        copyPics()\n        let rec tryGenerate trials =\n            try\n                FsReveal.GenerateFromFile(file.FullName, outDir, fsiEvaluator = fsiEvaluator)\n            with \n            | exn when trials > 0 -> tryGenerate (trials - 1)\n            | exn -> \n                traceImportant <| sprintf "Could not generate slides for: %s" file.FullName\n                traceImportant exn.Message\n\n        tryGenerate 3\n\n        copyStylesheet()\n    with\n    | :? FileNotFoundException as exn ->\n        traceImportant <| sprintf "Could not copy file: %s" exn.FileName\n\nlet refreshEvent = new Event<_>()\n\nlet handleWatcherEvents (events:FileChange seq) =\n    for e in events do\n        let fi = fileInfo e.FullPath\n        traceImportant <| sprintf "%s was changed." fi.Name\n        match fi.Attributes.HasFlag FileAttributes.Hidden || fi.Attributes.HasFlag FileAttributes.Directory with\n        | true -> ()\n        | _ -> generateFor fi\n    refreshEvent.Trigger()\n\nlet socketHandler (webSocket : WebSocket) =\n  fun cx -> socket {\n    while true do\n      let! refreshed =\n        Control.Async.AwaitEvent(refreshEvent.Publish)\n        |> Suave.Sockets.SocketOp.ofAsync \n      do! webSocket.send Text (ASCII.bytes "refreshed") true\n  }\n\nlet startWebServer () =\n    let rec findPort port =\n        let portIsTaken =\n            if isMono then false else\n            System.Net.NetworkInformation.IPGlobalProperties.GetIPGlobalProperties().GetActiveTcpListeners()\n            |> Seq.exists (fun x -> x.Port = port)\n\n        if portIsTaken then findPort (port + 1) else port\n\n    let port = findPort 8083\n\n    let serverConfig = \n        { defaultConfig with\n           homeFolder = Some (FullName outDir)\n           bindings = [ HttpBinding.mkSimple HTTP "127.0.0.1" port ]\n        }\n    let app =\n      choose [\n        Filters.path "/websocket" >=> handShake socketHandler\n        Writers.setHeader "Cache-Control" "no-cache, no-store, must-revalidate"\n        >=> Writers.setHeader "Pragma" "no-cache"\n        >=> Writers.setHeader "Expires" "0"\n        >=> browseHome ]\n    startWebServerAsync serverConfig app |> snd |> Async.Start\n    Process.Start (sprintf "http://localhost:%d/index.html" port) |> ignore\n\nTarget "GenerateSlides" (fun _ ->\n    !! (slidesDir + "/**/*.md")\n      ++ (slidesDir + "/**/*.fsx")\n    |> Seq.map fileInfo\n    |> Seq.iter generateFor\n)\n\nTarget "KeepRunning" (fun _ ->\n    use watcher = !! (slidesDir + "/**/*.*") |> WatchChanges handleWatcherEvents\n    \n    startWebServer ()\n\n    traceImportant "Waiting for slide edits. Press any key to stop."\n\n    System.Console.ReadKey() |> ignore\n\n    watcher.Dispose()\n)\n\nTarget "ReleaseSlides" (fun _ ->\n    if gitOwner = "myGitUser" || gitProjectName = "MyProject" then\n        failwith "You need to specify the gitOwner and gitProjectName in build.fsx"\n    let tempDocsRoot = __SOURCE_DIRECTORY__ </> "temp/gh-pages"\n    let tempDocsDir = tempDocsRoot </> gitSubDir\n    CleanDir tempDocsRoot\n    Repository.cloneSingleBranch "" (gitHome + "/" + gitProjectName + ".git") "gh-pages" tempDocsRoot\n\n    fullclean tempDocsDir\n    CopyRecursive outDir tempDocsDir true |> tracefn "%A"\n    StageAll tempDocsRoot\n    Git.Commit.Commit tempDocsRoot "Update generated slides"\n    Branches.push tempDocsRoot\n)\n\n"Clean"\n  ==> "GenerateSlides"\n  ==> "KeepRunning"\n\n"GenerateSlides"\n  ==> "ReleaseSlides"\n  \nRunTargetOrDefault "KeepRunning"\n'