b'package com.github.eprendre.sources_by_eprendre\n\nimport com.github.eprendre.tingshu.extensions.config\nimport com.github.eprendre.tingshu.extensions.getCurrentBook\nimport com.github.eprendre.tingshu.sources.*\nimport com.github.eprendre.tingshu.utils.*\nimport org.jsoup.Jsoup\nimport java.net.URL\n\nobject AiTingShu : TingShu(), AudioUrlExtraHeaders, CoverUrlExtraHeaders {\n    override fun getSourceId(): String {\n        return "5267b4570f7e45f2903678227d2e7b44"\n    }\n\n    override fun getUrl(): String {\n        return "https://www.2uxs.com"\n    }\n\n    override fun getName(): String {\n        return "\xe7\x88\xb1\xe5\x90\xac\xe4\xb9\xa6"\n    }\n\n    override fun getDesc(): String {\n        return "\xe6\x8e\xa8\xe8\x8d\x90\xe6\x8c\x87\xe6\x95\xb0:4\xe6\x98\x9f \xe2\xad\x90\xe2\xad\x90\xe2\xad\x90\xe2\xad\x90\\n\xe6\x9c\x89\xe6\x97\xb6\xe5\x80\x99\xe8\xb5\x84\xe6\xba\x90\xe4\xb8\x8d\xe7\xa8\xb3\xe5\xae\x9a"\n    }\n\n    override fun isDiscoverable(): Boolean {\n        return false\n    }\n\n    override fun isSearchable(): Boolean {\n        return false\n    }\n\n    override fun getCategoryMenus(): List<CategoryMenu> {\n        val menu1 = CategoryMenu(\n            "\xe5\xb0\x8f\xe8\xaf\xb4", listOf(\n                CategoryTab("\xe7\x8e\x84\xe5\xb9\xbb\xe4\xbf\xae\xe7\x9c\x9f", "https://www.2uxs.com/yousheng/xuanhuan/lastupdate.html"),\n                CategoryTab("\xe7\x81\xb5\xe5\xbc\x82\xe6\x83\x8a\xe6\x82\x9a", "https://www.2uxs.com/yousheng/lingyi/lastupdate.html"),\n                CategoryTab("\xe9\x83\xbd\xe5\xb8\x82\xe8\xa8\x80\xe6\x83\x85", "https://www.2uxs.com/yousheng/dushi/lastupdate.html"),\n                CategoryTab("\xe5\x86\x9b\xe4\xba\x8b\xe5\x8e\x86\xe5\x8f\xb2", "https://www.2uxs.com/yousheng/junshi/lastupdate.html"),\n                CategoryTab("\xe5\x84\xbf\xe7\xab\xa5\xe6\x95\x85\xe4\xba\x8b", "https://www.2uxs.com/yousheng/ertong/lastupdate.html"),\n                CategoryTab("\xe7\xbb\x8f\xe5\x85\xb8\xe7\xba\xaa\xe5\xae\x9e", "https://www.2uxs.com/yousheng/jishi/lastupdate.html"),\n                CategoryTab("\xe7\xbd\x91\xe6\xb8\xb8\xe7\xab\x9e\xe6\x8a\x80", "https://www.2uxs.com/yousheng/jingji/lastupdate.html")\n            )\n        )\n\n        val menu2 = CategoryMenu(\n            "\xe5\x85\xb6\xe5\xae\x83", listOf(\n                CategoryTab("\xe9\x95\xbf\xe7\xaf\x87\xe8\xaf\x84\xe4\xb9\xa6", "https://www.2uxs.com/yousheng/pingshu/lastupdate.html"),\n                CategoryTab("\xe7\x9b\xb8\xe5\xa3\xb0\xe6\x88\x8f\xe6\x9b\xb2", "https://www.2uxs.com/yousheng/xiangsheng/lastupdate.html"),\n                CategoryTab("\xe7\xbb\xbc\xe8\x89\xba\xe5\xa8\xb1\xe4\xb9\x90", "https://www.2uxs.com/yousheng/yule/lastupdate.html"),\n                CategoryTab("\xe7\x99\xbe\xe5\xae\xb6\xe8\xae\xb2\xe5\x9d\x9b", "https://www.2uxs.com/yousheng/bjjt/lastupdate.html"),\n                CategoryTab("\xe8\x81\x8c\xe5\x9c\xba\xe5\x95\x86\xe6\x88\x98", "https://www.2uxs.com/yousheng/tongren/lastupdate.html"),\n                CategoryTab("\xe4\xba\xba\xe7\x89\xa9\xe4\xbc\xa0\xe8\xae\xb0", "https://www.2uxs.com/yousheng/chuanji/lastupdate.html"),\n                CategoryTab("\xe9\x80\x9a\xe4\xbf\x97\xe6\x96\x87\xe5\xad\xa6", "https://www.2uxs.com/yousheng/wenxue/lastupdate.html"),\n                CategoryTab("\xe5\x85\xb6\xe4\xbb\x96\xe6\x9c\x89\xe5\xa3\xb0", "https://www.2uxs.com/yousheng/qita/lastupdate.html")\n            )\n        )\n        return listOf(menu1, menu2)\n    }\n\n    override fun search(keywords: String, page: Int): Pair<List<Book>, Int> {\n        val url = "https://www.2uxs.com/novelsearch/search/result.html"\n        val doc = Jsoup.connect(url).config(true)\n            .data(mapOf("searchtype" to "novelname", "searchword" to keywords))\n            .post()\n\n//        val pages = doc.selectFirst(".fanye").children().map { it.ownText() }.filter { it.matches("\\\\d+".toRegex()) }\n//        val totalPage = pages.last().toInt()\n        val totalPage = 1\n\n        val list = ArrayList<Book>()\n        val elementList = doc.select(".list-works li")\n        elementList.forEach { element ->\n            val coverUrl = element.selectFirst(".list-imgbox img").absUrl("data-original")\n            val titleElement = element.selectFirst(".list-book-dt a")\n            val bookUrl = titleElement.absUrl("href")\n            val title = titleElement.ownText()\n            val (author, artist, status) = element.select(".list-book-cs .book-author").let {\n                Triple(it[0].text(), it[1].text(), it[2].text().replace("\xe6\x9b\xb4\xe6\x96\xb0\xe6\x83\x85\xe5\x86\xb5\xef\xbc\x9a", ""))\n            }\n\n            val intro = element.selectFirst(".list-book-des").text()\n            list.add(Book(coverUrl, bookUrl, title, author, artist).apply {\n                this.intro = intro\n                this.status = status\n                this.sourceId = getSourceId()\n            })\n        }\n\n        return Pair(list, totalPage)\n    }\n\n    override fun getBookDetailInfo(bookUrl: String, loadEpisodes: Boolean, loadFullPages: Boolean): BookDetail {\n        val list = ArrayList<Episode>()\n        var currentIntro = ""\n        if (loadEpisodes) {\n            val doc = Jsoup.connect(bookUrl).config(true).get()\n            val episodes = doc.select("#playlist > ul > li > a").map {\n                Episode(it.text(), it.attr("abs:href"))\n            }\n            list.addAll(episodes)\n            currentIntro = doc.selectFirst(".book-des").ownText().trim()\n        }\n        return BookDetail(list, currentIntro)\n    }\n\n    override fun getAudioUrlExtractor(): AudioUrlExtractor {\n        AudioUrlWebViewExtractor.setUp(true,\n            "(function() { return (\'<html>\'+document.getElementsByName(\\"play\\")[0].contentDocument.documentElement.innerHTML+\'</html>\'); })();") { str ->\n            val doc = Jsoup.parse(str)\n            val audioElement = doc.getElementById("jp_audio_0")\n            return@setUp audioElement?.attr("src")\n        }\n        return AudioUrlWebViewExtractor\n//        AudioUrlWebViewSniffExtractor.setUp(true) { url ->\n//            return@setUp (url.contains(".mp3", true) ||\n//                    url.contains(".m4a", true) ||\n//                    url.contains(".m4b", true) ||\n//                    url.contains(".flac", true) ||\n//                    url.contains(".aa3", true) ||\n//                    url.contains(".ogg", true) ||\n//                    url.contains(".wma", true) ||\n//                    url.contains(".wav", true) ||\n//                    url.contains(".aac", true) ||\n//                    url.contains(".ac3", true) ||\n//                    url.contains(".mp4", true))\n//        }\n//        return AudioUrlWebViewSniffExtractor\n    }\n\n    override fun getCategoryList(url: String): Category {\n        val doc = Jsoup.connect(url).config(true).get()\n\n        val nextUrl = doc.select(".fanye a").firstOrNull { it.text().contains("\xe4\xb8\x8b\xe9\xa1\xb5") }?.attr("abs:href") ?: ""\n        val currentPage = doc.selectFirst(".fanye strong").ownText().toInt()\n        val totalPage = doc.selectFirst(".fanye").children().map { it.ownText() }.filter { it.matches("\\\\d+".toRegex()) }.last().toInt()\n\n        val list = ArrayList<Book>()\n        val elementList = doc.select(".list-works li")\n        elementList.forEach { element ->\n            val coverUrl = element.selectFirst(".list-imgbox img").absUrl("data-original")\n            val titleElement = element.selectFirst(".list-book-dt a")\n            val bookUrl = titleElement.absUrl("href")\n            val title = titleElement.ownText()\n            val (author, artist, status) = element.select(".list-book-cs .book-author").let {\n                Triple(it[0].text(), it[1].text(), it[2].text().replace("\xe6\x9b\xb4\xe6\x96\xb0\xe6\x83\x85\xe5\x86\xb5\xef\xbc\x9a", ""))\n            }\n            val intro = element.selectFirst(".list-book-des").text()\n            list.add(Book(coverUrl, bookUrl, title, author, artist).apply {\n                this.intro = intro\n                this.status = status\n                this.sourceId = getSourceId()\n            })\n        }\n\n        return Category(list, currentPage, totalPage, url, nextUrl)\n    }\n\n    override fun headers(audioUrl: String): Map<String, String> {\n        val hashMap = hashMapOf<String, String>()\n        if (audioUrl.contains("gongpa.com") || audioUrl.contains("2uxs.com") || audioUrl.contains("dongporen")) {\n            hashMap["Referer"] = "https://www.2uxs.com/"\n        }\n        return hashMap\n    }\n\n    override fun coverHeaders(coverUrl: String, headers: MutableMap<String, String>): Boolean {\n        if(coverUrl.contains("2uxs.com") || coverUrl.contains("xinexin.cn")) {\n            headers["Referer"] = getCurrentBook()?.currentEpisodeUrl ?: "https://www.2uxs.com/"\n            headers["Host"] = URL(coverUrl).host\n            return true\n        }\n        return false\n    }\n}'