b'#include <bits/stdc++.h>\nusing namespace std;\n#define gc getchar_unlocked\n#define fo(i,n) for(i=0;i<n;i++)\n#define Fo(i,k,n) for(i=k;k<n?i<n:i>n;k<n?i+=1:i-=1)\n#define ll long long\n#define si(x)\tscanf("%d",&x)\n#define sl(x)\tscanf("%lld",&x)\n#define ss(s)\tscanf("%s",s)\n#define pb push_back\n#define mp make_pair\n#define F first\n#define S second\n#define all(x) x.begin(), x.end()\n#define clr(x) memset(x, 0, sizeof(x))\n#define sortall(x) sort(all(x))\n#define tr(it, a) for(auto it = a.begin(); it != a.end(); it++)\n#define PI 3.1415926535897932384626\ntypedef pair<int, int>\tpii;\ntypedef pair<ll, ll>\tpll;\ntypedef vector<int>\t\tvi;\ntypedef vector<ll>\t\tvl;\ntypedef vector<pii>\t\tvpii;\ntypedef vector<pll>\t\tvpll;\ntypedef vector<vi>\t\tvvi;\ntypedef vector<vl>\t\tvvl;\nconst int mod = 1000000007;\n//http://codeforces.com/gym/100570/problem/D\n//"2-sat" and "small to large" merging \n//N must be atleast twice the value of nodes\nconst int N = 5e5;\n\nint a[N], par[N], n, q;\nmap<ll, int> mep;\nvi comp[N];\n\nvoid add(ll &x){\n\tif (mep.find(x) == mep.end())\n\t\tmep[x] = mep.size();\n\tx = mep[x];\n}\n\nvoid out(){\n\twhile(q++ < n) printf("No\\n");\n\texit(0);\n}\nvoid merge(int u, int v){\n\tu = par[u];\n\tv = par[v];\n    \tif (u == v) return;\n\tif ((int)comp[u].size() > (int)comp[v].size()) swap(u, v);\n\t//v is bada\n\tvi &r = comp[v];\n\t// each time we merge two components\n\t// size increases atleast by 2 * chote set ka size\n\t//each node can move at most log2(n) times\n\t// n * log(n) complexity mei merge hojayega\n\tfor(int x: comp[u]){\n\t\tif (par[x^1] == v) out();\n\t\tr.pb(x);\n\t\tpar[x] = v;\n\t}\n}\nint main()\n{\n\t//ios_base::sync_with_stdio(false);\n\t//cin.tie(NULL);\n\tint i,k,j;\n\tsi(n);\n\tll x, y, a, b;\n\tfo(i, N) par[i] = i, comp[i].clear(), comp[i].pb(i);\n\tfo(i, n){\n\t\tq = i;\n\t\tsl(x);\tsl(y);\tsl(a);\tsl(b);\n        \ty = -y;\n\t\tadd(x); add(y);\n\t\tx *= 2;\n\t\ty *= 2;\n\t\tif (a == b){\n\t\t\tmerge(x, y);\n\t\t\tmerge(x^1, y^1);\n\t\t}\n\t\telse{\n\t\t\tmerge(x, y^1);\n\t\t\tmerge(x^1, y);\n\t\t}\n\t\tprintf("Yes\\n");\t\t\n\t}\n   \n\treturn 0;\n} \n\n'