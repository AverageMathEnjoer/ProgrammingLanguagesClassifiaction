b'context("model_matrix")\ntest_that("supplying custom model matrix works", {\n  dds <- makeExampleDESeqDataSet(n=100, m=18)\n  dds$group <- factor(rep(1:3,each=6))\n  dds$condition <- factor(rep(rep(c("A","B","C"),each=2),3))\n  # note: design is not used\n  design(dds) <- ~ 1\n  dds <- dds[,-c(17,18)]\n\n  m1 <- model.matrix(~ group*condition, colData(dds))\n  m1 <- m1[,-9]\n  m0 <- model.matrix(~ group + condition, colData(dds))\n\n  dds <- DESeq(dds, full=m1, reduced=m0, test="LRT")\n  results(dds)[1,]\n  results(dds, name="group2.conditionC", test="Wald")[1,]\n  dds <- removeResults(dds)\n  dds <- DESeq(dds, full=m1, test="Wald", betaPrior=FALSE)\n  results(dds)[1,]\n\n  # test better error than "error: inv(): matrix seems singular"\n  coldata <- data.frame(group=factor(rep(1:3,each=6)),\n                        group2=factor(rep(1:3,each=6)),\n                        condition=factor(rep(1:6,3)))\n  counts <- matrix(rpois(180, 100), ncol=18)\n  m1 <- model.matrix(~ group + group2, coldata)\n  m2 <- model.matrix(~ condition + group, coldata)\n  dds <- DESeqDataSetFromMatrix(counts, coldata, ~group)\n  expect_error(dds <- DESeq(dds, full=m1, fitType="mean"), "full rank")\n  expect_error(dds <- DESeq(dds, full=m2, reduced=m1, test="LRT", fitType="mean"), "full rank")\n})\n'