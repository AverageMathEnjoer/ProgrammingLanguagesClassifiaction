b'package com.github.razir.progressexample\n\nimport android.content.Context\nimport android.content.Intent\nimport android.graphics.Color\nimport android.os.Bundle\nimport android.os.Handler\nimport android.widget.Button\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.core.content.ContextCompat\nimport com.github.razir.progressbutton.*\nimport kotlinx.android.synthetic.main.activity_drawable_buttons.*\n\nclass DrawableButtonsActivity : AppCompatActivity() {\n\n    companion object {\n        fun getStartIntent(context: Context): Intent {\n            return Intent(context, DrawableButtonsActivity::class.java)\n        }\n    }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_drawable_buttons)\n\n\n        buttonAnimatedDrawable.attachTextChangeAnimator()\n        bindProgressButton(buttonAnimatedDrawable)\n\n        buttonProgressMixed.attachTextChangeAnimator()\n        bindProgressButton(buttonProgressMixed)\n\n        buttonProgressMixed.setOnClickListener {\n            showMixed(buttonProgressMixed)\n        }\n        buttonAnimatedDrawable.setOnClickListener {\n            showAnimatedDrawable(buttonAnimatedDrawable)\n        }\n    }\n\n    private fun showMixed(button: Button) {\n        val animatedDrawable = ContextCompat.getDrawable(this, R.drawable.animated_check)!!\n        //Defined bounds are required for your drawable\n        val drawableSize = resources.getDimensionPixelSize(R.dimen.doneSize)\n        animatedDrawable.setBounds(0, 0, drawableSize, drawableSize)\n\n        button.showProgress {\n            buttonTextRes = R.string.loading\n            progressColor = Color.WHITE\n        }\n        button.isEnabled = false\n\n\n        Handler().postDelayed({\n            button.isEnabled = true\n\n            button.showDrawable(animatedDrawable) {\n                buttonTextRes = R.string.saved\n            }\n            Handler().postDelayed({\n                button.hideDrawable(R.string.mixedBehaviour)\n            }, 2000)\n        }, 3000)\n    }\n\n    private fun showAnimatedDrawable(button: Button) {\n        val animatedDrawable = ContextCompat.getDrawable(this, R.drawable.animated_check)!!\n        //Defined bounds are required for your drawable\n        val drawableSize = resources.getDimensionPixelSize(R.dimen.doneSize)\n        animatedDrawable.setBounds(0, 0, drawableSize, drawableSize)\n        button.isEnabled = false\n\n        button.showDrawable(animatedDrawable) {\n            buttonTextRes = R.string.saved\n            textMarginRes = R.dimen.drawableTextMargin\n        }\n\n        Handler().postDelayed({\n            button.hideDrawable(R.string.animatedDrawable)\n            button.isEnabled = true\n        }, 3000)\n    }\n}'