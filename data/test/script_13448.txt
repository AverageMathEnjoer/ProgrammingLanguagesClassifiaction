b'-- To test examples in commnets, type\n-- % doctest 10misc.hs\n\nimport Data.Char\nimport Text.Parsec\nimport Text.Parsec.String\n\n----------------------------------------------------------------\n\n-- | Parser for mathematical expressions\n--\n-- >>> parse my_paren "" "()()()"\n-- Right 3\n-- >>> parse my_paren "" "(((())))"\n-- Right 4\n-- >>> parse my_paren "" "(())(()())"\n-- Right 5\n\nmy_paren :: Parser Int\nmy_paren = openClose <|> return 0\n  where\n    openClose = do\n        char \'(\'\n        cnt1 <- my_paren\n        char \')\'\n        cnt2 <- my_paren\n        return (1 + cnt1 + cnt2)\n\n----------------------------------------------------------------\n\n-- | Parser for mathematical expressions\n--\n-- >>> parse my_expr "" "1"\n-- Right 1\n-- >>> parse my_expr "" "(1+2)*3"\n-- Right 9\n-- >>> parse my_expr "" "(1+2)*(3+4)+5"\n-- Right 26\n\nmy_expr :: Parser Int\nmy_expr = do\n    n <- my_term\n    m <- plus <|> return 0\n    return (n + m)\n  where\n    plus = do\n        char \'+\'\n        my_expr\n\nmy_term :: Parser Int\nmy_term = do\n    n <- my_factor\n    m <- multi <|> return 1\n    return (n * m)\n  where\n    multi = do\n        char \'*\'\n        my_term\n\nmy_factor :: Parser Int\nmy_factor = paren <|> my_nat\n  where\n    paren = do\n        char \'(\'\n        n <- my_expr\n        char \')\'\n        return n\n\nmy_nat :: Parser Int\nmy_nat = do\n    n <- oneOf [\'0\'..\'9\']\n    return $ ord n - ord \'0\'\n\n----------------------------------------------------------------\n\nmain :: IO ()\nmain = undefined\n'