b'package co.joebirch.composeplayground.animation\n\nimport androidx.compose.animation.animateColorAsState\nimport androidx.compose.animation.core.animateFloatAsState\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.unit.dp\nimport co.joebirch.composeplayground.ComposableLayout\n\nobject AnimatedValuesView : ComposableLayout {\n\n    @Composable\n    override fun build() {\n        Column(\n            modifier = Modifier.fillMaxSize().padding(32.dp),\n            verticalArrangement = Arrangement.SpaceEvenly,\n            horizontalAlignment = Alignment.CenterHorizontally\n        ) {\n            AnimatedFloat()\n            AnimatedColor()\n        }\n    }\n\n    @Composable\n    fun AnimatedFloat() {\n        val expandedState = remember { mutableStateOf(false) }\n        val viewHeight = if (expandedState.value) {\n            animateFloatAsState(140f)\n        } else animateFloatAsState(40f)\n        Box(modifier = Modifier.fillMaxWidth().height(viewHeight.value.dp).clickable(\n            onClick = {\n                expandedState.value = !expandedState.value\n            }\n        ).background(Color.Red))\n    }\n\n    @Composable\n    fun AnimatedColor() {\n        val expandedState = remember { mutableStateOf(false) }\n        val viewHeight =\n            if (expandedState.value) {\n                animateColorAsState(Color.Red)\n            } else animateColorAsState(Color.Green)\n        Box(\n            modifier = Modifier.fillMaxWidth().height(40.dp).clickable(onClick = {\n                expandedState.value = !expandedState.value\n            }).background(viewHeight.value)\n        )\n    }\n\n}'