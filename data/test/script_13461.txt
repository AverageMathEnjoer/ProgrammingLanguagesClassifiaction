b'import com.github.eprendre.tingshu.utils.Book\nimport com.github.eprendre.tingshu.utils.Episode\nimport com.github.kittinunf.fuel.Fuel\nimport com.github.kittinunf.fuel.json.responseJson\nimport org.junit.Test\nimport java.net.URLEncoder\nimport kotlin.math.ceil\n\nclass KuWoTest {\n\n    @Test\n    fun search() {\n        val keywords = "\xe4\xbb\x99" //\xe6\x90\x9c\xe7\xb4\xa2\xe5\x85\xb3\xe9\x94\xae\xe8\xaf\x8d\n        val page = 1 //\xe5\xbd\x93\xe5\x89\x8d\xe9\xa1\xb5\xe6\x95\xb0\n        val encodedKeywords = URLEncoder.encode(keywords, "utf-8") //\xe7\xbc\x96\xe7\xa0\x81\n\n        val url = "http://baby.kuwo.cn/tingshu/api/search/Search?rn=10&type=album&version=8.5.6.1&wd=${encodedKeywords}&pn=${page}&kweexVersion=1.0.2"\n\n        val data = Fuel.get(url)\n            .responseJson()\n            .third.get().obj().getJSONObject("data")\n        val pageCount = ceil(data.getInt("total").toFloat() / 10).toInt()\n        val list = ArrayList<Book>()\n        val iData = data.getJSONArray("data")\n        (0 until iData.length()).forEach { i ->\n            val item = iData.getJSONObject(i)\n            val albumId = item.getInt("albumId")\n            val coverUrl = item.getString("coverImg")\n            val bookUrl = "http://baby.kuwo.cn/tingshu/api/data/album/songs?albumId=${albumId}&online=0&kweexVersion=1.0.2"\n            val title = item.getString("albumName")\n            val author = ""\n            val artist = item.getString("artistName")\n            val status = "\xe5\x85\xb1 ${item.getInt("songTotal")} \xe7\xab\xa0"\n            val intro = item.getString("title")\n            list.add(Book(coverUrl, bookUrl, title, author, artist).apply {\n                this.status = status\n                this.intro = intro\n//                this.sourceId =\n            })\n        }\n        list.take(5).forEach {\n            println(it)\n        }\n        assert(list.size > 0)\n    }\n\n    @Test\n    fun bookDetail() {\n        val bookUrl = "http://baby.kuwo.cn/tingshu/api/data/album/songs?albumId=7871200&online=0&kweexVersion=1.0.2"\n        val data = Fuel.get(bookUrl).responseJson().third.get().obj().getJSONArray("data")\n        val episodes = ArrayList<Episode>()\n        (0 until data.length()).forEach {\n            val item = data.getJSONObject(it)\n            val name = item.getString("name")\n            val musicrid = item.getString("musicrid")\n            val url = "http://antiserver.kuwo.cn/anti.s?useless=/resource/&format=mp3&rid=MUSIC_${musicrid}&response=res&type=convert_url"\n            episodes.add(Episode(name, url))\n        }\n        episodes.take(10).forEach {\n            println(it)\n        }\n        assert(episodes.isNotEmpty())\n    }\n\n    @Test\n    fun categoryList() {\n        val url = "http://baby.kuwo.cn/tingshu/api/filter/albums?sortType=tsScore&classifyId=42&rn=20&categoryId=2&pn=1&kweexVersion=1.0.2"\n        val currentPage = Regex("pn=(\\\\d+)").find(url)!!.groupValues[1].toInt()\n        var pageCount = 1\n        val data = Fuel.get(url).responseJson().third.get().obj().getJSONObject("data")\n        if (data.has("pageInfo")) {\n            val total = data.getJSONObject("pageInfo").getInt("total")\n            pageCount = ceil(total.toFloat() / 20).toInt()\n        } else {\n            val total = data.getInt("total")\n            pageCount = ceil(total.toFloat() / 20).toInt()\n        }\n        val nextUrl = if (currentPage < pageCount) {\n            url.replace(Regex("pn=(\\\\d+)"), "pn=${currentPage + 1}")\n        } else ""\n        println("currentPage: $currentPage")\n        println("pageCount: $pageCount")\n        println(nextUrl)\n\n        val list = ArrayList<Book>()\n        if (data.has("topDatas")) {\n            val topDatas = data.getJSONArray("topDatas")\n            (0 until topDatas.length()).forEach { i ->\n                val item = topDatas.getJSONObject(i).getJSONObject("albums")\n                val albumId = item.getInt("albumId")\n                val coverUrl = item.getString("img")\n                val bookUrl = "http://baby.kuwo.cn/tingshu/api/data/album/songs?albumId=${albumId}&online=0&kweexVersion=1.0.2"\n                val title = item.getString("name")\n                val author = ""\n                val artist = ""\n                val status = "\xe5\x85\xb1 ${item.getInt("songTotal")} \xe7\xab\xa0"\n                val intro = item.getString("title")\n                list.add(Book(coverUrl, bookUrl, title, author, artist).apply {\n                    this.status = status\n                    this.intro = intro\n//                this.sourceId =\n                })\n            }\n\n        } else {\n            val iData = data.getJSONArray("data")\n            (0 until iData.length()).forEach { i ->\n                val item = iData.getJSONObject(i)\n                val albumId = item.getInt("albumId")\n                val coverUrl = item.getString("coverImg")\n                val bookUrl = "http://baby.kuwo.cn/tingshu/api/data/album/songs?albumId=${albumId}&online=0&kweexVersion=1.0.2"\n                val title = item.getString("albumName")\n                val author = ""\n                val artist = item.getString("artistName")\n                val status = "\xe5\x85\xb1 ${item.getInt("songTotal")} \xe7\xab\xa0"\n                val intro = item.getString("title")\n                list.add(Book(coverUrl, bookUrl, title, author, artist).apply {\n                    this.status = status\n                    this.intro = intro\n//                this.sourceId =\n                })\n            }\n        }\n        list.take(5).forEach {\n            println(it)\n        }\n        assert(list.size > 0)\n\n    }\n}'