b"-- | Defines type classes for 'Table's and 'Database's.\n--\n-- All important class methods of these classes can be derived automatically using 'Generic's and GHC's DefaultSignatures extension,\n-- but you can override any method if necessary.\n--\n-- To get started, see 'Table', 'Columnar', and 'Nullable'.\nmodule Database.Beam.Schema\n    (\n    -- * Database construction\n    -- $db-construction\n      Database\n\n    , DatabaseSettings\n    , DatabaseEntity\n\n    -- ** #entities# Database entities\n    -- $entities\n    , TableEntity\n\n    -- * Table construction\n    , Table(..), Beamable\n    , defTblFieldSettings, pk\n\n    , Columnar, C, Columnar', Nullable\n    , TableField, fieldName\n\n    , TableSettings, HaskellTable\n\n    -- * 'Generic'-deriving mechanisms\n    , defaultDbSettings\n\n    -- ** Modifying the derived schema\n    , DatabaseModification, EntityModification, FieldModification\n    , withDbModification, withTableModification\n    , dbModification, tableModification\n    , modifyTable, fieldNamed\n    , setEntityName , modifyEntityName, modifyTableFields\n\n    -- * Types for lens generation\n    , Lenses, LensFor(..)\n\n    , module Database.Beam.Schema.Lenses ) where\n\nimport Database.Beam.Schema.Tables\nimport Database.Beam.Schema.Lenses\n\n-- $db-construction\n-- Types and functions to express database types and auto-generate name mappings\n-- for them. See the\n-- [manual](https://haskell-beam.github.io/beam/user-guide/databases.md) for more\n-- information.\n\n-- $entities\n-- Database entities represent things that can go into databases. Each entity in\n-- your database that you want to access from Haskell must be given a field in\n-- your database type. Each type of entity gets a particular entity tag, such as\n-- 'TableEntity' or 'DomainTypeEntity'\n"