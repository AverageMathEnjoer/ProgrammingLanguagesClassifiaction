b'package com.quyunshuo.androidbaseframemvvm.base.utils\n\nimport android.view.LayoutInflater\nimport android.view.ViewGroup\nimport androidx.fragment.app.Fragment\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.ViewModelProvider\nimport androidx.lifecycle.ViewModelStoreOwner\nimport androidx.viewbinding.ViewBinding\nimport java.lang.reflect.InvocationTargetException\nimport java.lang.reflect.ParameterizedType\nimport java.util.*\n\n/**\n * @author DBoy\n * @date 2020/9/29\n * Class \xe6\x8f\x8f\xe8\xbf\xb0 : \xe7\x94\xa8\xe4\xba\x8e\xe5\x8f\x8d\xe5\xb0\x84\xe8\x8e\xb7\xe5\x8f\x96 ViewModel  \xe5\x92\x8c ViewBinding\n */\nobject BindingReflex {\n    /**\n     * \xe5\x8f\x8d\xe5\xb0\x84\xe8\x8e\xb7\xe5\x8f\x96ViewBinding\n     *\n     * @param <V>    ViewBinding \xe5\xae\x9e\xe7\x8e\xb0\xe7\xb1\xbb\n     * @param aClass \xe5\xbd\x93\xe5\x89\x8d\xe7\xb1\xbb\n     * @param from   layouinflater\n     * @return viewBinding\xe5\xae\x9e\xe4\xbe\x8b\n    </V> */\n    fun <V : ViewBinding> reflexViewBinding(aClass: Class<*>, from: LayoutInflater?): V {\n        try {\n            val actualTypeArguments =\n                (Objects.requireNonNull(aClass.genericSuperclass) as ParameterizedType).actualTypeArguments\n            for (i in actualTypeArguments.indices) {\n                val tClass: Class<Any>\n                try {\n                    tClass = actualTypeArguments[i] as Class<Any>\n                } catch (e: Exception) {\n                    continue\n                }\n                if (ViewBinding::class.java.isAssignableFrom(tClass)) {\n                    val inflate = tClass.getMethod("inflate", LayoutInflater::class.java)\n                    return inflate.invoke(null, from) as V\n                }\n            }\n            return reflexViewBinding<V>(aClass.superclass, from)\n        } catch (e: NoSuchMethodException) {\n            e.printStackTrace()\n        } catch (e: IllegalAccessException) {\n            e.printStackTrace()\n        } catch (e: InvocationTargetException) {\n            e.printStackTrace()\n        }\n        throw RuntimeException("ViewBinding\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe5\xa4\xb1\xe8\xb4\xa5")\n    }\n\n    /**\n     * \xe5\x8f\x8d\xe5\xb0\x84\xe8\x8e\xb7\xe5\x8f\x96ViewBinding\\\n     */\n    fun <V : ViewBinding> reflexViewBinding(\n        aClass: Class<*>,\n        from: LayoutInflater?,\n        viewGroup: ViewGroup?,\n        b: Boolean\n    ): V {\n        try {\n            val actualTypeArguments =\n                (Objects.requireNonNull(aClass.genericSuperclass) as ParameterizedType).actualTypeArguments\n            for (i in actualTypeArguments.indices) {\n                val tClass: Class<Any>\n                try {\n                    tClass = actualTypeArguments[i] as Class<Any>\n                } catch (e: Exception) {\n                    continue\n                }\n                if (ViewBinding::class.java.isAssignableFrom(tClass)) {\n                    val inflate = tClass.getDeclaredMethod(\n                        "inflate",\n                        LayoutInflater::class.java,\n                        ViewGroup::class.java,\n                        Boolean::class.javaPrimitiveType\n                    )\n                    return inflate.invoke(null, from, viewGroup, b) as V\n                }\n            }\n            return reflexViewBinding<ViewBinding>(aClass.superclass, from, viewGroup, b) as V\n        } catch (e: NoSuchMethodException) {\n            e.printStackTrace()\n        } catch (e: IllegalAccessException) {\n            e.printStackTrace()\n        } catch (e: InvocationTargetException) {\n            e.printStackTrace()\n        }\n        throw RuntimeException("ViewBinding\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe5\xa4\xb1\xe8\xb4\xa5")\n    }\n\n    /**\n     * \xe5\x8f\x8d\xe5\xb0\x84\xe8\x8e\xb7\xe5\x8f\x96ViewModel\n     *\n     * @param <VM>   ViewModel\xe5\xae\x9e\xe7\x8e\xb0\xe7\xb1\xbb\n     * @param aClass \xe5\xbd\x93\xe5\x89\x8dclass\n     * @param owner  \xe7\x94\x9f\xe5\x91\xbd\xe5\x91\xa8\xe6\x9c\x9f\xe7\xae\xa1\xe7\x90\x86\n     * @return ViewModel\xe5\xae\x9e\xe4\xbe\x8b\n    </VM> */\n    fun <VM : ViewModel> reflexViewModel(aClass: Class<*>, owner: ViewModelStoreOwner): VM {\n        try {\n            val actualTypeArguments =\n                (Objects.requireNonNull(aClass.genericSuperclass) as ParameterizedType).actualTypeArguments\n            for (i in actualTypeArguments.indices) {\n                val tClass: Class<Any>\n                try {\n                    tClass = actualTypeArguments[i] as Class<Any>\n                } catch (e: Exception) {\n                    continue\n                }\n                if (ViewModel::class.java.isAssignableFrom(tClass)) {\n                    return ViewModelProvider(owner)[tClass as Class<VM>]\n                }\n            }\n            return reflexViewModel<VM>(aClass.superclass, owner)\n        } catch (e: Exception) {\n            e.printStackTrace()\n        }\n        throw RuntimeException("ViewModel\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe5\xa4\xb1\xe8\xb4\xa5")\n    }\n\n    /**\n     * \xe5\x8f\x8d\xe5\xb0\x84\xe8\x8e\xb7\xe5\x8f\x96ViewModel,\xe8\xbf\x99\xe4\xb8\xaa\xe6\x96\xb9\xe6\xb3\x95\xe5\x8f\xaa\xe6\x8f\x90\xe4\xbe\x9b\xe7\xbb\x99fragment\xe4\xbd\xbf\xe7\x94\xa8.\n     * \xe5\xa6\x82\xe6\x9e\x9cfragment\xe7\x9a\x84\xe7\x88\xb6Activity\xe6\x9c\x89\xe7\x9b\xb8\xe5\x90\x8c\xe7\x9a\x84ViewModel \xe9\x82\xa3\xe4\xb9\x88\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84ViewModel\xe5\xb0\x86\xe4\xbc\x9a\xe6\x98\xaf\xe5\x90\x8c\xe4\xb8\x80\xe4\xb8\xaa\xe5\xae\x9e\xe4\xbe\x8b\xef\xbc\x8c\xe5\x81\x9a\xe5\x88\xb0Fragment\xe4\xb8\x8eActivity\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe5\x90\x8c\xe6\xad\xa5,\n     * \xe6\x88\x96\xe8\x80\x85\xe8\xaf\xb4\xe6\x98\xaf\xe5\x90\x8c\xe4\xb8\x80\xe4\xb8\xaaActivity\xe4\xb8\xad\xe7\x9a\x84\xe5\xa4\x9a\xe4\xb8\xaaFragment\xe5\x90\x8c\xe6\xad\xa5\xe4\xbd\xbf\xe7\x94\xa8\xe7\x94\xa8\xe4\xb8\x80\xe4\xb8\xaaViewModel\xe8\xbe\xbe\xe5\x88\xb0\xe6\x95\xb0\xe6\x8d\xae\xe4\xb9\x8b\xe9\x97\xb4\xe7\x9a\x84\xe5\x90\x8c\xe6\xad\xa5\xe3\x80\x82\n     *\n     * @param <VM>     ViewModel\xe5\xae\x9e\xe7\x8e\xb0\xe7\xb1\xbb\n     * @param aClass   \xe5\xbd\x93\xe5\x89\x8dclass\n     * @param fragment fragment  \xe8\xb0\x83\xe7\x94\xa8 [Fragment.requireActivity] \xe6\x96\xb9\xe6\xb3\x95\n     * @return ViewModel\xe5\xae\x9e\xe4\xbe\x8b\n    </VM> */\n    fun <VM : ViewModel> reflexViewModelShared(aClass: Class<*>, fragment: Fragment): VM {\n        try {\n            val actualTypeArguments =\n                (Objects.requireNonNull(aClass.genericSuperclass) as ParameterizedType).actualTypeArguments\n            for (i in actualTypeArguments.indices) {\n                val tClass: Class<Any>\n                try {\n                    tClass = actualTypeArguments[i] as Class<Any>\n                } catch (e: Exception) {\n                    continue\n                }\n                if (ViewModel::class.java.isAssignableFrom(tClass)) {\n                    return ViewModelProvider(fragment.requireActivity())[tClass as Class<VM>]\n                }\n            }\n            return reflexViewModelShared<VM>(aClass.superclass, fragment)\n        } catch (e: Exception) {\n            e.printStackTrace()\n        }\n        throw RuntimeException("ViewModel\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe5\xa4\xb1\xe8\xb4\xa5")\n    }\n}'