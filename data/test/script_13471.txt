b'const int N = 20;\nvector<int> g[N];\nusing path = vector<int>;\nset<path> get_all_paths(int src, int tar) {\n    // cout << src << endl;\n    if(src == tar) return { {tar} };\n    set<path> ans = {};\n    for(int v: g[src]) {\n        auto rem_paths = get_all_paths(v, tar);\n        for (path p: rem_paths) {\n            p.push_back(src);\n            ans.insert(p);\n        }\n    }\n    return ans;\n}\n\n\nclass Solution {\n    \npublic:\n    \n    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {\n        // paths from 0 to 4\n        // iterate on children v of 0\n        // find paths from child v to 4\n        // [0,1,3,4]\n        int n = graph.size();\n        \n        if(n == 0) return {};\n        for(int i = 0; i < n; i++) g[i].clear();\n        \n        for(int i = 0; i < n; i++) {\n            for(int v: graph[i]) {\n                g[i].push_back(v);\n            }\n        }\n        \n        vector<path> ans = {};\n        set<path> paths = get_all_paths(0, n-1);\n        \n        \n        // O(# of paths * avg_size of path)\n        for(auto p: paths) {\n            reverse(p.begin(), p.end());\n            ans.push_back(p);\n        }\n        \n        return ans;\n    }\n};\n'