b'\xef\xbb\xbfusing Asn1;\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace Rubeus\n{\n    //PA-FOR-USER-ENC ::= SEQUENCE {\n\t   // userName[0] PrincipalName,\n\t   // userRealm[1] Realm,\n\t   // cksum[2] Checksum,\n\t   // auth-package[3] KerberosString\n    //}\n\n    public class PA_FOR_USER\n    {\n        public PA_FOR_USER(byte[] key, string name, string realm)\n        {\n            userName = new PrincipalName(name);\n            userName.name_type = Interop.PRINCIPAL_TYPE.NT_ENTERPRISE;\n            userRealm = realm;\n\n            // now build the checksum\n\n            auth_package = "Kerberos";\n\n            byte[] nameTypeBytes = new byte[4];\n            nameTypeBytes[0] = 0xa;\n\n            byte[] nameBytes = Encoding.UTF8.GetBytes(name);\n            byte[] realmBytes = Encoding.UTF8.GetBytes(userRealm);\n            byte[] authPackageBytes = Encoding.UTF8.GetBytes(auth_package);\n\n            byte[] finalBytes = new byte[nameTypeBytes.Length + nameBytes.Length + realmBytes.Length + authPackageBytes.Length];\n\n            Array.Copy(nameTypeBytes, 0, finalBytes, 0, nameTypeBytes.Length);\n            Array.Copy(nameBytes, 0, finalBytes, nameTypeBytes.Length, nameBytes.Length);\n            Array.Copy(realmBytes, 0, finalBytes, nameTypeBytes.Length + nameBytes.Length, realmBytes.Length);\n            Array.Copy(authPackageBytes, 0, finalBytes, nameTypeBytes.Length + nameBytes.Length + realmBytes.Length, authPackageBytes.Length);\n\n            byte[] outBytes = Crypto.KerberosChecksum(key, finalBytes);\n\n            Checksum checksum = new Checksum(outBytes);\n\n            cksum = checksum;\n        }\n\n        public AsnElt Encode()\n        {\n            List<AsnElt> allNodes = new List<AsnElt>();\n\n            // userName[0] PrincipalName\n            AsnElt userNameAsn = userName.Encode();\n            userNameAsn = AsnElt.MakeImplicit(AsnElt.CONTEXT, 0, userNameAsn);\n            allNodes.Add(userNameAsn);\n\n            // userRealm[1] Realm\n            AsnElt userRealmAsn = AsnElt.MakeString(AsnElt.IA5String, userRealm);\n            userRealmAsn = AsnElt.MakeImplicit(AsnElt.UNIVERSAL, AsnElt.GeneralString, userRealmAsn);\n            AsnElt userRealmSeq = AsnElt.Make(AsnElt.SEQUENCE, new[] { userRealmAsn });\n            userRealmSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 1, userRealmSeq);\n            allNodes.Add(userRealmSeq);\n\n            // cksum[2] Checksum\n            AsnElt checksumAsn = cksum.Encode();\n            checksumAsn = AsnElt.MakeImplicit(AsnElt.CONTEXT, 2, checksumAsn);\n            allNodes.Add(checksumAsn);\n\n            // auth-package[3] KerberosString\n            AsnElt auth_packageAsn = AsnElt.MakeString(AsnElt.IA5String, auth_package);\n            auth_packageAsn = AsnElt.MakeImplicit(AsnElt.UNIVERSAL, AsnElt.GeneralString, auth_packageAsn);\n            AsnElt auth_packageSeq = AsnElt.Make(AsnElt.SEQUENCE, new[] { auth_packageAsn });\n            auth_packageSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 3, auth_packageSeq);\n            allNodes.Add(auth_packageSeq);\n\n\n            // package it all up\n            AsnElt seq = AsnElt.Make(AsnElt.SEQUENCE, allNodes.ToArray());\n\n\n            // tag the final total\n            //AsnElt final = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] { seq });\n            //final = AsnElt.MakeImplicit(AsnElt.APPLICATION, 2, final);\n\n            return seq;\n        }\n\n        public PrincipalName userName { get; set; }\n\n        public string userRealm { get; set; }\n\n        public Checksum cksum { get; set; }\n\n        public string auth_package { get; set; }\n    }\n}'