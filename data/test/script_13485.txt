b'\xef\xbb\xbfusing System;\nusing Asn1;\nusing System.Collections.Generic;\n\nnamespace Rubeus\n{\n    //EncKrbCredPart  ::= [APPLICATION 29] SEQUENCE {\n    //        ticket-info     [0] SEQUENCE OF KrbCredInfo,\n    //        nonce           [1] UInt32 OPTIONAL,\n    //        timestamp       [2] KerberosTime OPTIONAL,\n    //        usec            [3] Microseconds OPTIONAL,\n    //        s-address       [4] HostAddress OPTIONAL,\n    //        r-address       [5] HostAddress OPTIONAL\n    //}\n\n    public class EncKrbCredPart\n    {\n        public EncKrbCredPart()\n        {\n            // TODO: defaults for creation\n            ticket_info = new List<KrbCredInfo>();\n        }\n\n        public EncKrbCredPart(AsnElt body)\n        {\n            ticket_info = new List<KrbCredInfo>();\n\n            byte[] octetString = body.Sub[1].Sub[0].GetOctetString();\n            AsnElt body2 = AsnElt.Decode(octetString, false);\n\n            // assume only one KrbCredInfo for now\n            KrbCredInfo info = new KrbCredInfo(body2.Sub[0].Sub[0].Sub[0].Sub[0]);\n            ticket_info.Add(info);\n        }\n\n        public AsnElt Encode()\n        {\n            // ticket-info     [0] SEQUENCE OF KrbCredInfo\n            //  assume just one ticket-info for now\n            //  TODO: handle multiple ticket-infos\n            AsnElt infoAsn = ticket_info[0].Encode();\n            AsnElt seq1 = AsnElt.Make(AsnElt.SEQUENCE, new[] { infoAsn });\n            AsnElt seq2 = AsnElt.Make(AsnElt.SEQUENCE, new[] { seq1 });\n            seq2 = AsnElt.MakeImplicit(AsnElt.CONTEXT, 0, seq2);\n\n            AsnElt totalSeq = AsnElt.Make(AsnElt.SEQUENCE, new[] { seq2 });\n            AsnElt totalSeq2 = AsnElt.Make(AsnElt.SEQUENCE, new[] { totalSeq });\n            totalSeq2 = AsnElt.MakeImplicit(AsnElt.APPLICATION, 29, totalSeq2);\n\n            return totalSeq2;\n        }\n\n        public List<KrbCredInfo> ticket_info { get; set; }\n\n        // other fields are optional/not used in our use cases\n    }\n}'