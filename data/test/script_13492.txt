b'/*\n * Copyright (C) 2015 Naman Dwivedi\n *\n * Licensed under the GNU General Public License v3\n *\n * This is free software: you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n */\n\npackage com.naman14.timber.utils;\n\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.content.SharedPreferences.OnSharedPreferenceChangeListener;\nimport android.net.ConnectivityManager;\nimport android.net.NetworkInfo;\nimport android.os.Bundle;\nimport android.os.Environment;\nimport android.preference.PreferenceManager;\n\nimport com.naman14.timber.MusicPlayer;\nimport com.naman14.timber.MusicService;\n\npublic final class PreferencesUtility {\n\n    public static final String ARTIST_SORT_ORDER = "artist_sort_order";\n    public static final String ARTIST_SONG_SORT_ORDER = "artist_song_sort_order";\n    public static final String ARTIST_ALBUM_SORT_ORDER = "artist_album_sort_order";\n    public static final String ALBUM_SORT_ORDER = "album_sort_order";\n    public static final String ALBUM_SONG_SORT_ORDER = "album_song_sort_order";\n    public static final String SONG_SORT_ORDER = "song_sort_order";\n    private static final String NOW_PLAYING_SELECTOR = "now_paying_selector";\n    private static final String TOGGLE_ANIMATIONS = "toggle_animations";\n    private static final String TOGGLE_SYSTEM_ANIMATIONS = "toggle_system_animations";\n    private static final String TOGGLE_ARTIST_GRID = "toggle_artist_grid";\n    private static final String TOGGLE_ALBUM_GRID = "toggle_album_grid";\n    private static final String TOGGLE_PLAYLIST_VIEW = "toggle_playlist_view";\n    private static final String TOGGLE_SHOW_AUTO_PLAYLIST = "toggle_show_auto_playlist";\n    private static final String LAST_FOLDER = "last_folder";\n\n    private static final String TOGGLE_HEADPHONE_PAUSE = "toggle_headphone_pause";\n    private static final String THEME_PREFERNCE = "theme_preference";\n    private static final String START_PAGE_INDEX = "start_page_index";\n    private static final String START_PAGE_PREFERENCE_LASTOPENED = "start_page_preference_latopened";\n    private static final String NOW_PLAYNG_THEME_VALUE = "now_playing_theme_value";\n    private static final String TOGGLE_XPOSED_TRACKSELECTOR = "toggle_xposed_trackselector";\n    public static final String LAST_ADDED_CUTOFF = "last_added_cutoff";\n    public static final String GESTURES = "gestures";\n\n    public static final String FULL_UNLOCKED = "full_version_unlocked";\n\n    private static final String SHOW_LOCKSCREEN_ALBUMART = "show_albumart_lockscreen";\n    private static final String ARTIST_ALBUM_IMAGE = "artist_album_image";\n    private static final String ARTIST_ALBUM_IMAGE_MOBILE = "artist_album_image_mobile";\n    private static final String ALWAYS_LOAD_ALBUM_IMAGES_LASTFM = "always_load_album_images_lastfm";\n\n    private static PreferencesUtility sInstance;\n\n    private static SharedPreferences mPreferences;\n    private static Context context;\n    private ConnectivityManager connManager = null;\n\n    public PreferencesUtility(final Context context) {\n        this.context = context;\n        mPreferences = PreferenceManager.getDefaultSharedPreferences(context);\n    }\n\n    public static final PreferencesUtility getInstance(final Context context) {\n        if (sInstance == null) {\n            sInstance = new PreferencesUtility(context.getApplicationContext());\n        }\n        return sInstance;\n    }\n\n\n    public void setOnSharedPreferenceChangeListener(OnSharedPreferenceChangeListener listener) {\n        mPreferences.registerOnSharedPreferenceChangeListener(listener);\n    }\n\n    public boolean isArtistsInGrid() {\n        return mPreferences.getBoolean(TOGGLE_ARTIST_GRID, true);\n    }\n\n    public void setArtistsInGrid(final boolean b) {\n        final SharedPreferences.Editor editor = mPreferences.edit();\n        editor.putBoolean(TOGGLE_ARTIST_GRID, b);\n        editor.apply();\n    }\n\n    public boolean isAlbumsInGrid() {\n        return mPreferences.getBoolean(TOGGLE_ALBUM_GRID, true);\n    }\n\n    public void setAlbumsInGrid(final boolean b) {\n        final SharedPreferences.Editor editor = mPreferences.edit();\n        editor.putBoolean(TOGGLE_ALBUM_GRID, b);\n        editor.apply();\n    }\n\n    public boolean pauseEnabledOnDetach() {\n        return mPreferences.getBoolean(TOGGLE_HEADPHONE_PAUSE, true);\n    }\n\n    public String getTheme() {\n        return mPreferences.getString(THEME_PREFERNCE, "light");\n    }\n\n    public int getStartPageIndex() {\n        return mPreferences.getInt(START_PAGE_INDEX, 0);\n    }\n\n    public void setStartPageIndex(final int index) {\n        final SharedPreferences.Editor editor = mPreferences.edit();\n        editor.putInt(START_PAGE_INDEX, index);\n        editor.apply();\n    }\n\n    public void setLastOpenedAsStartPagePreference(boolean preference) {\n        final SharedPreferences.Editor editor = mPreferences.edit();\n        editor.putBoolean(START_PAGE_PREFERENCE_LASTOPENED, preference);\n        editor.apply();\n    }\n\n    public boolean lastOpenedIsStartPagePreference() {\n        return mPreferences.getBoolean(START_PAGE_PREFERENCE_LASTOPENED, true);\n    }\n\n    private void setSortOrder(final String key, final String value) {\n        final SharedPreferences.Editor editor = mPreferences.edit();\n        editor.putString(key, value);\n        editor.apply();\n    }\n\n    public final String getArtistSortOrder() {\n        return mPreferences.getString(ARTIST_SORT_ORDER, SortOrder.ArtistSortOrder.ARTIST_A_Z);\n    }\n\n    public void setArtistSortOrder(final String value) {\n        setSortOrder(ARTIST_SORT_ORDER, value);\n    }\n\n    public final String getArtistSongSortOrder() {\n        return mPreferences.getString(ARTIST_SONG_SORT_ORDER,\n                SortOrder.ArtistSongSortOrder.SONG_A_Z);\n    }\n\n    public void setArtistSongSortOrder(final String value) {\n        setSortOrder(ARTIST_SONG_SORT_ORDER, value);\n    }\n\n    public final String getArtistAlbumSortOrder() {\n        return mPreferences.getString(ARTIST_ALBUM_SORT_ORDER,\n                SortOrder.ArtistAlbumSortOrder.ALBUM_A_Z);\n    }\n\n    public void setArtistAlbumSortOrder(final String value) {\n        setSortOrder(ARTIST_ALBUM_SORT_ORDER, value);\n    }\n\n    public final String getAlbumSortOrder() {\n        return mPreferences.getString(ALBUM_SORT_ORDER, SortOrder.AlbumSortOrder.ALBUM_A_Z);\n    }\n\n    public void setAlbumSortOrder(final String value) {\n        setSortOrder(ALBUM_SORT_ORDER, value);\n    }\n\n    public final String getAlbumSongSortOrder() {\n        return mPreferences.getString(ALBUM_SONG_SORT_ORDER,\n                SortOrder.AlbumSongSortOrder.SONG_TRACK_LIST);\n    }\n\n    public void setAlbumSongSortOrder(final String value) {\n        setSortOrder(ALBUM_SONG_SORT_ORDER, value);\n    }\n\n    public final String getSongSortOrder() {\n        return mPreferences.getString(SONG_SORT_ORDER, SortOrder.SongSortOrder.SONG_A_Z);\n    }\n\n    public void setSongSortOrder(final String value) {\n        setSortOrder(SONG_SORT_ORDER, value);\n    }\n\n    public final boolean didNowplayingThemeChanged() {\n        return mPreferences.getBoolean(NOW_PLAYNG_THEME_VALUE, false);\n    }\n\n    public void setNowPlayingThemeChanged(final boolean value) {\n        final SharedPreferences.Editor editor = mPreferences.edit();\n        editor.putBoolean(NOW_PLAYNG_THEME_VALUE, value);\n        editor.apply();\n    }\n\n    public boolean getXPosedTrackselectorEnabled() {\n        return mPreferences.getBoolean(TOGGLE_XPOSED_TRACKSELECTOR, false);\n    }\n\n    public int getPlaylistView() {\n        return mPreferences.getInt(TOGGLE_PLAYLIST_VIEW ,0);\n    }\n\n    public void setPlaylistView(final int i) {\n        final SharedPreferences.Editor editor = mPreferences.edit();\n        editor.putInt(TOGGLE_PLAYLIST_VIEW, i);\n        editor.apply();\n    }\n\n    public boolean showAutoPlaylist() {\n        return mPreferences.getBoolean(TOGGLE_SHOW_AUTO_PLAYLIST, true);\n    }\n\n    public void setToggleShowAutoPlaylist(final boolean b) {\n        final SharedPreferences.Editor editor = mPreferences.edit();\n        editor.putBoolean(TOGGLE_SHOW_AUTO_PLAYLIST, b);\n        editor.apply();\n    }\n\n    /** @parm lastAddedMillis timestamp in millis used as a cutoff for last added playlist */\n    public void setLastAddedCutoff(long lastAddedMillis) {\n        mPreferences.edit().putLong(LAST_ADDED_CUTOFF, lastAddedMillis).apply();\n    }\n\n    public long getLastAddedCutoff() {\n        return mPreferences.getLong(LAST_ADDED_CUTOFF, 0L);\n    }\n\n    public boolean isGesturesEnabled() {\n        return mPreferences.getBoolean(GESTURES, true);\n    }\n\n    public void storeLastFolder(String path) {\n        SharedPreferences.Editor editor = mPreferences.edit();\n        editor.putString(LAST_FOLDER, path);\n        editor.apply();\n    }\n\n    public String getLastFolder() {\n        return mPreferences.getString(LAST_FOLDER, Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MUSIC).getPath());\n    }\n\n    public boolean fullUnlocked() {\n        return mPreferences.getBoolean(FULL_UNLOCKED, false);\n    }\n\n    public void setFullUnlocked(final boolean b) {\n        final SharedPreferences.Editor editor = mPreferences.edit();\n        editor.putBoolean(FULL_UNLOCKED, b);\n        editor.apply();\n    }\n\n    public boolean getSetAlbumartLockscreen() {\n        return mPreferences.getBoolean(SHOW_LOCKSCREEN_ALBUMART, true);\n    }\n\n    public void updateService(Bundle extras) {\n        if(!MusicPlayer.isPlaybackServiceConnected())return;\n        final Intent intent = new Intent(context, MusicService.class);\n        intent.setAction(MusicService.UPDATE_PREFERENCES);\n        intent.putExtras(extras);\n        context.startService(intent);\n    }\n\n    public boolean loadArtistAndAlbumImages() {\n        if (mPreferences.getBoolean(ARTIST_ALBUM_IMAGE, true)) {\n            if (!mPreferences.getBoolean(ARTIST_ALBUM_IMAGE_MOBILE, true)) {\n                if (connManager == null) connManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\n                NetworkInfo ni = connManager.getActiveNetworkInfo();\n                return ni != null && ni.getType() == ConnectivityManager.TYPE_WIFI;\n            }\n            return true;\n        }\n        return false;\n    }\n\n    public boolean alwaysLoadAlbumImagesFromLastfm() {\n        return mPreferences.getBoolean(ALWAYS_LOAD_ALBUM_IMAGES_LASTFM, false);\n    }\n}\n\n'