b'/*\n * Copyright (C) 2015 Naman Dwivedi\n *\n * Licensed under the GNU General Public License v3\n *\n * This is free software: you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n */\n\npackage com.naman14.timber.adapters;\n\nimport android.app.Activity;\nimport android.os.Handler;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.recyclerview.widget.RecyclerView;\nimport android.view.LayoutInflater;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.ImageView;\nimport android.widget.PopupMenu;\nimport android.widget.TextView;\n\nimport com.naman14.timber.MusicPlayer;\nimport com.naman14.timber.R;\nimport com.naman14.timber.dialogs.AddPlaylistDialog;\nimport com.naman14.timber.lastfmapi.LastFmClient;\nimport com.naman14.timber.lastfmapi.callbacks.ArtistInfoListener;\nimport com.naman14.timber.lastfmapi.models.ArtistQuery;\nimport com.naman14.timber.lastfmapi.models.LastfmArtist;\nimport com.naman14.timber.models.Album;\nimport com.naman14.timber.models.Artist;\nimport com.naman14.timber.models.Song;\nimport com.naman14.timber.utils.NavigationUtils;\nimport com.naman14.timber.utils.TimberUtils;\nimport com.nostra13.universalimageloader.core.DisplayImageOptions;\nimport com.nostra13.universalimageloader.core.ImageLoader;\nimport com.nostra13.universalimageloader.core.display.FadeInBitmapDisplayer;\n\nimport java.util.Collections;\nimport java.util.List;\n\npublic class SearchAdapter extends BaseSongAdapter<SearchAdapter.ItemHolder> {\n\n    private Activity mContext;\n    private List searchResults = Collections.emptyList();\n\n    public SearchAdapter(Activity context) {\n        this.mContext = context;\n\n    }\n\n    @Override\n    public ItemHolder onCreateViewHolder(ViewGroup viewGroup, int viewType) {\n        switch (viewType) {\n            case 0:\n                View v0 = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.item_song, null);\n                ItemHolder ml0 = new ItemHolder(v0);\n                return ml0;\n            case 1:\n                View v1 = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.item_album_search, null);\n                ItemHolder ml1 = new ItemHolder(v1);\n                return ml1;\n            case 2:\n                View v2 = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.item_artist, null);\n                ItemHolder ml2 = new ItemHolder(v2);\n                return ml2;\n            case 10:\n                View v10 = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.search_section_header, null);\n                ItemHolder ml10 = new ItemHolder(v10);\n                return ml10;\n            default:\n                View v3 = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.item_song, null);\n                ItemHolder ml3 = new ItemHolder(v3);\n                return ml3;\n        }\n    }\n\n    @Override\n    public void onBindViewHolder(final ItemHolder itemHolder, int i) {\n        switch (getItemViewType(i)) {\n            case 0:\n                Song song = (Song) searchResults.get(i);\n                itemHolder.title.setText(song.title);\n                itemHolder.songartist.setText(song.albumName);\n                ImageLoader.getInstance().displayImage(TimberUtils.getAlbumArtUri(song.albumId).toString(), itemHolder.albumArt,\n                        new DisplayImageOptions.Builder().cacheInMemory(true)\n                                .cacheOnDisk(true)\n                                .showImageOnFail(R.drawable.ic_empty_music2)\n                                .resetViewBeforeLoading(true)\n                                .displayer(new FadeInBitmapDisplayer(400))\n                                .build());\n                setOnPopupMenuListener(itemHolder, i);\n                break;\n            case 1:\n                Album album = (Album) searchResults.get(i);\n                itemHolder.albumtitle.setText(album.title);\n                itemHolder.albumartist.setText(album.artistName);\n                ImageLoader.getInstance().displayImage(TimberUtils.getAlbumArtUri(album.id).toString(), itemHolder.albumArt,\n                        new DisplayImageOptions.Builder().cacheInMemory(true)\n                                .cacheOnDisk(true)\n                                .showImageOnFail(R.drawable.ic_empty_music2)\n                                .resetViewBeforeLoading(true)\n                                .displayer(new FadeInBitmapDisplayer(400))\n                                .build());\n                break;\n            case 2:\n                Artist artist = (Artist) searchResults.get(i);\n                itemHolder.artisttitle.setText(artist.name);\n                String albumNmber = TimberUtils.makeLabel(mContext, R.plurals.Nalbums, artist.albumCount);\n                String songCount = TimberUtils.makeLabel(mContext, R.plurals.Nsongs, artist.songCount);\n                itemHolder.albumsongcount.setText(TimberUtils.makeCombinedString(mContext, albumNmber, songCount));\n                LastFmClient.getInstance(mContext).getArtistInfo(new ArtistQuery(artist.name), new ArtistInfoListener() {\n                    @Override\n                    public void artistInfoSucess(LastfmArtist artist) {\n                        if (artist != null && itemHolder.artistImage != null) {\n                            ImageLoader.getInstance().displayImage(artist.mArtwork.get(1).mUrl, itemHolder.artistImage,\n                                    new DisplayImageOptions.Builder().cacheInMemory(true)\n                                            .cacheOnDisk(true)\n                                            .showImageOnFail(R.drawable.ic_empty_music2)\n                                            .resetViewBeforeLoading(true)\n                                            .displayer(new FadeInBitmapDisplayer(400))\n                                            .build());\n                        }\n                    }\n\n                    @Override\n                    public void artistInfoFailed() {\n\n                    }\n                });\n                break;\n            case 10:\n                itemHolder.sectionHeader.setText((String) searchResults.get(i));\n            case 3:\n                break;\n        }\n    }\n\n    @Override\n    public void onViewRecycled(ItemHolder itemHolder) {\n\n    }\n\n    @Override\n    public int getItemCount() {\n        return searchResults.size();\n    }\n\n    private void setOnPopupMenuListener(ItemHolder itemHolder, final int position) {\n\n        itemHolder.menu.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n\n                final PopupMenu menu = new PopupMenu(mContext, v);\n                menu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {\n                    @Override\n                    public boolean onMenuItemClick(MenuItem item) {\n                        long[] song = new long[1];\n                        song[0] = ((Song) searchResults.get(position)).id;\n                        switch (item.getItemId()) {\n                            case R.id.popup_song_play:\n                                MusicPlayer.playAll(mContext, song, 0, -1, TimberUtils.IdType.NA, false);\n                                break;\n                            case R.id.popup_song_play_next:\n                                MusicPlayer.playNext(mContext, song, -1, TimberUtils.IdType.NA);\n                                break;\n                            case R.id.popup_song_goto_album:\n                                NavigationUtils.navigateToAlbum(mContext, ((Song) searchResults.get(position)).albumId, null);\n                                break;\n                            case R.id.popup_song_goto_artist:\n                                NavigationUtils.navigateToArtist(mContext, ((Song) searchResults.get(position)).artistId, null);\n                                break;\n                            case R.id.popup_song_addto_queue:\n                                MusicPlayer.addToQueue(mContext, song, -1, TimberUtils.IdType.NA);\n                                break;\n                            case R.id.popup_song_addto_playlist:\n                                AddPlaylistDialog.newInstance(((Song) searchResults.get(position))).show(((AppCompatActivity) mContext).getSupportFragmentManager(), "ADD_PLAYLIST");\n                                break;\n                        }\n                        return false;\n                    }\n                });\n                menu.inflate(R.menu.popup_song);\n                //Hide these because they aren\'t implemented\n                menu.getMenu().findItem(R.id.popup_song_delete).setVisible(false);\n                menu.getMenu().findItem(R.id.popup_song_share).setVisible(false);\n                menu.show();\n            }\n        });\n    }\n\n    @Override\n    public int getItemViewType(int position) {\n        if (searchResults.get(position) instanceof Song)\n            return 0;\n        if (searchResults.get(position) instanceof Album)\n            return 1;\n        if (searchResults.get(position) instanceof Artist)\n            return 2;\n        if (searchResults.get(position) instanceof String)\n            return 10;\n        return 3;\n    }\n\n    public void updateSearchResults(List searchResults) {\n        this.searchResults = searchResults;\n    }\n\n    public class ItemHolder extends RecyclerView.ViewHolder implements View.OnClickListener {\n        protected TextView title, songartist, albumtitle, artisttitle, albumartist, albumsongcount, sectionHeader;\n        protected ImageView albumArt, artistImage, menu;\n\n        public ItemHolder(View view) {\n            super(view);\n\n            this.title = (TextView) view.findViewById(R.id.song_title);\n            this.songartist = (TextView) view.findViewById(R.id.song_artist);\n            this.albumsongcount = (TextView) view.findViewById(R.id.album_song_count);\n            this.artisttitle = (TextView) view.findViewById(R.id.artist_name);\n            this.albumtitle = (TextView) view.findViewById(R.id.album_title);\n            this.albumartist = (TextView) view.findViewById(R.id.album_artist);\n            this.albumArt = (ImageView) view.findViewById(R.id.albumArt);\n            this.artistImage = (ImageView) view.findViewById(R.id.artistImage);\n            this.menu = (ImageView) view.findViewById(R.id.popup_menu);\n\n            this.sectionHeader = (TextView) view.findViewById(R.id.section_header);\n\n\n            view.setOnClickListener(this);\n        }\n\n        @Override\n        public void onClick(View v) {\n            switch (getItemViewType()) {\n                case 0:\n                    final Handler handler = new Handler();\n                    handler.postDelayed(new Runnable() {\n                        @Override\n                        public void run() {\n                            long[] ret = new long[1];\n                            ret[0] = ((Song) searchResults.get(getAdapterPosition())).id;\n                            playAll(mContext, ret, 0, -1, TimberUtils.IdType.NA,\n                                    false, (Song) searchResults.get(getAdapterPosition()), false);\n                        }\n                    }, 100);\n\n                    break;\n                case 1:\n                    NavigationUtils.goToAlbum(mContext, ((Album) searchResults.get(getAdapterPosition())).id);\n                    break;\n                case 2:\n                    NavigationUtils.goToArtist(mContext, ((Artist) searchResults.get(getAdapterPosition())).id);\n                    break;\n                case 3:\n                    break;\n                case 10:\n                    break;\n            }\n        }\n\n    }\n}\n\n\n\n\n\n'