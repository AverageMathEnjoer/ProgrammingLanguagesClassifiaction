b'\xef\xbb\xbfusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Net;\nusing System.Text;\nusing System.Web.Script.Serialization;\n\nnamespace Aerial\n{\n    // Parses http://a1.phobos.apple.com/us/r1000/000/Features/atv/AutumnResources/videos/entries.json\n    public class AerialContext\n    {\n        static IdAsset[] cachedEntities;\n        static List<Asset> cachedPlaylist;\n\n        public static List<Asset> GetMovies()\n        {\n            var urls = GetAllEntries();\n\n            return FilterEntries(urls);\n        }\n        public static List<Asset> GetAllMovies()\n        {\n            //if no Entries, just return an empty list\n            if (GetAllEntries() == null) { return new List<Asset>(); }\n\n            return GetAllEntries().SelectMany(s => s.assets).ToList();\n        }\n\n        private static List<Asset> FilterEntries(IdAsset[] urls)\n        {\n            if (urls == null) { return new List<Asset>(); }; //if no URLS, return an empty list\n\n            var time = (DateTime.Now.Hour < 6 || DateTime.Now.Hour > 19) ? "night" : "day";\n            var ran = new Random();\n            var settings = new RegSettings();\n            List<Asset> links = urls.SelectMany(s => s.assets)\n                .Where(t => AssetSelected(t)) //only return videos that have been selected to be played\n                .OrderBy(t => ran.Next()) // randomize\n                .OrderByDescending(t => settings.UseTimeOfDay && t.timeOfDay == time)\n                .ToList();\n\n            //If the links list is empty or null for some reason, just populate with all movies\n            if (links == null || links.Count == 0)\n            {\n                links = urls.SelectMany(s => s.assets).ToList();\n            }\n\n            if (settings.MultiMonitorMode == RegSettings.MultiMonitorModeEnum.DifferentVideos)\n                return links;\n\n            if (cachedPlaylist == null)\n                cachedPlaylist = links;\n\n            return cachedPlaylist;\n        }\n\n        public static IdAsset[] GetAllEntries()\n        {\n            if (cachedEntities != null) return cachedEntities;\n\n            var settings = new RegSettings();\n            var aerialUrl = settings.JsonURL;\n#if OFFLINE\n            aerialUrl = "http://BOGUS/entries.json";\n#endif\n\n            // update anyway\n            Caching.StartDelayedCache(aerialUrl);\n\n            string entries = "";\n            if (Caching.IsHit(aerialUrl)) {\n                entries = File.ReadAllText(Caching.Get(aerialUrl));\n            } else {\n                WebClient webClient = new WebClient();\n                entries = webClient.DownloadString(aerialUrl);\n            }\n\n            try\n            {\n                cachedEntities = new JavaScriptSerializer().Deserialize<IdAsset[]>(entries);\n            }\n            catch (ArgumentException e)\n            {\n                //the passed in entities document is invalid.\n                return null;\n            }\n\n\n            return cachedEntities;\n        }\n\n        /**\n         * Returns true if the asset (movie) is in the chosen movies in the registry key, false if it isn\'t \n         */\n        private static bool AssetSelected(Asset a)\n        {\n            var settings = new RegSettings();\n\n            //if no movies are selected to be played, just allow all\n            if(String.IsNullOrEmpty(settings.ChosenMovies))\n            {\n                return true;\n            }\n\n            var selected = new RegSettings().ChosenMovies.Split(\';\').ToList();\n            List<string> selectedIds = selected.Select(s => GetIdFromTimeAndIdNumbered(s)).ToList(); ;\n\n            return selectedIds.Contains(a.id);\n\n        }\n\n        /*\n         * Parses the ID from the TimeAndIdNumbered string. Expecting the ID to be between parenthasis ex: China/day 1 (b4-1)\n         * Added the ID to the node for the movie filtering\n         */\n        public static string GetIdFromTimeAndIdNumbered(string TimeAndId)\n        {\n            var splitString = TimeAndId.Split(\'(\', \')\');\n\n            if (splitString.Length > 1)\n            {\n                return splitString[1];\n            } else\n            {\n                return "NO ID IN STRING";\n            }\n        }\n    }\n\n    public class IdAsset\n    {\n        public string id;\n        public Asset[] assets;\n    }\n\n    public class Asset : IComparable<Asset>\n    {\n        public string url;//" : "http://a1.phobos.apple.com/us/r1000/000/Features/atv/AutumnResources/videos/b1-1.mov",\n        public string accessibilityLabel;//" : "Hawaii",\n        public string type;//" : "video",\n        public string id;// : "b1-1",\n        public string timeOfDay;//" : "day"\n\n        [NonSerialized]\n        internal int numeric = 0;\n        \n        public override string ToString()\n        {\n            return accessibilityLabel + (numeric == 0 ? "" : " " + numeric) + " " + timeOfDay + "";\n        }\n        public string ShortName()\n        {\n            return accessibilityLabel + " \xe2\x80\x94 " + timeOfDay;\n        }\n        public string ToFullName()\n        {\n            return accessibilityLabel + " \xe2\x80\x94 " + timeOfDay + " (" + id + ")";\n        }\n        public string TimeNumbered()\n        {\n            return timeOfDay + (numeric == 0 ? "" : " " + numeric);\n        }\n\n        public string TimeAndIdNumbered()\n        {\n            return timeOfDay + (numeric == 0 ? "" : " " + numeric) + " (" + id + ")";\n        }\n\n        public int CompareTo(Asset other)\n        {\n            if (other == null) return 1;\n            if (other == this) return 0;\n            return NativeMethods.StrCmpLogicalW(ToFullName(), other.ToFullName());\n        }\n    }\n}\n'