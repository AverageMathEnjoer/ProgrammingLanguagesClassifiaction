b'\xef\xbb\xbfusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing Asn1;\n\nnamespace Rubeus\n{\n    /* PA-PAC-OPTIONS ::= SEQUENCE {\n        KerberosFlags\n        -- Claims(0)\n        -- Branch Aware(1)\n        -- Forward to Full DC(2)\n        -- Resource-based Constrained Delegation (3)\n       }\n    */\n\n    public class PA_PAC_OPTIONS\n    {\n        public byte[] kerberosFlags { get; set; }\n        public PA_PAC_OPTIONS(bool claims, bool branch, bool fullDC, bool rbcd)\n        {\n            kerberosFlags = new byte[4] { 0, 0, 0, 0 };\n            if (claims) kerberosFlags[0] = (byte)(kerberosFlags[0] | 8);\n            if (branch) kerberosFlags[0] = (byte)(kerberosFlags[0] | 4);\n            if (fullDC) kerberosFlags[0] = (byte)(kerberosFlags[0] | 2);\n            if (rbcd) kerberosFlags[0] = (byte)(kerberosFlags[0] | 1);\n            kerberosFlags[0] = (byte)(kerberosFlags[0] * 0x10);\n        }\n\n        public AsnElt Encode()\n        {\n            List<AsnElt> allNodes = new List<AsnElt>();\n            AsnElt kerberosFlagsAsn = AsnElt.MakeBitString(kerberosFlags);\n            kerberosFlagsAsn = AsnElt.MakeImplicit(AsnElt.UNIVERSAL, AsnElt.BIT_STRING, kerberosFlagsAsn);\n            AsnElt parent = AsnElt.MakeExplicit(0, kerberosFlagsAsn);\n            allNodes.Add(parent);\n            AsnElt seq = AsnElt.Make(AsnElt.SEQUENCE, allNodes.ToArray());\n            return seq;\n        }\n    }\n}\n'