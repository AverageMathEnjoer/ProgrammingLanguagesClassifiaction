b'// Listing 15.1\ntype FootballResult = { HomeTeam : string; AwayTeam : string; HomeGoals : int; AwayGoals : int }\nlet create (ht, hg) (at, ag) = { HomeTeam = ht; AwayTeam = at; HomeGoals = hg; AwayGoals = ag }\nlet results =\n    [ create ("Messiville", 1) ("Ronaldo City", 2)\n      create ("Messiville", 1) ("Bale Town", 3)\n      create ("Bale Town", 3) ("Ronaldo City", 1)\n      create ("Bale Town", 2) ("Messiville", 1)\n      create ("Ronaldo City", 4) ("Messiville", 2)\n      create ("Ronaldo City", 1) ("Bale Town", 2) ]\n\n// Listing 15.2\nopen System.Collections.Generic\n\ntype TeamSummary = { Name : string; mutable AwayWins : int }\nlet summary = ResizeArray()\n\nfor result in results do\n    if result.AwayGoals > result.HomeGoals then\n        let mutable found = false\n        for entry in summary do\n            if entry.Name = result.AwayTeam then\n                found <- true\n                entry.AwayWins <- entry.AwayWins + 1\n        if not found then\n            summary.Add { Name = result.AwayTeam; AwayWins = 1 }\n            \nlet comparer =\n    { new IComparer<TeamSummary> with\n        member this.Compare(x,y) =\n            if x.AwayWins > y.AwayWins then -1\n            elif x.AwayWins < y.AwayWins then 1\n            else 0 }\n\nsummary.Sort(comparer)\n\n// Listing 15.4\nlet isAwayWin result = result.AwayGoals > result.HomeGoals\n\nresults\n|> List.filter isAwayWin\n|> List.countBy(fun result -> result.AwayTeam)\n|> List.sortByDescending(fun (_, awayWins) -> awayWins)\n\n// Listing 15.5\nlet numbersArray = [| 1; 2; 3; 4; 6 |]\nlet firstNumber = numbersArray.[0]\nlet firstThreeNumbers = numbersArray.[0 .. 2]\nnumbersArray.[0] <- 99\n\n// Listing 15.6\nlet numbers = [ 1; 2; 3; 4; 5; 6 ]\nlet numbersQuick = [ 1 .. 6 ]\nlet head :: tail = numbers\nlet moreNumbers = 0 :: numbers\nlet evenMoreNumbers = moreNumbers @ [ 7 .. 9 ]\n'