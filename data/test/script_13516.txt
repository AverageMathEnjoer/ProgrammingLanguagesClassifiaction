b'package com.codeest.geeknews.presenter.main;\n\nimport android.Manifest;\n\nimport com.codeest.geeknews.base.RxPresenter;\nimport com.codeest.geeknews.component.RxBus;\nimport com.codeest.geeknews.model.DataManager;\nimport com.codeest.geeknews.model.bean.VersionBean;\nimport com.codeest.geeknews.model.event.NightModeEvent;\nimport com.codeest.geeknews.model.http.response.MyHttpResponse;\nimport com.codeest.geeknews.base.contract.main.MainContract;\nimport com.codeest.geeknews.util.RxUtil;\nimport com.codeest.geeknews.widget.CommonSubscriber;\nimport com.tbruyelle.rxpermissions2.RxPermissions;\n\nimport javax.inject.Inject;\n\nimport io.reactivex.annotations.NonNull;\nimport io.reactivex.functions.Consumer;\nimport io.reactivex.functions.Function;\nimport io.reactivex.functions.Predicate;\n\n/**\n * Created by codeest on 16/8/9.\n */\n\npublic class MainPresenter extends RxPresenter<MainContract.View> implements MainContract.Presenter{\n\n    private DataManager mDataManager;\n\n    @Inject\n    public MainPresenter(DataManager mDataManager) {\n        this.mDataManager = mDataManager;\n    }\n\n    @Override\n    public void attachView(MainContract.View view) {\n        super.attachView(view);\n        registerEvent();\n    }\n\n    private void registerEvent() {\n        addSubscribe(RxBus.getDefault().toFlowable(NightModeEvent.class)\n                .compose(RxUtil.<NightModeEvent>rxSchedulerHelper())\n                .map(new Function<NightModeEvent, Boolean>() {\n                    @Override\n                    public Boolean apply(NightModeEvent nightModeEvent) {\n                        return nightModeEvent.getNightMode();\n                    }\n                })\n                .subscribeWith(new CommonSubscriber<Boolean>(mView, "\xe5\x88\x87\xe6\x8d\xa2\xe6\xa8\xa1\xe5\xbc\x8f\xe5\xa4\xb1\xe8\xb4\xa5\xe3\x83\xbd(\xe2\x89\xa7\xd0\x94\xe2\x89\xa6)\xe3\x83\x8e") {\n                    @Override\n                    public void onNext(Boolean aBoolean) {\n                        mView.useNightMode(aBoolean);\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                        super.onError(e);\n                        registerEvent();\n                    }\n                })\n        );\n    }\n\n    @Override\n    public void checkVersion(final String currentVersion) {\n        addSubscribe(mDataManager.fetchVersionInfo()\n                .compose(RxUtil.<MyHttpResponse<VersionBean>>rxSchedulerHelper())\n                .compose(RxUtil.<VersionBean>handleMyResult())\n                .filter(new Predicate<VersionBean>() {\n                    @Override\n                    public boolean test(@NonNull VersionBean versionBean) throws Exception {\n                        return Integer.valueOf(currentVersion.replace(".", "")) < Integer.valueOf(versionBean.getCode().replace(".", ""));\n                    }\n                })\n                .map(new Function<VersionBean, String>() {\n                    @Override\n                    public String apply(VersionBean bean) {\n                        StringBuilder content = new StringBuilder("\xe7\x89\x88\xe6\x9c\xac\xe5\x8f\xb7: v");\n                        content.append(bean.getCode());\n                        content.append("\\r\\n");\n                        content.append("\xe7\x89\x88\xe6\x9c\xac\xe5\xa4\xa7\xe5\xb0\x8f: ");\n                        content.append(bean.getSize());\n                        content.append("\\r\\n");\n                        content.append("\xe6\x9b\xb4\xe6\x96\xb0\xe5\x86\x85\xe5\xae\xb9:\\r\\n");\n                        content.append(bean.getDes().replace("\\\\r\\\\n","\\r\\n"));\n                        return content.toString();\n                    }\n                })\n                .subscribeWith(new CommonSubscriber<String>(mView) {\n                    @Override\n                    public void onNext(String s) {\n                        mView.showUpdateDialog(s);\n                    }\n                })\n        );\n    }\n\n    @Override\n    public void checkPermissions(RxPermissions rxPermissions) {\n        addSubscribe(rxPermissions.request(Manifest.permission.WRITE_EXTERNAL_STORAGE)\n                .subscribe(new Consumer<Boolean>() {\n                    @Override\n                    public void accept(Boolean granted) {\n                        if (granted) {\n                            mView.startDownloadService();\n                        } else {\n                            mView.showErrorMsg("\xe4\xb8\x8b\xe8\xbd\xbd\xe5\xba\x94\xe7\x94\xa8\xe9\x9c\x80\xe8\xa6\x81\xe6\x96\x87\xe4\xbb\xb6\xe5\x86\x99\xe5\x85\xa5\xe6\x9d\x83\xe9\x99\x90\xe5\x93\xa6~");\n                        }\n                    }\n                })\n        );\n    }\n\n    @Override\n    public void setNightModeState(boolean b) {\n        mDataManager.setNightModeState(b);\n    }\n\n    @Override\n    public void setCurrentItem(int index) {\n        mDataManager.setCurrentItem(index);\n    }\n\n    @Override\n    public int getCurrentItem() {\n        return mDataManager.getCurrentItem();\n    }\n\n    @Override\n    public void setVersionPoint(boolean b) {\n        mDataManager.setVersionPoint(b);\n    }\n\n    @Override\n    public boolean getVersionPoint() {\n        return mDataManager.getVersionPoint();\n    }\n\n}\n'