b'{-# LANGUAGE FlexibleContexts    #-}\n{-# LANGUAGE ScopedTypeVariables #-}\nmodule DunaiExamplesExtensibleAFRP where\n\nimport Data.Functor.Identity\nimport Control.Monad.Trans.MSF.Reader\nimport Data.MonadicStreamFunction              as MSF\nimport Data.VectorSpace\n\ntype SF a b = MSF ClockInfo a b\ntype ClockInfo = Reader DTime\ntype DTime = Double\n\nintegral :: VectorSpace a Double => SF a a\nintegral = eulerSteps >>> sumFrom zeroVector\n  where\n    eulerSteps = arrM $ \\x -> asks (*^x)\n\nreactimate :: forall a b . IO (DTime, a) -> (b -> IO ()) -> SF a b -> IO ()\nreactimate sense actuate sf =\n    MSF.reactimate $ senseSF >>> sfIO >>> actuateSF\n\n  where\n\n    sfIO :: MSF IO (DTime, a) b\n    sfIO = morphS (return . runIdentity) (runReaderS sf)\n\n    senseSF :: MSF  IO () (DTime, a)\n    senseSF = arrM (\\() -> sense)\n\n    actuateSF :: MSF IO b ()\n    actuateSF = arrM actuate\n'