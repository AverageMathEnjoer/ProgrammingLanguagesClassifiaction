b'package com.bennyhuo.kotlin.coroutines\n\nimport kotlinx.coroutines.*\nimport kotlinx.coroutines.future.future\nimport kotlin.coroutines.EmptyCoroutineContext\n\nsuspend fun suspendableApi(): String {\n    if(Math.random() > 0.5) delay(1000)\n\n    return "bilibli \xe5\x85\xb3\xe6\xb3\xa8\xe6\x88\x91\xef\xbc\x9abennyhuo \xe4\xb8\x8d\xe6\x98\xaf\xe7\xae\x97\xe5\x91\xbd\xe7\x9a\x84"\n}\n\nfun futureMain() {\n    val scope = CoroutineScope(Dispatchers.IO)\n\n    scope.future {\n        suspendableApi()\n    }.join()\n        .let(::println)\n}\n\nfun main() {\n    val value = runBlocking {\n        suspendableApi()\n    }\n    println(value)\n\n    futureMain()\n}\n\n//suspend fun main() {\n//    val value = suspendableApi()\n//    println(value)\n//}'