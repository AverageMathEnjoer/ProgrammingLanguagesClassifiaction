b'/*\n * Copyright (C) 2015 Naman Dwivedi\n *\n * Licensed under the GNU General Public License v3\n *\n * This is free software: you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n */\n\npackage com.naman14.timber.dataloaders;\n\nimport android.content.Context;\nimport android.content.res.Resources;\nimport android.database.Cursor;\nimport android.net.Uri;\nimport android.provider.BaseColumns;\nimport android.provider.MediaStore;\nimport android.provider.MediaStore.Audio.PlaylistsColumns;\n\nimport com.naman14.timber.models.Playlist;\nimport com.naman14.timber.utils.TimberUtils;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class PlaylistLoader {\n\n    static ArrayList<Playlist> mPlaylistList;\n    private static Cursor mCursor;\n\n    public static List<Playlist> getPlaylists(Context context, boolean defaultIncluded) {\n\n        mPlaylistList = new ArrayList<>();\n\n        if (defaultIncluded)\n            makeDefaultPlaylists(context);\n\n        mCursor = makePlaylistCursor(context);\n\n        if (mCursor != null && mCursor.moveToFirst()) {\n            do {\n\n                final long id = mCursor.getLong(0);\n\n                final String name = mCursor.getString(1);\n\n                final int songCount = TimberUtils.getSongCountForPlaylist(context, id);\n\n                final Playlist playlist = new Playlist(id, name, songCount);\n\n                mPlaylistList.add(playlist);\n            } while (mCursor.moveToNext());\n        }\n        if (mCursor != null) {\n            mCursor.close();\n            mCursor = null;\n        }\n        return mPlaylistList;\n    }\n\n    private static void makeDefaultPlaylists(Context context) {\n        final Resources resources = context.getResources();\n\n        /* Last added list */\n        final Playlist lastAdded = new Playlist(TimberUtils.PlaylistType.LastAdded.mId,\n                resources.getString(TimberUtils.PlaylistType.LastAdded.mTitleId), -1);\n        mPlaylistList.add(lastAdded);\n\n        /* Recently Played */\n        final Playlist recentlyPlayed = new Playlist(TimberUtils.PlaylistType.RecentlyPlayed.mId,\n                resources.getString(TimberUtils.PlaylistType.RecentlyPlayed.mTitleId), -1);\n        mPlaylistList.add(recentlyPlayed);\n\n        /* Top Tracks */\n        final Playlist topTracks = new Playlist(TimberUtils.PlaylistType.TopTracks.mId,\n                resources.getString(TimberUtils.PlaylistType.TopTracks.mTitleId), -1);\n        mPlaylistList.add(topTracks);\n    }\n\n\n    public static final Cursor makePlaylistCursor(final Context context) {\n        return context.getContentResolver().query(MediaStore.Audio.Playlists.EXTERNAL_CONTENT_URI,\n                new String[]{\n                        BaseColumns._ID,\n                        PlaylistsColumns.NAME\n                }, null, null, MediaStore.Audio.Playlists.DEFAULT_SORT_ORDER);\n    }\n\n    public static void deletePlaylists(Context context, long playlistId) {\n        Uri localUri = MediaStore.Audio.Playlists.EXTERNAL_CONTENT_URI;\n        StringBuilder localStringBuilder = new StringBuilder();\n        localStringBuilder.append("_id IN (");\n        localStringBuilder.append((playlistId));\n        localStringBuilder.append(")");\n        context.getContentResolver().delete(localUri, localStringBuilder.toString(), null);\n    }\n}\n'