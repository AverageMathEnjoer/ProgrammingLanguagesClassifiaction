b'{-# LANGUAGE OverloadedStrings #-}\n\n-- | Hello World in PDF :)\n--\n-- Right now there are no high level tools for PDF generating.\n-- This example is very low level. Nothing more then proof\n-- of concept.\n\nmodule Main\n(\n  main\n)\nwhere\n\nimport qualified Data.ByteString.Lazy as BSL\nimport qualified Data.Vector as Vector\nimport qualified Data.HashMap.Strict as HashMap\nimport Control.Monad\nimport qualified System.IO.Streams as Streams\n\nimport Pdf.Core\nimport Pdf.Core.Writer\n\nmain :: IO ()\nmain = do\n  let tr = HashMap.fromList [\n        ("Size", Number $ fromIntegral $ length objects),\n        ("Root", Ref catalogRef)\n        ]\n      objects = [\n        (Dict catalog, catalogRef),\n        (Dict rootNode, rootNodeRef),\n        (Dict page, pageRef),\n        (Dict font, fontRef)\n        ]\n      streams = [\n        (contentDict, contentData, contentRef)\n        ]\n      catalog = HashMap.fromList [\n        ("Type", Name "Catalog"),\n        ("Pages", Ref rootNodeRef)\n        ]\n      rootNode = HashMap.fromList [\n        ("Type", Name "Pages"),\n        ("Kids", Array $ Vector.fromList [Ref pageRef]),\n        ("Count", Number 1)\n        ]\n      page = HashMap.fromList [\n        ("Type", Name "Page"),\n        ("Parent", Ref rootNodeRef),\n        ("Contents", Ref contentRef),\n        ("Resources", Dict resourcesDict),\n        ("MediaBox", Array $ Vector.fromList [\n          Number 0,\n          Number 0,\n          Number 200,\n          Number 200\n          ])\n        ]\n      resourcesDict = HashMap.fromList [\n        ("Font", Dict $ HashMap.fromList [\n          ("F1", Ref fontRef)\n          ])\n        ]\n      font = HashMap.fromList [\n        ("Type", Name "Font"),\n        ("Subtype", Name "Type1"),\n        ("BaseFont", Name "Helvetica")\n        ]\n      contentDict = HashMap.fromList [\n        ("Length", Number $ fromIntegral $ BSL.length contentData)\n        ]\n      contentData = "BT /F1 12 Tf 100 100 TD (Hello World!!!) Tj ET"\n      catalogRef = R 1 0\n      rootNodeRef = R 2 0\n      pageRef = R 3 0\n      contentRef = R 4 0\n      fontRef = R 5 0\n\n  writer <- makeWriter Streams.stdout\n  writeHeader writer\n  forM_ objects $ \\(obj, ref) ->\n    writeObject writer ref obj\n  forM_ streams $ \\(dict, dat, ref) ->\n    writeStream writer ref dict dat\n  writeXRefTable writer 0 tr\n'