b"\xef\xbb\xbfusing System;\nusing System.Collections.Generic;\nusing System.Text;\nusing Business.Constants;\nusing Castle.DynamicProxy;\nusing Core.Extensions;\nusing Core.Utilities.Interceptors;\nusing Core.Utilities.IoC;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.DependencyInjection;\n\nnamespace Business.BusinessAspects.Autofac\n{\n    public class SecuredOperation:MethodInterception\n    {\n        private string[] _roles;\n        private IHttpContextAccessor _httpContextAccessor;\n\n        public SecuredOperation(string roles)\n        {\n            _roles = roles.Split(',');\n            _httpContextAccessor =  ServiceTool.ServiceProvider.GetService<IHttpContextAccessor>();\n\n        }\n\n        protected override void OnBefore(IInvocation invocation)\n        {\n            var roleClaims = _httpContextAccessor.HttpContext.User.ClaimRoles();\n            foreach (var role in _roles)\n            {\n                if (roleClaims.Contains(role))\n                {\n                    return;\n                }\n            }\n            throw new Exception(Messages.AuthorizationDenied);\n        }\n    }\n}\n"