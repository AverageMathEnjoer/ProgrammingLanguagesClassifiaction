b'package icu.nullptr.twifucker.hook\n\nimport com.github.kyuubiran.ezxhelper.ClassUtils.loadClass\nimport com.github.kyuubiran.ezxhelper.HookFactory.`-Static`.createHook\nimport com.github.kyuubiran.ezxhelper.Log\nimport com.github.kyuubiran.ezxhelper.finders.FieldFinder\nimport com.github.kyuubiran.ezxhelper.finders.MethodFinder\nimport icu.nullptr.twifucker.afterMeasure\nimport icu.nullptr.twifucker.modulePrefs\n\nobject JsonFleetsTimelineResponseHook : BaseHook() {\n    override val name: String\n        get() = "JsonFleetsTimelineResponseHook"\n\n    override fun init() {\n        if (!modulePrefs.getBoolean("disable_threads", false)) return\n\n        val jsonFleetsTimelineResponseClass =\n            loadClass("com.twitter.fleets.api.json.JsonFleetsTimelineResponse")\n        val jsonFleetsTimelineResponseMapperClass =\n            loadClass("com.twitter.fleets.api.json.JsonFleetsTimelineResponse\\$\\$JsonObjectMapper")\n\n        val threadsField = FieldFinder.fromClass(jsonFleetsTimelineResponseClass)\n            .filterByType(ArrayList::class.java).first()\n\n        MethodFinder.fromClass(jsonFleetsTimelineResponseMapperClass).filterByName("_parse")\n            .filterByReturnType(jsonFleetsTimelineResponseClass).first().createHook {\n                afterMeasure(name) { param ->\n                    param.result ?: return@afterMeasure\n                    threadsField.set(param.result, null)\n                    Log.d("Removed threads")\n                }\n            }\n    }\n}'