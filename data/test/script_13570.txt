b'package effectivejava.chapter7.item45.anagrams;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.stream.Stream;\n\nimport static java.util.stream.Collectors.groupingBy;\n\n// Overuse of streams - don\'t do this! (page 205)\npublic class StreamAnagrams {\n    public static void main(String[] args) throws IOException {\n        Path dictionary = Paths.get(args[0]);\n        int minGroupSize = Integer.parseInt(args[1]);\n\n        try (Stream<String> words = Files.lines(dictionary)) {\n            words.collect(\n                    groupingBy(word -> word.chars().sorted()\n                            .collect(StringBuilder::new,\n                                    (sb, c) -> sb.append((char) c),\n                                    StringBuilder::append).toString()))\n                    .values().stream()\n                    .filter(group -> group.size() >= minGroupSize)\n                    .map(group -> group.size() + ": " + group)\n                    .forEach(System.out::println);\n        }\n    }\n}\n'