b'\xef\xbb\xbfusing System.ComponentModel;\nusing System.Diagnostics;\nusing System.Text.RegularExpressions;\n\nnamespace XboxDownload\n{\n    public partial class FormDns : Form\n    {\n        public FormDns()\n        {\n            InitializeComponent();\n        }\n\n        private void ButTest_Click(object sender, EventArgs e)\n        {\n            string domainName = cbHostName.Text.Trim();\n            if (!string.IsNullOrEmpty(domainName))\n            {\n                butTest.Enabled = false;\n                textBox1.Text = ">nslookup " + domainName + " " + Properties.Settings.Default.LocalIP + "\\r\\n";\n                Task.Run(() => Test(domainName));\n            }\n        }\n\n        private void CbDomainName_Validating(object sender, CancelEventArgs e)\n        {\n            cbHostName.Text = Regex.Replace(cbHostName.Text.Trim(), @"^(https?://)?([^/|:]+).*$", "$2");\n        }\n\n        private void Test(string domainName)\n        {\n            string resultInfo = string.Empty;\n            using (Process p = new())\n            {\n                p.StartInfo = new ProcessStartInfo("nslookup", domainName + " " + Properties.Settings.Default.LocalIP)\n                {\n                    CreateNoWindow = true,\n                    UseShellExecute = false,\n                    WindowStyle = ProcessWindowStyle.Hidden,\n                    RedirectStandardOutput = true\n                };\n                p.Start();\n                resultInfo = p.StandardOutput.ReadToEnd();\n                p.Close();\n            }\n            SetMsg(resultInfo);\n            MatchCollection mc = Regex.Matches(resultInfo, @":\\s*(?<ip>\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})");\n            if (mc.Count >= 2)\n            {\n                string ip = mc[^1].Groups["ip"].Value;\n                SetMsg("\\n//IP\xe5\x9c\xb0\xe5\x9d\x80: " + ip + " " + ClassDNS.QueryLocation(ip));\n            }\n            else if (Regex.IsMatch(resultInfo, @"timeout", RegexOptions.IgnoreCase))\n            {\n                SetMsg("*** \xe8\xaf\xb7\xe6\xb1\x82\xe8\xb6\x85\xe6\x97\xb6");\n            }\n            else\n            {\n                SetMsg("*** \xe6\x89\xbe\xe4\xb8\x8d\xe5\x88\xb0 " + domainName + ": Non-existent domain");\n            }\n            SetButEnable(true);\n        }\n\n        delegate void CallbackButEnable(bool enabled);\n        private void SetButEnable(bool enabled)\n        {\n            if (this.IsDisposed) return;\n            if (butTest.InvokeRequired)\n            {\n                CallbackButEnable d = new(SetButEnable);\n                this.Invoke(d, new object[] { enabled });\n            }\n            else\n            {\n                butTest.Enabled = enabled;\n            }\n        }\n\n        delegate void CallbackMsg(string str);\n        private void SetMsg(string str)\n        {\n            if (this.IsDisposed) return;\n            if (textBox1.InvokeRequired)\n            {\n                CallbackMsg d = new(SetMsg);\n                Invoke(d, new object[] { str });\n            }\n            else textBox1.AppendText(str);\n        }\n    }\n}\n'