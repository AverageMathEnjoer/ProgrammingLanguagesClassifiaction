b'import Control.Monad(ap,liftM)\n\n--            Input , Output\ntype World = (String, String)\n\nnewtype P a = P (World->(World,a))\n\nrunProgram :: P a -> IO ()\nrunProgram (P f) = \n  interact (\\input -> \n    let ((_, output),_) = f (input,"")\n    in output)\n\ninChar :: P Char\ninChar = P $\n  \\(i, o) -> ((tail i, o), head i)\n\ninLine :: P String\ninLine = P $\n  \\(i, o) ->\n    let i2 = drop 1 $ \n             dropWhile (/=\'\\n\') i \n        line = takeWhile (/=\'\\n\') i \n    in ((i2, o), line)\n\noutChar :: Char -> P ()\noutChar c = P $\n  \\(i, o) -> ((i, o ++ [c]), ())\n\noutLine :: String -> P ()\noutLine str = P $\n  \\(i, o) -> ((i, o ++ str ++ "\\n"), ())\n\n\ninstance Functor P where\n  fmap = liftM\ninstance Applicative P where\n  pure = return\n  (<*>) = ap\n\ninstance Monad P where\n  return x = P $ \\(i,o) -> ((i,o), x)\n  a >>= b = P $ \\(i,o) -> let\n    P f1 = a\n    ((i1,o1),v1) = f1 (i,o)\n    P f2 = b v1\n    ((i2,o2),v2) = f2 (i1,o1)\n    in ((i2,o2),v2)\n\n\ngreet :: P ()\ngreet = do\n  outLine "May I have your name?"\n  name <- inLine\n  outLine $ name ++ ", Nice to meet you!"\n\nmain = runProgram greet\n\n\n'