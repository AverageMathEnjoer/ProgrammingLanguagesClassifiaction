b'\xef\xbb\xbfusing System.Net.Security;\nusing System.Net.Sockets;\nusing System.Net;\nusing System.Security.Authentication;\nusing System.Security.Cryptography.X509Certificates;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing System.Text.Json;\n\nnamespace XboxDownload\n{\n    class HttpsListen\n    {\n        private readonly Form1 parentForm;\n        private readonly X509Certificate2 certificate;\n        Socket? socket = null;\n\n        public HttpsListen(Form1 parentForm)\n        {\n            this.parentForm = parentForm;\n            this.certificate = new X509Certificate2(Properties.Resource.XboxDownload);\n        }\n\n        public void Listen()\n        {\n            int port = 443;\n            IPEndPoint ipe = new(Properties.Settings.Default.ListenIP == 0 ? IPAddress.Parse(Properties.Settings.Default.LocalIP) : IPAddress.Any, port);\n            socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);\n            try\n            {\n                socket.Bind(ipe);\n                socket.Listen(100);\n            }\n            catch (SocketException ex)\n            {\n                parentForm.Invoke(new Action(() =>\n                {\n                    parentForm.pictureBox1.Image = Properties.Resource.Xbox3;\n                    MessageBox.Show($"\xe5\x90\xaf\xe7\x94\xa8HTTPS\xe6\x9c\x8d\xe5\x8a\xa1\xe5\xa4\xb1\xe8\xb4\xa5!\\n\xe9\x94\x99\xe8\xaf\xaf\xe4\xbf\xa1\xe6\x81\xaf: {ex.Message}\\n\\n\xe8\xa7\xa3\xe5\x86\xb3\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x9a1\xe3\x80\x81\xe5\x81\x9c\xe7\x94\xa8\xe5\x8d\xa0\xe7\x94\xa8 {port} \xe7\xab\xaf\xe5\x8f\xa3\xe7\x9a\x84\xe6\x9c\x8d\xe5\x8a\xa1\xe3\x80\x822\xe3\x80\x81\xe7\x9b\x91\xe5\x90\xacIP\xe9\x80\x89\xe6\x8b\xa9(Any)", "\xe5\x90\xaf\xe7\x94\xa8HTTPS\xe6\x9c\x8d\xe5\x8a\xa1\xe5\xa4\xb1\xe8\xb4\xa5", MessageBoxButtons.OK, MessageBoxIcon.Error);\n                }));\n                return;\n            }\n\n            X509Store store = new(StoreName.Root, StoreLocation.LocalMachine);\n            X509Certificate2 certificate = new(Properties.Resource.Xbox\xe4\xb8\x8b\xe8\xbd\xbd\xe5\x8a\xa9\xe6\x89\x8b);\n            store.Open(OpenFlags.ReadWrite);\n            store.Add(certificate);\n            store.Close();\n\n            while (Form1.bServiceFlag)\n            {\n                try\n                {\n                    Socket mySocket = socket.Accept();\n                    ThreadPool.QueueUserWorkItem(delegate { TcpThread(mySocket); });\n                }\n                catch { }\n            }\n        }\n\n        private void TcpThread(Socket mySocket)\n        {\n            if (mySocket.Connected)\n            {\n                mySocket.SendTimeout = 30000;\n                mySocket.ReceiveTimeout = 30000;\n                using SslStream ssl = new(new NetworkStream(mySocket), false);\n                try\n                {\n                    ssl.AuthenticateAsServer(this.certificate, false, SslProtocols.Tls13 | SslProtocols.Tls12 | SslProtocols.Tls11 | SslProtocols.Tls, false);\n                    ssl.WriteTimeout = 30000;\n                    ssl.ReadTimeout = 30000;\n                    if (ssl.IsAuthenticated)\n                    {\n                        while (Form1.bServiceFlag && mySocket.Connected && mySocket.Poll(3000000, SelectMode.SelectRead))\n                        {\n                            Byte[] _receive = new Byte[4096];\n                            int _num = ssl.Read(_receive, 0, _receive.Length);\n                            string _buffer = Encoding.ASCII.GetString(_receive, 0, _num);\n                            Match result = Regex.Match(_buffer, @"(?<method>GET|POST|OPTIONS) (?<path>[^\\s]+)");\n                            if (!result.Success)\n                            {\n                                mySocket.Close();\n                                continue;\n                            }\n                            if (_buffer.StartsWith("POST") && _buffer.EndsWith("\\r\\n\\r\\n") && !_buffer.Contains("Content-Length: 0"))\n                            {\n                                _num = ssl.Read(_receive, 0, _receive.Length);\n                                _buffer += Encoding.ASCII.GetString(_receive, 0, _num);\n                            }\n                            string _method = result.Groups["method"].Value;\n                            string _filePath = Regex.Replace(result.Groups["path"].Value.Trim(), @"^https?://[^/]+", "");\n                            result = Regex.Match(_buffer, @"Host:(.+)");\n                            if (!result.Success)\n                            {\n                                mySocket.Close();\n                                continue;\n                            }\n                            string _hosts = result.Groups[1].Value.Trim().ToLower();\n                            string _tmpPath = Regex.Replace(_filePath, @"\\?.+$", ""), _localPath = string.Empty;\n                            if (Properties.Settings.Default.LocalUpload)\n                            {\n                                if (File.Exists(Properties.Settings.Default.LocalPath + _tmpPath))\n                                    _localPath = Properties.Settings.Default.LocalPath + _tmpPath.Replace("/", "\\\\");\n                                else if (File.Exists(Properties.Settings.Default.LocalPath + "\\\\" + Path.GetFileName(_tmpPath)))\n                                    _localPath = Properties.Settings.Default.LocalPath + "\\\\" + Path.GetFileName(_tmpPath);\n                            }\n                            string _extension = Path.GetExtension(_tmpPath).ToLowerInvariant();\n                            if (Properties.Settings.Default.LocalUpload && !string.IsNullOrEmpty(_localPath))\n                            {\n                                using (FileStream fs = new(_localPath, FileMode.Open, FileAccess.Read, FileShare.Read))\n                                {\n                                    using BinaryReader br = new(fs);\n                                    string _contentRange = string.Empty, _status = "200 OK";\n                                    long _fileLength = br.BaseStream.Length, _startPosition = 0;\n                                    long _endPosition = _fileLength;\n                                    result = Regex.Match(_buffer, @"Range: bytes=(?<StartPosition>\\d+)(-(?<EndPosition>\\d+))?");\n                                    if (result.Success)\n                                    {\n                                        _startPosition = long.Parse(result.Groups["StartPosition"].Value);\n                                        if (_startPosition > br.BaseStream.Length) _startPosition = 0;\n                                        if (!string.IsNullOrEmpty(result.Groups["EndPosition"].Value))\n                                            _endPosition = long.Parse(result.Groups["EndPosition"].Value) + 1;\n                                        _contentRange = "bytes " + _startPosition + "-" + (_endPosition - 1) + "/" + _fileLength;\n                                        _status = "206 Partial Content";\n                                    }\n\n                                    StringBuilder sb = new();\n                                    sb.Append("HTTP/1.1 " + _status + "\\r\\n");\n                                    sb.Append("Content-Type: " + ClassWeb.GetMimeMapping(_tmpPath) + "\\r\\n");\n                                    sb.Append("Content-Length: " + (_endPosition - _startPosition) + "\\r\\n");\n                                    if (_contentRange != null) sb.Append("Content-Range: " + _contentRange + "\\r\\n");\n                                    sb.Append("Accept-Ranges: bytes\\r\\n\\r\\n");\n\n                                    Byte[] _headers = Encoding.ASCII.GetBytes(sb.ToString());\n                                    ssl.Write(_headers);\n\n                                    br.BaseStream.Position = _startPosition;\n                                    int _size = 4096;\n                                    while (Form1.bServiceFlag && mySocket.Connected)\n                                    {\n                                        long _remaining = _endPosition - br.BaseStream.Position;\n                                        byte[] _response = new byte[_remaining <= _size ? _remaining : _size];\n                                        br.Read(_response, 0, _response.Length);\n                                        ssl.Write(_response);\n                                        if (_remaining <= _size) break;\n                                    }\n                                    ssl.Flush();\n                                }\n                                if (Properties.Settings.Default.RecordLog) parentForm.SaveLog("\xe6\x9c\xac\xe5\x9c\xb0\xe4\xb8\x8a\xe4\xbc\xa0", _localPath, mySocket.RemoteEndPoint != null ? ((IPEndPoint)mySocket.RemoteEndPoint).Address.ToString() : string.Empty);\n                            }\n                            else\n                            {\n                                bool bFileNotFound = true;\n                                switch (_hosts)\n                                {\n                                    case "api1.origin.com":\n                                        //if (Properties.Settings.Default.EAStore)\n                                        {\n                                            string? ip = ClassDNS.DoH(_hosts);\n                                            if (ip != null)\n                                            {\n                                                bool decode = false;\n                                                if (_filePath.StartsWith("/ecommerce2/downloadURL"))\n                                                {\n                                                    decode = true;\n                                                    if (Properties.Settings.Default.EACDN)\n                                                    {\n                                                        _filePath = Regex.Replace(_filePath, @"&cdnOverride=[^&]+", "");\n                                                        _filePath += "&cdnOverride=akamai";\n                                                    }\n                                                    if (Properties.Settings.Default.EAProtocol)\n                                                    {\n                                                        _filePath = Regex.Replace(_filePath, @"&https=[^&]+", "");\n                                                        //_filePath += "&https=false"; \n                                                    }\n                                                    _buffer = Regex.Replace(_buffer, @"^" + _method + " .+", _method + " " + _filePath + " HTTP/1.1");\n                                                }\n                                                string _url = "https://" + _hosts + _filePath;\n                                                Uri uri = new(_url);\n                                                SocketPackage socketPackage = ClassWeb.TlsRequest(uri, Encoding.ASCII.GetBytes(_buffer), ip, decode);\n                                                if (string.IsNullOrEmpty(socketPackage.Err))\n                                                {\n                                                    bFileNotFound = false;\n                                                    string str = socketPackage.Headers;\n                                                    str = Regex.Replace(str, @"(Content-Encoding|Transfer-Encoding|Content-Length): .+\\r\\n", "");\n                                                    str = Regex.Replace(str, @"\\r\\n\\r\\n", "\\r\\nContent-Length: " + socketPackage.Buffer.Length + "\\r\\n\\r\\n");\n                                                    Byte[] _headers = Encoding.ASCII.GetBytes(str);\n                                                    ssl.Write(_headers);\n                                                    ssl.Write(socketPackage.Buffer);\n                                                    ssl.Flush();\n                                                    if (Properties.Settings.Default.RecordLog)\n                                                    {\n                                                        Match m1 = Regex.Match(socketPackage.Headers, @"^HTTP[^\\s]+\\s([^\\s]+)");\n                                                        if (m1.Success) parentForm.SaveLog("HTTP " + m1.Groups[1].Value, _url, mySocket.RemoteEndPoint != null ? ((IPEndPoint)mySocket.RemoteEndPoint).Address.ToString() : string.Empty);\n                                                        if (_filePath.StartsWith("/ecommerce2/downloadURL"))\n                                                        {\n                                                            m1 = Regex.Match(socketPackage.Html, @"<url>(?<url>.+)</url>");\n                                                            if (m1.Success) parentForm.SaveLog("\xe4\xb8\x8b\xe8\xbd\xbd\xe5\x9c\xb0\xe5\x9d\x80", m1.Groups["url"].Value, mySocket.RemoteEndPoint != null ? ((IPEndPoint)mySocket.RemoteEndPoint).Address.ToString() : string.Empty, 0x008000);\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        break;\n                                    case "epicgames-download1.akamaized.net":\n                                        {\n                                            bFileNotFound = false;\n                                            string _url = "https://epicgames-download1-1251447533.file.myqcloud.com" + _filePath;\n                                            StringBuilder sb = new();\n                                            sb.Append("HTTP/1.1 301 Moved Permanently\\r\\n");\n                                            sb.Append("Content-Type: text/html\\r\\n");\n                                            sb.Append("Location: " + _url + "\\r\\n");\n                                            sb.Append("Content-Length: 0\\r\\n\\r\\n");\n                                            Byte[] _headers = Encoding.ASCII.GetBytes(sb.ToString());\n                                            ssl.Write(_headers);\n                                            ssl.Flush();\n                                            if (Properties.Settings.Default.RecordLog) parentForm.SaveLog("HTTP 301", _url, mySocket.RemoteEndPoint != null ? ((IPEndPoint)mySocket.RemoteEndPoint).Address.ToString() : string.Empty);\n                                        }\n                                        break;\n                                    case "store.steampowered.com":\n                                    case "steamcommunity.com":\n                                        //if (Properties.Settings.Default.SteamStore)\n                                        {\n                                            string _hosts2 = string.Empty;\n                                            if (Regex.IsMatch(_filePath, @"^\\/login\\/(getrsakey|dologin|transfer)") || _filePath.Contains("/logout"))\n                                            {\n                                                _hosts2 = "help.steampowered.com";\n                                            }\n                                            else\n                                            {\n                                                if (_hosts == "store.steampowered.com")\n                                                {\n                                                    if (_filePath.StartsWith("/login/"))\n                                                    {\n                                                        if (Environment.OSVersion.Version.Major >= 10)\n                                                        {\n                                                            _filePath = _filePath.Replace("/login/?", "/login?");\n                                                            _hosts2 = "store.akamai.steamstatic.com";\n                                                            _buffer = Regex.Replace(_buffer, @"GET [^\\s]+", "GET " + _filePath);\n                                                        }\n                                                        else _hosts2 = "help.steampowered.com";\n                                                    }\n                                                    else\n                                                    {\n                                                        //_hosts2 = "store.akamai.steamstatic.com"; //\xe5\xb9\xb4\xe9\xbe\x84\xe9\x99\x90\xe5\x88\xb6\xe9\xa1\xb5\xe9\x9d\xa2\xe4\xb8\x8d\xe6\xad\xa3\xe5\xb8\xb8\n                                                        _hosts2 = "store.cloudflare.steamstatic.com";\n                                                        //_hosts2 = "store.st.dl.pinyuncloud.com";\n                                                        //_hosts2 = "store.st.dl.eccdnx.com";\n                                                    }\n                                                }\n                                                else if (_hosts == "steamcommunity.com")\n                                                {\n                                                    if (_filePath.StartsWith("/login/"))\n                                                    {\n                                                        if (Environment.OSVersion.Version.Major >= 10)\n                                                        {\n                                                            _filePath = _filePath.Replace("/login/home/?", "/login?");\n                                                            _hosts2 = "community.akamai.steamstatic.com";\n                                                            _buffer = Regex.Replace(_buffer, @"GET [^\\s]+", "GET " + _filePath);\n                                                        }\n                                                        else _hosts2 = "help.steampowered.com";\n                                                    }\n                                                    else\n                                                    {\n                                                        //_hosts2 = "community.akamai.steamstatic.com";\n                                                        _hosts2 = "community.cloudflare.steamstatic.com";\n                                                    }\n                                                }\n                                            }\n                                            if (_filePath == "/")\n                                            {\n                                                _filePath = "/default";\n                                                _buffer = Regex.Replace(_buffer, @"GET [^\\s]+", "GET " + _filePath);\n                                            }\n                                            else if (_filePath.StartsWith("/?"))\n                                            {\n                                                _filePath = _filePath.Replace("/?", "/default?");\n                                                _buffer = Regex.Replace(_buffer, @"GET [^\\s]+", "GET " + _filePath);\n                                            }\n                                            _buffer = Regex.Replace(_buffer, @"Host: .+", "Host: " + _hosts2);\n                                            Uri uri = new("https://" + _hosts2 + _filePath);\n                                            SocketPackage socketPackage = ClassWeb.TlsRequest(uri, Encoding.ASCII.GetBytes(_buffer));\n                                            if (string.IsNullOrEmpty(socketPackage.Err))\n                                            {\n                                                bFileNotFound = false;\n                                                string str = socketPackage.Headers;\n                                                str = Regex.Replace(str, @"(Content-Encoding|Transfer-Encoding|Content-Length): .+\\r\\n", "");\n                                                str = Regex.Replace(str, @"\\r\\n\\r\\n", "\\r\\nContent-Length: " + socketPackage.Buffer.Length + "\\r\\n\\r\\n");\n                                                Byte[] _headers = Encoding.ASCII.GetBytes(str);\n                                                ssl.Write(_headers);\n                                                ssl.Write(socketPackage.Buffer);\n                                                ssl.Flush();\n                                            }\n                                            if (Properties.Settings.Default.RecordLog) parentForm.SaveLog("Proxy", "https://" + _hosts + _filePath, mySocket.RemoteEndPoint != null ? ((IPEndPoint)mySocket.RemoteEndPoint).Address.ToString() : string.Empty);\n                                        }\n                                        break;\n                                }\n                                if (bFileNotFound)\n                                {\n                                    string _url = "https://" + _hosts + _filePath;\n                                    Byte[] _response = Encoding.ASCII.GetBytes("File not found.");\n                                    StringBuilder sb = new();\n                                    sb.Append("HTTP/1.1 404 Not Found\\r\\n");\n                                    sb.Append("Content-Type: text/html\\r\\n");\n                                    sb.Append("Content-Length: " + _response.Length + "\\r\\n\\r\\n");\n                                    Byte[] _headers = Encoding.ASCII.GetBytes(sb.ToString());\n                                    ssl.Write(_headers);\n                                    ssl.Write(_response);\n                                    ssl.Flush();\n                                    if (Properties.Settings.Default.RecordLog) parentForm.SaveLog("HTTP 404", _url, mySocket.RemoteEndPoint != null ? ((IPEndPoint)mySocket.RemoteEndPoint).Address.ToString() : string.Empty);\n                                }\n                            }\n                        }\n                    }\n                }\n                catch { }\n            }\n            if (mySocket.Connected)\n            {\n                try\n                {\n                    mySocket.Shutdown(SocketShutdown.Both);\n                }\n                finally\n                {\n                    mySocket.Close();\n                }\n            }\n            mySocket.Dispose();\n        }\n\n        public void Close()\n        {\n            if (socket != null)\n            {\n                socket.Close();\n                socket.Dispose();\n                socket = null;\n\n                X509Store store = new(StoreName.Root, StoreLocation.LocalMachine);\n                store.Open(OpenFlags.ReadWrite);\n                foreach (var item in store.Certificates)\n                {\n                    if (item.SubjectName.Name == "CN=Xbox\xe4\xb8\x8b\xe8\xbd\xbd\xe5\x8a\xa9\xe6\x89\x8b")\n                    {\n                        store.Remove(item);\n                        break;\n                    }\n                }\n                store.Close();\n            }\n        }\n    }\n}\n'