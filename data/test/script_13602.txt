b'{-# LANGUAGE StandaloneDeriving #-}\n{-# LANGUAGE DeriveAnyClass #-}\n{-# LANGUAGE RecordWildCards #-}\n{-# LANGUAGE PartialTypeSignatures #-}\n{-# OPTIONS_GHC -fglasgow-exts #-}\n\nmodule Pagila.Schema.V0001 where\n\nimport Database.Beam\nimport Database.Beam.Postgres\nimport Database.Beam.Postgres (PgSyntax(..))\nimport Database.Beam.Postgres.Migrate\nimport Database.Beam.Migrate.Types hiding (migrateScript)\nimport Database.Beam.Migrate.SQL.Tables\nimport Database.Beam.Migrate.SQL.Types\nimport Database.Beam.Backend.SQL.Types (SqlSerial)\nimport qualified Database.PostgreSQL.Simple as Pg\n\nimport qualified Control.Exception as E\n\nimport Data.Text (Text)\nimport Data.ByteString (ByteString)\nimport qualified Data.ByteString.Lazy as BL\nimport Data.Time.LocalTime (LocalTime)\nimport Data.Scientific (Scientific)\n\n-- Address table\n\ndata AddressT f\n  = AddressT\n  { addressId         :: Columnar f (SqlSerial Int32)\n  , addressAddress1   :: Columnar f Text\n  , addressAddress2   :: Columnar f (Maybe Text)\n  , addressDistrict   :: Columnar f Text\n  , addressCity       :: PrimaryKey CityT f\n  , addressPostalCode :: Columnar f Text\n  , addressPhone      :: Columnar f Text\n  , addressLastUpdate :: Columnar f LocalTime\n  } deriving Generic\ntype Address = AddressT Identity\nderiving instance Show Address\nderiving instance Eq Address\n\ninstance Table AddressT where\n  data PrimaryKey AddressT f = AddressId (Columnar f (SqlSerial Int32)) deriving Generic\n  primaryKey = AddressId . addressId\ntype AddressId = PrimaryKey AddressT Identity\nderiving instance Show AddressId\nderiving instance Eq AddressId\n\n-- City table\n\ndata CityT f\n  = CityT\n  { cityId         :: Columnar f Int32\n  , cityName       :: Columnar f Text\n  , cityCountryId  :: PrimaryKey CountryT f\n  , cityLastUpdate :: Columnar f LocalTime\n  } deriving Generic\ntype City = CityT Identity\nderiving instance Show City\nderiving instance Eq City\n\ninstance Table CityT where\n  data PrimaryKey CityT f = CityId (Columnar f Int32) deriving Generic\n  primaryKey = CityId . cityId\ntype CityId = PrimaryKey CityT Identity\nderiving instance Show CityId\nderiving instance Eq CityId\n\n-- Country table\n\ndata CountryT f\n  = CountryT\n  { countryId          :: Columnar f Int32\n  , countryName        :: Columnar f Text\n  , countryLastUpdated :: Columnar f LocalTime\n  } deriving Generic\ntype Country = CountryT Identity\nderiving instance Show Country\nderiving instance Eq Country\n\ninstance Table CountryT where\n  data PrimaryKey CountryT f = CountryId (Columnar f Int32) deriving Generic\n  primaryKey = CountryId . countryId\ntype CountryId = PrimaryKey CountryT Identity\nderiving instance Show CountryId\nderiving instance Eq CountryId\n\n-- Actor\n\ndata ActorT f\n  = ActorT\n  { actorId :: Columnar f (SqlSerial Int32)\n  , actorFirstName :: Columnar f Text\n  , actorLastName :: Columnar f Text\n  , actorLastUpdate :: Columnar f LocalTime\n  } deriving Generic\ntype Actor = ActorT Identity\nderiving instance Show Actor; deriving instance Eq Actor\n\ninstance Table ActorT where\n  data PrimaryKey ActorT f = ActorId (Columnar f (SqlSerial Int23))\n                             deriving Generic\n  primaryKey = ActorId . actorId\ntype ActorId = PrimaryKey ActorT Identity\nderiving instance Show ActorId; deriving instance Eq ActorId\n\n-- Category\n\ndata CategoryT f\n  = CategoryT\n  { categoryId :: Columnar f Int32\n  , categoryName :: Columnar f Text\n  , categoryLastUpdate :: Columnar f LocalTime\n  } deriving Generic\ntype Category = CategoryT Identity\nderiving instance Show Category; deriving instance Eq Category\n\ninstance Table CategoryT where\n  data PrimaryKey CategoryT f = CategoryId (Columnar f Int32) deriving Generic\n  primaryKey = CategoryId . categoryId\ntype CategoryId = PrimaryKey CategoryT Identity\nderiving instance Show CategoryId; deriving instance Eq CategoryId\n\n-- Customer\n\ndata CustomerT f\n  = CustomerT\n  { customerId        :: Columnar f (SqlSerial Int32)\n  , customerStore     :: PrimaryKey StoreT f\n  , customerFirstName :: Columnar f Text\n  , customerLastName  :: Columnar f Text\n  , customerEmail     :: Columnar f Text\n  , customerAddress   :: PrimaryKey AddressT f\n  , customerActive    :: Columnar f Bool\n  , customerCreateDate :: Columnar f LocalTime\n  , customerLastUpdate :: Columnar f LocalTime\n  } deriving Generic\ntype Customer = CustomerT Identity\nderiving instance Show Customer; deriving instance Eq Customer\n\ninstance Table CustomerT where\n  data PrimaryKey CustomerT f = CustomerId (Columnar f (SqlSerial Int32))\n                                deriving Generic\n  primaryKey = CustomerId . customerId\ntype CustomerId = PrimaryKey CustomerT Identity\nderiving instance Show CustomerId; deriving instance Eq CustomerId\n\n-- Store\n\ndata StoreT f\n  = StoreT\n  { storeId      :: Columnar f Int32\n  , storeManager :: PrimaryKey StaffT f\n  , storeAddress :: PrimaryKey AddressT f\n  , lastUpdate   :: Columnar f LocalTime\n  } deriving Generic\ntype Store = StoreT Identity\nderiving instance Show Store; deriving instance Eq Store\n\ninstance Table StoreT where\n  data PrimaryKey StoreT f = StoreId (Columnar f Int32) deriving Generic\n  primaryKey = StoreId . storeId\ntype StoreId = PrimaryKey StoreT Identity\nderiving instance Show StoreId; deriving instance Eq StoreId\n\n-- Staff\n\ndata StaffT f\n  = StaffT\n  { staffId        :: Columnar f Int32\n  , staffFirstName :: Columnar f Text\n  , staffLastName  :: Columnar f Text\n  , staffAddress   :: PrimaryKey AddressT f\n  , staffEmail     :: Columnar f Text\n  , staffStore     :: PrimaryKey StoreT f\n  , staffActive    :: Columnar f Bool\n  , staffUsername  :: Columnar f Text\n  , staffPassword  :: Columnar f ByteString\n  , staffLastUpdate :: Columnar f LocalTime\n  , staffPicture   :: Columnar f (Maybe ByteString)\n  } deriving Generic\ntype Staff = StaffT Identity\nderiving instance Eq Staff; deriving instance Show Staff\n\ninstance Table StaffT where\n  data PrimaryKey StaffT f = StaffId (Columnar f Int32) deriving Generic\n  primaryKey = StaffId . staffId\ntype StaffId = PrimaryKey StaffT Identity\nderiving instance Eq StaffId; deriving instance Show StaffId\n\n-- Film\n\ndata FilmT f\n  = FilmT\n  { filmId             :: Columnar f (SqlSerial Int32)\n  , filmTitle          :: Columnar f Text\n  , filmDescription    :: Columnar f Text\n  , filmReleaseYear    :: Columnar f Int32\n  , filmLanguage       :: PrimaryKey LanguageT f\n  , filmOriginalLanguage :: PrimaryKey LanguageT f\n  , filmRentalDuration :: Columnar f Int32\n  , filmRentalRate     :: Columnar f Scientific\n  , filmLength         :: Columnar f Int32\n  , filmReplacementCost :: Columnar f Scientific\n  , filmRating         :: Columnar f Text\n  , filmLastUpdate     :: Columnar f LocalTime\n  } deriving Generic\ntype Film = FilmT Identity\nderiving instance Eq Film; deriving instance Show Film\n\ninstance Table FilmT where\n  data PrimaryKey FilmT f = FilmId (Columnar f (SqlSerial Int32))\n                            deriving Generic\n  primaryKey = FilmId . filmId\ntype FilmId = PrimaryKey FilmT Identity\nderiving instance Eq FilmId; deriving instance Show FilmId\n\n-- Film category\n\ndata FilmCategoryT f\n  = FilmCategoryT\n  { filmCategoryFilm       :: PrimaryKey FilmT f\n  , filmCategoryCategory   :: PrimaryKey CategoryT f\n  , filmCategoryLastUpdate :: Columnar f LocalTime\n  } deriving Generic\ntype FilmCategory = FilmCategoryT Identity\nderiving instance Eq FilmCategory; deriving instance Show FilmCategory\n\ninstance Table FilmCategoryT where\n  data PrimaryKey FilmCategoryT f = FilmCategoryId (PrimaryKey CategoryT f) (PrimaryKey FilmT f)\n    deriving Generic\n  primaryKey = FilmCategoryId <$> filmCategoryCategory <*> filmCategoryFilm\ntype FilmCategoryId = PrimaryKey FilmCategoryT Identity\nderiving instance Eq FilmCategoryId; deriving instance Show FilmCategoryId\n\n-- Language\n\ndata LanguageT f\n  = LanguageT\n  { languageId   :: Columnar f (SqlSerial Int32)\n  , languageName :: Columnar f Text\n  , languageLastUpdate :: Columnar f LocalTime\n  }  deriving Generic\ntype Language = LanguageT Identity\nderiving instance Eq Language; deriving instance Show Language\n\ninstance Table LanguageT where\n  data PrimaryKey LanguageT f = LanguageId (Columnar f (SqlSerial Int32))\n                                deriving Generic\n  primaryKey = LanguageId . languageId\ntype LanguageId = PrimaryKey LanguageT Identity\nderiving instance Eq LanguageId; deriving instance Show LanguageId\n\n-- Pagila db\n\ndata PagilaDb f\n  = PagilaDb\n  { actor      :: f (TableEntity ActorT)\n  , address    :: f (TableEntity AddressT)\n  , city       :: f (TableEntity CityT)\n  , country    :: f (TableEntity CountryT)\n  , category   :: f (TableEntity CategoryT)\n  , customer   :: f (TableEntity CustomerT)\n  , film       :: f (TableEntity FilmT)\n  , filmCategory :: f (TableEntity FilmCategoryT)\n  , language   :: f (TableEntity LanguageT)\n  , store      :: f (TableEntity StoreT)\n  , staff      :: f (TableEntity StaffT)\n  } deriving Generic\ninstance Database Postgres PagilaDb\n\n-- Beamable instances\n\ninstance Beamable (PrimaryKey AddressT)\ninstance Beamable AddressT\ninstance Beamable (PrimaryKey CityT)\ninstance Beamable CityT\ninstance Beamable (PrimaryKey CountryT)\ninstance Beamable CountryT\ninstance Beamable (PrimaryKey ActorT)\ninstance Beamable ActorT\ninstance Beamable (PrimaryKey CategoryT)\ninstance Beamable CategoryT\ninstance Beamable (PrimaryKey CustomerT)\ninstance Beamable CustomerT\ninstance Beamable (PrimaryKey StoreT)\ninstance Beamable StoreT\ninstance Beamable (PrimaryKey StaffT)\ninstance Beamable StaffT\ninstance Beamable (PrimaryKey FilmT)\ninstance Beamable FilmT\ninstance Beamable (PrimaryKey FilmCategoryT)\ninstance Beamable FilmCategoryT\ninstance Beamable (PrimaryKey LanguageT)\ninstance Beamable LanguageT\n\nlastUpdateField :: TableFieldSchema PgColumnSchemaSyntax LocalTime\nlastUpdateField = field "last_update" timestamp (defaultTo_ now_) notNull\n\nmigration :: () -> Migration PgCommandSyntax (CheckedDatabaseSettings Postgres PagilaDb)\nmigration () = do\n--  year_ <- createDomain "year" integer (check (\\yr -> yr >=. 1901 &&. yr <=. 2155))\n  PagilaDb <$> createTable "actor"\n                 (ActorT (field "actor_id" serial)\n                         (field "first_name" (varchar (Just 45)) notNull)\n                         (field "last_name" (varchar (Just 45)) notNull unique)\n                         lastUpdateField)\n           <*> createTable "address"\n                 (AddressT (field "address_id" smallserial)\n                           (field "address" (varchar (Just 50)) notNull)\n                           (field "address2" (maybeType $ varchar (Just 50)))\n                           (field "district" (varchar (Just 20)) notNull)\n                           (CityId (field "city_id" smallint notNull))\n                           (field "postal_code" (varchar (Just 10)))\n                           (field "phone" (varchar (Just 20)) notNull) lastUpdateField)\n           <*> createTable "city"\n                 (CityT (field "city_id" smallint)\n                        (field "city" (varchar (Just 50)) notNull)\n                        (CountryId (field "country_id" smallint notNull))\n                        lastUpdateField)\n           <*> createTable "country"\n                 (CountryT (field "country_id" smallint)\n                           (field "country" (varchar (Just 50)) notNull)\n                           lastUpdateField)\n           <*> createTable "category"\n                 (CategoryT (field "category_id" smallint)\n                            (field "name" (varchar (Just 25)) notNull)\n                            lastUpdateField)\n           <*> createTable "customer"\n                 (CustomerT (field "customer_id" serial)\n                            (StoreId (field "store_id" smallint notNull))\n                            (field "first_name" (varchar (Just 45)) notNull)\n                            (field "last_name" (varchar (Just 45)) notNull)\n                            (field "email" (varchar (Just 50)))\n                            (AddressId (field "address_id" serial notNull))\n                            (field "activebool" boolean (defaultTo_ (val_ True)) notNull)\n                            (field "create_date" date (defaultTo_ now_) notNull)\n                            lastUpdateField)\n           <*> createTable "film"\n                 (FilmT     (field "film_id" smallserial)\n                            (field "title" (varchar (Just 255)) notNull)\n                            (field "description" text)\n                            (field "release_year" smallint {- TODO year -})\n                            (LanguageId (field "language_id" smallserial notNull))\n                            (LanguageId (field "original_language_id" smallserial))\n                            (field "rental_duration" smallint notNull)\n                            (field "rental_rate" (numeric (Just (4, Just 2))))\n                            (field "length" smallint)\n                            (field "replacement_cost" (numeric (Just (5, Just 2))))\n                            (field "rating_text" text)\n                            lastUpdateField)\n           <*> createTable "film_category"\n                 (FilmCategoryT (FilmId (field "film_id" smallserial notNull))\n                                (CategoryId (field "category_id" smallint))\n                                lastUpdateField)\n           <*> createTable "language"\n                 (LanguageT (field "language_id" smallserial)\n                            (field "name" (char (Just 20)) notNull)\n                            lastUpdateField)\n           <*> createTable "store"\n                 (StoreT (field "store_id" smallint)\n                         (StaffId (field "manager_staff_id" smallint notNull))\n                         (AddressId (field "address_id" serial notNull))\n                         lastUpdateField)\n           <*> createTable "staff"\n                 (StaffT (field "staff_id" smallint)\n                         (field "first_name" (varchar (Just 45)) notNull)\n                         (field "last_name" (varchar (Just 45)) notNull)\n                         (AddressId (field "address_id" serial notNull))\n                         (field "email" (varchar (Just 50)))\n                         (StoreId (field "store_id" smallint notNull))\n                         (field "active" boolean (defaultTo_ (val_ True)) notNull)\n                         (field "username" (varchar (Just 16)) notNull)\n                         (field "password" binaryLargeObject)\n                         lastUpdateField\n                         (field "picture" (maybeType bytea)))\n'