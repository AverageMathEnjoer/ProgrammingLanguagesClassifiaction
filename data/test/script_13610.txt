b'// I2Cdev library collection - HTU21D I2C device class header file\n// Based on MEAS HTU21D HPC199_2 HTU321(F) datasheet, October 2013\n// 2016-03-24 by https://github.com/eadf\n// Updates should (hopefully) always be available at https://github.com/jrowberg/i2cdevlib\n//\n// Changelog:\n//     2016-03-24 - initial release\n\n/* ============================================\nI2Cdev device library code is placed under the MIT license\nCopyright (c) 2016 Eadf, Jeff Rowberg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n===============================================\n*/\n\n#include "HTU21D.h"\n\n\n/** Default constructor, uses default I2C address.\n * @see HTU21D_DEFAULT_ADDRESS\n */\nHTU21D::HTU21D() {\n    devAddr = HTU21D_DEFAULT_ADDRESS;\n}\n\n/** Power on and prepare for general usage.\n * This operation calls reset() on the HTU21D device and it takes at least 15milliseconds.\n */\nvoid HTU21D::initialize() {\n    reset();\n}\n\n/** Verify the I2C connection.\n * Make sure the device is connected and responds as expected.\n * This operation calls reset() on the HTU21D device and it takes at least 15milliseconds.\n * @return True if connection is valid, false otherwise\n */\nbool HTU21D::testConnection() {\n    reset();\n    buffer[0] = 0;\n    I2Cdev::readByte(devAddr, HTU21D_READ_USER_REGISTER, buffer);\n    return buffer[0] == 0x2;\n}\n\n/** Reads and returns the temperature, ignores the CRC field.\n * @return The measured temperature, or NaN if the operation failed.\n */\nfloat HTU21D::getTemperature() {\n    // Ignore the CRC byte\n    uint16_t t = 0;\n    if (1!=I2Cdev::readWord(devAddr, HTU21D_RA_TEMPERATURE, &t)){\n        return NAN;\n    }\n    // clear the status bits (bit0 & bit1) and calculate the temperature \n    // as per the formula in the datasheet\n    return ((float)(t&0xFFFC))*175.72/65536.0-46.85;\n}\n\n/** Reads and returns the humidity, ignores the CRC field\n * @return The measured humidity, or NaN if the operation failed.\n */\nfloat HTU21D::getHumidity() {\n    // Ignore the CRC byte\n    uint16_t t = 0;\n    if (1!=I2Cdev::readWord(devAddr, HTU21D_RA_HUMIDITY, &t)){\n        return NAN;\n    }\n    // clear the status bits (bit0 & bit1) and calculate the humidity \n    // as per the formula in the datasheet\n    return ((float)(t&0xFFFC))*125.0/65536.0-6.0;\n}\n\n/** Does a soft reset of the HTU21D\n * This operation takes at least 15milliseconds.\n */\nvoid HTU21D::reset() {\n    I2Cdev::writeByte(devAddr, HTU21D_RESET, 0);\n    delay(15);\n}\n\n'