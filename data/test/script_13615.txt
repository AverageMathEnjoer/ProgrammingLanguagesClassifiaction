b'package co.joebirch.composeplayground.material\n\nimport androidx.compose.material.Text\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.material.RadioButton\nimport androidx.compose.material.RadioButtonDefaults\nimport androidx.compose.material.RadioButtonDefaults.colors\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.dp\nimport co.joebirch.composeplayground.ComposableLayout\n\nobject RadioButtonView : ComposableLayout {\n\n    @Composable\n    override fun build() {\n        Column(\n            modifier = Modifier\n                .fillMaxSize()\n                .padding(32.dp),\n            verticalArrangement = Arrangement.SpaceEvenly,\n            horizontalAlignment = Alignment.CenterHorizontally\n        ) {\n            RadioButtonWithLabel("Test")\n        }\n    }\n\n}\n\nclass RadioState(var selectedOption: String? = null)\n\n@Composable\nfun MinimalRadioButton(\n    text: String\n) {\n    val state = remember { mutableStateOf("") }\n    RadioButton(\n        selected = state.value == text,\n        onClick = {\n            state.value = text\n        }\n    )\n}\n\n\n@Composable\nfun DisabledRadioButton(\n    text: String\n) {\n    val state = remember { mutableStateOf("") }\n    RadioButton(\n        selected = state.value == text,\n        onClick = {\n            state.value = text\n        },\n        enabled = false\n    )\n}\n\n@Preview\n@Composable\nfun SelectedColoreRadioButton(\n    text: String\n) {\n    val state = remember { mutableStateOf("") }\n    RadioButton(\n        selected = state.value == text,\n        onClick = {\n            state.value = text\n        },\n        colors = RadioButtonDefaults.colors(\n            selectedColor = Color.Red,\n            disabledColor = Color.LightGray,\n            unselectedColor = Color.Gray\n        )\n    )\n}\n\n@Preview\n@Composable\nfun UnselectedColoreRadioButton(\n    text: String\n) {\n    val state = remember { mutableStateOf("") }\n    RadioButton(\n        selected = state.value == text,\n        onClick = {\n            state.value = text\n        },\n        colors = colors(\n            unselectedColor = Color.Blue\n        )\n    )\n}\n\n@Preview\n@Composable\nfun DisabledColoreRadioButton(\n    text: String\n) {\n    val state = remember { mutableStateOf("") }\n    RadioButton(\n        selected = state.value == text,\n        onClick = {\n            state.value = text\n        },\n        colors = colors(\n            disabledColor = Color.Green,\n        )\n    )\n}\n\n@Composable\nfun RadioButtonWithLabel(\n    text: String\n) {\n    val state = remember { mutableStateOf("") }\n    Row(modifier = Modifier.padding(10.dp)) {\n        RadioButton(\n            selected = state.value == text,\n            onClick = {\n                state.value = text\n            }\n        )\n        Text(\n            text = text,\n            modifier = Modifier.padding(start = 18.dp)\n        )\n    }\n}\n\n@Composable\nfun RadioButtonGroup(\n    items: List<String>\n) {\n    val state = remember { mutableStateOf("") }\n    Column {\n        items.forEach { item ->\n            Row(modifier = Modifier.padding(10.dp)) {\n                RadioButton(\n                    selected = state.value == item,\n                    onClick = {\n                        state.value = item\n                    }\n                )\n                Text(\n                    text = item,\n                    modifier = Modifier.padding(start = 18.dp)\n                )\n            }\n        }\n    }\n}'