b'/*\n * Copyright (C) 2015 Naman Dwivedi\n *\n * Licensed under the GNU General Public License v3\n *\n * This is free software: you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n */\n\npackage com.naman14.timber.utils;\n\nimport android.app.Activity;\nimport android.content.ContentResolver;\nimport android.content.ContentUris;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.pm.PackageManager;\nimport android.database.Cursor;\nimport android.graphics.Color;\nimport android.media.MediaMetadataRetriever;\nimport android.media.audiofx.AudioEffect;\nimport android.net.Uri;\nimport android.os.Build;\nimport android.provider.BaseColumns;\nimport android.provider.MediaStore;\nimport androidx.annotation.NonNull;\n\nimport android.util.Log;\nimport android.util.TypedValue;\nimport android.widget.Toast;\n\nimport com.afollestad.materialdialogs.DialogAction;\nimport com.afollestad.materialdialogs.MaterialDialog;\nimport com.naman14.timber.MusicPlayer;\nimport com.naman14.timber.R;\nimport com.naman14.timber.adapters.BaseQueueAdapter;\nimport com.naman14.timber.adapters.BaseSongAdapter;\nimport com.naman14.timber.provider.RecentStore;\nimport com.naman14.timber.provider.SongPlayCount;\n\nimport java.io.File;\nimport java.net.InetAddress;\nimport java.net.NetworkInterface;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class TimberUtils {\n\n    public static final String MUSIC_ONLY_SELECTION = MediaStore.Audio.AudioColumns.IS_MUSIC + "=1"\n            + " AND " + MediaStore.Audio.AudioColumns.TITLE + " != \'\'";\n\n    public static boolean isOreo() {\n        return Build.VERSION.SDK_INT >= Build.VERSION_CODES.O;\n    }\n\n    public static boolean isMarshmallow() {\n        return Build.VERSION.SDK_INT >= Build.VERSION_CODES.M;\n    }\n\n    public static boolean isLollipop() {\n        return Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP;\n    }\n\n\n    public static boolean isJellyBeanMR2() {\n        return Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2;\n    }\n\n    public static boolean isJellyBean() {\n        return Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN;\n    }\n\n    public static boolean isJellyBeanMR1() {\n        return Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1;\n    }\n\n    public static Uri getAlbumArtUri(long albumId) {\n        return ContentUris.withAppendedId(Uri.parse("content://media/external/audio/albumart"), albumId);\n    }\n    public static String getAlbumArtForFile(String filePath) {\n        MediaMetadataRetriever mmr = new MediaMetadataRetriever();\n        mmr.setDataSource(filePath);\n\n        return mmr.extractMetadata(MediaMetadataRetriever.METADATA_KEY_ALBUM);\n    }\n\n    public static final String makeCombinedString(final Context context, final String first,\n                                                  final String second) {\n        final String formatter = context.getResources().getString(R.string.combine_two_strings);\n        return String.format(formatter, first, second);\n    }\n\n    public static final String makeLabel(final Context context, final int pluralInt,\n                                         final int number) {\n        return context.getResources().getQuantityString(pluralInt, number, number);\n    }\n\n    public static final String makeShortTimeString(final Context context, long secs) {\n        long hours, mins;\n\n        hours = secs / 3600;\n        secs %= 3600;\n        mins = secs / 60;\n        secs %= 60;\n\n        final String durationFormat = context.getResources().getString(\n                hours == 0 ? R.string.durationformatshort : R.string.durationformatlong);\n        return String.format(durationFormat, hours, mins, secs);\n    }\n\n    public static int getActionBarHeight(Context context) {\n        int mActionBarHeight;\n        TypedValue mTypedValue = new TypedValue();\n\n        context.getTheme().resolveAttribute(R.attr.actionBarSize, mTypedValue, true);\n\n        mActionBarHeight = TypedValue.complexToDimensionPixelSize(mTypedValue.data, context.getResources().getDisplayMetrics());\n\n        return mActionBarHeight;\n    }\n\n    public static final int getSongCountForPlaylist(final Context context, final long playlistId) {\n        Cursor c = context.getContentResolver().query(\n                MediaStore.Audio.Playlists.Members.getContentUri("external", playlistId),\n                new String[]{BaseColumns._ID}, MUSIC_ONLY_SELECTION, null, null);\n\n        if (c != null) {\n            int count = 0;\n            if (c.moveToFirst()) {\n                count = c.getCount();\n            }\n            c.close();\n            c = null;\n            return count;\n        }\n\n        return 0;\n    }\n\n    public static boolean hasEffectsPanel(final Activity activity) {\n        final PackageManager packageManager = activity.getPackageManager();\n        return packageManager.resolveActivity(createEffectsIntent(),\n                PackageManager.MATCH_DEFAULT_ONLY) != null;\n    }\n\n    public static Intent createEffectsIntent() {\n        final Intent effects = new Intent(AudioEffect.ACTION_DISPLAY_AUDIO_EFFECT_CONTROL_PANEL);\n        effects.putExtra(AudioEffect.EXTRA_AUDIO_SESSION, MusicPlayer.getAudioSessionId());\n        return effects;\n    }\n\n    public static int getBlackWhiteColor(int color) {\n        double darkness = 1 - (0.299 * Color.red(color) + 0.587 * Color.green(color) + 0.114 * Color.blue(color)) / 255;\n        if (darkness >= 0.5) {\n            return Color.WHITE;\n        } else return Color.BLACK;\n    }\n\n    public enum IdType {\n        NA(0),\n        Artist(1),\n        Album(2),\n        Playlist(3);\n\n        public final int mId;\n\n        IdType(final int id) {\n            mId = id;\n        }\n\n        public static IdType getTypeById(int id) {\n            for (IdType type : values()) {\n                if (type.mId == id) {\n                    return type;\n                }\n            }\n\n            throw new IllegalArgumentException("Unrecognized id: " + id);\n        }\n    }\n\n    public enum PlaylistType {\n        LastAdded(-1, R.string.playlist_last_added),\n        RecentlyPlayed(-2, R.string.playlist_recently_played),\n        TopTracks(-3, R.string.playlist_top_tracks);\n\n        public long mId;\n        public int mTitleId;\n\n        PlaylistType(long id, int titleId) {\n            mId = id;\n            mTitleId = titleId;\n        }\n\n        public static PlaylistType getTypeById(long id) {\n            for (PlaylistType type : PlaylistType.values()) {\n                if (type.mId == id) {\n                    return type;\n                }\n            }\n\n            return null;\n        }\n    }\n\n    public static void removeFromPlaylist(final Context context, final long id,\n                                          final long playlistId) {\n        final Uri uri = MediaStore.Audio.Playlists.Members.getContentUri("external", playlistId);\n        final ContentResolver resolver = context.getContentResolver();\n        resolver.delete(uri, MediaStore.Audio.Playlists.Members.AUDIO_ID + " = ? ", new String[]{\n                Long.toString(id)\n        });\n    }\n\n    public static void clearTopTracks(Context context) {\n        SongPlayCount.getInstance(context).deleteAll();\n    }\n\n    public static void clearRecent(Context context) {\n        RecentStore.getInstance(context).deleteAll();\n    }\n\n    public static void clearLastAdded(Context context) {\n        PreferencesUtility.getInstance(context)\n                .setLastAddedCutoff(System.currentTimeMillis());\n    }\n\n    public static void showDeleteDialog(final Context context, final String name, final long[] list, final BaseSongAdapter adapter, final int pos) {\n\n        new MaterialDialog.Builder(context)\n                .title("Delete song?")\n                .content("Are you sure you want to delete " + name + " ?")\n                .positiveText("Delete")\n                .negativeText("Cancel")\n                .onPositive(new MaterialDialog.SingleButtonCallback() {\n                    @Override\n                    public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {\n                        TimberUtils.deleteTracks(context, list);\n                        adapter.removeSongAt(pos);\n                        adapter.notifyItemRemoved(pos);\n                        adapter.notifyItemRangeChanged(pos, adapter.getItemCount());\n                    }\n                })\n                .onNegative(new MaterialDialog.SingleButtonCallback() {\n                    @Override\n                    public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {\n                        dialog.dismiss();\n                    }\n                })\n                .show();\n    }\n\n    public static void showDeleteDialog(final Context context, final String name, final long[] list, final BaseQueueAdapter qAdapter, final int pos) {\n\n        new MaterialDialog.Builder(context)\n                .title("Delete song?")\n                .content("Are you sure you want to delete " + name + " ?")\n                .positiveText("Delete")\n                .negativeText("Cancel")\n                .onPositive(new MaterialDialog.SingleButtonCallback() {\n                    @Override\n                    public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {\n                        TimberUtils.deleteTracks(context, list);\n                        qAdapter.removeSongAt(pos);\n                        qAdapter.notifyItemRemoved(pos);\n                        qAdapter.notifyItemRangeChanged(pos, qAdapter.getItemCount());\n                    }\n                })\n                .onNegative(new MaterialDialog.SingleButtonCallback() {\n                    @Override\n                    public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {\n                        dialog.dismiss();\n                    }\n                })\n                .show();\n    }\n\n\n    public static void deleteTracks(final Context context, final long[] list) {\n        final String[] projection = new String[]{\n                BaseColumns._ID, MediaStore.MediaColumns.DATA, MediaStore.Audio.AudioColumns.ALBUM_ID\n        };\n        final StringBuilder selection = new StringBuilder();\n        selection.append(BaseColumns._ID + " IN (");\n        for (int i = 0; i < list.length; i++) {\n            selection.append(list[i]);\n            if (i < list.length - 1) {\n                selection.append(",");\n            }\n        }\n        selection.append(")");\n        final Cursor c = context.getContentResolver().query(\n                MediaStore.Audio.Media.EXTERNAL_CONTENT_URI, projection, selection.toString(),\n                null, null);\n        if (c != null) {\n            // Step 1: Remove selected tracks from the current playlist, as well\n            // as from the album art cache\n            c.moveToFirst();\n            while (!c.isAfterLast()) {\n                // Remove from current playlist\n                final long id = c.getLong(0);\n                MusicPlayer.removeTrack(id);\n                // Remove the track from the play count\n                SongPlayCount.getInstance(context).removeItem(id);\n                // Remove any items in the recents database\n                RecentStore.getInstance(context).removeItem(id);\n                c.moveToNext();\n            }\n\n            // Step 2: Remove selected tracks from the database\n            context.getContentResolver().delete(MediaStore.Audio.Media.EXTERNAL_CONTENT_URI,\n                    selection.toString(), null);\n\n            // Step 3: Remove files from card\n            c.moveToFirst();\n            while (!c.isAfterLast()) {\n                final String name = c.getString(1);\n                final File f = new File(name);\n                try { // File.delete can throw a security exception\n                    if (!f.delete()) {\n                        // I\'m not sure if we\'d ever get here (deletion would\n                        // have to fail, but no exception thrown)\n                        Log.e("MusicUtils", "Failed to delete file " + name);\n                    }\n                    c.moveToNext();\n                } catch (final SecurityException ex) {\n                    c.moveToNext();\n                }\n            }\n            c.close();\n        }\n\n        final String message = makeLabel(context, R.plurals.NNNtracksdeleted, list.length);\n\n        Toast.makeText(context, message, Toast.LENGTH_SHORT).show();\n        context.getContentResolver().notifyChange(Uri.parse("content://media"), null);\n        MusicPlayer.refresh();\n    }\n\n    public static void shareTrack(final Context context, long id) {\n\n        try {\n            Intent share = new Intent(Intent.ACTION_SEND);\n            share.setType("audio/*");\n            share.putExtra(Intent.EXTRA_STREAM, getSongUri(context, id));\n            context.startActivity(Intent.createChooser(share, "Share"));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static Uri getSongUri(Context context, long id) {\n        final String[] projection = new String[]{\n                BaseColumns._ID, MediaStore.MediaColumns.DATA, MediaStore.Audio.AudioColumns.ALBUM_ID\n        };\n        final StringBuilder selection = new StringBuilder();\n        selection.append(BaseColumns._ID + " IN (");\n        selection.append(id);\n        selection.append(")");\n        final Cursor c = context.getContentResolver().query(\n                MediaStore.Audio.Media.EXTERNAL_CONTENT_URI, projection, selection.toString(),\n                null, null);\n\n        if (c == null) {\n            return null;\n        }\n        c.moveToFirst();\n\n\n        try {\n\n            Uri uri = Uri.parse(c.getString(1));\n            c.close();\n\n            return uri;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    public static String getIPAddress(boolean useIPv4) {\n        try {\n            List<NetworkInterface> interfaces = Collections.list(NetworkInterface.getNetworkInterfaces());\n            for (NetworkInterface intf : interfaces) {\n                List<InetAddress> addrs = Collections.list(intf.getInetAddresses());\n                for (InetAddress addr : addrs) {\n                    if (!addr.isLoopbackAddress()) {\n                        String sAddr = addr.getHostAddress();\n                        //boolean isIPv4 = InetAddressUtils.isIPv4Address(sAddr);\n                        boolean isIPv4 = sAddr.indexOf(\':\')<0;\n\n                        if (useIPv4) {\n                            if (isIPv4)\n                                return sAddr;\n                        } else {\n                            if (!isIPv4) {\n                                int delim = sAddr.indexOf(\'%\'); // drop ip6 zone suffix\n                                return delim<0 ? sAddr.toUpperCase() : sAddr.substring(0, delim).toUpperCase();\n                            }\n                        }\n                    }\n                }\n            }\n        } catch (Exception ex) { }\n        return "";\n    }\n\n}\n'