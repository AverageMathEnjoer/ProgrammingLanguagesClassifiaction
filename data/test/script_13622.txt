b'module Rest.Gen.Utils\n  ( readContent\n  , groupByFirst\n  , fst3\n  , snd3\n  , thd3\n  , upFirst\n  , downFirst\n  , mapHead\n  ) where\n\nimport Data.Char\n\nimport Paths_rest_gen (getDataFileName)\n\nreadContent :: String -> IO String\nreadContent f = getDataFileName f >>= readFile\n\ngroupByFirst :: Eq a => [(a,b)] -> [(a,[b])]\ngroupByFirst = foldr add []\n  where add (k, v) l =\n          case lookup k l of\n            Nothing -> (k,[v]) : l\n            Just vs -> (k, v: vs) : filter ((/=k) . fst) l\n\nfst3 :: (a, b, c) -> a\nfst3 (a, _, _) = a\n\nsnd3 :: (a, b, c) -> b\nsnd3 (_, b, _) = b\n\nthd3 :: (a, b, c) -> c\nthd3 (_, _, c) = c\n\nupFirst :: String -> String\nupFirst = mapHead toUpper\n\ndownFirst :: String -> String\ndownFirst = mapHead toLower\n\nmapHead :: (a -> a) -> [a] -> [a]\nmapHead _ [] = []\nmapHead f (x : xs) = f x : xs\n'