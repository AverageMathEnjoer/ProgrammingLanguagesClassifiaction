b'package com.zzg.mybatis.generator.controller;\n\nimport com.zzg.mybatis.generator.model.DatabaseConfig;\nimport com.zzg.mybatis.generator.util.ConfigHelper;\nimport com.zzg.mybatis.generator.view.AlertUtil;\nimport javafx.fxml.FXML;\nimport javafx.scene.control.ChoiceBox;\nimport javafx.scene.control.TextField;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.net.URL;\nimport java.util.ResourceBundle;\n\npublic class DbConnectionController extends BaseFXController {\n\n    private static final Logger _LOG = LoggerFactory.getLogger(DbConnectionController.class);\n\n    @FXML\n    protected TextField nameField;\n    @FXML\n    protected TextField hostField;\n    @FXML\n    protected TextField portField;\n    @FXML\n    protected TextField userNameField;\n    @FXML\n    protected TextField passwordField;\n    @FXML\n    protected TextField schemaField;\n    @FXML\n    protected ChoiceBox<String> encodingChoice;\n    @FXML\n    protected ChoiceBox<String> dbTypeChoice;\n    protected MainUIController mainUIController;\n    protected TabPaneController tabPaneController;\n    protected boolean isUpdate = false;\n    protected Integer primayKey;\n\n    @Override\n    public void initialize(URL location, ResourceBundle resources) {\n    }\n\n    final void saveConnection() {\n        DatabaseConfig config = extractConfigForUI();\n        if (config == null) {\n            return;\n        }\n        try {\n            ConfigHelper.saveDatabaseConfig(this.isUpdate, primayKey, config);\n            this.tabPaneController.getDialogStage().close();\n            mainUIController.loadLeftDBTree();\n        } catch (Exception e) {\n            _LOG.error(e.getMessage(), e);\n            AlertUtil.showErrorAlert(e.getMessage());\n        }\n    }\n\n    void setMainUIController(MainUIController controller) {\n        this.mainUIController = controller;\n        super.setDialogStage(mainUIController.getDialogStage());\n    }\n\n    public void setTabPaneController(TabPaneController tabPaneController) {\n        this.tabPaneController = tabPaneController;\n    }\n\n    public DatabaseConfig extractConfigForUI() {\n        String name = nameField.getText();\n        String host = hostField.getText();\n        String port = portField.getText();\n        String userName = userNameField.getText();\n        String password = passwordField.getText();\n        String encoding = encodingChoice.getValue();\n        String dbType = dbTypeChoice.getValue();\n        String schema = schemaField.getText();\n        DatabaseConfig config = new DatabaseConfig();\n        config.setName(name);\n        config.setDbType(dbType);\n        config.setHost(host);\n        config.setPort(port);\n        config.setUsername(userName);\n        config.setPassword(password);\n        config.setSchema(schema);\n        config.setEncoding(encoding);\n        if (StringUtils.isAnyEmpty(name, host, port, userName, encoding, dbType, schema)) {\n            AlertUtil.showWarnAlert("\xe5\xaf\x86\xe7\xa0\x81\xe4\xbb\xa5\xe5\xa4\x96\xe5\x85\xb6\xe4\xbb\x96\xe5\xad\x97\xe6\xae\xb5\xe5\xbf\x85\xe5\xa1\xab");\n            return null;\n        }\n        return config;\n    }\n\n    public void setConfig(DatabaseConfig config) {\n        isUpdate = true;\n        primayKey = config.getId(); // save id for update config\n        nameField.setText(config.getName());\n        hostField.setText(config.getHost());\n        portField.setText(config.getPort());\n        userNameField.setText(config.getUsername());\n        passwordField.setText(config.getPassword());\n        encodingChoice.setValue(config.getEncoding());\n        dbTypeChoice.setValue(config.getDbType());\n        schemaField.setText(config.getSchema());\n    }\n\n}\n'