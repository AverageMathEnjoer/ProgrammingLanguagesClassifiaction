b'/*\n * Copyright (C) 2015 Naman Dwivedi\n *\n * Licensed under the GNU General Public License v3\n *\n * This is free software: you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n */\n\npackage com.naman14.timber.fragments;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.graphics.Rect;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.preference.PreferenceManager;\nimport androidx.annotation.Nullable;\nimport androidx.fragment.app.Fragment;\nimport androidx.fragment.app.FragmentStatePagerAdapter;\nimport androidx.appcompat.app.ActionBar;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.recyclerview.widget.GridLayoutManager;\nimport androidx.recyclerview.widget.RecyclerView;\nimport androidx.appcompat.widget.Toolbar;\nimport android.view.LayoutInflater;\nimport android.view.Menu;\nimport android.view.MenuInflater;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.view.ViewGroup;\n\nimport com.afollestad.appthemeengine.ATE;\nimport com.naman14.timber.R;\nimport com.naman14.timber.adapters.PlaylistAdapter;\nimport com.naman14.timber.dataloaders.PlaylistLoader;\nimport com.naman14.timber.dialogs.CreatePlaylistDialog;\nimport com.naman14.timber.models.Playlist;\nimport com.naman14.timber.subfragments.PlaylistPagerFragment;\nimport com.naman14.timber.utils.Constants;\nimport com.naman14.timber.utils.PreferencesUtility;\nimport com.naman14.timber.widgets.DividerItemDecoration;\nimport com.naman14.timber.widgets.MultiViewPager;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class PlaylistFragment extends Fragment {\n\n    private int playlistcount;\n    private FragmentStatePagerAdapter adapter;\n    private MultiViewPager pager;\n    private RecyclerView recyclerView;\n    private GridLayoutManager layoutManager;\n    private RecyclerView.ItemDecoration itemDecoration;\n\n    private PreferencesUtility mPreferences;\n    private boolean isGrid;\n    private boolean isDefault;\n    private boolean showAuto;\n    private PlaylistAdapter mAdapter;\n\n    private List<Playlist> playlists = new ArrayList<>();\n\n    @Override\n    public void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        mPreferences = PreferencesUtility.getInstance(getActivity());\n        isGrid = mPreferences.getPlaylistView() == Constants.PLAYLIST_VIEW_GRID;\n        isDefault = mPreferences.getPlaylistView() == Constants.PLAYLIST_VIEW_DEFAULT;\n        showAuto = mPreferences.showAutoPlaylist();\n\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        View rootView = inflater.inflate(\n                R.layout.fragment_playlist, container, false);\n\n        Toolbar toolbar = (Toolbar) rootView.findViewById(R.id.toolbar);\n        pager = (MultiViewPager) rootView.findViewById(R.id.playlistpager);\n        recyclerView = (RecyclerView) rootView.findViewById(R.id.recyclerview);\n\n\n        ((AppCompatActivity) getActivity()).setSupportActionBar(toolbar);\n\n        final ActionBar ab = ((AppCompatActivity) getActivity()).getSupportActionBar();\n        ab.setHomeAsUpIndicator(R.drawable.ic_menu);\n        ab.setDisplayHomeAsUpEnabled(true);\n        ab.setTitle(R.string.playlists);\n\n        playlists = PlaylistLoader.getPlaylists(getActivity(), showAuto);\n        playlistcount = playlists.size();\n\n        if (isDefault) {\n            initPager();\n        } else {\n            initRecyclerView();\n        }\n\n        return rootView;\n\n    }\n\n\n    private void initPager() {\n        pager.setVisibility(View.VISIBLE);\n        recyclerView.setVisibility(View.GONE);\n        recyclerView.setAdapter(null);\n        adapter = new FragmentStatePagerAdapter(getChildFragmentManager()) {\n\n            @Override\n            public int getCount() {\n                return playlistcount;\n            }\n\n            @Override\n            public Fragment getItem(int position) {\n                return PlaylistPagerFragment.newInstance(position);\n            }\n\n        };\n        pager.setAdapter(adapter);\n        pager.setOffscreenPageLimit(3);\n    }\n\n    private void initRecyclerView() {\n        recyclerView.setVisibility(View.VISIBLE);\n        pager.setVisibility(View.GONE);\n        setLayoutManager();\n        mAdapter = new PlaylistAdapter(getActivity(), playlists);\n\n        recyclerView.setAdapter(mAdapter);\n        //to add spacing between cards\n        if (getActivity() != null) {\n            setItemDecoration();\n        }\n    }\n\n\n    private void setLayoutManager() {\n        if (isGrid) {\n            layoutManager = new GridLayoutManager(getActivity(), 2);\n        } else {\n            layoutManager = new GridLayoutManager(getActivity(), 1);\n        }\n        recyclerView.setLayoutManager(layoutManager);\n    }\n\n    private void setItemDecoration() {\n        if (isGrid) {\n            int spacingInPixels = getActivity().getResources().getDimensionPixelSize(R.dimen.spacing_card_album_grid);\n            itemDecoration = new SpacesItemDecoration(spacingInPixels);\n        } else {\n            itemDecoration = new DividerItemDecoration(getActivity(), DividerItemDecoration.VERTICAL_LIST);\n        }\n        recyclerView.addItemDecoration(itemDecoration);\n    }\n\n    private void updateLayoutManager(int column) {\n        recyclerView.removeItemDecoration(itemDecoration);\n        recyclerView.setAdapter(new PlaylistAdapter(getActivity(), PlaylistLoader.getPlaylists(getActivity(), showAuto)));\n        layoutManager.setSpanCount(column);\n        layoutManager.requestLayout();\n        setItemDecoration();\n    }\n\n\n    public class SpacesItemDecoration extends RecyclerView.ItemDecoration {\n        private int space;\n\n        public SpacesItemDecoration(int space) {\n            this.space = space;\n        }\n\n        @Override\n        public void getItemOffsets(Rect outRect, View view,\n                                   RecyclerView parent, RecyclerView.State state) {\n\n\n            outRect.left = space;\n            outRect.top = space;\n            outRect.right = space;\n            outRect.bottom = space;\n\n        }\n    }\n\n\n    @Override\n    public void onViewCreated(View view, Bundle savedInstanceState) {\n        super.onViewCreated(view, savedInstanceState);\n        if (PreferenceManager.getDefaultSharedPreferences(getActivity()).getBoolean("dark_theme", false)) {\n            ATE.apply(this, "dark_theme");\n        } else {\n            ATE.apply(this, "light_theme");\n        }\n    }\n\n    @Override\n    public void onActivityCreated(final Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n        setHasOptionsMenu(true);\n    }\n\n    @Override\n    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {\n        super.onCreateOptionsMenu(menu, inflater);\n        inflater.inflate(R.menu.menu_playlist, menu);\n\n    }\n\n    @Override\n    public void onPrepareOptionsMenu(Menu menu) {\n        super.onPrepareOptionsMenu(menu);\n        if (showAuto) {\n            menu.findItem(R.id.action_view_auto_playlists).setTitle("Hide auto playlists");\n        } else menu.findItem(R.id.action_view_auto_playlists).setTitle("Show auto playlists");\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        switch (item.getItemId()) {\n            case R.id.action_new_playlist:\n                CreatePlaylistDialog.newInstance().show(getChildFragmentManager(), "CREATE_PLAYLIST");\n                return true;\n            case R.id.menu_show_as_list:\n                mPreferences.setPlaylistView(Constants.PLAYLIST_VIEW_LIST);\n                isGrid = false;\n                isDefault = false;\n                initRecyclerView();\n                updateLayoutManager(1);\n                return true;\n            case R.id.menu_show_as_grid:\n                mPreferences.setPlaylistView(Constants.PLAYLIST_VIEW_GRID);\n                isGrid = true;\n                isDefault = false;\n                initRecyclerView();\n                updateLayoutManager(2);\n                return true;\n            case R.id.menu_show_as_default:\n                mPreferences.setPlaylistView(Constants.PLAYLIST_VIEW_DEFAULT);\n                isDefault = true;\n                initPager();\n                return true;\n            case R.id.action_view_auto_playlists:\n                if (showAuto) {\n                    showAuto = false;\n                    mPreferences.setToggleShowAutoPlaylist(false);\n                } else {\n                    showAuto = true;\n                    mPreferences.setToggleShowAutoPlaylist(true);\n                }\n                reloadPlaylists();\n                getActivity().invalidateOptionsMenu();\n                break;\n\n        }\n        return super.onOptionsItemSelected(item);\n    }\n\n    public void updatePlaylists(final long id) {\n        playlists = PlaylistLoader.getPlaylists(getActivity(), showAuto);\n        playlistcount = playlists.size();\n\n        if (isDefault) {\n            adapter.notifyDataSetChanged();\n            if (id != -1) {\n                Handler handler = new Handler();\n                handler.postDelayed(new Runnable() {\n                    @Override\n                    public void run() {\n                        for (int i = 0; i < playlists.size(); i++) {\n                            long playlistid = playlists.get(i).id;\n                            if (playlistid == id) {\n                                pager.setCurrentItem(i);\n                                break;\n                            }\n                        }\n                    }\n                }, 200);\n            }\n\n        } else {\n            mAdapter.updateDataSet(playlists);\n        }\n    }\n\n    public void reloadPlaylists() {\n        playlists = PlaylistLoader.getPlaylists(getActivity(), showAuto);\n        playlistcount = playlists.size();\n\n        if (isDefault) {\n            initPager();\n        } else {\n            initRecyclerView();\n        }\n    }\n\n    @Override\n    public void onActivityResult(int requestCode, int resultCode, Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n\n        if (requestCode == Constants.ACTION_DELETE_PLAYLIST) {\n            if (resultCode == Activity.RESULT_OK) {\n                reloadPlaylists();\n            }\n\n        }\n    }\n}\n\n'