b'import Data.Char\nimport Test.Hspec\n\n----------------------------------------------------------------\n\nmain :: IO ()\nmain = hspec $ do\n    describe "my_paren_seq" $\n        it "counts parenthesis sequentially" $ do\n            my_paren_seq ""       `shouldBe` (0,"")\n            my_paren_seq "()a"    `shouldBe` (1,"a")\n            my_paren_seq "()()()" `shouldBe` (3,"")\n    describe "my_paren_req" $\n        it "counts parenthesis recursively" $ do\n            my_paren_rec ""       `shouldBe` (0,"")\n            my_paren_rec "()a"    `shouldBe` (1,"a")\n            my_paren_rec "((()))" `shouldBe` (3,"")\n    describe "my_paren" $\n        it "counts parenthesis" $ do\n            my_paren ""       `shouldBe` (0,"")\n            my_paren "()a"    `shouldBe` (1,"a")\n            my_paren "()()()" `shouldBe` (3,"")\n            my_paren "((()))" `shouldBe` (3,"")\n            my_paren "((()()))()(()()())" `shouldBe` (9,"")\n    describe "my_expr_simple" $\n        it "calculates a simple mathematical expression" $ do\n            my_expr_simple "1"      `shouldBe` (1,"")\n            my_expr_simple "1+2"    `shouldBe` (3,"")\n            my_expr_simple "1+2+3a" `shouldBe` (6,"a")\n    describe "my_expr" $\n        it "calculates a simple mathematical expression" $ do\n            my_expr "1"             `shouldBe` (1,"")\n            my_expr "1+2"           `shouldBe` (3,"")\n            my_expr "1+2+3a"        `shouldBe` (6,"a")\n            my_expr "(1+2)+3"       `shouldBe` (6,"")\n            my_expr "(1+2)*3"       `shouldBe` (9,"")\n            my_expr "(1+2)*(3+4)+5" `shouldBe` (26,"")\n\n----------------------------------------------------------------\n----------------------------------------------------------------\n\nmy_close :: String -> (Int, String)\nmy_close (\')\':left) = (1,left)\nmy_close _          = error "no my_close parenthesis"\n\n----------------------------------------------------------------\n-- Counting parenthesis sequentially\n\nmy_paren_seq :: String -> (Int, String)\nmy_paren_seq (\'(\':left0) = my_open_seq left0\nmy_paren_seq left0       = (0,left0)\n\nmy_open_seq :: String -> (Int, String)\nmy_open_seq left0 = (cnt1+cnt2, left2)\n  where\n    (cnt1,left1) = my_close     left0\n    (cnt2,left2) = my_paren_seq left1\n\n----------------------------------------------------------------\n-- Counting parenthesis recursively\n\nmy_paren_rec :: String -> (Int, String)\nmy_paren_rec (\'(\':left0) = my_open_rec left0\nmy_paren_rec left0       = (0,left0)\n\nmy_open_rec :: String -> (Int, String)\nmy_open_rec left0 = (cnt1+cnt2, left2)\n  where\n    (cnt1,left1) = my_paren_rec left0\n    (cnt2,left2) = my_close     left1\n\n----------------------------------------------------------------\n-- Counting parenthesis generally\n\nmy_paren :: String -> (Int, String)\nmy_paren (\'(\':left0) = my_open left0\nmy_paren left0       = (0,left0)\n\nmy_open :: String -> (Int, String)\nmy_open left0 = (cnt1+cnt2+cnt3, left3)\n  where\n    (cnt1,left1) = my_paren left0\n    (cnt2,left2) = my_close left1\n    (cnt3,left3) = my_paren left2\n\n----------------------------------------------------------------\n----------------------------------------------------------------\n-- Parser for simple mathematical expressions\n\n{-\n<expr_simple> ::= <nat> (\xe2\x80\x99+\xe2\x80\x99 <expr_simple> | e)\n<nat>         ::= \xe2\x80\x990\xe2\x80\x99 | \xe2\x80\x991\xe2\x80\x99 | \xe2\x80\x992\xe2\x80\x99 | ...\n-}\n\nmy_nat :: String -> (Int, String)\nmy_nat (x:xs)\n  | isDigit x = (c2i x, xs)\nmy_nat _      = error "my_nat"\n\nc2i :: Char -> Int\nc2i x = ord x - ord \'0\'\n\nmy_first :: (a -> c) -> (a,b) -> (c,b)\nmy_first f (x,y) = (f x, y)\n\nmy_expr_simple :: String -> (Int, String)\nmy_expr_simple xs = case my_nat xs of\n    (x, \'+\':left) -> my_first (x+) (my_expr_simple left)\n    xl            -> xl\n\n----------------------------------------------------------------\n-- Parser for simple mathematical expressions\n\n{-\n<expr>   ::= <term>   (\xe2\x80\x99+\xe2\x80\x99 <expr> | e)\n<term>   ::= <factor> (\xe2\x80\x99*\xe2\x80\x99 <term> | e)\n<factor> ::= \xe2\x80\x99(\xe2\x80\x99 <expr> \xe2\x80\x99)\xe2\x80\x99 | <nat>\n<nat>    ::=\xe2\x80\x990\xe2\x80\x99 | \xe2\x80\x991\xe2\x80\x99 | \xe2\x80\x992\xe2\x80\x99 | ...\n-}\n\nmy_expr :: String -> (Int, String)\nmy_expr xs = case my_term xs of\n    (x, \'+\':left) -> my_first (x+) (my_expr left)\n    xl            -> xl\n\nmy_term :: String -> (Int, String)\nmy_term xs = case my_factor xs of\n    (x, \'*\':left) -> my_first (x*) (my_term left)\n    xl            -> xl\n\nmy_factor :: String -> (Int, String)\nmy_factor (\'(\':xs) = case my_expr xs of\n    (x, \')\':left) -> (x,left)\n    _             -> error "no close parenthesis"\nmy_factor xs       = my_nat xs\n'