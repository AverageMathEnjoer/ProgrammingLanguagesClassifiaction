b'package com.zzg.mybatis.generator.controller;\n\nimport com.zzg.mybatis.generator.model.UITableColumnVO;\nimport com.zzg.mybatis.generator.view.AlertUtil;\nimport javafx.collections.ObservableList;\nimport javafx.fxml.FXML;\nimport javafx.scene.control.Label;\nimport javafx.scene.control.TableView;\nimport javafx.scene.control.TextField;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.mybatis.generator.internal.util.JavaBeansUtil;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.net.URL;\nimport java.util.ResourceBundle;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n/**\n * \xe5\xae\x9a\xe5\x88\xb6\xe5\x88\x97\xe9\x85\x8d\xe7\xbd\xaeUI Controller\n *\n * @author xueqi\n * @date 2021-06-24\n */\npublic class TableColumnConfigsController extends BaseFXController {\n\n\tprivate static final Logger _LOG                  = LoggerFactory.getLogger(TableColumnConfigsController.class);\n\tprivate static final String COL_NAME_PREFIX_REGEX = "(?<=%s)[^\\"]+";   // pattern regex and split prefix: (?<=aggregate_|f_)[^"]+  f_ or d_ prefix\n\tprivate static final String OR_REGEX              = "|";\n\n\t@FXML\n\tprivate Label     currentTableNameLabel;\n\t@FXML\n\tprivate TextField columnNamePrefixTextLabel;\n\n\tprivate TableView<UITableColumnVO> columnListView;\n\tprivate String                     tableName;\n\n\t@Override\n\tpublic void initialize(URL location, ResourceBundle resources) {\n\t\t// do nothing\n\t}\n\n\t@FXML\n\tpublic void cancel() {\n\t\tthis.closeDialogStage();\n\t}\n\n\t@FXML\n\tpublic void confirm() {\n\t\ttry {\n\t\t\t// 1. generator bean propert name\n\t\t\tthis.genProertyNameByColumnNamePrefix();\n\n\t\t\t// close window\n\t\t\tthis.closeDialogStage();\n\t\t} catch (Exception e) {\n\t\t\t_LOG.error("confirm throw exception.", e);\n\t\t\tAlertUtil.showErrorAlert(e.getMessage());\n\t\t}\n\t}\n\n\tpublic void setColumnListView(TableView<UITableColumnVO> columnListView) {\n\t\tthis.columnListView = columnListView;\n\t}\n\n\tpublic void setTableName(String tableName) {\n\t\tthis.tableName = tableName;\n\t\tcurrentTableNameLabel.setText(tableName);\n\t}\n\n\tprivate void genProertyNameByColumnNamePrefix() {\n\t\tString columnNamePrefix = this.columnNamePrefixTextLabel.getText();\n\t\tif (StringUtils.isNotBlank(columnNamePrefix)) {\n\t\t\tif (StringUtils.endsWith(columnNamePrefix.trim(), OR_REGEX)) {\n\t\t\t\tcolumnNamePrefix = StringUtils.removeEnd(columnNamePrefix.trim(), OR_REGEX);\n\t\t\t}\n\n\t\t\tString regex = String.format(COL_NAME_PREFIX_REGEX, columnNamePrefix);\n\t\t\t_LOG.info("table:{}, column_name_prefix:{}, regex:{}", this.tableName, columnNamePrefix, regex);\n\n\t\t\tPattern pattern = Pattern.compile(regex, Pattern.CASE_INSENSITIVE);\n\n\t\t\tObservableList<UITableColumnVO> items = columnListView.getItems();\n\t\t\tif (CollectionUtils.isNotEmpty(items)) {\n\t\t\t\titems.stream().forEach(item -> {\n\t\t\t\t\tString  columnName = item.getColumnName();\n\t\t\t\t\tMatcher matcher    = pattern.matcher(columnName);\n\t\t\t\t\tif (matcher.find()) {\n\t\t\t\t\t\t// use first match result\n\t\t\t\t\t\tString regexColumnName = matcher.group();\n\t\t\t\t\t\tif (StringUtils.isNotBlank(regexColumnName)) {\n\t\t\t\t\t\t\tString propertyName = JavaBeansUtil.getCamelCaseString(regexColumnName, false);\n\t\t\t\t\t\t\t_LOG.debug("table:{} column_name:{} regex_column_name:{} property_name:{}", tableName, columnName, regexColumnName, propertyName);\n\n\t\t\t\t\t\t\tif (StringUtils.isNotBlank(propertyName)) item.setPropertyName(propertyName);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t_LOG.warn("table:{} column_name:{} regex_column_name is blank", tableName, columnName);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// if not match, set property name is null\n\t\t\t\t\t\titem.setPropertyName(null);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n}\n'