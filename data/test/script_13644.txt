b'/*\n * Copyright (C) 2015 tyrantgit\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage tyrantgit.explosionfield;\n\n\nimport android.content.res.Resources;\nimport android.graphics.Bitmap;\nimport android.graphics.Canvas;\nimport android.graphics.drawable.BitmapDrawable;\nimport android.graphics.drawable.Drawable;\nimport android.view.View;\nimport android.widget.ImageView;\n\npublic class Utils {\n\n    private Utils() {\n    }\n\n    private static final float DENSITY = Resources.getSystem().getDisplayMetrics().density;\n    private static final Canvas sCanvas = new Canvas();\n\n    public static int dp2Px(int dp) {\n        return Math.round(dp * DENSITY);\n    }\n\n    public static Bitmap createBitmapFromView(View view) {\n        if (view instanceof ImageView) {\n            Drawable drawable = ((ImageView) view).getDrawable();\n            if (drawable != null && drawable instanceof BitmapDrawable) {\n                return ((BitmapDrawable) drawable).getBitmap();\n            }\n        }\n        view.clearFocus();\n        Bitmap bitmap = createBitmapSafely(view.getWidth(),\n                view.getHeight(), Bitmap.Config.ARGB_8888, 1);\n        if (bitmap != null) {\n            synchronized (sCanvas) {\n                Canvas canvas = sCanvas;\n                canvas.setBitmap(bitmap);\n                view.draw(canvas);\n                canvas.setBitmap(null);\n            }\n        }\n        return bitmap;\n    }\n\n    public static Bitmap createBitmapSafely(int width, int height, Bitmap.Config config, int retryCount) {\n        try {\n            return Bitmap.createBitmap(width, height, config);\n        } catch (OutOfMemoryError e) {\n            e.printStackTrace();\n            if (retryCount > 0) {\n                System.gc();\n                return createBitmapSafely(width, height, config, retryCount - 1);\n            }\n            return null;\n        }\n    }\n}\n'