b'#define deb(x1, x2, x3) cout << #x1 << "=" << x1 << " " << #x2 << "=" << x2 << " "<< #x3 << "=" << x3 << endl;\n\nclass Solution {\npublic:\n    bool stoneGame(vector<int>& piles) {\n        int n = piles.size();\n    // dp[i][j] = max profit for first player when the game is at state [i..j]\n        vector<vector<int>> dp(n, vector<int>(n, 0));\n        for(int i = 0; i < n; i++) {\n            dp[i][i] = piles[i]; // 1 size subarrays have been computed\n            // if(i+1 < n) {\n            //     dp[i][i+1] = abs(piles[i] - piles[i+1]); // subarrays of size 2\n            // }\n        }\n        for(int len = 2; len <= n; len++) {\n            for(int i = 0; i < n; i++) {\n                int j = i + len - 1;\n                if(j >= n) continue;\n                // i .. j\n                // take the Lth stone\n                int choice1 = piles[i] - dp[i+1][j];\n\n                // take the Rth stone\n                int choice2 = piles[j] - dp[i][j-1];\n                dp[i][j] = max(choice1, choice2);\n                // cout << i << " " << j << " " << dp[i][j] << endl;\n                // deb(i, j, dp[i][j]);\n            }\n        }\n        \n        \n        return dp[0][n-1] > 0;\n    }\n};\n\n/*\n5, 3, 4, 5 -> 3,4,5 -> 3,4 -> 3\n    \n    5\n    <---------------------->17 ==> 17 - 5 = 12\n    23,....................,17\n    23<----------------------> ===> 23-7 = 16\n            7 \n    \n    \nstate = [L, R] => by how much quantity the first player wins\n\n\n[0, n-1] => +ve => first player can win -> true\n[0, n-1] => -ve => first player cant win -> false\n    \n// take the Lth stone\nchoice1 = piles[L] - win(L+1, R)\n    \n// take the Rth stone\nchoice2 = piles[R] - win(L, R-1)\n    \nwin(L, R) = max(choice1, choice2);\n\nreturn win(0, n-1) > 0 \n    \n*/\n    \n'