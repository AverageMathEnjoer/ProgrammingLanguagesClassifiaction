b'import assertk.assertThat\nimport assertk.assertions.isGreaterThan\nimport com.github.eprendre.tingshu.utils.Book\nimport com.github.eprendre.tingshu.utils.Episode\nimport org.jsoup.Jsoup\nimport org.junit.Test\nimport java.net.URLEncoder\n\n/**\n * \xe6\x81\x8b\xe5\x90\xac\xe7\xbd\x91\xe6\xb5\x8b\xe8\xaf\x95\n */\nclass LianTingUnitTest {\n\n    /**\n     * \xe6\xb5\x8b\xe8\xaf\x95\xe6\x90\x9c\xe7\xb4\xa2\n     */\n    @Test\n    fun search() {\n        val keywords = "\xe6\x9d\xa5\xe8\x87\xaa\xe9\x98\xb4\xe9\x97\xb4"\n        val encodedKeywords = URLEncoder.encode(keywords, "utf-8")\n        val page = 1\n        val url = "https://m.ting55.com/search/$encodedKeywords/page/$page"\n        val doc = Jsoup.connect(url).testConfig(false).get()\n\n        val cpage = doc.selectFirst(".cpage")\n        var totalPage = 1\n        if (cpage != null && cpage.childrenSize() > 0) {\n            totalPage = cpage.selectFirst("span").text().replace("\xe9\xa1\xb5\xe6\xac\xa1 ", "").split("/")[1].toInt()\n        }\n\n        println(totalPage)\n        val list = ArrayList<Book>()\n        val elementList = doc.select(".slist > a")\n        elementList.forEach { element ->\n            val coverUrl = element.selectFirst("dl > dt > img").absUrl("src")\n            val bookUrl = element.absUrl("href")\n            val infos = element.selectFirst("dl > dd").children()\n            val title = infos[0].text()\n            val author = infos[1].text()\n            val artist = infos[2].text()\n            val status = infos[3].text()\n            list.add(Book(coverUrl, bookUrl, title, author, artist).apply { this.status = status })\n        }\n        list.forEach { println(it) }\n        assertThat(list.size).isGreaterThan(0)\n    }\n\n    /**\n     * \xe4\xb9\xa6\xe7\xb1\x8d\xe8\xaf\xa6\xe7\xbb\x86\n     */\n    @Test\n    fun bookDetail() {\n        val doc = Jsoup.connect("https://m.ting55.com/book/14020").testConfig(false).get()\n\n        val episodes = doc.select(".plist > a").map {\n            Episode(it.text(), it.absUrl("href")).apply {\n                this.isFree = it.hasClass("f")\n            }\n        }\n        val intro = doc.selectFirst(".intro").text()\n        println(intro)\n\n        episodes.take(20).forEach { println(it) }\n        assertThat(episodes.size).isGreaterThan(0)\n    }\n\n    /**\n     * \xe5\x88\x86\xe7\xb1\xbb\n     */\n    @Test\n    fun category() {\n        val doc = Jsoup.connect("https://m.ting55.com/category/1/page/6").testConfig(true).get()\n\n        val cpage = doc.selectFirst(".cpage")\n        var totalPage = 1\n        var currentPage = 1\n        var nextUrl = ""\n        if (cpage != null) {\n            val pages = cpage.selectFirst("span").text().replace("\xe9\xa1\xb5\xe6\xac\xa1 ", "").split("/")\n            currentPage = pages[0].toInt()\n            totalPage = pages[1].toInt()\n            cpage.select("a").firstOrNull { it.text() == "\xe4\xb8\x8b\xe4\xb8\x80\xe9\xa1\xb5" }?.let {\n                nextUrl = it.absUrl("href")\n            }\n        }\n\n        println("$currentPage/$totalPage")\n        println("nextUrl: $nextUrl")\n\n        val list = ArrayList<Book>()\n        val elementList = doc.select(".clist > a")\n        elementList.forEach { element ->\n            val coverUrl = element.selectFirst("dl > dt > img").absUrl("src")\n            val bookUrl = element.absUrl("href")\n            val infos = element.selectFirst("dl > dd").children()\n            val title = infos[0].text()\n            val author = infos[1].text()\n            val artist = infos[2].text()\n            val status = infos[3].text()\n            list.add(Book(coverUrl, bookUrl, title, author, artist).apply {\n                this.status = status\n            })\n        }\n\n        list.take(5).forEach { println(it) }\n        assertThat(list.size).isGreaterThan(0)\n    }\n\n    @Test\n    fun fetchCategory() {\n        val doc = Jsoup.connect("https://ting55.com/").testConfig(true).get()\n        val navs = doc.select(".nav > a")\n            val sb = StringBuilder()\n\n            val list = navs.map { a ->\n                val href = a.absUrl("href")\n                val text = a.text()\n                return@map "CategoryTab(\\"$text\\", \\"$href\\")"\n            }.joinToString(",\\n")\n\n            sb.append(list)\n            println(sb.toString())\n    }\n}\n'