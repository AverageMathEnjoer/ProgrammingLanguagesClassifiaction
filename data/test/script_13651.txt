b"#' Compute the size of an object.\n#'\n#' \\code{object_size} works similarly to \\code{\\link{object.size}}, but counts\n#' more accurately and includes the size of environments. \\code{compare_size}\n#' makes it easy to compare the output of \\code{object_size} and\n#' \\code{object.size}.\n#'\n#' @section Environments:\n#'\n#' \\code{object_size} attempts to take into account the size of the\n#' environments associated with an object. This is particularly important\n#' for closures and formulas, since otherwise you may not realise that you've\n#' accidentally captured a large object. However, it's easy to over count:\n#' you don't want to include the size of every object in every environment\n#' leading back to the \\code{\\link{emptyenv}()}. \\code{object_size} takes\n#' a heuristic approach: it never counts the size of the global env,\n#' the base env, the empty env or any namespace.\n#'\n#' Additionally, the \\code{env} argument allows you to specify another\n#' environment at which to stop. This defaults to the environment from which\n#' \\code{object_size} is called to prevent double-counting of objects created\n#' elsewhere.\n#'\n#' @export\n#' @examples\n#' # object.size doesn't keep track of shared elements in an object\n#' # object_size does\n#' x <- 1:1e4\n#' z <- list(x, x, x)\n#' compare_size(z)\n#'\n#' # this means that object_size is not transitive\n#' object_size(x)\n#' object_size(z)\n#' object_size(x, z)\n#'\n#' # object.size doesn't include the size of environments, which makes\n#' # it easy to miss objects that are carrying around large environments\n#' f <- function() {\n#'   x <- 1:1e4\n#'   a ~ b\n#' }\n#' compare_size(f())\n#' @param x,... Set of objects to compute total size.\n#' @param env Environment in which to terminate search. This defaults to the\n#'   current environment so that you don't include the size of objects that\n#'   are already stored elsewhere.\n#' @return An estimate of the size of the object, in bytes.\nobject_size <- function(..., env = parent.frame()) {\n  lobstr::obj_size(..., env = env)\n}\n\n#' @export\n#' @rdname object_size\ncompare_size <- function(x) {\n  c(base = utils::object.size(x), pryr = object_size(x))\n}\n"