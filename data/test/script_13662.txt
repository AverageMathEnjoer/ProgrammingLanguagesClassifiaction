b'package effectivejava.chapter7.item45;\n\nimport java.math.BigInteger;\nimport java.util.stream.Stream;\n\nimport static java.math.BigInteger.*;\n\n// Generating the first twent Mersenne primes using streams (Page 208)\npublic class MersennePrimes {\n    static Stream<BigInteger> primes() {\n        return Stream.iterate(TWO, BigInteger::nextProbablePrime);\n    }\n\n    public static void main(String[] args) {\n        primes().map(p -> TWO.pow(p.intValueExact()).subtract(ONE))\n                .filter(mersenne -> mersenne.isProbablePrime(50))\n                .limit(20)\n                .forEach(mp -> System.out.println(mp.bitLength() + ": " + mp));\n    }\n}\n'