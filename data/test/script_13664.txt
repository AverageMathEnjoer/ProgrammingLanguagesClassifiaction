b'\xef\xbb\xbfusing Business.Abstract;\nusing Business.Constants;\nusing Business.ValidationRules.FluentValidation;\nusing Core.Aspects.Autofac.Caching;\nusing Core.Aspects.Autofac.Logging;\nusing Core.Aspects.Autofac.Performance;\nusing Core.Aspects.Autofac.Transaction;\nusing Core.Aspects.Autofac.Validation;\nusing Core.CrossCuttingConcerns.Logging.Log4Net.Loggers;\nusing Core.Utilities.Business;\nusing Core.Utilities.Results;\nusing DataAccess.Abstract;\nusing Entities.Concrete;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading;\nusing Business.BusinessAspects.Autofac;\n\nnamespace Business.Concrete\n{\n    public class ProductManager : IProductService\n    {\n        private IProductDal _productDal;\n        private ICategoryService _categoryService;\n\n        public ProductManager(IProductDal productDal, ICategoryService categoryService)\n        {\n            _productDal = productDal;\n            _categoryService = categoryService;\n        }\n\n        public IDataResult<Product> GetById(int productId)\n        {\n            return new SuccessDataResult<Product>(_productDal.Get(p => p.ProductId == productId));\n        }\n\n        [PerformanceAspect(5)]\n        public IDataResult<List<Product>> GetList()\n        {\n            Thread.Sleep(5000);\n            return new SuccessDataResult<List<Product>>(_productDal.GetList().ToList());\n        }\n\n        [SecuredOperation("Product.List,Admin")]\n        [LogAspect(typeof(FileLogger))]\n        [CacheAspect(duration: 10)]\n        public IDataResult<List<Product>> GetListByCategory(int categoryId)\n        {\n            return new SuccessDataResult<List<Product>>(_productDal.GetList(p => p.CategoryId == categoryId).ToList());\n        }\n\n\n        [ValidationAspect(typeof(ProductValidator), Priority = 1)]\n        [CacheRemoveAspect("IProductService.Get")]\n        public IResult Add(Product product)\n        {\n            IResult result = BusinessRules.Run(CheckIfProductNameExists(product.ProductName),CheckIfCategoryIsEnabled());\n\n            if (result != null)\n            {\n                return result;\n            }\n            _productDal.Add(product);\n            return new SuccessResult(Messages.ProductAdded);\n        }\n\n        private IResult CheckIfProductNameExists(string productName)\n        {\n\n            var result = _productDal.GetList(p => p.ProductName == productName).Any();\n            if (result)\n            {\n                return new ErrorResult(Messages.ProductNameAlreadyExists);\n            }\n\n            return new SuccessResult();\n        }\n\n        private IResult CheckIfCategoryIsEnabled()\n        {\n            var result = _categoryService.GetList();\n            if (result.Data.Count<10)\n            {\n                return new ErrorResult(Messages.ProductNameAlreadyExists);\n            }\n\n            return new SuccessResult();\n        }\n\n        public IResult Delete(Product product)\n        {\n            _productDal.Delete(product);\n            return new SuccessResult(Messages.ProductDeleted);\n        }\n\n        public IResult Update(Product product)\n        {\n\n            _productDal.Update(product);\n            return new SuccessResult(Messages.ProductUpdated);\n        }\n\n        [TransactionScopeAspect]\n        public IResult TransactionalOperation(Product product)\n        {\n            _productDal.Update(product);\n            _productDal.Add(product);\n            return new SuccessResult(Messages.ProductUpdated);\n        }\n    }\n}\n'