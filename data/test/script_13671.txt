b'#load "Domain.fs"\n#load "Operations.fs"\n\nopen Capstone4.Operations\nopen Capstone4.Domain\nopen System\n\n// Listing 24.1\n// commands\n// |> Seq.filter isValidCommand\n// |> Seq.takeWhile (not << isStopCommand)\n// |> Seq.map getAmount\n// |> Seq.fold processCommand openingAccount\n\n\n// Listing 24.2\n// let processCommand account (command, amount) =\n//     if command = \'d\' then account |> deposit amount\n//     else account |> withdraw amount\n\n// Listing 24.3\n// type BankOperation = Deposit | Withdraw\n// type Command = BankCommand of BankOperation | Exit\n// let tryGetBankOperation cmd =\n//     match cmd with\n//     | BankCommand op -> Some op\n//     | Exit -> None\n\n// Listing 24.4\n// let tryGetAmount command =\n//     Console.WriteLine()\n//     Console.Write "Enter Amount: "\n//     let amount = Console.ReadLine() |> Decimal.TryParse\n//     match amount with\n//     | true, amount -> Some(command, amount)\n//     | false, _ -> None\n\n// Listing 24.5\n// let private findAccountFolder owner =    \n// \t// code elided\xe2\x80\xa6\n//     if Seq.isEmpty folders then ""\n//     else\n//         let folder = Seq.head folders\n//         DirectoryInfo(folder).Name\n\n// let findTransactionsOnDisk owner =\n//     let folder = findAccountFolder owner\n//     if String.IsNullOrEmpty folder then \xe2\x80\xa6\n//        else loadTransactions folder\n\n// Listing 24.6\n// let loadAccountOptional value =\n//     match value with\n//     | Some value -> Some(Operations.loadAccount value)\n//     | None -> None\n// FileRepository.tryFindTransactionsOnDisk >> loadAccountOptional\n\n// Listing 24.7\n// let loadAccountOptional = Option.map Operations.loadAccount\n// FileRepository.tryFindTransactionsOnDisk >> loadAccountOptional\n\n// Listing 24.8\n// let openingAccount =\n//     Console.Write "Please enter your name: "\n//     let owner = Console.ReadLine()\n        \n//     match (tryLoadAccountFromDisk owner) with\n//     | Some account -> account\n//     | None ->\n//         { Balance = 0M\n//           AccountId = Guid.NewGuid()\n//           Owner = { Name = owner } }\n\n// Listing 24.9\n// type CreditAccount = CreditAccount of Account\n// type RatedAccount =\n//     | Credit of CreditAccount\n//     | Overdrawn of Account\n\n// Listing 24.10\n// let rateAccount account =\n//     if account.Balance < 0M then Overdrawn account\n//     else Credit(CreditAccount account)\n\n// let withdraw amount (CreditAccount account) =\n//     { account with Balance = account.Balance - amount }\n//     |> rateAccount\n\n// let deposit amount account =\n//     let account =\n//         match account with\n//         | Credit (CreditAccount account) -> account\n//         | Overdrawn account -> account\n//     { account with Balance = account.Balance + amount }\n//     |> rateAccount\n\n// Listing 24.11\n// let withdrawSafe amount ratedAccount =\n//     match ratedAccount with\n//     | Credit account -> account |> withdraw amount\n//     | Overdrawn _ ->\n//         printfn "Your account is overdrawn - withdrawal rejected!"\n//         ratedAccount // return input back out\n'