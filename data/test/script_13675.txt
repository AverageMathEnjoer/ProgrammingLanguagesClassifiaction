b'\n-- A short program to generate sentences from the\n-- first batch of "Cards Against DevOps".\n-- Compile and run for comedy.\n\n\nmodule Main where\n\nimport Network.HTTP.Conduit    (simpleHttp)\nimport Data.Csv                (decode)\nimport Data.Vector             (toList)\n\nimport System.Random           (StdGen,  newStdGen, randomR)\nimport Control.Monad.State     (State,   state,     evalState)\n\nimport Text.Regex              (mkRegex, subRegex)\n\nimport Control.Arrow           (first)\nimport Control.Lens            (both)\nimport Data.Functor            ((<$>))\n\n\ncardURL = concat ["https://raw.githubusercontent.com"\n                 ,"/bridgetkromhout/devops-against-humanity"\n                 ,"/master/first-printing-cards-DevOpsAgainstHumanity.csv"]\n\n\nmain = do\n  -- Get a pre-seeded random generator\n  gen <- newStdGen\n\n  -- Download and parse the CSV for the cards\n  cards <- fmap (unzip . toList) . decode True <$> simpleHttp cardURL\n\n  -- Either display an error message or read a randomly chosen pair of cards\n  putStrLn $ either id (readCards . chooseCards gen) cards\n\n-- Read cards by simply replacing any sequence of underscores (\'_\') in the\n-- black card with the contents of the white card\nreadCards :: (String, String) -> String\nreadCards (white, black) = subRegex (mkRegex "_+") black white\n\n-- Pick one card each from the two piles of black and white cards\n-- Uses the State monad briefly to chain the two random selections\nchooseCards :: StdGen -> ([String], [String]) -> (String, String)\nchooseCards gen = flip evalState gen . both (state . randomElem)\n\n-- Pick a random element from a list, given a random generator\n-- Return the random element and the updated generator\nrandomElem :: [a] -> StdGen -> (a, StdGen)\nrandomElem xs = first (xs !!) . randomR (0, length xs - 1)\n\n\n\n\n'