b'package id.zelory.compressor.constraint\n\nimport id.zelory.compressor.loadBitmap\nimport id.zelory.compressor.overWrite\nimport java.io.File\n\n/**\n * Created on : January 24, 2020\n * Author     : zetbaitsu\n * Name       : Zetra\n * GitHub     : https://github.com/zetbaitsu\n */\nclass SizeConstraint(\n        private val maxFileSize: Long,\n        private val stepSize: Int = 10,\n        private val maxIteration: Int = 10,\n        private val minQuality: Int = 10\n) : Constraint {\n    private var iteration: Int = 0\n\n    override fun isSatisfied(imageFile: File): Boolean {\n        return imageFile.length() <= maxFileSize || iteration >= maxIteration\n    }\n\n    override fun satisfy(imageFile: File): File {\n        iteration++\n        val quality = (100 - iteration * stepSize).takeIf { it >= minQuality } ?: minQuality\n        return overWrite(imageFile, loadBitmap(imageFile), quality = quality)\n    }\n}\n\nfun Compression.size(maxFileSize: Long, stepSize: Int = 10, maxIteration: Int = 10) {\n    constraint(SizeConstraint(maxFileSize, stepSize, maxIteration))\n}'