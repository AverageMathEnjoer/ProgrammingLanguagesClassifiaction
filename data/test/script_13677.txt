b'\xef\xbb\xbfusing System.Net;\nusing System.Text.RegularExpressions;\n\nnamespace XboxDownload\n{\n    public partial class FormConnectTest : Form\n    {\n        public FormConnectTest(string hostName, string ip)\n        {\n            InitializeComponent();\n            tbHostName.Text = hostName.Trim();\n            tbIP.Text = Regex.Replace(ip, ",.+", "").Trim();\n\n            if (!string.IsNullOrEmpty(tbHostName.Text) && !string.IsNullOrEmpty(tbIP.Text))\n            {\n                ButTest_Click(null, null);\n            }\n        }\n\n        private async void ButTest_Click(object? sender, EventArgs? e)\n        {\n            string hostName = tbHostName.Text.Trim();\n            if (string.IsNullOrEmpty(hostName))\n            {\n                tbHostName.Focus();\n                MessageBox.Show("\xe5\x9f\x9f\xe5\x90\x8d\xe4\xb8\x8d\xe8\x83\xbd\xe7\xa9\xba", "\xe6\x8f\x90\xe7\xa4\xba", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);\n                return;\n            }\n            if (!int.TryParse(tbPort.Text, out int port) || port < 1 || port > 65535)\n            {\n                tbPort.Focus();\n                MessageBox.Show("\xe6\x97\xa0\xe6\x95\x88\xe7\xab\xaf\xe5\x8f\xa3", "\xe6\x8f\x90\xe7\xa4\xba", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);\n                return;\n            }\n            if (!IPAddress.TryParse(tbIP.Text.Trim(), out IPAddress? ip))\n            {\n                tbIP.Focus();\n                MessageBox.Show("\xe6\x97\xa0\xe6\x95\x88IP", "\xe6\x8f\x90\xe7\xa4\xba", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);\n                return;\n            }\n\n            butTest.Enabled = false;\n            tbMessage.Clear();\n            Uri uri = new("https://" + hostName + ":" + port);\n            await ConnectTest(uri, ip);\n        }\n\n        private async Task ConnectTest(Uri uri, IPAddress ip)\n        {\n            bool verified = false;\n            string location = string.Empty, errMsg = string.Empty;\n            Task[] tasks = new Task[2];\n            tasks[0] = new Task(() =>\n            {\n                verified = ClassWeb.ConnectTest(uri, ip, out errMsg);\n            });\n            tasks[1] = new Task(() =>\n            {\n                location = "\\r\\n\\r\\n//IP\xe5\x9c\xb0\xe5\x9d\x80: " + ip + " " + ClassDNS.QueryLocation(ip.ToString());\n            });\n            Array.ForEach(tasks, x => x.Start());\n            await Task.WhenAll(tasks);\n            if (verified)\n            {\n                tbMessage.ForeColor = Color.Green;\n                tbMessage.Text = "OK" + location;\n            }\n            else\n            {\n                tbMessage.ForeColor = Color.Red;\n                tbMessage.Text = errMsg + location;\n            }\n            butTest.Enabled = true;\n        }\n    }\n}\n'