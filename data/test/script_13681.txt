b'#define SQLITE_OS_WIN\n\nnamespace CS_SQLite3\n{\n  public partial class CSSQLite\n  {\n    /*\n    ** 2007 August 28\n    **\n    ** The author disclaims copyright to this source code.  In place of\n    ** a legal notice, here is a blessing:\n    **\n    **    May you do good and not evil.\n    **    May you find forgiveness for yourself and forgive others.\n    **    May you share freely, never taking more than you give.\n    **\n    *************************************************************************\n    **\n    ** This file contains the common header for all mutex implementations.\n    ** The sqliteInt.h header #includes this file so that it is available\n    ** to all source files.  We break it out in an effort to keep the code\n    ** better organized.\n    **\n    ** NOTE:  source files should *not* #include this header file directly.\n    ** Source files should #include the sqliteInt.h file and let that file\n    ** include this one indirectly.\n    **\n    ** $Id: mutex.h,v 1.9 2008/10/07 15:25:48 drh Exp $\n    **\n    *************************************************************************\n    **  Included in SQLite3 port to C#-SQLite;  2008 Noah B Hart\n    **  C#-SQLite is an independent reimplementation of the SQLite software library\n    **\n    **  $Header$\n    *************************************************************************\n    */\n\n\n    /*\n    ** Figure out what version of the code to use.  The choices are\n    **\n    **   SQLITE_MUTEX_OMIT         No mutex logic.  Not even stubs.  The\n    **                             mutexes implemention cannot be overridden\n    **                             at start-time.\n    **\n    **   SQLITE_MUTEX_NOOP         For single-threaded applications.  No\n    **                             mutual exclusion is provided.  But this\n    **                             implementation can be overridden at\n    **                             start-time.\n    **\n    **   SQLITE_MUTEX_PTHREADS     For multi-threaded applications on Unix.\n    **\n    **   SQLITE_MUTEX_W32          For multi-threaded applications on Win32.\n    **\n    **   SQLITE_MUTEX_OS2          For multi-threaded applications on OS/2.\n    */\n\n    //#if !SQLITE_THREADSAFE\n    //# define SQLITE_MUTEX_OMIT\n    //#endif\n    //#if SQLITE_THREADSAFE && !defined(SQLITE_MUTEX_NOOP)\n    //#  if SQLITE_OS_UNIX\n    //#    define SQLITE_MUTEX_PTHREADS\n    //#  elif SQLITE_OS_WIN\n    //#    define SQLITE_MUTEX_W32\n    //#  elif SQLITE_OS_OS2\n    //#    define SQLITE_MUTEX_OS2\n    //#  else\n    //#    define SQLITE_MUTEX_NOOP\n    //#  endif\n    //#endif\n\n\n#if SQLITE_MUTEX_OMIT\n    /*\n** If this is a no-op implementation, implement everything as macros.\n*/\n    public class sqlite3_mutex { }\n    static sqlite3_mutex mutex = null;  //sqlite3_mutex sqlite3_mutex;\n    static sqlite3_mutex sqlite3MutexAlloc( int iType ) { return new sqlite3_mutex(); }//#define sqlite3MutexAlloc(X)      ((sqlite3_mutex*)8)\n    static sqlite3_mutex sqlite3_mutex_alloc( int iType ) { return new sqlite3_mutex(); }//#define sqlite3_mutex_alloc(X)    ((sqlite3_mutex*)8)\n    static void sqlite3_mutex_free( ref sqlite3_mutex m ) { }          //#define sqlite3_mutex_free(X)\n    static void sqlite3_mutex_enter( sqlite3_mutex m ) { }            //#define sqlite3_mutex_enter(X)\n    static int sqlite3_mutex_try( int iType ) { return SQLITE_OK; }   //#define sqlite3_mutex_try(X)      SQLITE_OK\n    static void sqlite3_mutex_leave( sqlite3_mutex m ) { }            //#define sqlite3_mutex_leave(X)\n    static bool sqlite3_mutex_held( sqlite3_mutex m ) { return true; }//#define sqlite3_mutex_held(X)     1\n    static bool sqlite3_mutex_notheld( sqlite3_mutex m ) { return true; }   //#define sqlite3_mutex_notheld(X)  1\n    static int sqlite3MutexInit() { return SQLITE_OK; }              //#define sqlite3MutexInit()        SQLITE_OK\n    static void sqlite3MutexEnd() { }                                //#define sqlite3MutexEnd()\n#endif //* defined(SQLITE_OMIT_MUTEX) */\n  }\n}\n'