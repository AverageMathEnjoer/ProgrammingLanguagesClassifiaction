b'\xef\xbb\xbf#load "AdaBoost.fs"\nopen MachineLearning.AdaBoost\n\nopen System\nopen System.IO\nopen System.Net\n\n// Example from the book\nlet testDataset, testLabels = \n    [| [| 1.0; 2.1 |];\n       [| 2.0; 1.1 |];\n       [| 1.3; 1.0 |];\n       [| 1.0; 1.0 |];\n       [| 2.0; 1.0 |] |], \n    [| 1.0; 1.0; -1.0; -1.0; 1.0 |]\n\nlet classifier = train testDataset testLabels 5 10.0 0.05\nArray.zip testDataset testLabels \n|> Array.iter (fun (d, l) -> printfn "Real %f Pred %f" l (classifier d))\n\n// Wine classification\n// http://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data\n\n// Retrieve data from UC Irvine Machine Learning repository\nlet url = "http://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data"\nlet request = WebRequest.Create(url)\nlet response = request.GetResponse()\n\nlet stream = response.GetResponseStream()\nlet reader = new StreamReader(stream)\nlet data = reader.ReadToEnd()\nreader.Close()\nstream.Close()\n\n// Prepare data for analysis\nlet parse (line: string) =\n    let parsed = line.Split(\',\') \n    let observation = \n        parsed\n        |> Seq.skip 1\n        |> Seq.map (float)\n        |> Seq.toArray\n    let label =\n        parsed\n        |> Seq.head\n        |> (int)\n    observation, label\n\n// We will classify group 1 vs. rest of the world (class 2 and 3)\nlet dataset, labels = \n    data.Split((char)10)\n    |> Array.filter (fun l -> l.Length > 0) // because of last line\n    |> Array.map parse\n    |> Array.map (fun (data, l) -> \n        data, if l = 1 then 1.0 else -1.0 )\n    |> Array.unzip\n\n// Break sample into training and validation samples\n// First separate sample by label / class\nlet group1, group2 =   \n    Array.zip dataset labels\n    |> Array.partition (fun e -> snd e = 1.0)\n\n// Pick half of each group for training\nlet size1 = Array.length group1 / 2\nlet size2 = Array.length group2 / 2\n\nlet trainingSet, trainingLabels = \n    Array.append group1.[ 0 .. size1 ] group2.[ 0 .. size2 ]\n    |> Array.unzip\n// ... and keep the rest for validation\nlet validation = \n    Array.append group1.[ size1 + 1 .. ] group2.[ size2 + 1 .. ]\n\n// Train our classifier\nlet wineClassifier = train trainingSet trainingLabels 20 10.0 0.01\n\n// Performance on training set\nArray.zip trainingSet trainingLabels\n|> Array.averageBy (fun (obs, lbl) -> if (wineClassifier obs) = lbl then 1.0 else 0.0)\n|> printfn "Proportion correctly classified: %f"\n\n// Performance on validation set\nvalidation \n|> Array.averageBy (fun (obs, lbl) -> if (wineClassifier obs) = lbl then 1.0 else 0.0)\n|> printfn "Proportion correctly classified: %f"\n\n// View details on validation set\nvalidation \n|> Array.iter (fun (obs, lbl) ->  printfn "Real %f Pred %f" lbl (wineClassifier obs))'