b'{-# LANGUAGE NoImplicitPrelude #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n{-# LANGUAGE OverloadedStrings #-}\n{-# LANGUAGE RebindableSyntax #-}\n\nmodule Course.FileIO where\n\nimport Course.Core\nimport Course.Applicative\nimport Course.Monad\nimport Course.Functor\nimport Course.List\n\n{-\n\nUseful Functions --\n\n  getArgs :: IO (List Chars)\n  putStrLn :: Chars -> IO ()\n  readFile :: FilePath -> IO Chars\n  lines :: Chars -> List Chars\n  void :: IO a -> IO ()\n\nAbstractions --\n  Applicative, Monad:\n\n    <$>, <*>, >>=, =<<, pure\n\nTuple Functions that could help --\n\n  fst :: (a, b) -> a\n  snd :: (a, b) -> b\n  (,) :: a -> b -> (a, b)\n\nProblem --\n  Given a single argument of a file name, read that file,\n  each line of that file contains the name of another file,\n  read the referenced file and print out its name and contents.\n\nConsideration --\n  Try to avoid repetition. Factor out any common expressions.\n  \nExample --\nGiven file files.txt, containing:\n  a.txt\n  b.txt\n  c.txt\n\nAnd a.txt, containing:\n  the contents of a\n\nAnd b.txt, containing:\n  the contents of b\n\nAnd c.txt, containing:\n  the contents of c\n\nTo test this module, load ghci in the root of the project directory, and do\n    >> :main "share/files.txt"\n\nExample output:\n\n$ ghci\nGHCi, version ... \nLoading package...\nLoading ...\n[ 1 of 28] Compiling (etc...\n...\nOk, modules loaded: Course, etc...\n>> :main "share/files.txt"\n============ share/a.txt\nthe contents of a\n\n============ share/b.txt\nthe contents of b\n\n============ share/c.txt\nthe contents of c\n\n-}\n\n-- Given the file name, and file contents, print them.\n-- Use @putStrLn@.\nprintFile ::\n  FilePath\n  -> Chars\n  -> IO ()\nprintFile =\n  error "todo: Course.FileIO#printFile"\n\n-- Given a list of (file name and file contents), print each.\n-- Use @printFile@.\nprintFiles ::\n  List (FilePath, Chars)\n  -> IO ()\nprintFiles =\n  error "todo: Course.FileIO#printFiles"\n\n-- Given a file name, return (file name and file contents).\n-- Use @readFile@.\ngetFile ::\n  FilePath\n  -> IO (FilePath, Chars)\ngetFile =\n  error "todo: Course.FileIO#getFile"\n\n-- Given a list of file names, return list of (file name and file contents).\n-- Use @getFile@.\ngetFiles ::\n  List FilePath\n  -> IO (List (FilePath, Chars))\ngetFiles =\n  error "todo: Course.FileIO#getFiles"\n\n-- Given a file name, read it and for each line in that file, read and print contents of each.\n-- Use @getFiles@ and @printFiles@.\nrun ::\n  FilePath\n  -> IO ()\nrun =\n  error "todo: Course.FileIO#run"\n\n-- /Tip:/ use @getArgs@ and @run@\nmain ::\n  IO ()\nmain =\n  error "todo: Course.FileIO#main"\n\n----\n\n-- Was there was some repetition in our solution?\n-- ? `sequence . (<$>)`\n-- ? `void . sequence . (<$>)`\n-- Factor it out.\n'