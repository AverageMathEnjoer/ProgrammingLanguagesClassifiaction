b'package com.github.eprendre.sources_by_eprendre\n\nimport com.github.eprendre.tingshu.extensions.getDesktopUA\nimport com.github.eprendre.tingshu.extensions.splitQuery\nimport com.github.eprendre.tingshu.sources.AudioUrlDirectExtractor\nimport com.github.eprendre.tingshu.sources.AudioUrlExtraHeaders\nimport com.github.eprendre.tingshu.sources.AudioUrlExtractor\nimport com.github.eprendre.tingshu.sources.TingShu\nimport com.github.eprendre.tingshu.utils.*\nimport com.github.kittinunf.fuel.core.FuelManager\nimport com.github.kittinunf.fuel.json.responseJson\nimport org.json.JSONObject\nimport java.net.URI\nimport java.net.URL\nimport java.net.URLEncoder\nimport java.security.cert.X509Certificate\nimport javax.net.ssl.HostnameVerifier\nimport javax.net.ssl.SSLContext\nimport javax.net.ssl.TrustManager\nimport javax.net.ssl.X509TrustManager\n\n/**\n * \xe7\xb1\xb3\xe5\x85\x94\xe9\x98\x85\xe8\xaf\xbb\n */\nobject YouTuYueDu : TingShu(), AudioUrlExtraHeaders {\n    private val headers = mapOf(\n        "devicetype" to "3",\n        "channelname" to "official",\n        "origin" to "https://www.mituyuedu.com",\n        "Referer" to "https://www.mituyuedu.com",\n        "seq" to "11111111111111111111111111111111",\n        "User-Agent" to getDesktopUA(),\n        "version" to "1.9.0"\n    )\n\n    private val manager : FuelManager = FuelManager().apply {\n        val trustAllCerts = arrayOf<TrustManager>(object : X509TrustManager {\n            override fun getAcceptedIssuers(): Array<X509Certificate>? = null\n            override fun checkClientTrusted(chain: Array<X509Certificate>, authType: String) = Unit\n            override fun checkServerTrusted(chain: Array<X509Certificate>, authType: String) = Unit\n        })\n\n        socketFactory = SSLContext.getInstance("SSL").apply {\n            init(null, trustAllCerts, java.security.SecureRandom())\n        }.socketFactory\n\n        hostnameVerifier = HostnameVerifier { _, _ -> true }\n    }\n\n\n    override fun getSourceId(): String {\n        return "41aa5aff6ee54089a09ef74a4adb3a77"\n    }\n\n    override fun getUrl(): String {\n        return "https://www.mituyuedu.com"\n    }\n\n    override fun getName(): String {\n        return "\xe6\x9c\x89\xe5\x85\x94\xe9\x98\x85\xe8\xaf\xbb"\n    }\n\n    override fun getDesc(): String {\n        return "\xe6\x8e\xa8\xe8\x8d\x90\xe6\x8c\x87\xe6\x95\xb0:4\xe6\x98\x9f \xe2\xad\x90\xe2\xad\x90\xe2\xad\x90\xe2\xad\x90\\n\xe5\x8a\xa0\xe8\xbd\xbd\xe5\xbe\x88\xe6\x85\xa2\xef\xbc\x8c\xe8\xaf\xb7\xe8\x80\x90\xe5\xbf\x83\xe7\xad\x89\xe5\xbe\x85\xe3\x80\x82"\n    }\n\n    override fun getCategoryMenus(): List<CategoryMenu> {\n        val list = ArrayList<CategoryMenu>()\n\n        val url = "https://app1.youzibank.com/audio/book/cls/list"\n        val jsonObject = manager.get(url)\n            .header(headers)\n            .responseJson()\n            .third.get().obj()\n\n        val data = jsonObject.getJSONArray("data")\n        (0 until data.length()).forEach { i ->\n            val obj = data.getJSONObject(i)\n            val name = obj.getString("clsName")\n            val code = obj.getInt("code")\n            val subCls = obj.getJSONArray("subCls")\n            val subMenu =  (0 until subCls.length()).map { t ->\n                val subObj = subCls.getJSONObject(t)\n                val subName = subObj.getString("clsName")\n                val subCode = subObj.getInt("code")\n                val parentCode = subObj.getInt("parentCode")\n                CategoryTab(subName, "https://app1.youzibank.com/audio/list?fullFlag=2&orderBy=play_cnt&clsIdFirst=${parentCode}&clsIdSecond=${subCode}&pageNo=1&pageSize=10&page=1&size=10")\n            }\n            list.add(CategoryMenu(name, subMenu))\n        }\n        return list\n    }\n\n    override fun getAudioUrlExtractor(): AudioUrlExtractor {\n        return AudioUrlDirectExtractor\n    }\n\n    override fun isWebViewNotRequired(): Boolean {\n        return true\n    }\n\n    override fun getBookDetailInfo(bookUrl: String, loadEpisodes: Boolean, loadFullPages: Boolean): BookDetail {\n        val episodes = ArrayList<Episode>()\n        if (loadEpisodes) {\n            val jsonObject = manager.get(bookUrl)\n                .header(headers)\n                .responseJson()\n                .third.get().obj()\n            val data = jsonObject.getJSONArray("data")\n            (0 until data.length()).forEach {\n                val item = data.getJSONObject(it)\n                val name = item.getString("name")\n                val musicPathObject = JSONObject(item.getString("musicPath"))\n                val musicPath = when {\n                    musicPathObject.has("h") -> {\n                        musicPathObject.getJSONObject("h").getString("addr")\n                    }\n                    musicPathObject.has("m") -> {\n                        musicPathObject.getJSONObject("m").getString("addr")\n                    }\n                    else -> {\n                        musicPathObject.getJSONObject("l").getString("addr")\n                    }\n                }\n                val url = "https://ys.xxhainan.com/klajdfiaoj/music_collect${musicPath}"\n                episodes.add(Episode(name, url))\n            }\n        }\n        return BookDetail(episodes)\n    }\n\n    override fun getCategoryList(url: String): Category {\n        val jsonObject = manager.get(url)\n            .header(headers)\n            .responseJson()\n            .third.get().obj()\n\n        val currentPage = jsonObject.getInt("pageNo")\n        val pageCount = jsonObject.getInt("pageCount")\n\n        val list = ArrayList<Book>()\n        val nextUrl = if (currentPage < pageCount) {\n            val queryMap = splitQuery(URL(url))\n            queryMap["pageNo"] = (currentPage + 1).toString()\n            queryMap["page"] = (currentPage + 1).toString()\n            "https://app1.youzibank.com/audio/list?" + queryMap.map { "${it.key}=${it.value}" }.joinToString("&")\n        } else {\n            ""\n        }\n\n        val data = jsonObject.getJSONArray("data")\n        (0 until data.length()).forEach { i ->\n            val item = data.getJSONObject(i)\n            val coverUrl = "https://img.dayouzh.com/klajdfiaoj/music_collect${item.getString("photoPath")}"\n            val bookUrl = "https://app1.youzibank.com/audio/chapter/listAll?audioId=${item.getInt("id")}"\n            val title = item.getString("name")\n            val author = ""\n            val artist = item.getString("actorName")\n            val status = "\xe5\x85\xb1 ${item.getInt("chapterCnt")} \xe7\xab\xa0"\n            val intro = item.getString("intro")\n            val book = Book(coverUrl, bookUrl, title, author, artist )\n            book.status = status\n            book.intro = intro\n            book.sourceId = getSourceId()\n            list.add(book)\n        }\n\n        return Category(list, currentPage, pageCount, url, nextUrl)\n    }\n\n    override fun search(keywords: String, page: Int): Pair<List<Book>, Int> {\n        val encodedKeywords = URLEncoder.encode(keywords, "utf-8")\n        val url = "https://app1.youzibank.com/es/search/audio?q=${encodedKeywords}&pageSize=10&pageNo=${page}&page=${page}&size=10"\n        val jsonObject = manager.get(url)\n            .header(headers)\n            .responseJson()\n            .third.get().obj()\n\n        val pageCount = jsonObject.getInt("pageCount")\n        val list = ArrayList<Book>()\n\n        val data = jsonObject.getJSONArray("data")\n        (0 until data.length()).forEach { i ->\n            val item = data.getJSONObject(i)\n            val coverUrl = "https://img.dayouzh.com/klajdfiaoj/music_collect${item.getString("photoPath")}"\n            val bookUrl = "https://app1.youzibank.com/audio/chapter/listAll?audioId=${item.getInt("id")}"\n            val title = item.getString("name")\n            val author = ""\n            val artist = item.getString("actorName")\n            val status = "\xe5\x85\xb1 ${item.getInt("chapterCnt")} \xe7\xab\xa0"\n            val intro = item.getString("intro")\n            val book = Book(coverUrl, bookUrl, title, author, artist)\n            book.status = status\n            book.intro = intro\n            book.sourceId = getSourceId()\n            list.add(book)\n        }\n\n        return Pair(list, pageCount)\n    }\n\n    override fun headers(audioUrl: String): Map<String, String> {\n        val hashMap = hashMapOf<String, String>()\n        if (audioUrl.contains("jiuhew.com") || audioUrl.contains("dayouzh.com")) {\n            hashMap["Host"] = URL(audioUrl).host\n        }\n        return hashMap\n    }\n}\n'