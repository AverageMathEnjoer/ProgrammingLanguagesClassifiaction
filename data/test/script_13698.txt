b'package effectivejava.chapter11.item81;\nimport java.util.concurrent.*;\n\n// Concurrent canonicalizing map atop ConcurrentMap - Pages 273-274\npublic class Intern {\n    // Concurrent canonicalizing map atop ConcurrentMap - not optimal\n    private static final ConcurrentMap<String, String> map =\n            new ConcurrentHashMap<>();\n\n//    public static String intern(String s) {\n//        String previousValue = map.putIfAbsent(s, s);\n//        return previousValue == null ? s : previousValue;\n//    }\n\n    // Concurrent canonicalizing map atop ConcurrentMap - faster!\n    public static String intern(String s) {\n        String result = map.get(s);\n        if (result == null) {\n            result = map.putIfAbsent(s, s);\n            if (result == null)\n                result = s;\n        }\n        return result;\n    }\n}'