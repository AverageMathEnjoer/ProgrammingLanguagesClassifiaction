b'package io.github.javiewer.adapter;\n\nimport android.app.Activity;\nimport android.graphics.Bitmap;\nimport androidx.palette.graphics.Palette;\nimport androidx.cardview.widget.CardView;\nimport androidx.recyclerview.widget.RecyclerView;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.ImageView;\nimport android.widget.TextView;\n\nimport com.bumptech.glide.Glide;\nimport com.bumptech.glide.request.animation.GlideAnimation;\nimport com.bumptech.glide.request.target.SimpleTarget;\n\nimport java.util.List;\n\nimport butterknife.BindView;\nimport butterknife.ButterKnife;\nimport io.github.javiewer.R;\nimport io.github.javiewer.adapter.item.Actress;\nimport io.github.javiewer.view.SquareTopCrop;\nimport io.github.javiewer.view.ViewUtil;\nimport io.github.javiewer.view.listener.ActressClickListener;\nimport io.github.javiewer.view.listener.ActressLongClickListener;\n\nimport static com.bumptech.glide.load.engine.DiskCacheStrategy.SOURCE;\n\n/**\n * Project: JAViewer\n */\n\npublic class ActressPaletteAdapter extends RecyclerView.Adapter<ActressPaletteAdapter.ViewHolder> {\n\n    private List<Actress> actresses;\n\n    private Activity mParentActivity;\n\n    private ImageView mIcon;\n\n    public ActressPaletteAdapter(List<Actress> actresses, Activity mParentActivity, ImageView mIcon) {\n        this.actresses = actresses;\n        this.mParentActivity = mParentActivity;\n        this.mIcon = mIcon;\n    }\n\n    @Override\n    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n        View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.card_actress_palette, parent, false);\n\n        return new ViewHolder(v);\n    }\n\n    @Override\n    public void onBindViewHolder(final ViewHolder holder, int position) {\n        final Actress actress = actresses.get(position);\n\n        holder.mCard.setOnClickListener(new ActressClickListener(actress, mParentActivity));\n        holder.mCard.setOnLongClickListener(new ActressLongClickListener(actress, mParentActivity));\n\n        holder.mName.setText(actress.getName());\n\n        if (position == 0) {\n            ViewUtil.alignIconToView(mIcon, holder.mImage);\n        }\n\n        holder.mImage.setImageResource(R.drawable.ic_movie_actresses);\n\n        if (actress.getImageUrl().trim().isEmpty()) {\n            return;\n        }\n\n        Glide.with(holder.mImage.getContext().getApplicationContext())\n                .load(actress.getImageUrl())\n                .asBitmap()\n                .placeholder(R.drawable.ic_movie_actresses)\n                .diskCacheStrategy(SOURCE) // override default RESULT cache and apply transform always\n                .skipMemoryCache(true) // do not reuse the transformed result while running\n                .transform(new SquareTopCrop(holder.mImage.getContext()))\n                //.transform(new PositionedCropTransformation(holder.mImage.getContext(), 0, 0))\n                .into(new SimpleTarget<Bitmap>() {\n                    @Override\n                    public void onResourceReady(Bitmap resource, GlideAnimation<? super Bitmap> glideAnimation) {\n                        //resource = Bitmap.createBitmap(resource, 0, 0, resource.getWidth(), resource.getWidth());\n                        holder.mImage.setImageBitmap(resource);\n\n                        try {\n                            Palette.from(resource).generate(new Palette.PaletteAsyncListener() {\n                                @Override\n                                public void onGenerated(Palette palette) {\n                                    Palette.Swatch swatch = palette.getLightVibrantSwatch();\n                                    if (swatch == null) {\n                                        return;\n                                    }\n                                    holder.mCard.setCardBackgroundColor(swatch.getRgb());\n                                    holder.mName.setTextColor(swatch.getBodyTextColor());\n                                }\n                            });\n                        } catch (Exception ignored) {\n                        }\n                    }\n                });\n\n    }\n\n    @Override\n    public int getItemCount() {\n        return actresses == null ? 0 : actresses.size();\n    }\n\n    public class ViewHolder extends RecyclerView.ViewHolder {\n\n        @BindView(R.id.actress_palette_img)\n        public ImageView mImage;\n\n        @BindView(R.id.actress_palette_name)\n        public TextView mName;\n\n        @BindView(R.id.card_actress_palette)\n        public CardView mCard;\n\n        public ViewHolder(View view) {\n            super(view);\n            ButterKnife.bind(this, view);\n        }\n    }\n}\n'