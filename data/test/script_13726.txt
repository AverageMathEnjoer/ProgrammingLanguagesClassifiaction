b'module Cachix.Client\n  ( main,\n  )\nwhere\n\nimport Cachix.Client.Commands as Commands\nimport qualified Cachix.Client.Config as Config\nimport Cachix.Client.Env (cachixoptions, mkEnv)\nimport Cachix.Client.OptionsParser (CachixCommand (..), getOpts)\nimport Cachix.Client.Version (cachixVersion)\nimport Cachix.Deploy.ActivateCommand as ActivateCommand\nimport qualified Cachix.Deploy.Agent as AgentCommand\nimport qualified Cachix.Deploy.OptionsParser as DeployOptions\nimport Protolude\n\nmain :: IO ()\nmain = do\n  (flags, command) <- getOpts\n  env <- mkEnv flags\n  let cachixOptions = cachixoptions env\n  case command of\n    AuthToken token -> Commands.authtoken env token\n    Config configCommand -> Config.run cachixOptions configCommand\n    GenerateKeypair name -> Commands.generateKeypair env name\n    Push pushArgs -> Commands.push env pushArgs\n    Pin pingArgs -> Commands.pin env pingArgs\n    WatchStore watchArgs name -> Commands.watchStore env watchArgs name\n    WatchExec pushArgs name cmd args -> Commands.watchExec env pushArgs name cmd args\n    Use name useOptions -> Commands.use env name useOptions\n    Version -> putText cachixVersion\n    DeployCommand deployCommand ->\n      case deployCommand of\n        DeployOptions.Agent opts -> AgentCommand.run cachixOptions opts\n        DeployOptions.Activate opts -> ActivateCommand.run env opts\n'