b"{-# OPTIONS_GHC -fno-warn-orphans #-}\n-- |\n-- Copyright  : (c) Ivan Perez and Manuel Baerenz, 2016\n-- License    : BSD3\n-- Maintainer : ivan.perez@keera.co.uk\n--\n-- Number instances for 'MSF's that produce numbers. This allows you to use\n-- numeric operators with 'MSF's that output numbers, for example, you can\n-- write:\n--\n-- @\n-- msf1 :: MSF Input Double -- defined however you want\n-- msf2 :: MSF Input Double -- defined however you want\n-- msf3 :: MSF Input Double\n-- msf3 = msf1 + msf2\n-- @\n--\n-- instead of\n--\n-- @\n-- msf3 = (msf1 &&& msf2) >>> arr (uncurry (+))\n-- @\n--\n-- Instances are provided for the type classes 'Num', 'Fractional' and\n-- 'Floating'.\nmodule Data.MonadicStreamFunction.Instances.Num where\n\n-- Internal imports\nimport Control.Arrow.Util              (constantly, elementwise, elementwise2)\nimport Data.MonadicStreamFunction.Core (MSF)\n\n-- | 'Num' instance for 'MSF's.\ninstance (Monad m, Num b) => Num (MSF m a b) where\n  (+)         = elementwise2 (+)\n  (-)         = elementwise2 (-)\n  (*)         = elementwise2 (*)\n  abs         = elementwise abs\n  signum      = elementwise signum\n  negate      = elementwise negate\n  fromInteger = constantly . fromInteger\n\n-- | 'Fractional' instance for 'MSF's.\ninstance (Monad m, Fractional b) => Fractional (MSF m a b) where\n  fromRational = constantly . fromRational\n  (/)          = elementwise2 (/)\n  recip        = elementwise recip\n\n-- | 'Floating' instance for 'MSF's.\ninstance (Monad m, Floating b) => Floating (MSF m a b) where\n  pi      = constantly   pi\n  exp     = elementwise  exp\n  log     = elementwise  log\n  sqrt    = elementwise  sqrt\n  (**)    = elementwise2 (**)\n  logBase = elementwise2 logBase\n  sin     = elementwise  sin\n  cos     = elementwise  cos\n  tan     = elementwise  tan\n  asin    = elementwise  asin\n  acos    = elementwise  acos\n  atan    = elementwise  atan\n  sinh    = elementwise  sinh\n  cosh    = elementwise  cosh\n  tanh    = elementwise  tanh\n  asinh   = elementwise  asinh\n  acosh   = elementwise  acosh\n  atanh   = elementwise  atanh\n"