b'\xef\xbb\xbfusing Asn1;\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace Rubeus\n{\n    //Hostname::= SEQUENCE {\n    //        name-type[0] Int32,\n    //        name-string[1] SEQUENCE OF KerberosString\n    //}\n\n    public class HostAddress\n    {\n        public HostAddress()\n        {\n            // nETBIOS = 20\n            //      netbios name of the requesting machine\n\n            addr_type = Interop.HostAddressType.ADDRTYPE_NETBIOS;\n\n            addr_string = string.Empty;\n        }\n\n        public HostAddress(string hostName)\n        {\n            // create with hostname\n            addr_type = Interop.HostAddressType.ADDRTYPE_NETBIOS;\n\n            // setup padding\n            Int32 numSpaces = 8 - (hostName.Length % 8);\n            hostName = hostName.PadRight(hostName.Length + numSpaces);\n\n            addr_string = hostName.ToUpper();\n        }\n\n        public HostAddress(Interop.HostAddressType atype, string address)\n        {\n            // create with different type\n            addr_type = atype;\n\n            // setup padding\n            Int32 numSpaces = 8 - (address.Length % 8);\n            address = address.PadRight(address.Length + numSpaces);\n\n            addr_string = address.ToUpper();\n        }\n\n        public HostAddress(AsnElt body)\n        {\n            foreach (AsnElt s in body.Sub)\n            {\n                switch (s.TagValue)\n                {\n                    case 0:\n                        addr_type = (Interop.HostAddressType)s.Sub[0].GetInteger();\n                        break;\n                    case 1:\n                        addr_string = Encoding.ASCII.GetString(s.Sub[0].GetOctetString());\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }\n\n        public AsnElt Encode()\n        {\n            // addr-type[0] Int32\n            // addr-string[1] OCTET STRING\n            AsnElt addrTypeElt = AsnElt.MakeInteger((long)addr_type);\n            AsnElt addrTypeSeq = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] { addrTypeElt });\n            addrTypeSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 0, addrTypeSeq);\n\n            AsnElt addrStringElt = AsnElt.MakeString(AsnElt.TeletexString, addr_string);\n            addrStringElt = AsnElt.MakeImplicit(AsnElt.UNIVERSAL, AsnElt.OCTET_STRING, addrStringElt);\n            AsnElt addrStringSeq = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] { addrStringElt });\n            addrStringSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 1, addrStringSeq);\n\n            AsnElt seq = AsnElt.Make(AsnElt.SEQUENCE, new[] { addrTypeSeq, addrStringSeq });\n\n            return seq;\n        }\n\n        public Interop.HostAddressType addr_type { get; set; }\n\n        public string addr_string { get; set; }\n    }\n}\n'