b'// UVa1599 Idea Path\n// Rujia Liu\n#include<cstdio>\n#include<cstring>\n#include<vector>\n#include<queue>\nusing namespace std;\n\nconst int maxn = 100000 + 5;\nconst int INF = 1000000000; // maximal color\n\nstruct Edge {\n  int u, v, c;\n  Edge(int u=0, int v=0, int c=0):u(u),v(v),c(c) {}\n};\n\nvector<Edge> edges;\nvector<int> G[maxn];\n\nvoid AddEdge(int u, int v, int c) {\n  edges.push_back(Edge(u, v, c));\n  int idx = edges.size() - 1;\n  G[u].push_back(idx);\n}\n\nint n, vis[maxn];\nint d[maxn];\n// reverse bfs to find out the distance from each node to n-1\nvoid rev_bfs() {\n  memset(vis, 0, sizeof(vis));\n  d[n-1] = 0;\n  vis[n-1] = true;\n\n  queue<int> q;\n  q.push(n-1);\n  while(!q.empty()) {\n    int v = q.front(); q.pop();\n    for(int i = 0; i < G[v].size(); i++) {\n      int e = G[v][i];\n      int u = edges[e].v;\n      if(!vis[u]) {\n        vis[u] = true;\n        d[u] = d[v] + 1;\n        q.push(u);\n      }\n    }\n  }\n}\n\nvector<int> ans;\n\n// forward bfs to construct the path\nvoid bfs() {\n  memset(vis, 0, sizeof(vis));\n  vis[0] = true;\n  ans.clear();\n\n  vector<int> next;\n  next.push_back(0);\n  for(int i = 0; i < d[0]; i++) {\n    int min_color = INF;\n    for(int j = 0; j < next.size(); j++) {\n      int u = next[j];\n      for(int k = 0; k < G[u].size(); k++) {\n        int e = G[u][k];\n        int v = edges[e].v;\n        if(d[u] == d[v] + 1)\n          min_color = min(min_color, edges[e].c);\n      }\n    }\n    ans.push_back(min_color);\n\n    // find out the next vertices of the next phase\n    vector<int> next2; \n    for(int j = 0; j < next.size(); j++) {\n      int u = next[j];\n      for(int k = 0; k < G[u].size(); k++) {\n        int e = G[u][k];\n        int v = edges[e].v;\n        if(d[u] == d[v] + 1 && !vis[v] && edges[e].c == min_color) {\n          vis[v] = true;\n          next2.push_back(v);\n        }\n      }\n    }\n    next = next2;\n  }\n\n  printf("%d\\n", ans.size());\n  printf("%d", ans[0]);\n  for(int i = 1; i < ans.size(); i++) printf(" %d", ans[i]);\n  printf("\\n");\n}\n\nint main() {\n  int u, v, c, m;\n  while(scanf("%d%d", &n, &m) == 2) {\n    edges.size();\n    for(int i = 0; i < n; i++) G[i].clear();\n    while(m--) {\n      scanf("%d%d%d", &u, &v, &c);\n      AddEdge(u-1, v-1, c);\n      AddEdge(v-1, u-1, c);\n    }\n    rev_bfs();\n    bfs();\n  }\n  return 0;\n}\n'