b'//\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x9a\xe6\x89\x8b\xe6\x9c\xba\xe5\x8f\xb7\xe7\xa0\x81\xe5\xbd\x92\xe5\xb1\x9e\xe5\x9c\xb0\xe6\x9f\xa5\xe8\xaf\xa2 dat\xe9\xab\x98\xe6\x95\x88\xe7\x8e\x87\xe6\x9f\xa5\xe8\xaf\xa2  \xe5\x86\x85\xe5\xad\x98\xe4\xbc\x98\xe5\x8c\x96\xe7\x89\x88\n//\xe5\x8e\x8b\xe7\xbc\xa9\xef\xbc\x9a\xe5\x8e\x9f\xe7\x89\x88txt\xe4\xb8\xba22M,\xe7\x94\x9f\xe6\x88\x90\xe8\xbf\x99\xe7\xa7\x8ddat\xe7\xbb\x93\xe6\x9e\x84\xe4\xb8\xba2.66M \n//\xe6\x80\xa7\xe8\x83\xbd\xef\xbc\x9a\xe6\xaf\x8f\xe7\xa7\x92\xe8\xa7\xa3\xe6\x9e\x90300\xe4\xb8\x87+\xe5\x8f\xb7\xe6\xae\xb5\xe6\x88\x96\xe8\x80\x85\xe5\x8f\xb7\xe7\xa0\x81,\xe7\xae\x80\xe6\xb4\x81\xe9\xab\x98\xe6\x95\x88 \n//\xe7\x8e\xaf\xe5\xa2\x83\xef\xbc\x9aCPU i7-7700K +\xe5\x86\x85\xe5\xad\x9816GB\n//\xe5\x88\x9b\xe5\xbb\xba\xef\xbc\x9aqqzeng-ip \xe4\xba\x8e 2018-4-5\n\n\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Text;\nusing System.Threading;\n\nnamespace qqzeng_phone_dat\n{\n\n    public class PhoneSearchFast\n    {\n        private static readonly Lazy<PhoneSearchFast> lazy = new Lazy<PhoneSearchFast>(() => new PhoneSearchFast());\n        public static PhoneSearchFast Instance { get { return lazy.Value; } }\n        private PhoneSearchFast()\n        {\n            LoadDat();\n            Watch();\n        }\n\n        private string datPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, @"qqzeng-phone.dat");\n        private DateTime lastRead = DateTime.MinValue;\n        private long[,] prefmap = new long[200, 2];//  000-199\n\n\n        private long[,] phonemap;\n\n        private byte[] data;\n\n        private long[] phoneArr;\n        private string[] addrArr;\n        private string[] ispArr;\n\n        /// <summary>\n        /// \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe4\xba\x8c\xe8\xbf\x9b\xe5\x88\xb6dat\xe6\x95\xb0\xe6\x8d\xae\n        /// </summary>\n        /// <param name="dataPath"></param>\n        /// \n\n\n        private void LoadDat()\n        {\n            data = File.ReadAllBytes(datPath);\n\n            long PrefSize = BytesToLong(data[0], data[1], data[2], data[3]);\n            long RecordSize = BytesToLong(data[4], data[5], data[6], data[7]);\n\n            long descLength = BytesToLong(data[8], data[9], data[10], data[11]);\n            long ispLength = BytesToLong(data[12], data[13], data[14], data[15]);\n\n            //\xe5\x86\x85\xe5\xae\xb9\xe6\x95\xb0\xe7\xbb\x84\n            int descOffset = (int)(16 + PrefSize * 9 + RecordSize * 7);\n            string descString = Encoding.UTF8.GetString(data, descOffset, (int)descLength);\n            addrArr = descString.Split(\'&\');\n\n            //\xe8\xbf\x90\xe8\x90\xa5\xe5\x95\x86\xe6\x95\xb0\xe7\xbb\x84\n            int ispOffset = (int)(16 + PrefSize * 9 + RecordSize * 7 + descLength);\n            string ispString = Encoding.UTF8.GetString(data, ispOffset, (int)ispLength);\n            ispArr = ispString.Split(\'&\');\n\n\n\n            //\xe5\x89\x8d\xe7\xbc\x80\xe5\x8c\xba\n            int m = 0;\n            for (var k = 0; k < PrefSize; k++)\n            {\n                int i = k * 9 + 16;\n                int n = data[i];\n                prefmap[n, 0] = BytesToLong(data[i + 1], data[i + 2], data[i + 3], data[i + 4]);\n                prefmap[n, 1] = BytesToLong(data[i + 5], data[i + 6], data[i + 7], data[i + 8]);\n                if (m < n)\n                {\n                    for (; m < n; m++)\n                    {\n                        prefmap[m, 0] = 0; prefmap[m, 1] = 0;\n                    }\n                    m++;\n                }\n                else\n                {\n                    m++;\n                }\n            }\n\n            //\xe7\xb4\xa2\xe5\xbc\x95\xe5\x8c\xba\n            phoneArr = new long[RecordSize];\n            phonemap = new long[RecordSize, 2];\n            for (int i = 0; i < RecordSize; i++)\n            {\n                long p = 16 + PrefSize * 9 + (i * 7);\n                phoneArr[i] = BytesToLong(data[p], data[1 + p], data[2 + p], data[3 + p]);\n                phonemap[i, 0] = data[4 + p] + ((data[5 + p]) << 8);\n                phonemap[i, 1] = data[6 + p];\n            }\n\n\n\n        }\n        private void Watch()\n        {\n            FileInfo fi = new FileInfo(datPath);\n            FileSystemWatcher watcher = new FileSystemWatcher(fi.DirectoryName)\n            {\n                IncludeSubdirectories = false,\n                NotifyFilter = NotifyFilters.LastWrite,\n                Filter = "qqzeng-phone.dat",\n            };\n\n            watcher.Changed += (s, e) =>\n            {\n\n                var lastWriteTime = File.GetLastWriteTime(datPath);\n\n                if (lastWriteTime > lastRead)\n                {\n                    //\xe5\xbb\xb6\xe6\x97\xb6 \xe8\xa7\xa3\xe5\x86\xb3 \xe6\xad\xa3\xe7\x94\xb1\xe5\x8f\xa6\xe4\xb8\x80\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xbd\xbf\xe7\x94\xa8,\xe5\x9b\xa0\xe6\xad\xa4\xe8\xaf\xa5\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x97\xa0\xe6\xb3\x95\xe8\xae\xbf\xe9\x97\xae\xe6\xad\xa4\xe6\x96\x87\xe4\xbb\xb6\n                    Thread.Sleep(1000);\n\n                    LoadDat();\n                    lastRead = lastWriteTime;\n                }\n            };\n            watcher.EnableRaisingEvents = true;\n        }\n\n\n\n\n        /// <summary>\n        /// \xe5\x8f\xb7\xe6\xae\xb5\xe6\x9f\xa5\xe8\xaf\xa2\n        /// </summary>\n        /// <param name="phone">7\xe4\xbd\x8d\xe6\x88\x96\xe8\x80\x8511\xe4\xbd\x8d</param>\n        /// <returns></returns>\n        public string Query(string phone)\n        {\n            long pref;\n            long val = PhoneToInt(phone, out pref);\n            long low = prefmap[pref, 0], high = prefmap[pref, 1];\n            if (high == 0)\n            {\n                return "";\n            }\n            long cur = low == high ? low : BinarySearch(low, high, val);\n            if (cur != -1)\n            {\n\n                return addrArr[phonemap[cur, 0]] + "|" + ispArr[phonemap[cur, 1]];\n            }\n            else\n            {\n                return "";\n            }\n\n\n\n\n\n\n        }\n        /// <summary>\n        /// \xe4\xba\x8c\xe5\x88\x86\xe7\xae\x97\xe6\xb3\x95\n        /// </summary>\n        private int BinarySearch(long low, long high, long key)\n        {\n            if (low > high)\n                return -1;\n            else\n            {\n                long mid = (low + high) / 2;\n                long phoneNum = phoneArr[mid];\n                if (phoneNum == key)\n                    return (int)mid;\n                else if (phoneNum > key)\n                    return BinarySearch(low, mid - 1, key);\n                else\n                    return BinarySearch(mid + 1, high, key);\n            }\n        }\n\n\n\n        private long PhoneToInt(string phone, out long prefix)\n        {\n            //\xe6\x9c\x80\xe9\xab\x98\xe6\x80\xa7\xe8\x83\xbd\n            char ch;\n            long currentValue = 0;\n            long prefval = 0;\n            unsafe\n            {\n                fixed (char* name = phone)\n                {\n                    for (int current = 0; current < 7; current++)\n                    {\n                        ch = name[current];\n                        int digitValue = ch - \'0\';\n                        currentValue = (currentValue * 10) + digitValue;\n                        if (current == 2)\n                        {\n                            prefval = currentValue;\n                        }\n                    }\n                }\n                prefix = prefval;\n                return currentValue;\n            }\n\n\n            //prefix = Convert.ToUInt32(phone.Substring(0,3));\n            //return Convert.ToUInt32(phone.Substring(0, 7)); ;\n        }\n\n\n\n        /// <summary>\n        /// \xe5\xad\x97\xe8\x8a\x82\xe8\xbd\xac\xe6\x95\xb4\xe5\xbd\xa2 \xe5\xb0\x8f\xe8\x8a\x82\xe5\xba\x8f \n        /// </summary>     \n        private uint BytesToLong(byte a, byte b, byte c, byte d)\n        {\n            return (uint)(a | (b << 8) | (c << 16) | (d << 24));\n        }\n\n\n\n    }\n\n    /*\n    \xef\xbc\x88\xe8\xb0\x83\xe7\x94\xa8\xe4\xbe\x8b\xe5\xad\x90\xef\xbc\x89\xef\xbc\x9a    \n    string result = PhoneSearchFast.Instance.Query("\xe5\x8f\xb7\xe6\xae\xb5|\xe5\x8f\xb7\xe7\xa0\x81");\n   --> result="\xe7\x9c\x81\xe4\xbb\xbd|\xe5\x9f\x8e\xe5\xb8\x82|\xe5\x8c\xba\xe5\x8f\xb7|\xe9\x82\xae\xe7\xbc\x96|\xe8\xa1\x8c\xe6\x94\xbf\xe5\x8c\xba\xe5\x88\x92\xe4\xbb\xa3\xe7\xa0\x81|\xe8\xbf\x90\xe8\x90\xa5\xe5\x95\x86"\n    */\n}\n'