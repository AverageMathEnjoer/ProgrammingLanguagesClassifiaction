b'#\'Play a short sound\n#\'\n#\'\\code{beep} plays a short sound which is useful if you want to get notified, \n#\'for example, when a script has finished. As an added bonus there are a number \n#\'of different sounds to choose from.\n#\'\n#\'If \\code{beep} is not able to play the sound a warning is issued rather than \n#\'an error. This is in order to not risk aborting or stopping the process that\n#\'you wanted to get notified about.\n#\'\n#\'@param sound character string or number specifying what sound to be played by \n#\'  either specifying one of the built in sounds, specifying the path to a wav \n#\'  file or specifying an url. The default is 1. Possible sounds are:\n#\'  \\enumerate{ \\item \\code{"ping"} \\item \\code{"coin"} \\item \\code{"fanfare"}\n#\'  \\item \\code{"complete"} \\item \\code{"treasure"} \\item \\code{"ready"} \\item\n#\'  \\code{"shotgun"} \\item \\code{"mario"} \\item \\code{"wilhelm"} \\item\n#\'  \\code{"facebook"} \\item \\code{"sword"} } If \\code{sound} does not match any\n#\'  of the sounds above, or is a valid path or url, a random sound will be\n#\'  played. Currently \\code{beep} can only handle http urls, https is not\n#\'  supported.\n#\'@param expr An optional expression to be excecuted before the sound.\n#\'  \n#\'  \n#\'@return NULL\n#\'  \n#\' @examples\n#\' # Play a "ping" sound\n#\' beep()\n#\' \n#\' \\dontrun{\n#\' # Play a fanfare instead of a "ping".\n#\' beep("fanfare")\n#\' # or\n#\' beep(3)\n#\' \n#\' # Play a random sound\n#\' beep(0)\n#\' \n#\' # Update all packages and "ping" when it\'s ready\n#\' update.packages(ask=FALSE); beep()\n#\' }\n#\'@export\nbeep <- function(sound=1, expr=NULL) {\n  expr\n  sounds <- c(ping = "microwave_ping_mono.wav",\n              coin = "smb_coin.wav",\n              fanfare = "victory_fanfare_mono.wav",\n              complete = "work_complete.wav",\n              treasure = "new_item.wav",\n              ready = "ready_master.wav",\n              shotgun = "shotgun.wav",\n              mario = "smb_stage_clear.wav",\n              wilhelm = "wilhelm.wav",\n              facebook = "facebook.wav",\n              sword = "sword.wav")\n  sound_path <- NULL\n  if(is.na(sounds[sound]) || length(sounds[sound]) != 1) {\n    if(is.character(sound)) {\n      sound <- str_trim(sound)\n      if(file.exists(sound)) {\n        sound_path <- sound\n      } else if(str_detect(sound, "^https://")) {\n        warning("Can\'t currently use https urls, only http.")\n      } else if(str_detect(sound, "^http://")) {\n        temp_file <- tempfile(pattern="")\n        if(download.file(sound, destfile = temp_file, quiet = TRUE) == 0) { # The file was successfully downloaded\n          sound_path <- temp_file\n        } else {\n          warning(paste("Tried but could not download", sound))\n        }\n      } else {\n        warning(paste(\'"\', sound, \'" is not a valid sound nor path, playing a random sound instead.\', sep = ""))\n      }\n    }\n  } else {\n    sound_path <- system.file(paste("sounds/", sounds[sound], sep=""), package="beepr")\n  }\n  \n  if(is.null(sound_path)) { # play a random sound\n    sound_path <- system.file(paste("sounds/", sample(sounds, size=1), sep=""), package="beepr")\n  }\n  \n  tryCatch(play_file(sound_path), error = function(ex) {\n    warning("beep() could not play the sound due to the following error:\\n", ex)\n  })\n}\n\n#\'Play a short sound if there is an error \n#\'\n#\'\\code{beep_on_error} wraps an expression and plays a short sound only if an \n#\' error occurs. \n#\'\n#\'If \\code{beep} is not able to play the sound a warning is issued rather than \n#\'an error. This is in order to not risk aborting or stopping the process that\n#\'you wanted to get notified about.\n#\'\n#\'@param expr An expression to be evaluated for errors.\n#\' \n#\'@param sound character string or number specifying what sound to be played by \n#\'  either specifying one of the built in sounds, specifying the path to a wav \n#\'  file or specifying an url. The default is 1. Possible sounds are:\n#\'  \\enumerate{ \\item \\code{"ping"} \\item \\code{"coin"} \\item \\code{"fanfare"}\n#\'  \\item \\code{"complete"} \\item \\code{"treasure"} \\item \\code{"ready"} \\item\n#\'  \\code{"shotgun"} \\item \\code{"mario"} \\item \\code{"wilhelm"} \\item\n#\'  \\code{"facebook"} \\item \\code{"sword"} } If \\code{sound} does not match any\n#\'  of the sounds above, or is a valid path or url, a random sound will be\n#\'  played. Currently \\code{beep} can only handle http urls, https is not\n#\'  supported.\n#\'  \n#\'  \n#\'@return NULL\n#\'  \n#\'@examples\n#\' # Play a "ping" sound if \\code{expr} produces an error\n#\' beep_on_error(log("foo"))\n#\' \n#\' # Stay silent if \\code{expr} does not produce an error\n#\' beep_on_error(log(1))\n#\' \n#\' \\dontrun{\n#\' # Play the Wilhelm scream instead of a ping on error.\n#\' beep_on_error(runif("bar"), "wilhelm")\n#\' }\n#\' \n#\'@export\n\nbeep_on_error <- function(expr, sound = 1) {\n  q_expr <- substitute(expr)\n  \n  msg <- paste0("An error occurred in ", deparse(q_expr))\n  e <- simpleError(msg)\n  \n  tryCatch(expr, error = function(e) {\n    message(paste0(msg, ": ", e$message))\n    beep(sound)\n  })\n}\n\nis_wav_fname <- function(fname) {\n  str_detect(fname, regex("\\\\.wav$", ignore_case = TRUE))\n}\n\nescape_spaces <- function(s) {\n  str_replace_all(s, " ", "\\\\\\\\ ")\n}\n\nplay_vlc <- function(fname) {\n  fname <- escape_spaces(fname)\n  system(paste0("vlc -Idummy --no-loop --no-repeat --playlist-autostart --no-media-library --play-and-exit ", fname), \n         ignore.stdout = TRUE, ignore.stderr=TRUE,wait = FALSE)\n  invisible(NULL)\n}\n\nplay_paplay <- function(fname) {\n  fname <- escape_spaces(fname)\n  system(paste0("paplay ", fname), ignore.stdout = TRUE, ignore.stderr=TRUE,wait = FALSE)\n  invisible(NULL)\n}\n\nplay_aplay <- function(fname) {\n  fname <- escape_spaces(fname)\n  system(paste0("aplay --buffer-time=48000 -N -q ", fname), ignore.stdout = TRUE, ignore.stderr=TRUE,wait = FALSE)\n  invisible(NULL)\n}\n\nplay_audio <- function(fname) {\n  sfx <- load.wave(fname)\n  play(sfx)\n}\n\nplay_file <- function(fname) {\n  if(Sys.info()["sysname"] == "Linux") {\n     if(is_wav_fname(fname) && nchar(Sys.which("paplay")) >= 1) {\n      play_paplay(fname)\n    } else if(is_wav_fname(fname) && nchar(Sys.which("aplay")) >= 1) {\n      play_aplay(fname)\n    } else if(nchar(Sys.which("vlc")) >= 1) {\n      play_vlc(fname)\n    } else {\n      play_audio(fname)\n    }\n  } else {\n    play_audio(fname)\n  }\n}'