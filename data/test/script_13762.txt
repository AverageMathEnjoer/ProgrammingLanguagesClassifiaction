b'package effectivejava.chapter3.item13;\nimport java.util.Arrays;\n\n// A cloneable version of Stack (Pages 60-61)\npublic class Stack implements Cloneable {\n    private Object[] elements;\n    private int size = 0;\n    private static final int DEFAULT_INITIAL_CAPACITY = 16;\n\n    public Stack() {\n        this.elements = new Object[DEFAULT_INITIAL_CAPACITY];\n    }\n\n    public void push(Object e) {\n        ensureCapacity();\n        elements[size++] = e;\n    }\n    \n    public Object pop() {\n        if (size == 0)\n            throw new EmptyStackException();\n        Object result = elements[--size];\n        elements[size] = null; // Eliminate obsolete reference\n        return result;\n    }\n\n    public boolean isEmpty() {\n        return size ==0;\n    }\n\n    // Clone method for class with references to mutable state\n    @Override public Stack clone() {\n        try {\n            Stack result = (Stack) super.clone();\n            result.elements = elements.clone();\n            return result;\n        } catch (CloneNotSupportedException e) {\n            throw new AssertionError();\n        }\n    }\n\n    // Ensure space for at least one more element.\n    private void ensureCapacity() {\n        if (elements.length == size)\n            elements = Arrays.copyOf(elements, 2 * size + 1);\n    }\n    \n    // To see that clone works, call with several command line arguments\n    public static void main(String[] args) {\n        Stack stack = new Stack();\n        for (String arg : args)\n            stack.push(arg);\n        Stack copy = stack.clone();\n        while (!stack.isEmpty())\n            System.out.print(stack.pop() + " ");\n        System.out.println();\n        while (!copy.isEmpty())\n            System.out.print(copy.pop() + " ");\n    }\n}\n'