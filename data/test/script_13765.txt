b'package com.droidcba.kedditbysteps.features.news.adapter\n\nimport android.support.v4.util.SparseArrayCompat\nimport android.support.v7.widget.RecyclerView\nimport android.view.ViewGroup\nimport com.droidcba.kedditbysteps.commons.RedditNewsItem\nimport com.droidcba.kedditbysteps.commons.adapter.AdapterConstants\nimport com.droidcba.kedditbysteps.commons.adapter.ViewType\nimport com.droidcba.kedditbysteps.commons.adapter.ViewTypeDelegateAdapter\nimport java.util.*\n\nclass NewsAdapter(listener: NewsDelegateAdapter.onViewSelectedListener) : RecyclerView.Adapter<RecyclerView.ViewHolder>() {\n\n    private var items: ArrayList<ViewType>\n    private var delegateAdapters = SparseArrayCompat<ViewTypeDelegateAdapter>()\n    private val loadingItem = object : ViewType {\n        override fun getViewType() = AdapterConstants.LOADING\n    }\n\n    init {\n        delegateAdapters.put(AdapterConstants.LOADING, LoadingDelegateAdapter())\n        delegateAdapters.put(AdapterConstants.NEWS, NewsDelegateAdapter(listener))\n        items = ArrayList()\n        items.add(loadingItem)\n    }\n\n    override fun getItemCount(): Int = items.size\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int) =\n            delegateAdapters.get(viewType).onCreateViewHolder(parent)\n\n\n    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\n        delegateAdapters.get(getItemViewType(position)).onBindViewHolder(holder, items[position])\n    }\n\n    override fun getItemViewType(position: Int) = items[position].getViewType()\n\n    fun addNews(news: List<RedditNewsItem>) {\n        // first remove loading and notify\n        val initPosition = items.size - 1\n        items.removeAt(initPosition)\n        notifyItemRemoved(initPosition)\n\n        // insert news and the loading at the end of the list\n        items.addAll(news)\n        items.add(loadingItem)\n        notifyItemRangeChanged(initPosition, items.size + 1 /* plus loading item */)\n    }\n\n    fun clearAndAddNews(news: List<RedditNewsItem>) {\n        items.clear()\n        notifyItemRangeRemoved(0, getLastPosition())\n\n        items.addAll(news)\n        items.add(loadingItem)\n        notifyItemRangeInserted(0, items.size)\n    }\n\n    fun getNews(): List<RedditNewsItem> =\n            items\n                .filter { it.getViewType() == AdapterConstants.NEWS }\n                .map { it as RedditNewsItem }\n\n\n    private fun getLastPosition() = if (items.lastIndex == -1) 0 else items.lastIndex\n}'