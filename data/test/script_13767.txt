b'import Data.List \n\ntransform :: Ord a => [a] -> ([a], Int) \ntransform xs = (map last xss, position xs xss)\n  where \n    xss = sort (rots xs)\n\nposition :: Eq a => a -> [a] -> Int\nposition xs xss = length (takeWhile (/= xs) xss)\n\nrots :: [a] -> [[a]]\nrots xs = take (length xs) (iterate lrot xs)\n  where\n    lrot :: [a] -> [a]\n    lrot [] = []\n    lrot (y:ys) = ys ++ [y]\n\n\n'