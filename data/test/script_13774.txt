b'import assertk.assertThat\nimport assertk.assertions.isGreaterThan\nimport com.github.eprendre.tingshu.utils.Book\nimport com.github.eprendre.tingshu.utils.Episode\nimport org.jsoup.Jsoup\nimport org.junit.Test\nimport java.net.URLEncoder\n\n/**\n * \xe6\xb5\xb7\xe6\xb4\x8b\xe5\x90\xac\xe4\xb9\xa6\xe7\xbd\x91\xe6\xb5\x8b\xe8\xaf\x95\n */\nclass HaiYangUnitTest {\n\n    @Test\n    fun search() {\n        val keywords = "\xe4\xbb\x99"\n        val encodedKeywords = URLEncoder.encode(keywords, "gb2312")\n        val url = "http://m.ychy.com/search.asp?page=1&searchword=$encodedKeywords"\n        val doc = Jsoup.connect(url).testConfig().get()\n\n        val totalPage = doc.selectFirst(".page").ownText().split("/")[1]\n        println(totalPage)\n\n        val list = ArrayList<Book>()\n        val elementList = doc.select("#cateList_wap > .bookbox")\n        elementList.forEach { element ->\n            val bookId = element.attr("bookid")\n            val bookUrl = "http://m.ychy.com/book/$bookId.html"\n            val coverUrl = element.selectFirst(".bookimg > img").attr("orgsrc")\n            val bookinfo = element.selectFirst(".bookinfo")\n            val title = bookinfo.selectFirst(".bookname").text()\n            val (author, artist) = bookinfo.selectFirst(".author").text().split(" ").let {\n                Pair(it[0], it[1])\n            }\n            val intro = bookinfo.selectFirst(".intro_line").text()\n            val status = bookinfo.selectFirst(".update").text()\n            list.add(Book(coverUrl, bookUrl, title, author, artist).apply {\n                this.intro = intro\n                this.status = status\n            })\n        }\n        list.forEach { println(it) }\n        assertThat(list.size).isGreaterThan(0)\n    }\n\n    /**\n     * \xe4\xb9\xa6\xe7\xb1\x8d\xe8\xaf\xa6\xe7\xbb\x86\n     */\n    @Test\n    fun bookDetail() {\n        val doc = Jsoup.connect("http://m.ychy.com/book/14689.html").testConfig().get()\n\n        val episodes = doc.select("#playlist > ul > li > a").map {\n            Episode(it.text(), it.attr("abs:href"))\n        }\n\n        val intro = doc.selectFirst(".book_intro").text()\n        println(intro)\n\n        episodes.take(10).forEach { println(it) }\n        assertThat(episodes.size).isGreaterThan(0)\n    }\n\n    /**\n     * \xe5\x88\x86\xe7\xb1\xbb\n     */\n    @Test\n    fun category() {\n        val doc = Jsoup.connect("http://m.ychy.com/list/52.html").testConfig().get()\n        val nextUrl = doc.selectFirst(".ychy_next").attr("abs:href") ?: ""\n        val pages = doc.selectFirst(".page").ownText().let { text ->\n            Regex("(\\\\d+)/(\\\\d+)").find(text)!!.groupValues\n        }\n        val currentPage = pages[1].toInt()\n        val totalPage = pages[2].toInt()\n\n        println("$currentPage/$totalPage")\n        println("nextUrl: $nextUrl")\n\n        val list = ArrayList<Book>()\n        val elementList = doc.select("#infocon > li > a")\n        elementList.forEach { element ->\n            val bookUrl = element.absUrl("href")\n            val coverUrl = element.selectFirst("img").attr("src")\n            val bookInfo = element.selectFirst(".del")\n            val title = bookInfo.selectFirst(".tit").text()\n            val (author, artist) = bookInfo.selectFirst(".author").text().split("/").let {\n                Pair(it[1].trim(), it[0].trim())\n            }\n            val intro = bookInfo.selectFirst(".desc").text()\n            val status = bookInfo.selectFirst("p > span").text()\n            list.add(Book(coverUrl, bookUrl, title, author, artist).apply {\n                this.intro = intro\n                this.status = status\n            })\n        }\n        list.take(5).forEach { println(it) }\n        assertThat(list.size).isGreaterThan(0)\n    }\n\n    @Test\n    fun fetchCategory() {\n        val doc = Jsoup.connect("http://m.ychy.com/category.html").testConfig().get()\n\n        val str = doc.select(".fleiList > dl > dt > h2 > a").map { a ->\n            val href = a.absUrl("href")\n            val text = a.ownText()\n            return@map "CategoryTab(\\"$text\\", \\"$href\\")"\n        }.joinToString(",\\n")\n\n        println(str)\n    }\n}'