b'/*\n * Copyright (C) 2015 Naman Dwivedi\n *\n * Licensed under the GNU General Public License v3\n *\n * This is free software: you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n */\n\npackage com.naman14.timber.nowplaying;\n\nimport android.animation.ObjectAnimator;\nimport android.graphics.Bitmap;\nimport android.graphics.PorterDuff;\nimport android.os.AsyncTask;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.preference.PreferenceManager;\nimport androidx.annotation.Nullable;\nimport com.google.android.material.floatingactionbutton.FloatingActionButton;\nimport androidx.fragment.app.Fragment;\nimport androidx.core.content.ContextCompat;\nimport androidx.appcompat.app.ActionBar;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.recyclerview.widget.LinearLayoutManager;\nimport androidx.recyclerview.widget.RecyclerView;\nimport androidx.appcompat.widget.Toolbar;\nimport android.util.Log;\nimport android.view.Menu;\nimport android.view.MenuInflater;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.widget.ImageView;\nimport android.widget.SeekBar;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.afollestad.appthemeengine.ATE;\nimport com.afollestad.appthemeengine.Config;\nimport com.naman14.timber.MusicPlayer;\nimport com.naman14.timber.MusicService;\nimport com.naman14.timber.R;\nimport com.naman14.timber.activities.BaseActivity;\nimport com.naman14.timber.adapters.BaseQueueAdapter;\nimport com.naman14.timber.adapters.SlidingQueueAdapter;\nimport com.naman14.timber.dataloaders.QueueLoader;\nimport com.naman14.timber.listeners.MusicStateListener;\nimport com.naman14.timber.timely.TimelyView;\nimport com.naman14.timber.utils.Helpers;\nimport com.naman14.timber.utils.NavigationUtils;\nimport com.naman14.timber.utils.PreferencesUtility;\nimport com.naman14.timber.utils.SlideTrackSwitcher;\nimport com.naman14.timber.utils.TimberUtils;\nimport com.naman14.timber.widgets.CircularSeekBar;\nimport com.naman14.timber.widgets.DividerItemDecoration;\nimport com.naman14.timber.widgets.PlayPauseButton;\nimport com.naman14.timber.widgets.PlayPauseDrawable;\nimport com.nostra13.universalimageloader.core.DisplayImageOptions;\nimport com.nostra13.universalimageloader.core.ImageLoader;\nimport com.nostra13.universalimageloader.core.assist.FailReason;\nimport com.nostra13.universalimageloader.core.listener.SimpleImageLoadingListener;\n\nimport net.steamcrafted.materialiconlib.MaterialDrawableBuilder;\nimport net.steamcrafted.materialiconlib.MaterialIconView;\n\nimport java.security.InvalidParameterException;\n\npublic class BaseNowplayingFragment extends Fragment implements MusicStateListener {\n\n    private MaterialIconView previous, next;\n    private PlayPauseButton mPlayPause;\n    private PlayPauseDrawable playPauseDrawable = new PlayPauseDrawable();\n    private FloatingActionButton playPauseFloating;\n    private View playPauseWrapper;\n\n    private String ateKey;\n    private int overflowcounter = 0;\n    private TextView songtitle, songalbum, songartist, songduration, elapsedtime;\n    private SeekBar mProgress;\n    boolean fragmentPaused = false;\n\n    private CircularSeekBar mCircularProgress;\n    private BaseQueueAdapter mAdapter;\n    private SlidingQueueAdapter slidingQueueAdapter;\n\n    private TimelyView timelyView11, timelyView12, timelyView13, timelyView14, timelyView15;\n    private TextView hourColon;\n    private int[] timeArr = new int[]{0, 0, 0, 0, 0};\n    private Handler mElapsedTimeHandler;\n    private boolean duetoplaypause = false;\n\n    public ImageView albumart, shuffle, repeat;\n    public int accentColor;\n    public RecyclerView recyclerView;\n\n    //seekbar\n    public Runnable mUpdateProgress = new Runnable() {\n\n        @Override\n        public void run() {\n\n            long position = MusicPlayer.position();\n            if (mProgress != null) {\n                mProgress.setProgress((int) position);\n                if (elapsedtime != null && getActivity() != null)\n                    elapsedtime.setText(TimberUtils.makeShortTimeString(getActivity(), position / 1000));\n            }\n            overflowcounter--;\n            int delay = 250; //not sure why this delay was so high before\n            if (overflowcounter < 0 && !fragmentPaused) {\n                    overflowcounter++;\n                    mProgress.postDelayed(mUpdateProgress, delay); //delay\n            }\n        }\n    };\n\n    //circular seekbar\n    public Runnable mUpdateCircularProgress = new Runnable() {\n\n        @Override\n        public void run() {\n            long position = MusicPlayer.position();\n            if (mCircularProgress != null) {\n                mCircularProgress.setProgress((int) position);\n                if (elapsedtime != null && getActivity() != null)\n                    elapsedtime.setText(TimberUtils.makeShortTimeString(getActivity(), position / 1000));\n\n            }\n            overflowcounter--;\n            if (MusicPlayer.isPlaying()) {\n                int delay = (int) (1500 - (position % 1000));\n                if (overflowcounter < 0 && !fragmentPaused) {\n                    overflowcounter++;\n                    mCircularProgress.postDelayed(mUpdateCircularProgress, delay);\n                }\n            }\n\n        }\n    };\n\n    public Runnable mUpdateElapsedTime = new Runnable() {\n        @Override\n        public void run() {\n            if (getActivity() != null) {\n                String time = TimberUtils.makeShortTimeString(getActivity(), MusicPlayer.position() / 1000);\n                if (time.length() < 5) {\n                    timelyView11.setVisibility(View.GONE);\n                    timelyView12.setVisibility(View.GONE);\n                    hourColon.setVisibility(View.GONE);\n                    tv13(time.charAt(0) - \'0\');\n                    tv14(time.charAt(2) - \'0\');\n                    tv15(time.charAt(3) - \'0\');\n                } else if (time.length() == 5) {\n                    timelyView12.setVisibility(View.VISIBLE);\n                    tv12(time.charAt(0) - \'0\');\n                    tv13(time.charAt(1) - \'0\');\n                    tv14(time.charAt(3) - \'0\');\n                    tv15(time.charAt(4) - \'0\');\n                } else {\n                    timelyView11.setVisibility(View.VISIBLE);\n                    hourColon.setVisibility(View.VISIBLE);\n                    tv11(time.charAt(0) - \'0\');\n                    tv12(time.charAt(2) - \'0\');\n                    tv13(time.charAt(3) - \'0\');\n                    tv14(time.charAt(5) - \'0\');\n                    tv15(time.charAt(6) - \'0\');\n                }\n                mElapsedTimeHandler.postDelayed(this, 600);\n            }\n\n        }\n    };\n\n    private final View.OnClickListener mButtonListener = new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n            duetoplaypause = true;\n            if (!mPlayPause.isPlayed()) {\n                mPlayPause.setPlayed(true);\n                mPlayPause.startAnimation();\n            } else {\n                mPlayPause.setPlayed(false);\n                mPlayPause.startAnimation();\n            }\n            Handler handler = new Handler();\n            handler.postDelayed(new Runnable() {\n                @Override\n                public void run() {\n                    MusicPlayer.playOrPause();\n                    if (recyclerView != null && recyclerView.getAdapter() != null)\n                        recyclerView.getAdapter().notifyDataSetChanged();\n                }\n            }, 200);\n\n\n        }\n    };\n\n    private final View.OnClickListener mFLoatingButtonListener = new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n            duetoplaypause = true;\n            if(MusicPlayer.getCurrentTrack() == null) {\n                Toast.makeText(getContext(), getString(R.string.now_playing_no_track_selected), Toast.LENGTH_SHORT).show();\n            } else {\n                playPauseDrawable.transformToPlay(true);\n                playPauseDrawable.transformToPause(true);\n                Handler handler = new Handler();\n                handler.postDelayed(new Runnable() {\n                    @Override\n                    public void run() {\n                        MusicPlayer.playOrPause();\n                        if (recyclerView != null && recyclerView.getAdapter() != null)\n                            recyclerView.getAdapter().notifyDataSetChanged();\n                    }\n                }, 250);\n            }\n\n\n\n        }\n    };\n\n    @Override\n    public void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        ateKey = Helpers.getATEKey(getActivity());\n        accentColor = Config.accentColor(getActivity(), ateKey);\n    }\n\n    @Override\n    public void onActivityCreated(@Nullable Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n        setHasOptionsMenu(true);\n    }\n\n    @Override\n    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {\n        super.onCreateOptionsMenu(menu, inflater);\n        inflater.inflate(R.menu.now_playing, menu);\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        switch (item.getItemId()) {\n            case R.id.menu_go_to_album:\n                NavigationUtils.goToAlbum(getContext(), MusicPlayer.getCurrentAlbumId());\n                break;\n            case R.id.menu_go_to_artist:\n                NavigationUtils.goToArtist(getContext(), MusicPlayer.getCurrentArtistId());\n                break;\n            case R.id.action_lyrics:\n                NavigationUtils.goToLyrics(getContext());\n                break;\n        }\n        return super.onOptionsItemSelected(item);\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n        fragmentPaused = true;\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n        fragmentPaused = false;\n        if (mProgress != null)\n            mProgress.postDelayed(mUpdateProgress, 10);\n\n        if (mCircularProgress != null)\n            mCircularProgress.postDelayed(mUpdateCircularProgress, 10);\n    }\n\n    public void setSongDetails(View view) {\n\n        albumart = (ImageView) view.findViewById(R.id.album_art);\n        shuffle = (ImageView) view.findViewById(R.id.shuffle);\n        repeat = (ImageView) view.findViewById(R.id.repeat);\n        next = (MaterialIconView) view.findViewById(R.id.next);\n        previous = (MaterialIconView) view.findViewById(R.id.previous);\n        mPlayPause = (PlayPauseButton) view.findViewById(R.id.playpause);\n        playPauseFloating = (FloatingActionButton) view.findViewById(R.id.playpausefloating);\n        playPauseWrapper = view.findViewById(R.id.playpausewrapper);\n\n        songtitle = (TextView) view.findViewById(R.id.song_title);\n        songalbum = (TextView) view.findViewById(R.id.song_album);\n        songartist = (TextView) view.findViewById(R.id.song_artist);\n        songduration = (TextView) view.findViewById(R.id.song_duration);\n        elapsedtime = (TextView) view.findViewById(R.id.song_elapsed_time);\n\n        timelyView11 = (TimelyView) view.findViewById(R.id.timelyView11);\n        timelyView12 = (TimelyView) view.findViewById(R.id.timelyView12);\n        timelyView13 = (TimelyView) view.findViewById(R.id.timelyView13);\n        timelyView14 = (TimelyView) view.findViewById(R.id.timelyView14);\n        timelyView15 = (TimelyView) view.findViewById(R.id.timelyView15);\n        hourColon = (TextView) view.findViewById(R.id.hour_colon);\n\n        mProgress = (SeekBar) view.findViewById(R.id.song_progress);\n        mCircularProgress = (CircularSeekBar) view.findViewById(R.id.song_progress_circular);\n\n        recyclerView = (RecyclerView) view.findViewById(R.id.queue_recyclerview);\n\n\n        songtitle.setSelected(true);\n\n\n        Toolbar toolbar = (Toolbar) view.findViewById(R.id.toolbar);\n        if (toolbar != null) {\n            ((AppCompatActivity) getActivity()).setSupportActionBar(toolbar);\n            final ActionBar ab = ((AppCompatActivity) getActivity()).getSupportActionBar();\n            ab.setDisplayHomeAsUpEnabled(true);\n            ab.setTitle("");\n        }\n        if (mPlayPause != null && getActivity() != null) {\n            mPlayPause.setColor(ContextCompat.getColor(getContext(), android.R.color.white));\n        }\n\n        if (playPauseFloating != null) {\n            playPauseDrawable.setColorFilter(TimberUtils.getBlackWhiteColor(accentColor), PorterDuff.Mode.MULTIPLY);\n            playPauseFloating.setImageDrawable(playPauseDrawable);\n            if (MusicPlayer.isPlaying())\n                playPauseDrawable.transformToPause(false);\n            else playPauseDrawable.transformToPlay(false);\n        }\n\n        if (mCircularProgress != null) {\n            mCircularProgress.setCircleProgressColor(accentColor);\n            mCircularProgress.setPointerColor(accentColor);\n            mCircularProgress.setPointerHaloColor(accentColor);\n        }\n\n        if (timelyView11 != null) {\n            String time = TimberUtils.makeShortTimeString(getActivity(), MusicPlayer.position() / 1000);\n            if (time.length() < 5) {\n                timelyView11.setVisibility(View.GONE);\n                timelyView12.setVisibility(View.GONE);\n                hourColon.setVisibility(View.GONE);\n\n                changeDigit(timelyView13, time.charAt(0) - \'0\');\n                changeDigit(timelyView14, time.charAt(2) - \'0\');\n                changeDigit(timelyView15, time.charAt(3) - \'0\');\n\n            } else if (time.length() == 5) {\n                timelyView12.setVisibility(View.VISIBLE);\n                changeDigit(timelyView12, time.charAt(0) - \'0\');\n                changeDigit(timelyView13, time.charAt(1) - \'0\');\n                changeDigit(timelyView14, time.charAt(3) - \'0\');\n                changeDigit(timelyView15, time.charAt(4) - \'0\');\n            } else {\n                timelyView11.setVisibility(View.VISIBLE);\n                hourColon.setVisibility(View.VISIBLE);\n                changeDigit(timelyView11, time.charAt(0) - \'0\');\n                changeDigit(timelyView12, time.charAt(2) - \'0\');\n                changeDigit(timelyView13, time.charAt(3) - \'0\');\n                changeDigit(timelyView14, time.charAt(5) - \'0\');\n                changeDigit(timelyView15, time.charAt(6) - \'0\');\n            }\n        }\n\n        setSongDetails();\n\n    }\n\n    @Override\n    public void onViewCreated(View view, Bundle savedInstanceState) {\n        super.onViewCreated(view, savedInstanceState);\n        if (PreferenceManager.getDefaultSharedPreferences(getActivity()).getBoolean("dark_theme", false)) {\n            ATE.apply(this, "dark_theme");\n        } else {\n            ATE.apply(this, "light_theme");\n        }\n    }\n\n    private void setSongDetails() {\n        updateSongDetails();\n\n        if (recyclerView != null)\n            setQueueSongs();\n\n        setSeekBarListener();\n\n        if (next != null) {\n            next.setOnClickListener(new View.OnClickListener() {\n                @Override\n                public void onClick(View view) {\n                    Handler handler = new Handler();\n                    handler.postDelayed(new Runnable() {\n                        @Override\n                        public void run() {\n                            MusicPlayer.next();\n                            notifyPlayingDrawableChange();\n                        }\n                    }, 200);\n\n                }\n            });\n        }\n        if (previous != null) {\n            previous.setOnClickListener(new View.OnClickListener() {\n                @Override\n                public void onClick(View view) {\n                    Handler handler = new Handler();\n                    handler.postDelayed(new Runnable() {\n                        @Override\n                        public void run() {\n                            MusicPlayer.previous(getActivity(), false);\n                            notifyPlayingDrawableChange();\n                        }\n                    }, 200);\n\n                }\n            });\n        }\n\n        if (playPauseWrapper != null)\n            playPauseWrapper.setOnClickListener(mButtonListener);\n\n        if (playPauseFloating != null)\n            playPauseFloating.setOnClickListener(mFLoatingButtonListener);\n\n        updateShuffleState();\n        updateRepeatState();\n\n    }\n\n    public void updateShuffleState() {\n        if (shuffle != null && getActivity() != null) {\n            MaterialDrawableBuilder builder = MaterialDrawableBuilder.with(getActivity())\n                    .setIcon(MaterialDrawableBuilder.IconValue.SHUFFLE)\n                    .setSizeDp(30);\n\n            if (getActivity() != null) {\n                if (MusicPlayer.getShuffleMode() == 0) {\n                    builder.setColor(Config.textColorPrimary(getActivity(), ateKey));\n                } else builder.setColor(Config.accentColor(getActivity(), ateKey));\n            }\n\n            shuffle.setImageDrawable(builder.build());\n            shuffle.setOnClickListener(new View.OnClickListener() {\n                @Override\n                public void onClick(View view) {\n                    MusicPlayer.cycleShuffle();\n                    updateShuffleState();\n                    updateRepeatState();\n                }\n            });\n        }\n    }\n\n    public void updateRepeatState() {\n        if (repeat != null && getActivity() != null) {\n            MaterialDrawableBuilder builder = MaterialDrawableBuilder.with(getActivity())\n                    .setSizeDp(30);\n\n                if (MusicPlayer.getRepeatMode() == MusicService.REPEAT_NONE) {\n                    builder.setIcon(MaterialDrawableBuilder.IconValue.REPEAT);\n                    builder.setColor(Config.textColorPrimary(getActivity(), ateKey));\n                } else if (MusicPlayer.getRepeatMode() == MusicService.REPEAT_CURRENT) {\n                    builder.setIcon(MaterialDrawableBuilder.IconValue.REPEAT_ONCE);\n                    builder.setColor(Config.accentColor(getActivity(), ateKey));\n                } else if (MusicPlayer.getRepeatMode() == MusicService.REPEAT_ALL) {\n                    builder.setColor(Config.accentColor(getActivity(), ateKey));\n                    builder.setIcon(MaterialDrawableBuilder.IconValue.REPEAT);\n                }\n\n\n            repeat.setImageDrawable(builder.build());\n            repeat.setOnClickListener(new View.OnClickListener() {\n                @Override\n                public void onClick(View view) {\n                    MusicPlayer.cycleRepeat();\n                    updateRepeatState();\n                    updateShuffleState();\n                }\n            });\n        }\n    }\n\n    private void setSeekBarListener() {\n        if (mProgress != null)\n            mProgress.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {\n                @Override\n                public void onProgressChanged(SeekBar seekBar, int i, boolean b) {\n                    if (b) {\n                        MusicPlayer.seek((long) i);\n                    }\n                }\n\n                @Override\n                public void onStartTrackingTouch(SeekBar seekBar) {\n                }\n\n                @Override\n                public void onStopTrackingTouch(SeekBar seekBar) {\n                }\n            });\n        if (mCircularProgress != null) {\n            mCircularProgress.setOnSeekBarChangeListener(new CircularSeekBar.OnCircularSeekBarChangeListener() {\n                @Override\n                public void onProgressChanged(CircularSeekBar circularSeekBar, int progress, boolean fromUser) {\n                    if (fromUser) {\n                        MusicPlayer.seek((long) progress);\n                    }\n                }\n\n                @Override\n                public void onStopTrackingTouch(CircularSeekBar seekBar) {\n\n                }\n\n                @Override\n                public void onStartTrackingTouch(CircularSeekBar seekBar) {\n\n                }\n            });\n        }\n    }\n\n    public void updateSongDetails() {\n        //do not reload image if it was a play/pause change\n        if (!duetoplaypause) {\n            if (albumart != null) {\n                ImageLoader.getInstance().displayImage(TimberUtils.getAlbumArtUri(MusicPlayer.getCurrentAlbumId()).toString(), albumart,\n                        new DisplayImageOptions.Builder().cacheInMemory(true)\n                                .showImageOnFail(R.drawable.ic_empty_music2)\n                                .build(), new SimpleImageLoadingListener() {\n\n                            @Override\n                            public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {\n                                doAlbumArtStuff(loadedImage);\n                            }\n\n                            @Override\n                            public void onLoadingFailed(String imageUri, View view, FailReason failReason) {\n                                Bitmap failedBitmap = ImageLoader.getInstance().loadImageSync("drawable://" + R.drawable.ic_empty_music2);\n                                doAlbumArtStuff(failedBitmap);\n                            }\n\n                        });\n            }\n            if (songtitle != null && MusicPlayer.getTrackName() != null) {\n                    songtitle.setText(MusicPlayer.getTrackName());\n                    if(MusicPlayer.getTrackName().length() <= 23){\n                        songtitle.setTextSize(25);\n                    }\n                    else if(MusicPlayer.getTrackName().length() >= 30){\n                        songtitle.setTextSize(18);\n                    }\n                    else{\n                        songtitle.setTextSize(18 + (MusicPlayer.getTrackName().length() - 24));\n                    }\n                    Log.v("BaseNowPlayingFrag", "Title Text Size: " + songtitle.getTextSize());\n            }\n            if (songartist != null) {\n                songartist.setText(MusicPlayer.getArtistName());\n                songartist.setOnClickListener(new View.OnClickListener() {\n                    @Override\n                    public void onClick(View v) {\n                        NavigationUtils.goToArtist(getContext(), MusicPlayer.getCurrentArtistId());\n                    }\n                });\n            }\n            if (songalbum != null)\n                songalbum.setText(MusicPlayer.getAlbumName());\n\n        }\n        duetoplaypause = false;\n\n        if (mPlayPause != null)\n            updatePlayPauseButton();\n\n        if (playPauseFloating != null)\n            updatePlayPauseFloatingButton();\n\n        if (songduration != null && getActivity() != null)\n            songduration.setText(TimberUtils.makeShortTimeString(getActivity(), MusicPlayer.duration() / 1000));\n\n        if (mProgress != null) {\n            mProgress.setMax((int) MusicPlayer.duration());\n            if (mUpdateProgress != null) {\n                mProgress.removeCallbacks(mUpdateProgress);\n            }\n            mProgress.postDelayed(mUpdateProgress, 10);\n        }\n        if (mCircularProgress != null) {\n            mCircularProgress.setMax((int) MusicPlayer.duration());\n            if (mUpdateCircularProgress != null) {\n                mCircularProgress.removeCallbacks(mUpdateCircularProgress);\n            }\n            mCircularProgress.postDelayed(mUpdateCircularProgress, 10);\n        }\n\n        if (timelyView11 != null) {\n            mElapsedTimeHandler = new Handler();\n            mElapsedTimeHandler.postDelayed(mUpdateElapsedTime, 600);\n        }\n    }\n\n    public void setQueueSongs() {\n        recyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));\n        //load queue songs in asynctask\n        if (getActivity() != null)\n            new loadQueueSongs().execute("");\n\n    }\n\n    public void updatePlayPauseButton() {\n        if (MusicPlayer.isPlaying()) {\n            if (!mPlayPause.isPlayed()) {\n                mPlayPause.setPlayed(true);\n                mPlayPause.startAnimation();\n            }\n        } else {\n            if (mPlayPause.isPlayed()) {\n                mPlayPause.setPlayed(false);\n                mPlayPause.startAnimation();\n            }\n        }\n    }\n\n    public void updatePlayPauseFloatingButton() {\n        if (MusicPlayer.isPlaying()) {\n            playPauseDrawable.transformToPause(false);\n        } else {\n            playPauseDrawable.transformToPlay(false);\n        }\n    }\n\n    public void notifyPlayingDrawableChange() {\n        int position = MusicPlayer.getQueuePosition();\n        BaseQueueAdapter.currentlyPlayingPosition = position;\n    }\n\n    public void restartLoader() {\n\n    }\n\n    public void onPlaylistChanged() {\n\n    }\n\n    public void onMetaChanged() {\n        updateSongDetails();\n\n        if (recyclerView != null && recyclerView.getAdapter() != null)\n            recyclerView.getAdapter().notifyDataSetChanged();\n    }\n\n    public void setMusicStateListener() {\n        ((BaseActivity) getActivity()).setMusicStateListenerListener(this);\n    }\n\n    public void doAlbumArtStuff(Bitmap loadedImage) {\n\n    }\n\n    public void changeDigit(TimelyView tv, int end) {\n        ObjectAnimator obja = tv.animate(end);\n        obja.setDuration(400);\n        obja.start();\n    }\n\n    public void changeDigit(TimelyView tv, int start, int end) {\n        try {\n            ObjectAnimator obja = tv.animate(start, end);\n            obja.setDuration(400);\n            obja.start();\n        } catch (InvalidParameterException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void tv11(int a) {\n        if (a != timeArr[0]) {\n            changeDigit(timelyView11, timeArr[0], a);\n            timeArr[0] = a;\n        }\n    }\n\n    public void tv12(int a) {\n        if (a != timeArr[1]) {\n            changeDigit(timelyView12, timeArr[1], a);\n            timeArr[1] = a;\n        }\n    }\n\n    public void tv13(int a) {\n        if (a != timeArr[2]) {\n            changeDigit(timelyView13, timeArr[2], a);\n            timeArr[2] = a;\n        }\n    }\n\n    public void tv14(int a) {\n        if (a != timeArr[3]) {\n            changeDigit(timelyView14, timeArr[3], a);\n            timeArr[3] = a;\n        }\n    }\n\n    public void tv15(int a) {\n        if (a != timeArr[4]) {\n            changeDigit(timelyView15, timeArr[4], a);\n            timeArr[4] = a;\n        }\n    }\n\n    protected void initGestures(View v) {\n        if (PreferencesUtility.getInstance(v.getContext()).isGesturesEnabled()) {\n            new SlideTrackSwitcher() {\n                @Override\n                public void onSwipeBottom() {\n                    getActivity().finish();\n                }\n            }.attach(v);\n        }\n    }\n\n    private class loadQueueSongs extends AsyncTask<String, Void, String> {\n\n        @Override\n        protected String doInBackground(String... params) {\n            if (getActivity() != null) {\n                mAdapter = new BaseQueueAdapter((AppCompatActivity) getActivity(), QueueLoader.getQueueSongs(getActivity()));\n                return "Executed";\n            } else return null;\n        }\n\n        @Override\n        protected void onPostExecute(String result) {\n            if (result != null) {\n                recyclerView.setAdapter(mAdapter);\n                if (getActivity() != null)\n                    recyclerView.addItemDecoration(new DividerItemDecoration(getActivity(), DividerItemDecoration.VERTICAL_LIST));\n                recyclerView.scrollToPosition(MusicPlayer.getQueuePosition() - 1);\n            }\n\n        }\n\n        @Override\n        protected void onPreExecute() {\n        }\n    }\n}\n'