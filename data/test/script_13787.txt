b'module Test.Property\n       ( okTestTree\n       ) where\n\nimport Control.Applicative (liftA2)\nimport Hedgehog (Gen, MonadTest, Property, assert, forAll, property, (===))\nimport Test.Tasty (TestTree)\nimport Test.Tasty.Hedgehog (testProperty)\n\nimport Parser (char, ok, runP)\n\nimport qualified Hedgehog.Gen as Gen\nimport qualified Hedgehog.Range as Range\n\nokTestTree :: [TestTree]\nokTestTree = [ testProperty "ok always succeeds" prop_Ok\n             , testProperty "char property" prop_Char\n             ]\n\ngenString :: Gen String\ngenString =\n  let listLength = Range.linear 0 100\n  in  Gen.list listLength Gen.alpha\n\nprop_Ok :: Property\nprop_Ok = property $\n  forAll genString >>= \\s ->\n  runP ok s === Just ((), s)\n\ncheckChar :: (MonadTest m) => Char -> String -> m ()\ncheckChar c s = case runP (char c) s of\n    Just (c\', s\') -> (c\', c\' : s\') === (c, s)\n    Nothing       -> assert $ null s || c /= head s\n\ngenCharAndString :: Gen (Char, String)\ngenCharAndString = Gen.bool >>= \\b -> case b of\n   True  -> Gen.alpha >>= \\c -> genString >>= \\s -> pure (c, c : s)\n   False -> liftA2 (,) Gen.alpha genString\n\nprop_Char :: Property\nprop_Char = property $\n  forAll genCharAndString >>= \\(c, s) ->\n  checkChar c s\n'