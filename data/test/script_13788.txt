b'package com.ethanhua.skeleton;\n\nimport android.support.annotation.ArrayRes;\nimport android.support.annotation.ColorRes;\nimport android.support.annotation.IntRange;\nimport android.support.annotation.LayoutRes;\nimport android.support.v4.content.ContextCompat;\nimport android.support.v7.widget.RecyclerView;\n\n/**\n * Created by ethanhua on 2017/7/29.\n */\n\npublic class RecyclerViewSkeletonScreen implements SkeletonScreen {\n\n    private final RecyclerView mRecyclerView;\n    private final RecyclerView.Adapter mActualAdapter;\n    private final SkeletonAdapter mSkeletonAdapter;\n    private final boolean mRecyclerViewFrozen;\n\n    private RecyclerViewSkeletonScreen(Builder builder) {\n        mRecyclerView = builder.mRecyclerView;\n        mActualAdapter = builder.mActualAdapter;\n        mSkeletonAdapter = new SkeletonAdapter();\n        mSkeletonAdapter.setItemCount(builder.mItemCount);\n        mSkeletonAdapter.setLayoutReference(builder.mItemResID);\n        mSkeletonAdapter.setArrayOfLayoutReferences(builder.mItemsResIDArray);\n        mSkeletonAdapter.shimmer(builder.mShimmer);\n        mSkeletonAdapter.setShimmerColor(builder.mShimmerColor);\n        mSkeletonAdapter.setShimmerAngle(builder.mShimmerAngle);\n        mSkeletonAdapter.setShimmerDuration(builder.mShimmerDuration);\n        mRecyclerViewFrozen = builder.mFrozen;\n    }\n\n    @Override\n    public void show() {\n        mRecyclerView.setAdapter(mSkeletonAdapter);\n        if (!mRecyclerView.isComputingLayout() && mRecyclerViewFrozen) {\n            mRecyclerView.setLayoutFrozen(true);\n        }\n    }\n\n    @Override\n    public void hide() {\n        mRecyclerView.setAdapter(mActualAdapter);\n    }\n\n    public static class Builder {\n        private RecyclerView.Adapter mActualAdapter;\n        private final RecyclerView mRecyclerView;\n        private boolean mShimmer = true;\n        private int mItemCount = 10;\n        private int mItemResID = R.layout.layout_default_item_skeleton;\n        private int[] mItemsResIDArray;\n        private int mShimmerColor;\n        private int mShimmerDuration = 1000;\n        private int mShimmerAngle = 20;\n        private boolean mFrozen = true;\n\n        public Builder(RecyclerView recyclerView) {\n            this.mRecyclerView = recyclerView;\n            this.mShimmerColor = ContextCompat.getColor(recyclerView.getContext(), R.color.shimmer_color);\n        }\n\n        /**\n         * @param adapter the target recyclerView actual adapter\n         */\n        public Builder adapter(RecyclerView.Adapter adapter) {\n            this.mActualAdapter = adapter;\n            return this;\n        }\n\n        /**\n         * @param itemCount the child item count in recyclerView\n         */\n        public Builder count(int itemCount) {\n            this.mItemCount = itemCount;\n            return this;\n        }\n\n        /**\n         * @param shimmer whether show shimmer animation\n         */\n        public Builder shimmer(boolean shimmer) {\n            this.mShimmer = shimmer;\n            return this;\n        }\n\n        /**\n         * the duration of the animation , the time it will take for the highlight to move from one end of the layout\n         * to the other.\n         *\n         * @param shimmerDuration Duration of the shimmer animation, in milliseconds\n         */\n        public Builder duration(int shimmerDuration) {\n            this.mShimmerDuration = shimmerDuration;\n            return this;\n        }\n\n        /**\n         * @param shimmerColor the shimmer color\n         */\n        public Builder color(@ColorRes int shimmerColor) {\n            this.mShimmerColor = ContextCompat.getColor(mRecyclerView.getContext(), shimmerColor);\n            return this;\n        }\n\n        /**\n         * @param shimmerAngle the angle of the shimmer effect in clockwise direction in degrees.\n         */\n        public Builder angle(@IntRange(from = 0, to = 30) int shimmerAngle) {\n            this.mShimmerAngle = shimmerAngle;\n            return this;\n        }\n\n        /**\n         * @param skeletonLayoutResID the loading skeleton layoutResID\n         */\n        public Builder load(@LayoutRes int skeletonLayoutResID) {\n            this.mItemResID = skeletonLayoutResID;\n            return this;\n        }\n\n        /**\n         * @param skeletonLayoutResIDs the loading array of skeleton layoutResID\n         */\n        public Builder loadArrayOfLayouts(@ArrayRes int[] skeletonLayoutResIDs) {\n            this.mItemsResIDArray = skeletonLayoutResIDs;\n            return this;\n        }\n\n        /**\n         * @param frozen whether frozen recyclerView during skeleton showing\n         * @return\n         */\n        public Builder frozen(boolean frozen) {\n            this.mFrozen = frozen;\n            return this;\n        }\n\n        public RecyclerViewSkeletonScreen show() {\n            RecyclerViewSkeletonScreen recyclerViewSkeleton = new RecyclerViewSkeletonScreen(this);\n            recyclerViewSkeleton.show();\n            return recyclerViewSkeleton;\n        }\n    }\n}\n'