b'package effectivejava.chapter5.item33;\nimport java.util.*;\n\n// Typesafe heterogeneous container pattern (Pages 151-4)\npublic class Favorites {\n    private Map<Class<?>, Object> favorites = new HashMap<>();\n\n    public <T> void putFavorite(Class<T> type, T instance) {\n        favorites.put(Objects.requireNonNull(type), instance);\n    }\n\n    public <T> T getFavorite(Class<T> type) {\n        return type.cast(favorites.get(type));\n    }\n\n//    // Achieving runtime type safety with a dynamic cast\n//    public <T> void putFavorite(Class<T> type, T instance) {\n//        favorites.put(Objects.requireNonNull(type), type.cast(instance));\n//    }\n\n    public static void main(String[] args) {\n        Favorites f = new Favorites();\n        f.putFavorite(String.class, "Java");\n        f.putFavorite(Integer.class, 0xcafebabe);\n        f.putFavorite(Class.class, Favorites.class);\n        String favoriteString = f.getFavorite(String.class);\n        int favoriteInteger = f.getFavorite(Integer.class);\n        Class<?> favoriteClass = f.getFavorite(Class.class);\n        System.out.printf("%s %x %s%n", favoriteString,\n                favoriteInteger, favoriteClass.getName());\n    }\n}'