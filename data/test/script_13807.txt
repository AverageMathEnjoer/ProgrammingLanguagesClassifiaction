b'context("plots")\ntest_that("plots work", {\n  # test plots\n  dds <- makeExampleDESeqDataSet(n=100,m=8)\n  dds$group <- factor(rep(c(1,2,1,2),each=2))\n  dds <- DESeq(dds)\n  res <- results(dds)\n  plotDispEsts(dds)\n  plotDispEsts(dds, CV=TRUE)\n  plotMA(dds)\n  plotMA(dds, ylim=c(-1,1))\n  plotCounts(dds, 1)\n  plotCounts(dds, 1, intgroup=c("condition","group"))\n  plotCounts(dds, 1, transform=TRUE)\n  expect_error(plotCounts(dds, 1, intgroup="foo"))\n  vsd <- varianceStabilizingTransformation(dds, blind=FALSE)\n  plotPCA(vsd)\n  dat <- plotPCA(vsd, returnData=TRUE)\n  plotPCA(vsd, intgroup=c("condition","group"))\n  expect_error(plotPCA(vsd, intgroup="foo"))\n  plotSparsity(dds)\n\n  # plotMA MLE\n  dds <- DESeq(dds, betaPrior=TRUE)\n  res <- results(dds)\n  expect_error(plotMA(res, MLE=TRUE))\n  res <- results(dds, addMLE=TRUE)\n  plotMA(res, MLE=TRUE)\n\n  # plotCounts with numeric variable in design gives error\n  dds <- removeResults(dds)\n  dds$x <- 1:8  \n  design(dds) <- ~x\n  dds <- DESeq(dds)\n  expect_error(plotCounts(dds, 1, "x"), "plot manually")\n  \n  dev.off()\n  \n})\n'