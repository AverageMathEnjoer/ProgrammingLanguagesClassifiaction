b'package icu.nullptr.twifucker.hook\n\nimport com.github.kyuubiran.ezxhelper.ClassUtils.loadClass\nimport com.github.kyuubiran.ezxhelper.HookFactory.`-Static`.createHook\nimport com.github.kyuubiran.ezxhelper.Log\nimport com.github.kyuubiran.ezxhelper.finders.FieldFinder\nimport com.github.kyuubiran.ezxhelper.finders.MethodFinder\nimport icu.nullptr.twifucker.afterMeasure\nimport icu.nullptr.twifucker.isEntryNeedsRemove\n\nobject JsonTimelineEntryHook : BaseHook() {\n    override val name: String\n        get() = "TimelineEntryHook"\n\n    override fun init() {\n        val jsonTimelineEntryClass =\n            loadClass("com.twitter.model.json.timeline.urt.JsonTimelineEntry")\n        val jsonTimelineEntryMapperClass =\n            loadClass("com.twitter.model.json.timeline.urt.JsonTimelineEntry\\$\\$JsonObjectMapper")\n\n        val entryIdField =\n            FieldFinder.fromClass(jsonTimelineEntryClass).filterByType(String::class.java).first()\n        val contentField =\n            FieldFinder.fromClass(jsonTimelineEntryClass).filter { type.isInterface }.first()\n\n        MethodFinder.fromClass(jsonTimelineEntryMapperClass).filterByName("_parse")\n            .filterByReturnType(jsonTimelineEntryClass).first().createHook {\n                afterMeasure(name) { param ->\n                    param.result ?: return@afterMeasure\n                    val entryId = entryIdField.get(param.result) as String\n                    if (isEntryNeedsRemove(entryId)) {\n                        contentField.set(param.result, null)\n                        Log.d("Remove timeline entry item: $entryId")\n                    }\n                }\n            }\n    }\n}\n'