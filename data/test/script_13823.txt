b'// I2Cdev library collection - SSD1308 I2C device class header file\n// Based on Solomon Systech SSD1308 datasheet, rev. 1, 10/2008\n// 8/25/2011 by Andrew Schamp <schamp@gmail.com>\n//\n// This I2C device library is using (and submitted as a part of) Jeff Rowberg\'s I2Cdevlib library,\n// which should (hopefully) always be available at https://github.com/jrowberg/i2cdevlib\n//\n// Changelog:\n//     2011-08-25 - initial release\n        \n/* ============================================\nI2Cdev device library code is placed under the MIT license\nCopyright (c) 2011 Andrew Schamp\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n===============================================\n*/\n\n#include "SSD1308.h"\n#include "I2Cdev.h"\n\n//#ifdef SSD1308_USE_FONT\n#include "fixedWidthFont.h"\n//#endif\n\nSSD1308::SSD1308(uint8_t address) :\n  m_devAddr(address)\n{\n}\n\nvoid SSD1308::initialize() \n{\n  setHorizontalAddressingMode();\n  clearDisplay();\n}\n\nvoid SSD1308::clearDisplay()\n{\n  setDisplayOff();\n  setPageAddress(0, 7);     // all pages\n  setColumnAddress(0, 127); // all columns\n  for (uint8_t page = 0; page < 8; page++)\n  {\n    for (uint8_t col = 0; col < 128; col++)\n    {\n      sendData(0x0);\n    }\n  }\n  setDisplayOn();\n}\n\nvoid SSD1308::fillDisplay()\n{\n  setPageAddress(0, MAX_PAGE);      // all pages\n  setColumnAddress(0, MAX_COL); // all columns\n\n  uint8_t b = 0;\n  for (uint8_t page = 0; page < PAGES; page++)\n  {\n    for (uint8_t col = 0; col < COLUMNS; col++)\n    {\n      sendData(b++);\n    }\n  }\n}\n\nvoid SSD1308::writeChar(char chr)\n{\n//#ifdef SSD1308_USE_FONT\n  const uint8_t char_index = chr - 0x20;\n  for (uint8_t i = 0; i < 8; i++) {\n     const uint8_t b = pgm_read_byte( &fontData[char_index][i] );\n     sendData( b ); \n  }\n//#endif\n}\n\nvoid SSD1308::writeString(uint8_t row, uint8_t col, uint16_t len, const char * text)\n{\n  uint16_t index = 0;\n  setPageAddress(row, MAX_PAGE);\n  const uint8_t col_addr = FONT_WIDTH*col;\n  setColumnAddress(col_addr, MAX_COL);\n\n  while ((col+index) < CHARS && (index < len)) {\n     // write first line, starting at given position\n     writeChar(text[index++]);\n  }\n\n  // write remaining lines\n  // write until the end of memory\n  // then wrap around again from the top.\n  if (index + 1 < len) {\n    setPageAddress(row + 1, MAX_PAGE);\n    setColumnAddress(0, MAX_COL);\n    bool wrapEntireScreen = false;\n    while (index + 1 < len) {\n       writeChar(text[index++]);\n       // if we\'ve written the last character space on the screen, \n       // reset the page and column address so that it wraps around from the top again\n       if (!wrapEntireScreen && (row*CHARS + col + index) > 127) {\n         setPageAddress(0, MAX_PAGE);\n         setColumnAddress(0, MAX_COL);\n         wrapEntireScreen = true;\n       }\n    }\n  }\n}\n\nvoid SSD1308::sendCommand(uint8_t command)\n{\n  I2Cdev::writeByte(m_devAddr, COMMAND_MODE, command);\n}\n\nvoid SSD1308::sendCommands(uint8_t len, uint8_t* commands)\n{\n  I2Cdev::writeBytes(m_devAddr, COMMAND_MODE, len, commands);\n}\n\nvoid SSD1308::sendData(uint8_t data)\n{\n  I2Cdev::writeByte(m_devAddr, DATA_MODE, data);\n}\n\nvoid SSD1308::sendData(uint8_t len, uint8_t* data)\n{\n  I2Cdev::writeBytes(m_devAddr, DATA_MODE, len, data);\n}\n\nvoid SSD1308::setHorizontalAddressingMode()\n{\n  setMemoryAddressingMode(HORIZONTAL_ADDRESSING_MODE); \n}\nvoid SSD1308::setVerticalAddressingMode()\n{\n  setMemoryAddressingMode(VERTICAL_ADDRESSING_MODE); \n}\nvoid SSD1308::setPageAddressingMode()\n{\n  setMemoryAddressingMode(PAGE_ADDRESSING_MODE); \n}\n    \nvoid SSD1308::setMemoryAddressingMode(uint8_t mode)\n{\n  uint8_t cmds[2] = { SET_MEMORY_ADDRESSING_MODE, mode };\n  sendCommands(2, cmds); \n}\n\nvoid SSD1308::setDisplayOn()\n{\n  sendCommand(SET_DISPLAY_POWER_ON);\n}\n\nvoid SSD1308::setDisplayOff()\n{\n  sendCommand(SET_DISPLAY_POWER_OFF);\n}\n\nvoid SSD1308::setDisplayPower(bool on)\n{\n  if (on) {\n    setDisplayOn();\n  } else {\n    setDisplayOff();\n  }\n}\n\nvoid SSD1308::setPageAddress(uint8_t start, uint8_t end) \n{\n  uint8_t data[3] = { SET_PAGE_ADDRESS, start, end };\n  sendCommands(3, data);  \n}\n\nvoid SSD1308::setColumnAddress(uint8_t start, uint8_t end) \n{\n  uint8_t data[3] = { SET_COLUMN_ADDRESS, start, end };\n  sendCommands(3, data);  \n}\n\n'