b'-- | Get options from the environment\n{-# LANGUAGE DeriveDataTypeable, ScopedTypeVariables #-}\nmodule Test.Tasty.Options.Env (getEnvOptions, suiteEnvOptions) where\n\nimport Test.Tasty.Options\nimport Test.Tasty.Core\nimport Test.Tasty.Ingredients\nimport Test.Tasty.Runners.Reducers\n\nimport System.Environment\nimport Data.Foldable\nimport Data.Tagged\nimport Data.Proxy\nimport Data.Char\nimport Data.Typeable\nimport Control.Exception\nimport Control.Applicative\nimport Prelude  -- Silence AMP and FTP import warnings\nimport Text.Printf\n\ndata EnvOptionException\n  = BadOption\n      String -- option name\n      String -- variable name\n      String -- value\n  deriving (Typeable)\n\ninstance Show EnvOptionException where\n  show (BadOption optName varName value) =\n    printf\n      "Bad environment variable %s=\'%s\' (parsed as option %s)"\n        varName value optName\n\ninstance Exception EnvOptionException\n\n-- | Search the environment for given options\ngetEnvOptions :: [OptionDescription] -> IO OptionSet\ngetEnvOptions = getApp . foldMap lookupOpt\n  where\n    lookupOpt :: OptionDescription -> Ap IO OptionSet\n    lookupOpt (Option (px :: Proxy v)) = do\n      let\n        name = proxy optionName px\n        envName = ("TASTY_" ++) . flip map name $ \\c ->\n          if c == \'-\'\n            then \'_\'\n            else toUpper c\n      mbValueStr <- Ap $ myLookupEnv envName\n      flip foldMap mbValueStr $ \\valueStr ->\n        let\n          mbValue :: Maybe v\n          mbValue = parseValue valueStr\n\n          err = throwIO $ BadOption name envName valueStr\n\n        in Ap $ maybe err (return . singleOption) mbValue\n\n-- | Search the environment for all options relevant for this suite\nsuiteEnvOptions :: [Ingredient] -> TestTree -> IO OptionSet\nsuiteEnvOptions ins tree = getEnvOptions $ suiteOptions ins tree\n\n-- note: switch to lookupEnv once we no longer support 7.4\nmyLookupEnv :: String -> IO (Maybe String)\nmyLookupEnv name = either (const Nothing) Just <$> (try (getEnv name) :: IO (Either IOException String))\n'