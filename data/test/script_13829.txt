b'using Pgno = System.UInt32;\n\nnamespace CS_SQLite3\n{\n  public partial class CSSQLite\n  {\n    /*\n    ** 2001 September 15\n    **\n    ** The author disclaims copyright to this source code.  In place of\n    ** a legal notice, here is a blessing:\n    **\n    **    May you do good and not evil.\n    **    May you find forgiveness for yourself and forgive others.\n    **    May you share freely, never taking more than you give.\n    **\n    *************************************************************************\n    ** This header file defines the interface that the sqlite page cache\n    ** subsystem.  The page cache subsystem reads and writes a file a page\n    ** at a time and provides a journal for rollback.\n    **\n    ** @(#) $Id: pager.h,v 1.104 2009/07/24 19:01:19 drh Exp $\n    **\n    *************************************************************************\n    **  Included in SQLite3 port to C#-SQLite;  2008 Noah B Hart\n    **  C#-SQLite is an independent reimplementation of the SQLite software library\n    **\n    **  $Header$\n    *************************************************************************\n    */\n\n    //#if !_PAGER_H_\n    //#define _PAGER_H_\n\n    /*\n    ** Default maximum size for persistent journal files. A negative\n    ** value means no limit. This value may be overridden using the\n    ** sqlite3PagerJournalSizeLimit() API. See also "PRAGMA journal_size_limit".\n    */\n#if !SQLITE_DEFAULT_JOURNAL_SIZE_LIMIT\n    const int SQLITE_DEFAULT_JOURNAL_SIZE_LIMIT = -1;//#define SQLITE_DEFAULT_JOURNAL_SIZE_LIMIT -1\n#endif\n\n    /*\n** The type used to represent a page number.  The first page in a file\n** is called page 1.  0 is used to represent "not a page".\n*/\n    //typedef u32 Pgno;\n\n    /*\n    ** Each open file is managed by a separate instance of the "Pager" structure.\n    */\n    //typedef struct Pager Pager;\n\n    /*\n    ** Handle type for pages.\n    */\n    //typedef struct PgHdr DbPage;\n\n    /*\n    ** Page number PAGER_MJ_PGNO is never used in an SQLite database (it is\n    ** reserved for working around a windows/posix incompatibility). It is\n    ** used in the journal to signify that the remainder of the journal file\n    ** is devoted to storing a master journal name - there are no more pages to\n    ** roll back. See comments for function writeMasterJournal() in pager.c\n    ** for details.\n    */\n    //#define PAGER_MJ_PGNO(x) ((Pgno)((PENDING_BYTE/((x)->pageSize))+1))\n    static Pgno PAGER_MJ_PGNO( Pager x ) { return ( (Pgno)( ( PENDING_BYTE / ( ( x ).pageSize ) ) + 1 ) ); }\n    /*\n    ** Allowed values for the flags parameter to sqlite3PagerOpen().\n    **\n    ** NOTE: These values must match the corresponding BTREE_ values in btree.h.\n    */\n    //#define PAGER_OMIT_JOURNAL  0x0001    /* Do not use a rollback journal */\n    //#define PAGER_NO_READLOCK   0x0002    /* Omit readlocks on readonly files */\n    const int PAGER_OMIT_JOURNAL = 0x0001;   /* Do not use a rollback journal */\n    const int PAGER_NO_READLOCK = 0x0002;  /* Omit readlocks on readonly files */\n\n    /*\n    ** Valid values for the second argument to sqlite3PagerLockingMode().\n    */\n    //#define PAGER_LOCKINGMODE_QUERY      -1\n    //#define PAGER_LOCKINGMODE_NORMAL      0\n    //#define PAGER_LOCKINGMODE_EXCLUSIVE   1\n    static int PAGER_LOCKINGMODE_QUERY = -1;\n    static int PAGER_LOCKINGMODE_NORMAL = 0;\n    static int PAGER_LOCKINGMODE_EXCLUSIVE = 1;\n\n    /*\n    ** Valid values for the second argument to sqlite3PagerJournalMode().\n    */\n    //#define PAGER_JOURNALMODE_QUERY      -1\n    //#define PAGER_JOURNALMODE_DELETE      0   /* Commit by deleting journal file */\n    //#define PAGER_JOURNALMODE_PERSIST     1   /* Commit by zeroing journal header */\n    //#define PAGER_JOURNALMODE_OFF         2   /* Journal omitted.  */\n    //#define PAGER_JOURNALMODE_TRUNCATE    3   /* Commit by truncating journal */\n    //#define PAGER_JOURNALMODE_MEMORY      4   /* In-memory journal file */\n    const int PAGER_JOURNALMODE_QUERY = -1;\n    const int PAGER_JOURNALMODE_DELETE = 0;  /* Commit by deleting journal file */\n    const int PAGER_JOURNALMODE_PERSIST = 1; /* Commit by zeroing journal header */\n    const int PAGER_JOURNALMODE_OFF = 2;     /* Journal omitted.  */\n    const int PAGER_JOURNALMODE_TRUNCATE = 3;/* Commit by truncating journal */\n    const int PAGER_JOURNALMODE_MEMORY = 4;/* In-memory journal file */\n\n    /*\n    ** The remainder of this file contains the declarations of the functions\n    ** that make up the Pager sub-system API. See source code comments for\n    ** a detailed description of each routine.\n    */\n    /* Open and close a Pager connection. */\n    //int sqlite3PagerOpen(\n    //  sqlite3_vfs*,\n    //  Pager **ppPager,\n    //  const char*,\n    //  int,\n    //  int,\n    //  int,\n    ////  void(*)(DbPage*)\n    //);\n    //int sqlite3PagerClose(Pager *pPager);\n    //int sqlite3PagerReadFileheader(Pager*, int, unsigned char*);\n\n    /* Functions used to configure a Pager object. */\n    //void sqlite3PagerSetBusyhandler(Pager*, int(*)(void *), void *);\n    //int sqlite3PagerSetPagesize(Pager*, u16*, int);\n    //int sqlite3PagerMaxPageCount(Pager*, int);\n    //void sqlite3PagerSetCachesize(Pager*, int);\n    //void sqlite3PagerSetSafetyLevel(Pager*,int,int);\n    //int sqlite3PagerLockingMode(Pager *, int);\n    //int sqlite3PagerJournalMode(Pager *, int);\n    //i64 sqlite3PagerJournalSizeLimit(Pager *, i64);\n    //sqlite3_backup **sqlite3PagerBackupPtr(Pager*);\n\n    /* Functions used to obtain and release page references. */\n    //int sqlite3PagerAcquire(Pager *pPager, Pgno pgno, DbPage **ppPage, int clrFlag);\n    //#define sqlite3PagerGet(A,B,C) sqlite3PagerAcquire(A,B,C,0)\n    //DbPage *sqlite3PagerLookup(Pager *pPager, Pgno pgno);\n    //void sqlite3PagerRef(DbPage*);\n    //void sqlite3PagerUnref(DbPage*);\n\n    /* Operations on page references. */\n    //int sqlite3PagerWrite(DbPage*);\n    //void sqlite3PagerDontWrite(DbPage*);\n    //int sqlite3PagerMovepage(Pager*,DbPage*,Pgno,int);\n    //int sqlite3PagerPageRefcount(DbPage*);\n    //void *sqlite3PagerGetData(DbPage *);\n    //void *sqlite3PagerGetExtra(DbPage *);\n\n    /* Functions used to manage pager transactions and savepoints. */\n    //int sqlite3PagerPagecount(Pager*, int*);\n    //int sqlite3PagerBegin(Pager*, int exFlag, int);\n    //int sqlite3PagerCommitPhaseOne(Pager*,const char *zMaster, int);\n    //int sqlite3PagerSync(Pager *pPager);\n    //int sqlite3PagerCommitPhaseTwo(Pager*);\n    //int sqlite3PagerRollback(Pager*);\n    //int sqlite3PagerOpenSavepoint(Pager *pPager, int n);\n    //int sqlite3PagerSavepoint(Pager *pPager, int op, int iSavepoint);\n    //int sqlite3PagerSharedLock(Pager *pPager);\n\n    /* Functions used to query pager state and configuration. */\n    //u8 sqlite3PagerIsreadonly(Pager*);\n    //int sqlite3PagerRefcount(Pager*);\n    //const char *sqlite3PagerFilename(Pager*);\n    //const sqlite3_vfs *sqlite3PagerVfs(Pager*);\n    //sqlite3_file *sqlite3PagerFile(Pager*);\n    //const char *sqlite3PagerJournalname(Pager*);\n    //int sqlite3PagerNosync(Pager*);\n    //void *sqlite3PagerTempSpace(Pager*);\n    //int sqlite3PagerIsMemdb(Pager*);\n\n    /* Functions used to truncate the database file. */\n    //void sqlite3PagerTruncateImage(Pager*,Pgno);\n\n    /* Functions to support testing and debugging. */\n    //#if !NDEBUG || SQLITE_TEST\n    //  Pgno sqlite3PagerPagenumber(DbPage*);\n    //  int sqlite3PagerIswriteable(DbPage*);\n    //#endif\n    //#if SQLITE_TEST\n    //  int *sqlite3PagerStats(Pager*);\n    //  void sqlite3PagerRefdump(Pager*);\n    //  void disable_simulated_io_errors(void);\n    //  void enable_simulated_io_errors(void);\n    //#else\n    //# define disable_simulated_io_errors()\n    //# define enable_simulated_io_errors()\n    //#endif\n  }\n}\n'