b'module Data.Vec where\n\nimport Data.Monoid\nimport Data.Foldable\nimport Data.Traversable\n\ndata Vec a = Vec a a a deriving (Show)\n\ninstance Num a => Num (Vec a) where\n  -- . . . . . .\n\n(\xe3\x83\xbb) :: Vec a -> Vec a -> a\n(Vec ax ay az) \xe3\x83\xbb (Vec bx by bz) = undefined\n\n(\xc3\x97) :: Vec a -> Vec a -> Vec a\n(Vec ax ay az) \xc3\x97 (Vec bx by bz) = undefined\n\ninstance Functor Vec where\n  fmap f (Vec x y z) = undefined\n\ninstance Applicative Vec where\n  pure a = undefined\n  (Vec ax ay az) <*> (Vec bx by bz) = undefined\n\ninstance Foldable Vec where\n  foldMap toMonoid (Vec x y z) = undefined\n\ninstance Traversable Vec where\n  sequenceA (Vec fx fy fz) = undefined\n'