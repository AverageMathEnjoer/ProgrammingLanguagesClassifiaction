b'/**\n * Copyright (C) 2020 Fernando Cejas Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.fernandocejas.sample.core.interactor\n\nimport com.fernandocejas.sample.AndroidTest\nimport com.fernandocejas.sample.core.exception.Failure\nimport com.fernandocejas.sample.core.functional.Either\nimport com.fernandocejas.sample.core.functional.Either.Right\nimport kotlinx.coroutines.runBlocking\nimport org.amshove.kluent.shouldEqual\nimport org.junit.Test\n\nclass UseCaseTest : AndroidTest() {\n\n    private val useCase = MyUseCase()\n\n    @Test fun `running use case should return \'Either\' of use case type`() {\n        val params = MyParams(TYPE_PARAM)\n        val result = runBlocking { useCase.run(params) }\n\n        result shouldEqual Right(MyType(TYPE_TEST))\n    }\n\n//    @Test fun `should return correct data when executing use case`() {\n//        var result: Either<Failure, MyType>? = null\n//\n//        val params = MyParams("TestParam")\n//        val onResult = { myResult: Either<Failure, MyType> -> result = myResult }\n//\n//        runBlocking { useCase(params, onResult) }\n//\n//        result shouldEqual Right(MyType(TYPE_TEST))\n//    }\n\n    data class MyType(val name: String)\n    data class MyParams(val name: String)\n\n    private inner class MyUseCase : UseCase<MyType, MyParams>() {\n        override suspend fun run(params: MyParams) = Right(MyType(TYPE_TEST))\n    }\n\n    companion object {\n        private const val TYPE_TEST = "Test"\n        private const val TYPE_PARAM = "ParamTest"\n    }\n}\n'