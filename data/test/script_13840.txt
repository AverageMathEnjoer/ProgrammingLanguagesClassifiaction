b'package com.github.eprendre.sources_by_eprendre\n\nimport com.github.eprendre.tingshu.extensions.config\nimport com.github.eprendre.tingshu.sources.AudioUrlExtractor\nimport com.github.eprendre.tingshu.sources.AudioUrlWebViewExtractor\nimport com.github.eprendre.tingshu.sources.CoverUrlExtraHeaders\nimport com.github.eprendre.tingshu.sources.TingShu\nimport com.github.eprendre.tingshu.utils.*\nimport org.jsoup.Jsoup\nimport java.net.URLEncoder\n\nobject Mgting : TingShu(), CoverUrlExtraHeaders {\n    override fun getSourceId(): String {\n        return "34297649ff264078833e6283b496e6ed"\n    }\n\n    override fun getUrl(): String {\n        return "https://www.mgting.com/"\n    }\n\n    override fun getName(): String {\n        return "\xe8\x8a\x92\xe6\x9e\x9c\xe5\x90\xac\xe4\xb9\xa6"\n    }\n\n    override fun getDesc(): String {\n        return "\xe6\x8e\xa8\xe8\x8d\x90\xe6\x8c\x87\xe6\x95\xb0:4\xe6\x98\x9f \xe2\xad\x90\xe2\xad\x90\xe2\xad\x90\xe2\xad\x90\\n\xe9\x80\x9f\xe5\xba\xa6\xe5\xbe\x88\xe6\x85\xa2"\n    }\n\n    override fun search(keywords: String, page: Int): Pair<List<Book>, Int> {\n        val url = "https://www.mgting.com/search.php?page=$page&searchword=${URLEncoder.encode(keywords, "utf8")}&searchtype="\n        val doc = Jsoup.connect(url).config(true).get()\n        val clist = doc.select(".clist")\n        val lis = clist.select("li")\n        val books = lis.map { li ->\n            val a = li.selectFirst("a")\n            //\xe6\xa0\x87\xe9\xa2\x98\n            val title = li.select("p")[0].selectFirst("a").text()\n            //\xe4\xb9\xa6\xe7\xb1\x8d\xe9\x93\xbe\xe6\x8e\xa5\n            val href = a.absUrl("href")\n            //\xe5\x9b\xbe\xe7\x89\x87\xe9\x93\xbe\xe6\x8e\xa5\n            val img = a.selectFirst(".imgc").absUrl("src")\n            //\xe4\xbd\x9c\xe8\x80\x85\xe5\x90\x8d\xe7\xa7\xb0\n            val author = li.select("p")[1].text()\n            //\xe6\x92\xad\xe9\x9f\xb3\n            val art = li.select("p")[3].text()\n            //\xe6\x9b\xb4\xe6\x96\xb0\xe6\x97\xb6\xe9\x97\xb4\n            val status = li.select("p")[4].text()\n            //println("\xe6\xa0\x87\xe9\xa2\x98:$title,\xe9\x93\xbe\xe6\x8e\xa5:$href,\xe5\x9b\xbe\xe7\x89\x87:$img,\xe4\xbd\x9c\xe8\x80\x85:$author,\xe6\x92\xad\xe9\x9f\xb3:$art,\xe6\x9b\xb4\xe6\x96\xb0\xe6\x97\xb6\xe9\x97\xb4:$status")\n            Book(img, href, title, author, art).apply {\n                this.sourceId = getSourceId()\n                this.status = status\n            }\n        }\n        //\xe8\x8e\xb7\xe5\x8f\x96\xe7\xbf\xbb\xe9\xa1\xb5\xe4\xbf\xa1\xe6\x81\xaf\n        val page = doc.selectFirst(".page")\n        val span = page.selectFirst("span")\n        //\xe5\x85\xb1\xe6\x9c\x89\xe9\xa1\xb5\n        val totalPage = Regex("\xe9\xa1\xb5\xe6\xac\xa1:\\\\d*/(.+?)\xe9\xa1\xb5").find(span.text())?.groupValues?.get(1)?.toInt() ?: 1\n        return Pair(books, totalPage)\n    }\n\n    //\xe5\xbc\x80\xe5\xa7\x8b\xe6\x92\xad\xe6\x94\xbe\n    override fun getAudioUrlExtractor(): AudioUrlExtractor {\n        //\xe9\x9c\x80\xe8\xa6\x81js\xe5\x8a\xa0\xe8\xbd\xbd\n        AudioUrlWebViewExtractor.setUp(script = "document.getElementsByTagName(\\"iframe\\")[0].contentDocument.getElementById(\\"jp_audio_0\\").src") {\n            return@setUp it.replace("\\"", "")\n        }\n        return AudioUrlWebViewExtractor\n    }\n\n    //\xe4\xb9\xa6\xe7\xb1\x8d\xe5\x88\x86\xe7\xb1\xbb\n    override fun getCategoryMenus(): List<CategoryMenu> {\n        //\xe7\xbd\x91\xe7\xab\x99\n        val url = "https://www.mgting.com/"\n        val doc = Jsoup.connect(url).config(true).get()\n        //\xe9\x80\x9a\xe8\xbf\x87\xe5\x88\x86\xe6\x9e\x90\xe5\xbe\x97\xe7\x9f\xa5\xe8\x8e\xb7\xe5\x8f\x96id=nav\n        val nav = doc.getElementById("nav")\n        //\xe8\x8e\xb7\xe5\x8f\x96\xe6\x89\x80\xe6\x9c\x89\xe7\x9a\x84li\xef\xbc\x88\xe5\x88\x86\xe7\xb1\xbb\xef\xbc\x89\n        val lis = nav.select("li")\n        //\xe4\xbf\x9d\xe5\xad\x98\xe5\x88\x86\xe7\xb1\xbb\n        val list = ArrayList<CategoryTab>()\n        lis.forEach { li ->\n            val title = li.text()\n            val href = li.selectFirst("a").absUrl("href")\n            if (title != "\xe9\xa6\x96\xe9\xa1\xb5")\n                list.add(CategoryTab(title, href))\n        }\n        return listOf(CategoryMenu("\xe6\xa0\x87\xe9\xa2\x98", list))\n    }\n\n    //\xe4\xb9\xa6\xe7\xb1\x8d\xe5\x88\x97\xe8\xa1\xa8\n    override fun getCategoryList(url: String): Category {\n        val doc = Jsoup.connect(url).config(true).get()\n        val clist = doc.select(".clist")\n        val lis = clist.select("li")\n        val books = lis.map { li ->\n            val a = li.selectFirst("a")\n            //\xe6\xa0\x87\xe9\xa2\x98\n            val title = a.attr("title")\n            //\xe4\xb9\xa6\xe7\xb1\x8d\xe9\x93\xbe\xe6\x8e\xa5\n            val href = a.absUrl("href")\n            //\xe5\x9b\xbe\xe7\x89\x87\xe9\x93\xbe\xe6\x8e\xa5\n            val img = a.selectFirst(".imgc").absUrl("src")\n            //\xe4\xbd\x9c\xe8\x80\x85\xe5\x90\x8d\xe7\xa7\xb0\n            val author = li.select("p")[1].text()\n            //\xe6\x92\xad\xe9\x9f\xb3\n            val art = li.select("p")[3].text()\n            //\xe6\x9b\xb4\xe6\x96\xb0\xe6\x97\xb6\xe9\x97\xb4\n            val status = li.select("p")[4].text()\n            //println("\xe6\xa0\x87\xe9\xa2\x98:$title,\xe9\x93\xbe\xe6\x8e\xa5:$href,\xe5\x9b\xbe\xe7\x89\x87:$img,\xe4\xbd\x9c\xe8\x80\x85:$author,\xe6\x92\xad\xe9\x9f\xb3:$art,\xe6\x9b\xb4\xe6\x96\xb0\xe6\x97\xb6\xe9\x97\xb4:$status")\n            Book(img, href, title, author, art).apply {\n                this.sourceId = getSourceId()\n                this.status = status\n            }\n        }\n        //\xe8\x8e\xb7\xe5\x8f\x96\xe7\xbf\xbb\xe9\xa1\xb5\xe4\xbf\xa1\xe6\x81\xaf\n        val page = doc.selectFirst(".page")\n        val span = page.selectFirst("span")\n        //\xe5\xbd\x93\xe5\x89\x8d\xe9\xa1\xb5\n        val currentPage = Regex("fenlei/\\\\d*-(.+?).html").find(url)?.groupValues?.get(1)?.toInt() ?: 1\n        //\xe5\x85\xb1\xe6\x9c\x89\xe9\xa1\xb5\n        val totalPage = Regex("\xe9\xa1\xb5\xe6\xac\xa1:\\\\d*/(.+?)\xe9\xa1\xb5").find(span.text())?.groupValues?.get(1)?.toInt() ?: 1\n        //\xe4\xb8\x8b\xe4\xb8\x80\xe9\xa1\xb5\n        val nextPage = if (currentPage < totalPage) currentPage + 1 else currentPage\n        //\xe4\xb9\xa6\xe7\xb1\x8d\xe7\x9a\x84ID\n        val bookId = Regex("fenlei/(.+?)-\\\\d*.html").find(url)?.groupValues?.get(1) ?: Regex("fenlei/(.+?).html").find(\n            url\n        )?.groupValues?.get(1) ?: "error"\n        //\xe4\xb8\x8b\xe4\xb8\x80\xe9\xa1\xb5\xe7\xbd\x91\xe5\x9d\x80\n        val nextUrl = "https://www.mgting.com/fenlei/$bookId-$nextPage.html"\n        return Category(books, currentPage, totalPage, url, nextUrl)\n    }\n\n    //\xe7\xab\xa0\xe8\x8a\x82\xe5\x88\x97\xe8\xa1\xa8\n    override fun getBookDetailInfo(bookUrl: String, loadEpisodes: Boolean, loadFullPages: Boolean): BookDetail {\n        val list = ArrayList<Episode>()\n        var intro = ""\n        if (loadEpisodes) {\n            val doc = Jsoup.connect(bookUrl).config(true).get()\n            val ul = doc.selectFirst(".compress")\n            val lis = ul.select("li")\n            intro = doc.selectFirst(".introBox").text()\n            lis.forEach { li ->\n                val title = li.selectFirst("a").attr("title")\n                val href = li.selectFirst("a").absUrl("href")\n                list.add(Episode(title, href))\n            }\n        }\n        return BookDetail(list, intro)\n    }\n\n    override fun coverHeaders(coverUrl: String, headers: MutableMap<String, String>): Boolean {\n        if (coverUrl.contains("mgting.com")) {\n            headers["referer"] = "https://www.mgting.com/"\n            return true\n        }\n        return false\n    }\n\n}'