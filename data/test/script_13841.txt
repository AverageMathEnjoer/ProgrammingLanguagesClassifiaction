b'{-# LANGUAGE ScopedTypeVariables #-}\n\n-- |\n-- Module      : Hoodle.Script.Coroutine\n-- Copyright   : (c) 2012-2015 Ian-Woo Kim\n--\n-- License     : BSD3\n-- Maintainer  : Ian-Woo Kim <ianwookim@gmail.com>\n-- Stability   : experimental\n-- Portability : GHC\nmodule Hoodle.Script.Coroutine where\n\nimport Control.Lens (view)\nimport Control.Monad.State (get, liftIO)\nimport Control.Monad.Trans.Maybe (MaybeT (..))\nimport Data.Hoodle.Simple (Hoodle)\nimport qualified Hoodle.Script.Hook as H\nimport Hoodle.Type.Coroutine (MainCoroutine)\nimport Hoodle.Type.HoodleState (hookSet)\n\n--\n\n-- |\nafterSaveHook :: FilePath -> Hoodle -> MainCoroutine ()\nafterSaveHook fp hdl = do\n  xstate <- get\n  let aftersavehk = do\n        hset <- view hookSet xstate\n        H.afterSaveHook hset\n  maybe (return ()) (\\f -> liftIO (f fp hdl)) aftersavehk\n\n-- |\nsaveAsHook :: FilePath -> Hoodle -> MainCoroutine ()\nsaveAsHook _fp hdl = do\n  xstate <- get\n  let saveashk = do\n        hset <- view hookSet xstate\n        H.saveAsHook hset\n  maybe (return ()) (\\f -> liftIO (f hdl)) saveashk\n\nhoist :: (Monad m) => Maybe a -> MaybeT m a\nhoist = MaybeT . return\n\n-- |\nrecentFolderHook :: MainCoroutine (Maybe FilePath)\nrecentFolderHook = do\n  xstate <- get\n  (r :: Maybe FilePath) <- runMaybeT $ do\n    hset <- hoist (view hookSet xstate)\n    rfolder <- hoist (H.recentFolderHook hset)\n    liftIO rfolder\n  return r\n\n-- |\nembedPredefinedImageHook :: MainCoroutine (Maybe FilePath)\nembedPredefinedImageHook = do\n  xstate <- get\n  (r :: Maybe FilePath) <- runMaybeT $ do\n    hset <- hoist (view hookSet xstate)\n    rfilename <- hoist (H.embedPredefinedImageHook hset)\n    liftIO rfilename\n  return r\n\n-- | temporary\nembedPredefinedImage2Hook :: MainCoroutine (Maybe FilePath)\nembedPredefinedImage2Hook = do\n  xstate <- get\n  (r :: Maybe FilePath) <- runMaybeT $ do\n    hset <- hoist (view hookSet xstate)\n    rfilename <- hoist (H.embedPredefinedImage2Hook hset)\n    liftIO rfilename\n  return r\n\n-- | temporary\nembedPredefinedImage3Hook :: MainCoroutine (Maybe FilePath)\nembedPredefinedImage3Hook = do\n  xstate <- get\n  (r :: Maybe FilePath) <- runMaybeT $ do\n    hset <- hoist (view hookSet xstate)\n    rfilename <- hoist (H.embedPredefinedImage3Hook hset)\n    liftIO rfilename\n  return r\n'