b'\xef\xbb\xbfusing Autofac;\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\nusing Autofac.Extras.DynamicProxy;\nusing Business.Abstract;\nusing Business.Concrete;\nusing Castle.DynamicProxy;\nusing Core.Utilities.Interceptors;\nusing Core.Utilities.Security.Jwt;\nusing DataAccess.Abstract;\nusing DataAccess.Concrete.EntityFramework;\n\nnamespace Business.DependencyResolvers.Autofac\n{\n    public class AutofacBusinessModule:Module\n    {\n        protected override void Load(ContainerBuilder builder)\n        {\n            builder.RegisterType<ProductManager>().As<IProductService>();\n            builder.RegisterType<EfProductDal>().As<IProductDal>();\n\n            builder.RegisterType<CategoryManager>().As<ICategoryService>();\n            builder.RegisterType<EfCategoryDal>().As<ICategoryDal>();\n\n            builder.RegisterType<UserManager>().As<IUserService>();\n            builder.RegisterType<EfUserDal>().As<IUserDal>();\n\n            builder.RegisterType<AuthManager>().As<IAuthService>();\n            builder.RegisterType<JwtHelper>().As<ITokenHelper>();\n\n            var assembly = System.Reflection.Assembly.GetExecutingAssembly();\n\n            builder.RegisterAssemblyTypes(assembly).AsImplementedInterfaces()\n                .EnableInterfaceInterceptors(new ProxyGenerationOptions()\n                {\n                    Selector = new AspectInterceptorSelector()\n                }).SingleInstance();\n\n        }\n    }\n}\n'