b'package effectivejava.chapter5.item29.technqiue1;\nimport effectivejava.chapter5.item29.EmptyStackException;\n\nimport java.util.Arrays;\n\n// Generic stack using E[] (Pages 130-3)\npublic class Stack<E> {\n    private E[] elements;\n    private int size = 0;\n    private static final int DEFAULT_INITIAL_CAPACITY = 16;\n\n    // The elements array will contain only E instances from push(E).\n    // This is sufficient to ensure type safety, but the runtime\n    // type of the array won\'t be E[]; it will always be Object[]!\n    @SuppressWarnings("unchecked")\n    public Stack() {\n        elements = (E[]) new Object[DEFAULT_INITIAL_CAPACITY];\n    }\n\n    public void push(E e) {\n        ensureCapacity();\n        elements[size++] = e;\n    }\n\n    public E pop() {\n        if (size == 0)\n            throw new EmptyStackException();\n        E result = elements[--size];\n        elements[size] = null; // Eliminate obsolete reference\n        return result;\n    }\n\n    public boolean isEmpty() {\n        return size == 0;\n    }\n\n    private void ensureCapacity() {\n        if (elements.length == size)\n            elements = Arrays.copyOf(elements, 2 * size + 1);\n    }\n\n    // Little program to exercise our generic Stack\n    public static void main(String[] args) {\n        Stack<String> stack = new Stack<>();\n        for (String arg : args)\n            stack.push(arg);\n        while (!stack.isEmpty())\n            System.out.println(stack.pop().toUpperCase());\n    }\n}\n'