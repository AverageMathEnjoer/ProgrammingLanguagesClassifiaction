b'package droidninja.filepicker.viewmodels\n\nimport android.app.Application\nimport androidx.lifecycle.AndroidViewModel\nimport androidx.lifecycle.LiveData\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.ViewModel\nimport kotlinx.coroutines.*\n\nopen class BaseViewModel(application: Application) : AndroidViewModel(application) {\n\n    private val viewModelJob = SupervisorJob()\n\n    private val exceptionHandler = CoroutineExceptionHandler { _, t ->\n        t.printStackTrace()\n    }\n\n    private val uiScope = CoroutineScope(Dispatchers.Main + viewModelJob + exceptionHandler)\n\n    private val _lvError = MutableLiveData<Exception>()\n    open val lvError: LiveData<Exception>\n        get() = _lvError\n\n    fun launchDataLoad(block: suspend (scope: CoroutineScope) -> Unit): Job {\n        return uiScope.launch {\n            try {\n                block(this)\n            } catch (error: Exception) {\n                handleException(error)\n            } finally {\n            }\n        }\n    }\n\n    private fun handleException(error: Exception) {\n        error.printStackTrace()\n        if (error !is CancellationException) {\n            _lvError.value = error\n        }\n    }\n\n    public override fun onCleared() {\n        super.onCleared()\n        viewModelJob.cancel()\n    }\n}'