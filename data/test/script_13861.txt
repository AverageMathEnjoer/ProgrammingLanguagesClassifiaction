b'\xef\xbb\xbfusing System;\nusing System.Collections.Generic;\nusing Asn1;\n\nnamespace Rubeus\n{\n    public class ADIfRelevant : AuthorizationData\n    {\n        public List<AuthorizationData> ADData { get; set; }\n\n        public ADIfRelevant()\n        {\n            ad_type = Interop.AuthorizationDataType.AD_IF_RELEVANT;\n            ADData = new List<AuthorizationData>();\n        }\n        public ADIfRelevant(byte[] data)\n        {\n            ad_type = Interop.AuthorizationDataType.AD_IF_RELEVANT;\n            ADData = new List<AuthorizationData>();\n            ad_data = data;\n        }\n\n        public ADIfRelevant(AuthorizationData data)\n        {\n            ad_type = Interop.AuthorizationDataType.AD_IF_RELEVANT;\n            ADData = new List<AuthorizationData>();\n            ADData.Add(data);\n        }\n\n        public ADIfRelevant(List<AuthorizationData> data)\n        {\n            ad_type = Interop.AuthorizationDataType.AD_IF_RELEVANT;\n            ADData = data;\n        }\n\n        public ADIfRelevant(AsnElt data, byte[] asrepKey = null)\n        {\n            Decode(data, asrepKey);\n        }\n\n        protected override void Decode(AsnElt data)\n        {\n            Decode(data, null);\n        }\n\n        protected override void Decode(AsnElt data, byte[] asrepKey = null)\n        {\n            foreach (AsnElt s in data.Sub)\n            {\n                switch (s.TagValue)\n                {\n                    case 0:\n                        ad_type = (Interop.AuthorizationDataType)s.Sub[0].GetInteger();\n                        break;\n                    case 1:\n                        ADData = new List<AuthorizationData>();\n                        foreach (AsnElt i in AsnElt.Decode(s.Sub[0].GetOctetString()).Sub)\n                        {\n                            switch (i.Sub[0].TagValue)\n                            {\n                                case 0:\n                                    switch ((Interop.AuthorizationDataType)i.Sub[0].Sub[0].GetInteger())\n                                    {\n                                        case Interop.AuthorizationDataType.AD_IF_RELEVANT:\n                                            ADData.Add(new ADIfRelevant(AsnElt.Decode(s.Sub[0].GetOctetString()).Sub[0]));\n                                            break;\n                                        case Interop.AuthorizationDataType.KERB_AUTH_DATA_TOKEN_RESTRICTIONS:\n                                            ADData.Add(new ADRestrictionEntry(AsnElt.Decode(i.Sub[1].Sub[0].GetOctetString()).Sub[0]));\n                                            break;\n                                        case Interop.AuthorizationDataType.KERB_LOCAL:\n                                            ADData.Add(new ADKerbLocal(i.Sub[1].Sub[0].GetOctetString()));\n                                            break;\n                                        case Interop.AuthorizationDataType.AD_WIN2K_PAC:\n                                            ADData.Add(new ADWin2KPac(AsnElt.Decode(s.Sub[0].GetOctetString()).Sub[0], asrepKey));\n                                            break;\n                                        default:\n                                            break;\n                                    }\n                                    break;\n                            }\n                        }\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }\n\n        public override AsnElt Encode()\n        {\n\n            // ad-data            [1] OCTET STRING\n            if (ADData.Count > 0)\n            {\n                List<AsnElt> adList = new List<AsnElt>();\n\n                foreach (AuthorizationData ad in ADData)\n                {\n                    AsnElt addrElt = ad.Encode();\n                    adList.Add(addrElt);\n                }\n                AsnElt seq = AsnElt.Make(AsnElt.SEQUENCE, adList.ToArray());\n                ad_data = seq.Encode();\n            }\n            else if (ad_data.Length < 1)\n            {\n                ad_data = new byte[0];\n            }\n\n            return ADEncode();\n        }\n    }\n}\n'