b'{-# LANGUAGE CPP  #-}\n-- #include "flops.hs"\n\n-- parMapReduceRange :: NFData a => InclusiveRange -> (Int -> Par a) -> (a -> a -> Par a) -> a -> Par a\nimport Data.Int\nimport System.Environment\n#ifdef PARSCHED \nimport PARSCHED\n#else\nimport Control.Monad.Par\n#endif\n\nmain = do \n          putStrLn "Program to sum 2^N ones with 2^N parallel tasks.  (Similar to parFib.)"\n          args <- getArgs\t  \n          let exponent = \n                   case args of \n\t\t      []  -> 2\n\t\t      [n] -> read n\n\t\t      _  -> error "wrong number of arguments"\n\n              sum = runPar $ \n\t\t    parMapReduceRange (InclusiveRange 1 (2^exponent))\n\t\t\t\t      (\\_ -> return 1) \n\t\t\t\t      (\\ x y -> return (x+y))\n\t\t\t\t      0\n          putStrLn$ "Resulting Sum for 2^"++show exponent++": " ++ show (sum :: Int64)\n\n'