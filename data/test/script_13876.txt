b'-- | Monoidal wrappers for applicative functors. Useful to define tree\n-- folds.\n\n-- These are the same as in the \'reducers\' package. We do not use\n-- \'reducers\' to avoid its dependencies.\n\n{- License for the \'reducers\' package\nCopyright 2008-2011 Edward Kmett\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n\n3. Neither the name of the author nor the names of his contributors\n   may be used to endorse or promote products derived from this software\n   without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS\'\' AND ANY EXPRESS OR\nIMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\nSTRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN\nANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.\n-}\n\n{-# LANGUAGE GeneralizedNewtypeDeriving #-}\n\nmodule Test.Tasty.Runners.Reducers where\n\nimport Control.Applicative\nimport Prelude  -- Silence AMP import warnings\nimport qualified Data.Semigroup as Sem\n\n-- | Monoid generated by \'*>\'.\n--\n-- @since 0.8\nnewtype Traversal f = Traversal { getTraversal :: f () }\n\n-- | @since 0.12.0.1\ninstance Applicative f => Sem.Semigroup (Traversal f) where\n  Traversal f1 <> Traversal f2 = Traversal $ f1 *> f2\ninstance Applicative f => Monoid (Traversal f) where\n  mempty = Traversal $ pure ()\n#if !MIN_VERSION_base(4,11,0)\n  mappend = (Sem.<>)\n#endif\n\n-- | Monoid generated by @\'liftA2\' (\'<>\')@\n--\n-- Starting from GHC 8.6, a similar type is available from "Data.Monoid".\n-- This type is nevertheless kept for compatibility.\n--\n-- @since 0.8\nnewtype Ap f a = Ap { getApp :: f a }\n  deriving (Functor, Applicative, Monad)\n\n-- | @since 0.12.0.1\ninstance (Applicative f, Monoid a) => Sem.Semigroup (Ap f a) where\n  (<>) = liftA2 mappend\ninstance (Applicative f, Monoid a) => Monoid (Ap f a) where\n  mempty = pure mempty\n#if !MIN_VERSION_base(4,11,0)\n  mappend = (Sem.<>)\n#endif\n'