b'package com.codeest.geeknews.presenter.vtex;\n\nimport com.codeest.geeknews.base.RxPresenter;\nimport com.codeest.geeknews.model.bean.TopicListBean;\nimport com.codeest.geeknews.model.http.api.VtexApis;\nimport com.codeest.geeknews.base.contract.vtex.VtexContract;\nimport com.codeest.geeknews.util.LogUtil;\nimport com.codeest.geeknews.widget.CommonSubscriber;\n\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.select.Elements;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport javax.inject.Inject;\n\nimport io.reactivex.Flowable;\nimport io.reactivex.android.schedulers.AndroidSchedulers;\nimport io.reactivex.annotations.NonNull;\nimport io.reactivex.functions.Function;\nimport io.reactivex.functions.Predicate;\nimport io.reactivex.schedulers.Schedulers;\n\n/**\n * Created by codeest on 16/12/23.\n */\n\npublic class VtexPresenter extends RxPresenter<VtexContract.View> implements VtexContract.Presenter{\n\n    @Inject\n    public VtexPresenter() {\n\n    }\n\n    @Override\n    public void getContent(String type) {\n        addSubscribe(Flowable\n                .just(VtexApis.TAB_HOST + type)\n                .subscribeOn(Schedulers.io())\n                .map(new Function<String, Document>() {\n                    @Override\n                    public Document apply(String s) {\n                        try {\n                            return Jsoup.connect(s).timeout(10000).get();\n                        } catch (IOException e) {\n                            LogUtil.d(e.toString());\n                            e.printStackTrace();\n                        }\n                        return null;\n                    }\n                })\n                .filter(new Predicate<Document>() {\n                    @Override\n                    public boolean test(@NonNull Document document) throws Exception {\n                        return document != null;\n                    }\n                })\n                .map(new Function<Document, List<TopicListBean>>() {\n                    @Override\n                    public List<TopicListBean> apply(Document doc) {\n                        List<TopicListBean> mList = new ArrayList<>();\n                        Elements itemElements = doc.select("div.cell.item");    //item\xe6\xa0\xb9\xe8\x8a\x82\xe7\x82\xb9\n                        int count = itemElements.size();\n                        for (int i = 0; i < count; i++) {\n                            Elements titleElements = itemElements.get(i).select("div.cell.item table tr td span.item_title > a");   //\xe6\xa0\x87\xe9\xa2\x98\n                            Elements imgElements = itemElements.get(i).select("div.cell.item table tr td img.avatar");              //\xe5\xa4\xb4\xe5\x83\x8f\n                            Elements nodeElements = itemElements.get(i).select("div.cell.item table tr span.small.fade a.node");    //\xe8\x8a\x82\xe7\x82\xb9\n                            Elements commentElements = itemElements.get(i).select("div.cell.item table tr a.count_livid");          //\xe8\xaf\x84\xe8\xae\xba\xe6\x95\xb0\n                            Elements nameElements = itemElements.get(i).select("div.cell.item table tr span.small.fade strong a");  //\xe4\xbd\x9c\xe8\x80\x85 & \xe6\x9c\x80\xe5\x90\x8e\xe5\x9b\x9e\xe5\xa4\x8d\n                            Elements timeElements = itemElements.get(i).select("div.cell.item table tr span.small.fade");           //\xe6\x9b\xb4\xe6\x96\xb0\xe6\x97\xb6\xe9\x97\xb4\n\n                            TopicListBean bean = new TopicListBean();\n\n                            if (titleElements.size() > 0) {\n                                bean.setTitle(titleElements.get(0).text());\n                                bean.setTopicId(parseId(titleElements.get(0).attr("href")));\n                            }\n                            if (imgElements.size() > 0) {\n                                bean.setImgUrl(parseImg(imgElements.get(0).attr("src")));\n                            }\n                            if (nodeElements.size() > 0) {\n                                bean.setNode(nodeElements.get(0).text());\n                            }\n                            if (nameElements.size() > 0) {\n                                bean.setName(nameElements.get(0).text());\n                            }\n                            //\xe5\xad\x98\xe5\x9c\xa8\xe6\xb2\xa1\xe6\x9c\x89 \xe6\x9c\x80\xe5\x90\x8e\xe5\x9b\x9e\xe5\xa4\x8d\xe8\x80\x85\xe3\x80\x81\xe8\xaf\x84\xe8\xae\xba\xe6\x95\xb0\xe3\x80\x81\xe6\x9b\xb4\xe6\x96\xb0\xe6\x97\xb6\xe9\x97\xb4\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\n                            if (nameElements.size() > 1) {\n                                bean.setLastUser(nameElements.get(1).text());\n                            }\n                            if (commentElements.size() > 0) {\n                                bean.setCommentNum(Integer.valueOf(commentElements.get(0).text()));\n                            }\n                            if (timeElements.size() > 1) {\n                                bean.setUpdateTime(parseTime(timeElements.get(1).text()));\n                            }\n\n                            mList.add(bean);\n                        }\n                        return mList;\n                    }\n                })\n                .observeOn(AndroidSchedulers.mainThread())\n                .subscribeWith(new CommonSubscriber<List<TopicListBean>>(mView) {\n                    @Override\n                    public void onNext(List<TopicListBean> mList) {\n                        mView.showContent(mList);\n                    }\n                })\n        );\n    }\n\n    private String parseId(String str) {\n        int idEnd = str.indexOf("#");\n        return str.substring(3, idEnd);\n    }\n\n    private String parseTime(String str) {\n        int timeEnd = str.indexOf(" \xc2\xa0\xe2\x80\xa2");\n        if (timeEnd == -1) {\n            return str;\n        }\n        return str.substring(0, timeEnd);\n    }\n\n    public static String parseImg(String str) {\n        return "http:" + str;\n    }\n}\n'