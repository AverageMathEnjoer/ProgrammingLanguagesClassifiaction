b'{-# LANGUAGE CPP #-}\n#if !defined(TESTING) && defined(__GLASGOW_HASKELL__)\n{-# LANGUAGE Safe #-}\n#endif\n\n#include "containers.h"\n\n-----------------------------------------------------------------------------\n-- |\n-- Module      :  Data.IntMap.Merge.Lazy\n-- Copyright   :  (c) wren romano 2016\n-- License     :  BSD-style\n-- Maintainer  :  libraries@haskell.org\n-- Portability :  portable\n--\n-- This module defines an API for writing functions that merge two\n-- maps. The key functions are \'merge\' and \'mergeA\'.\n-- Each of these can be used with several different \\"merge tactics\\".\n--\n-- The \'merge\' and \'mergeA\' functions are shared by\n-- the lazy and strict modules. Only the choice of merge tactics\n-- determines strictness. If you use \'Data.Map.Merge.Strict.mapMissing\'\n-- from "Data.Map.Merge.Strict" then the results will be forced before\n-- they are inserted. If you use \'Data.Map.Merge.Lazy.mapMissing\' from\n-- this module then they will not.\n--\n-- == Efficiency note\n--\n-- The \'Control.Category.Category\', \'Applicative\', and \'Monad\' instances for\n-- \'WhenMissing\' tactics are included because they are valid. However, they are\n-- inefficient in many cases and should usually be avoided. The instances\n-- for \'WhenMatched\' tactics should not pose any major efficiency problems.\n--\n-- @since 0.5.9\n\nmodule Data.IntMap.Merge.Lazy (\n    -- ** Simple merge tactic types\n      SimpleWhenMissing\n    , SimpleWhenMatched\n\n    -- ** General combining function\n    , merge\n\n    -- *** @WhenMatched@ tactics\n    , zipWithMaybeMatched\n    , zipWithMatched\n\n    -- *** @WhenMissing@ tactics\n    , mapMaybeMissing\n    , dropMissing\n    , preserveMissing\n    , mapMissing\n    , filterMissing\n\n    -- ** Applicative merge tactic types\n    , WhenMissing\n    , WhenMatched\n\n    -- ** Applicative general combining function\n    , mergeA\n\n    -- *** @WhenMatched@ tactics\n    -- | The tactics described for \'merge\' work for\n    -- \'mergeA\' as well. Furthermore, the following\n    -- are available.\n    , zipWithMaybeAMatched\n    , zipWithAMatched\n\n    -- *** @WhenMissing@ tactics\n    -- | The tactics described for \'merge\' work for\n    -- \'mergeA\' as well. Furthermore, the following\n    -- are available.\n    , traverseMaybeMissing\n    , traverseMissing\n    , filterAMissing\n\n    -- *** Covariant maps for tactics\n    , mapWhenMissing\n    , mapWhenMatched\n\n    -- *** Contravariant maps for tactics\n    , lmapWhenMissing\n    , contramapFirstWhenMatched\n    , contramapSecondWhenMatched\n\n    -- *** Miscellaneous tactic functions\n    , runWhenMatched\n    , runWhenMissing\n    ) where\n\nimport Data.IntMap.Internal\n'