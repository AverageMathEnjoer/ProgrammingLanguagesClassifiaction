b'\xef\xbb\xbfusing System;\nusing System.Runtime.InteropServices;\n\nnamespace SweetPotato {\n    public static class Ole32 {\n\n        [Flags]\n        public enum CLSCTX : uint {\n            CLSCTX_INPROC_SERVER = 0x1,\n            CLSCTX_INPROC_HANDLER = 0x2,\n            CLSCTX_LOCAL_SERVER = 0x4,\n            CLSCTX_INPROC_SERVER16 = 0x8,\n            CLSCTX_REMOTE_SERVER = 0x10,\n            CLSCTX_INPROC_HANDLER16 = 0x20,\n            CLSCTX_RESERVED1 = 0x40,\n            CLSCTX_RESERVED2 = 0x80,\n            CLSCTX_RESERVED3 = 0x100,\n            CLSCTX_RESERVED4 = 0x200,\n            CLSCTX_NO_CODE_DOWNLOAD = 0x400,\n            CLSCTX_RESERVED5 = 0x800,\n            CLSCTX_NO_CUSTOM_MARSHAL = 0x1000,\n            CLSCTX_ENABLE_CODE_DOWNLOAD = 0x2000,\n            CLSCTX_NO_FAILURE_LOG = 0x4000,\n            CLSCTX_DISABLE_AAA = 0x8000,\n            CLSCTX_ENABLE_AAA = 0x10000,\n            CLSCTX_FROM_DEFAULT_CONTEXT = 0x20000,\n            CLSCTX_ACTIVATE_32_BIT_SERVER = 0x40000,\n            CLSCTX_ACTIVATE_64_BIT_SERVER = 0x80000,\n            CLSCTX_INPROC = CLSCTX_INPROC_SERVER | CLSCTX_INPROC_HANDLER,\n            CLSCTX_SERVER = CLSCTX_INPROC_SERVER | CLSCTX_LOCAL_SERVER | CLSCTX_REMOTE_SERVER,\n            CLSCTX_ALL = CLSCTX_SERVER | CLSCTX_INPROC_HANDLER\n        }\n\n        [Flags]\n        public enum STGM : int {\n            DIRECT = 0x00000000,\n            TRANSACTED = 0x00010000,\n            SIMPLE = 0x08000000,\n            READ = 0x00000000,\n            WRITE = 0x00000001,\n            READWRITE = 0x00000002,\n            SHARE_DENY_NONE = 0x00000040,\n            SHARE_DENY_READ = 0x00000030,\n            SHARE_DENY_WRITE = 0x00000020,\n            SHARE_EXCLUSIVE = 0x00000010,\n            PRIORITY = 0x00040000,\n            DELETEONRELEASE = 0x04000000,\n            NOSCRATCH = 0x00100000,\n            CREATE = 0x00001000,\n            CONVERT = 0x00020000,\n            FAILIFTHERE = 0x00000000,\n            NOSNAPSHOT = 0x00200000,\n            DIRECT_SWMR = 0x00400000,\n        }\n\n        public static IntPtr GuidToPointer(Guid g) {\n            IntPtr ret = Marshal.AllocCoTaskMem(16);\n            Marshal.Copy(g.ToByteArray(), 0, ret, 16);\n            return ret;\n        }\n\n        public static Guid IID_IUnknown = new Guid("{00000000-0000-0000-C000-000000000046}");\n        public static IntPtr IID_IUnknownPtr = GuidToPointer(IID_IUnknown);\n\n        [StructLayout(LayoutKind.Sequential)]\n        public struct MULTI_QI {\n            public IntPtr pIID;\n            [MarshalAs(UnmanagedType.Interface)]\n            public object pItf;\n            public int hr;\n        }\n\n        [StructLayout(LayoutKind.Sequential)]\n        public class COSERVERINFO {\n            public uint dwReserved1;\n            [MarshalAs(UnmanagedType.LPWStr)]\n            public string pwszName;\n            public IntPtr pAuthInfo;\n            public uint dwReserved2;\n        }\n\n        [DllImport("ole32.dll", PreserveSig = false, ExactSpelling = true)]\n        public static extern int CreateILockBytesOnHGlobal(\n                 IntPtr hGlobal,\n                 [MarshalAs(UnmanagedType.Bool)] bool fDeleteOnRelease,\n                 out ILockBytes ppLkbyt);\n\n        [DllImport("ole32.dll", PreserveSig = false, ExactSpelling = true)]\n        public static extern int StgCreateDocfileOnILockBytes(\n                   ILockBytes plkbyt,\n                   STGM grfMode,\n                   uint reserved,\n                   out IStorage ppstgOpen);\n\n        [DllImport("ole32.dll", PreserveSig = false, ExactSpelling = true)]\n        public static extern int CoGetInstanceFromIStorage(COSERVERINFO pServerInfo, ref Guid pclsid,\n                   [MarshalAs(UnmanagedType.IUnknown)] object pUnkOuter, CLSCTX dwClsCtx,\n                   IStorage pstg, uint cmq, [In, Out] MULTI_QI[] rgmqResults);\n    }\n}\n'