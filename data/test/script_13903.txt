b"{-# LANGUAGE CPP #-}\n-- |\n-- Copyright  : (c) Ivan Perez and Manuel Baerenz, 2016\n-- License    : BSD3\n-- Maintainer : ivan.perez@keera.co.uk\n--\n-- 'MSF's with a 'Writer' monadic layer.\n--\n-- This module contains functions to work with 'MSF's that include a 'Writer'\n-- monadic layer. This includes functions to create new 'MSF's that include an\n-- additional layer, and functions to flatten that layer out of the 'MSF`'s\n-- transformer stack.\n--\n-- It is based on the _strict_ writer monad 'Control.Monad.Trans.Writer.Strict',\n-- so when combining it with other modules such as @mtl@'s,\n-- the strict version has to be included, i.e. 'Control.Monad.Writer.Strict'\n-- instead of 'Control.Monad.Writer' or 'Control.Monad.Writer.Lazy'.\nmodule Control.Monad.Trans.MSF.Writer\n    ( module Control.Monad.Trans.Writer.Strict\n    -- * 'Writer' 'MSF' running and wrapping\n    , writerS\n    , runWriterS\n    )\n  where\n\n-- External imports\nimport Control.Monad.Trans.Writer.Strict hiding (liftCallCC, liftCatch, pass)\n\n#if !MIN_VERSION_base(4,8,0)\nimport Data.Functor ((<$>))\nimport Data.Monoid  (Monoid)\n#endif\n\n-- Internal imports\nimport Data.MonadicStreamFunction (MSF, morphGS)\n\n-- * 'Writer' 'MSF' running and wrapping\n\n-- | Build an 'MSF' in the 'Writer' monad from one that produces the log as an\n-- extra output. This is the opposite of 'runWriterS'.\nwriterS :: (Functor m, Monad m, Monoid w)\n        => MSF m a (w, b) -> MSF (WriterT w m) a b\nwriterS = morphGS $ \\f a -> WriterT $ (\\((w, b), c) -> ((b, c), w)) <$> f a\n\n-- | Build an 'MSF' that produces the log as an extra output from one on the\n-- 'Writer' monad. This is the opposite of 'writerS'.\nrunWriterS :: (Functor m, Monad m)\n           => MSF (WriterT s m) a b -> MSF m a (s, b)\nrunWriterS = morphGS $ \\f a -> (\\((b, c), s) -> ((s, b), c))\n         <$> runWriterT (f a)\n"