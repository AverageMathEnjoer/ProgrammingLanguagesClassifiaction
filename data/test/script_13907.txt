b'/*\n* Copyright (C) 2014 The CyanogenMod Project\n*\n* Licensed under the Apache License, Version 2.0 (the "License");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an "AS IS" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\npackage com.naman14.timber.provider;\n\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.database.Cursor;\nimport android.database.sqlite.SQLiteDatabase;\n\npublic class RecentStore {\n\n    private static final int MAX_ITEMS_IN_DB = 100;\n\n    private static RecentStore sInstance = null;\n\n    private MusicDB mMusicDatabase = null;\n\n    public RecentStore(final Context context) {\n        mMusicDatabase = MusicDB.getInstance(context);\n    }\n\n    public static final synchronized RecentStore getInstance(final Context context) {\n        if (sInstance == null) {\n            sInstance = new RecentStore(context.getApplicationContext());\n        }\n        return sInstance;\n    }\n\n    public void onCreate(final SQLiteDatabase db) {\n        db.execSQL("CREATE TABLE IF NOT EXISTS " + RecentStoreColumns.NAME + " ("\n                + RecentStoreColumns.ID + " LONG NOT NULL," + RecentStoreColumns.TIMEPLAYED\n                + " LONG NOT NULL);");\n    }\n\n    public void onUpgrade(final SQLiteDatabase db, final int oldVersion, final int newVersion) {\n    }\n\n    public void onDowngrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n        db.execSQL("DROP TABLE IF EXISTS " + RecentStoreColumns.NAME);\n        onCreate(db);\n    }\n\n    public void addSongId(final long songId) {\n        final SQLiteDatabase database = mMusicDatabase.getWritableDatabase();\n        database.beginTransaction();\n\n        try {\n\n            Cursor mostRecentItem = null;\n            try {\n                mostRecentItem = queryRecentIds("1");\n                if (mostRecentItem != null && mostRecentItem.moveToFirst()) {\n                    if (songId == mostRecentItem.getLong(0)) {\n                        return;\n                    }\n                }\n            } finally {\n                if (mostRecentItem != null) {\n                    mostRecentItem.close();\n                    mostRecentItem = null;\n                }\n            }\n\n\n            final ContentValues values = new ContentValues(2);\n            values.put(RecentStoreColumns.ID, songId);\n            values.put(RecentStoreColumns.TIMEPLAYED, System.currentTimeMillis());\n            database.insert(RecentStoreColumns.NAME, null, values);\n\n            Cursor oldest = null;\n            try {\n                oldest = database.query(RecentStoreColumns.NAME,\n                        new String[]{RecentStoreColumns.TIMEPLAYED}, null, null, null, null,\n                        RecentStoreColumns.TIMEPLAYED + " ASC");\n\n                if (oldest != null && oldest.getCount() > MAX_ITEMS_IN_DB) {\n                    oldest.moveToPosition(oldest.getCount() - MAX_ITEMS_IN_DB);\n                    long timeOfRecordToKeep = oldest.getLong(0);\n\n                    database.delete(RecentStoreColumns.NAME,\n                            RecentStoreColumns.TIMEPLAYED + " < ?",\n                            new String[]{String.valueOf(timeOfRecordToKeep)});\n\n                }\n            } finally {\n                if (oldest != null) {\n                    oldest.close();\n                    oldest = null;\n                }\n            }\n        } finally {\n            database.setTransactionSuccessful();\n            database.endTransaction();\n        }\n    }\n\n\n    public void removeItem(final long songId) {\n        final SQLiteDatabase database = mMusicDatabase.getWritableDatabase();\n        database.delete(RecentStoreColumns.NAME, RecentStoreColumns.ID + " = ?", new String[]{\n                String.valueOf(songId)\n        });\n\n    }\n\n    public void deleteAll() {\n        final SQLiteDatabase database = mMusicDatabase.getWritableDatabase();\n        database.delete(RecentStoreColumns.NAME, null, null);\n    }\n\n\n    public Cursor queryRecentIds(final String limit) {\n        final SQLiteDatabase database = mMusicDatabase.getReadableDatabase();\n        return database.query(RecentStoreColumns.NAME,\n                new String[]{RecentStoreColumns.ID}, null, null, null, null,\n                RecentStoreColumns.TIMEPLAYED + " DESC", limit);\n    }\n\n    public interface RecentStoreColumns {\n        /* Table name */\n        String NAME = "recenthistory";\n\n        /* Album IDs column */\n        String ID = "songid";\n\n        /* Time played column */\n        String TIMEPLAYED = "timeplayed";\n    }\n}\n'