b"-- massFilter is a filter-like function taking as arguments however many\n-- predicaes you would like, and partitions the list into as many pieces\n-- as there are predicates -- while only traversing the list once.\n-- This function only needs to be written once, as it is very general.\n--\n-- If you're into parallelism, map could be replaced with a parallel\n-- implementation of some kind which distributes the work over several\n-- cores.\n\nmassFilter :: [(a -> Bool)] -> [a] -> [[a]]\nmassFilter predicates []     = map (const []) predicates\nmassFilter predicates (x:xs) =\n  zipWith (\\p r -> if p x then x:r else r) predicates results\n  where results = massFilter predicates xs\n\n\n-- Request returns two things:\n--  1. the sum of all elements equal to 25\n--  2. all elements larger than 34\n\nrequest arr =\n  (sum $ parts !! 0, parts !! 1)\n  where parts = massFilter [(== 25), (> 34)] arr"