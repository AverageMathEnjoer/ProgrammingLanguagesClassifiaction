b'package effectivejava.chapter2.item7;\nimport java.util.*;\n\n// Can you spot the "memory leak"?  (Pages 26-27)\npublic class Stack {\n    private Object[] elements;\n    private int size = 0;\n    private static final int DEFAULT_INITIAL_CAPACITY = 16;\n\n    public Stack() {\n        elements = new Object[DEFAULT_INITIAL_CAPACITY];\n    }\n\n    public void push(Object e) {\n        ensureCapacity();\n        elements[size++] = e;\n    }\n\n    public Object pop() {\n        if (size == 0)\n            throw new EmptyStackException();\n        return elements[--size];\n    }\n\n    /**\n     * Ensure space for at least one more element, roughly\n     * doubling the capacity each time the array needs to grow.\n     */\n    private void ensureCapacity() {\n        if (elements.length == size)\n            elements = Arrays.copyOf(elements, 2 * size + 1);\n    }\n\n//    // Corrected version of pop method (Page 27)\n//    public Object pop() {\n//        if (size == 0)\n//            throw new EmptyStackException();\n//        Object result = elements[--size];\n//        elements[size] = null; // Eliminate obsolete reference\n//        return result;\n//    }\n\n    public static void main(String[] args) {\n        Stack stack = new Stack();\n        for (String arg : args)\n            stack.push(arg);\n\n        while (true)\n            System.err.println(stack.pop());\n    }\n}\n'