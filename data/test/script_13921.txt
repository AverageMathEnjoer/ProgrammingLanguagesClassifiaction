b'\xef\xbb\xbfusing RonSijm.ButtFish.Devices;\n\nnamespace RonSijm.ButtFish;\n\npublic class DeviceDiscoveryManager\n{\n    public async Task<IList<IDeviceAbstraction>> GetDevice()\n    {\n        IList<IDeviceAbstraction> device;\n\n        do\n        {\n            Console.WriteLine();\n            Console.WriteLine("How would you like to use this tool?", Color.Green);\n            Console.WriteLine("Options:");\n            Console.WriteLine("1 - Discover Yeelight or Buttplug devices");\n            Console.WriteLine("2 - Manually connect Yeelight IP Address");\n            Console.WriteLine("3 - Manually connect Buttplug Server");\n\n            var usageChoice = Console.ReadKey().Key;\n            Console.WriteLine();\n\n            device = await GetDeviceByChoice(usageChoice);\n\n            if (device == null)\n            {\n                Console.WriteLine("Invalid choice or could not connect to device.", Color.Red);\n                Console.WriteLine("Please try again...", Color.Red);\n                Console.WriteLine();\n            }\n\n        } while (device == null);\n\n        device.Add(new ConsoleOutputDevice());\n        return device;\n    }\n\n    private static async Task<IList<IDeviceAbstraction>> GetDeviceByChoice(ConsoleKey usageChoice)\n    {\n        if (usageChoice == ConsoleKey.D1)\n        {\n            return await GetDeviceFromDiscovery();\n        }\n\n        if (usageChoice == ConsoleKey.D2)\n        {\n            var yeelightConnector = new YeelightConnector();\n\n            Console.WriteLine();\n            Console.WriteLine("Please provide Yeelight IP or hostname...", Color.Green);\n            var ipAddress = Console.ReadLine();\n            Console.WriteLine();\n\n            var device = await yeelightConnector.GetDeviceToUse(ipAddress);\n\n            return new List<IDeviceAbstraction>(){ device };\n        }\n\n        if (usageChoice == ConsoleKey.D3)\n        {\n            var buttplugConnector = new ButtplugConnector();\n\n            Console.WriteLine();\n            Console.WriteLine("Please provide Buttplug Uri...", Color.Green);\n            var serverUri = Console.ReadLine();\n\n            var devices = await buttplugConnector.GetDiscoveredDevices(serverUri);\n            return ListDiscoveredDevices(devices);\n        }\n\n        return null;\n    }\n\n    private static async Task<IList<IDeviceAbstraction>> GetDeviceFromDiscovery()\n    {\n        var connector = new DeviceConnector();\n\n        var discoveredDevices = await connector.DiscoverDevices();\n        return ListDiscoveredDevices(discoveredDevices);\n    }\n\n    private static List<IDeviceAbstraction> ListDiscoveredDevices(List<IDeviceAbstraction> discoveredDevices)\n    {\n        if (!discoveredDevices.Any())\n        {\n            Console.WriteLine();\n            Console.WriteLine("No devices discovered.", Color.Yellow);\n            Console.WriteLine();\n            return null;\n        }\n\n        Console.WriteLine();\n        Console.WriteLine("Discovered the following devices:", Color.Green);\n\n        for (var index = 0; index < discoveredDevices.Count; index++)\n        {\n            var deviceAbstraction = discoveredDevices[index];\n\n            Console.WriteLine(deviceAbstraction is YeelightDevice ? $"{(index + 1)} - Yeelight device: {deviceAbstraction}" : $"{(index + 1)} - Butt device: {deviceAbstraction}");\n        }\n\n        Console.WriteLine();\n        Console.WriteLine("Which devices do you want to use?", Color.Green);\n        Console.WriteLine("Separate the devices you want to use by a space - then press enter.", Color.Green);\n\n        var deviceChoices = Console.ReadLine();\n\n        if (string.IsNullOrWhiteSpace(deviceChoices))\n        {\n            return null;\n        }\n\n        var devicesSplit = deviceChoices.Split(" ");\n\n        var output = new List<IDeviceAbstraction>();\n\n        foreach (var deviceString in devicesSplit)\n        {\n            var deviceIntParseResult = int.TryParse(deviceString, out var deviceId);\n\n            if (!deviceIntParseResult)\n            {\n                Console.WriteLine($"\'{deviceString}\' is an invalid option.", Color.Red);\n            }\n\n            var device = discoveredDevices[deviceId - 1];\n\n            output.Add(device);\n        }\n\n        return output;\n    }\n}'