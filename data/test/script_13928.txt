b'{-# LANGUAGE NoImplicitPrelude #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n{-# LANGUAGE InstanceSigs #-}\n\nmodule Course.Traversable where\n\nimport Course.Core\nimport Course.Functor\nimport Course.Applicative\nimport Course.List\nimport Course.ExactlyOne\nimport Course.Optional\nimport Course.Compose\n\n-- | All instances of the `Traversable` type-class must satisfy two laws. These\n-- laws are not checked by the compiler. These laws are given as:\n--\n-- * The law of naturality\n--   `\xe2\x88\x80f g. f . traverse g \xe2\x89\x85 traverse (f . g)`\n--\n-- * The law of identity\n--   `\xe2\x88\x80x. traverse ExactlyOne x \xe2\x89\x85 ExactlyOne x`\n--\n-- * The law of composition\n--   `\xe2\x88\x80f g. traverse ((g <$>) . f) \xe2\x89\x85 (traverse g <$>) . traverse f`\nclass Functor t => Traversable t where\n  traverse ::\n    Applicative f =>\n    (a -> f b)\n    -> t a\n    -> f (t b)\n\ninstance Traversable List where\n  traverse ::\n    Applicative f =>\n    (a -> f b)\n    -> List a\n    -> f (List b)\n  traverse f =\n    foldRight (\\a b -> (:.) <$> f a <*> b) (pure Nil)\n\ninstance Traversable ExactlyOne where\n  traverse ::\n    Applicative f =>\n    (a -> f b)\n    -> ExactlyOne a\n    -> f (ExactlyOne b)\n  traverse =\n    error "todo: Course.Traversable traverse#instance ExactlyOne"\n\ninstance Traversable Optional where\n  traverse ::\n    Applicative f =>\n    (a -> f b)\n    -> Optional a\n    -> f (Optional b)\n  traverse =\n    error "todo: Course.Traversable traverse#instance Optional"\n\n-- | Sequences a traversable value of structures to a structure of a traversable value.\n--\n-- >>> sequenceA (ExactlyOne 7 :. ExactlyOne 8 :. ExactlyOne 9 :. Nil)\n-- ExactlyOne [7,8,9]\n--\n-- >>> sequenceA (Full (ExactlyOne 7))\n-- ExactlyOne (Full 7)\n--\n-- >>> sequenceA (Full (*10)) 6\n-- Full 60\nsequenceA ::\n  (Applicative f, Traversable t) =>\n  t (f a)\n  -> f (t a)\nsequenceA =\n  error "todo: Course.Traversable#sequenceA"\n\ninstance (Traversable f, Traversable g) =>\n  Traversable (Compose f g) where\n-- Implement the traverse function for a Traversable instance for Compose\n  traverse =\n    error "todo: Course.Traversable traverse#instance (Compose f g)"\n\n-- | The `Product` data type contains one value from each of the two type constructors.\ndata Product f g a =\n  Product (f a) (g a)\n\ninstance (Functor f, Functor g) =>\n  Functor (Product f g) where\n-- Implement the (<$>) function for a Functor instance for Product\n  (<$>) =\n    error "todo: Course.Traversable (<$>)#instance (Product f g)"\n\ninstance (Traversable f, Traversable g) =>\n  Traversable (Product f g) where\n-- Implement the traverse function for a Traversable instance for Product\n  traverse =\n    error "todo: Course.Traversable traverse#instance (Product f g)"\n\n-- | The `Coproduct` data type contains one value from either of the two type constructors.\ndata Coproduct f g a =\n  InL (f a)\n  | InR (g a)\n\ninstance (Functor f, Functor g) =>\n  Functor (Coproduct f g) where\n-- Implement the (<$>) function for a Functor instance for Coproduct\n  (<$>) =\n    error "todo: Course.Traversable (<$>)#instance (Coproduct f g)"\n\ninstance (Traversable f, Traversable g) =>\n  Traversable (Coproduct f g) where\n-- Implement the traverse function for a Traversable instance for Coproduct\n  traverse =\n    error "todo: Course.Traversable traverse#instance (Coproduct f g)"\n'