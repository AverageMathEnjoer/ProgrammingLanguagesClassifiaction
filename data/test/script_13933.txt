b'{-# LANGUAGE CPP #-}\n{-# OPTIONS_GHC -Wno-orphans #-}\nmodule Main (main) where\n\nimport Prelude hiding (foldl)\n\nimport Test.ChasingBottoms.IsBottom\nimport Test.Tasty (TestTree, defaultMain, testGroup)\nimport Test.Tasty.QuickCheck (testProperty, Arbitrary (..))\n#if __GLASGOW_HASKELL__ >= 806\nimport Test.Tasty.QuickCheck (Property)\n#endif\n\nimport Data.IntSet\n\n#if __GLASGOW_HASKELL__ >= 806\nimport Utils.NoThunks\n#endif\n\n\n{--------------------------------------------------------------------\n  Arbitrary, reasonably balanced trees\n--------------------------------------------------------------------}\ninstance Arbitrary IntSet where\n  arbitrary = do{ xs <- arbitrary\n                ; return (fromList xs)\n                }\n\n------------------------------------------------------------------------\n-- * Properties\n\n------------------------------------------------------------------------\n-- ** Lazy module\n\npFoldlAccLazy :: Int -> Bool\npFoldlAccLazy k =\n  isn\'tBottom $ foldl (\\_ x -> x) (bottom :: Int) (singleton k)\n\n#if __GLASGOW_HASKELL__ >= 806\npStrictFoldr\' :: IntSet -> Property\npStrictFoldr\' m = whnfHasNoThunks (foldr\' (:) [] m)\n#endif\n\n#if __GLASGOW_HASKELL__ >= 806\npStrictFoldl\' :: IntSet -> Property\npStrictFoldl\' m = whnfHasNoThunks (foldl\' (flip (:)) [] m)\n#endif\n\n------------------------------------------------------------------------\n-- * Test list\n\ntests :: TestTree\ntests =\n    -- Basic interface\n      testGroup "IntSet"\n      [ testProperty "foldl is lazy in accumulator" pFoldlAccLazy\n#if __GLASGOW_HASKELL__ >= 806\n      , testProperty "strict foldr\'" pStrictFoldr\'\n      , testProperty "strict foldl\'" pStrictFoldl\'\n#endif\n      ]\n\n------------------------------------------------------------------------\n-- * Test harness\n\nmain :: IO ()\nmain = defaultMain tests\n\n------------------------------------------------------------------------\n-- * Utilities\n\nisn\'tBottom :: a -> Bool\nisn\'tBottom = not . isBottom\n'