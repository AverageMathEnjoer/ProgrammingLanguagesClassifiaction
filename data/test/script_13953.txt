b'-- % cabal install hspec\n-- % runghc <this_file>\n\nimport Small\n\nmain :: IO ()\nmain = hspec $ do\n    describe "my_soap_iter" $\n      prop "behaves as model" $ \\(Small n) -> n >= 0\n        ==> my_soap_iter n == sum [0..n]\n    describe "my_fact_iter" $\n      prop "behaves as model" $ \\(Small n) -> n >= 1\n        ==> my_fact_iter n == product [1..n]\n    describe "my_mul_iter" $\n      prop "behaves as model" $ \\(Small m) (Small n) -> m >= 1 && n >= 1\n        ==> my_mul_iter m n == m * n\n    describe "my_plus_iter" $\n      prop "behaves as model" $ \\(Small m) (Small n) -> m >= 0 && n >= 0\n        ==> my_plus_iter m n == m + n\n    describe "my_minus_iter" $\n      prop "behaves as model" $ \\(Small m) (Small n) -> m >= 0 && n >= 0\n        ==> my_minus_iter m n == m - n\n    describe "my_power_iter" $\n      prop "behaves as model" $ \\(Small m) (Small n) -> m >= 1 && n >= 0\n        ==> my_power_iter m n == m ^ n\n\n-- my_soap :: Integer -> Integer\n-- my_soap 0 = 0\n-- my_soap n = soap (n-1) + n\n\nmy_soap_iter :: Integer -> Integer\nmy_soap_iter x = iter x 0\n  where\n    iter :: Integer -> Integer -> Integer\n    iter 0 acc = acc\n    iter n acc = iter (n-1) (acc + n)\n\n-- my_fact :: Integer -> Integer\n-- my_fact 1 = 1\n-- my_fact n = fact (n - 1) * n\n\nmy_fact_iter :: Integer -> Integer\nmy_fact_iter x = iter x 1\n  where\n    iter :: Integer -> Integer -> Integer\n    iter 1 acc = acc\n    iter n acc = iter (n - 1) (acc * n)\n\n-- my_mul :: Integer -> Integer -> Integer\n-- my_mul m 1 = m\n-- my_mul m n = mul m (n - 1) + m\n\nmy_mul_iter :: Integer -> Integer -> Integer\nmy_mul_iter x y = iter x y x\n  where\n    iter :: Integer -> Integer -> Integer -> Integer\n    iter _ 1 acc = acc\n    iter m n acc = iter m (n - 1) (acc + m)\n\n-- my_plus :: Integer -> Integer -> Integer\n-- my_plus m 0 = m\n-- my_plus m n = plus m (n - 1) + 1\n\nmy_plus_iter :: Integer -> Integer -> Integer\nmy_plus_iter x y = iter x y x\n  where\n    iter :: Integer -> Integer -> Integer -> Integer\n    iter _ 0 acc = acc\n    iter m n acc = iter m (n - 1) (acc + 1)\n\n-- my_minus :: Integer -> Integer -> Integer\n-- my_minus m 0 = m\n-- my_minus m n = minus m (n - 1) - 1\n\nmy_minus_iter :: Integer -> Integer -> Integer\nmy_minus_iter x y = iter x y x\n  where\n    iter :: Integer -> Integer -> Integer -> Integer\n    iter _ 0 acc = acc\n    iter m n acc = iter m (n - 1) (acc - 1)\n\n-- my_power :: Integer -> Integer -> Integer\n-- my_power _ 0 = 1\n-- my_power m n = power m (n - 1) * m\n\nmy_power_iter :: Integer -> Integer -> Integer\nmy_power_iter x y = iter x y 1\n  where\n    iter :: Integer -> Integer -> Integer -> Integer\n    iter _ 0 acc = acc\n    iter m n acc = iter m (n - 1) (acc * m)\n'