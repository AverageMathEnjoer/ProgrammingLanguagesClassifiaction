b'-- | Defines a schema for the chinook example database\n--\n--   We use just the beam-core functions here for illustrative purposes.\nmodule Chinook.Schema where\n\nimport Database.Beam\nimport Database.Beam.Backend.SQL.BeamExtensions\n\nimport Data.Int\nimport Data.Text (Text)\nimport Data.Time (LocalTime)\nimport Data.Monoid\nimport Data.String\nimport Data.Scientific (Scientific)\n\n-- * Address\n\ndata AddressMixin f\n  = Address\n  { address           :: Columnar f (Maybe Text)\n  , addressCity       :: Columnar f (Maybe Text)\n  , addressState      :: Columnar f (Maybe Text)\n  , addressCountry    :: Columnar f (Maybe Text)\n  , addressPostalCode :: Columnar f (Maybe Text)\n  } deriving Generic\ninstance Beamable AddressMixin\ntype Address = AddressMixin Identity\nderiving instance Show (AddressMixin Identity)\n\n-- * Artist\n\ndata ArtistT f\n  = Artist\n  { artistId   :: Columnar f Int32\n  , artistName :: Columnar f Text\n  } deriving Generic\ninstance Beamable ArtistT\ntype Artist = ArtistT Identity; deriving instance Show Artist\n\ninstance Table ArtistT where\n  data PrimaryKey ArtistT f = ArtistId (Columnar f Int32)\n    deriving Generic\n  primaryKey = ArtistId . artistId\ninstance Beamable (PrimaryKey ArtistT)\ntype ArtistId = PrimaryKey ArtistT Identity; deriving instance Show ArtistId\n\n-- * Album\n\ndata AlbumT f\n  = Album\n  { albumId     :: Columnar f Int32\n  , albumTitle  :: Columnar f Text\n  , albumArtist :: PrimaryKey ArtistT f\n  } deriving Generic\ninstance Beamable AlbumT\ntype Album = AlbumT Identity; deriving instance Show Album\n\ninstance Table AlbumT where\n  data PrimaryKey AlbumT f = AlbumId (Columnar f Int32)\n    deriving Generic\n  primaryKey = AlbumId . albumId\ninstance Beamable (PrimaryKey AlbumT)\ntype AlbumId = PrimaryKey AlbumT Identity; deriving instance Show AlbumId\nderiving instance Show (PrimaryKey AlbumT (Nullable Identity))\n\nartistAlbums :: HasSqlEqualityCheck be Int32\n             => OneToMany be ChinookDb s ArtistT AlbumT\nartistAlbums = oneToMany_ (album chinookDb) albumArtist\n\n-- * Employee\n\ndata EmployeeT f\n  = Employee\n  { employeeId        :: Columnar f Int32\n  , employeeLastName  :: Columnar f Text\n  , employeeFirstName :: Columnar f Text\n  , employeeTitle     :: Columnar f (Maybe Text)\n  , employeeReportsTo :: PrimaryKey EmployeeT (Nullable f)\n  , employeeBirthDate :: Columnar f (Maybe LocalTime)\n  , employeeHireDate  :: Columnar f (Maybe LocalTime)\n  , employeeAddress   :: AddressMixin f\n  , employeePhone     :: Columnar f (Maybe Text)\n  , employeeFax       :: Columnar f (Maybe Text)\n  , employeeEmail     :: Columnar f (Maybe Text)\n  } deriving Generic\ninstance Beamable EmployeeT\ntype Employee = EmployeeT Identity; deriving instance Show Employee\n\ninstance Table EmployeeT where\n  data PrimaryKey EmployeeT f = EmployeeId (Columnar f Int32)\n    deriving Generic\n  primaryKey = EmployeeId . employeeId\ninstance Beamable (PrimaryKey EmployeeT)\ntype EmployeeId = PrimaryKey EmployeeT Identity; deriving instance Show EmployeeId\nderiving instance Show (PrimaryKey EmployeeT (Nullable Identity))\n\n-- * Customer\n\ndata CustomerT f\n  = Customer\n  { customerId        :: Columnar f Int32\n  , customerFirstName :: Columnar f Text\n  , customerLastName  :: Columnar f Text\n  , customerCompany   :: Columnar f (Maybe Text)\n  , customerAddress   :: AddressMixin f\n  , customerPhone     :: Columnar f (Maybe Text)\n  , customerFax       :: Columnar f (Maybe Text)\n  , customerEmail     :: Columnar f Text\n  , customerSupportRep :: PrimaryKey EmployeeT (Nullable f)\n  } deriving Generic\ninstance Beamable CustomerT\ntype Customer = CustomerT Identity; deriving instance Show Customer\n\ninstance Table CustomerT where\n  data PrimaryKey CustomerT f = CustomerId (Columnar f Int32)\n    deriving Generic\n  primaryKey = CustomerId . customerId\ninstance Beamable (PrimaryKey CustomerT)\ntype CustomerId = PrimaryKey CustomerT Identity; deriving instance Show CustomerId\n\n-- * Genre\n\ndata GenreT f\n  = Genre\n  { genreId   :: Columnar f Int32\n  , genreName :: Columnar f Text\n  } deriving Generic\ninstance Beamable GenreT\ntype Genre = GenreT Identity; deriving instance Show Genre\n\ninstance Table GenreT where\n  data PrimaryKey GenreT f = GenreId (Columnar f Int32)\n    deriving Generic\n  primaryKey = GenreId . genreId\ninstance Beamable (PrimaryKey GenreT)\ntype GenreId = PrimaryKey GenreT Identity; deriving instance Show GenreId\nderiving instance Show (PrimaryKey GenreT (Nullable Identity))\n\n-- * Invoice\n\ndata InvoiceT f\n  = Invoice\n  { invoiceId       :: Columnar f (SqlSerial Int32) -- Slightly different from the standard chinook schema. Used for illustrative purposes in the docs\n  , invoiceCustomer :: PrimaryKey CustomerT f\n  , invoiceDate     :: Columnar f LocalTime\n  , invoiceBillingAddress :: AddressMixin f\n  , invoiceTotal    :: Columnar f Scientific\n  } deriving Generic\ninstance Beamable InvoiceT\ntype Invoice = InvoiceT Identity; deriving instance Show Invoice\n\ninstance Table InvoiceT where\n  data PrimaryKey InvoiceT f = InvoiceId (Columnar f (SqlSerial Int32)) deriving Generic\n  primaryKey = InvoiceId . invoiceId\ninstance Beamable (PrimaryKey InvoiceT)\ntype InvoiceId = PrimaryKey InvoiceT Identity; deriving instance Show InvoiceId\n\ninvoiceLines :: HasSqlEqualityCheck be Int32\n             => OneToMany be ChinookDb s InvoiceT InvoiceLineT\ninvoiceLines = oneToMany_ (invoiceLine chinookDb) invoiceLineInvoice\n\n-- * InvoiceLine\n\ndata InvoiceLineT f\n  = InvoiceLine\n  { invoiceLineId      :: Columnar f Int32\n  , invoiceLineInvoice :: PrimaryKey InvoiceT f\n  , invoiceLineTrack   :: PrimaryKey TrackT f\n  , invoiceLineUnitPrice :: Columnar f Scientific\n  , invoiceLineQuantity :: Columnar f Int32\n  } deriving Generic\ninstance Beamable InvoiceLineT\ntype InvoiceLine = InvoiceLineT Identity; deriving instance Show InvoiceLine\n\ninstance Table InvoiceLineT where\n  data PrimaryKey InvoiceLineT f = InvoiceLineId (Columnar f Int32) deriving Generic\n  primaryKey = InvoiceLineId . invoiceLineId\ninstance Beamable (PrimaryKey InvoiceLineT)\ntype InvoiceLineId = PrimaryKey InvoiceLineT Identity; deriving instance Show InvoiceLineId\n\n-- * MediaType\n\ndata MediaTypeT f\n  = MediaType\n  { mediaTypeId   :: Columnar f Int32\n  , mediaTypeName :: Columnar f (Maybe Text)\n  } deriving Generic\ninstance Beamable MediaTypeT\ntype MediaType = MediaTypeT Identity; deriving instance Show MediaType\n\ninstance Table MediaTypeT where\n  data PrimaryKey MediaTypeT f = MediaTypeId (Columnar f Int32) deriving Generic\n  primaryKey = MediaTypeId . mediaTypeId\ninstance Beamable (PrimaryKey MediaTypeT)\ntype MediaTypeId = PrimaryKey MediaTypeT Identity; deriving instance Show MediaTypeId\n\n-- * Playlist\n\ndata PlaylistT f\n  = Playlist\n  { playlistId :: Columnar f Int32\n  , playlistName :: Columnar f (Maybe Text)\n  } deriving Generic\ninstance Beamable PlaylistT\ntype Playlist = PlaylistT Identity; deriving instance Show Playlist\n\ninstance Table PlaylistT where\n  data PrimaryKey PlaylistT f = PlaylistId (Columnar f Int32) deriving Generic\n  primaryKey = PlaylistId . playlistId\ninstance Beamable (PrimaryKey PlaylistT)\ntype PlaylistId = PrimaryKey PlaylistT Identity; deriving instance Show PlaylistId\n\n-- * PlaylistTrack\n\ndata PlaylistTrackT f\n  = PlaylistTrack\n  { playlistTrackPlaylistId :: PrimaryKey PlaylistT f\n  , playlistTrackTrackId    :: PrimaryKey TrackT f\n  } deriving Generic\ninstance Beamable PlaylistTrackT\ntype PlaylistTrack = PlaylistTrackT Identity; deriving instance Show PlaylistTrack\n\ninstance Table PlaylistTrackT where\n  data PrimaryKey PlaylistTrackT f = PlaylistTrackId (PrimaryKey PlaylistT f) (PrimaryKey TrackT f)\n    deriving Generic\n  primaryKey = PlaylistTrackId <$> playlistTrackPlaylistId <*> playlistTrackTrackId\ninstance Beamable (PrimaryKey PlaylistTrackT)\ntype PlaylistTrackId = PrimaryKey PlaylistTrackT Identity; deriving instance Show PlaylistTrackId\n\nplaylistTrackRelationship :: HasSqlEqualityCheck be Int32\n                          => ManyToMany be ChinookDb PlaylistT TrackT\nplaylistTrackRelationship =\n manyToMany_ (playlistTrack chinookDb)\n             playlistTrackPlaylistId\n             playlistTrackTrackId\n\n-- * Track\n\ndata TrackT f\n  = Track\n  { trackId           :: Columnar f Int32\n  , trackName         :: Columnar f Text\n  , trackAlbumId      :: PrimaryKey AlbumT (Nullable f)\n  , trackMediaTypeId  :: PrimaryKey MediaTypeT f\n  , trackGenreId      :: PrimaryKey GenreT (Nullable f)\n  , trackComposer     :: Columnar f (Maybe Text)\n  , trackMilliseconds :: Columnar f Int32\n  , trackBytes        :: Columnar f Int32\n  , trackUnitPrice    :: Columnar f Scientific\n  } deriving Generic\ninstance Beamable TrackT\ntype Track = TrackT Identity; deriving instance Show Track\n\ninstance Table TrackT where\n  data PrimaryKey TrackT f = TrackId (Columnar f Int32) deriving Generic\n  primaryKey = TrackId . trackId\ninstance Beamable (PrimaryKey TrackT)\ntype TrackId = PrimaryKey TrackT Identity; deriving instance Show TrackId\n\ngenreTracks :: HasSqlEqualityCheck be Int32\n            => OneToManyOptional be ChinookDb s GenreT TrackT\ngenreTracks = oneToManyOptional_ (track chinookDb) trackGenreId\n\nmediaTypeTracks :: HasSqlEqualityCheck be Int32\n                => OneToMany be ChinookDb s MediaTypeT TrackT\nmediaTypeTracks = oneToMany_ (track chinookDb) trackMediaTypeId\n\nalbumTracks :: HasSqlEqualityCheck be Int32\n            => OneToManyOptional be ChinookDb s AlbumT TrackT\nalbumTracks = oneToManyOptional_ (track chinookDb) trackAlbumId\n\n-- * database\n\ndata ChinookDb entity\n  = ChinookDb\n  { album         :: entity (TableEntity AlbumT)\n  , artist        :: entity (TableEntity ArtistT)\n  , customer      :: entity (TableEntity CustomerT)\n  , employee      :: entity (TableEntity EmployeeT)\n  , genre         :: entity (TableEntity GenreT)\n  , invoice       :: entity (TableEntity InvoiceT)\n  , invoiceLine   :: entity (TableEntity InvoiceLineT)\n  , mediaType     :: entity (TableEntity MediaTypeT)\n  , playlist      :: entity (TableEntity PlaylistT)\n  , playlistTrack :: entity (TableEntity PlaylistTrackT)\n  , track         :: entity (TableEntity TrackT)\n  } deriving Generic\ninstance Database be ChinookDb\n\naddressFields b = Address (fromString (b <> "Address"))\n                          (fromString (b <> "City"))\n                          (fromString (b <> "State"))\n                          (fromString (b <> "Country"))\n                          (fromString (b <> "PostalCode"))\n\nchinookDb :: DatabaseSettings be ChinookDb\nchinookDb =\n  defaultDbSettings `withDbModification`\n  (dbModification\n   { album = setEntityName "Album" <>\n             modifyTableFields (Album "AlbumId" "Title" (ArtistId "ArtistId"))\n   , artist = setEntityName "Artist" <>\n              modifyTableFields (Artist "ArtistId" "Name")\n   , customer = setEntityName "Customer" <>\n                modifyTableFields\n                    (Customer "CustomerId" "FirstName" "LastName" "Company"\n                              (addressFields "") "Phone" "Fax" "Email"\n                              (EmployeeId "SupportRepId"))\n   , employee = setEntityName "Employee" <>\n                modifyTableFields\n                    (Employee "EmployeeId" "LastName" "FirstName" "Title"\n                              (EmployeeId "ReportsTo") "BirthDate" "HireDate"\n                              (addressFields "") "Phone" "Fax" "Email")\n   , genre = setEntityName "Genre" <>\n             modifyTableFields\n                 (Genre "GenreId" "Name")\n   , invoice = setEntityName "Invoice" <>\n               modifyTableFields\n                   (Invoice "InvoiceId" (CustomerId "CustomerId") "InvoiceDate"\n                            (addressFields "Billing") "Total")\n   , invoiceLine = setEntityName "InvoiceLine" <>\n                   modifyTableFields\n                        (InvoiceLine "InvoiceLineId" (InvoiceId "InvoiceId") (TrackId "TrackId")\n                                     "UnitPrice" "Quantity")\n   , mediaType = setEntityName "MediaType" <>\n                 modifyTableFields (MediaType "MediaTypeId" "Name")\n   , playlist = setEntityName "Playlist" <>\n                modifyTableFields (Playlist "PlaylistId" "Name")\n   , playlistTrack = setEntityName "PlaylistTrack" <>\n                     modifyTableFields (PlaylistTrack (PlaylistId "PlaylistId")\n                                                      (TrackId "TrackId"))\n   , track = setEntityName "Track" <>\n             modifyTableFields\n                 (Track "TrackId" "Name" (AlbumId "AlbumId") (MediaTypeId "MediaTypeId")\n                        (GenreId "GenreId") "Composer" "Milliseconds" "Bytes" "UnitPrice")\n   })\n'