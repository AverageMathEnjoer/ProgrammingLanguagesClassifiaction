b'#\' Find all functions in that call supplied functions.\n#\'\n#\' @param envs Vector of environments to look in. Can be specified by\n#\'   name, position or as environment\n#\' @param funs Functions to look for\n#\' @param match_any If \\code{TRUE} return functions that use any of \\code{funs}.\n#\'   If \\code{FALSE}, return functions that use all of \\code{funs}.\n#\' @export\n#\' @examples\n#\' names(find_uses("package:base", "sum"))\n#\'\n#\' envs <- c("package:base", "package:utils", "package:stats")\n#\' funs <- c("match.call", "sys.call")\n#\' find_uses(envs, funs)\nfind_uses <- function(envs, funs, match_any = TRUE) {\n  envs <- lapply(envs, to_env, quiet = TRUE)\n\n  by_env <- lapply(envs, function(env) {\n    names <- ls(envir = env)\n    names(names) <- names\n    compact(lapply(names, function(x) matched_calls(get(x, envir = env), funs,\n      match_any = match_any)))\n  })\n\n  unlist(by_env, recursive = FALSE)\n}\n\nmatched_calls <- function(fun, calls, match_any = TRUE) {\n  if (!is.function(fun) || is.primitive(fun)) return()\n\n  called <- fun_calls(fun)\n  matches <- calls %in% called\n  match <- if (match_any) any(matches) else all(matches)\n\n  if (!match) return()\n  called[matches]\n}\n'