b'package icu.nullptr.twifucker.hook\n\nimport com.github.kyuubiran.ezxhelper.ClassUtils.loadClass\nimport com.github.kyuubiran.ezxhelper.EzXHelper\nimport com.github.kyuubiran.ezxhelper.HookFactory.`-Static`.createHook\nimport com.github.kyuubiran.ezxhelper.Log\nimport com.github.kyuubiran.ezxhelper.finders.MethodFinder\nimport de.robv.android.xposed.XC_MethodHook\nimport icu.nullptr.twifucker.afterMeasure\nimport icu.nullptr.twifucker.exceptions.CachedHookNotFound\nimport icu.nullptr.twifucker.forEach\nimport icu.nullptr.twifucker.hook.HookEntry.Companion.dexKit\nimport icu.nullptr.twifucker.hook.HookEntry.Companion.loadDexKit\nimport icu.nullptr.twifucker.hostAppLastUpdate\nimport icu.nullptr.twifucker.moduleLastModify\nimport icu.nullptr.twifucker.modulePrefs\nimport org.json.JSONArray\nimport org.json.JSONException\n\nobject FeatureSwitchHook : BaseHook() {\n    override val name: String\n        get() = "FeatureSwitchHook"\n\n    private const val HOOK_FEATURE_SWITCH_CLASS = "hook_feature_switch_class"\n    private const val HOOK_FEATURE_SWITCH_GET_BOOL_METHOD = "hook_feature_switch_get_bool_method"\n    private const val HOOK_FEATURE_SWITCH_GET_DOUBLE_METHOD =\n        "hook_feature_switch_get_double_method"\n    private const val HOOK_FEATURE_SWITCH_GET_FLOAT_METHOD = "hook_feature_switch_get_float_method"\n    private const val HOOK_FEATURE_SWITCH_GET_LONG_METHOD = "hook_feature_switch_get_long_method"\n    private const val HOOK_FEATURE_SWITCH_GET_INT_METHOD = "hook_feature_switch_get_int_method"\n\n    private lateinit var featureSwitchClassName: String\n    private lateinit var featureSwitchGetBoolMethodName: String\n    private lateinit var featureSwitchGetDoubleMethodName: String\n    private lateinit var featureSwitchGetFloatMethodName: String\n    private lateinit var featureSwitchGetLongMethodName: String\n    private lateinit var featureSwitchGetIntMethodName: String\n\n    private var featureSwitchHashMap = HashMap<String, Void?>()\n\n    override fun init() {\n        val featureSwitch = modulePrefs.getString("feature_switch", "[]")\n        val arr = try {\n            JSONArray(featureSwitch)\n        } catch (_: JSONException) {\n            JSONArray("[]")\n        }\n        if (arr.length() <= 0) return\n\n        try {\n            loadHookInfo()\n        } catch (t: Throwable) {\n            Log.e(t)\n            return\n        }\n\n        MethodFinder.fromClass(loadClass(featureSwitchClassName)).filterByName(\n            featureSwitchGetBoolMethodName\n        ).first().createHook {\n            afterMeasure(name) { param ->\n                val paramKV = getParamKeyValue(param)\n                arr.forEach { obj ->\n                    if (obj.optString("type", "boolean") != "boolean") return@forEach\n                    val replaceKey = obj.optString("key")\n                    val replaceValue = obj.optBoolean("value")\n                    if (paramKV.first == replaceKey) {\n                        logParamKeyResultOnce(paramKV.first, param.result, replaceValue)\n                        param.result = replaceValue\n                        return@forEach\n                    }\n                }\n            }\n        }\n        MethodFinder.fromClass(loadClass(featureSwitchClassName)).filterByName(\n            featureSwitchGetDoubleMethodName\n        ).first().createHook {\n            afterMeasure(name) { param ->\n                val paramKV = getParamKeyValue(param)\n                arr.forEach { obj ->\n                    if (obj.optString("type", "") != "decimal") return@forEach\n                    val replaceKey = obj.optString("key")\n                    val replaceValue = obj.optString("value")\n                    if (paramKV.first == replaceKey) {\n                        logParamKeyResultOnce(paramKV.first, param.result, replaceValue)\n                        param.result = replaceValue\n                        return@forEach\n                    }\n                }\n            }\n        }\n        MethodFinder.fromClass(loadClass(featureSwitchClassName)).filterByName(\n            featureSwitchGetFloatMethodName\n        ).first().createHook {\n            afterMeasure(name) { param ->\n                val paramKV = getParamKeyValue(param)\n                arr.forEach { obj ->\n                    if (obj.optString("type", "") != "decimal") return@forEach\n                    val replaceKey = obj.optString("key")\n                    val replaceValue = obj.optString("value")\n                    if (paramKV.first == replaceKey) {\n                        logParamKeyResultOnce(paramKV.first, param.result, replaceValue)\n                        param.result = replaceValue\n                        return@forEach\n                    }\n                }\n            }\n        }\n        MethodFinder.fromClass(loadClass(featureSwitchClassName)).filterByName(\n            featureSwitchGetLongMethodName\n        ).first().createHook {\n            afterMeasure(name) { param ->\n                val paramKV = getParamKeyValue(param)\n                arr.forEach { obj ->\n                    if (obj.optString("type", "") != "decimal") return@forEach\n                    val replaceKey = obj.optString("key")\n                    val replaceValue = obj.optString("value")\n                    if (paramKV.first == replaceKey) {\n                        logParamKeyResultOnce(paramKV.first, param.result, replaceValue)\n                        param.result = replaceValue\n                        return@forEach\n                    }\n                }\n            }\n        }\n        MethodFinder.fromClass(loadClass(featureSwitchClassName)).filterByName(\n            featureSwitchGetIntMethodName\n        ).first().createHook {\n            afterMeasure(name) { param ->\n                val paramKV = getParamKeyValue(param)\n                arr.forEach { obj ->\n                    if (obj.optString("type", "") != "decimal") return@forEach\n                    val replaceKey = obj.optString("key")\n                    val replaceValue = obj.optString("value")\n                    if (paramKV.first == replaceKey) {\n                        logParamKeyResultOnce(paramKV.first, param.result, replaceValue)\n                        param.result = replaceValue\n                        return@forEach\n                    }\n                }\n            }\n        }\n    }\n\n    private fun loadCachedHookInfo() {\n        featureSwitchClassName =\n            modulePrefs.getString(HOOK_FEATURE_SWITCH_CLASS, null) ?: throw CachedHookNotFound()\n        featureSwitchGetBoolMethodName =\n            modulePrefs.getString(HOOK_FEATURE_SWITCH_GET_BOOL_METHOD, null)\n                ?: throw CachedHookNotFound()\n        featureSwitchGetDoubleMethodName =\n            modulePrefs.getString(HOOK_FEATURE_SWITCH_GET_DOUBLE_METHOD, null)\n                ?: throw CachedHookNotFound()\n        featureSwitchGetFloatMethodName =\n            modulePrefs.getString(HOOK_FEATURE_SWITCH_GET_FLOAT_METHOD, null)\n                ?: throw CachedHookNotFound()\n        featureSwitchGetLongMethodName =\n            modulePrefs.getString(HOOK_FEATURE_SWITCH_GET_LONG_METHOD, null)\n                ?: throw CachedHookNotFound()\n        featureSwitchGetIntMethodName =\n            modulePrefs.getString(HOOK_FEATURE_SWITCH_GET_INT_METHOD, null)\n                ?: throw CachedHookNotFound()\n    }\n\n    private fun saveHookInfo() {\n        modulePrefs.let {\n            it.putString(HOOK_FEATURE_SWITCH_CLASS, featureSwitchClassName)\n            it.putString(HOOK_FEATURE_SWITCH_GET_BOOL_METHOD, featureSwitchGetBoolMethodName)\n            it.putString(HOOK_FEATURE_SWITCH_GET_DOUBLE_METHOD, featureSwitchGetDoubleMethodName)\n            it.putString(HOOK_FEATURE_SWITCH_GET_FLOAT_METHOD, featureSwitchGetFloatMethodName)\n            it.putString(HOOK_FEATURE_SWITCH_GET_LONG_METHOD, featureSwitchGetLongMethodName)\n            it.putString(HOOK_FEATURE_SWITCH_GET_INT_METHOD, featureSwitchGetIntMethodName)\n        }\n    }\n\n    private fun searchHook() {\n        val featureSwitchClass = dexKit.findMethodUsingString {\n            usingString = "^feature_switches_configs_crashlytics_enabled$"\n        }.firstOrNull()?.getMethodInstance(EzXHelper.classLoader)?.declaringClass\n            ?: throw ClassNotFoundException()\n\n        val featureSwitchGetBoolMethod = MethodFinder.fromClass(featureSwitchClass)\n            .filterByParamCount(2) // Ljava/lang/String;Z or Z;Ljava/lang/String;\n            .filterByReturnType(Boolean::class.java).first()\n        val featureSwitchGetDoubleMethod = MethodFinder.fromClass(featureSwitchClass)\n            .filterByParamCount(2) // Ljava/lang/String;D or D;Ljava/lang/String;\n            .filterByReturnType(Double::class.java).first()\n        val featureSwitchGetFloatMethod = MethodFinder.fromClass(featureSwitchClass)\n            .filterByParamCount(2) // Ljava/lang/String;F or F;Ljava/lang/String;\n            .filterByReturnType(Float::class.java).first()\n        val featureSwitchGetLongMethod = MethodFinder.fromClass(featureSwitchClass)\n            .filterByParamCount(2) // Ljava/lang/String;J or J;Ljava/lang/String;\n            .filterByReturnType(Long::class.java).first()\n        val featureSwitchGetIntMethod = MethodFinder.fromClass(featureSwitchClass)\n            .filterByParamCount(2) // Ljava/lang/String;I or I;Ljava/lang/String;\n            .filterByReturnType(Int::class.java).first()\n\n        featureSwitchClassName = featureSwitchClass.name\n        featureSwitchGetBoolMethodName = featureSwitchGetBoolMethod.name\n        featureSwitchGetDoubleMethodName = featureSwitchGetDoubleMethod.name\n        featureSwitchGetFloatMethodName = featureSwitchGetFloatMethod.name\n        featureSwitchGetLongMethodName = featureSwitchGetLongMethod.name\n        featureSwitchGetIntMethodName = featureSwitchGetIntMethod.name\n    }\n\n    private fun loadHookInfo() {\n        val hookFeatureSwitchLastUpdate = modulePrefs.getLong("hook_feature_switch_last_update", 0)\n\n        Log.d("hookFeatureSwitchLastUpdate: $hookFeatureSwitchLastUpdate, hostAppLastUpdate: $hostAppLastUpdate, moduleLastModify: $moduleLastModify")\n\n        val timeStart = System.currentTimeMillis()\n\n        if (hookFeatureSwitchLastUpdate > hostAppLastUpdate && hookFeatureSwitchLastUpdate > moduleLastModify) {\n            loadCachedHookInfo()\n            Log.d("Feature Switch Hook load time: ${System.currentTimeMillis() - timeStart} ms")\n        } else {\n            loadDexKit()\n            searchHook()\n            Log.d("Feature Switch Hook search time: ${System.currentTimeMillis() - timeStart} ms")\n            saveHookInfo()\n            modulePrefs.putLong("hook_feature_switch_last_update", System.currentTimeMillis())\n        }\n    }\n\n    private fun getParamKeyValue(param: XC_MethodHook.MethodHookParam): Pair<String, Any> {\n        return if (param.args[0].javaClass == String::class.java) {\n            param.args[0] as String to param.args[1]\n        } else {\n            param.args[1] as String to param.args[0]\n        }\n    }\n\n    private fun logParamKeyResultOnce(key: String, originalResult: Any, replacedResult: Any) {\n        if (featureSwitchHashMap.containsKey(key)) return\n        Log.d("Replace $key from $originalResult to $replacedResult")\n        featureSwitchHashMap[key] = null\n    }\n}'