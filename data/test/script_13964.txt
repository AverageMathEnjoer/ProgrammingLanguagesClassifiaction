b'// UVa10618 Tango Tango Insurrection\n// Rujia Liu\n// Tricky case: .RDLU\n// Answer: RLRLR (yes, you TURNED around!)\n#include<cstdio>\n#include<cstring>\n#include<cassert>\n\nconst int UP = 0;\nconst int LEFT = 1;\nconst int RIGHT = 2;\nconst int DOWN = 3;\n\nconst int maxn = 70 + 5;\n\n// d[i][a][b][s] means the minimal future energy when you already tapped i notes\n// your left foot at a, right foot at b, last foot is s\nint d[maxn][4][4][3];\n\n// if the optimal strategy is to move foot f(0~2) to position t, action=f*4+t\nint action[maxn][4][4][3]; \n\nchar seq[maxn], pos[256], footch[] = ".LR";\n\n// energy needed to move a foot FOR THE SECOND TIME, from a to ta\nint energy(int a, int ta) {\n  if(a == ta) return 3;\n  if(a + ta == 3) return 7; // across\n  return 5; // adjacent\n}\n\nint energy(int i, int a, int b, int s, int f, int t, int& ta, int& tb) {\n  ta = a; tb = b;\n  if(f == 1) ta = t;\n  else if(f == 2) tb = t;\n\n  // check target arrows\n  if(ta == tb) return -1;\n  if(ta == RIGHT && tb == LEFT) return -1;\n  if(a == RIGHT && tb != b) return -1; // you can\'t move you right foot before your left foot comes back\n  if(b == LEFT  && ta != a) return -1;\n\n  // compute energy\n  int e;\n  if(f == 0) e = 0; // no move\n  else if(f != s) e = 1; // alternative foot, low energy\n  else {\n    if(f == 1) e = energy(a, ta);\n    else e = energy(b, tb);\n  }\n  return e;\n}\n\n// update state (i,a,b,s). foot f is moved to t\nvoid update(int i, int a, int b, int s, int f, int t) {\n  int ta, tb;\n  int e = energy(i, a, b, s, f, t, ta, tb);\n  if(e < 0) return; // invalid\n\n  int cost = d[i+1][ta][tb][f] + e;\n  int& ans = d[i][a][b][s];\n  if(cost < ans) {\n    ans = cost;\n    action[i][a][b][s] = f * 4 + t;\n  }\n}\n\nint main() {\n  pos[\'U\'] = 0; pos[\'L\'] = 1; pos[\'R\'] = 2; pos[\'D\'] = 3;\n\n  while(scanf("%s", seq) == 1) {\n    if(seq[0] == \'#\') break;\n    int n = strlen(seq);\n    memset(d, 0, sizeof(d));\n    for(int i = n-1; i >= 0; i--)\n      for(int a = 0; a < 4; a++)\n        for(int b = 0; b < 4; b++) if(a != b)\n          for(int s = 0; s < 3; s++) {\n            d[i][a][b][s] = 10*n;\n            if(seq[i] == \'.\') {\n              update(i, a, b, s, 0, 0); // no move\n              for(int t = 0; t < 4; t++) {\n                update(i, a, b, s, 1, t); // move left foot\n                update(i, a, b, s, 2, t); // move right foot\n              }\n            } else {\n              update(i, a, b, s, 1, pos[seq[i]]); // move left foot\n              update(i, a, b, s, 2, pos[seq[i]]); // move right foot\n            }\n          }\n\n    // print solution\n    int a = LEFT, b = RIGHT, s = 0; // d[0][1][2][0] is out answer\n    for(int i = 0; i < n; i++) {\n      int f = action[i][a][b][s] / 4;\n      int t = action[i][a][b][s] % 4;\n      printf("%c", footch[f]);\n      s = f;\n      if(f == 1) a = t;\n      else if(f == 2) b = t;\n    }\n    printf("\\n");\n  }\n  return 0;\n}\n'