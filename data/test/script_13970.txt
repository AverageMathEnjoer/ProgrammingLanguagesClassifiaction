b'using System;\nusing System.Diagnostics;\nusing System.Threading;\n\nnamespace CS_SQLite3\n{\n  public partial class CSSQLite\n  {\n    /*\n    ** 2007 August 14\n    **\n    ** The author disclaims copyright to this source code.  In place of\n    ** a legal notice, here is a blessing:\n    **\n    **    May you do good and not evil.\n    **    May you find forgiveness for yourself and forgive others.\n    **    May you share freely, never taking more than you give.\n    **\n    *************************************************************************\n    ** This file contains the C functions that implement mutexes.\n    **\n    ** This file contains code that is common across all mutex implementations.\n    **\n    ** $Id: mutex.c,v 1.31 2009/07/16 18:21:18 drh Exp $\n    **\n    *************************************************************************\n    **  Included in SQLite3 port to C#-SQLite;  2008 Noah B Hart\n    **  C#-SQLite is an independent reimplementation of the SQLite software library\n    **\n    **  $Header$\n    *************************************************************************\n    */\n    //#include "sqliteInt.h"\n\n#if !SQLITE_MUTEX_OMIT\n/*\n** Initialize the mutex system.\n*/\nstatic int sqlite3MutexInit()\n{\nint rc = SQLITE_OK;\nif (  sqlite3GlobalConfig.bCoreMutex   )\n{\nif (  sqlite3GlobalConfig.mutex.xMutexAlloc != null )\n{\n/* If the xMutexAlloc method has not been set, then the user did not\n** install a mutex implementation via sqlite3_config() prior to\n** sqlite3_initialize() being called. This block copies pointers to\n** the default implementation into the sqlite3Config structure.\n**\n*/\nsqlite3_mutex_methods p = sqlite3DefaultMutex();\nsqlite3_mutex_methods pTo = sqlite3GlobalConfig.mutex;\n\n memcpy(pTo, pFrom, offsetof(sqlite3_mutex_methods, xMutexAlloc));\n      memcpy(&pTo->xMutexFree, &pFrom->xMutexFree,\n             sizeof(*pTo) - offsetof(sqlite3_mutex_methods, xMutexFree));\n      pTo->xMutexAlloc = pFrom->xMutexAlloc;\n}\n    rc =  sqlite3GlobalConfig.mutex.xMutexInit();\n}\n\nreturn rc;\n}\n\n/*\n** Shutdown the mutex system. This call frees resources allocated by\n** sqlite3MutexInit().\n*/\nstatic int sqlite3MutexEnd()\n{\nint rc = SQLITE_OK;\nif( sqlite3GlobalConfig.mutex.xMutexEnd ){\nrc = sqlite3GlobalConfig.mutex.xMutexEnd();\n}\nreturn rc;\n}\n\n/*\n** Retrieve a pointer to a static mutex or allocate a new dynamic one.\n*/\nstatic sqlite3_mutex sqlite3_mutex_alloc( int id )\n{\n#if !SQLITE_OMIT_AUTOINIT\nif ( sqlite3_initialize() != 0 ) return null;\n#endif\nreturn  sqlite3GlobalConfig.mutex.xMutexAlloc( id );\n}\n\nstatic sqlite3_mutex sqlite3MutexAlloc( int id )\n{\nif ( ! sqlite3GlobalConfig.bCoreMutex   )\n{\nreturn null;\n}\nreturn  sqlite3GlobalConfig.mutex.xMutexAlloc( id );\n}\n\n/*\n** Free a dynamic mutex.\n*/\nstatic void sqlite3_mutex_free( ref sqlite3_mutex p )\n{\nif ( p != null )\n{\nsqlite3GlobalConfig.mutex.xMutexFree( p );\n}\n}\n\n/*\n** Obtain the mutex p. If some other thread already has the mutex, block\n** until it can be obtained.\n*/\nstatic void sqlite3_mutex_enter( sqlite3_mutex p )\n{\nif ( p != null )\n{\nsqlite3GlobalConfig.mutex.xMutexEnter( p );\n}\n}\n\n/*\n** Obtain the mutex p. If successful, return SQLITE_OK. Otherwise, if another\n** thread holds the mutex and it cannot be obtained, return SQLITE_BUSY.\n*/\nstatic int sqlite3_mutex_try( sqlite3_mutex p )\n{\nint rc = SQLITE_OK;\nif ( p != null )\n{\nreturn  sqlite3GlobalConfig.mutex.xMutexTry( p );\n}\nreturn rc;\n}\n\n/*\n** The sqlite3_mutex_leave() routine exits a mutex that was previously\n** entered by the same thread.  The behavior is undefined if the mutex\n** is not currently entered. If a NULL pointer is passed as an argument\n** this function is a no-op.\n*/\nstatic void sqlite3_mutex_leave( sqlite3_mutex p )\n{\nif ( p != null )\n{\nsqlite3GlobalConfig.mutex.xMutexLeave( p );\n}\n}\n\n#if !NDEBUG\n/*\n** The sqlite3_mutex_held() and sqlite3_mutex_notheld() routine are\n** intended for use inside Debug.Assert() statements.\n*/\nstatic bool sqlite3_mutex_held( sqlite3_mutex p )\n{\nreturn ( p == null ||  sqlite3GlobalConfig.mutex.xMutexHeld( p ) != 0 ) ;\n}\nstatic bool sqlite3_mutex_notheld( sqlite3_mutex p )\n{\nreturn ( p == null ||  sqlite3GlobalConfig.mutex.xMutexNotheld( p ) != 0 ) ;\n}\n#endif\n\n#endif //* SQLITE_OMIT_MUTEX */\n  }\n}\n'