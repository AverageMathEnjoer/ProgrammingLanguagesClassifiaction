b'/*\n    SPDX-FileCopyrightText: 2019 David Faure <david.faure@kdab.com>\n\n    SPDX-License-Identifier: LGPL-2.1-or-later\n*/\n\n#include "parser.h"\n\n#include "analyze/suppressions.h"\n\n#include <QCommandLineParser>\n#include <QCoreApplication>\n#include <QDebug>\n\nint main(int argc, char** argv)\n{\n    QCoreApplication app(argc, argv);\n\n    QCommandLineOption stopAfterOption(\n        QStringLiteral("stop-after"),\n        QStringLiteral("stop parsing after the given stage, possible values are: Summary, BottomUp, SizeHistogram, "\n                       "TopDownAndCallerCallee, Finished"),\n        QStringLiteral("stage"), QStringLiteral("Finished"));\n    QCommandLineParser commandLineParser;\n    commandLineParser.addOption(stopAfterOption);\n    commandLineParser.addPositionalArgument(QStringLiteral("file"), QStringLiteral("heaptrack data files to parse"));\n    commandLineParser.addHelpOption();\n\n    commandLineParser.process(app);\n\n    const auto files = commandLineParser.positionalArguments();\n    if (files.isEmpty())\n        return 1;\n\n    qRegisterMetaType<CallerCalleeResults>();\n    qRegisterMetaType<TreeData>();\n\n    Parser parser;\n    QObject::connect(&parser, &Parser::finished,\n                     &app, &QCoreApplication::quit);\n    QObject::connect(&parser, &Parser::failedToOpen, &app, [&](const QString& path) {\n        qWarning() << "failed to open" << path;\n        app.exit(1);\n    });\n\n    const auto stopAfter = [&]() {\n        const auto str = commandLineParser.value(stopAfterOption);\n        if (str == QLatin1String("Summary")) {\n            return Parser::StopAfter::Summary;\n        } else if (str == QLatin1String("BottomUp")) {\n            return Parser::StopAfter::BottomUp;\n        } else if (str == QLatin1String("SizeHistogram")) {\n            return Parser::StopAfter::SizeHistogram;\n        } else if (str == QLatin1String("TopDownAndCallerCallee")) {\n            return Parser::StopAfter::TopDownAndCallerCallee;\n        } else if (str == QLatin1String("Finished")) {\n            return Parser::StopAfter::Finished;\n        }\n\n        qWarning() << "unsupported stopAfter stage:" << str;\n        exit(1);\n    }();\n\n    FilterParameters params;\n    const auto suppressionsFile = files.value(2);\n    if (!suppressionsFile.isEmpty()) {\n        bool parsedOk = false;\n        params.suppressions = parseSuppressions(suppressionsFile.toStdString(), &parsedOk);\n        if (!parsedOk)\n            return 1;\n    }\n\n    parser.parse(files.value(0), files.value(1), params, stopAfter);\n\n    return app.exec();\n}\n'