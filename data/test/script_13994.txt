b'package com.github.razir.progressbutton\n\nimport android.animation.Animator\nimport android.animation.ArgbEvaluator\nimport android.animation.ObjectAnimator\nimport android.graphics.Color\nimport android.text.SpannableString\nimport android.widget.TextView\nimport androidx.core.content.ContextCompat\nimport androidx.core.graphics.ColorUtils\nimport kotlin.collections.ArrayList\n\n/**\n * adds fade in/fade out animations on drawable/progress showing\n *\n * example: button.attachTextChangeAnimator { fadeInMills = 200 }\n *\n * @param params config for animations\n */\n@JvmOverloads\nfun TextView.attachTextChangeAnimator(params: TextChangeAnimatorParams.() -> Unit = {}) {\n    val paramValues = TextChangeAnimatorParams()\n    paramValues.params()\n    attachTextChangeAnimator(paramValues)\n}\n\n/**\n * adds fade in/fade out animations on drawable/progress showing\n * @param params config for animations\n */\nfun TextView.attachTextChangeAnimator(params: TextChangeAnimatorParams?) {\n    val animParams = params?.let { params } ?: TextChangeAnimatorParams()\n    if (animParams.useCurrentTextColor) {\n        animParams.textColorList = textColors\n    } else {\n        if (animParams.textColorRes != null) {\n            animParams.textColor = ContextCompat.getColor(context, animParams.textColorRes!!)\n        }\n    }\n    addTextAnimationAttachViewListener()\n    attachedViews[this] = params\n}\n\n/**\n * remove support fade in/fade out animations on drawable/progress showing\n */\nfun TextView.detachTextChangeAnimator() {\n    if (attachedViews.containsKey(this)) {\n        cancelAnimations()\n        attachedViews.remove(this)\n        removeTextAnimationAttachViewListener()\n    }\n}\n\n/**\n * checks if animations handler is currently active for the given button\n */\nfun TextView.isAnimatorAttached(): Boolean {\n    return attachedViews.containsKey(this)\n}\n\ninternal fun TextView.animateTextChange(newText: String?) {\n    animateTextChange(newText?.let { SpannableString(newText) })\n}\n\ninternal fun TextView.animateTextChange(newText: SpannableString?) {\n    cancelAnimations()\n    val params = attachedViews[this]!!\n    val textColor = getAnimateTextColor()\n\n    val fadeInAnim = ObjectAnimator.ofInt(this, "textColor", ColorUtils.setAlphaComponent(textColor, 0), textColor)\n        .apply {\n            duration = params.fadeInMills\n            setEvaluator(ArgbEvaluator())\n            addListener(object : Animator.AnimatorListener {\n                override fun onAnimationRepeat(animation: Animator?) {\n                }\n\n                override fun onAnimationEnd(animation: Animator) {\n                    cleaAnimator(animation)\n                    resetColor()\n                }\n\n                override fun onAnimationCancel(animation: Animator) {\n                    resetColor()\n                    cleaAnimator(animation)\n                }\n\n                override fun onAnimationStart(animation: Animator) {\n                    addAnimator(animation)\n                }\n            })\n            start()\n        }\n\n    val fadeOutAnim = ObjectAnimator.ofInt(this, "textColor", textColor, ColorUtils.setAlphaComponent(textColor, 0))\n        .apply {\n            duration = params.fadeOutMills\n            setEvaluator(ArgbEvaluator())\n            addListener(object : Animator.AnimatorListener {\n                override fun onAnimationRepeat(animation: Animator) {\n                }\n\n                override fun onAnimationEnd(animation: Animator) {\n                    text = newText\n                    fadeInAnim.start()\n                    cleaAnimator(animation)\n                }\n\n                override fun onAnimationCancel(animation: Animator) {\n                    text = newText\n                    resetColor()\n                    cleaAnimator(animation)\n                }\n\n                override fun onAnimationStart(animation: Animator) {\n                    addAnimator(animation)\n                }\n            })\n        }\n    fadeOutAnim.start()\n}\n\nprivate fun TextView.addAnimator(animator: Animator) {\n    if (activeAnimations.containsKey(this)) {\n        val animations = activeAnimations[this]\n        animations?.add(animator)\n    } else {\n        activeAnimations[this] = mutableListOf(animator)\n    }\n}\n\nprivate fun TextView.cleaAnimator(animator: Animator) {\n    if (activeAnimations.containsKey(this)) {\n        val animations = activeAnimations[this]!!\n        animations.remove(animator)\n        if (animations.isEmpty()) {\n            activeAnimations.remove(this)\n        }\n    }\n}\n\nprivate fun TextView.resetColor() {\n    if (isAnimatorAttached()) {\n        val params = attachedViews[this]!!\n        params.textColorList?.let {\n            setTextColor(it)\n        } ?: run {\n            setTextColor(params.textColor)\n        }\n    }\n}\n\ninternal fun TextView.cancelAnimations() {\n    if (activeAnimations.containsKey(this)) {\n        val animations = activeAnimations[this]!!\n        val copy = ArrayList<Animator>(animations)\n        copy.forEach {\n            it.cancel()\n        }\n        activeAnimations.remove(this)\n    }\n}\n\nprivate fun TextView.getAnimateTextColor(): Int {\n    val params = attachedViews[this]!!\n    return when {\n        params.textColorList != null -> {\n            val viewState = this.drawableState\n            params.textColorList!!.getColorForState(viewState, Color.BLACK)\n        }\n        else -> {\n            params.textColor\n        }\n    }\n}\n\n\n'