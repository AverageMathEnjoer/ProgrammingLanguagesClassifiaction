b"{-# LANGUAGE CPP #-}\n-- |\n-- Copyright  : (c) Ivan Perez and Manuel Baerenz, 2016\n-- License    : BSD3\n-- Maintainer : ivan.perez@keera.co.uk\n--\n-- This module combines the wrapping and running functions for the 'Reader',\n-- 'Writer' and 'State' monad layers in a single layer.\n--\n-- It is based on the _strict_ 'RWS' monad 'Control.Monad.Trans.RWS.Strict',\n-- so when combining it with other modules such as @mtl@'s, the strict version\n-- has to be included, i.e. 'Control.Monad.RWS.Strict' instead of\n-- 'Control.Monad.RWS' or 'Control.Monad.RWS.Lazy'.\nmodule Control.Monad.Trans.MSF.RWS\n    ( module Control.Monad.Trans.MSF.RWS\n    , module Control.Monad.Trans.RWS.Strict\n    )\n  where\n\n-- External imports\nimport Control.Monad.Trans.RWS.Strict hiding (liftCallCC, liftCatch)\n\n#if !MIN_VERSION_base(4,8,0)\nimport Data.Functor ((<$>))\nimport Data.Monoid  (Monoid)\n#endif\n\n-- Internal imports\nimport Data.MonadicStreamFunction (MSF, morphGS)\n\n-- * 'RWS' (Reader-Writer-State) monad\n\n-- | Wrap an 'MSF' with explicit state variables in 'RWST' monad.\nrwsS :: (Functor m, Monad m, Monoid w)\n     => MSF m (r, s, a) (w, s, b)\n     -> MSF (RWST r w s m) a b\nrwsS = morphGS $ \\f a -> RWST $ \\r s -> (\\((w, s', b), c) -> ((b, c), s', w))\n   <$> f (r, s, a)\n\n-- | Run the 'RWST' layer by making the state variables explicit.\nrunRWSS :: (Functor m, Monad m, Monoid w)\n        => MSF (RWST r w s m) a b\n        -> MSF m (r, s, a) (w, s, b)\nrunRWSS = morphGS $ \\f (r, s, a) -> (\\((b, c), s', w) -> ((w, s', b), c))\n      <$> runRWST (f a) r s\n"