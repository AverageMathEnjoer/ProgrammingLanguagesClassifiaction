b'package co.joebirch.composeplayground.material\n\nimport androidx.compose.foundation.ExperimentalFoundationApi\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.text.BasicTextField\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.text.TextStyle\nimport androidx.compose.ui.text.input.PasswordVisualTransformation\nimport androidx.compose.ui.text.input.TextFieldValue\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport co.joebirch.composeplayground.ComposableLayout\n\n@ExperimentalFoundationApi\nobject TextFieldView : ComposableLayout {\n\n    @Composable\n    override fun build() {\n        Column(\n            modifier = Modifier.fillMaxSize(),\n            verticalArrangement = Arrangement.SpaceEvenly,\n            horizontalAlignment = Alignment.CenterHorizontally\n        ) {\n            MinimalTextFieldComponent()\n            StyledTextFieldComponent()\n            ImeActionTextFieldComponent()\n            KeyboardTypeTextFieldComponent()\n        }\n    }\n\n    @Composable\n    fun MinimalTextFieldComponent() {\n        val state = remember { mutableStateOf(TextFieldValue(text = "Hello")) }\n        BasicTextField(\n            value = state.value, onValueChange = {\n                state.value = it\n            },\n            modifier = Modifier.padding(16.dp).fillMaxWidth()\n        )\n    }\n\n    @Composable\n    fun StyledTextFieldComponent() {\n        val state = remember { mutableStateOf(TextFieldValue(text = "Hello")) }\n        BasicTextField(\n            value = state.value, onValueChange = {\n                state.value = it\n            },\n            modifier = Modifier.padding(16.dp).fillMaxWidth(),\n            textStyle = TextStyle(fontSize = 20.sp)\n        )\n    }\n\n    @Composable\n    fun ImeActionTextFieldComponent() {\n        val state = remember { mutableStateOf(TextFieldValue(text = "Hello")) }\n        BasicTextField(\n            value = state.value, onValueChange = {\n                state.value = it\n            },\n            modifier = Modifier.padding(16.dp).fillMaxWidth()\n        )\n    }\n\n    @Composable\n    fun KeyboardTypeTextFieldComponent() {\n        val state = remember { mutableStateOf(TextFieldValue(text = "Hello")) }\n        BasicTextField(\n            value = state.value,\n            onValueChange = {\n                state.value = it\n            },\n            modifier = Modifier.padding(16.dp).fillMaxWidth(),\n            visualTransformation = PasswordVisualTransformation()\n        )\n    }\n}'