b'package lyons.tools;\n\nimport java.math.BigDecimal;\n\n/**  \n * \xd3\xc9\xd3\xdaJava\xb5\xc4\xbc\xf2\xb5\xa5\xc0\xe0\xd0\xcd\xb2\xbb\xc4\xdc\xb9\xbb\xbe\xab\xc8\xb7\xb5\xc4\xb6\xd4\xb8\xa1\xb5\xe3\xca\xfd\xbd\xf8\xd0\xd0\xd4\xcb\xcb\xe3\xa3\xac\xd5\xe2\xb8\xf6\xb9\xa4\xbe\xdf\xc0\xe0\xcc\xe1\xb9\xa9\xbe\xab  \n * \xc8\xb7\xb5\xc4\xb8\xa1\xb5\xe3\xca\xfd\xd4\xcb\xcb\xe3\xa3\xac\xb0\xfc\xc0\xa8\xbc\xd3\xbc\xf5\xb3\xcb\xb3\xfd\xba\xcd\xcb\xc4\xc9\xe1\xce\xe5\xc8\xeb.\n * \n * \xd7\xa2\xd2\xe2\xa3\xba\xb4\xcb\xb4\xfa\xc2\xeb\xbd\xab\xbc\xd3\xbc\xf5\xb3\xcb\xb3\xfd\xcb\xc4\xc9\xe1\xce\xe5\xc8\xeb\xb7\xbd\xb7\xa8\xd2\xd1\xca\xb5\xcf\xd6\xa3\xac\xb5\xab\xb1\xbe\xcf\xee\xc4\xbf\xd6\xd0\xb2\xa2\xce\xb4\xc8\xab\xb2\xbf\xca\xb9\xd3\xc3.\n * @author lyons(zhanglei)\n */  \n\npublic class Arith\n{\n\tprivate static final int DEF_DIV_SCALE = 2; //\xc4\xac\xc8\xcf\xb3\xfd\xb7\xa8\xd4\xcb\xcb\xe3\xbe\xab\xb6\xc8\n\tprivate Arith(){} \n\t\n\t/**  \n\t* \xcc\xe1\xb9\xa9\xbe\xab\xc8\xb7\xb5\xc4\xbc\xd3\xb7\xa8\xd4\xcb\xcb\xe3\xa1\xa3  \n\t* @param v1 \xb1\xbb\xbc\xd3\xca\xfd  \n\t* @param v2 \xbc\xd3\xca\xfd  \n\t* @return \xc1\xbd\xb8\xf6\xb2\xce\xca\xfd\xb5\xc4\xba\xcd  \n\t*/  \n\tpublic static double add(double v1,double v2)\n\t{   \n\t\tBigDecimal b1 = new BigDecimal(Double.toString(v1));   \n\t\tBigDecimal b2 = new BigDecimal(Double.toString(v2));   \n\t\treturn b1.add(b2).doubleValue();   \n\t} \n\t\n\t/**  \n\t* \xcc\xe1\xb9\xa9\xbe\xab\xc8\xb7\xb5\xc4\xbc\xf5\xb7\xa8\xd4\xcb\xcb\xe3\xa1\xa3  \n\t* @param v1 \xb1\xbb\xbc\xf5\xca\xfd  \n\t* @param v2 \xbc\xf5\xca\xfd  \n\t* @return \xc1\xbd\xb8\xf6\xb2\xce\xca\xfd\xb5\xc4\xb2\xee  \n\t*/  \n\tpublic static double sub(double v1,double v2)\n\t{   \n\t\tBigDecimal b1 = new BigDecimal(Double.toString(v1));   \n\t\tBigDecimal b2 = new BigDecimal(Double.toString(v2));   \n\t\treturn b1.subtract(b2).doubleValue();   \n\t}   \n\t\n\t/**  \n\t* \xcc\xe1\xb9\xa9\xbe\xab\xc8\xb7\xb5\xc4\xb3\xcb\xb7\xa8\xd4\xcb\xcb\xe3\xa1\xa3  \n\t* @param v1 \xb1\xbb\xb3\xcb\xca\xfd  \n\t* @param v2 \xb3\xcb\xca\xfd  \n\t* @return \xc1\xbd\xb8\xf6\xb2\xce\xca\xfd\xb5\xc4\xbb\xfd  \n\t*/  \n\tpublic static double mul(double v1,double v2)\n\t{   \n\t\tBigDecimal b1 = new BigDecimal(Double.toString(v1));   \n\t\tBigDecimal b2 = new BigDecimal(Double.toString(v2));   \n\t\treturn b1.multiply(b2).doubleValue();   \n\t}   \n\t\n\t/**  \n\t* \xcc\xe1\xb9\xa9\xa3\xa8\xcf\xe0\xb6\xd4\xa3\xa9\xbe\xab\xc8\xb7\xb5\xc4\xb3\xfd\xb7\xa8\xd4\xcb\xcb\xe3\xa3\xac\xb5\xb1\xb7\xa2\xc9\xfa\xb3\xfd\xb2\xbb\xbe\xa1\xb5\xc4\xc7\xe9\xbf\xf6\xca\xb1\xa3\xac\xbe\xab\xc8\xb7\xb5\xbd  \n\t* \xd0\xa1\xca\xfd\xb5\xe3\xd2\xd4\xba\xf32\xce\xbb\xa3\xac\xd2\xd4\xba\xf3\xb5\xc4\xca\xfd\xd7\xd6\xcb\xc4\xc9\xe1\xce\xe5\xc8\xeb\xa1\xa3  \n\t* @param v1 \xb1\xbb\xb3\xfd\xca\xfd  \n\t* @param v2 \xb3\xfd\xca\xfd  \n\t* @return \xc1\xbd\xb8\xf6\xb2\xce\xca\xfd\xb5\xc4\xc9\xcc  \n\t*/  \n\tpublic static double div(double v1,double v2)\n\t{   \n\t\treturn div(v1,v2,DEF_DIV_SCALE);   \n\t}   \n\t\n\t/**  \n\t* \xcc\xe1\xb9\xa9\xa3\xa8\xcf\xe0\xb6\xd4\xa3\xa9\xbe\xab\xc8\xb7\xb5\xc4\xb3\xfd\xb7\xa8\xd4\xcb\xcb\xe3\xa1\xa3\xb5\xb1\xb7\xa2\xc9\xfa\xb3\xfd\xb2\xbb\xbe\xa1\xb5\xc4\xc7\xe9\xbf\xf6\xca\xb1\xa3\xac\xd3\xc9scale\xb2\xce\xca\xfd\xd6\xb8  \n\t* \xb6\xa8\xbe\xab\xb6\xc8\xa3\xac\xd2\xd4\xba\xf3\xb5\xc4\xca\xfd\xd7\xd6\xcb\xc4\xc9\xe1\xce\xe5\xc8\xeb\xa1\xa3  \n\t* @param v1 \xb1\xbb\xb3\xfd\xca\xfd  \n\t* @param v2 \xb3\xfd\xca\xfd  \n\t* @param scale \xb1\xed\xca\xbe\xb1\xed\xca\xbe\xd0\xe8\xd2\xaa\xbe\xab\xc8\xb7\xb5\xbd\xd0\xa1\xca\xfd\xb5\xe3\xd2\xd4\xba\xf3\xbc\xb8\xce\xbb\xa1\xa3  \n\t* @return \xc1\xbd\xb8\xf6\xb2\xce\xca\xfd\xb5\xc4\xc9\xcc  \n\t*/  \n\tpublic static double div(double v1,double v2,int scale)\n\t{   \n\t\tif(scale<0)\n\t\t{   \n\t\t\tthrow new IllegalArgumentException(   \n\t\t\t"The scale must be a positive integer or zero");   \n\t\t}   \n\t\tBigDecimal b1 = new BigDecimal(Double.toString(v1));   \n\t\tBigDecimal b2 = new BigDecimal(Double.toString(v2));   \n\t\treturn b1.divide(b2,scale,BigDecimal.ROUND_HALF_UP).doubleValue(); //BigDecimal.ROUND_HALF_UP \xcf\xf2\xa1\xb0\xd7\xee\xbd\xd3\xbd\xfc\xb5\xc4\xa1\xb1\xca\xfd\xd7\xd6\xc9\xe1\xc8\xeb\xa3\xac\xc8\xe7\xb9\xfb\xd3\xeb\xc1\xbd\xb8\xf6\xcf\xe0\xc1\xda\xca\xfd\xd7\xd6\xb5\xc4\xbe\xe0\xc0\xeb\xcf\xe0\xb5\xc8\xa3\xac\xd4\xf2\xce\xaa\xcf\xf2\xc9\xcf\xc9\xe1\xc8\xeb\xb5\xc4\xc9\xe1\xc8\xeb\xc4\xa3\xca\xbd\xa1\xa3 \n\t}   \n\t\n\t/**  \n\t* \xcc\xe1\xb9\xa9\xbe\xab\xc8\xb7\xb5\xc4\xd0\xa1\xca\xfd\xce\xbb\xcb\xc4\xc9\xe1\xce\xe5\xc8\xeb\xb4\xa6\xc0\xed\xa1\xa3  \n\t* @param v \xd0\xe8\xd2\xaa\xcb\xc4\xc9\xe1\xce\xe5\xc8\xeb\xb5\xc4\xca\xfd\xd7\xd6  \n\t* @param scale \xd0\xa1\xca\xfd\xb5\xe3\xba\xf3\xb1\xa3\xc1\xf4\xbc\xb8\xce\xbb  \n\t* @return \xcb\xc4\xc9\xe1\xce\xe5\xc8\xeb\xba\xf3\xb5\xc4\xbd\xe1\xb9\xfb  \n\t*/  \n\tpublic static double round(double v,int scale)\n\t{   \n\t\tif(scale<0)\n\t\t{   \n\t\t\tthrow new IllegalArgumentException("The scale must be a positive integer or zero");   \n\t\t}   \n\t\tBigDecimal b = new BigDecimal(Double.toString(v));   \n\t\tBigDecimal one = new BigDecimal("1");   \n\t\treturn b.divide(one,scale,BigDecimal.ROUND_HALF_UP).doubleValue();   \n\t}   \n}\n'