b'\xef\xbb\xbf//\n// NGmp.Math.Prime.Generator.PrimeGeneratorBase.cs - Abstract Prime Generator\n//\n// Authors:\n//\tBen Maurer\n//\n// Copyright (c) 2003 Ben Maurer. All rights reserved\n//\n\n//\n// Copyright (C) 2004 Novell, Inc (http://www.novell.com)\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// "Software"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n// \n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\nusing System;\n\nnamespace Mono.Math.Prime.Generator {\n\n#if INSIDE_CORLIB\n\tinternal\n#else\n\tpublic\n#endif\n\tabstract class PrimeGeneratorBase {\n\n\t\tpublic virtual ConfidenceFactor Confidence {\n\t\t\tget {\n#if DEBUG\n\t\t\t\treturn ConfidenceFactor.ExtraLow;\n#else\n\t\t\t\treturn ConfidenceFactor.Medium;\n#endif\n\t\t\t}\n\t\t}\n\n\t\tpublic virtual Prime.PrimalityTest PrimalityTest {\n\t\t\tget {\n\t\t\t\treturn new Prime.PrimalityTest(PrimalityTests.RabinMillerTest);\n\t\t\t}\n\t\t}\n\n\t\tpublic virtual int TrialDivisionBounds {\n\t\t\tget { return 4000; }\n\t\t}\n\n\t\t/// <summary>\n\t\t/// Performs primality tests on bi, assumes trial division has been done.\n\t\t/// </summary>\n\t\t/// <param name="bi">A BigInteger that has been subjected to and passed trial division</param>\n\t\t/// <returns>False if bi is composite, true if it may be prime.</returns>\n\t\t/// <remarks>The speed of this method is dependent on Confidence</remarks>\n\t\tprotected bool PostTrialDivisionTests(BigInteger bi) {\n\t\t\treturn PrimalityTest(bi, this.Confidence);\n\t\t}\n\n\t\tpublic abstract BigInteger GenerateNewPrime(int bits);\n\t}\n}'