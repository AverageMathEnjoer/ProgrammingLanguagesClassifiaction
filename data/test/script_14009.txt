b'\xef\xbb\xbf//  Copyright 2019 Google Inc. All Rights Reserved.\n//\n//  Licensed under the Apache License, Version 2.0 (the "License");\n//  you may not use this file except in compliance with the License.\n//  You may obtain a copy of the License at\n//\n//  http://www.apache.org/licenses/LICENSE-2.0\n//\n//  Unless required by applicable law or agreed to in writing, software\n//  distributed under the License is distributed on an "AS IS" BASIS,\n//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n//  See the License for the specific language governing permissions and\n//  limitations under the License.\n\nusing System;\nusing System.Collections.Generic;\n\nnamespace Rubeus.Ndr.Marshal\n{\n    internal sealed class NdrDeferralStackEntry : IDisposable\n    {\n        private readonly Stack<List<Action>> _stack;\n        private readonly List<Action> _list;\n\n        void IDisposable.Dispose()\n        {\n            if (_stack == null)\n            {\n                return;\n            }\n\n            var list = _stack.Pop();\n            System.Diagnostics.Debug.Assert(list == _list);\n            System.Diagnostics.Debug.WriteLine($"Flushing {list.Count} queued entries");\n\n            foreach (var a in list)\n            {\n                a();\n            }\n        }\n\n        public NdrDeferralStackEntry(Stack<List<Action>> stack)\n        {\n            _stack = stack;\n            _list = stack?.Peek();\n        }\n    }\n\n    internal class NdrDeferralStack\n    {\n        private readonly Stack<List<Action>> _stack;\n\n        public NdrDeferralStack()\n        {\n            _stack = new Stack<List<Action>>();\n        }\n\n        private NdrDeferralStackEntry Push(bool allocate)\n        {\n            if (allocate)\n            {\n                System.Diagnostics.Debug.WriteLine($"Pushing new queue entry Empty: {Empty}");\n                _stack.Push(new List<Action>());\n                return new NdrDeferralStackEntry(_stack);\n            }\n            return null;\n        }\n\n        public NdrDeferralStackEntry Push()\n        {\n            return Push(Empty);\n        }\n\n        public void Add(Action a)\n        {\n            Action deferral = () =>\n            {\n                using (var queue = Push(true))\n                {\n                    a();\n                }\n            };\n            System.Diagnostics.Debug.Assert(!Empty);\n            System.Diagnostics.Debug.WriteLine("Adding deferred entry");\n            _stack.Peek().Add(deferral);\n        }\n\n        public bool Empty => _stack.Count == 0;\n    }\n}\n'