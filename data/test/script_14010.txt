b'{-# LANGUAGE CPP                 #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n-- |\n-- Copyright  : (c) Ivan Perez, 2017-2023\n-- License    : BSD3\n-- Maintainer : ivan.perez@keera.co.uk\n--\n-- QuickCheck generators for input streams.\n--\n-- Random stream generation can be customized usin three parameters:\n--\n-- - The distribution for the random time deltas (\'Distribution\').\n-- - The maximum and minimum bounds for the time deltas (\'Range\').\n-- - The maximum stream length (\'Length\').\n--\n-- The main function to generate streams is \'generateStream\'. The specific time\n-- deltas can be customized further using \'generateStreamWith\'. Some helper\n-- functions are provided to facilitate testing.\nmodule FRP.Dunai.QuickCheck\n    (\n      -- * Random stream generation\n      generateStream\n    , generateStreamWith\n\n      -- ** Parameters used to generate random input streams\n    , Distribution(..)\n    , Range\n    , Length\n\n      -- ** Helpers for common cases\n    , uniDistStream\n    , uniDistStreamMaxDT\n    , fixedDelayStream\n    , fixedDelayStreamWith\n    )\n  where\n\n-- External imports\n#if !MIN_VERSION_base(4,8,0)\nimport Control.Applicative (pure, (<$>))\n#endif\n\nimport Data.Random.Normal  (normal\')\nimport Test.QuickCheck     (Arbitrary, arbitrary, getPositive)\nimport Test.QuickCheck.Gen (Gen (MkGen), choose, suchThat)\n\n-- Internal imports\nimport FRP.Dunai.Stream (DTime, SignalSampleStream, groupDeltas)\n\n-- * Random stream generation\n\n-- | Generate random stream.\ngenerateStream :: Arbitrary a\n               => Distribution\n               -> Range\n               -> Length\n               -> Gen (SignalSampleStream a)\ngenerateStream = generateStreamWith (\\_ _ -> arbitrary)\n\n-- | Generate random stream, parameterized by the value generator.\ngenerateStreamWith :: (Int -> DTime -> Gen a)\n                   -> Distribution\n                   -> Range\n                   -> Length\n                   -> Gen (SignalSampleStream a)\ngenerateStreamWith arb DistConstant range len =\n  generateConstantStream arb =<< generateStreamLenDT range len\ngenerateStreamWith arb dist (m, n) len = do\n    ds <- generateDeltas len\n    let l = length ds\n    let f n = arb n (ds !! (n - 1))\n    xs <- vectorOfWith l f\n\n    x <- arb 0 0\n    return $ groupDeltas (x:xs) ds\n\n  where\n\n    deltaF :: Gen DTime\n    deltaF = case dist of\n               DistRandom -> generateDelta m n\n               DistNormal (avg, stddev) -> generateDSNormal avg stddev m n\n               _ -> error "dunai-test: generateStreamWith"\n\n    generateDeltas :: Length -> Gen [DTime]\n    generateDeltas Nothing              = do l <- arbitrary\n                                             vectorOfWith l (\\_ -> deltaF)\n    generateDeltas (Just (Left l))      = vectorOfWith l (\\_ -> deltaF)\n    generateDeltas (Just (Right maxds)) = timeStampsUntilWith deltaF maxds\n\n-- | Generate arbitrary stream with fixed length and constant delta.\ngenerateConstantStream :: (Int -> DTime -> Gen a)\n                       -> (DTime, Int)\n                       -> Gen (SignalSampleStream a)\ngenerateConstantStream arb (x, length) = do\n    ys <- vectorOfWith length (`arb` x)\n    return $ groupDeltas ys ds\n  where\n    ds = repeat x\n\n-- | Generate arbitrary stream\ngenerateStreamLenDT :: (Maybe DTime, Maybe DTime)\n                    -> Maybe (Either Int DTime)\n                    -> Gen (DTime, Int)\ngenerateStreamLenDT range len = do\n  x <- uncurry generateDelta range\n  l <- case len of\n         Nothing         -> getPositive <$> arbitrary\n         Just (Left l)   -> pure l\n         Just (Right ds) -> pure (floor (ds / x))\n  return (x, l)\n\n-- ** Time delta generation\n\n-- | Generate one random delta, possibly within a range.\ngenerateDelta :: Maybe DTime -> Maybe DTime -> Gen DTime\ngenerateDelta (Just x) (Just y) = choose (x, y)\ngenerateDelta (Just x) Nothing  = (x +) . getPositive <$> arbitrary\ngenerateDelta Nothing  (Just y) = choose (2.2251e-308, y)\ngenerateDelta Nothing  Nothing  = getPositive <$> arbitrary\n\n-- | Generate a random delta following a normal distribution, and possibly\n-- within a given range.\ngenerateDSNormal :: DTime -> DTime -> Maybe DTime -> Maybe DTime -> Gen DTime\ngenerateDSNormal avg stddev m n = suchThat gen (\\x -> mx x && mn x)\n  where\n    gen = MkGen (\\r _ -> fst $ normal\' (avg, stddev) r)\n    mn  = maybe (const True) (<=) m\n    mx  = maybe (const True) (>=) n\n\n-- | Generate random samples up until a max time, with a given time delta\n-- generation function.\ntimeStampsUntilWith :: Gen DTime -> DTime -> Gen [DTime]\ntimeStampsUntilWith arb = timeStampsUntilWith\' arb []\n  where\n    -- Generate random samples up until a max time, with a given time delta\n    -- generation function, and an initial suffix of time deltas.\n    timeStampsUntilWith\' :: Gen DTime -> [DTime] -> DTime -> Gen [DTime]\n    timeStampsUntilWith\' arb acc ds\n      | ds < 0    = return acc\n      | otherwise = do d <- arb\n                       let acc\' = acc `seq` (d:acc)\n                       acc\' `seq` timeStampsUntilWith\' arb acc\' (ds - d)\n\n-- ** Parameters used to generate random input streams\n\n-- | Distributions used for time delta (DT) generation.\ndata Distribution\n  = DistConstant              -- ^ Constant DT for the whole stream.\n  | DistNormal (DTime, DTime) -- ^ Variable DT following normal distribution,\n                              --   with an average and a standard deviation.\n  | DistRandom                -- ^ Completely random (positive) DT.\n\n-- | Upper and lower bounds of time deltas for random DT generation.\ntype Range = (Maybe DTime, Maybe DTime)\n\n-- | Optional maximum length for a stream, given as a time, or a number of\n-- samples.\ntype Length = Maybe (Either Int DTime)\n\n-- ** Helpers for common cases\n\n-- | Generate a stream of values with uniformly distributed time deltas.\nuniDistStream :: Arbitrary a => Gen (SignalSampleStream a)\nuniDistStream = generateStream DistRandom (Nothing, Nothing) Nothing\n\n-- | Generate a stream of values with uniformly distributed time deltas, with a\n-- max DT.\nuniDistStreamMaxDT :: Arbitrary a => DTime -> Gen (SignalSampleStream a)\nuniDistStreamMaxDT maxDT =\n  generateStream DistRandom (Nothing, Just maxDT) Nothing\n\n-- | Generate a stream of values with a fixed time delta.\nfixedDelayStream :: Arbitrary a => DTime -> Gen (SignalSampleStream a)\nfixedDelayStream dt = generateStream DistConstant (Just dt, Just dt) Nothing\n\n-- | Generate a stream of values with a fixed time delta.\nfixedDelayStreamWith :: Arbitrary a\n                     => (DTime -> a)\n                     -> DTime\n                     -> Gen (SignalSampleStream a)\nfixedDelayStreamWith f dt =\n    generateStreamWith f\' DistConstant (Just dt, Just dt) Nothing\n  where\n    f\' n t = return $ f (fromIntegral n * t)\n\n-- * Extended quickcheck generator\n\n-- | Generates a list of the given length.\nvectorOfWith :: Int -> (Int -> Gen a) -> Gen [a]\nvectorOfWith k genF = sequence [ genF i | i <- [1..k] ]\n'