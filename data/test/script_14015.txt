b'/*\n * Copyright (C) 2015 Naman Dwivedi\n *\n * Licensed under the GNU General Public License v3\n *\n * This is free software: you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n */\n\npackage com.naman14.timber.fragments;\n\nimport android.graphics.Bitmap;\nimport android.graphics.Color;\nimport android.graphics.drawable.Drawable;\nimport android.os.AsyncTask;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport com.google.android.material.appbar.AppBarLayout;\nimport com.google.android.material.appbar.CollapsingToolbarLayout;\nimport androidx.fragment.app.Fragment;\nimport androidx.appcompat.app.ActionBar;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.palette.graphics.Palette;\nimport androidx.appcompat.widget.Toolbar;\nimport android.view.LayoutInflater;\nimport android.view.Menu;\nimport android.view.MenuInflater;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.ImageView;\n\nimport com.afollestad.appthemeengine.ATE;\nimport com.naman14.timber.MusicPlayer;\nimport com.naman14.timber.R;\nimport com.naman14.timber.adapters.ArtistSongAdapter;\nimport com.naman14.timber.dataloaders.ArtistLoader;\nimport com.naman14.timber.dataloaders.ArtistSongLoader;\nimport com.naman14.timber.dialogs.AddPlaylistDialog;\nimport com.naman14.timber.lastfmapi.LastFmClient;\nimport com.naman14.timber.lastfmapi.callbacks.ArtistInfoListener;\nimport com.naman14.timber.lastfmapi.models.ArtistQuery;\nimport com.naman14.timber.lastfmapi.models.LastfmArtist;\nimport com.naman14.timber.models.Artist;\nimport com.naman14.timber.models.Song;\nimport com.naman14.timber.utils.ATEUtils;\nimport com.naman14.timber.utils.Constants;\nimport com.naman14.timber.utils.Helpers;\nimport com.naman14.timber.utils.ImageUtils;\nimport com.naman14.timber.utils.TimberUtils;\nimport com.nostra13.universalimageloader.core.DisplayImageOptions;\nimport com.nostra13.universalimageloader.core.ImageLoader;\nimport com.nostra13.universalimageloader.core.listener.SimpleImageLoadingListener;\n\nimport java.util.List;\n\npublic class ArtistDetailFragment extends Fragment {\n\n    private long artistID = -1;\n    private ImageView artistArt;\n    private Toolbar toolbar;\n    private CollapsingToolbarLayout collapsingToolbarLayout;\n    private AppBarLayout appBarLayout;\n    private boolean largeImageLoaded = false;\n    private int primaryColor = -1;\n    private ArtistSongAdapter mAdapter;\n\n    public static ArtistDetailFragment newInstance(long id, boolean useTransition, String transitionName) {\n        ArtistDetailFragment fragment = new ArtistDetailFragment();\n        Bundle args = new Bundle();\n        args.putLong(Constants.ARTIST_ID, id);\n        args.putBoolean("transition", useTransition);\n        if (useTransition)\n            args.putString("transition_name", transitionName);\n        fragment.setArguments(args);\n        return fragment;\n    }\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        if (getArguments() != null) {\n            artistID = getArguments().getLong(Constants.ARTIST_ID);\n        }\n    }\n\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        View rootView = inflater.inflate(\n                R.layout.fragment_artist_detail, container, false);\n\n        artistArt = (ImageView) rootView.findViewById(R.id.artist_art);\n\n        collapsingToolbarLayout = (CollapsingToolbarLayout) rootView.findViewById(R.id.collapsing_toolbar);\n        appBarLayout = (AppBarLayout) rootView.findViewById(R.id.app_bar);\n\n        if (getArguments().getBoolean("transition")) {\n            artistArt.setTransitionName(getArguments().getString("transition_name"));\n        }\n\n        toolbar = (Toolbar) rootView.findViewById(R.id.toolbar);\n        setupToolbar();\n        setUpArtistDetails();\n\n        getChildFragmentManager().beginTransaction().replace(R.id.container, ArtistMusicFragment.newInstance(artistID)).commit();\n\n\n        return rootView;\n    }\n\n    private void setupToolbar() {\n\n        ((AppCompatActivity) getActivity()).setSupportActionBar(toolbar);\n\n        final ActionBar ab = ((AppCompatActivity) getActivity()).getSupportActionBar();\n        ab.setDisplayShowTitleEnabled(false);\n        ab.setDisplayHomeAsUpEnabled(true);\n    }\n\n    private void setUpArtistDetails() {\n\n        final Artist artist = ArtistLoader.getArtist(getActivity(), artistID);\n        List<Song> songList = ArtistSongLoader.getSongsForArtist(getActivity(), artistID);\n        mAdapter = new ArtistSongAdapter(getActivity(), songList, artistID);\n\n        collapsingToolbarLayout.setTitle(artist.name);\n\n        LastFmClient.getInstance(getActivity()).getArtistInfo(new ArtistQuery(artist.name), new ArtistInfoListener() {\n            @Override\n            public void artistInfoSucess(final LastfmArtist artist) {\n                if (artist != null) {\n\n                    ImageLoader.getInstance().displayImage(artist.mArtwork.get(4).mUrl, artistArt,\n                            new DisplayImageOptions.Builder().cacheInMemory(true)\n                                    .cacheOnDisk(true)\n                                    .showImageOnFail(R.drawable.ic_empty_music2)\n                                    .build(), new SimpleImageLoadingListener() {\n                                @Override\n                                public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {\n                                    largeImageLoaded = true;\n                                    try {\n                                        new Palette.Builder(loadedImage).generate(new Palette.PaletteAsyncListener() {\n                                            @Override\n                                            public void onGenerated(Palette palette) {\n                                                Palette.Swatch swatch = palette.getVibrantSwatch();\n                                                if (swatch != null) {\n                                                    primaryColor = swatch.getRgb();\n                                                    collapsingToolbarLayout.setContentScrimColor(primaryColor);\n                                                    if (getActivity() != null)\n                                                        ATEUtils.setStatusBarColor(getActivity(), Helpers.getATEKey(getActivity()), primaryColor);\n                                                } else {\n                                                    Palette.Swatch swatchMuted = palette.getMutedSwatch();\n                                                    if (swatchMuted != null) {\n                                                        primaryColor = swatchMuted.getRgb();\n                                                        collapsingToolbarLayout.setContentScrimColor(primaryColor);\n                                                        if (getActivity() != null)\n                                                            ATEUtils.setStatusBarColor(getActivity(), Helpers.getATEKey(getActivity()), primaryColor);\n                                                    }\n                                                }\n\n                                            }\n                                        });\n                                    } catch (Exception ignored) {\n\n                                    }\n                                }\n                            });\n                    Handler handler = new Handler();\n                    handler.postDelayed(new Runnable() {\n                        @Override\n                        public void run() {\n                            setBlurredPlaceholder(artist);\n                        }\n                    }, 100);\n\n                }\n            }\n\n            @Override\n            public void artistInfoFailed() {\n\n            }\n        });\n\n    }\n\n    private void setBlurredPlaceholder(LastfmArtist artist) {\n        ImageLoader.getInstance().loadImage(artist.mArtwork.get(1).mUrl, new SimpleImageLoadingListener() {\n            @Override\n            public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {\n                if (getActivity() != null && !largeImageLoaded)\n                    new setBlurredAlbumArt().execute(loadedImage);\n\n            }\n        });\n    }\n\n    @Override\n    public void onActivityCreated(final Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n        setHasOptionsMenu(true);\n    }\n\n    @Override\n    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {\n        super.onCreateOptionsMenu(menu, inflater);\n        inflater.inflate(R.menu.artist_detail, menu);\n        if (getActivity() != null)\n            ATE.applyMenu(getActivity(), "dark_theme", menu);\n    }\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        switch (item.getItemId()) {\n            case R.id.popup_song_addto_queue:\n                MusicPlayer.addToQueue(getContext(), mAdapter.getSongIds(), -1, TimberUtils.IdType.NA);\n                break;\n            case R.id.popup_song_addto_playlist:\n                AddPlaylistDialog.newInstance(mAdapter.getSongIds()).show(getActivity().getSupportFragmentManager(), "ADD_PLAYLIST");\n                break;\n        }\n        return super.onOptionsItemSelected(item);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n        toolbar.setBackgroundColor(Color.TRANSPARENT);\n        if (primaryColor != -1 && getActivity() != null) {\n            collapsingToolbarLayout.setContentScrimColor(primaryColor);\n            String ateKey = Helpers.getATEKey(getActivity());\n            ATEUtils.setStatusBarColor(getActivity(), ateKey, primaryColor);\n        }\n\n    }\n\n    private class setBlurredAlbumArt extends AsyncTask<Bitmap, Void, Drawable> {\n\n        @Override\n        protected Drawable doInBackground(Bitmap... loadedImage) {\n            Drawable drawable = null;\n            try {\n                drawable = ImageUtils.createBlurredImageFromBitmap(loadedImage[0], getActivity(), 3);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n            return drawable;\n        }\n\n        @Override\n        protected void onPostExecute(Drawable result) {\n            if (result != null && !largeImageLoaded) {\n                artistArt.setImageDrawable(result);\n            }\n        }\n\n        @Override\n        protected void onPreExecute() {\n        }\n    }\n\n}'