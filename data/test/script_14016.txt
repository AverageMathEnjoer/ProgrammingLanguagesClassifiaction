b'package effectivejava.chapter6.item34;\n\nimport static effectivejava.chapter6.item34.PayrollDay.PayType.*;\n\n// The strategy enum pattern (Page 166)\nenum PayrollDay {\n    MONDAY(WEEKDAY), TUESDAY(WEEKDAY), WEDNESDAY(WEEKDAY),\n    THURSDAY(WEEKDAY), FRIDAY(WEEKDAY),\n    SATURDAY(WEEKEND), SUNDAY(WEEKEND);\n\n    private final PayType payType;\n\n    PayrollDay(PayType payType) { this.payType = payType; }\n\n    int pay(int minutesWorked, int payRate) {\n        return payType.pay(minutesWorked, payRate);\n    }\n\n    // The strategy enum type\n    enum PayType {\n        WEEKDAY {\n            int overtimePay(int minsWorked, int payRate) {\n                return minsWorked <= MINS_PER_SHIFT ? 0 :\n                        (minsWorked - MINS_PER_SHIFT) * payRate / 2;\n            }\n        },\n        WEEKEND {\n            int overtimePay(int minsWorked, int payRate) {\n                return minsWorked * payRate / 2;\n            }\n        };\n\n        abstract int overtimePay(int mins, int payRate);\n        private static final int MINS_PER_SHIFT = 8 * 60;\n\n        int pay(int minsWorked, int payRate) {\n            int basePay = minsWorked * payRate;\n            return basePay + overtimePay(minsWorked, payRate);\n        }\n    }\n\n    public static void main(String[] args) {\n        for (PayrollDay day : values())\n            System.out.printf("%-10s%d%n", day, day.pay(8 * 60, 1));\n    }\n}\n'