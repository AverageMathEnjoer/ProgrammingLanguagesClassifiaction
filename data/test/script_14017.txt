b'package com.naman14.timber.widgets;\n\nimport android.content.Context;\nimport android.graphics.Canvas;\nimport android.graphics.Paint;\nimport android.util.AttributeSet;\nimport android.util.TypedValue;\nimport android.view.View;\n\nimport java.util.Random;\n\n/**\n * a music visualizer sort of animation (with random data)\n */\npublic class MusicVisualizer extends View {\n\n    Random random = new Random();\n\n    Paint paint = new Paint();\n    private Runnable animateView = new Runnable() {\n        @Override\n        public void run() {\n\n            //run every 100 ms\n            postDelayed(this, 120);\n\n            invalidate();\n        }\n    };\n\n    public MusicVisualizer(Context context) {\n        super(context);\n        new MusicVisualizer(context, null);\n    }\n\n    public MusicVisualizer(Context context, AttributeSet attrs) {\n        super(context, attrs);\n\n        //start runnable\n        removeCallbacks(animateView);\n        post(animateView);\n    }\n\n    @Override\n    protected void onDraw(Canvas canvas) {\n        super.onDraw(canvas);\n\n        //set paint style, Style.FILL will fill the color, Style.STROKE will stroke the color\n        paint.setStyle(Paint.Style.FILL);\n\n        canvas.drawRect(getDimensionInPixel(0), getHeight() - (40 + random.nextInt((int) (getHeight() / 1.5f) - 25)), getDimensionInPixel(7), getHeight() - 15, paint);\n        canvas.drawRect(getDimensionInPixel(10), getHeight() - (40 + random.nextInt((int) (getHeight() / 1.5f) - 25)), getDimensionInPixel(17), getHeight() -15, paint);\n        canvas.drawRect(getDimensionInPixel(20), getHeight() - (40 + random.nextInt((int) (getHeight() / 1.5f) - 25)), getDimensionInPixel(27), getHeight() -15, paint);\n    }\n\n    public void setColor(int color) {\n        paint.setColor(color);\n        invalidate();\n    }\n\n    //get all dimensions in dp so that views behaves properly on different screen resolutions\n    private int getDimensionInPixel(int dp) {\n        return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, getResources().getDisplayMetrics());\n    }\n\n    @Override\n    protected void onWindowVisibilityChanged(int visibility) {\n        super.onWindowVisibilityChanged(visibility);\n        if (visibility == VISIBLE) {\n            removeCallbacks(animateView);\n            post(animateView);\n        } else if (visibility == GONE) {\n            removeCallbacks(animateView);\n        }\n    }\n}'