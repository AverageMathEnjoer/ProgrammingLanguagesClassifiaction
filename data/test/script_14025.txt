b'package co.joebirch.composeplayground.animation\n\nimport android.graphics.PointF\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.dp\nimport co.joebirch.composeplayground.ComposableLayout\n\nobject InteractionAnimationView : ComposableLayout {\n\n    //private val shapeRadius = FloatPropKey()\n    private val down = PointF(0f, 0f)\n\n    private enum class CircleStatus {\n        Idle,\n        Pressed,\n        Released\n    }\n\n    @Composable\n    override fun build() {\n        Column(\n            modifier = Modifier.fillMaxSize().padding(32.dp),\n            verticalArrangement = Arrangement.SpaceEvenly,\n            horizontalAlignment = Alignment.CenterHorizontally\n        ) {\n            //TouchCircleComponent()\n        }\n    }\n/*\n\n    @Composable\n    fun TouchCircleComponent() {\n        val toState = remember { mutableStateOf(CircleStatus.Idle) }\n        val rippleTransDef = remember { createTransDef() }\n\n        val onPress: (Offset) -> Unit = { offset ->\n            down.x = offset.x\n            down.y = offset.y\n            toState.value = CircleStatus.Pressed\n        }\n        val onRelease: () -> Unit = {\n            toState.value = CircleStatus.Released\n        }\n\n        Box(modifier = Modifier.fillMaxSize().pressIndicatorGestureFilter(\n            onStart = onPress, onStop = onRelease)) {\n            val state = transition(\n                definition = rippleTransDef,\n                toState = toState.value\n            )\n            Canvas(modifier = Modifier.preferredSize(80.dp)) {\n                drawCircle(Color.Black, state[shapeRadius])\n            }\n        }\n    }\n\n\n    private fun createTransDef(): TransitionDefinition<CircleStatus> {\n        return transitionDefinition {\n            state(CircleStatus.Idle) {\n                this[shapeRadius] = 50f\n            }\n            state(CircleStatus.Pressed) {\n                this[shapeRadius] = 150f\n            }\n            state(CircleStatus.Released) {\n                this[shapeRadius] = 50f\n            }\n            transition(fromState = CircleStatus.Idle, toState = CircleStatus.Pressed) {\n                shapeRadius using tween(\n                    durationMillis = 225\n                )\n                interruptionHandling = InterruptionHandling.UNINTERRUPTIBLE\n            }\n            transition(fromState = CircleStatus.Pressed, toState = CircleStatus.Released) {\n                shapeRadius using tween(\n                    durationMillis = 225\n                )\n                interruptionHandling = InterruptionHandling.UNINTERRUPTIBLE\n                nextState = CircleStatus.Idle\n            }\n            snapTransition(CircleStatus.Released to CircleStatus.Idle)\n        }\n    }\n\n */\n}\n'