b'module NetRcSpec where\n\nimport qualified Cachix.Client.NetRc as NetRc\nimport Cachix.Types.BinaryCache (BinaryCache (..))\nimport Cachix.Types.Permission (Permission (..))\nimport Protolude\nimport Servant.Auth.Client (Token (..))\nimport System.Directory (copyFile)\nimport System.IO.Temp (withSystemTempFile)\nimport Test.Hspec\n\nbc1 :: BinaryCache\nbc1 =\n  BinaryCache\n    { name = "name",\n      uri = "https://name.cachix.org",\n      publicSigningKeys = ["pub"],\n      isPublic = False,\n      githubUsername = "foobar",\n      permission = Read\n    }\n\nbc2 :: BinaryCache\nbc2 =\n  BinaryCache\n    { name = "name2",\n      uri = "https://name2.cachix.org",\n      publicSigningKeys = ["pub2"],\n      isPublic = False,\n      githubUsername = "foobar2",\n      permission = Read\n    }\n\n-- TODO: poor man\'s golden tests, use https://github.com/stackbuilders/hspec-golden\ntest :: [BinaryCache] -> Text -> Expectation\ntest caches goldenName = withSystemTempFile "hspec-netrc" $ \\filepath _ -> do\n  let input = "test/data/" <> toS goldenName <> ".input"\n      output = "test/data/" <> toS goldenName <> ".output"\n  copyFile input filepath\n  NetRc.add (Token "token123") caches filepath\n  real <- readFile filepath\n  expected <- readFile output\n  real `shouldBe` expected\n\nspec :: Spec\nspec =\n  describe "add" $ do\n    -- TODO: not easy to test this with temp files as they are *created*\n    -- it "populates non-existent netrc file" $ test [bc1, bc2] "fresh"\n    it "populates empty netrc file" $ test [bc1, bc2] "empty"\n    it "populates netrc file with one additional entry" $ test [bc2] "add"\n    it "populates netrc file with one overriden entry" $ test [bc2] "override"\n'