b'module Main where\nimport Control.Monad\nimport Data.List\nimport System.Environment (getArgs)\nimport System.IO\nimport System.Posix.Unistd\nimport System.Process (system)\nimport System.Random\n\n\ndraw :: [String] -> IO ()\ndraw names0 = do\n  let names = names0 ++ names0\n  let getSortedNames = do\n        rs <- replicateM (length names) randomIO\n        return $ map snd $ sort $ zip (rs::[Int]) names\n  sn0 <- getSortedNames\n  forM sn0 $ \\n0 -> do\n    system "clear"\n    spinNames <- take 50 <$> concat <$> replicateM 10 getSortedNames\n    forM spinNames $ \\n1 -> do\n      putStr $ n1 ++ "\\r"\n      hFlush stdout\n      usleep 10000\n    system "clear"\n    putStrLn $ n0 ++ " \xe6\xa7\x98"\n\n    getLine\n  return ()\n\nmain :: IO ()\nmain = do\n  argv <- getArgs\n  contents <- mapM readFile argv\n  let names = lines $ concat contents\n  forever $ draw names\n'