b'/**\n * Copyright (C) 2020 Fernando Cejas Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.fernandocejas.sample.core.interactor\n\nimport com.fernandocejas.sample.core.exception.Failure\nimport com.fernandocejas.sample.core.functional.Either\nimport kotlinx.coroutines.*\n\n/**\n * Abstract class for a Use Case (Interactor in terms of Clean Architecture).\n * This abstraction represents an execution unit for different use cases (this means that any use\n * case in the application should implement this contract).\n *\n * By convention each [UseCase] implementation will execute its job in a background thread\n * (kotlin coroutine) and will post the result in the UI thread.\n */\nabstract class UseCase<out Type, in Params> where Type : Any {\n\n    abstract suspend fun run(params: Params): Either<Failure, Type>\n\n    operator fun invoke(\n        params: Params,\n        scope: CoroutineScope = GlobalScope,\n        onResult: (Either<Failure, Type>) -> Unit = {}\n    ) {\n        scope.launch(Dispatchers.Main) {\n            val deferred = async(Dispatchers.IO) {\n                run(params)\n            }\n            onResult(deferred.await())\n        }\n    }\n\n    class None\n}\n'