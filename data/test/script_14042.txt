b'\nmodule AListTest ( tests ) where\n\nimport Test.Framework (defaultMain, testGroup)\nimport Test.Framework.Providers.HUnit\nimport Test.Framework.Providers.QuickCheck2 (testProperty)\nimport Test.HUnit\nimport Test.QuickCheck\n\nimport Control.Monad.Par.AList as A\nimport Prelude hiding (tail, length, map, filter)\nimport qualified  Prelude as P\n\n\n\n--------------------------------------------------------------------------------\n-- QuickCheck properties\n\nprop_tofrom :: [Int] -> Bool \nprop_tofrom xs = toList (fromList xs) == xs\n\nprop_tofromB :: [Int] -> Bool \nprop_tofromB xs = toList (fromListBalanced xs) == xs\n\nprop_balance :: [Int] -> Bool\nprop_balance xs = toList (balance (fromList xs)) == xs\n\nprop_map :: [Int] -> Bool\nprop_map ls =  map (+1) (fromList ls) == fromList (P.map (+1) ls)\n\nprop_filter :: [Int] -> Bool\nprop_filter ls =  filter odd (fromList ls) == fromList (P.filter odd ls)\n\n-- | All QuickCheck tests together:\ntest = mapM_ quickCheck [ prop_tofrom \n                        , prop_tofromB\n                        , prop_balance\n                        , prop_map\n                        , prop_filter\n                        ]\n\n--------------------------------------------------------------------------------\n-- Testing Utils:\n\nbintree 0 x = x\nbintree n x = Append sub sub\n where sub = bintree (n-1) x\n\nshowDbg ANil         = "_"\nshowDbg (ASing x)    = show x\nshowDbg (Append l r) = "("++showDbg l++" | "++showDbg r++")"\nshowDbg (AList  l)   = show l\n\n--------------------------------------------------------------------------------\n\ntests = [\n  -- testGroup "AList HUnit Tests" (hUnitTestToTests alist_tests),\n\n  testGroup "AList HUnit Tests" [\n     testCase "fromList1"  $  8   @=? (length$ tail$ tail$ fromList [1..10])\n   , testCase "cons X3"    $  1   @=? (length$ tail$tail$  cons 1$ cons 2$ cons 3 empty)\n   , testCase "tail X3"    $  253 @=? (length$ tail$tail$tail$ bintree 8 $ singleton \'a\')\n   , testCase "len bintree"$  0   @=? (length$ bintree 8 $ empty)\n\n   , testCase "inspect tree1"$  "((1 | 1) | (1 | 1))" @=? (showDbg$            bintree 2 $ singleton 1)\n   , testCase "inspect tree2"$  "((_ | 1) | (1 | 1))" @=? (showDbg$ tail$      bintree 2 $ singleton 1)\n   , testCase "inspect tree3"$  "(_ | (1 | 1))"       @=? (showDbg$ tail$tail$ bintree 2 $ singleton 1)\n   ],\n\n  testGroup "AList QuickCheck Tests " [\n     testProperty "map"     prop_map\n   , testProperty "filter"  prop_filter\n   , testProperty "tofrom"  prop_tofrom\n   , testProperty "tofromB" prop_tofromB\n   , testProperty "balance" prop_balance\n   ]\n  ]\n\n-- main = defaultMain tests\n'