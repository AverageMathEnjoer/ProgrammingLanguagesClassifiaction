b'package effectivejava.chapter7.item47;\n\nimport java.util.*;\nimport java.util.stream.IntStream;\nimport java.util.stream.Stream;\n\n// Two ways to generate a stream of all the sublists of a list (Pages 219-20)\npublic class SubLists {\n    // Returns a stream of all the sublists of its input list (Page 219)\n    public static <E> Stream<List<E>> of(List<E> list) {\n        return Stream.concat(Stream.of(Collections.emptyList()),\n                prefixes(list).flatMap(SubLists::suffixes));\n    }\n\n    private static <E> Stream<List<E>> prefixes(List<E> list) {\n        return IntStream.rangeClosed(1, list.size())\n                .mapToObj(end -> list.subList(0, end));\n    }\n\n    private static <E> Stream<List<E>> suffixes(List<E> list) {\n        return IntStream.range(0, list.size())\n                .mapToObj(start -> list.subList(start, list.size()));\n    }\n\n//    // Returns a stream of all the sublists of its input list, excluding the empty list\n//    // This version is derived from the obvious iterative code (Page 220)\n//    public static <E> Stream<List<E>> of(List<E> list) {\n//        return IntStream.range(0, list.size())\n//                .mapToObj(start ->\n//                        IntStream.rangeClosed(start + 1, list.size())\n//                                .mapToObj(end -> list.subList(start, end)))\n//                .flatMap(x -> x);\n//    }\n\n    public static void main(String[] args) {\n        List<String> list = Arrays.asList(args);\n        SubLists.of(list).forEach(System.out::println);\n    }\n}\n'