b'{-# LANGUAGE DataKinds #-}\n{-# LANGUAGE Rank2Types #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n\nmodule Hoodle.Coroutine.Scroll where\n\nimport Control.Error.Util (hoistEither)\nimport Control.Lens (over, view, _1)\nimport Control.Monad (forM_, when)\nimport Control.Monad.State (get, lift, liftIO)\nimport Control.Monad.Trans.Crtn (CrtnErr (Other))\nimport Data.Functor.Identity (Identity (..))\nimport Data.Hoodle.BBox\n  ( BBox (..),\n    moveBBoxULCornerTo,\n  )\nimport Hoodle.Accessor\n  ( getCanvasGeometryCvsId,\n    pureUpdateUhdl,\n  )\nimport Hoodle.Coroutine.Draw\n  ( doIOaction_,\n    invalidate,\n    invalidateInBBox,\n    nextevent,\n  )\nimport Hoodle.GUI.Reflect\n  ( changeCurrentCanvasId,\n    chkCvsIdNInvalidate,\n  )\nimport qualified Hoodle.ModelAction.Adjustment as A\nimport Hoodle.Type.Canvas\n  ( CanvasId,\n    CanvasInfo (..),\n    adjustments,\n    currentPageNum,\n    forBoth,\n    horizAdjConnId,\n    pageArrangement,\n    unboxBiXform,\n    unboxLens,\n    vertAdjConnId,\n    viewInfo,\n  )\nimport Hoodle.Type.Coroutine (MainCoroutine)\nimport Hoodle.Type.Enum (DrawFlag (Efficient))\nimport Hoodle.Type.Event\n  ( UserEvent\n      ( VScrollBarEnd,\n        VScrollBarMoved,\n        VScrollBarStart\n      ),\n  )\nimport Hoodle.Type.HoodleState\n  ( currentCanvas,\n    currentUnit,\n    getCanvasInfo,\n    setCanvasInfo,\n    unitHoodles,\n  )\nimport Hoodle.Type.PageArrangement\n  ( DesktopCoordinate (..),\n    DesktopDimension (..),\n    PageNum (..),\n    ViewMode (ContinuousPage, SinglePage),\n    ViewPortBBox (..),\n    apply,\n    desktopDimension,\n    viewPortBBox,\n    xformViewPortFitInSize,\n  )\nimport Hoodle.View.Coordinate (CanvasGeometry (desktop2Page))\n\n-- |\nupdateCanvasInfo :: (forall a. CanvasInfo a -> CanvasInfo a) -> CanvasId -> MainCoroutine ()\nupdateCanvasInfo f cid = pureUpdateUhdl $ \\uhdl ->\n  let cinfobox = getCanvasInfo cid uhdl\n      ncinfobox = (runIdentity . forBoth unboxBiXform (return . f)) cinfobox\n   in setCanvasInfo (cid, ncinfobox) uhdl\n\n-- |\nupdateCanvasInfo2 ::\n  (CanvasInfo \'SinglePage -> CanvasInfo \'SinglePage) ->\n  (CanvasInfo \'ContinuousPage -> CanvasInfo \'ContinuousPage) ->\n  CanvasId ->\n  MainCoroutine ()\nupdateCanvasInfo2 fs fc cid =\n  pureUpdateUhdl $ \\uhdl ->\n    let cinfobox = getCanvasInfo cid uhdl\n        ncinfobox = (runIdentity . unboxBiXform (return . fs) (return . fc)) cinfobox\n     in setCanvasInfo (cid, ncinfobox) uhdl\n\n-- |\nmoveViewPortBy ::\n  MainCoroutine () ->\n  CanvasId ->\n  ((Double, Double) -> (Double, Double)) ->\n  MainCoroutine ()\nmoveViewPortBy rndr cid f =\n  updateCanvasInfo moveact cid >> adjustScrollbarWithGeometryCvsId cid >> rndr\n  where\n    moveact :: CanvasInfo a -> CanvasInfo a\n    moveact cinfo =\n      let BBox (x0, y0) _ =\n            (unViewPortBBox . view (viewInfo . pageArrangement . viewPortBBox)) cinfo\n          DesktopDimension ddim =\n            view (viewInfo . pageArrangement . desktopDimension) cinfo\n       in over\n            (viewInfo . pageArrangement . viewPortBBox)\n            (xformViewPortFitInSize ddim (moveBBoxULCornerTo (f (x0, y0))))\n            cinfo\n\n-- |\nadjustScrollbarWithGeometryCvsId :: CanvasId -> MainCoroutine ()\nadjustScrollbarWithGeometryCvsId cid = do\n  xstate <- get\n  let uhdl = view (unitHoodles . currentUnit) xstate\n      cinfobox = getCanvasInfo cid uhdl\n  geometry <- liftIO (getCanvasGeometryCvsId cid uhdl)\n  let (hadj, vadj) = view (unboxLens adjustments) cinfobox\n      connidh = view (unboxLens horizAdjConnId) cinfobox\n      connidv = view (unboxLens vertAdjConnId) cinfobox\n  doIOaction_ $ A.adjustScrollbarWithGeometry geometry ((hadj, connidh), (vadj, connidv))\n\n-- |\nadjustScrollbarWithGeometryCurrent :: MainCoroutine ()\nadjustScrollbarWithGeometryCurrent =\n  adjustScrollbarWithGeometryCvsId . view (currentCanvas . _1)\n    . view (unitHoodles . currentUnit)\n    =<< get\n\n-- |\nhscrollBarMoved :: CanvasId -> Double -> MainCoroutine ()\nhscrollBarMoved cid v =\n  changeCurrentCanvasId cid\n    >> moveViewPortBy (invalidate cid) cid (\\(_, y) -> (v, y))\n\n-- |\nvscrollBarMoved :: CanvasId -> Double -> MainCoroutine ()\nvscrollBarMoved cid v =\n  chkCvsIdNInvalidate cid\n    >> moveViewPortBy (invalidate cid) cid (\\(x, _) -> (x, v))\n\n-- |\nvscrollStart :: CanvasId -> Double -> MainCoroutine ()\nvscrollStart cid v = do\n  chkCvsIdNInvalidate cid\n  vscrollMove cid v\n\n-- |\nvscrollMove :: CanvasId -> Double -> MainCoroutine ()\nvscrollMove cid v0 = do\n  ev <- nextevent\n  xst <- get\n  let uhdl = view (unitHoodles . currentUnit) xst\n  geometry <- liftIO (getCanvasGeometryCvsId cid uhdl)\n  case ev of\n    VScrollBarMoved cid\' v -> do\n      when (cid /= cid\') $\n        (lift . hoistEither . Left . Other) "something wrong in vscrollMove"\n      smoothScroll cid geometry v0 v\n      vscrollMove cid v\n    VScrollBarEnd cid\' v -> do\n      when (cid /= cid\') $\n        (lift . hoistEither . Left . Other) "something wrong in vscrollMove"\n      moveViewPortBy (invalidate cid) cid (\\(x, _) -> (x, v))\n      invalidate cid\n      return ()\n    VScrollBarStart cid\' v -> vscrollStart cid\' v\n    _ -> return ()\n\n-- |\nsmoothScroll :: CanvasId -> CanvasGeometry -> Double -> Double -> MainCoroutine ()\nsmoothScroll cid geometry _v0 v = do\n  let lst = [v]\n  forM_ lst $ \\v\' -> do\n    updateCanvasInfo2 (scrollmovecanvas v) (scrollmovecanvasCont geometry v\') cid\n    invalidateInBBox Nothing Efficient cid\n  where\n    scrollmovecanvas vv cvsInfo =\n      let BBox vm_orig _ = unViewPortBBox $ view (viewInfo . pageArrangement . viewPortBBox) cvsInfo\n       in over\n            (viewInfo . pageArrangement . viewPortBBox)\n            (apply (moveBBoxULCornerTo (fst vm_orig, vv)))\n            cvsInfo\n    --\n    scrollmovecanvasCont geom vv cvsInfo =\n      let BBox vm_orig _ = unViewPortBBox $ view (viewInfo . pageArrangement . viewPortBBox) cvsInfo\n          cpn = PageNum . view currentPageNum $ cvsInfo\n          ncpn = maybe cpn fst $ desktop2Page geom (DeskCoord (0, vv))\n       in over currentPageNum (const (unPageNum ncpn))\n            . over\n              (viewInfo . pageArrangement . viewPortBBox)\n              (apply (moveBBoxULCornerTo (fst vm_orig, vv)))\n            $ cvsInfo\n'