b'using System.Diagnostics;\nusing System.Runtime.InteropServices;\nusing System.Text;\n\nnamespace XboxDownload\n{\n    internal static class Program\n    {\n        /// <summary>\n        ///  The main entry point for the application.\n        /// </summary>\n        [STAThread]\n        static void Main(string[] args)\n        {\n            // To customize application configuration such as set high DPI settings or default font,\n            // see https://aka.ms/applicationconfiguration.\n            ApplicationConfiguration.Initialize();\n            //Application.Run(new Form1());\n\n            using Process? instance = RunningInstance();\n            if (instance == null)\n            {\n                Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);\n\n                if (args != null && args.Length >= 1 && args[0] == "Startup")\n                {\n                    Form1.bAutoStartup = true;\n                    using (new Form1())\n                    {\n                        Application.Run();\n                    }\n                }\n                else\n                {\n                    Application.Run(new Form1());\n                }\n            }\n            else\n            {\n                HandleRunningInstance(instance);\n                Application.Exit();\n            }\n        }\n\n        private static Process? RunningInstance()\n        {\n            Process current = Process.GetCurrentProcess();\n            Process[] processes = Process.GetProcessesByName(current.ProcessName);\n            foreach (Process process in processes)\n            {\n                if (process.Id != current.Id)\n                {\n                    try\n                    {\n                        if (current.MainModule?.FileName == process.MainModule?.FileName)\n                        {\n                            return process;\n                        }\n                    }\n                    catch { }\n                    break;\n                }\n            }\n            return null;\n        }\n\n        [DllImport("User32.dll")]\n        private static extern bool ShowWindowAsync(IntPtr hWnd, int cmdShow);\n\n        [DllImport("User32.dll")]\n        private static extern bool SetForegroundWindow(IntPtr hWnd);\n\n        [DllImport("User32.dll", CharSet = CharSet.Unicode)]\n        private static extern IntPtr FindWindow(string IpClassName, string? IpWindowName);\n\n        private const int SW_SHOWNOMAL = 1;\n        private static void HandleRunningInstance(Process instance)\n        {\n            IntPtr ihand = instance.MainWindowHandle;\n            if (ihand == IntPtr.Zero)\n                ihand = Program.FindWindow("WindowsForms10.Window.8.app.0.297b065_r3_ad1", null);\n            if (ihand == IntPtr.Zero)\n            {\n                MessageBox.Show("\xd2\xd1\xbe\xad\xc6\xf4\xb6\xaf\xc1\xcb\xb4\xcb\xb3\xcc\xd0\xf2\xa3\xac\xc7\xeb\xb2\xbb\xd2\xaa\xcd\xac\xca\xb1\xd4\xcb\xd0\xd0\xb6\xe0\xb8\xf6\xb1\xbe\xb3\xcc\xd0\xf2\xa1\xa3", "\xcf\xb5\xcd\xb3\xcc\xe1\xca\xbe", MessageBoxButtons.OK, MessageBoxIcon.Warning);\n            }\n            else\n            {\n                ShowWindowAsync(ihand, SW_SHOWNOMAL);\n                SetForegroundWindow(ihand);\n            }\n        }\n\n        [DllImport("kernel32")]\n        private static extern ExecutionState SetThreadExecutionState(ExecutionState esFlags);\n\n        [Flags]\n        private enum ExecutionState : uint\n        {\n            /// <summary>\n            /// Forces the system to be in the working state by resetting the system idle timer.\n            /// </summary>\n            SystemRequired = 0x01,\n\n            /// <summary>\n            /// Forces the display to be on by resetting the display idle timer.\n            /// </summary>\n            DisplayRequired = 0x02,\n\n            /// <summary>\n            /// This value is not supported. If <see cref="UserPresent"/> is combined with other esFlags values, the call will fail and none of the specified states will be set.\n            /// </summary>\n            [Obsolete("This value is not supported.")]\n            UserPresent = 0x04,\n\n            /// <summary>\n            /// Enables away mode. This value must be specified with <see cref="Continuous"/>.\n            /// <para />\n            /// Away mode should be used only by media-recording and media-distribution applications that must perform critical background processing on desktop computers while the computer appears to be sleeping.\n            /// </summary>\n            AwaymodeRequired = 0x40,\n\n            /// <summary>\n            /// Informs the system that the state being set should remain in effect until the next call that uses <see cref="Continuous"/> and one of the other state flags is cleared.\n            /// </summary>\n            Continuous = 0x80000000,\n        }\n\n        /// <summary>\n        /// \xb0\xfc\xba\xac\xbf\xd8\xd6\xc6\xc6\xc1\xc4\xbb\xb9\xd8\xb1\xd5\xd2\xd4\xbc\xb0\xcf\xb5\xcd\xb3\xd0\xdd\xc3\xdf\xcf\xe0\xb9\xd8\xb5\xc4\xb7\xbd\xb7\xa8\xa1\xa3\n        /// </summary>\n        public static class SystemSleep\n        {\n            /// <summary>\n            /// \xc9\xe8\xd6\xc3\xb4\xcb\xcf\xdf\xb3\xcc\xb4\xcb\xca\xb1\xbf\xaa\xca\xbc\xd2\xbb\xd6\xb1\xbd\xab\xb4\xa6\xd3\xda\xd4\xcb\xd0\xd0\xd7\xb4\xcc\xac\xa3\xac\xb4\xcb\xca\xb1\xbc\xc6\xcb\xe3\xbb\xfa\xb2\xbb\xd3\xa6\xb8\xc3\xbd\xf8\xc8\xeb\xcb\xaf\xc3\xdf\xd7\xb4\xcc\xac\xa1\xa3\n            /// \xb4\xcb\xcf\xdf\xb3\xcc\xcd\xcb\xb3\xf6\xba\xf3\xa3\xac\xc9\xe8\xd6\xc3\xbd\xab\xca\xa7\xd0\xa7\xa1\xa3\n            /// \xc8\xe7\xb9\xfb\xd0\xe8\xd2\xaa\xbb\xd6\xb8\xb4\xa3\xac\xc7\xeb\xb5\xf7\xd3\xc3 <see cref="RestoreForCurrentThread"/> \xb7\xbd\xb7\xa8\xa1\xa3\n            /// </summary>\n            /// <param name="keepDisplayOn">\n            /// \xb1\xed\xca\xbe\xca\xc7\xb7\xf1\xd3\xa6\xb8\xc3\xcd\xac\xca\xb1\xb1\xa3\xb3\xd6\xc6\xc1\xc4\xbb\xb2\xbb\xb9\xd8\xb1\xd5\xa1\xa3\n            /// \xb6\xd4\xd3\xda\xd3\xce\xcf\xb7\xa1\xa2\xca\xd3\xc6\xb5\xba\xcd\xd1\xdd\xca\xbe\xcf\xe0\xb9\xd8\xb5\xc4\xc8\xce\xce\xf1\xd0\xe8\xd2\xaa\xb1\xa3\xb3\xd6\xc6\xc1\xc4\xbb\xb2\xbb\xb9\xd8\xb1\xd5\xa3\xbb\xb6\xf8\xb6\xd4\xd3\xda\xba\xf3\xcc\xa8\xb7\xfe\xce\xf1\xa1\xa2\xcf\xc2\xd4\xd8\xba\xcd\xbc\xe0\xbf\xd8\xb5\xc8\xc8\xce\xce\xf1\xd4\xf2\xb2\xbb\xd0\xe8\xd2\xaa\xa1\xa3\n            /// </param>\n            public static void PreventForCurrentThread(bool keepDisplayOn = true)\n            {\n                SetThreadExecutionState(keepDisplayOn\n                    ? ExecutionState.Continuous | ExecutionState.SystemRequired | ExecutionState.DisplayRequired\n                    : ExecutionState.Continuous | ExecutionState.SystemRequired);\n            }\n\n            /// <summary>\n            /// \xbb\xd6\xb8\xb4\xb4\xcb\xcf\xdf\xb3\xcc\xb5\xc4\xd4\xcb\xd0\xd0\xd7\xb4\xcc\xac\xa3\xac\xb2\xd9\xd7\xf7\xcf\xb5\xcd\xb3\xcf\xd6\xd4\xda\xbf\xc9\xd2\xd4\xd5\xfd\xb3\xa3\xbd\xf8\xc8\xeb\xcb\xaf\xc3\xdf\xd7\xb4\xcc\xac\xba\xcd\xb9\xd8\xb1\xd5\xc6\xc1\xc4\xbb\xa1\xa3\n            /// </summary>\n            public static void RestoreForCurrentThread()\n            {\n                SetThreadExecutionState(ExecutionState.Continuous);\n            }\n\n            /// <summary>\n            /// \xd6\xd8\xd6\xc3\xcf\xb5\xcd\xb3\xcb\xaf\xc3\xdf\xbb\xf2\xd5\xdf\xb9\xd8\xb1\xd5\xc6\xc1\xc4\xbb\xb5\xc4\xbc\xc6\xca\xb1\xc6\xf7\xa3\xac\xd5\xe2\xd1\xf9\xcf\xb5\xcd\xb3\xcb\xaf\xc3\xdf\xbb\xf2\xd5\xdf\xc6\xc1\xc4\xbb\xc4\xdc\xb9\xbb\xbc\xcc\xd0\xf8\xb3\xd6\xd0\xf8\xb9\xa4\xd7\xf7\xc9\xe8\xb6\xa8\xb5\xc4\xb3\xac\xca\xb1\xca\xb1\xbc\xe4\xa1\xa3\n            /// </summary>\n            /// <param name="keepDisplayOn">\n            /// \xb1\xed\xca\xbe\xca\xc7\xb7\xf1\xd3\xa6\xb8\xc3\xcd\xac\xca\xb1\xb1\xa3\xb3\xd6\xc6\xc1\xc4\xbb\xb2\xbb\xb9\xd8\xb1\xd5\xa1\xa3\n            /// \xb6\xd4\xd3\xda\xd3\xce\xcf\xb7\xa1\xa2\xca\xd3\xc6\xb5\xba\xcd\xd1\xdd\xca\xbe\xcf\xe0\xb9\xd8\xb5\xc4\xc8\xce\xce\xf1\xd0\xe8\xd2\xaa\xb1\xa3\xb3\xd6\xc6\xc1\xc4\xbb\xb2\xbb\xb9\xd8\xb1\xd5\xa3\xbb\xb6\xf8\xb6\xd4\xd3\xda\xba\xf3\xcc\xa8\xb7\xfe\xce\xf1\xa1\xa2\xcf\xc2\xd4\xd8\xba\xcd\xbc\xe0\xbf\xd8\xb5\xc8\xc8\xce\xce\xf1\xd4\xf2\xb2\xbb\xd0\xe8\xd2\xaa\xa1\xa3\n            /// </param>\n            public static void ResetIdle(bool keepDisplayOn = true)\n            {\n                SetThreadExecutionState(keepDisplayOn\n                    ? ExecutionState.SystemRequired | ExecutionState.DisplayRequired\n                    : ExecutionState.SystemRequired);\n            }\n        }\n\n        public static class Utility\n        {\n            private const int LOGPIXELSX = 88;\n            private const int LOGPIXELSY = 90;\n\n            public static int DpiX\n            {\n                get\n                {\n                    if (Environment.OSVersion.Version.Major >= 6)\n                        SetProcessDPIAware();\n                    IntPtr hDC = GetDC(new HandleRef(null, IntPtr.Zero));\n                    return GetDeviceCaps(hDC, LOGPIXELSX);\n                }\n            }\n\n            public static int DpiY\n            {\n                get\n                {\n                    if (Environment.OSVersion.Version.Major >= 6)\n                        SetProcessDPIAware();\n                    IntPtr hDC = GetDC(new HandleRef(null, IntPtr.Zero));\n                    return GetDeviceCaps(hDC, LOGPIXELSY);\n                }\n            }\n\n            [DllImport("user32.dll")]\n            private extern static bool SetProcessDPIAware();\n\n            [DllImport("user32.dll")]\n            private extern static IntPtr GetDC(HandleRef hWnd);\n\n            [DllImport("gdi32.dll")]\n            private extern static int GetDeviceCaps(IntPtr hdc, int nIndex);\n        }\n\n        [DllImport("kernel32", CharSet = CharSet.Unicode)]\n        private static extern long WritePrivateProfileString(string section, string? key, string? val, string filePath);\n\n        [DllImport("kernel32", CharSet = CharSet.Unicode)]\n        private static extern int GetPrivateProfileString(string section, string key, string def, StringBuilder retVal, int size, string filePath);\n\n        public static void FilesIniWrite(string section, string? key, string? value, string path)\n        {\n            _ = WritePrivateProfileString(section, key, value, path);\n        }\n\n        public static string FilesIniRead(string section, string key, string path)\n        {\n            StringBuilder sb = new(255);\n            _ = GetPrivateProfileString(section, key, "", sb, 255, path);\n            return sb.ToString();\n        }\n    }\n\n    class DoubleBufferListView : ListView\n    {\n        public DoubleBufferListView()\n        {\n            SetStyle(ControlStyles.DoubleBuffer | ControlStyles.OptimizedDoubleBuffer | ControlStyles.AllPaintingInWmPaint, true);\n            UpdateStyles();\n        }\n    }\n}'