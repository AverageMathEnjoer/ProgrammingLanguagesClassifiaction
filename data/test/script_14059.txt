b'string vowels = "aeiou";\nclass Solution {\npublic:\n    int findTheLongestSubstring(string s) {\n        int n = s.size();\n        int ans = 0;\n        unordered_map<char, vector<int>> pref = {};\n        for (char v: vowels) pref[v] = {0};\n        \n        for(char cur: s) {\n            for(char v: vowels) {\n                int last_parity = *pref[v].rbegin();\n                if (cur == v) pref[v].push_back(1 - last_parity);\n                else pref[v].push_back(last_parity);\n            }\n        }\n        \n        auto get_column = [&](int j) { // 1 based\n            int id = 0;\n            for(char v: vowels) {\n                int x = pref[v][j];\n                id = 2*id + x;\n            }\n            return id;\n        };\n        \n        int rightmost[33];\n        rightmost[0] = 0;\n        for (int i = 1; i <= n; i++) {\n            int id = get_column(i);\n            rightmost[id] = i;\n        }\n   \n        for (int i = 1; i <= n; i++) {\n            // find the rightmost j substring(i, j) is valid\n            // ith column\n            int id = get_column(i-1);\n            int j = rightmost[id];\n            if (j < i) continue;\n            ans = max(ans, j-i+1);\n        }    \n        return ans;\n    }\n};\n\n/*\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n    i                 ^   ^\n    maintain prefix count of all vowels pref[a][7] \n      a,b,a,e,e,a,e\n          i   j\na - 0,1,1,0,0,0,1,1\ne - 0,0,0,0,1,0,0,1\ni - ...,1,.....,1\no - ...,0,.....,1\nu - ...,0,.....,0\n10100 <-- 20\nn^2 substrings -> O(n) => overall O(n^3)\n*/'