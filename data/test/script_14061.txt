b'package co.joebirch.composeplayground.core\n\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.gestures.detectTapGestures\nimport androidx.compose.material.Text\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.material.Snackbar\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.ui.input.pointer.pointerInput\nimport androidx.compose.ui.unit.dp\nimport co.joebirch.composeplayground.ComposableLayout\n\nobject GestureView : ComposableLayout {\n\n    @Composable\n    override fun build() {\n        Column(\n            modifier = Modifier\n                .fillMaxSize()\n                .padding(32.dp),\n            verticalArrangement = Arrangement.SpaceEvenly,\n            horizontalAlignment = Alignment.CenterHorizontally\n        ) {\n            ZoomComponent()\n        }\n    }\n\n}\n\n@Composable\nfun TapComponent() {\n    val showSnackbar = remember { mutableStateOf(false) }\n    Box {\n        Text(\n            text = "Jetpack Compose",\n            modifier = Modifier\n                .padding(16.dp)\n                .clickable {\n                    showSnackbar.value = !showSnackbar.value\n                }\n        )\n        if (showSnackbar.value) {\n            Snackbar(\n                content = {\n                    Text(text = "Jetpack Compose")\n                }\n            )\n        }\n    }\n}\n\n@Composable\nfun zoomableComponent() {\n    val showSnackbar = remember { mutableStateOf(false) }\n    Column(horizontalAlignment = Alignment.CenterHorizontally) {\n        Text(\n            text = "Jetpack Compose",\n            modifier = Modifier\n                .padding(16.dp)\n                .clickable {\n                    showSnackbar.value = !showSnackbar.value\n                }\n        )\n        if (showSnackbar.value) {\n            Snackbar(content = {\n                Text(text = "Tap again to hide")\n            })\n        }\n    }\n}\n\n@Composable\nfun DoubleTapComponent() {\n    val showSnackbar = remember { mutableStateOf(false) }\n    Box {\n        Text(\n            text = "Jetpack Compose",\n            modifier = Modifier\n                .padding(16.dp)\n                .pointerInput(Unit) {\n                    detectTapGestures {\n                        showSnackbar.value = !showSnackbar.value\n\n                    }\n                }\n        )\n        if (showSnackbar.value) {\n            Snackbar(content = {\n                Text(text = "Double tap again to hide")\n            })\n        }\n    }\n}\n\n@Composable\nfun LongPressComponent() {\n    val showSnackbar = remember { mutableStateOf(false) }\n    Column(horizontalAlignment = Alignment.CenterHorizontally) {\n\n        Text(\n            text = "Jetpack Compose",\n            modifier = Modifier\n                .padding(16.dp)\n                .pointerInput(Unit) {\n                    detectTapGestures(onLongPress = {\n                        showSnackbar.value = !showSnackbar.value\n                    })\n                }\n        )\n        if (showSnackbar.value) {\n            Snackbar(content = {\n                Text(text = "Long press the text to hide")\n            })\n        }\n    }\n}\n\n@Composable\nfun ZoomComponent() {\n    var scale = remember { mutableStateOf(1f) }\n    var translate = remember { mutableStateOf(Offset(0f, 0f)) }\n\n    /*\n    Image(\n        bitmap = imageResource(id = R.drawable.screen),\n        contentDescription = "my description",\n        modifier = Modifier\n            .graphicsLayer(\n                scaleX = if (scale.value < 1) 1f else scale.value,\n                scaleY = if (scale.value < 1) 1f else scale.value,\n                translationX = translate.value.x,\n                translationY = translate.value.y\n            )\n        .fillMaxSize()\n        .rawDragGestureFilter(object : DragObserver {\n            override fun onDrag(dragDistance: Offset): Offset {\n                if (scale.value > 1) {\n                    Log.e("LOG", translate.value.x.toString())\n                    translate.value = translate.value.plus(dragDistance)\n                }\n                return super.onDrag(dragDistance)\n            }\n        })\n        .zoomable(\n            onZoomDelta = {\n                scale.value *= it\n                Log.e("VALUE", it.toString())\n            }\n        ))\n     */\n}'