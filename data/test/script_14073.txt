b'\xef\xbb\xbfusing System.Diagnostics;\nusing System.Net.Sockets;\nusing System.Net;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing System.Collections.Concurrent;\nusing System.Text.Json;\nusing System.Net.NetworkInformation;\nusing System.Data;\nusing System.Management;\n\nnamespace XboxDownload\n{\n    internal class DnsListen\n    {\n        private readonly Form1 parentForm;\n        private readonly string dohServer = Environment.OSVersion.Version.Major >= 10 ? "https://223.5.5.5" : "http://223.5.5.5";\n        private readonly Regex reDohBlacklist = new("google|youtube|facebook|twitter");\n        public static Regex reHosts = new(@"^[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(\\.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+$");\n        public static ConcurrentDictionary<String, Byte[]> dicHosts = new();\n        public static ConcurrentDictionary<String, IPAddress> dicHosts2 = new();\n        public static ConcurrentDictionary<String, List<ResouceRecord>> dicCdnHosts1 = new();\n        public static ConcurrentDictionary<Regex, List<ResouceRecord>> dicCdnHosts2 = new();\n        public static ConcurrentDictionary<String, String[]> dicDns = new();\n\n        Socket? socket = null;\n\n        public DnsListen(Form1 parentForm)\n        {\n            this.parentForm = parentForm;\n        }\n\n        public void Listen()\n        {\n            NetworkInterface[] adapters = NetworkInterface.GetAllNetworkInterfaces().Where(x => x.OperationalStatus == OperationalStatus.Up).ToArray();\n            if (Properties.Settings.Default.SetDns)\n            {\n                dicDns.Clear();\n                using var key = Microsoft.Win32.Registry.LocalMachine;\n                foreach (NetworkInterface adapter in adapters)\n                {\n                    var rk = key.OpenSubKey(@"SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters\\Interfaces\\" + adapter.Id);\n                    if (rk != null)\n                    {\n                        string? dns = rk.GetValue("NameServer", null) as string;\n                        if (!string.IsNullOrEmpty(dns) && dns != Properties.Settings.Default.LocalIP)\n                        {\n                            string[] dnsArray = dns.Split(\',\');\n                            dicDns.TryAdd(adapter.GetPhysicalAddress().ToString().ToUpper(), dnsArray);\n                        }\n                        rk.Close();\n                    }\n                }\n            }\n            int port = 53;\n            IPEndPoint? iPEndPoint = null;\n            if (string.IsNullOrEmpty(Properties.Settings.Default.DnsIP))\n            {\n                foreach (NetworkInterface adapter in adapters)\n                {\n                    IPInterfaceProperties adapterProperties = adapter.GetIPProperties();\n                    foreach (IPAddress dns in adapterProperties.DnsAddresses)\n                    {\n                        if (dns.AddressFamily == AddressFamily.InterNetwork)\n                        {\n                            if (dns.ToString() == Properties.Settings.Default.LocalIP || IPAddress.IsLoopback(dns))\n                                continue;\n                            iPEndPoint = new IPEndPoint(dns, port);\n                            break;\n                        }\n                    }\n                    if (iPEndPoint != null) break;\n                }\n                iPEndPoint ??= new IPEndPoint(IPAddress.Parse("114.114.114.114"), port);\n                if (Form1.bServiceFlag)\n                    parentForm.SetTextBox(parentForm.tbDnsIP, iPEndPoint.Address.ToString());\n            }\n            else\n            {\n                iPEndPoint = new IPEndPoint(IPAddress.Parse(Properties.Settings.Default.DnsIP), port);\n            }\n            if (!Form1.bServiceFlag) return;\n\n            IPEndPoint ipe = new(Properties.Settings.Default.ListenIP == 0 ? IPAddress.Parse(Properties.Settings.Default.LocalIP) : IPAddress.Any, port);\n            socket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);\n            try\n            {\n                socket.Bind(ipe);\n            }\n            catch (SocketException ex)\n            {\n                parentForm.Invoke(new Action(() =>\n                {\n                    parentForm.pictureBox1.Image = Properties.Resource.Xbox3;\n                    MessageBox.Show($"\xe5\x90\xaf\xe7\x94\xa8DNS\xe6\x9c\x8d\xe5\x8a\xa1\xe5\xa4\xb1\xe8\xb4\xa5!\\n\xe9\x94\x99\xe8\xaf\xaf\xe4\xbf\xa1\xe6\x81\xaf: {ex.Message}\\n\\n\xe8\xa7\xa3\xe5\x86\xb3\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x9a1\xe3\x80\x81\xe5\x81\x9c\xe7\x94\xa8\xe5\x8d\xa0\xe7\x94\xa8 {port} \xe7\xab\xaf\xe5\x8f\xa3\xe7\x9a\x84\xe6\x9c\x8d\xe5\x8a\xa1\xe3\x80\x822\xe3\x80\x81\xe7\x9b\x91\xe5\x90\xacIP\xe9\x80\x89\xe6\x8b\xa9(Any)", "\xe5\x90\xaf\xe7\x94\xa8DNS\xe6\x9c\x8d\xe5\x8a\xa1\xe5\xa4\xb1\xe8\xb4\xa5", MessageBoxButtons.OK, MessageBoxIcon.Error);\n                }));\n                return;\n            }\n\n            Byte[]? comIP = null;\n            if (!string.IsNullOrEmpty(Properties.Settings.Default.ComIP))\n            {\n                comIP = IPAddress.Parse(Properties.Settings.Default.ComIP).GetAddressBytes();\n            }\n            else\n            {\n                if (Form1.bServiceFlag) parentForm.SetTextBox(parentForm.tbComIP, Properties.Settings.Default.LocalIP);\n                comIP = IPAddress.Parse(Properties.Settings.Default.LocalIP).GetAddressBytes();\n            }\n            Byte[]? cnIP = null;\n            if (!string.IsNullOrEmpty(Properties.Settings.Default.CnIP))\n            {\n                cnIP = IPAddress.Parse(Properties.Settings.Default.CnIP).GetAddressBytes();\n            }\n            else\n            {\n                Task.Run(() =>\n                {\n                    string? ip = Properties.Settings.Default.DoH ? ClassDNS.DoH("assets1.xboxlive.cn") : ClassDNS.HostToIP("assets1.xboxlive.cn", Properties.Settings.Default.DnsIP);\n                    if (!string.IsNullOrEmpty(ip))\n                    {\n                        if (Form1.bServiceFlag) parentForm.SetTextBox(parentForm.tbCnIP, ip);\n                        cnIP = IPAddress.Parse(ip).GetAddressBytes();\n                    }\n                });\n            }\n            Byte[]? cnIP2 = null;\n            if (!string.IsNullOrEmpty(Properties.Settings.Default.CnIP2))\n            {\n                cnIP2 = IPAddress.Parse(Properties.Settings.Default.CnIP2).GetAddressBytes();\n            }\n            else\n            {\n                Task.Run(() =>\n                {\n                    string? ip = Properties.Settings.Default.DoH ? ClassDNS.DoH("dlassets.xboxlive.cn") : ClassDNS.HostToIP("dlassets.xboxlive.cn", Properties.Settings.Default.DnsIP);\n                    if (!string.IsNullOrEmpty(ip))\n                    {\n                        if (Form1.bServiceFlag) parentForm.SetTextBox(parentForm.tbCnIP2, ip);\n                        cnIP2 = IPAddress.Parse(ip).GetAddressBytes();\n                    }\n                });\n            }\n            Byte[]? appIP = null;\n            if (!string.IsNullOrEmpty(Properties.Settings.Default.AppIP))\n            {\n                appIP = IPAddress.Parse(Properties.Settings.Default.AppIP).GetAddressBytes();\n            }\n            else\n            {\n                Task.Run(() =>\n                {\n                    string? ip = Properties.Settings.Default.DoH ? ClassDNS.DoH("tlu.dl.delivery.mp.microsoft.com") : ClassDNS.HostToIP("tlu.dl.delivery.mp.microsoft.com", Properties.Settings.Default.DnsIP);\n                    if (!string.IsNullOrEmpty(ip))\n                    {\n                        if (Form1.bServiceFlag) parentForm.SetTextBox(parentForm.tbAppIP, ip);\n                        appIP = IPAddress.Parse(ip).GetAddressBytes();\n                    }\n                });\n            }\n            Byte[]? psIP = null;\n            if (!string.IsNullOrEmpty(Properties.Settings.Default.PSIP))\n            {\n                psIP = IPAddress.Parse(Properties.Settings.Default.PSIP).GetAddressBytes();\n            }\n            else\n            {\n                Task.Run(() =>\n                {\n                    string? ip = Properties.Settings.Default.DoH ? ClassDNS.DoH("gst.prod.dl.playstation.net") : ClassDNS.HostToIP("gst.prod.dl.playstation.net", Properties.Settings.Default.DnsIP);\n                    if (!string.IsNullOrEmpty(ip))\n                    {\n                        if (Form1.bServiceFlag) parentForm.SetTextBox(parentForm.tbPSIP, ip);\n                        psIP = IPAddress.Parse(ip).GetAddressBytes();\n                    }\n                });\n            }\n            Byte[]? nsIP = null;\n            if (!string.IsNullOrEmpty(Properties.Settings.Default.NSIP))\n            {\n                nsIP = IPAddress.Parse(Properties.Settings.Default.NSIP).GetAddressBytes();\n            }\n            else\n            {\n                Task.Run(() =>\n                {\n                    string? ip = Properties.Settings.Default.DoH ? ClassDNS.DoH("atum.hac.lp1.d4c.nintendo.net") : ClassDNS.HostToIP("atum.hac.lp1.d4c.nintendo.net", Properties.Settings.Default.DnsIP);\n                    if (!string.IsNullOrEmpty(ip))\n                    {\n                        if (Form1.bServiceFlag) parentForm.SetTextBox(parentForm.tbNSIP, ip);\n                        nsIP = IPAddress.Parse(ip).GetAddressBytes();\n                    }\n                });\n            }\n            Byte[]? eaIP = null;\n            if (!string.IsNullOrEmpty(Properties.Settings.Default.EAIP))\n            {\n                eaIP = IPAddress.Parse(Properties.Settings.Default.EAIP).GetAddressBytes();\n            }\n            else\n            {\n                Task.Run(() =>\n                {\n                    string? ip = Properties.Settings.Default.DoH ? ClassDNS.DoH("origin-a.akamaihd.net") : ClassDNS.HostToIP("origin-a.akamaihd.net", Properties.Settings.Default.DnsIP);\n                    if (!string.IsNullOrEmpty(ip))\n                    {\n                        if (Form1.bServiceFlag) parentForm.SetTextBox(parentForm.tbEAIP, ip);\n                        eaIP = IPAddress.Parse(ip).GetAddressBytes();\n                    }\n                });\n            }\n            Byte[]? battleIP = null;\n            if (!string.IsNullOrEmpty(Properties.Settings.Default.BattleIP))\n            {\n                battleIP = IPAddress.Parse(Properties.Settings.Default.BattleIP).GetAddressBytes();\n            }\n            else\n            {\n                Task.Run(() =>\n                {\n                    string? ip = Properties.Settings.Default.DoH ? ClassDNS.DoH("blzddist1-a.akamaihd.net") : ClassDNS.HostToIP("blzddist1-a.akamaihd.net", Properties.Settings.Default.DnsIP);\n                    if (!string.IsNullOrEmpty(ip))\n                    {\n                        if (Form1.bServiceFlag) parentForm.SetTextBox(parentForm.tbBattleIP, ip);\n                        battleIP = IPAddress.Parse(ip).GetAddressBytes();\n                    }\n                });\n            }\n            Byte[]? epicIP = null;\n            if (!string.IsNullOrEmpty(Properties.Settings.Default.EpicIP))\n            {\n                epicIP = IPAddress.Parse(Properties.Settings.Default.EpicIP).GetAddressBytes();\n            }\n            else\n            {\n                Task.Run(() =>\n                {\n                    string? ip = Properties.Settings.Default.DoH ? ClassDNS.DoH("epicgames-download1-1251447533.file.myqcloud.com") : ClassDNS.HostToIP("epicgames-download1-1251447533.file.myqcloud.com", Properties.Settings.Default.DnsIP);\n                    if (!string.IsNullOrEmpty(ip))\n                    {\n                        if (Form1.bServiceFlag) parentForm.SetTextBox(parentForm.tbEpicIP, ip);\n                        epicIP = IPAddress.Parse(ip).GetAddressBytes();\n                    }\n                });\n            }\n            if (Properties.Settings.Default.SetDns) ClassDNS.SetNetworkAdapter(null, null, null, new string[] { Properties.Settings.Default.LocalIP });\n            while (Form1.bServiceFlag)\n            {\n                try\n                {\n                    var client = (EndPoint)new IPEndPoint(IPAddress.Any, 0);\n                    var buff = new byte[512];\n                    int read = socket.ReceiveFrom(buff, ref client);\n                    Task.Factory.StartNew(() =>\n                    {\n                        var dns = new DNS(buff, read);\n                        if (dns.QR == 0 && dns.Opcode == 0 && dns.Querys.Count == 1 && (dns.Querys[0].QueryType == QueryType.A || dns.Querys[0].QueryType == QueryType.AAAA))\n                        {\n                            if (dns.Querys[0].QueryType == QueryType.A)\n                            {\n                                string queryName = (dns.Querys[0].QueryName ?? string.Empty).ToLower();\n                                Byte[]? byteIP = null;\n                                int argb = 0;\n                                switch (queryName)\n                                {\n                                    case "assets1.xboxlive.com":\n                                    case "assets2.xboxlive.com":\n                                    case "dlassets.xboxlive.com":\n                                    case "dlassets2.xboxlive.com":\n                                    case "d1.xboxlive.com":\n                                    case "d2.xboxlive.com":\n                                    case "xvcf1.xboxlive.com":\n                                    case "xvcf2.xboxlive.com":\n                                        byteIP = comIP;\n                                        argb = 0x008000;\n                                        break;\n                                    case "assets1.xboxlive.cn":\n                                    case "assets2.xboxlive.cn":\n                                    case "d1.xboxlive.cn":\n                                    case "d2.xboxlive.cn":\n                                        byteIP = cnIP;\n                                        argb = 0x008000;\n                                        break;\n                                    case "dlassets.xboxlive.cn":\n                                    case "dlassets2.xboxlive.cn":\n                                        byteIP = cnIP2;\n                                        argb = 0x008000;\n                                        break;\n                                    case "dl.delivery.mp.microsoft.com":\n                                    case "tlu.dl.delivery.mp.microsoft.com":\n                                        byteIP = appIP;\n                                        argb = 0x008000;\n                                        break;\n                                    case "gst.prod.dl.playstation.net":\n                                    case "gs2.ww.prod.dl.playstation.net":\n                                    case "zeus.dl.playstation.net":\n                                    case "ares.dl.playstation.net":\n                                        byteIP = psIP;\n                                        argb = 0x008000;\n                                        break;\n                                    case "atum.hac.lp1.d4c.nintendo.net":\n                                    case "bugyo.hac.lp1.eshop.nintendo.net":\n                                    case "ctest-dl-lp1.cdn.nintendo.net":\n                                    case "ctest-ul-lp1.cdn.nintendo.net":\n                                        byteIP = nsIP;\n                                        argb = 0x008000;\n                                        break;\n                                    case "atum-eda.hac.lp1.d4c.nintendo.net":\n                                        byteIP = new byte[4];\n                                        argb = 0x008000;\n                                        break;\n                                    case "origin-a.akamaihd.net":\n                                        byteIP = eaIP;\n                                        argb = 0x008000;\n                                        break;\n                                    case "blzddist1-a.akamaihd.net":\n                                    case "blzddist2-a.akamaihd.net":\n                                    case "blzddist3-a.akamaihd.net":\n                                        byteIP = battleIP;\n                                        argb = 0x008000;\n                                        break;\n                                    case "epicgames-download1-1251447533.file.myqcloud.com":\n                                        byteIP = epicIP;\n                                        argb = 0x008000;\n                                        break;\n                                    case "www.msftconnecttest.com":\n                                    case "ctest.cdn.nintendo.net":\n                                        if (Properties.Settings.Default.HttpService)\n                                        {\n                                            byteIP = IPAddress.Parse(Properties.Settings.Default.LocalIP).GetAddressBytes();\n                                            argb = 0x008000;\n                                        }\n                                        break;\n                                    default:\n                                        if (dicHosts.TryGetValue(queryName, out byteIP))\n                                        {\n                                            argb = 0x0000FF;\n                                        }\n                                        break;\n                                }\n                                if (byteIP != null)\n                                {\n                                    dns.QR = 1;\n                                    dns.RA = 1;\n                                    dns.RD = 1;\n                                    dns.ResouceRecords = new List<ResouceRecord>\n                                    {\n                                        new ResouceRecord\n                                        {\n                                            Datas = byteIP,\n                                            TTL = 100,\n                                            QueryClass = 1,\n                                            QueryType = QueryType.A\n                                        }\n                                    };\n                                    socket.SendTo(dns.ToBytes(), client);\n                                    if (Properties.Settings.Default.RecordLog) parentForm.SaveLog("DNS \xe6\x9f\xa5\xe8\xaf\xa2", queryName + " -> " + (new IPAddress(byteIP)), ((IPEndPoint)client).Address.ToString(), argb);\n                                    return;\n                                }\n                                if (Properties.Settings.Default.EnableCdnIP)\n                                {\n                                    if (dicCdnHosts1.TryGetValue(queryName, out List<ResouceRecord>? lsIp))\n                                    {\n                                        argb = 0x0000FF;\n                                        List<ResouceRecord> lsResouceRecord = lsIp.OrderBy(a => Guid.NewGuid()).Take(16).ToList();\n                                        dns.QR = 1;\n                                        dns.RA = 1;\n                                        dns.RD = 1;\n                                        dns.ResouceRecords = lsResouceRecord;\n                                        socket.SendTo(dns.ToBytes(), client);\n                                        if (Properties.Settings.Default.RecordLog) parentForm.SaveLog("DNS \xe6\x9f\xa5\xe8\xaf\xa2", queryName + " -> " + string.Join(", ", lsResouceRecord.Select(a => new IPAddress(a.Datas ?? Array.Empty<byte>()).ToString()).ToArray()), ((IPEndPoint)client).Address.ToString(), argb);\n                                        return;\n                                    }\n                                    foreach (var item in dicCdnHosts2)\n                                    {\n                                        if (item.Key.IsMatch(queryName))\n                                        {\n                                            DnsListen.dicCdnHosts1.TryAdd(queryName, item.Value);\n                                            argb = 0x0000FF;\n                                            List<ResouceRecord> lsResouceRecord = item.Value.OrderBy(a => Guid.NewGuid()).Take(16).ToList();\n                                            dns.QR = 1;\n                                            dns.RA = 1;\n                                            dns.RD = 1;\n                                            dns.ResouceRecords = lsResouceRecord;\n                                            socket.SendTo(dns.ToBytes(), client);\n                                            if (Properties.Settings.Default.RecordLog) parentForm.SaveLog("DNS \xe6\x9f\xa5\xe8\xaf\xa2", queryName + " -> " + string.Join(", ", lsResouceRecord.Select(a => new IPAddress(a.Datas ?? Array.Empty<byte>()).ToString()).ToArray()), ((IPEndPoint)client).Address.ToString(), argb);\n                                            return;\n                                        }\n                                    }\n                                }\n                                if (Properties.Settings.Default.DoH && !reDohBlacklist.IsMatch(queryName))\n                                {\n                                    string html = ClassWeb.HttpResponseContent(this.dohServer + "/resolve?name=" + ClassWeb.UrlEncode(queryName) + "&type=A", "GET", null, null, null, 6000);\n                                    if (Regex.IsMatch(html.Trim(), @"^{.+}$"))\n                                    {\n                                        try\n                                        {\n                                            var json = JsonSerializer.Deserialize<ClassDNS.Api>(html, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });\n                                            if (json != null && json.Answer != null)\n                                            {\n                                                if (json.Status == 0)\n                                                {\n                                                    dns.QR = 1;\n                                                    dns.RA = 1;\n                                                    dns.RD = 1;\n                                                    dns.ResouceRecords = new List<ResouceRecord>();\n                                                    foreach (var answer in json.Answer)\n                                                    {\n                                                        if (answer.Type == 1 && IPAddress.TryParse(answer.Data, out IPAddress? ipAddress))\n                                                        {\n                                                            dns.ResouceRecords.Add(new ResouceRecord\n                                                            {\n                                                                Datas = ipAddress.GetAddressBytes(),\n                                                                TTL = answer.TTL,\n                                                                QueryClass = 1,\n                                                                QueryType = QueryType.A\n                                                            });\n                                                        }\n                                                    }\n                                                    socket.SendTo(dns.ToBytes(), client);\n                                                    var arrIp = json.Answer.Where(x => x.Type == 1).Select(x => x.Data);\n                                                    if (arrIp != null)\n                                                    {\n                                                        if (Properties.Settings.Default.RecordLog) parentForm.SaveLog("DNS \xe6\x9f\xa5\xe8\xaf\xa2", queryName + " -> " + string.Join(", ", arrIp.ToArray()), ((IPEndPoint)client).Address.ToString(), argb);\n                                                    }\n                                                    return;\n                                                }\n                                            }\n                                        }\n                                        catch { }\n                                    }\n                                }\n                                if (Properties.Settings.Default.RecordLog) parentForm.SaveLog("DNS \xe6\x9f\xa5\xe8\xaf\xa2", queryName, ((IPEndPoint)client).Address.ToString(), argb);\n                            }\n                            else // \xe5\xb1\x8f\xe8\x94\xbdIPv6\n                            {\n                                socket.SendTo(Array.Empty<byte>(), client);\n                                return;\n                            }\n                        }\n                        try\n                        {\n                            var proxy = new UdpClient();\n                            proxy.Client.ReceiveTimeout = 6000;\n                            proxy.Connect(iPEndPoint);\n                            proxy.Send(buff, read);\n                            var bytes = proxy.Receive(ref iPEndPoint);\n                            socket.SendTo(bytes, client);\n                        }\n                        catch (Exception ex)\n                        {\n                            if (Properties.Settings.Default.RecordLog) parentForm.SaveLog("DNS \xe6\x9f\xa5\xe8\xaf\xa2", ex.Message, ((IPEndPoint)client).Address.ToString());\n                        }\n                    });\n                }\n                catch { }\n            }\n        }\n\n        public void Close()\n        {\n            if (socket != null)\n            {\n                socket.Close();\n                socket.Dispose();\n                socket = null;\n            }\n        }\n    }\n\n    public enum QueryType\n    {\n        A = 1,\n        NS = 2,\n        MD = 3,\n        MF = 4,\n        CNAME = 5,\n        SOA = 6,\n        MB = 7,\n        MG = 8,\n        MR = 9,\n        WKS = 11,\n        PTR = 12,\n        HINFO = 13,\n        MINFO = 14,\n        MX = 15,\n        TXT = 16,\n        AAAA = 28,\n        AXFR = 252,\n        ANY = 255\n    }\n\n    public class Query\n    {\n        public string? QueryName { get; set; }\n        public QueryType QueryType { get; set; }\n        public Int16 QueryClass { get; set; }\n\n        public Query()\n        {\n        }\n\n        public Query(Func<int, byte[]> read)\n        {\n            var name = new StringBuilder();\n            var length = read(1)[0];\n            while (length != 0)\n            {\n                for (var i = 0; i < length; i++)\n                {\n                    name.Append((char)read(1)[0]);\n                }\n                length = read(1)[0];\n                if (length != 0)\n                    name.Append(\'.\');\n            }\n            QueryName = name.ToString();\n\n            QueryType = (QueryType)IPAddress.NetworkToHostOrder(BitConverter.ToInt16(read(2), 0));\n            QueryClass = IPAddress.NetworkToHostOrder(BitConverter.ToInt16(read(2), 0));\n        }\n\n        public virtual byte[] ToBytes()\n        {\n            var list = new List<byte>();\n\n            if (QueryName != null)\n            {\n                var a = QueryName.Split(new char[] { \'.\' }, StringSplitOptions.RemoveEmptyEntries);\n                for (var i = 0; i < a.Length; i++)\n                {\n                    list.Add((byte)a[i].Length);\n                    for (var j = 0; j < a[i].Length; j++)\n                        list.Add((byte)a[i][j]);\n                }\n                list.Add(0);\n            }\n\n            list.AddRange(BitConverter.GetBytes(IPAddress.HostToNetworkOrder((Int16)QueryType)));\n            list.AddRange(BitConverter.GetBytes(IPAddress.HostToNetworkOrder(QueryClass)));\n\n            return list.ToArray();\n        }\n    }\n\n    public class ResouceRecord : Query\n    {\n        public Int16 Point { get; set; }\n        public Int32 TTL { get; set; }\n        public byte[]? Datas { get; set; }\n\n        public ResouceRecord() : base()\n        {\n            var bytes = new byte[] { 0xc0, 0x0c };\n            Point = IPAddress.NetworkToHostOrder(BitConverter.ToInt16(bytes, 0));\n        }\n\n        public ResouceRecord(Func<int, byte[]> read) : base()\n        {\n            TTL = IPAddress.NetworkToHostOrder(BitConverter.ToInt32(read(4), 0));\n            var length = IPAddress.NetworkToHostOrder(BitConverter.ToInt16(read(2), 0));\n            Datas = read(length);\n        }\n        public override byte[] ToBytes()\n        {\n            var list = new List<byte>();\n            list.AddRange(BitConverter.GetBytes(IPAddress.HostToNetworkOrder(Point)));\n            list.AddRange(BitConverter.GetBytes(IPAddress.HostToNetworkOrder((Int16)QueryType)));\n            list.AddRange(BitConverter.GetBytes(IPAddress.HostToNetworkOrder(QueryClass)));\n            list.AddRange(BitConverter.GetBytes(IPAddress.HostToNetworkOrder(TTL)));\n            if (Datas != null)\n            {\n                list.AddRange(BitConverter.GetBytes(IPAddress.HostToNetworkOrder((Int16)Datas.Length)));\n                list.AddRange(Datas);\n            }\n\n            return list.ToArray();\n        }\n    }\n\n    public class DNS\n    {\n        public Int16 \xe6\xa0\x87\xe5\xbf\x97 { get; set; }\n        public int QR { get; set; }     //0\xe8\xa1\xa8\xe7\xa4\xba\xe6\x9f\xa5\xe8\xaf\xa2\xe6\x8a\xa5\xe6\x96\x87 1\xe8\xa1\xa8\xe7\xa4\xba\xe5\x93\x8d\xe5\xba\x94\xe6\x8a\xa5\xe6\x96\x87\n        public int Opcode { get; set; } //0\xe8\xa1\xa8\xe7\xa4\xba\xe6\xa0\x87\xe5\x87\x86\xe6\x9f\xa5\xe8\xaf\xa2,1\xe8\xa1\xa8\xe7\xa4\xba\xe5\x8f\x8d\xe5\x90\x91\xe6\x9f\xa5\xe8\xaf\xa2,2\xe8\xa1\xa8\xe7\xa4\xba\xe6\x9c\x8d\xe5\x8a\xa1\xe5\x99\xa8\xe7\x8a\xb6\xe6\x80\x81\xe8\xaf\xb7\xe6\xb1\x82\n        public int AA { get; set; }  //\xe6\x8e\x88\xe6\x9d\x83\xe5\x9b\x9e\xe7\xad\x94\n        public int TC { get; set; } //\xe8\xa1\xa8\xe7\xa4\xba\xe5\x8f\xaf\xe6\x88\xaa\xe6\x96\xad\xe7\x9a\x84\n        public int RD { get; set; } //\xe8\xa1\xa8\xe7\xa4\xba\xe6\x9c\x9f\xe6\x9c\x9b\xe9\x80\x92\xe5\xbd\x92\n        public int RA { get; set; } //\xe8\xa1\xa8\xe7\xa4\xba\xe5\x8f\xaf\xe7\x94\xa8\xe9\x80\x92\xe5\xbd\x92\n        public int Rcode { get; set; } //0\xe8\xa1\xa8\xe7\xa4\xba\xe6\xb2\xa1\xe6\x9c\x89\xe9\x94\x99\xe8\xaf\xaf,3\xe8\xa1\xa8\xe7\xa4\xba\xe5\x90\x8d\xe5\xad\x97\xe9\x94\x99\xe8\xaf\xaf\n\n        public List<Query> Querys { get; set; }  //\xe9\x97\xae\xe9\xa2\x98\xe6\x95\xb0\n        public List<ResouceRecord>? ResouceRecords { get; set; }  //\xe8\xb5\x84\xe6\xba\x90\xe8\xae\xb0\xe5\xbd\x95\xe6\x95\xb0\n        public Int16 \xe6\x8e\x88\xe6\x9d\x83\xe8\xb5\x84\xe6\xba\x90\xe8\xae\xb0\xe5\xbd\x95\xe6\x95\xb0 { get; set; }\n        public Int16 \xe9\xa2\x9d\xe5\xa4\x96\xe8\xb5\x84\xe6\xba\x90\xe8\xae\xb0\xe5\xbd\x95\xe6\x95\xb0 { get; set; }\n\n        public byte[] ToBytes()\n        {\n            var list = new List<byte>();\n            var bytes = BitConverter.GetBytes(IPAddress.HostToNetworkOrder(\xe6\xa0\x87\xe5\xbf\x97));\n            list.AddRange(bytes);\n            var b = new byte();\n            b = b.SetBits(QR, 0, 1)\n                .SetBits(Opcode, 1, 4)\n                .SetBits(AA, 5, 1)\n                .SetBits(TC, 6, 1);\n\n            b = b.SetBits(RD, 7, 1);\n            list.Add(b);\n            b = new byte();\n            b = b.SetBits(RA, 0, 1)\n                .SetBits(0, 1, 3)\n                .SetBits(Rcode, 4, 4);\n            list.Add(b);\n\n            list.AddRange(BitConverter.GetBytes(IPAddress.HostToNetworkOrder((Int16)Querys.Count)));\n            if (ResouceRecords != null)\n                list.AddRange(BitConverter.GetBytes(IPAddress.HostToNetworkOrder((Int16)ResouceRecords.Count)));\n            list.AddRange(BitConverter.GetBytes(IPAddress.HostToNetworkOrder(\xe6\x8e\x88\xe6\x9d\x83\xe8\xb5\x84\xe6\xba\x90\xe8\xae\xb0\xe5\xbd\x95\xe6\x95\xb0)));\n            list.AddRange(BitConverter.GetBytes(IPAddress.HostToNetworkOrder(\xe9\xa2\x9d\xe5\xa4\x96\xe8\xb5\x84\xe6\xba\x90\xe8\xae\xb0\xe5\xbd\x95\xe6\x95\xb0)));\n\n            foreach (var q in Querys)\n            {\n                list.AddRange(q.ToBytes());\n            }\n            if (ResouceRecords != null)\n            {\n                foreach (var r in ResouceRecords)\n                {\n                    list.AddRange(r.ToBytes());\n                }\n            }\n\n            return list.ToArray();\n        }\n\n        private int index;\n        private readonly byte[] package;\n        private byte ReadByte()\n        {\n            return package[index++];\n        }\n        private byte[] ReadBytes(int count = 1)\n        {\n            var bytes = new byte[count];\n            for (var i = 0; i < count; i++)\n                bytes[i] = ReadByte();\n            return bytes;\n        }\n\n        public DNS(byte[] buffer, int length)\n        {\n            package = new byte[length];\n            for (var i = 0; i < length; i++)\n                package[i] = buffer[i];\n\n            \xe6\xa0\x87\xe5\xbf\x97 = IPAddress.NetworkToHostOrder(BitConverter.ToInt16(ReadBytes(2), 0));\n\n            var b1 = ReadByte();\n            var b2 = ReadByte();\n\n            QR = b1.GetBits(0, 1);\n            Opcode = b1.GetBits(1, 4);\n            AA = b1.GetBits(5, 1);\n            TC = b1.GetBits(6, 1);\n            RD = b1.GetBits(7, 1);\n\n            RA = b2.GetBits(0, 1);\n            Rcode = b2.GetBits(4, 4);\n\n            var queryCount = IPAddress.NetworkToHostOrder(BitConverter.ToInt16(ReadBytes(2), 0));\n            var rrCount = IPAddress.NetworkToHostOrder(BitConverter.ToInt16(ReadBytes(2), 0));\n\n            \xe6\x8e\x88\xe6\x9d\x83\xe8\xb5\x84\xe6\xba\x90\xe8\xae\xb0\xe5\xbd\x95\xe6\x95\xb0 = IPAddress.NetworkToHostOrder(BitConverter.ToInt16(ReadBytes(2), 0));\n            \xe9\xa2\x9d\xe5\xa4\x96\xe8\xb5\x84\xe6\xba\x90\xe8\xae\xb0\xe5\xbd\x95\xe6\x95\xb0 = IPAddress.NetworkToHostOrder(BitConverter.ToInt16(ReadBytes(2), 0));\n\n            Querys = new List<Query>();\n            for (var i = 0; i < queryCount; i++)\n            {\n                Querys.Add(new Query(ReadBytes));\n            }\n\n            for (var i = 0; i < rrCount; i++)\n            {\n                ResouceRecords?.Add(new ResouceRecord(ReadBytes));\n            }\n        }\n    }\n\n    public static class Extension\n    {\n        public static int GetBits(this byte b, int start, int length)\n        {\n            var temp = b >> (8 - start - length);\n            var mask = 0;\n            for (var i = 0; i < length; i++)\n            {\n                mask = (mask << 1) + 1;\n            }\n\n            return temp & mask;\n        }\n\n        public static byte SetBits(this byte b, int data, int start, int length)\n        {\n            var temp = b;\n\n            var mask = 0xFF;\n            for (var i = 0; i < length; i++)\n            {\n                mask -= (0x01 << (7 - (start + i)));\n            }\n            temp = (byte)(temp & mask);\n\n            mask = ((byte)data).GetBits(8 - length, length);\n            mask <<= (7 - start);\n\n            return (byte)(temp | mask);\n        }\n    }\n\n    internal class ClassDNS\n    {\n        public static void SetNetworkAdapter(string[]? ip, string[]? submask, string[]? getway, string[]? dns)\n        {\n            ManagementClass wmi = new("Win32_NetworkAdapterConfiguration");\n            ManagementObjectCollection moc = wmi.GetInstances();\n            ManagementBaseObject inPar;\n            ManagementBaseObject outPar;\n            InvokeMethodOptions methodOptions = new();\n            foreach (ManagementObject mo in moc.Cast<ManagementObject>())\n            {\n                //\xe5\xa6\x82\xe6\x9e\x9c\xe6\xb2\xa1\xe6\x9c\x89\xe5\x90\xaf\xe7\x94\xa8IP\xe8\xae\xbe\xe7\xbd\xae\xe7\x9a\x84\xe7\xbd\x91\xe7\xbb\x9c\xe8\xae\xbe\xe5\xa4\x87\xe5\x88\x99\xe8\xb7\xb3\xe8\xbf\x87\n                if (!(bool)mo["IPEnabled"])\n                    continue;\n                //\xe8\xae\xbe\xe7\xbd\xaeIP\xe5\x9c\xb0\xe5\x9d\x80\xe5\x92\x8c\xe6\x8e\xa9\xe7\xa0\x81\n                if (ip != null && submask != null)\n                {\n                    inPar = mo.GetMethodParameters("EnableStatic");\n                    inPar["IPAddress"] = ip;\n                    inPar["SubnetMask"] = submask;\n                    outPar = mo.InvokeMethod("EnableStatic", inPar, methodOptions);\n                }\n                //\xe8\xae\xbe\xe7\xbd\xae\xe7\xbd\x91\xe5\x85\xb3\xe5\x9c\xb0\xe5\x9d\x80\n                if (getway != null)\n                {\n                    inPar = mo.GetMethodParameters("SetGateways");\n                    inPar["DefaultIPGateway"] = getway;\n                    outPar = mo.InvokeMethod("SetGateways", inPar, methodOptions);\n                }\n                //\xe8\xae\xbe\xe7\xbd\xaeDNS\xe5\x9c\xb0\xe5\x9d\x80\n                if (dns != null)\n                {\n                    inPar = mo.GetMethodParameters("SetDNSServerSearchOrder");\n                    if (dns.Length == 0)\n                        DnsListen.dicDns.TryGetValue(mo["MacAddress"].ToString()?.Replace(":", "").ToUpper() ?? string.Empty, out dns);\n                    inPar["DNSServerSearchOrder"] = dns ?? Array.Empty<string>();\n                    outPar = mo.InvokeMethod("SetDNSServerSearchOrder", inPar, methodOptions);\n                }\n            }\n        }\n\n        public static string QueryLocation(string ip)\n        {\n            if (Regex.IsMatch(ip, @"^(127\\.0\\.0\\.1)|(10\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})|(172\\.((1[6-9])|(2\\d)|(3[01]))\\.\\d{1,3}\\.\\d{1,3})|(192\\.168\\.\\d{1,3}\\.\\d{1,3})$")) return "\xe6\x9c\xac\xe5\x9c\xb0\xe5\xb1\x80\xe5\x9f\x9f\xe7\xbd\x91IP";\n            string html = ClassWeb.HttpResponseContent("https://www.ipshudi.com/" + ip + ".htm", "GET", null, null, null, 6000);\n            Match result = Regex.Match(html, @"<tr>\\n<td[^>]*>\xe5\xbd\x92\xe5\xb1\x9e\xe5\x9c\xb0</td>\\n<td>\\n<span>(?<location1>[^<]*)</span>\\n<a[^>]*>\xe4\xb8\x8a\xe6\x8a\xa5\xe7\xba\xa0\xe9\x94\x99</a>\\n</td>\\n</tr>\\n<tr><td[^>]*>\xe8\xbf\x90\xe8\x90\xa5\xe5\x95\x86</td><td><span>(?<location2>[^<]+)</span></td></tr>");\n            if (result.Success)\n            {\n                return result.Groups["location1"].Value.Trim() + result.Groups["location2"].Value.Trim() + " (\xe6\x9d\xa5\xe6\xba\x90\xef\xbc\x9aip138.com)";\n            }\n            else\n            {\n                html = ClassWeb.HttpResponseContent("https://www.ip.cn/ip/" + ip + ".html", "GET", null, null, null, 6000);\n                result = Regex.Match(html, @"<div id=""tab0_address"">(?<location>[^<]*)</div>");\n                if (result.Success)\n                {\n                    return result.Groups["location"].Value.Trim() + " (\xe6\x9d\xa5\xe6\xba\x90\xef\xbc\x9aip.cn)";\n                }\n            }\n            return "";\n        }\n\n        public static string? HostToIP(string hostName, string? dnsServer = null)\n        {\n            string? ip = null;\n            if (string.IsNullOrEmpty(dnsServer))\n            {\n                IPAddress[] ipAddresses = Array.FindAll(Dns.GetHostEntry(hostName).AddressList, a => a.AddressFamily == AddressFamily.InterNetwork);\n                if (ipAddresses.Length >= 1) ip = ipAddresses[0].ToString();\n            }\n            else\n            {\n                string resultInfo = string.Empty;\n                using (Process p = new())\n                {\n                    p.StartInfo = new ProcessStartInfo("nslookup", hostName + " " + dnsServer)\n                    {\n                        CreateNoWindow = true,\n                        UseShellExecute = false,\n                        WindowStyle = ProcessWindowStyle.Hidden,\n                        RedirectStandardOutput = true\n                    };\n                    p.Start();\n                    resultInfo = p.StandardOutput.ReadToEnd();\n                    p.Close();\n                }\n                MatchCollection mc = Regex.Matches(resultInfo, @":\\s*(?<ip>\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})");\n                if (mc.Count == 2)\n                    ip = mc[1].Groups["ip"].Value;\n            }\n            return ip;\n        }\n\n        public static string? DoH(string hostName, string dohServer = "223.5.5.5")\n        {\n            string? ip = null;\n            string html = ClassWeb.HttpResponseContent("https://" + dohServer + "/resolve?name=" + ClassWeb.UrlEncode(hostName) + "&type=A", "GET", null, null, null, 6000);\n            if (Regex.IsMatch(html.Trim(), @"^{.+}$"))\n            {\n                try\n                {\n                    var json = JsonSerializer.Deserialize<ClassDNS.Api>(html, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });\n                    if (json != null && json.Answer != null)\n                    {\n                        if (json.Status == 0 && json.Answer.Count >= 1)\n                        {\n                            ip = json.Answer.Where(x => x.Type == 1).Select(x => x.Data).FirstOrDefault();\n                        }\n                    }\n                }\n                catch { }\n            }\n            return ip;\n        }\n\n        public class Api\n        {\n            public int Status { get; set; }\n            public bool TC { get; set; }\n            public bool RD { get; set; }\n            public bool RA { get; set; }\n            public bool AD { get; set; }\n            public bool CD { get; set; }\n            public class Question\n            {\n                public string? Name { get; set; }\n                public int Type { get; set; }\n            }\n            public List<Answer>? Answer { get; set; }\n            public List<Answer>? Authority { get; set; }\n            public List<Answer>? Additional { get; set; }\n            public string? Edns_client_subnet { get; set; }\n        }\n\n        public class Answer\n        {\n            public string? Name { get; set; }\n            public int TTL { get; set; }\n            public int Type { get; set; }\n            public string? Data { get; set; }\n        }\n    }\n}\n'