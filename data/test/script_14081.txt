b'\xef\xbb\xbfusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing Castle.DynamicProxy;\nusing Core.CrossCuttingConcerns.Caching;\nusing Core.Utilities.Interceptors;\nusing Core.Utilities.IoC;\nusing Microsoft.Extensions.DependencyInjection;\n\nnamespace Core.Aspects.Autofac.Caching\n{\n    public class CacheAspect:MethodInterception\n    {\n        private int _duration;\n        private ICacheManager _cacheManager;\n\n        public CacheAspect(int duration=60)\n        {\n            _duration = duration;\n            _cacheManager = ServiceTool.ServiceProvider.GetService<ICacheManager>();\n        }\n\n        public override void Intercept(IInvocation invocation)\n        {\n            var methodName = string.Format($"{invocation.Method.ReflectedType.FullName}.{invocation.Method.Name}");\n            var arguments = invocation.Arguments.ToList();\n            var key = $"{methodName}({string.Join(",",arguments.Select(x=>x?.ToString()??"<Null>"))})";\n            if (_cacheManager.IsAdd(key))\n            {\n                invocation.ReturnValue = _cacheManager.Get(key);\n                return;\n            }\n            invocation.Proceed();\n            _cacheManager.Add(key,invocation.ReturnValue,_duration);\n        }\n    }\n}\n'