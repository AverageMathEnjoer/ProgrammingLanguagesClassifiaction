b'\xef\xbb\xbfusing System;\nusing System.Collections.Generic;\nusing System.Text;\nusing System.Runtime.InteropServices;\nusing BrowserGhost;\nusing System.Security.Cryptography;\n\nnamespace BrowserGhost\n{\n    public static class BCrypt\n    {\n        public const uint ERROR_SUCCESS = 0x00000000;\n        public const uint BCRYPT_PAD_PSS = 8;\n        public const uint BCRYPT_PAD_OAEP = 4;\n\n        public static readonly byte[] BCRYPT_KEY_DATA_BLOB_MAGIC = BitConverter.GetBytes(0x4d42444b);\n\n        public static readonly string BCRYPT_OBJECT_LENGTH = "ObjectLength";\n        public static readonly string BCRYPT_CHAIN_MODE_GCM = "ChainingModeGCM";\n        public static readonly string BCRYPT_AUTH_TAG_LENGTH = "AuthTagLength";\n        public static readonly string BCRYPT_CHAINING_MODE = "ChainingMode";\n        public static readonly string BCRYPT_KEY_DATA_BLOB = "KeyDataBlob";\n        public static readonly string BCRYPT_AES_ALGORITHM = "AES";\n\n        public static readonly string MS_PRIMITIVE_PROVIDER = "Microsoft Primitive Provider";\n\n        public static readonly int BCRYPT_AUTH_MODE_CHAIN_CALLS_FLAG = 0x00000001;\n        public static readonly int BCRYPT_INIT_AUTH_MODE_INFO_VERSION = 0x00000001;\n\n        public static readonly uint STATUS_AUTH_TAG_MISMATCH = 0xC000A002;\n\n        [StructLayout(LayoutKind.Sequential)]\n        public struct BCRYPT_PSS_PADDING_INFO\n        {\n            public BCRYPT_PSS_PADDING_INFO(string pszAlgId, int cbSalt)\n            {\n                this.pszAlgId = pszAlgId;\n                this.cbSalt = cbSalt;\n            }\n\n            [MarshalAs(UnmanagedType.LPWStr)]\n            public string pszAlgId;\n            public int cbSalt;\n        }\n\n        [StructLayout(LayoutKind.Sequential)]\n        public struct BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO : IDisposable\n        {\n            public int cbSize;\n            public int dwInfoVersion;\n            public IntPtr pbNonce;\n            public int cbNonce;\n            public IntPtr pbAuthData;\n            public int cbAuthData;\n            public IntPtr pbTag;\n            public int cbTag;\n            public IntPtr pbMacContext;\n            public int cbMacContext;\n            public int cbAAD;\n            public long cbData;\n            public int dwFlags;\n\n            public BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO(byte[] iv, byte[] aad, byte[] tag) : this()\n            {\n                dwInfoVersion = BCRYPT_INIT_AUTH_MODE_INFO_VERSION;\n                cbSize = Marshal.SizeOf(typeof(BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO));\n\n                if (iv != null)\n                {\n                    cbNonce = iv.Length;\n                    pbNonce = Marshal.AllocHGlobal(cbNonce);\n                    Marshal.Copy(iv, 0, pbNonce, cbNonce);\n                }\n\n                if (aad != null)\n                {\n                    cbAuthData = aad.Length;\n                    pbAuthData = Marshal.AllocHGlobal(cbAuthData);\n                    Marshal.Copy(aad, 0, pbAuthData, cbAuthData);\n                }\n\n                if (tag != null)\n                {\n                    cbTag = tag.Length;\n                    pbTag = Marshal.AllocHGlobal(cbTag);\n                    Marshal.Copy(tag, 0, pbTag, cbTag);\n\n                    cbMacContext = tag.Length;\n                    pbMacContext = Marshal.AllocHGlobal(cbMacContext);\n                }\n            }\n\n            public void Dispose()\n            {\n                if (pbNonce != IntPtr.Zero) Marshal.FreeHGlobal(pbNonce);\n                if (pbTag != IntPtr.Zero) Marshal.FreeHGlobal(pbTag);\n                if (pbAuthData != IntPtr.Zero) Marshal.FreeHGlobal(pbAuthData);\n                if (pbMacContext != IntPtr.Zero) Marshal.FreeHGlobal(pbMacContext);\n            }\n        }\n\n        [StructLayout(LayoutKind.Sequential)]\n        public struct BCRYPT_KEY_LENGTHS_STRUCT\n        {\n            public int dwMinLength;\n            public int dwMaxLength;\n            public int dwIncrement;\n        }\n\n        [StructLayout(LayoutKind.Sequential)]\n        public struct BCRYPT_OAEP_PADDING_INFO\n        {\n            public BCRYPT_OAEP_PADDING_INFO(string alg)\n            {\n                pszAlgId = alg;\n                pbLabel = IntPtr.Zero;\n                cbLabel = 0;\n            }\n\n            [MarshalAs(UnmanagedType.LPWStr)]\n            public string pszAlgId;\n            public IntPtr pbLabel;\n            public int cbLabel;\n        }\n\n        [DllImport("bcrypt.dll")]\n        public static extern uint BCryptOpenAlgorithmProvider(out IntPtr phAlgorithm,\n                                                              [MarshalAs(UnmanagedType.LPWStr)] string pszAlgId,\n                                                              [MarshalAs(UnmanagedType.LPWStr)] string pszImplementation,\n                                                              uint dwFlags);\n\n        [DllImport("bcrypt.dll")]\n        public static extern uint BCryptCloseAlgorithmProvider(IntPtr hAlgorithm, uint flags);\n\n        [DllImport("bcrypt.dll", EntryPoint = "BCryptGetProperty")]\n        public static extern uint BCryptGetProperty(IntPtr hObject, [MarshalAs(UnmanagedType.LPWStr)] string pszProperty, byte[] pbOutput, int cbOutput, ref int pcbResult, uint flags);\n\n        [DllImport("bcrypt.dll", EntryPoint = "BCryptSetProperty")]\n        internal static extern uint BCryptSetAlgorithmProperty(IntPtr hObject, [MarshalAs(UnmanagedType.LPWStr)] string pszProperty, byte[] pbInput, int cbInput, int dwFlags);\n\n\n        [DllImport("bcrypt.dll")]\n        public static extern uint BCryptImportKey(IntPtr hAlgorithm,\n                                                         IntPtr hImportKey,\n                                                         [MarshalAs(UnmanagedType.LPWStr)] string pszBlobType,\n                                                         out IntPtr phKey,\n                                                         IntPtr pbKeyObject,\n                                                         int cbKeyObject,\n                                                         byte[] pbInput, //blob of type BCRYPT_KEY_DATA_BLOB + raw key data = (dwMagic (4 bytes) | uint dwVersion (4 bytes) | cbKeyData (4 bytes) | data)\n                                                         int cbInput,\n                                                         uint dwFlags);\n\n        [DllImport("bcrypt.dll")]\n        public static extern uint BCryptDestroyKey(IntPtr hKey);\n\n        [DllImport("bcrypt.dll")]\n        public static extern uint BCryptEncrypt(IntPtr hKey,\n                                                byte[] pbInput,\n                                                int cbInput,\n                                                ref BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO pPaddingInfo,\n                                                byte[] pbIV, int cbIV,\n                                                byte[] pbOutput,\n                                                int cbOutput,\n                                                ref int pcbResult,\n                                                uint dwFlags);\n\n        [DllImport("bcrypt.dll")]\n        internal static extern uint BCryptDecrypt(IntPtr hKey,\n                                                  byte[] pbInput,\n                                                  int cbInput,\n                                                  ref BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO pPaddingInfo,\n                                                  byte[] pbIV,\n                                                  int cbIV,\n                                                  byte[] pbOutput,\n                                                  int cbOutput,\n                                                  ref int pcbResult,\n                                                  int dwFlags);\n    }\n\n}'