b'\xef\xbb\xbfusing System;\nusing Asn1;\nusing System.Collections.Generic;\n\nnamespace Rubeus\n{\n    public class KRB_CRED\n    {\n        //KRB-CRED::= [APPLICATION 22] SEQUENCE {\n        //    pvno[0] INTEGER(5),\n        //    msg-type[1] INTEGER(22),\n        //    tickets[2] SEQUENCE OF Ticket,\n        //    enc-part[3] EncryptedData -- EncKrbCredPart\n        //}\n\n        public KRB_CRED()\n        {\n            // defaults for creation\n            pvno = 5;\n            msg_type = 22;\n\n            tickets = new List<Ticket>();\n\n            enc_part = new EncKrbCredPart();\n        }\n\n        public KRB_CRED(byte[] bytes)\n        {\n            RawBytes = bytes;\n            AsnElt asn_KRB_CRED = AsnElt.Decode(bytes, false);\n            this.Decode(asn_KRB_CRED.Sub[0]);\n        }\n\n        public KRB_CRED(AsnElt body)\n        {\n            this.Decode(body);\n        }\n\n        public void Decode(AsnElt body)\n        {\n            tickets = new List<Ticket>();\n\n            foreach (AsnElt s in body.Sub)\n            {\n                switch (s.TagValue)\n                {\n                    case 0:\n                        pvno = Convert.ToInt32(s.Sub[0].GetInteger());\n                        break;\n                    case 1:\n                        msg_type = Convert.ToInt32(s.Sub[0].GetInteger());\n                        break;\n                    case 2:\n                        foreach (AsnElt ae in s.Sub[0].Sub[0].Sub)\n                        {\n                            Ticket ticket = new Ticket(ae);\n                            tickets.Add(ticket);\n                        }\n                        break;\n                    case 3:\n                        enc_part = new EncKrbCredPart(s.Sub[0]);\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }\n\n        public AsnElt Encode()\n        {\n            // pvno            [0] INTEGER (5)\n            AsnElt pvnoAsn = AsnElt.MakeInteger(pvno);\n            AsnElt pvnoSeq = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] { pvnoAsn });\n            pvnoSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 0, pvnoSeq);\n\n\n            // msg-type        [1] INTEGER (22)\n            AsnElt msg_typeAsn = AsnElt.MakeInteger(msg_type);\n            AsnElt msg_typeSeq = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] { msg_typeAsn });\n            msg_typeSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 1, msg_typeSeq);\n\n\n            // tickets         [2] SEQUENCE OF Ticket\n            //  TODO: encode/handle multiple tickets!\n            AsnElt ticketAsn = tickets[0].Encode();\n            AsnElt ticketSeq = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] { ticketAsn });\n            AsnElt ticketSeq2 = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] { ticketSeq });\n            ticketSeq2 = AsnElt.MakeImplicit(AsnElt.CONTEXT, 2, ticketSeq2);\n\n\n            // enc-part        [3] EncryptedData -- EncKrbCredPart\n            AsnElt enc_partAsn = enc_part.Encode();\n            AsnElt blob = AsnElt.MakeBlob(enc_partAsn.Encode());\n\n            AsnElt blobSeq = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] { blob });\n            blobSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 2, blobSeq);\n\n            // etype == 0 -> no encryption\n            AsnElt etypeAsn = AsnElt.MakeInteger(0);\n            AsnElt etypeSeq = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] { etypeAsn });\n            etypeSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 0, etypeSeq);\n            \n            AsnElt infoSeq = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] { etypeSeq, blobSeq });\n            AsnElt infoSeq2 = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] { infoSeq });\n            infoSeq2 = AsnElt.MakeImplicit(AsnElt.CONTEXT, 3, infoSeq2);\n\n\n            // all the components\n            AsnElt total = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] { pvnoSeq, msg_typeSeq, ticketSeq2, infoSeq2 });\n\n            // tag the final total ([APPLICATION 22])\n            AsnElt final = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] { total });\n            final = AsnElt.MakeImplicit(AsnElt.APPLICATION, 22, final);\n\n            return final;\n        }\n\n        public long pvno { get; set; }\n\n        public long msg_type { get; set; }\n\n        //public Ticket[] tickets { get; set; }\n        public List<Ticket> tickets { get; set; }\n\n        public EncKrbCredPart enc_part { get; set; }\n\n        public byte[] RawBytes { get; set; }\n    }\n}'