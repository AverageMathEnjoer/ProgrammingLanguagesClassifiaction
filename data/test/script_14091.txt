b'package icu.nullptr.twifucker.hook\n\nimport android.app.Activity\nimport android.app.Application\nimport android.content.Context\nimport com.github.kyuubiran.ezxhelper.EzXHelper\nimport com.github.kyuubiran.ezxhelper.EzXHelper.appContext\nimport com.github.kyuubiran.ezxhelper.HookFactory.`-Static`.createHook\nimport com.github.kyuubiran.ezxhelper.Log\nimport com.github.kyuubiran.ezxhelper.LogExtensions.logexIfThrow\nimport com.github.kyuubiran.ezxhelper.finders.MethodFinder\nimport de.robv.android.xposed.IXposedHookLoadPackage\nimport de.robv.android.xposed.IXposedHookZygoteInit\nimport de.robv.android.xposed.callbacks.XC_LoadPackage\nimport icu.nullptr.twifucker.hook.activity.MainActivityHook\nimport icu.nullptr.twifucker.hook.activity.SettingsHook\nimport icu.nullptr.twifucker.logFile\nimport icu.nullptr.twifucker.logFileDir\nimport icu.nullptr.twifucker.modulePrefs\nimport io.luckypray.dexkit.DexKitBridge\nimport java.lang.ref.WeakReference\n\nprivate const val TAG = "TwiFucker"\n\nclass HookEntry : IXposedHookZygoteInit, IXposedHookLoadPackage {\n\n    companion object {\n        lateinit var dexKit: DexKitBridge\n        lateinit var currentActivity: WeakReference<Activity>\n        lateinit var logcatProcess: Process\n\n        fun loadDexKit() {\n            if (this::dexKit.isInitialized) return\n            val ts = System.currentTimeMillis()\n            System.loadLibrary("dexkit")\n            DexKitBridge.create(appContext.applicationInfo.sourceDir)?.let {\n                dexKit = it\n                Log.i("DexKit loaded in ${System.currentTimeMillis() - ts} ms")\n            }\n        }\n\n        fun closeDexKit() {\n            if (this::dexKit.isInitialized) dexKit.close()\n        }\n\n        fun isLogcatProcessInitialized(): Boolean {\n            return this::logcatProcess.isInitialized\n        }\n\n        fun startLog() {\n            if (!modulePrefs.getBoolean("enable_log", false)) return\n            if (!logFileDir.exists()) {\n                logFileDir.mkdirs()\n            }\n            try {\n                logcatProcess = Runtime.getRuntime().exec(\n                    arrayOf(\n                        "logcat", "-T", "100", "-f", logFile.absolutePath\n                    )\n                )\n            } catch (t: Throwable) {\n                Log.e(t)\n            }\n        }\n    }\n\n    override fun initZygote(startupParam: IXposedHookZygoteInit.StartupParam) {\n        System.loadLibrary("twifucker")\n\n        EzXHelper.initZygote(startupParam)\n        EzXHelper.setLogTag(TAG)\n        EzXHelper.setToastTag(TAG)\n        Log.d("InitZygote")\n    }\n\n    override fun handleLoadPackage(lpparam: XC_LoadPackage.LoadPackageParam) {\n        if (lpparam.packageName != "com.twitter.android") return\n        EzXHelper.initHandleLoadPackage(lpparam)\n        Log.d("HandleLoadedPackage")\n\n        MethodFinder.fromClass(Application::class.java).filterByName("attach")\n            .filterByParamTypes(Context::class.java).first().createHook {\n                before { param ->\n                    val context = param.args[0] as Context\n                    EzXHelper.initAppContext(context)\n                    nativeInit(context, EzXHelper.modulePath)\n\n                    if (!lpparam.processName.contains(":")) {\n                        startLog()\n                    }\n\n                    Log.d("AttachContext")\n\n                    val hooks = arrayListOf(\n                        MainActivityHook,\n                        SettingsHook,\n                        UrlHook,\n                        SelectableTextHook,\n                        DownloadHook,\n                        ActivityHook,\n                        CustomTabsHook,\n                        DrawerNavbarHook,\n                        FeatureSwitchHook,\n                        ViewHook,\n                    )\n\n                    if (modulePrefs.getBoolean("use_legacy_hook", false)) {\n                        hooks.add(JsonHook)\n                    } else {\n                        hooks.addAll(\n                            listOf(\n                                JsonTimelineEntryHook,\n                                JsonTimelineTweetHook,\n                                JsonTimelineUserHook,\n                                JsonTimelineTrendHook,\n                                SensitiveMediaWarningHook,\n                                JsonProfileRecommendationModuleResponseHook,\n                                JsonFleetsTimelineResponseHook,\n                                JsonTimelineModuleHook,\n                            )\n                        )\n                    }\n                    initHooks(hooks)\n                    closeDexKit()\n                }\n            }\n    }\n\n    private fun initHooks(hook: List<BaseHook>) {\n        hook.forEach {\n            kotlin.runCatching {\n                if (it.isInit) return@forEach\n                val ts = System.currentTimeMillis()\n                it.init()\n                it.isInit = true\n                Log.i("Inited ${it.name} hook in ${System.currentTimeMillis() - ts} ms")\n            }.logexIfThrow("Failed init hook: ${it.name}")\n        }\n    }\n\n    private external fun nativeInit(context: Context, modulePath: String)\n}\n'