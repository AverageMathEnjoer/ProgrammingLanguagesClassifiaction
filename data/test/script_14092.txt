b'System.Environment.CurrentDirectory <- __SOURCE_DIRECTORY__\n    \n// Listing 20.1\nfor number in 1 .. 10 do\n    printfn "%d Hello!" number\n\nfor number in 10 .. -1 .. 1 do\n    printfn "%d Hello!" number\n\nlet customerIds = [ 45 .. 99 ]\nfor customerId in customerIds do\n    printfn "%d bought something!" customerId\n\nfor even in 2 .. 2 .. 10 do\n    printfn "%d is an even number!" even\n\n// Listing 20.2\nopen System.IO\nlet reader = new StreamReader(File.OpenRead @"File.txt")\nwhile (not reader.EndOfStream) do\n    printfn "%s" (reader.ReadLine())\n\n// Listing 20.3\nopen System\n\nlet arrayOfChars = [| for c in \'a\' .. \'z\' -> Char.ToUpper c |]\nlet listOfSquares = [ for i in 1 .. 10 -> i * i ]\nlet seqOfStrings = seq { for i in 2 .. 4 .. 20 -> sprintf "Number %d" i }\nseqOfStrings\n    \n// Listing 20.4\nlet getLimit (score, years) =\n    if score = "medium" && years = 1 then 500\n    elif score = "good" && (years = 0 || years = 1) then 750\n    elif score = "good" && years = 2 then 1000\n    elif score = "good" then 2000\n    else 250\n\nlet customer = "good", 1\ngetLimit customer\n\n// Listing 20.5-6\nlet getLimitPm customer =\n    match customer with\n    | "medium", 1 -> 500\n    | "good", 0 | "good", 1 -> 750\n    | "good", 2 -> 1000\n    | "good", _ -> 2000\n    | _ -> 250\n\ngetLimitPm customer    \n\n// Listing 20.7\nlet getCreditLimit customer =\n    match customer with\n    | "medium", 1 -> 500\n    | "good", years ->\n        match years with\n        | 0 | 1 -> 750\n        | 2 -> 1000\n        | _ -> 2000\n    | _ -> 250\n\n// Now you try #3\ntype Customer = { Balance : int; Name : string }\n\nlet handleCustomers customers =\n    match customers with\n    | [] -> failwith "No customers supplied!"\n    | [ customer ] -> printfn "Single customer, name is %s" customer.Name\n    | [ first; second ] -> printfn "Two customers, balance = %d" (first.Balance + second.Balance)\n    | customers -> printfn "Customers supplied: %d" customers.Length\n\nhandleCustomers [] // throws exception\nhandleCustomers [ { Balance = 10; Name = "Joe" } ] // prints name\n\n// Listing 20.9\nlet getStatus customer =\n    match customer with\n    | { Balance = 0 } -> "Customer has empty balance!"\n    | { Name = "Isaac" } -> "This is a great customer!"\n    | { Name = name; Balance = 50 } -> sprintf "%s has a large balance!" name\n    | { Name = name } -> sprintf "%s is a normal customer" name\n\n{ Balance = 50; Name = "Joe" } |> getStatus\n\n// Listing 20.10\nlet customers = [ { Balance = 10; Name = "Joe" } ]\nmatch customers with\n| [ { Name = "Tanya" }; { Balance = 25 }; _ ] -> "It\'s a match!"\n| _ -> "No match!"\n\n// Listing 20.11\nlet customerTwo = { Balance = 150; Name = "Isaac" }\nif customerTwo.Name = "Isaac" then printfn "Hello!"\n\nmatch customerTwo.Name with\n| "Isaac" -> printfn "Hello!"\n| _ -> ()\n'