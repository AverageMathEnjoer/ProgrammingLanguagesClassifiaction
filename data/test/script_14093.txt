b'\xef\xbb\xbf//  Copyright 2019 Google Inc. All Rights Reserved.\n//\n//  Licensed under the Apache License, Version 2.0 (the "License");\n//  you may not use this file except in compliance with the License.\n//  You may obtain a copy of the License at\n//\n//  http://www.apache.org/licenses/LICENSE-2.0\n//\n//  Unless required by applicable law or agreed to in writing, software\n//  distributed under the License is distributed on an "AS IS" BASIS,\n//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n//  See the License for the specific language governing permissions and\n//  limitations under the License.\n\nusing System;\n\nnamespace Rubeus.Ndr.Marshal\n{\n    /// <summary>\n    /// Structure which represents an NDR FC_INT3264\n    /// </summary>\n    public struct NdrInt3264 : IFormattable\n    {\n        /// <summary>\n        /// Value of the structure.\n        /// </summary>\n        public readonly int Value;\n\n        /// <summary>\n        /// Constructor.\n        /// </summary>\n        /// <param name="value">The value to construct from.</param>\n        public NdrInt3264(int value) \n        {\n            Value = value;\n        }\n\n        /// <summary>\n        /// Constructor.\n        /// </summary>\n        /// <param name="value">The value to construct from.</param>\n        public NdrInt3264(IntPtr value)\n        {\n            Value = (int)value.ToInt64();\n        }\n\n        /// <summary>\n        /// Convert to a native IntPtr.\n        /// </summary>\n        /// <param name="i">The value to convert from.</param>\n        public static implicit operator IntPtr(NdrInt3264 i)\n        {\n            return new IntPtr(i.Value);\n        }\n\n        /// <summary>\n        /// Overridden ToString.\n        /// </summary>\n        /// <returns>The value as a string.</returns>\n        public override string ToString()\n        {\n            return Value.ToString();\n        }\n\n        /// <summary>\n        /// ToString method.\n        /// </summary>\n        /// <param name="format">The formatting string.</param>\n        /// <returns>The value as a string.</returns>\n        public string ToString(string format)\n        {\n            return Value.ToString(format);\n        }\n\n        /// <summary>\n        /// IFormattable ToString.\n        /// </summary>\n        /// <param name="format">The formatting string.</param>\n        /// <param name="formatProvider">Formatting provider.</param>\n        /// <returns>The value as a string.</returns>\n        public string ToString(string format, IFormatProvider formatProvider)\n        {\n            return Value.ToString(format, formatProvider);\n        }\n    }\n\n    /// <summary>\n    /// Structure which represents an NDR FC_UINT3264\n    /// </summary>\n    public struct NdrUInt3264 : IFormattable\n    {\n        /// <summary>\n        /// Value of the structure.\n        /// </summary>\n        public readonly uint Value;\n\n        /// <summary>\n        /// Constructor.\n        /// </summary>\n        /// <param name="value">The value to construct from.</param>\n        public NdrUInt3264(uint value)\n        {\n            Value = value;\n        }\n\n        /// <summary>\n        /// Constructor.\n        /// </summary>\n        /// <param name="value">The value to construct from.</param>\n        public NdrUInt3264(int value) \n            : this((uint)value)\n        {\n        }\n\n        /// <summary>\n        /// Constructor.\n        /// </summary>\n        /// <param name="value">The value to construct from.</param>\n        public NdrUInt3264(IntPtr value)\n        {\n            Value = (uint)(value.ToInt64() & uint.MaxValue);\n        }\n\n        /// <summary>\n        /// Convert to a native IntPtr.\n        /// </summary>\n        /// <param name="i">The value to convert from.</param>\n        public static implicit operator IntPtr(NdrUInt3264 i)\n        {\n            if (IntPtr.Size == 8)\n            {\n                return new IntPtr(i.Value);\n            }\n            return new IntPtr((int)i.Value);\n        }\n\n        /// <summary>\n        /// Overridden ToString.\n        /// </summary>\n        /// <returns>The value as a string.</returns>\n        public override string ToString()\n        {\n            return Value.ToString();\n        }\n\n        /// <summary>\n        /// ToString method.\n        /// </summary>\n        /// <param name="format">The formatting string.</param>\n        /// <returns>The value as a string.</returns>\n        public string ToString(string format)\n        {\n            return Value.ToString(format);\n        }\n\n        /// <summary>\n        /// IFormattable ToString.\n        /// </summary>\n        /// <param name="format">The formatting string.</param>\n        /// <param name="formatProvider">Formatting provider.</param>\n        /// <returns>The value as a string.</returns>\n        public string ToString(string format, IFormatProvider formatProvider)\n        {\n            return Value.ToString(format, formatProvider);\n        }\n    }\n}\n'