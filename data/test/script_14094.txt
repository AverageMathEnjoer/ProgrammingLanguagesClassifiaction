b'package icu.nullptr.twifucker.hook.activity\n\nimport android.app.Activity\nimport android.widget.ImageView\nimport com.github.kyuubiran.ezxhelper.ClassUtils.loadClass\nimport com.github.kyuubiran.ezxhelper.EzXHelper\nimport com.github.kyuubiran.ezxhelper.HookFactory.`-Static`.createHook\nimport com.github.kyuubiran.ezxhelper.Log\nimport com.github.kyuubiran.ezxhelper.finders.ConstructorFinder\nimport com.github.kyuubiran.ezxhelper.finders.FieldFinder\nimport com.github.kyuubiran.ezxhelper.finders.MethodFinder\nimport icu.nullptr.twifucker.exceptions.CachedHookNotFound\nimport icu.nullptr.twifucker.getId\nimport icu.nullptr.twifucker.hook.BaseHook\nimport icu.nullptr.twifucker.hook.HookEntry.Companion.dexKit\nimport icu.nullptr.twifucker.hook.HookEntry.Companion.loadDexKit\nimport icu.nullptr.twifucker.hostAppLastUpdate\nimport icu.nullptr.twifucker.moduleLastModify\nimport icu.nullptr.twifucker.modulePrefs\nimport icu.nullptr.twifucker.replaceMeasure\nimport icu.nullptr.twifucker.ui.SettingsDialog\nimport io.luckypray.dexkit.descriptor.member.DexMethodDescriptor\n\nobject SettingsHook : BaseHook() {\n    override val name: String\n        get() = "SettingsHook"\n\n    private val aboutActivityClass = loadClass("com.twitter.app.settings.AboutActivity")\n    private val preferenceClass = loadClass("android.preference.Preference")\n\n    private lateinit var onVersionClickListenerClassName: String\n    private lateinit var onVersionClickMethodName: String\n\n    override fun init() {\n\n        try {\n            val logoId = getId("logo", "id")\n            ConstructorFinder.fromClass(ImageView::class.java).forEach { cons ->\n                cons.createHook {\n                    after { param ->\n                        val view = param.thisObject as ImageView\n                        val mId = view.id\n                        if (logoId != mId) return@after\n                        view.setOnLongClickListener {\n                            SettingsDialog(view.context)\n                            true\n                        }\n                    }\n                }\n            }\n        } catch (t: Throwable) {\n            Log.e(t)\n        }\n\n        val onVersionClickMethod =\n            MethodFinder.fromClass(aboutActivityClass).filterByParamTypes(preferenceClass)\n                .firstOrNull()\n\n        if (onVersionClickMethod != null) {\n            onVersionClickMethod.createHook {\n                replaceMeasure(name) { param ->\n                    SettingsDialog(param.thisObject as Activity)\n                    return@replaceMeasure true\n                }\n            }\n        } else {\n            try {\n                loadHookInfo()\n            } catch (t: Throwable) {\n                Log.e(t)\n                return\n            }\n            val onVersionClickListenerClass = loadClass(onVersionClickListenerClassName)\n            val activityField =\n                FieldFinder.fromClass(onVersionClickListenerClass).filterByType(aboutActivityClass)\n                    .first()\n            MethodFinder.fromClass(onVersionClickListenerClass).filterByParamTypes(preferenceClass)\n                .first().createHook {\n                    replaceMeasure(name) { param ->\n                        SettingsDialog(activityField.get(param.thisObject) as Activity)\n                        return@replaceMeasure true\n                    }\n                }\n        }\n    }\n\n    private fun loadCachedHookInfo() {\n        onVersionClickListenerClassName =\n            modulePrefs.getString("hook_on_version_click_listener_class", null)\n                ?: throw CachedHookNotFound()\n    }\n\n    private fun saveHookInfo() {\n        modulePrefs.putString(\n            "hook_on_version_click_listener_class", onVersionClickListenerClassName\n        )\n    }\n\n    private fun searchHook() {\n        val onCreateMethod =\n            MethodFinder.fromClass(aboutActivityClass).filterByName("onCreate").first()\n\n        val onPreferenceClickListenerClass = dexKit.findMethodInvoking {\n            methodDescriptor = DexMethodDescriptor(onCreateMethod).descriptor\n            beInvokedMethodName = "<init>"\n            beInvokedMethodReturnType = Void.TYPE.name\n            beInvokedMethodParameterTypes = arrayOf(aboutActivityClass.name)\n        }.firstNotNullOfOrNull {\n            it.value\n        }?.firstOrNull()?.getMemberInstance(EzXHelper.classLoader)?.declaringClass\n            ?: throw ClassNotFoundException()\n        val onVersionClickMethod = MethodFinder.fromClass(onPreferenceClickListenerClass)\n            .filterByParamTypes(preferenceClass).first()\n\n        onVersionClickListenerClassName = onPreferenceClickListenerClass.name\n        onVersionClickMethodName = onVersionClickMethod.name\n    }\n\n    private fun loadHookInfo() {\n        val hookSettingsLastUpdate = modulePrefs.getLong("hook_settings_last_update", 0)\n\n        Log.d("hookSettingsLastUpdate: $hookSettingsLastUpdate, hostAppLastUpdate: $hostAppLastUpdate, moduleLastModify: $moduleLastModify")\n\n        val timeStart = System.currentTimeMillis()\n\n        if (hookSettingsLastUpdate > hostAppLastUpdate && hookSettingsLastUpdate > moduleLastModify) {\n            loadCachedHookInfo()\n            Log.d("Settings Hook load time: ${System.currentTimeMillis() - timeStart} ms")\n        } else {\n            loadDexKit()\n            searchHook()\n            Log.d("Settings Hook search time: ${System.currentTimeMillis() - timeStart} ms")\n            saveHookInfo()\n            modulePrefs.putLong("hook_settings_last_update", System.currentTimeMillis())\n\n        }\n    }\n}\n'