b'package droidninja.filepicker.fragments\n\nimport android.app.Activity\nimport android.content.Context\nimport android.content.Intent\nimport android.os.Bundle\nimport androidx.recyclerview.widget.DefaultItemAnimator\nimport androidx.recyclerview.widget.GridLayoutManager\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.TextView\nimport android.widget.Toast\nimport androidx.lifecycle.Observer\nimport androidx.lifecycle.ViewModelProvider\nimport com.bumptech.glide.Glide\nimport com.bumptech.glide.RequestManager\nimport droidninja.filepicker.FilePickerConst\nimport droidninja.filepicker.MediaDetailsActivity\nimport droidninja.filepicker.PickerManager\nimport droidninja.filepicker.R\nimport droidninja.filepicker.adapters.FolderGridAdapter\nimport droidninja.filepicker.models.PhotoDirectory\nimport droidninja.filepicker.utils.AndroidLifecycleUtils\nimport droidninja.filepicker.utils.GridSpacingItemDecoration\nimport droidninja.filepicker.utils.ImageCaptureManager\nimport droidninja.filepicker.viewmodels.VMMediaPicker\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.withContext\nimport java.io.IOException\n\nclass MediaFolderPickerFragment : BaseFragment(), FolderGridAdapter.FolderGridAdapterListener {\n    lateinit var recyclerView: RecyclerView\n\n    lateinit var emptyView: TextView\n    lateinit var viewModel: VMMediaPicker\n\n    private var mListener: PhotoPickerFragmentListener? = null\n    private var photoGridAdapter: FolderGridAdapter? = null\n    private var imageCaptureManager: ImageCaptureManager? = null\n    private lateinit var mGlideRequestManager: RequestManager\n    private var fileType: Int = 0\n    private var imageFileSize: Int = FilePickerConst.DEFAULT_FILE_SIZE\n    private var videoFileSize: Int = FilePickerConst.DEFAULT_FILE_SIZE\n\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n                              savedInstanceState: Bundle?): View? {\n        // Inflate the layout for this fragment\n        return inflater.inflate(R.layout.fragment_media_folder_picker, container, false)\n    }\n\n    override fun onAttach(context: Context) {\n        super.onAttach(context)\n        if (context is PhotoPickerFragmentListener) {\n            mListener = context\n        } else {\n            throw RuntimeException(\n                    "$context must implement PhotoPickerFragmentListener")\n        }\n    }\n\n    override fun onDetach() {\n        super.onDetach()\n        mListener = null\n    }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        mGlideRequestManager = Glide.with(this)\n        viewModel = ViewModelProvider(this, ViewModelProvider.AndroidViewModelFactory(requireActivity().application)).get(VMMediaPicker::class.java)\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        initView(view)\n    }\n\n    private fun initView(view: View) {\n        recyclerView = view.findViewById(R.id.recyclerview)\n        emptyView = view.findViewById(R.id.empty_view)\n        arguments?.let {\n            fileType = it.getInt(BaseFragment.FILE_TYPE)\n            imageFileSize = it.getInt(FilePickerConst.EXTRA_IMAGE_FILE_SIZE)\n            videoFileSize = it.getInt(FilePickerConst.EXTRA_VIDEO_FILE_SIZE)\n            fileType = it.getInt(FILE_TYPE)\n\n\n            imageCaptureManager = ImageCaptureManager(requireContext())\n            val spanCount = PickerManager.spanTypes[FilePickerConst.SPAN_TYPE.FOLDER_SPAN] ?: 2// default 2 columns\n            val spacing = 5 // 5px\n            val includeEdge = false\n            val layoutManager = GridLayoutManager(activity, spanCount)\n            recyclerView.addItemDecoration(GridSpacingItemDecoration(spanCount, spacing, includeEdge))\n            recyclerView.layoutManager = layoutManager\n            recyclerView.itemAnimator = DefaultItemAnimator()\n\n            recyclerView.addOnScrollListener(object : RecyclerView.OnScrollListener() {\n                override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) {\n                    super.onScrolled(recyclerView, dx, dy)\n                    // Log.d(">>> Picker >>>", "dy = " + dy);\n                    if (Math.abs(dy) > SCROLL_THRESHOLD) {\n                        mGlideRequestManager.pauseRequests()\n                    } else {\n                        resumeRequestsIfNotDestroyed()\n                    }\n                }\n\n                override fun onScrollStateChanged(recyclerView: RecyclerView, newState: Int) {\n                    if (newState == RecyclerView.SCROLL_STATE_IDLE) {\n                        resumeRequestsIfNotDestroyed()\n                    }\n                }\n            })\n\n            viewModel.lvPhotoDirsData.observe(viewLifecycleOwner, Observer { data ->\n                updateList(data)\n            })\n\n            viewModel.lvDataChanged.observe(viewLifecycleOwner, Observer {\n                viewModel.getPhotoDirs(mediaType = fileType, imageFileSize = imageFileSize, videoFileSize = videoFileSize)\n            })\n\n            viewModel.getPhotoDirs(mediaType = fileType, imageFileSize = imageFileSize, videoFileSize = videoFileSize)\n        }\n    }\n\n    private fun updateList(dirs: List<PhotoDirectory>) {\n        view?.let {\n            if (dirs.isNotEmpty()) {\n                emptyView.visibility = View.GONE\n                recyclerView.visibility = View.VISIBLE\n            } else {\n                emptyView.visibility = View.VISIBLE\n                recyclerView.visibility = View.GONE\n                return\n            }\n\n            if (photoGridAdapter == null) {\n                photoGridAdapter = FolderGridAdapter(requireContext(), mGlideRequestManager, dirs, fileType == FilePickerConst.MEDIA_TYPE_IMAGE && PickerManager.isEnableCamera)\n                recyclerView.adapter = photoGridAdapter\n                photoGridAdapter?.setFolderGridAdapterListener(this)\n            } else {\n                photoGridAdapter?.setData(dirs)\n                photoGridAdapter?.notifyDataSetChanged()\n            }\n        }\n    }\n\n    override fun onCameraClicked() {\n        try {\n            uiScope.launch {\n                val intent = withContext(Dispatchers.IO) { imageCaptureManager?.dispatchTakePictureIntent() }\n                if (intent != null) {\n                    startActivityForResult(intent, ImageCaptureManager.REQUEST_TAKE_PHOTO)\n                } else {\n                    Toast.makeText(requireContext(), R.string.no_camera_exists, Toast.LENGTH_SHORT).show()\n                }\n            }\n        } catch (e: IOException) {\n            e.printStackTrace()\n        }\n\n    }\n\n    override fun onFolderClicked(photoDirectory: PhotoDirectory) {\n        val intent = Intent(activity, MediaDetailsActivity::class.java)\n        intent.putExtra(PhotoDirectory::class.java.simpleName, photoDirectory.apply {\n            medias.clear()\n        })\n        intent.putExtra(FilePickerConst.EXTRA_FILE_TYPE, fileType)\n        intent.putExtra(FilePickerConst.EXTRA_IMAGE_FILE_SIZE, imageFileSize)\n        intent.putExtra(FilePickerConst.EXTRA_VIDEO_FILE_SIZE, videoFileSize)\n        activity?.startActivityForResult(intent, FilePickerConst.REQUEST_CODE_MEDIA_DETAIL)\n    }\n\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n        super.onActivityResult(requestCode, resultCode, data)\n        when (requestCode) {\n            ImageCaptureManager.REQUEST_TAKE_PHOTO -> if (resultCode == Activity.RESULT_OK) {\n                val imagePath = imageCaptureManager?.currentPhotoPath\n                if (imagePath != null) {\n                    if (PickerManager.getMaxCount() == 1) {\n                        PickerManager.add(imagePath, FilePickerConst.FILE_TYPE_MEDIA)\n                        mListener?.onItemSelected()\n                    }\n                }\n            } else {\n                uiScope.launch(Dispatchers.IO) {\n                    imageCaptureManager?.deleteContentUri(imageCaptureManager?.currentPhotoPath)\n                }\n            }\n        }\n    }\n\n    private fun resumeRequestsIfNotDestroyed() {\n        if (!AndroidLifecycleUtils.canLoadImage(this)) {\n            return\n        }\n\n        mGlideRequestManager.resumeRequests()\n    }\n\n    companion object {\n\n        private val TAG = MediaFolderPickerFragment::class.java.simpleName\n        private const val SCROLL_THRESHOLD = 30\n\n        fun newInstance(fileType: Int, imageFileSize: Int, videoFileSize: Int): MediaFolderPickerFragment {\n            val photoPickerFragment = MediaFolderPickerFragment()\n            val bun = Bundle()\n            bun.putInt(BaseFragment.FILE_TYPE, fileType)\n            bun.putInt(FilePickerConst.EXTRA_IMAGE_FILE_SIZE, imageFileSize)\n            bun.putInt(FilePickerConst.EXTRA_VIDEO_FILE_SIZE, videoFileSize)\n            bun.putInt(FILE_TYPE, fileType)\n            photoPickerFragment.arguments = bun\n            return photoPickerFragment\n        }\n    }\n}// Required empty public constructor\n'