b"using System.Diagnostics;\n\nnamespace CS_SQLite3\n{\n  public partial class CSSQLite\n  {\n    /***** This file contains automatically generated code ******\n    **\n    ** The code in this file has been automatically generated by\n    **\n    **     $Header$\n    **\n    *************************************************************************\n    **  Included in SQLite3 port to C#-SQLite;  2008 Noah B Hart\n    **  C#-SQLite is an independent reimplementation of the SQLite software library\n    **\n    **  $Header$\n    *************************************************************************\n    **\n    ** The code in this file implements a function that determines whether\n    ** or not a given identifier is really an SQL keyword.  The same thing\n    ** might be implemented more directly using a hand-written hash table.\n    ** But by using this automatically generated code, the size of the code\n    ** is substantially reduced.  This is important for embedded applications\n    ** on platforms with limited memory.\n    */\n    /* Hash score: 171 */\n    static int keywordCode( string z, int iOffset, int n )\n    {\n      /* zText[] encodes 801 bytes of keywords in 541 bytes */\n      /*   REINDEXEDESCAPEACHECKEYBEFOREIGNOREGEXPLAINSTEADDATABASELECT       */\n      /*   ABLEFTHENDEFERRABLELSEXCEPTRANSACTIONATURALTERAISEXCLUSIVE         */\n      /*   XISTSAVEPOINTERSECTRIGGEREFERENCESCONSTRAINTOFFSETEMPORARY         */\n      /*   UNIQUERYATTACHAVINGROUPDATEBEGINNERELEASEBETWEENOTNULLIKE          */\n      /*   CASCADELETECASECOLLATECREATECURRENT_DATEDETACHIMMEDIATEJOIN        */\n      /*   SERTMATCHPLANALYZEPRAGMABORTVALUESVIRTUALIMITWHENWHERENAME         */\n      /*   AFTEREPLACEANDEFAULTAUTOINCREMENTCASTCOLUMNCOMMITCONFLICTCROSS     */\n      /*   CURRENT_TIMESTAMPRIMARYDEFERREDISTINCTDROPFAILFROMFULLGLOBYIF      */\n      /*   ISNULLORDERESTRICTOUTERIGHTROLLBACKROWUNIONUSINGVACUUMVIEW         */\n      /*   INITIALLY                                                          */\n      string zText = new string( new char[540]  {\n'R','E','I','N','D','E','X','E','D','E','S','C','A','P','E','A','C','H',\n'E','C','K','E','Y','B','E','F','O','R','E','I','G','N','O','R','E','G',\n'E','X','P','L','A','I','N','S','T','E','A','D','D','A','T','A','B','A',\n'S','E','L','E','C','T','A','B','L','E','F','T','H','E','N','D','E','F',\n'E','R','R','A','B','L','E','L','S','E','X','C','E','P','T','R','A','N',\n'S','A','C','T','I','O','N','A','T','U','R','A','L','T','E','R','A','I',\n'S','E','X','C','L','U','S','I','V','E','X','I','S','T','S','A','V','E',\n'P','O','I','N','T','E','R','S','E','C','T','R','I','G','G','E','R','E',\n'F','E','R','E','N','C','E','S','C','O','N','S','T','R','A','I','N','T',\n'O','F','F','S','E','T','E','M','P','O','R','A','R','Y','U','N','I','Q',\n'U','E','R','Y','A','T','T','A','C','H','A','V','I','N','G','R','O','U',\n'P','D','A','T','E','B','E','G','I','N','N','E','R','E','L','E','A','S',\n'E','B','E','T','W','E','E','N','O','T','N','U','L','L','I','K','E','C',\n'A','S','C','A','D','E','L','E','T','E','C','A','S','E','C','O','L','L',\n'A','T','E','C','R','E','A','T','E','C','U','R','R','E','N','T','_','D',\n'A','T','E','D','E','T','A','C','H','I','M','M','E','D','I','A','T','E',\n'J','O','I','N','S','E','R','T','M','A','T','C','H','P','L','A','N','A',\n'L','Y','Z','E','P','R','A','G','M','A','B','O','R','T','V','A','L','U',\n'E','S','V','I','R','T','U','A','L','I','M','I','T','W','H','E','N','W',\n'H','E','R','E','N','A','M','E','A','F','T','E','R','E','P','L','A','C',\n'E','A','N','D','E','F','A','U','L','T','A','U','T','O','I','N','C','R',\n'E','M','E','N','T','C','A','S','T','C','O','L','U','M','N','C','O','M',\n'M','I','T','C','O','N','F','L','I','C','T','C','R','O','S','S','C','U',\n'R','R','E','N','T','_','T','I','M','E','S','T','A','M','P','R','I','M',\n'A','R','Y','D','E','F','E','R','R','E','D','I','S','T','I','N','C','T',\n'D','R','O','P','F','A','I','L','F','R','O','M','F','U','L','L','G','L',\n'O','B','Y','I','F','I','S','N','U','L','L','O','R','D','E','R','E','S',\n'T','R','I','C','T','O','U','T','E','R','I','G','H','T','R','O','L','L',\n'B','A','C','K','R','O','W','U','N','I','O','N','U','S','I','N','G','V',\n'A','C','U','U','M','V','I','E','W','I','N','I','T','I','A','L','L','Y',\n} );\n\n      byte[] aHash = {\n70,  99, 112,  68,   0,  43,   0,   0,  76,   0,  71,   0,   0,\n41,  12,  72,  15,   0, 111,  79,  49, 106,   0,  19,   0,   0,\n116,   0, 114, 109,   0,  22,  87,   0,   9,   0,   0,  64,  65,\n0,  63,   6,   0,  47,  84,  96,   0, 113,  95,   0,   0,  44,\n0,  97,  24,   0,  17,   0, 117,  48,  23,   0,   5, 104,  25,\n90,   0,   0, 119, 100,  55, 118,  52,   7,  50,   0,  85,   0,\n94,  26,   0,  93,   0,   0,   0,  89,  86,  91,  82, 103,  14,\n38, 102,   0,  75,   0,  18,  83, 105,  31,   0, 115,  74, 107,\n57,  45,  78,   0,   0,  88,  39,   0, 110,   0,  35,   0,   0,\n28,   0,  80,  53,  58,   0,  20,  56,   0,  51,\n};\n      byte[] aNext = {\n0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,\n0,   2,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,\n0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n0,   0,   0,   0,  32,  21,   0,   0,   0,  42,   3,  46,   0,\n0,   0,   0,  29,   0,   0,  37,   0,   0,   0,   1,  60,   0,\n0,  61,   0,  40,   0,   0,   0,   0,   0,   0,   0,  59,   0,\n0,   0,   0,  30,  54,  16,  33,  10,   0,   0,   0,   0,   0,\n0,   0,  11,  66,  73,   0,   8,   0,  98,  92,   0, 101,   0,\n81,   0,  69,   0,   0, 108,  27,  36,  67,  77,   0,  34,  62,\n0,   0,\n};\n      byte[] aLen = {\n7,   7,   5,   4,   6,   4,   5,   3,   6,   7,   3,   6,   6,\n7,   7,   3,   8,   2,   6,   5,   4,   4,   3,  10,   4,   6,\n11,   2,   7,   5,   5,   9,   6,   9,   9,   7,  10,  10,   4,\n6,   2,   3,   4,   9,   2,   6,   5,   6,   6,   5,   6,   5,\n5,   7,   7,   7,   3,   4,   4,   7,   3,   6,   4,   7,   6,\n12,   6,   9,   4,   6,   5,   4,   7,   6,   5,   6,   7,   5,\n4,   5,   6,   5,   7,   3,   7,  13,   2,   2,   4,   6,   6,\n8,   5,  17,  12,   7,   8,   8,   2,   4,   4,   4,   4,   4,\n2,   2,   6,   5,   8,   5,   5,   8,   3,   5,   5,   6,   4,\n9,   3,\n};\n      int[] aOffset = {\n0,   2,   2,   8,   9,  14,  16,  20,  23,  25,  25,  29,  33,\n36,  41,  46,  48,  53,  54,  59,  62,  65,  67,  69,  78,  81,\n86,  95,  96, 101, 105, 109, 117, 122, 128, 136, 142, 152, 159,\n162, 162, 165, 167, 167, 171, 176, 179, 184, 189, 194, 197, 203,\n206, 210, 217, 223, 223, 226, 229, 233, 234, 238, 244, 248, 255,\n261, 273, 279, 288, 290, 296, 301, 303, 310, 315, 320, 326, 332,\n337, 341, 344, 350, 354, 361, 363, 370, 372, 374, 383, 387, 393,\n399, 407, 412, 412, 428, 435, 442, 443, 450, 454, 458, 462, 466,\n469, 471, 473, 479, 483, 491, 495, 500, 508, 511, 516, 521, 527,\n531, 536,\n};\n      byte[] aCode = {\nTK_REINDEX,    TK_INDEXED,    TK_INDEX,      TK_DESC,       TK_ESCAPE,\nTK_EACH,       TK_CHECK,      TK_KEY,        TK_BEFORE,     TK_FOREIGN,\nTK_FOR,        TK_IGNORE,     TK_LIKE_KW,    TK_EXPLAIN,    TK_INSTEAD,\nTK_ADD,        TK_DATABASE,   TK_AS,         TK_SELECT,     TK_TABLE,\nTK_JOIN_KW,    TK_THEN,       TK_END,        TK_DEFERRABLE, TK_ELSE,\nTK_EXCEPT,     TK_TRANSACTION,TK_ON,         TK_JOIN_KW,    TK_ALTER,\nTK_RAISE,      TK_EXCLUSIVE,  TK_EXISTS,     TK_SAVEPOINT,  TK_INTERSECT,\nTK_TRIGGER,    TK_REFERENCES, TK_CONSTRAINT, TK_INTO,       TK_OFFSET,\nTK_OF,         TK_SET,        TK_TEMP,       TK_TEMP,       TK_OR,\nTK_UNIQUE,     TK_QUERY,      TK_ATTACH,     TK_HAVING,     TK_GROUP,\nTK_UPDATE,     TK_BEGIN,      TK_JOIN_KW,    TK_RELEASE,    TK_BETWEEN,\nTK_NOTNULL,    TK_NOT,        TK_NULL,       TK_LIKE_KW,    TK_CASCADE,\nTK_ASC,        TK_DELETE,     TK_CASE,       TK_COLLATE,    TK_CREATE,\nTK_CTIME_KW,   TK_DETACH,     TK_IMMEDIATE,  TK_JOIN,       TK_INSERT,\nTK_MATCH,      TK_PLAN,       TK_ANALYZE,    TK_PRAGMA,     TK_ABORT,\nTK_VALUES,     TK_VIRTUAL,    TK_LIMIT,      TK_WHEN,       TK_WHERE,\nTK_RENAME,     TK_AFTER,      TK_REPLACE,    TK_AND,        TK_DEFAULT,\nTK_AUTOINCR,   TK_TO,         TK_IN,         TK_CAST,       TK_COLUMNKW,\nTK_COMMIT,     TK_CONFLICT,   TK_JOIN_KW,    TK_CTIME_KW,   TK_CTIME_KW,\nTK_PRIMARY,    TK_DEFERRED,   TK_DISTINCT,   TK_IS,         TK_DROP,\nTK_FAIL,       TK_FROM,       TK_JOIN_KW,    TK_LIKE_KW,    TK_BY,\nTK_IF,         TK_ISNULL,     TK_ORDER,      TK_RESTRICT,   TK_JOIN_KW,\nTK_JOIN_KW,    TK_ROLLBACK,   TK_ROW,        TK_UNION,      TK_USING,\nTK_VACUUM,     TK_VIEW,       TK_INITIALLY,  TK_ALL,\n};\n      int h, i;\n      if ( n < 2 ) return TK_ID;\n      h = ( ( sqlite3UpperToLower[z[iOffset + 0]] ) * 4 ^//(charMap(z[iOffset+0]) * 4) ^\n      ( sqlite3UpperToLower[z[iOffset + n - 1]] * 3 ) ^ //(charMap(z[iOffset+n - 1]) * 3) ^\n      n ) % 127;\n      for ( i = ( aHash[h] ) - 1 ; i >= 0 ; i = ( aNext[i] ) - 1 )\n      {\n        if ( aLen[i] == n && 0 == sqlite3StrNICmp( zText.ToString(), aOffset[i], z.Substring( iOffset, n ), n ) )\n        {\n          testcase( i == 0 ); /* REINDEX */\n          testcase( i == 1 ); /* INDEXED */\n          testcase( i == 2 ); /* INDEX */\n          testcase( i == 3 ); /* DESC */\n          testcase( i == 4 ); /* ESCAPE */\n          testcase( i == 5 ); /* EACH */\n          testcase( i == 6 ); /* CHECK */\n          testcase( i == 7 ); /* KEY */\n          testcase( i == 8 ); /* BEFORE */\n          testcase( i == 9 ); /* FOREIGN */\n          testcase( i == 10 ); /* FOR */\n          testcase( i == 11 ); /* IGNORE */\n          testcase( i == 12 ); /* REGEXP */\n          testcase( i == 13 ); /* EXPLAIN */\n          testcase( i == 14 ); /* INSTEAD */\n          testcase( i == 15 ); /* ADD */\n          testcase( i == 16 ); /* DATABASE */\n          testcase( i == 17 ); /* AS */\n          testcase( i == 18 ); /* SELECT */\n          testcase( i == 19 ); /* TABLE */\n          testcase( i == 20 ); /* LEFT */\n          testcase( i == 21 ); /* THEN */\n          testcase( i == 22 ); /* END */\n          testcase( i == 23 ); /* DEFERRABLE */\n          testcase( i == 24 ); /* ELSE */\n          testcase( i == 25 ); /* EXCEPT */\n          testcase( i == 26 ); /* TRANSACTION */\n          testcase( i == 27 ); /* ON */\n          testcase( i == 28 ); /* NATURAL */\n          testcase( i == 29 ); /* ALTER */\n          testcase( i == 30 ); /* RAISE */\n          testcase( i == 31 ); /* EXCLUSIVE */\n          testcase( i == 32 ); /* EXISTS */\n          testcase( i == 33 ); /* SAVEPOINT */\n          testcase( i == 34 ); /* INTERSECT */\n          testcase( i == 35 ); /* TRIGGER */\n          testcase( i == 36 ); /* REFERENCES */\n          testcase( i == 37 ); /* CONSTRAINT */\n          testcase( i == 38 ); /* INTO */\n          testcase( i == 39 ); /* OFFSET */\n          testcase( i == 40 ); /* OF */\n          testcase( i == 41 ); /* SET */\n          testcase( i == 42 ); /* TEMP */\n          testcase( i == 43 ); /* TEMPORARY */\n          testcase( i == 44 ); /* OR */\n          testcase( i == 45 ); /* UNIQUE */\n          testcase( i == 46 ); /* QUERY */\n          testcase( i == 47 ); /* ATTACH */\n          testcase( i == 48 ); /* HAVING */\n          testcase( i == 49 ); /* GROUP */\n          testcase( i == 50 ); /* UPDATE */\n          testcase( i == 51 ); /* BEGIN */\n          testcase( i == 52 ); /* INNER */\n          testcase( i == 53 ); /* RELEASE */\n          testcase( i == 54 ); /* BETWEEN */\n          testcase( i == 55 ); /* NOTNULL */\n          testcase( i == 56 ); /* NOT */\n          testcase( i == 57 ); /* NULL */\n          testcase( i == 58 ); /* LIKE */\n          testcase( i == 59 ); /* CASCADE */\n          testcase( i == 60 ); /* ASC */\n          testcase( i == 61 ); /* DELETE */\n          testcase( i == 62 ); /* CASE */\n          testcase( i == 63 ); /* COLLATE */\n          testcase( i == 64 ); /* CREATE */\n          testcase( i == 65 ); /* CURRENT_DATE */\n          testcase( i == 66 ); /* DETACH */\n          testcase( i == 67 ); /* IMMEDIATE */\n          testcase( i == 68 ); /* JOIN */\n          testcase( i == 69 ); /* INSERT */\n          testcase( i == 70 ); /* MATCH */\n          testcase( i == 71 ); /* PLAN */\n          testcase( i == 72 ); /* ANALYZE */\n          testcase( i == 73 ); /* PRAGMA */\n          testcase( i == 74 ); /* ABORT */\n          testcase( i == 75 ); /* VALUES */\n          testcase( i == 76 ); /* VIRTUAL */\n          testcase( i == 77 ); /* LIMIT */\n          testcase( i == 78 ); /* WHEN */\n          testcase( i == 79 ); /* WHERE */\n          testcase( i == 80 ); /* RENAME */\n          testcase( i == 81 ); /* AFTER */\n          testcase( i == 82 ); /* REPLACE */\n          testcase( i == 83 ); /* AND */\n          testcase( i == 84 ); /* DEFAULT */\n          testcase( i == 85 ); /* AUTOINCREMENT */\n          testcase( i == 86 ); /* TO */\n          testcase( i == 87 ); /* IN */\n          testcase( i == 88 ); /* CAST */\n          testcase( i == 89 ); /* COLUMN */\n          testcase( i == 90 ); /* COMMIT */\n          testcase( i == 91 ); /* CONFLICT */\n          testcase( i == 92 ); /* CROSS */\n          testcase( i == 93 ); /* CURRENT_TIMESTAMP */\n          testcase( i == 94 ); /* CURRENT_TIME */\n          testcase( i == 95 ); /* PRIMARY */\n          testcase( i == 96 ); /* DEFERRED */\n          testcase( i == 97 ); /* DISTINCT */\n          testcase( i == 98 ); /* IS */\n          testcase( i == 99 ); /* DROP */\n          testcase( i == 100 ); /* FAIL */\n          testcase( i == 101 ); /* FROM */\n          testcase( i == 102 ); /* FULL */\n          testcase( i == 103 ); /* GLOB */\n          testcase( i == 104 ); /* BY */\n          testcase( i == 105 ); /* IF */\n          testcase( i == 106 ); /* ISNULL */\n          testcase( i == 107 ); /* ORDER */\n          testcase( i == 108 ); /* RESTRICT */\n          testcase( i == 109 ); /* OUTER */\n          testcase( i == 110 ); /* RIGHT */\n          testcase( i == 111 ); /* ROLLBACK */\n          testcase( i == 112 ); /* ROW */\n          testcase( i == 113 ); /* UNION */\n          testcase( i == 114 ); /* USING */\n          testcase( i == 115 ); /* VACUUM */\n          testcase( i == 116 ); /* VIEW */\n          testcase( i == 117 ); /* INITIALLY */\n          testcase( i == 118 ); /* ALL */\n          return aCode[i];\n        }\n      }\n      return TK_ID;\n    }\n    static int sqlite3KeywordCode( string z, int n )\n    {\n      return keywordCode( z, 0, n );\n    }\n  }\n}\n"