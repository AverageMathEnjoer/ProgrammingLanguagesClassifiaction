b'#define YYFALLBACK\n#define YYWILDCARD\n\nusing System;\nusing System.Diagnostics;\nusing System.IO;\nusing System.Text;\n\nusing u8 = System.Byte;\n\n\nusing YYCODETYPE = System.Int32;\nusing YYACTIONTYPE = System.Int32;\n\nnamespace CS_SQLite3\n{\n  using sqlite3ParserTOKENTYPE = CSSQLite.Token;\n\n  public partial class CSSQLite\n  {\n    /*\n    **\n    *************************************************************************\n    **  Included in SQLite3 port to C#-SQLite;  2008 Noah B Hart\n    **  C#-SQLite is an independent reimplementation of the SQLite software library\n    **\n    **  $Header$\n    *************************************************************************\n    */\n\n    /* Driver template for the LEMON parser generator.\n    ** The author disclaims copyright to this source code.\n    **\n    ** This version of "lempar.c" is modified, slightly, for use by SQLite.\n    ** The only modifications are the addition of a couple of NEVER()\n    ** macros to disable tests that are needed in the case of a general\n    ** LALR(1) grammar but which are always false in the\n    ** specific grammar used by SQLite.\n    */\n    /* First off, code is included that follows the "include" declaration\n    ** in the input grammar file. */\n    //#include <stdio.h>\n    //#line 53 "parse.y"\n\n    //#include "sqliteInt.h"\n    /*\n    ** Disable all error recovery processing in the parser push-down\n    ** automaton.\n    */\n    //#define YYNOERRORRECOVERY 1\n    const int YYNOERRORRECOVERY = 1;\n\n    /*\n    ** Make yytestcase() the same as testcase()\n    */\n    //#define yytestcase(X) testcase(X)\n    static void yytestcase<T>(T X) { testcase(X); }\n\n    /*\n    ** An instance of this structure holds information about the\n    ** LIMIT clause of a SELECT statement.\n    */\n    public struct LimitVal\n    {\n      public Expr pLimit;    /* The LIMIT expression.  NULL if there is no limit */\n      public Expr pOffset;   /* The OFFSET expression.  NULL if there is none */\n    };\n\n    /*\n    ** An instance of this structure is used to store the LIKE,\n    ** GLOB, NOT LIKE, and NOT GLOB operators.\n    */\n    public struct LikeOp\n    {\n      public Token eOperator;  /* "like" or "glob" or "regexp" */\n      public bool not;         /* True if the NOT keyword is present */\n    };\n\n    /*\n    ** An instance of the following structure describes the event of a\n    ** TRIGGER.  "a" is the event type, one of TK_UPDATE, TK_INSERT,\n    ** TK_DELETE, or TK_INSTEAD.  If the event is of the form\n    **\n    **      UPDATE ON (a,b,c)\n    **\n    ** Then the "b" IdList records the list "a,b,c".\n    */\n#if !SQLITE_OMIT_TRIGGER\n    public struct TrigEvent { public int a; public IdList b; };\n#endif\n    /*\n** An instance of this structure holds the ATTACH key and the key type.\n*/\n    public struct AttachKey { public int type; public Token key; };\n\n    //#line 723 "parse.y"\n\n    /* This is a utility routine used to set the ExprSpan.zStart and\n    ** ExprSpan.zEnd values of pOut so that the span covers the complete\n    ** range of text beginning with pStart and going to the end of pEnd.\n    */\n    static void spanSet(ExprSpan pOut, Token pStart, Token pEnd)\n    {\n      pOut.zStart = pStart.z;\n      pOut.zEnd = pEnd.z.Substring(pEnd.n);\n    }\n\n    /* Construct a new Expr object from a single identifier.  Use the\n    ** new Expr to populate pOut.  Set the span of pOut to be the identifier\n    ** that created the expression.\n    */\n    static void spanExpr(ExprSpan pOut, Parse pParse, int op, Token pValue)\n    {\n      pOut.pExpr = sqlite3PExpr(pParse, op, 0, 0, pValue);\n      pOut.zStart = pValue.z;\n      pOut.zEnd = pValue.z.Substring(pValue.n);\n    }\n    //#line 818 "parse.y"\n\n    /* This routine constructs a binary expression node out of two ExprSpan\n    ** objects and uses the result to populate a new ExprSpan object.\n    */\n    static void spanBinaryExpr(\n    ExprSpan pOut,     /* Write the result here */\n    Parse pParse,      /* The parsing context.  Errors accumulate here */\n    int op,            /* The binary operation */\n    ExprSpan pLeft,    /* The left operand */\n    ExprSpan pRight    /* The right operand */\n    )\n    {\n      pOut.pExpr = sqlite3PExpr(pParse, op, pLeft.pExpr, pRight.pExpr, 0);\n      pOut.zStart = pLeft.zStart;\n      pOut.zEnd = pRight.zEnd;\n    }\n    //#line 870 "parse.y"\n\n    /* Construct an expression node for a unary postfix operator\n    */\n    static void spanUnaryPostfix(\n    ExprSpan pOut,        /* Write the new expression node here */\n    Parse pParse,         /* Parsing context to record errors */\n    int op,               /* The operator */\n    ExprSpan pOperand,    /* The operand */\n    Token pPostOp         /* The operand token for setting the span */\n    )\n    {\n      pOut.pExpr = sqlite3PExpr(pParse, op, pOperand.pExpr, 0, 0);\n      pOut.zStart = pOperand.zStart;\n      pOut.zEnd = pPostOp.z.Substring(pPostOp.n);\n    }\n    //#line 892 "parse.y"\n\n    /* Construct an expression node for a unary prefix operator\n    */\n    static void spanUnaryPrefix(\n    ExprSpan pOut,        /* Write the new expression node here */\n    Parse pParse,         /* Parsing context to record errors */\n    int op,               /* The operator */\n    ExprSpan pOperand,    /* The operand */\n    Token pPreOp          /* The operand token for setting the span */\n    )\n    {\n      pOut.pExpr = sqlite3PExpr(pParse, op, pOperand.pExpr, 0, 0);\n      pOut.zStart = pPreOp.z;\n      pOut.zEnd = pOperand.zEnd;\n    }\n    //#line 129 "parse.c"\n    /* Next is all token values, in a form suitable for use by makeheaders.\n    ** This section will be null unless lemon is run with the -m switch.\n    */\n    /*\n    ** These constants (all generated automatically by the parser generator)\n    ** specify the various kinds of tokens (terminals) that the parser\n    ** understands.\n    **\n    ** Each symbol here is a terminal symbol in the grammar.\n    */\n    /* Make sure the INTERFACE macro is defined.\n    */\n#if !INTERFACE\n    //# define INTERFACE 1\n#endif\n    /* The next thing included is series of defines which control\n** various aspects of the generated parser.\n**    YYCODETYPE         is the data type used for storing terminal\n**                       and nonterminal numbers.  "unsigned char" is\n**                       used if there are fewer than 250 terminals\n**                       and nonterminals.  "int" is used otherwise.\n**    YYNOCODE           is a number of type YYCODETYPE which corresponds\n**                       to no legal terminal or nonterminal number.  This\n**                       number is used to fill in empty slots of the hash\n**                       table.\n**    YYFALLBACK         If defined, this indicates that one or more tokens\n**                       have fall-back values which should be used if the\n**                       original value of the token will not parse.\n**    YYACTIONTYPE       is the data type used for storing terminal\n**                       and nonterminal numbers.  "unsigned char" is\n**                       used if there are fewer than 250 rules and\n**                       states combined.  "int" is used otherwise.\n**    sqlite3ParserTOKENTYPE     is the data type used for minor tokens given\n**                       directly to the parser from the tokenizer.\n**    YYMINORTYPE        is the data type used for all minor tokens.\n**                       This is typically a union of many types, one of\n**                       which is sqlite3ParserTOKENTYPE.  The entry in the union\n**                       for base tokens is called "yy0".\n**    YYSTACKDEPTH       is the maximum depth of the parser\'s stack.  If\n**                       zero the stack is dynamically sized using realloc()\n**    sqlite3ParserARG_SDECL     A static variable declaration for the %extra_argument\n**    sqlite3ParserARG_PDECL     A parameter declaration for the %extra_argument\n**    sqlite3ParserARG_STORE     Code to store %extra_argument into yypParser\n**    sqlite3ParserARG_FETCH     Code to extract %extra_argument from yypParser\n**    YYNSTATE           the combined number of states.\n**    YYNRULE            the number of rules in the grammar\n**    YYERRORSYMBOL      is the code number of the error symbol.  If not\n**                       defined, then do no error processing.\n*/\n    //#define YYCODETYPE unsigned short char\n    const int YYNOCODE = 254;\n    //#define YYACTIONTYPE unsigned short int\n    const int YYWILDCARD = 65;\n    //#define sqlite3ParserTOKENTYPE Token\n    public class YYMINORTYPE\n    {\n      public int yyinit;\n      public sqlite3ParserTOKENTYPE yy0 = new sqlite3ParserTOKENTYPE();\n      public Select yy3;\n      public ExprList yy14;\n      public SrcList yy65;\n      public LikeOp yy96;\n      public Expr yy132;\n      public u8 yy186;\n      public int yy328;\n      public ExprSpan yy346 = new ExprSpan();\n#if !SQLITE_OMIT_TRIGGER\n      public TrigEvent yy378;\n#endif\n      public IdList yy408;\n      public struct _yy429 { public int value; public int mask;}public _yy429 yy429;\n#if !SQLITE_OMIT_TRIGGER\n      public TriggerStep yy473;\n#endif\n      public LimitVal yy476;\n    }\n\n#if !YYSTACKDEPTH\n    const int YYSTACKDEPTH = 100;\n#endif\n    //#define sqlite3ParserARG_SDECL Parse pParse;\n    //#define sqlite3ParserARG_PDECL ,Parse pParse\n    //#define sqlite3ParserARG_FETCH Parse pParse = yypParser.pParse\n    //#define sqlite3ParserARG_STORE yypParser.pParse = pParse\n    const int YYNSTATE = 629;\n    const int YYNRULE = 329;\n    //#define YYFALLBACK\n    const int YY_NO_ACTION = (YYNSTATE + YYNRULE + 2);\n    const int YY_ACCEPT_ACTION = (YYNSTATE + YYNRULE + 1);\n    const int YY_ERROR_ACTION = (YYNSTATE + YYNRULE);\n\n    /* The yyzerominor constant is used to initialize instances of\n    ** YYMINORTYPE objects to zero. */\n    YYMINORTYPE yyzerominor = new YYMINORTYPE();//static const YYMINORTYPE yyzerominor = { 0 };\n\n    /* Define the yytestcase() macro to be a no-op if is not already defined\n    ** otherwise.\n    **\n    ** Applications can choose to define yytestcase() in the %include section\n    ** to a macro that can assist in verifying code coverage.  For production\n    ** code the yytestcase() macro should be turned off.  But it is useful\n    ** for testing.\n    */\n    //#if !yytestcase\n    //# define yytestcase(X)\n    //#endif\n\n    /* Next are the tables used to determine what action to take based on the\n    ** current state and lookahead token.  These tables are used to implement\n    ** functions that take a state number and lookahead value and return an\n    ** action integer.\n    **\n    ** Suppose the action integer is N.  Then the action is determined as\n    ** follows\n    **\n    **   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead\n    **                                      token onto the stack and goto state N.\n    **\n    **   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.\n    **\n    **   N == YYNSTATE+YYNRULE              A syntax error has occurred.\n    **\n    **   N == YYNSTATE+YYNRULE+1            The parser accepts its input.\n    **\n    **   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused\n    **                                      slots in the yy_action[] table.\n    **\n    ** The action table is constructed as a single large table named yy_action[].\n    ** Given state S and lookahead X, the action is computed as\n    **\n    **      yy_action[ yy_shift_ofst[S] + X ]\n    **\n    ** If the index value yy_shift_ofst[S]+X is out of range or if the value\n    ** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]\n    ** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table\n    ** and that yy_default[S] should be used instead.\n    **\n    ** The formula above is for computing the action when the lookahead is\n    ** a terminal symbol.  If the lookahead is a non-terminal (as occurs after\n    ** a reduce action) then the yy_reduce_ofst[] array is used in place of\n    ** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of\n    ** YY_SHIFT_USE_DFLT.\n    **\n    ** The following are the tables generated in this section:\n    **\n    **  yy_action[]        A single table containing all actions.\n    **  yy_lookahead[]     A table containing the lookahead for each entry in\n    **                     yy_action.  Used to detect hash collisions.\n    **  yy_shift_ofst[]    For each state, the offset into yy_action for\n    **                     shifting terminals.\n    **  yy_reduce_ofst[]   For each state, the offset into yy_action for\n    **                     shifting non-terminals after a reduce.\n    **  yy_default[]       Default action for each state.\n    */\n    static YYACTIONTYPE[] yy_action = new YYACTIONTYPE[]{\n/*     0 */   309,  959,  178,  628,    2,  153,  216,  448,   24,   24,\n/*    10 */    24,   24,  497,   26,   26,   26,   26,   27,   27,   28,\n/*    20 */    28,   28,   29,  218,  422,  423,  214,  422,  423,  455,\n/*    30 */   461,   31,   26,   26,   26,   26,   27,   27,   28,   28,\n/*    40 */    28,   29,  218,   30,  492,   32,  137,   23,   22,  315,\n/*    50 */   465,  466,  462,  462,   25,   25,   24,   24,   24,   24,\n/*    60 */   445,   26,   26,   26,   26,   27,   27,   28,   28,   28,\n/*    70 */    29,  218,  309,  218,  318,  448,  521,  499,   45,   26,\n/*    80 */    26,   26,   26,   27,   27,   28,   28,   28,   29,  218,\n/*    90 */   422,  423,  425,  426,  159,  425,  426,  366,  369,  370,\n/*   100 */   318,  455,  461,  394,  523,   21,  188,  504,  371,   27,\n/*   110 */    27,   28,   28,   28,   29,  218,  422,  423,  424,   23,\n/*   120 */    22,  315,  465,  466,  462,  462,   25,   25,   24,   24,\n/*   130 */    24,   24,  564,   26,   26,   26,   26,   27,   27,   28,\n/*   140 */    28,   28,   29,  218,  309,  230,  513,  138,  477,  220,\n/*   150 */   557,  148,  135,  260,  364,  265,  365,  156,  425,  426,\n/*   160 */   245,  610,  337,   30,  269,   32,  137,  448,  608,  609,\n/*   170 */   233,  230,  499,  455,  461,   57,  515,  334,  135,  260,\n/*   180 */   364,  265,  365,  156,  425,  426,  444,   78,  417,  414,\n/*   190 */   269,   23,   22,  315,  465,  466,  462,  462,   25,   25,\n/*   200 */    24,   24,   24,   24,  348,   26,   26,   26,   26,   27,\n/*   210 */    27,   28,   28,   28,   29,  218,  309,  216,  543,  556,\n/*   220 */   486,  130,  498,  607,   30,  337,   32,  137,  351,  396,\n/*   230 */   438,   63,  337,  361,  424,  448,  487,  337,  424,  544,\n/*   240 */   334,  217,  195,  606,  605,  455,  461,  334,   18,  444,\n/*   250 */    85,  488,  334,  347,  192,  565,  444,   78,  316,  472,\n/*   260 */   473,  444,   85,   23,   22,  315,  465,  466,  462,  462,\n/*   270 */    25,   25,   24,   24,   24,   24,  445,   26,   26,   26,\n/*   280 */    26,   27,   27,   28,   28,   28,   29,  218,  309,  353,\n/*   290 */   223,  320,  607,  193,  238,  337,  481,   16,  351,  185,\n/*   300 */   330,  419,  222,  350,  604,  219,  215,  424,  112,  337,\n/*   310 */   334,  157,  606,  408,  213,  563,  538,  455,  461,  444,\n/*   320 */    79,  219,  562,  524,  334,  576,  522,  629,  417,  414,\n/*   330 */   450,  581,  441,  444,   78,   23,   22,  315,  465,  466,\n/*   340 */   462,  462,   25,   25,   24,   24,   24,   24,  445,   26,\n/*   350 */    26,   26,   26,   27,   27,   28,   28,   28,   29,  218,\n/*   360 */   309,  452,  452,  452,  159,  399,  311,  366,  369,  370,\n/*   370 */   337,  251,  404,  407,  219,  355,  556,    4,  371,  422,\n/*   380 */   423,  397,  286,  285,  244,  334,  540,  566,   63,  455,\n/*   390 */   461,  424,  216,  478,  444,   93,   28,   28,   28,   29,\n/*   400 */   218,  413,  477,  220,  578,   40,  545,   23,   22,  315,\n/*   410 */   465,  466,  462,  462,   25,   25,   24,   24,   24,   24,\n/*   420 */   582,   26,   26,   26,   26,   27,   27,   28,   28,   28,\n/*   430 */    29,  218,  309,  546,  337,   30,  517,   32,  137,  378,\n/*   440 */   326,  337,  874,  153,  194,  448,    1,  425,  426,  334,\n/*   450 */   422,  423,  422,  423,   29,  218,  334,  613,  444,   71,\n/*   460 */   210,  455,  461,   66,  581,  444,   93,  422,  423,  626,\n/*   470 */   949,  303,  949,  500,  479,  555,  202,   43,  445,   23,\n/*   480 */    22,  315,  465,  466,  462,  462,   25,   25,   24,   24,\n/*   490 */    24,   24,  436,   26,   26,   26,   26,   27,   27,   28,\n/*   500 */    28,   28,   29,  218,  309,  187,  211,  360,  520,  440,\n/*   510 */   246,  327,  622,  448,  397,  286,  285,  551,  425,  426,\n/*   520 */   425,  426,  334,  159,  337,  216,  366,  369,  370,  494,\n/*   530 */   556,  444,    9,  455,  461,  425,  426,  371,  495,  334,\n/*   540 */   445,  618,   63,  504,  198,  424,  501,  449,  444,   72,\n/*   550 */   474,   23,   22,  315,  465,  466,  462,  462,   25,   25,\n/*   560 */    24,   24,   24,   24,  395,   26,   26,   26,   26,   27,\n/*   570 */    27,   28,   28,   28,   29,  218,  309,  486,  445,  337,\n/*   580 */   537,   60,  224,  479,  343,  202,  398,  337,  439,  554,\n/*   590 */   199,  140,  337,  487,  334,  526,  527,  551,  516,  508,\n/*   600 */   456,  457,  334,  444,   67,  455,  461,  334,  488,  476,\n/*   610 */   528,  444,   76,   39,  424,   41,  444,   97,  579,  527,\n/*   620 */   529,  459,  460,   23,   22,  315,  465,  466,  462,  462,\n/*   630 */    25,   25,   24,   24,   24,   24,  337,   26,   26,   26,\n/*   640 */    26,   27,   27,   28,   28,   28,   29,  218,  309,  337,\n/*   650 */   458,  334,  272,  621,  307,  337,  312,  337,  374,   64,\n/*   660 */   444,   96,  317,  448,  334,  342,  472,  473,  469,  337,\n/*   670 */   334,  508,  334,  444,  101,  359,  252,  455,  461,  444,\n/*   680 */    99,  444,  104,  358,  334,  345,  424,  340,  157,  468,\n/*   690 */   468,  424,  493,  444,  105,   23,   22,  315,  465,  466,\n/*   700 */   462,  462,   25,   25,   24,   24,   24,   24,  337,   26,\n/*   710 */    26,   26,   26,   27,   27,   28,   28,   28,   29,  218,\n/*   720 */   309,  337,  181,  334,  499,   56,  139,  337,  219,  268,\n/*   730 */   384,  448,  444,  129,  382,  387,  334,  168,  337,  389,\n/*   740 */   508,  424,  334,  311,  424,  444,  131,  496,  269,  455,\n/*   750 */   461,  444,   59,  334,  424,  424,  391,  340,    8,  468,\n/*   760 */   468,  263,  444,  102,  390,  290,  321,   23,   22,  315,\n/*   770 */   465,  466,  462,  462,   25,   25,   24,   24,   24,   24,\n/*   780 */   337,   26,   26,   26,   26,   27,   27,   28,   28,   28,\n/*   790 */    29,  218,  309,  337,  138,  334,  416,    2,  268,  337,\n/*   800 */   389,  337,  443,  325,  444,   77,  442,  293,  334,  291,\n/*   810 */     7,  482,  337,  424,  334,  424,  334,  444,  100,  499,\n/*   820 */   339,  455,  461,  444,   68,  444,   98,  334,  254,  504,\n/*   830 */   232,  626,  948,  504,  948,  231,  444,  132,   47,   23,\n/*   840 */    22,  315,  465,  466,  462,  462,   25,   25,   24,   24,\n/*   850 */    24,   24,  337,   26,   26,   26,   26,   27,   27,   28,\n/*   860 */    28,   28,   29,  218,  309,  337,  280,  334,  256,  538,\n/*   870 */   362,  337,  258,  268,  622,  549,  444,  133,  203,  140,\n/*   880 */   334,  424,  548,  337,  180,  158,  334,  292,  424,  444,\n/*   890 */   134,  287,  552,  455,  461,  444,   69,  443,  334,  463,\n/*   900 */   340,  442,  468,  468,  427,  428,  429,  444,   80,  281,\n/*   910 */   322,   23,   33,  315,  465,  466,  462,  462,   25,   25,\n/*   920 */    24,   24,   24,   24,  337,   26,   26,   26,   26,   27,\n/*   930 */    27,   28,   28,   28,   29,  218,  309,  337,  406,  334,\n/*   940 */   212,  268,  550,  337,  268,  389,  329,  177,  444,   81,\n/*   950 */   542,  541,  334,  475,  475,  337,  424,  216,  334,  424,\n/*   960 */   424,  444,   70,  535,  368,  455,  461,  444,   82,  405,\n/*   970 */   334,  261,  392,  340,  445,  468,  468,  587,  323,  444,\n/*   980 */    83,  324,  262,  288,   22,  315,  465,  466,  462,  462,\n/*   990 */    25,   25,   24,   24,   24,   24,  337,   26,   26,   26,\n/*  1000 */    26,   27,   27,   28,   28,   28,   29,  218,  309,  337,\n/*  1010 */   211,  334,  294,  356,  340,  337,  468,  468,  532,  533,\n/*  1020 */   444,   84,  403,  144,  334,  574,  600,  337,  424,  573,\n/*  1030 */   334,  337,  420,  444,   86,  253,  234,  455,  461,  444,\n/*  1040 */    87,  430,  334,  383,  445,  431,  334,  274,  196,  331,\n/*  1050 */   424,  444,   88,  432,  145,  444,   73,  315,  465,  466,\n/*  1060 */   462,  462,   25,   25,   24,   24,   24,   24,  395,   26,\n/*  1070 */    26,   26,   26,   27,   27,   28,   28,   28,   29,  218,\n/*  1080 */    35,  344,  445,    3,  337,  394,  337,  333,  423,  278,\n/*  1090 */   388,  276,  280,  207,  147,   35,  344,  341,    3,  334,\n/*  1100 */   424,  334,  333,  423,  308,  623,  280,  424,  444,   74,\n/*  1110 */   444,   89,  341,  337,    6,  346,  338,  337,  421,  337,\n/*  1120 */   470,  424,   65,  332,  280,  481,  446,  445,  334,  247,\n/*  1130 */   346,  424,  334,  424,  334,  594,  280,  444,   90,  424,\n/*  1140 */   481,  444,   91,  444,   92,   38,   37,  625,  337,  410,\n/*  1150 */    47,  424,  237,  280,   36,  335,  336,  354,  248,  450,\n/*  1160 */    38,   37,  514,  334,  572,  381,  572,  596,  424,   36,\n/*  1170 */   335,  336,  444,   75,  450,  200,  506,  216,  154,  597,\n/*  1180 */   239,  240,  241,  146,  243,  249,  547,  593,  158,  433,\n/*  1190 */   452,  452,  452,  453,  454,   10,  598,  280,   20,   46,\n/*  1200 */   174,  412,  298,  337,  424,  452,  452,  452,  453,  454,\n/*  1210 */    10,  299,  424,   35,  344,  352,    3,  250,  334,  434,\n/*  1220 */   333,  423,  337,  172,  280,  581,  208,  444,   17,  171,\n/*  1230 */   341,   19,  173,  447,  424,  422,  423,  334,  337,  424,\n/*  1240 */   235,  280,  204,  205,  206,   42,  444,   94,  346,  435,\n/*  1250 */   136,  451,  221,  334,  308,  624,  424,  349,  481,  490,\n/*  1260 */   445,  152,  444,   95,  424,  424,  424,  236,  503,  491,\n/*  1270 */   507,  179,  424,  481,  424,  402,  295,  285,   38,   37,\n/*  1280 */   271,  310,  158,  424,  296,  424,  216,   36,  335,  336,\n/*  1290 */   509,  266,  450,  190,  191,  539,  267,  625,  558,  273,\n/*  1300 */   275,   48,  277,  522,  279,  424,  424,  450,  255,  409,\n/*  1310 */   424,  424,  257,  424,  424,  424,  284,  424,  386,  424,\n/*  1320 */   357,  584,  585,  452,  452,  452,  453,  454,   10,  259,\n/*  1330 */   393,  424,  289,  424,  592,  603,  424,  424,  452,  452,\n/*  1340 */   452,  297,  300,  301,  505,  424,  617,  424,  363,  424,\n/*  1350 */   424,  373,  577,  158,  158,  511,  424,  424,  424,  525,\n/*  1360 */   588,  424,  154,  589,  601,   54,   54,  620,  512,  306,\n/*  1370 */   319,  530,  531,  535,  264,  107,  228,  536,  534,  375,\n/*  1380 */   559,  304,  560,  561,  305,  227,  229,  553,  567,  161,\n/*  1390 */   162,  379,  377,  163,   51,  209,  569,  282,  164,  570,\n/*  1400 */   385,  143,  580,  116,  119,  183,  400,  590,  401,  121,\n/*  1410 */   122,  123,  124,  126,  599,  328,  614,   55,   58,  615,\n/*  1420 */   616,  619,   62,  418,  103,  226,  111,  176,  242,  182,\n/*  1430 */   437,  313,  201,  314,  670,  671,  672,  149,  150,  467,\n/*  1440 */   464,   34,  483,  471,  480,  184,  197,  502,  484,    5,\n/*  1450 */   485,  151,  489,   44,  141,   11,  106,  160,  225,  518,\n/*  1460 */   519,   49,  510,  108,  367,  270,   12,  155,  109,   50,\n/*  1470 */   110,  262,  376,  186,  568,  113,  142,  154,  165,  115,\n/*  1480 */    15,  283,  583,  166,  167,  380,  586,  117,   13,  120,\n/*  1490 */   372,   52,   53,  118,  591,  169,  114,  170,  595,  125,\n/*  1500 */   127,  571,  575,  602,   14,  128,  611,  612,   61,  175,\n/*  1510 */   189,  415,  302,  627,  960,  960,  960,  960,  411,\n};\n    static YYCODETYPE[] yy_lookahead = new YYCODETYPE[]{\n/*     0 */    19,  142,  143,  144,  145,   24,  116,   26,   75,   76,\n/*    10 */    77,   78,   25,   80,   81,   82,   83,   84,   85,   86,\n/*    20 */    87,   88,   89,   90,   26,   27,  160,   26,   27,   48,\n/*    30 */    49,   79,   80,   81,   82,   83,   84,   85,   86,   87,\n/*    40 */    88,   89,   90,  222,  223,  224,  225,   66,   67,   68,\n/*    50 */    69,   70,   71,   72,   73,   74,   75,   76,   77,   78,\n/*    60 */   194,   80,   81,   82,   83,   84,   85,   86,   87,   88,\n/*    70 */    89,   90,   19,   90,   19,   94,  174,   25,   25,   80,\n/*    80 */    81,   82,   83,   84,   85,   86,   87,   88,   89,   90,\n/*    90 */    26,   27,   94,   95,   96,   94,   95,   99,  100,  101,\n/*   100 */    19,   48,   49,  150,  174,   52,  119,  166,  110,   84,\n/*   110 */    85,   86,   87,   88,   89,   90,   26,   27,  165,   66,\n/*   120 */    67,   68,   69,   70,   71,   72,   73,   74,   75,   76,\n/*   130 */    77,   78,  186,   80,   81,   82,   83,   84,   85,   86,\n/*   140 */    87,   88,   89,   90,   19,   90,  205,   95,   84,   85,\n/*   150 */   186,   96,   97,   98,   99,  100,  101,  102,   94,   95,\n/*   160 */   195,   97,  150,  222,  109,  224,  225,   26,  104,  105,\n/*   170 */   217,   90,  120,   48,   49,   50,   86,  165,   97,   98,\n/*   180 */    99,  100,  101,  102,   94,   95,  174,  175,    1,    2,\n/*   190 */   109,   66,   67,   68,   69,   70,   71,   72,   73,   74,\n/*   200 */    75,   76,   77,   78,  191,   80,   81,   82,   83,   84,\n/*   210 */    85,   86,   87,   88,   89,   90,   19,  116,   35,  150,\n/*   220 */    12,   24,  208,  150,  222,  150,  224,  225,  216,  128,\n/*   230 */   161,  162,  150,  221,  165,   94,   28,  150,  165,   56,\n/*   240 */   165,  197,  160,  170,  171,   48,   49,  165,  204,  174,\n/*   250 */   175,   43,  165,   45,  185,  186,  174,  175,  169,  170,\n/*   260 */   171,  174,  175,   66,   67,   68,   69,   70,   71,   72,\n/*   270 */    73,   74,   75,   76,   77,   78,  194,   80,   81,   82,\n/*   280 */    83,   84,   85,   86,   87,   88,   89,   90,   19,  214,\n/*   290 */   215,  108,  150,   25,  148,  150,   64,   22,  216,   24,\n/*   300 */   146,  147,  215,  221,  231,  232,  152,  165,  154,  150,\n/*   310 */   165,   49,  170,  171,  160,  181,  182,   48,   49,  174,\n/*   320 */   175,  232,  188,  165,  165,   21,   94,    0,    1,    2,\n/*   330 */    98,   55,  174,  174,  175,   66,   67,   68,   69,   70,\n/*   340 */    71,   72,   73,   74,   75,   76,   77,   78,  194,   80,\n/*   350 */    81,   82,   83,   84,   85,   86,   87,   88,   89,   90,\n/*   360 */    19,  129,  130,  131,   96,   61,  104,   99,  100,  101,\n/*   370 */   150,  226,  218,  231,  232,  216,  150,  196,  110,   26,\n/*   380 */    27,  105,  106,  107,  158,  165,  183,  161,  162,   48,\n/*   390 */    49,  165,  116,  166,  174,  175,   86,   87,   88,   89,\n/*   400 */    90,  247,   84,   85,  100,  136,  183,   66,   67,   68,\n/*   410 */    69,   70,   71,   72,   73,   74,   75,   76,   77,   78,\n/*   420 */    11,   80,   81,   82,   83,   84,   85,   86,   87,   88,\n/*   430 */    89,   90,   19,  183,  150,  222,   23,  224,  225,  237,\n/*   440 */   220,  150,  138,   24,  160,   26,   22,   94,   95,  165,\n/*   450 */    26,   27,   26,   27,   89,   90,  165,  244,  174,  175,\n/*   460 */   236,   48,   49,   22,   55,  174,  175,   26,   27,   22,\n/*   470 */    23,  163,   25,  120,  166,  167,  168,  136,  194,   66,\n/*   480 */    67,   68,   69,   70,   71,   72,   73,   74,   75,   76,\n/*   490 */    77,   78,  153,   80,   81,   82,   83,   84,   85,   86,\n/*   500 */    87,   88,   89,   90,   19,  196,  160,  150,   23,  173,\n/*   510 */   198,  220,   65,   94,  105,  106,  107,  181,   94,   95,\n/*   520 */    94,   95,  165,   96,  150,  116,   99,  100,  101,   31,\n/*   530 */   150,  174,  175,   48,   49,   94,   95,  110,   40,  165,\n/*   540 */   194,  161,  162,  166,  160,  165,  120,  166,  174,  175,\n/*   550 */   233,   66,   67,   68,   69,   70,   71,   72,   73,   74,\n/*   560 */    75,   76,   77,   78,  218,   80,   81,   82,   83,   84,\n/*   570 */    85,   86,   87,   88,   89,   90,   19,   12,  194,  150,\n/*   580 */    23,  235,  205,  166,  167,  168,  240,  150,  172,  173,\n/*   590 */   206,  207,  150,   28,  165,  190,  191,  181,   23,  150,\n/*   600 */    48,   49,  165,  174,  175,   48,   49,  165,   43,  233,\n/*   610 */    45,  174,  175,  135,  165,  137,  174,  175,  190,  191,\n/*   620 */    55,   69,   70,   66,   67,   68,   69,   70,   71,   72,\n/*   630 */    73,   74,   75,   76,   77,   78,  150,   80,   81,   82,\n/*   640 */    83,   84,   85,   86,   87,   88,   89,   90,   19,  150,\n/*   650 */    98,  165,   23,  250,  251,  150,  155,  150,   19,   22,\n/*   660 */   174,  175,  213,   26,  165,  169,  170,  171,   23,  150,\n/*   670 */   165,  150,  165,  174,  175,   19,  150,   48,   49,  174,\n/*   680 */   175,  174,  175,   27,  165,  228,  165,  112,   49,  114,\n/*   690 */   115,  165,  177,  174,  175,   66,   67,   68,   69,   70,\n/*   700 */    71,   72,   73,   74,   75,   76,   77,   78,  150,   80,\n/*   710 */    81,   82,   83,   84,   85,   86,   87,   88,   89,   90,\n/*   720 */    19,  150,   23,  165,   25,   24,  150,  150,  232,  150,\n/*   730 */   229,   94,  174,  175,  213,  234,  165,   25,  150,  150,\n/*   740 */   150,  165,  165,  104,  165,  174,  175,  177,  109,   48,\n/*   750 */    49,  174,  175,  165,  165,  165,   19,  112,   22,  114,\n/*   760 */   115,  177,  174,  175,   27,   16,  187,   66,   67,   68,\n/*   770 */    69,   70,   71,   72,   73,   74,   75,   76,   77,   78,\n/*   780 */   150,   80,   81,   82,   83,   84,   85,   86,   87,   88,\n/*   790 */    89,   90,   19,  150,   95,  165,  144,  145,  150,  150,\n/*   800 */   150,  150,  113,  213,  174,  175,  117,   58,  165,   60,\n/*   810 */    74,   23,  150,  165,  165,  165,  165,  174,  175,  120,\n/*   820 */    19,   48,   49,  174,  175,  174,  175,  165,  209,  166,\n/*   830 */   241,   22,   23,  166,   25,  187,  174,  175,  126,   66,\n/*   840 */    67,   68,   69,   70,   71,   72,   73,   74,   75,   76,\n/*   850 */    77,   78,  150,   80,   81,   82,   83,   84,   85,   86,\n/*   860 */    87,   88,   89,   90,   19,  150,  150,  165,  205,  182,\n/*   870 */    86,  150,  205,  150,   65,  166,  174,  175,  206,  207,\n/*   880 */   165,  165,  177,  150,   23,   25,  165,  138,  165,  174,\n/*   890 */   175,  241,  166,   48,   49,  174,  175,  113,  165,   98,\n/*   900 */   112,  117,  114,  115,    7,    8,    9,  174,  175,  193,\n/*   910 */   187,   66,   67,   68,   69,   70,   71,   72,   73,   74,\n/*   920 */    75,   76,   77,   78,  150,   80,   81,   82,   83,   84,\n/*   930 */    85,   86,   87,   88,   89,   90,   19,  150,   97,  165,\n/*   940 */   160,  150,  177,  150,  150,  150,  248,  249,  174,  175,\n/*   950 */    97,   98,  165,  129,  130,  150,  165,  116,  165,  165,\n/*   960 */   165,  174,  175,  103,  178,   48,   49,  174,  175,  128,\n/*   970 */   165,   98,  242,  112,  194,  114,  115,  199,  187,  174,\n/*   980 */   175,  187,  109,  242,   67,   68,   69,   70,   71,   72,\n/*   990 */    73,   74,   75,   76,   77,   78,  150,   80,   81,   82,\n/*  1000 */    83,   84,   85,   86,   87,   88,   89,   90,   19,  150,\n/*  1010 */   160,  165,  209,  150,  112,  150,  114,  115,    7,    8,\n/*  1020 */   174,  175,  209,    6,  165,   29,  199,  150,  165,   33,\n/*  1030 */   165,  150,  149,  174,  175,  150,  241,   48,   49,  174,\n/*  1040 */   175,  149,  165,   47,  194,  149,  165,   16,  160,  149,\n/*  1050 */   165,  174,  175,   13,  151,  174,  175,   68,   69,   70,\n/*  1060 */    71,   72,   73,   74,   75,   76,   77,   78,  218,   80,\n/*  1070 */    81,   82,   83,   84,   85,   86,   87,   88,   89,   90,\n/*  1080 */    19,   20,  194,   22,  150,  150,  150,   26,   27,   58,\n/*  1090 */   240,   60,  150,  160,  151,   19,   20,   36,   22,  165,\n/*  1100 */   165,  165,   26,   27,   22,   23,  150,  165,  174,  175,\n/*  1110 */   174,  175,   36,  150,   25,   54,  150,  150,  150,  150,\n/*  1120 */    23,  165,   25,  159,  150,   64,  194,  194,  165,  199,\n/*  1130 */    54,  165,  165,  165,  165,  193,  150,  174,  175,  165,\n/*  1140 */    64,  174,  175,  174,  175,   84,   85,   65,  150,  193,\n/*  1150 */   126,  165,  217,  150,   93,   94,   95,  123,  200,   98,\n/*  1160 */    84,   85,   86,  165,  105,  106,  107,  193,  165,   93,\n/*  1170 */    94,   95,  174,  175,   98,    5,   23,  116,   25,  193,\n/*  1180 */    10,   11,   12,   13,   14,  201,   23,   17,   25,  150,\n/*  1190 */   129,  130,  131,  132,  133,  134,  193,  150,  125,  124,\n/*  1200 */    30,  245,   32,  150,  165,  129,  130,  131,  132,  133,\n/*  1210 */   134,   41,  165,   19,   20,  122,   22,  202,  165,  150,\n/*  1220 */    26,   27,  150,   53,  150,   55,  160,  174,  175,   59,\n/*  1230 */    36,   22,   62,  203,  165,   26,   27,  165,  150,  165,\n/*  1240 */   193,  150,  105,  106,  107,  135,  174,  175,   54,  150,\n/*  1250 */   150,  150,  227,  165,   22,   23,  165,  150,   64,  150,\n/*  1260 */   194,  118,  174,  175,  165,  165,  165,  193,  150,  157,\n/*  1270 */   150,  157,  165,   64,  165,  105,  106,  107,   84,   85,\n/*  1280 */    23,  111,   25,  165,  193,  165,  116,   93,   94,   95,\n/*  1290 */   150,  150,   98,   84,   85,  150,  150,   65,  150,  150,\n/*  1300 */   150,  104,  150,   94,  150,  165,  165,   98,  210,  139,\n/*  1310 */   165,  165,  210,  165,  165,  165,  150,  165,  150,  165,\n/*  1320 */   121,  150,  150,  129,  130,  131,  132,  133,  134,  210,\n/*  1330 */   150,  165,  150,  165,  150,  150,  165,  165,  129,  130,\n/*  1340 */   131,  150,  150,  150,  211,  165,  150,  165,  104,  165,\n/*  1350 */   165,   23,   23,   25,   25,  211,  165,  165,  165,  176,\n/*  1360 */    23,  165,   25,   23,   23,   25,   25,   23,  211,   25,\n/*  1370 */    46,  176,  184,  103,  176,   22,   90,  176,  178,   18,\n/*  1380 */   176,  179,  176,  176,  179,  230,  230,  184,  157,  156,\n/*  1390 */   156,   44,  157,  156,  135,  157,  157,  238,  156,  239,\n/*  1400 */   157,   66,  189,  189,   22,  219,  157,  199,   18,  192,\n/*  1410 */   192,  192,  192,  189,  199,  157,   39,  243,  243,  157,\n/*  1420 */   157,   37,  246,    1,  164,  180,  180,  249,   15,  219,\n/*  1430 */    23,  252,   22,  252,  118,  118,  118,  118,  118,  113,\n/*  1440 */    98,   22,   11,   23,   23,   22,   22,  120,   23,   34,\n/*  1450 */    23,   25,   23,   25,  118,   25,   22,  102,   50,   23,\n/*  1460 */    23,   22,   27,   22,   50,   23,   34,   34,   22,   22,\n/*  1470 */    22,  109,   19,   24,   20,  104,   38,   25,  104,   22,\n/*  1480 */     5,  138,    1,  118,   34,   42,   27,  108,   22,  119,\n/*  1490 */    50,   74,   74,  127,    1,   16,   51,  121,   20,  119,\n/*  1500 */   108,   57,   51,  128,   22,  127,   23,   23,   16,   15,\n/*  1510 */    22,    3,  140,    4,  253,  253,  253,  253,   63,\n};\n    const int YY_SHIFT_USE_DFLT = (-111);\n    const int YY_SHIFT_MAX = 415;\n    static short[] yy_shift_ofst = new short[]{\n/*     0 */   187, 1061, 1170, 1061, 1194, 1194,   -2,   64,   64,  -19,\n/*    10 */  1194, 1194, 1194, 1194, 1194,  276,    1,  125, 1076, 1194,\n/*    20 */  1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,\n/*    30 */  1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,\n/*    40 */  1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,\n/*    50 */  1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,  -48,\n/*    60 */   409,    1,    1,  141,  318,  318, -110,   53,  197,  269,\n/*    70 */   341,  413,  485,  557,  629,  701,  773,  845,  773,  773,\n/*    80 */   773,  773,  773,  773,  773,  773,  773,  773,  773,  773,\n/*    90 */   773,  773,  773,  773,  773,  773,  917,  989,  989,  -67,\n/*   100 */   -67,   -1,   -1,   55,   25,  310,    1,    1,    1,    1,\n/*   110 */     1,  639,  304,    1,    1,    1,    1,    1,    1,    1,\n/*   120 */     1,    1,    1,    1,    1,    1,    1,    1,    1,  365,\n/*   130 */   141,  -17, -111, -111, -111, 1209,   81,  424,  353,  426,\n/*   140 */   441,   90,  565,  565,    1,    1,    1,    1,    1,    1,\n/*   150 */     1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\n/*   160 */     1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\n/*   170 */     1,    1,    1,    1,    1,    1,  447,  809,  327,  419,\n/*   180 */   419,  419,  841,  101, -110, -110, -110, -111, -111, -111,\n/*   190 */   232,  232,  268,  427,  575,  645,  788,  208,  861,  699,\n/*   200 */   897,  784,  637,   52,  183,  183,  183,  902,  902,  996,\n/*   210 */  1059,  902,  902,  902,  902,  275,  689,  -13,  141,  824,\n/*   220 */   824,  478,  498,  498,  656,  498,  262,  498,  141,  498,\n/*   230 */   141,  860,  737,  712,  737,  656,  656,  712, 1017, 1017,\n/*   240 */  1017, 1017, 1040, 1040, 1089, -110, 1024, 1034, 1075, 1093,\n/*   250 */  1073, 1110, 1143, 1143, 1197, 1199, 1197, 1199, 1197, 1199,\n/*   260 */  1244, 1244, 1324, 1244, 1270, 1244, 1353, 1286, 1286, 1324,\n/*   270 */  1244, 1244, 1244, 1353, 1361, 1143, 1361, 1143, 1361, 1143,\n/*   280 */  1143, 1347, 1259, 1361, 1143, 1335, 1335, 1382, 1024, 1143,\n/*   290 */  1390, 1390, 1390, 1390, 1024, 1335, 1382, 1143, 1377, 1377,\n/*   300 */  1143, 1143, 1384, -111, -111, -111, -111, -111, -111,  552,\n/*   310 */   749, 1137, 1031, 1082, 1232,  801, 1097, 1153,  873, 1011,\n/*   320 */   853, 1163, 1257, 1328, 1329, 1337, 1340, 1341,  736, 1344,\n/*   330 */  1422, 1413, 1407, 1410, 1316, 1317, 1318, 1319, 1320, 1342,\n/*   340 */  1326, 1419, 1420, 1421, 1423, 1431, 1424, 1425, 1426, 1427,\n/*   350 */  1429, 1428, 1415, 1430, 1432, 1428, 1327, 1434, 1433, 1435,\n/*   360 */  1336, 1436, 1437, 1438, 1408, 1439, 1414, 1441, 1442, 1446,\n/*   370 */  1447, 1440, 1448, 1355, 1362, 1453, 1454, 1449, 1371, 1443,\n/*   380 */  1444, 1445, 1452, 1451, 1343, 1374, 1457, 1475, 1481, 1365,\n/*   390 */  1450, 1459, 1379, 1417, 1418, 1366, 1466, 1370, 1493, 1479,\n/*   400 */  1376, 1478, 1380, 1392, 1378, 1482, 1375, 1483, 1484, 1492,\n/*   410 */  1455, 1494, 1372, 1488, 1508, 1509,\n};\n    const int YY_REDUCE_USE_DFLT = (-180);\n    const int YY_REDUCE_MAX = 308;\n    static short[] yy_reduce_ofst = new short[]{\n/*     0 */  -141,   82,  154,  284,   12,   75,   69,   73,  142,  -59,\n/*    10 */   145,   87,  159,  220,  291,  346,  226,  213,  357,  374,\n/*    20 */   429,  437,  442,  486,  499,  505,  507,  519,  558,  571,\n/*    30 */   577,  588,  630,  643,  649,  651,  662,  702,  715,  721,\n/*    40 */   733,  774,  787,  793,  805,  846,  859,  865,  877,  881,\n/*    50 */   934,  936,  963,  967,  969,  998, 1053, 1072, 1088, -179,\n/*    60 */   850,  956,  380,  308,   89,  496,  384,    2,    2,    2,\n/*    70 */     2,    2,    2,    2,    2,    2,    2,    2,    2,    2,\n/*    80 */     2,    2,    2,    2,    2,    2,    2,    2,    2,    2,\n/*    90 */     2,    2,    2,    2,    2,    2,    2,    2,    2,    2,\n/*   100 */     2,    2,    2,  416,    2,    2,  449,  579,  648,  723,\n/*   110 */   791,  134,  501,  716,  521,  794,  589,  -47,  650,  590,\n/*   120 */   795,  942,  974,  986, 1003, 1047, 1074,  935, 1091,    2,\n/*   130 */   417,    2,    2,    2,    2,  158,  336,  526,  576,  863,\n/*   140 */   885,  966,  405,  428,  968, 1039, 1069, 1099, 1100,  966,\n/*   150 */  1101, 1107, 1109, 1118, 1120, 1140, 1141, 1145, 1146, 1148,\n/*   160 */  1149, 1150, 1152, 1154, 1166, 1168, 1171, 1172, 1180, 1182,\n/*   170 */  1184, 1185, 1191, 1192, 1193, 1196,  403,  403,  652,  377,\n/*   180 */   663,  667, -134,  780,  888,  933, 1066,   44,  672,  698,\n/*   190 */   -98,  -70,  -54,  -36,  -35,  -35,  -35,   13,  -35,   14,\n/*   200 */   146,  181,  227,   14,  203,  223,  250,  -35,  -35,  224,\n/*   210 */   202,  -35,  -35,  -35,  -35,  339,  309,  312,  381,  317,\n/*   220 */   376,  457,  515,  570,  619,  584,  687,  705,  709,  765,\n/*   230 */   726,  786,  730,  778,  741,  803,  813,  827,  883,  892,\n/*   240 */   896,  900,  903,  943,  964,  932,  930,  958,  984, 1015,\n/*   250 */  1030, 1025, 1112, 1114, 1098, 1133, 1102, 1144, 1119, 1157,\n/*   260 */  1183, 1195, 1188, 1198, 1200, 1201, 1202, 1155, 1156, 1203,\n/*   270 */  1204, 1206, 1207, 1205, 1233, 1231, 1234, 1235, 1237, 1238,\n/*   280 */  1239, 1159, 1160, 1242, 1243, 1213, 1214, 1186, 1208, 1249,\n/*   290 */  1217, 1218, 1219, 1220, 1215, 1224, 1210, 1258, 1174, 1175,\n/*   300 */  1262, 1263, 1176, 1260, 1245, 1246, 1178, 1179, 1181,\n};\n    static YYACTIONTYPE[] yy_default = new YYACTIONTYPE[] {\n/*     0 */   634,  869,  958,  958,  869,  958,  958,  898,  898,  757,\n/*    10 */   867,  958,  958,  958,  958,  958,  958,  932,  958,  958,\n/*    20 */   958,  958,  958,  958,  958,  958,  958,  958,  958,  958,\n/*    30 */   958,  958,  958,  958,  958,  958,  958,  958,  958,  958,\n/*    40 */   958,  958,  958,  958,  958,  958,  958,  958,  958,  958,\n/*    50 */   958,  958,  958,  958,  958,  958,  958,  958,  958,  841,\n/*    60 */   958,  958,  958,  673,  898,  898,  761,  792,  958,  958,\n/*    70 */   958,  958,  958,  958,  958,  958,  793,  958,  871,  866,\n/*    80 */   862,  864,  863,  870,  794,  783,  790,  797,  772,  911,\n/*    90 */   799,  800,  806,  807,  933,  931,  829,  828,  847,  831,\n/*   100 */   853,  830,  840,  665,  832,  833,  958,  958,  958,  958,\n/*   110 */   958,  726,  660,  958,  958,  958,  958,  958,  958,  958,\n/*   120 */   958,  958,  958,  958,  958,  958,  958,  958,  958,  834,\n/*   130 */   958,  835,  848,  849,  850,  958,  958,  958,  958,  958,\n/*   140 */   958,  958,  958,  958,  640,  958,  958,  958,  958,  958,\n/*   150 */   958,  958,  958,  958,  958,  958,  958,  958,  958,  958,\n/*   160 */   958,  958,  958,  958,  958,  958,  958,  958,  958,  958,\n/*   170 */   958,  882,  958,  936,  938,  958,  958,  958,  634,  757,\n/*   180 */   757,  757,  958,  958,  958,  958,  958,  751,  761,  950,\n/*   190 */   958,  958,  717,  958,  958,  958,  958,  958,  958,  958,\n/*   200 */   642,  749,  675,  759,  958,  958,  958,  662,  738,  904,\n/*   210 */   958,  923,  921,  740,  802,  958,  749,  758,  958,  958,\n/*   220 */   958,  865,  786,  786,  774,  786,  696,  786,  958,  786,\n/*   230 */   958,  699,  916,  796,  916,  774,  774,  796,  639,  639,\n/*   240 */   639,  639,  650,  650,  716,  958,  796,  787,  789,  779,\n/*   250 */   791,  958,  765,  765,  773,  778,  773,  778,  773,  778,\n/*   260 */   728,  728,  713,  728,  699,  728,  875,  879,  879,  713,\n/*   270 */   728,  728,  728,  875,  657,  765,  657,  765,  657,  765,\n/*   280 */   765,  908,  910,  657,  765,  730,  730,  808,  796,  765,\n/*   290 */   737,  737,  737,  737,  796,  730,  808,  765,  935,  935,\n/*   300 */   765,  765,  943,  683,  701,  701,  950,  955,  955,  958,\n/*   310 */   958,  958,  958,  958,  958,  958,  958,  958,  958,  958,\n/*   320 */   958,  958,  958,  958,  958,  958,  958,  958,  884,  958,\n/*   330 */   958,  648,  958,  667,  815,  820,  816,  958,  817,  958,\n/*   340 */   743,  958,  958,  958,  958,  958,  958,  958,  958,  958,\n/*   350 */   958,  868,  958,  780,  958,  788,  958,  958,  958,  958,\n/*   360 */   958,  958,  958,  958,  958,  958,  958,  958,  958,  958,\n/*   370 */   958,  958,  958,  958,  958,  958,  958,  958,  958,  958,\n/*   380 */   958,  906,  907,  958,  958,  958,  958,  958,  958,  914,\n/*   390 */   958,  958,  958,  958,  958,  958,  958,  958,  958,  958,\n/*   400 */   958,  958,  958,  958,  958,  958,  958,  958,  958,  958,\n/*   410 */   942,  958,  958,  945,  635,  958,  630,  632,  633,  637,\n/*   420 */   638,  641,  667,  668,  670,  671,  672,  643,  644,  645,\n/*   430 */   646,  647,  649,  653,  651,  652,  654,  661,  663,  682,\n/*   440 */   684,  686,  747,  748,  812,  741,  742,  746,  669,  823,\n/*   450 */   814,  818,  819,  821,  822,  836,  837,  839,  845,  852,\n/*   460 */   855,  838,  843,  844,  846,  851,  854,  744,  745,  858,\n/*   470 */   676,  677,  680,  681,  894,  896,  895,  897,  679,  678,\n/*   480 */   824,  827,  860,  861,  924,  925,  926,  927,  928,  856,\n/*   490 */   766,  859,  842,  781,  784,  785,  782,  750,  760,  768,\n/*   500 */   769,  770,  771,  755,  756,  762,  777,  810,  811,  775,\n/*   510 */   776,  763,  764,  752,  753,  754,  857,  813,  825,  826,\n/*   520 */   687,  688,  820,  689,  690,  691,  729,  732,  733,  734,\n/*   530 */   692,  711,  714,  715,  693,  700,  694,  695,  702,  703,\n/*   540 */   704,  707,  708,  709,  710,  705,  706,  876,  877,  880,\n/*   550 */   878,  697,  698,  712,  685,  674,  666,  718,  721,  722,\n/*   560 */   723,  724,  725,  727,  719,  720,  664,  655,  658,  767,\n/*   570 */   900,  909,  905,  901,  902,  903,  659,  872,  873,  731,\n/*   580 */   804,  805,  899,  912,  915,  917,  918,  919,  809,  920,\n/*   590 */   922,  913,  947,  656,  735,  736,  739,  881,  929,  795,\n/*   600 */   798,  801,  803,  883,  885,  887,  889,  890,  891,  892,\n/*   610 */   893,  886,  888,  930,  934,  937,  939,  940,  941,  944,\n/*   620 */   946,  951,  952,  953,  956,  957,  954,  636,  631,\n};\n    static int YY_SZ_ACTTAB = yy_action.Length;//(int)(yy_action.Length/sizeof(yy_action[0]))\n\n    /* The next table maps tokens into fallback tokens.  If a construct\n    ** like the following:\n    **\n    **      %fallback ID X Y Z.\n    **\n    ** appears in the grammar, then ID becomes a fallback token for X, Y,\n    ** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser\n    ** but it does not parse, the type of the token is changed to ID and\n    ** the parse is retried before an error is thrown.\n    */\n#if YYFALLBACK\n    static YYCODETYPE[] yyFallback = new YYCODETYPE[]{\n0,  /*          $ => nothing */\n0,  /*       SEMI => nothing */\n26,  /*    EXPLAIN => ID */\n26,  /*      QUERY => ID */\n26,  /*       PLAN => ID */\n26,  /*      BEGIN => ID */\n0,  /* TRANSACTION => nothing */\n26,  /*   DEFERRED => ID */\n26,  /*  IMMEDIATE => ID */\n26,  /*  EXCLUSIVE => ID */\n0,  /*     COMMIT => nothing */\n26,  /*        END => ID */\n26,  /*   ROLLBACK => ID */\n26,  /*  SAVEPOINT => ID */\n26,  /*    RELEASE => ID */\n0,  /*         TO => nothing */\n0,  /*      TABLE => nothing */\n0,  /*     CREATE => nothing */\n26,  /*         IF => ID */\n0,  /*        NOT => nothing */\n0,  /*     EXISTS => nothing */\n26,  /*       TEMP => ID */\n0,  /*         LP => nothing */\n0,  /*         RP => nothing */\n0,  /*         AS => nothing */\n0,  /*      COMMA => nothing */\n0,  /*         ID => nothing */\n0,  /*    INDEXED => nothing */\n26,  /*      ABORT => ID */\n26,  /*      AFTER => ID */\n26,  /*    ANALYZE => ID */\n26,  /*        ASC => ID */\n26,  /*     ATTACH => ID */\n26,  /*     BEFORE => ID */\n26,  /*         BY => ID */\n26,  /*    CASCADE => ID */\n26,  /*       CAST => ID */\n26,  /*   COLUMNKW => ID */\n26,  /*   CONFLICT => ID */\n26,  /*   DATABASE => ID */\n26,  /*       DESC => ID */\n26,  /*     DETACH => ID */\n26,  /*       EACH => ID */\n26,  /*       FAIL => ID */\n26,  /*        FOR => ID */\n26,  /*     IGNORE => ID */\n26,  /*  INITIALLY => ID */\n26,  /*    INSTEAD => ID */\n26,  /*    LIKE_KW => ID */\n26,  /*      MATCH => ID */\n26,  /*        KEY => ID */\n26,  /*         OF => ID */\n26,  /*     OFFSET => ID */\n26,  /*     PRAGMA => ID */\n26,  /*      RAISE => ID */\n26,  /*    REPLACE => ID */\n26,  /*   RESTRICT => ID */\n26,  /*        ROW => ID */\n26,  /*    TRIGGER => ID */\n26,  /*     VACUUM => ID */\n26,  /*       VIEW => ID */\n26,  /*    VIRTUAL => ID */\n26,  /*    REINDEX => ID */\n26,  /*     RENAME => ID */\n26,  /*   CTIME_KW => ID */\n};\n#endif // * YYFALLBACK */\n\n    /* The following structure represents a single element of the\n** parser\'s stack.  Information stored includes:\n**\n**   +  The state number for the parser at this level of the stack.\n**\n**   +  The value of the token stored at this level of the stack.\n**      (In other words, the "major" token.)\n**\n**   +  The semantic value stored at this level of the stack.  This is\n**      the information used by the action routines in the grammar.\n**      It is sometimes called the "minor" token.\n*/\n    public class yyStackEntry\n    {\n      public YYACTIONTYPE stateno;       /* The state-number */\n      public YYCODETYPE major;         /* The major token value.  This is the code\n** number for the token at this stack level */\n      public YYMINORTYPE minor; /* The user-supplied minor token value.  This\n** is the value of the token  */\n    };\n    //typedef struct yyStackEntry yyStackEntry;\n\n    /* The state of the parser is completely contained in an instance of\n    ** the following structure */\n    public class yyParser\n    {\n      public int yyidx;                    /* Index of top element in stack */\n#if YYTRACKMAXSTACKDEPTH\nint yyidxMax;                 /* Maximum value of yyidx */\n#endif\n      public int yyerrcnt;                 /* Shifts left before out of the error */\n      public Parse pParse;  // sqlite3ParserARG_SDECL                /* A place to hold %extra_argument */\n#if YYSTACKDEPTH//<=0\npublic int yystksz;                  /* Current side of the stack */\npublic yyStackEntry *yystack;        /* The parser\'s stack */\n#else\n      public yyStackEntry[] yystack = new yyStackEntry[YYSTACKDEPTH];  /* The parser\'s stack */\n#endif\n    };\n    //typedef struct yyParser yyParser;\n\n#if !NDEBUG\n    //#include <stdio.h>\n    static TextWriter yyTraceFILE = null;\n    static string yyTracePrompt = "";\n#endif // * NDEBUG */\n\n#if !NDEBUG\n    /*\n** Turn parser tracing on by giving a stream to which to write the trace\n** and a prompt to preface each trace message.  Tracing is turned off\n** by making either argument NULL\n**\n** Inputs:\n** <ul>\n** <li> A FILE* to which trace output should be written.\n**      If NULL, then tracing is turned off.\n** <li> A prefix string written at the beginning of every\n**      line of trace output.  If NULL, then tracing is\n**      turned off.\n** </ul>\n**\n** Outputs:\n** None.\n*/\n    static void sqlite3ParserTrace(TextWriter TraceFILE, string zTracePrompt)\n    {\n      yyTraceFILE = TraceFILE;\n      yyTracePrompt = zTracePrompt;\n      if (yyTraceFILE == null) yyTracePrompt = "";\n      else if (yyTracePrompt == "") yyTraceFILE = null;\n    }\n#endif // * NDEBUG */\n\n#if !NDEBUG\n    /* For tracing shifts, the names of all terminals and nonterminals\n** are required.  The following table supplies these names */\n    static string[] yyTokenName = {\n"$",             "SEMI",          "EXPLAIN",       "QUERY",\n"PLAN",          "BEGIN",         "TRANSACTION",   "DEFERRED",\n"IMMEDIATE",     "EXCLUSIVE",     "COMMIT",        "END",\n"ROLLBACK",      "SAVEPOINT",     "RELEASE",       "TO",\n"TABLE",         "CREATE",        "IF",            "NOT",\n"EXISTS",        "TEMP",          "LP",            "RP",\n"AS",            "COMMA",         "ID",            "INDEXED",\n"ABORT",         "AFTER",         "ANALYZE",       "ASC",\n"ATTACH",        "BEFORE",        "BY",            "CASCADE",\n"CAST",          "COLUMNKW",      "CONFLICT",      "DATABASE",\n"DESC",          "DETACH",        "EACH",          "FAIL",\n"FOR",           "IGNORE",        "INITIALLY",     "INSTEAD",\n"LIKE_KW",       "MATCH",         "KEY",           "OF",\n"OFFSET",        "PRAGMA",        "RAISE",         "REPLACE",\n"RESTRICT",      "ROW",           "TRIGGER",       "VACUUM",\n"VIEW",          "VIRTUAL",       "REINDEX",       "RENAME",\n"CTIME_KW",      "ANY",           "OR",            "AND",\n"IS",            "BETWEEN",       "IN",            "ISNULL",\n"NOTNULL",       "NE",            "EQ",            "GT",\n"LE",            "LT",            "GE",            "ESCAPE",\n"BITAND",        "BITOR",         "LSHIFT",        "RSHIFT",\n"PLUS",          "MINUS",         "STAR",          "SLASH",\n"REM",           "CONCAT",        "COLLATE",       "UMINUS",\n"UPLUS",         "BITNOT",        "STRING",        "JOIN_KW",\n"CONSTRAINT",    "DEFAULT",       "NULL",          "PRIMARY",\n"UNIQUE",        "CHECK",         "REFERENCES",    "AUTOINCR",\n"ON",            "DELETE",        "UPDATE",        "INSERT",\n"SET",           "DEFERRABLE",    "FOREIGN",       "DROP",\n"UNION",         "ALL",           "EXCEPT",        "INTERSECT",\n"SELECT",        "DISTINCT",      "DOT",           "FROM",\n"JOIN",          "USING",         "ORDER",         "GROUP",\n"HAVING",        "LIMIT",         "WHERE",         "INTO",\n"VALUES",        "INTEGER",       "FLOAT",         "BLOB",\n"REGISTER",      "VARIABLE",      "CASE",          "WHEN",\n"THEN",          "ELSE",          "INDEX",         "ALTER",\n"ADD",           "error",         "input",         "cmdlist",\n"ecmd",          "explain",       "cmdx",          "cmd",\n"transtype",     "trans_opt",     "nm",            "savepoint_opt",\n"create_table",  "create_table_args",  "createkw",      "temp",\n"ifnotexists",   "dbnm",          "columnlist",    "conslist_opt",\n"select",        "column",        "columnid",      "type",\n"carglist",      "id",            "ids",           "typetoken",\n"typename",      "signed",        "plus_num",      "minus_num",\n"carg",          "ccons",         "term",          "expr",\n"onconf",        "sortorder",     "autoinc",       "idxlist_opt",\n"refargs",       "defer_subclause",  "refarg",        "refact",\n"init_deferred_pred_opt",  "conslist",      "tcons",         "idxlist",\n"defer_subclause_opt",  "orconf",        "resolvetype",   "raisetype",\n"ifexists",      "fullname",      "oneselect",     "multiselect_op",\n"distinct",      "selcollist",    "from",          "where_opt",\n"groupby_opt",   "having_opt",    "orderby_opt",   "limit_opt",\n"sclp",          "as",            "seltablist",    "stl_prefix",\n"joinop",        "indexed_opt",   "on_opt",        "using_opt",\n"joinop2",       "inscollist",    "sortlist",      "sortitem",\n"nexprlist",     "setlist",       "insert_cmd",    "inscollist_opt",\n"itemlist",      "exprlist",      "likeop",        "escape",\n"between_op",    "in_op",         "case_operand",  "case_exprlist",\n"case_else",     "uniqueflag",    "collate",       "nmnum",\n"plus_opt",      "number",        "trigger_decl",  "trigger_cmd_list",\n"trigger_time",  "trigger_event",  "foreach_clause",  "when_clause",\n"trigger_cmd",   "trnm",          "tridxby",       "database_kw_opt",\n"key_opt",       "add_column_fullname",  "kwcolumn_opt",  "create_vtab", \n"vtabarglist",   "vtabarg",       "vtabargtoken",  "lp",          \n"anylist", };\n#endif // * NDEBUG */\n\n#if !NDEBUG\n    /* For tracing reduce actions, the names of all rules are required.\n*/\n    static string[] yyRuleName = {\n/*   0 */ "input ::= cmdlist",\n/*   1 */ "cmdlist ::= cmdlist ecmd",\n/*   2 */ "cmdlist ::= ecmd",\n/*   3 */ "ecmd ::= SEMI",\n/*   4 */ "ecmd ::= explain cmdx SEMI",\n/*   5 */ "explain ::=",\n/*   6 */ "explain ::= EXPLAIN",\n/*   7 */ "explain ::= EXPLAIN QUERY PLAN",\n/*   8 */ "cmdx ::= cmd",\n/*   9 */ "cmd ::= BEGIN transtype trans_opt",\n/*  10 */ "trans_opt ::=",\n/*  11 */ "trans_opt ::= TRANSACTION",\n/*  12 */ "trans_opt ::= TRANSACTION nm",\n/*  13 */ "transtype ::=",\n/*  14 */ "transtype ::= DEFERRED",\n/*  15 */ "transtype ::= IMMEDIATE",\n/*  16 */ "transtype ::= EXCLUSIVE",\n/*  17 */ "cmd ::= COMMIT trans_opt",\n/*  18 */ "cmd ::= END trans_opt",\n/*  19 */ "cmd ::= ROLLBACK trans_opt",\n/*  20 */ "savepoint_opt ::= SAVEPOINT",\n/*  21 */ "savepoint_opt ::=",\n/*  22 */ "cmd ::= SAVEPOINT nm",\n/*  23 */ "cmd ::= RELEASE savepoint_opt nm",\n/*  24 */ "cmd ::= ROLLBACK trans_opt TO savepoint_opt nm",\n/*  25 */ "cmd ::= create_table create_table_args",\n/*  26 */ "create_table ::= createkw temp TABLE ifnotexists nm dbnm",\n/*  27 */ "createkw ::= CREATE",\n/*  28 */ "ifnotexists ::=",\n/*  29 */ "ifnotexists ::= IF NOT EXISTS",\n/*  30 */ "temp ::= TEMP",\n/*  31 */ "temp ::=",\n/*  32 */ "create_table_args ::= LP columnlist conslist_opt RP",\n/*  33 */ "create_table_args ::= AS select",\n/*  34 */ "columnlist ::= columnlist COMMA column",\n/*  35 */ "columnlist ::= column",\n/*  36 */ "column ::= columnid type carglist",\n/*  37 */ "columnid ::= nm",\n/*  38 */ "id ::= ID",\n/*  39 */ "id ::= INDEXED",\n/*  40 */ "ids ::= ID|STRING",\n/*  41 */ "nm ::= id",\n/*  42 */ "nm ::= STRING",\n/*  43 */ "nm ::= JOIN_KW",\n/*  44 */ "type ::=",\n/*  45 */ "type ::= typetoken",\n/*  46 */ "typetoken ::= typename",\n/*  47 */ "typetoken ::= typename LP signed RP",\n/*  48 */ "typetoken ::= typename LP signed COMMA signed RP",\n/*  49 */ "typename ::= ids",\n/*  50 */ "typename ::= typename ids",\n/*  51 */ "signed ::= plus_num",\n/*  52 */ "signed ::= minus_num",\n/*  53 */ "carglist ::= carglist carg",\n/*  54 */ "carglist ::=",\n/*  55 */ "carg ::= CONSTRAINT nm ccons",\n/*  56 */ "carg ::= ccons",\n/*  57 */ "ccons ::= DEFAULT term",\n/*  58 */ "ccons ::= DEFAULT LP expr RP",\n/*  59 */ "ccons ::= DEFAULT PLUS term",\n/*  60 */ "ccons ::= DEFAULT MINUS term",\n/*  61 */ "ccons ::= DEFAULT id",\n/*  62 */ "ccons ::= NULL onconf",\n/*  63 */ "ccons ::= NOT NULL onconf",\n/*  64 */ "ccons ::= PRIMARY KEY sortorder onconf autoinc",\n/*  65 */ "ccons ::= UNIQUE onconf",\n/*  66 */ "ccons ::= CHECK LP expr RP",\n/*  67 */ "ccons ::= REFERENCES nm idxlist_opt refargs",\n/*  68 */ "ccons ::= defer_subclause",\n/*  69 */ "ccons ::= COLLATE ids",\n/*  70 */ "autoinc ::=",\n/*  71 */ "autoinc ::= AUTOINCR",\n/*  72 */ "refargs ::=",\n/*  73 */ "refargs ::= refargs refarg",\n/*  74 */ "refarg ::= MATCH nm",\n/*  75 */ "refarg ::= ON DELETE refact",\n/*  76 */ "refarg ::= ON UPDATE refact",\n/*  77 */ "refarg ::= ON INSERT refact",\n/*  78 */ "refact ::= SET NULL",\n/*  79 */ "refact ::= SET DEFAULT",\n/*  80 */ "refact ::= CASCADE",\n/*  81 */ "refact ::= RESTRICT",\n/*  82 */ "defer_subclause ::= NOT DEFERRABLE init_deferred_pred_opt",\n/*  83 */ "defer_subclause ::= DEFERRABLE init_deferred_pred_opt",\n/*  84 */ "init_deferred_pred_opt ::=",\n/*  85 */ "init_deferred_pred_opt ::= INITIALLY DEFERRED",\n/*  86 */ "init_deferred_pred_opt ::= INITIALLY IMMEDIATE",\n/*  87 */ "conslist_opt ::=",\n/*  88 */ "conslist_opt ::= COMMA conslist",\n/*  89 */ "conslist ::= conslist COMMA tcons",\n/*  90 */ "conslist ::= conslist tcons",\n/*  91 */ "conslist ::= tcons",\n/*  92 */ "tcons ::= CONSTRAINT nm",\n/*  93 */ "tcons ::= PRIMARY KEY LP idxlist autoinc RP onconf",\n/*  94 */ "tcons ::= UNIQUE LP idxlist RP onconf",\n/*  95 */ "tcons ::= CHECK LP expr RP onconf",\n/*  96 */ "tcons ::= FOREIGN KEY LP idxlist RP REFERENCES nm idxlist_opt refargs defer_subclause_opt",\n/*  97 */ "defer_subclause_opt ::=",\n/*  98 */ "defer_subclause_opt ::= defer_subclause",\n/*  99 */ "onconf ::=",\n/* 100 */ "onconf ::= ON CONFLICT resolvetype",\n/* 101 */ "orconf ::=",\n/* 102 */ "orconf ::= OR resolvetype",\n/* 103 */ "resolvetype ::= raisetype",\n/* 104 */ "resolvetype ::= IGNORE",\n/* 105 */ "resolvetype ::= REPLACE",\n/* 106 */ "cmd ::= DROP TABLE ifexists fullname",\n/* 107 */ "ifexists ::= IF EXISTS",\n/* 108 */ "ifexists ::=",\n/* 109 */ "cmd ::= createkw temp VIEW ifnotexists nm dbnm AS select",\n/* 110 */ "cmd ::= DROP VIEW ifexists fullname",\n/* 111 */ "cmd ::= select",\n/* 112 */ "select ::= oneselect",\n/* 113 */ "select ::= select multiselect_op oneselect",\n/* 114 */ "multiselect_op ::= UNION",\n/* 115 */ "multiselect_op ::= UNION ALL",\n/* 116 */ "multiselect_op ::= EXCEPT|INTERSECT",\n/* 117 */ "oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt",\n/* 118 */ "distinct ::= DISTINCT",\n/* 119 */ "distinct ::= ALL",\n/* 120 */ "distinct ::=",\n/* 121 */ "sclp ::= selcollist COMMA",\n/* 122 */ "sclp ::=",\n/* 123 */ "selcollist ::= sclp expr as",\n/* 124 */ "selcollist ::= sclp STAR",\n/* 125 */ "selcollist ::= sclp nm DOT STAR",\n/* 126 */ "as ::= AS nm",\n/* 127 */ "as ::= ids",\n/* 128 */ "as ::=",\n/* 129 */ "from ::=",\n/* 130 */ "from ::= FROM seltablist",\n/* 131 */ "stl_prefix ::= seltablist joinop",\n/* 132 */ "stl_prefix ::=",\n/* 133 */ "seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt",\n/* 134 */ "seltablist ::= stl_prefix LP select RP as on_opt using_opt",\n/* 135 */ "seltablist ::= stl_prefix LP seltablist RP as on_opt using_opt",\n/* 136 */ "dbnm ::=",\n/* 137 */ "dbnm ::= DOT nm",\n/* 138 */ "fullname ::= nm dbnm",\n/* 139 */ "joinop ::= COMMA|JOIN",\n/* 140 */ "joinop ::= JOIN_KW JOIN",\n/* 141 */ "joinop ::= JOIN_KW nm JOIN",\n/* 142 */ "joinop ::= JOIN_KW nm nm JOIN",\n/* 143 */ "on_opt ::= ON expr",\n/* 144 */ "on_opt ::=",\n/* 145 */ "indexed_opt ::=",\n/* 146 */ "indexed_opt ::= INDEXED BY nm",\n/* 147 */ "indexed_opt ::= NOT INDEXED",\n/* 148 */ "using_opt ::= USING LP inscollist RP",\n/* 149 */ "using_opt ::=",\n/* 150 */ "orderby_opt ::=",\n/* 151 */ "orderby_opt ::= ORDER BY sortlist",\n/* 152 */ "sortlist ::= sortlist COMMA sortitem sortorder",\n/* 153 */ "sortlist ::= sortitem sortorder",\n/* 154 */ "sortitem ::= expr",\n/* 155 */ "sortorder ::= ASC",\n/* 156 */ "sortorder ::= DESC",\n/* 157 */ "sortorder ::=",\n/* 158 */ "groupby_opt ::=",\n/* 159 */ "groupby_opt ::= GROUP BY nexprlist",\n/* 160 */ "having_opt ::=",\n/* 161 */ "having_opt ::= HAVING expr",\n/* 162 */ "limit_opt ::=",\n/* 163 */ "limit_opt ::= LIMIT expr",\n/* 164 */ "limit_opt ::= LIMIT expr OFFSET expr",\n/* 165 */ "limit_opt ::= LIMIT expr COMMA expr",\n/* 166 */ "cmd ::= DELETE FROM fullname indexed_opt where_opt",\n/* 167 */ "where_opt ::=",\n/* 168 */ "where_opt ::= WHERE expr",\n/* 169 */ "cmd ::= UPDATE orconf fullname indexed_opt SET setlist where_opt",\n/* 170 */ "setlist ::= setlist COMMA nm EQ expr",\n/* 171 */ "setlist ::= nm EQ expr",\n/* 172 */ "cmd ::= insert_cmd INTO fullname inscollist_opt VALUES LP itemlist RP",\n/* 173 */ "cmd ::= insert_cmd INTO fullname inscollist_opt select",\n/* 174 */ "cmd ::= insert_cmd INTO fullname inscollist_opt DEFAULT VALUES",\n/* 175 */ "insert_cmd ::= INSERT orconf",\n/* 176 */ "insert_cmd ::= REPLACE",\n/* 177 */ "itemlist ::= itemlist COMMA expr",\n/* 178 */ "itemlist ::= expr",\n/* 179 */ "inscollist_opt ::=",\n/* 180 */ "inscollist_opt ::= LP inscollist RP",\n/* 181 */ "inscollist ::= inscollist COMMA nm",\n/* 182 */ "inscollist ::= nm",\n/* 183 */ "expr ::= term",\n/* 184 */ "expr ::= LP expr RP",\n/* 185 */ "term ::= NULL",\n/* 186 */ "expr ::= id",\n/* 187 */ "expr ::= JOIN_KW",\n/* 188 */ "expr ::= nm DOT nm",\n/* 189 */ "expr ::= nm DOT nm DOT nm",\n/* 190 */ "term ::= INTEGER|FLOAT|BLOB",\n/* 191 */ "term ::= STRING",\n/* 192 */ "expr ::= REGISTER",\n/* 193 */ "expr ::= VARIABLE",\n/* 194 */ "expr ::= expr COLLATE ids",\n/* 195 */ "expr ::= CAST LP expr AS typetoken RP",\n/* 196 */ "expr ::= ID LP distinct exprlist RP",\n/* 197 */ "expr ::= ID LP STAR RP",\n/* 198 */ "term ::= CTIME_KW",\n/* 199 */ "expr ::= expr AND expr",\n/* 200 */ "expr ::= expr OR expr",\n/* 201 */ "expr ::= expr LT|GT|GE|LE expr",\n/* 202 */ "expr ::= expr EQ|NE expr",\n/* 203 */ "expr ::= expr BITAND|BITOR|LSHIFT|RSHIFT expr",\n/* 204 */ "expr ::= expr PLUS|MINUS expr",\n/* 205 */ "expr ::= expr STAR|SLASH|REM expr",\n/* 206 */ "expr ::= expr CONCAT expr",\n/* 207 */ "likeop ::= LIKE_KW",\n/* 208 */ "likeop ::= NOT LIKE_KW",\n/* 209 */ "likeop ::= MATCH",\n/* 210 */ "likeop ::= NOT MATCH",\n/* 211 */ "escape ::= ESCAPE expr",\n/* 212 */ "escape ::=",\n/* 213 */ "expr ::= expr likeop expr escape",\n/* 214 */ "expr ::= expr ISNULL|NOTNULL",\n/* 215 */ "expr ::= expr IS NULL",\n/* 216 */ "expr ::= expr NOT NULL",\n/* 217 */ "expr ::= expr IS NOT NULL",\n/* 218 */ "expr ::= NOT expr",\n/* 219 */ "expr ::= BITNOT expr",\n/* 220 */ "expr ::= MINUS expr",\n/* 221 */ "expr ::= PLUS expr",\n/* 222 */ "between_op ::= BETWEEN",\n/* 223 */ "between_op ::= NOT BETWEEN",\n/* 224 */ "expr ::= expr between_op expr AND expr",\n/* 225 */ "in_op ::= IN",\n/* 226 */ "in_op ::= NOT IN",\n/* 227 */ "expr ::= expr in_op LP exprlist RP",\n/* 228 */ "expr ::= LP select RP",\n/* 229 */ "expr ::= expr in_op LP select RP",\n/* 230 */ "expr ::= expr in_op nm dbnm",\n/* 231 */ "expr ::= EXISTS LP select RP",\n/* 232 */ "expr ::= CASE case_operand case_exprlist case_else END",\n/* 233 */ "case_exprlist ::= case_exprlist WHEN expr THEN expr",\n/* 234 */ "case_exprlist ::= WHEN expr THEN expr",\n/* 235 */ "case_else ::= ELSE expr",\n/* 236 */ "case_else ::=",\n/* 237 */ "case_operand ::= expr",\n/* 238 */ "case_operand ::=",\n/* 239 */ "exprlist ::= nexprlist",\n/* 240 */ "exprlist ::=",\n/* 241 */ "nexprlist ::= nexprlist COMMA expr",\n/* 242 */ "nexprlist ::= expr",\n/* 243 */ "cmd ::= createkw uniqueflag INDEX ifnotexists nm dbnm ON nm LP idxlist RP",\n/* 244 */ "uniqueflag ::= UNIQUE",\n/* 245 */ "uniqueflag ::=",\n/* 246 */ "idxlist_opt ::=",\n/* 247 */ "idxlist_opt ::= LP idxlist RP",\n/* 248 */ "idxlist ::= idxlist COMMA nm collate sortorder",\n/* 249 */ "idxlist ::= nm collate sortorder",\n/* 250 */ "collate ::=",\n/* 251 */ "collate ::= COLLATE ids",\n/* 252 */ "cmd ::= DROP INDEX ifexists fullname",\n/* 253 */ "cmd ::= VACUUM",\n/* 254 */ "cmd ::= VACUUM nm",\n/* 255 */ "cmd ::= PRAGMA nm dbnm",\n/* 256 */ "cmd ::= PRAGMA nm dbnm EQ nmnum",\n/* 257 */ "cmd ::= PRAGMA nm dbnm LP nmnum RP",\n/* 258 */ "cmd ::= PRAGMA nm dbnm EQ minus_num",\n/* 259 */ "cmd ::= PRAGMA nm dbnm LP minus_num RP",\n/* 260 */ "nmnum ::= plus_num",\n/* 261 */ "nmnum ::= nm",\n/* 262 */ "nmnum ::= ON",\n/* 263 */ "nmnum ::= DELETE",\n/* 264 */ "nmnum ::= DEFAULT",\n/* 265 */ "plus_num ::= plus_opt number",\n/* 266 */ "minus_num ::= MINUS number",\n/* 267 */ "number ::= INTEGER|FLOAT",\n/* 268 */ "plus_opt ::= PLUS",\n/* 269 */ "plus_opt ::=",\n/* 270 */ "cmd ::= createkw trigger_decl BEGIN trigger_cmd_list END",\n/* 271 */ "trigger_decl ::= temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON fullname foreach_clause when_clause",\n/* 272 */ "trigger_time ::= BEFORE",\n/* 273 */ "trigger_time ::= AFTER",\n/* 274 */ "trigger_time ::= INSTEAD OF",\n/* 275 */ "trigger_time ::=",\n/* 276 */ "trigger_event ::= DELETE|INSERT",\n/* 277 */ "trigger_event ::= UPDATE",\n/* 278 */ "trigger_event ::= UPDATE OF inscollist",\n/* 279 */ "foreach_clause ::=",\n/* 280 */ "foreach_clause ::= FOR EACH ROW",\n/* 281 */ "when_clause ::=",\n/* 282 */ "when_clause ::= WHEN expr",\n/* 283 */ "trigger_cmd_list ::= trigger_cmd_list trigger_cmd SEMI",\n/* 284 */ "trigger_cmd_list ::= trigger_cmd SEMI",\n/* 285 */ "trnm ::= nm",\n/* 286 */ "trnm ::= nm DOT nm",\n/* 287 */ "tridxby ::=",\n/* 288 */ "tridxby ::= INDEXED BY nm",\n/* 289 */ "tridxby ::= NOT INDEXED",\n/* 290 */ "trigger_cmd ::= UPDATE orconf trnm tridxby SET setlist where_opt",\n/* 291 */ "trigger_cmd ::= insert_cmd INTO trnm inscollist_opt VALUES LP itemlist RP",\n/* 292 */ "trigger_cmd ::= insert_cmd INTO trnm inscollist_opt select",\n/* 293 */ "trigger_cmd ::= DELETE FROM trnm tridxby where_opt",\n/* 294 */ "trigger_cmd ::= select",\n/* 295 */ "expr ::= RAISE LP IGNORE RP",\n/* 296 */ "expr ::= RAISE LP raisetype COMMA nm RP",\n/* 297 */ "raisetype ::= ROLLBACK",\n/* 298 */ "raisetype ::= ABORT",\n/* 299 */ "raisetype ::= FAIL",\n/* 300 */ "cmd ::= DROP TRIGGER ifexists fullname",\n/* 301 */ "cmd ::= ATTACH database_kw_opt expr AS expr key_opt",\n/* 302 */ "cmd ::= DETACH database_kw_opt expr",\n/* 303 */ "key_opt ::=",\n/* 304 */ "key_opt ::= KEY expr",\n/* 305 */ "database_kw_opt ::= DATABASE",\n/* 306 */ "database_kw_opt ::=",\n/* 307 */ "cmd ::= REINDEX",\n/* 308 */ "cmd ::= REINDEX nm dbnm",\n/* 309 */ "cmd ::= ANALYZE",\n/* 310 */ "cmd ::= ANALYZE nm dbnm",\n/* 311 */ "cmd ::= ALTER TABLE fullname RENAME TO nm",\n/* 312 */ "cmd ::= ALTER TABLE add_column_fullname ADD kwcolumn_opt column",\n/* 313 */ "add_column_fullname ::= fullname",\n/* 314 */ "kwcolumn_opt ::=",\n/* 315 */ "kwcolumn_opt ::= COLUMNKW",\n/* 316 */ "cmd ::= create_vtab",\n/* 317 */ "cmd ::= create_vtab LP vtabarglist RP",\n/* 318 */ "create_vtab ::= createkw VIRTUAL TABLE nm dbnm USING nm",\n/* 319 */ "vtabarglist ::= vtabarg",\n/* 320 */ "vtabarglist ::= vtabarglist COMMA vtabarg",\n/* 321 */ "vtabarg ::=",\n/* 322 */ "vtabarg ::= vtabarg vtabargtoken",\n/* 323 */ "vtabargtoken ::= ANY",\n/* 324 */ "vtabargtoken ::= lp anylist RP",\n/* 325 */ "lp ::= LP",\n/* 326 */ "anylist ::=",\n/* 327 */ "anylist ::= anylist LP anylist RP",\n/* 328 */ "anylist ::= anylist ANY",\n};\n#endif // * NDEBUG */\n\n\n#if YYSTACKDEPTH//<=0\n/*\n** Try to increase the size of the parser stack.\n*/\nstatic void yyGrowStack(yyParser p){\nint newSize;\n//yyStackEntry pNew;\n\nnewSize = p.yystksz*2 + 100;\n//pNew = realloc(p.yystack, newSize*sizeof(pNew[0]));\n//if( pNew !=null){\np.yystack = Array.Resize(p.yystack,newSize); //pNew;\np.yystksz = newSize;\n#if !NDEBUG\nif( yyTraceFILE ){\nfprintf(yyTraceFILE,"%sStack grows to %d entries!\\n",\nyyTracePrompt, p.yystksz);\n}\n#endif\n//}\n}\n#endif\n\n    /*\n** This function allocates a new parser.\n** The only argument is a pointer to a function which works like\n** malloc.\n**\n** Inputs:\n** A pointer to the function used to allocate memory.\n**\n** Outputs:\n** A pointer to a parser.  This pointer is used in subsequent calls\n** to sqlite3Parser and sqlite3ParserFree.\n*/\n    static yyParser sqlite3ParserAlloc()\n    {//void *(*mallocProc)(size_t)){\n      yyParser pParser = new yyParser();\n      //pParser = (yyParser*)(*mallocProc)( (size_t)yyParser.Length );\n      if (pParser != null)\n      {\n        pParser.yyidx = -1;\n#if YYTRACKMAXSTACKDEPTH\npParser.yyidxMax=0;\n#endif\n\n#if YYSTACKDEPTH//<=0\npParser.yystack = NULL;\npParser.yystksz = 0;\nyyGrowStack(pParser);\n#endif\n      }\n      return pParser;\n    }\n\n    /* The following function deletes the value associated with a\n    ** symbol.  The symbol can be either a terminal or nonterminal.\n    ** "yymajor" is the symbol code, and "yypminor" is a pointer to\n    ** the value.\n    */\n    static void yy_destructor(\n    yyParser yypParser,    /* The parser */\n    YYCODETYPE yymajor,    /* Type code for object to destroy */\n    YYMINORTYPE yypminor   /* The object to be destroyed */\n    )\n    {\n      Parse pParse = yypParser.pParse; // sqlite3ParserARG_FETCH;\n      switch (yymajor)\n      {\n        /* Here is inserted the actions which take place when a\n        ** terminal or non-terminal is destroyed.  This can happen\n        ** when the symbol is popped from the stack during a\n        ** reduce or during error processing or when a parser is\n        ** being destroyed before it is finished parsing.\n        **\n        ** Note: during a reduce, the only symbols destroyed are those\n        ** which appear on the RHS of the rule, but which are not used\n        ** inside the C code.\n        */\n        case 160: /* select */\n        case 194: /* oneselect */\n          {\n            //#line 404 "parse.y"\n            sqlite3SelectDelete(pParse.db, ref (yypminor.yy3));\n            //#line 1373 "parse.c"\n          }\n          break;\n        case 174: /* term */\n        case 175: /* expr */\n        case 223: /* escape */\n          {\n            //#line 721 "parse.y"\n            sqlite3ExprDelete(pParse.db, ref (yypminor.yy346).pExpr);\n            //#line 1382 "parse.c"\n          }\n          break;\n        case 179: /* idxlist_opt */\n        case 187: /* idxlist */\n        case 197: /* selcollist */\n        case 200: /* groupby_opt */\n        case 202: /* orderby_opt */\n        case 204: /* sclp */\n        case 214: /* sortlist */\n        case 216: /* nexprlist */\n        case 217: /* setlist */\n        case 220: /* itemlist */\n        case 221: /* exprlist */\n        case 227: /* case_exprlist */\n          {\n            //#line 1062 "parse.y"\n            sqlite3ExprListDelete(pParse.db, ref  (yypminor.yy14));\n            //#line 1400 "parse.c"\n          }\n          break;\n        case 193: /* fullname */\n        case 198: /* from */\n        case 206: /* seltablist */\n        case 207: /* stl_prefix */\n          {\n            //#line 535 "parse.y"\n            sqlite3SrcListDelete(pParse.db, ref  (yypminor.yy65));\n            //#line 1410 "parse.c"\n          }\n          break;\n        case 199: /* where_opt */\n        case 201: /* having_opt */\n        case 210: /* on_opt */\n        case 215: /* sortitem */\n        case 226: /* case_operand */\n        case 228: /* case_else */\n        case 239: /* when_clause */\n        case 242: /* key_opt */\n          {\n            //#line 645 "parse.y"\n            sqlite3ExprDelete(pParse.db, ref (yypminor.yy132));\n            //#line 1424 "parse.c"\n          }\n          break;\n        case 211: /* using_opt */\n        case 213: /* inscollist */\n        case 219: /* inscollist_opt */\n          {\n            //#line 567 "parse.y"\n            sqlite3IdListDelete(pParse.db, ref (yypminor.yy408));\n            //#line 1433 "parse.c"\n          }\n          break;\n        case 235: /* trigger_cmd_list */\n        case 240: /* trigger_cmd */\n          {\n            //#line 1169 "parse.y"\n            sqlite3DeleteTriggerStep(pParse.db, ref (yypminor.yy473));\n            //#line 1441 "parse.c"\n          }\n          break;\n        case 237: /* trigger_event */\n          {\n            //#line 1155 "parse.y"\n            sqlite3IdListDelete(pParse.db, ref (yypminor.yy378).b);\n            //#line 1448 "parse.c"\n          }\n          break;\n        default: break;   /* If no destructor action specified: do nothing */\n      }\n    }\n\n    /*\n    ** Pop the parser\'s stack once.\n    **\n    ** If there is a destructor routine associated with the token which\n    ** is popped from the stack, then call it.\n    **\n    ** Return the major token number for the symbol popped.\n    */\n    static int yy_pop_parser_stack(yyParser pParser)\n    {\n      YYCODETYPE yymajor;\n      yyStackEntry yytos = pParser.yystack[pParser.yyidx];\n\n      /* There is no mechanism by which the parser stack can be popped below\n      ** empty in SQLite.  */\n      if (NEVER(pParser.yyidx < 0)) return 0;\n#if !NDEBUG\n      if (yyTraceFILE != null && pParser.yyidx >= 0)\n      {\n        fprintf(yyTraceFILE, "%sPopping %s\\n",\n        yyTracePrompt,\n        yyTokenName[yytos.major]);\n      }\n#endif\n      yymajor = yytos.major;\n      yy_destructor(pParser, yymajor, yytos.minor);\n      pParser.yyidx--;\n      return yymajor;\n    }\n\n    /*\n    ** Deallocate and destroy a parser.  Destructors are all called for\n    ** all stack elements before shutting the parser down.\n    **\n    ** Inputs:\n    ** <ul>\n    ** <li>  A pointer to the parser.  This should be a pointer\n    **       obtained from sqlite3ParserAlloc.\n    ** <li>  A pointer to a function used to reclaim memory obtained\n    **       from malloc.\n    ** </ul>\n    */\n    static void sqlite3ParserFree(\n    yyParser p,                    /* The parser to be deleted */\n    dxDel freeProc//)(void*)     /* Function used to reclaim memory */\n    )\n    {\n      yyParser pParser = p;\n      /* In SQLite, we never try to destroy a parser that was not successfully\n      ** created in the first place. */\n      if (NEVER(pParser == null)) return;\n      while (pParser.yyidx >= 0) yy_pop_parser_stack(pParser);\n#if YYSTACKDEPTH//<=0\npParser.yystack = null;//free(pParser.yystack);\n#endif\n      pParser = null;// freeProc(ref pParser);\n    }\n\n    /*\n    ** Return the peak depth of the stack for a parser.\n    */\n#if YYTRACKMAXSTACKDEPTH\nint sqlite3ParserStackPeak(void p){\nyyParser pParser = (yyParser*)p;\nreturn pParser.yyidxMax;\n}\n#endif\n\n    /*\n** Find the appropriate action for a parser given the terminal\n** look-ahead token iLookAhead.\n**\n** If the look-ahead token is YYNOCODE, then check to see if the action is\n** independent of the look-ahead.  If it is, return the action, otherwise\n** return YY_NO_ACTION.\n*/\n    static int yy_find_shift_action(\n    yyParser pParser,         /* The parser */\n    YYCODETYPE iLookAhead     /* The look-ahead token */\n    )\n    {\n      int i;\n      int stateno = pParser.yystack[pParser.yyidx].stateno;\n\n      if (stateno > YY_SHIFT_MAX || (i = yy_shift_ofst[stateno]) == YY_SHIFT_USE_DFLT)\n      {\n        return yy_default[stateno];\n      }\n      Debug.Assert(iLookAhead != YYNOCODE);\n      i += iLookAhead;\n      if (i < 0 || i >= YY_SZ_ACTTAB || yy_lookahead[i] != iLookAhead)\n      {\n        /* The user of ";" instead of "\\000" as a statement terminator in SQLite\n        ** means that we always have a look-ahead token. */\n        if (iLookAhead > 0)\n        {\n#if YYFALLBACK\n          YYCODETYPE iFallback;            /* Fallback token */\n          if (iLookAhead < yyFallback.Length //yyFallback.Length/sizeof(yyFallback[0])\n          && (iFallback = yyFallback[iLookAhead]) != 0)\n          {\n#if !NDEBUG\n            if (yyTraceFILE != null)\n            {\n              fprintf(yyTraceFILE, "%sFALLBACK %s => %s\\n",\n              yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);\n            }\n#endif\n            return yy_find_shift_action(pParser, iFallback);\n          }\n#endif\n#if YYWILDCARD\n          {\n            int j = i - iLookAhead + YYWILDCARD;\n            if (j >= 0 && j < YY_SZ_ACTTAB && yy_lookahead[j] == YYWILDCARD)\n            {\n#if !NDEBUG\n              if (yyTraceFILE != null)\n              {\n                Debugger.Break(); // TODO --\n                //fprintf(yyTraceFILE, "%sWILDCARD %s => %s\\n",\n                //   yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);\n              }\n#endif // * NDEBUG */\n              return yy_action[j];\n            }\n          }\n#endif // * YYWILDCARD */\n        }\n        return yy_default[stateno];\n      }\n      else\n      {\n        return yy_action[i];\n      }\n    }\n\n    /*\n    ** Find the appropriate action for a parser given the non-terminal\n    ** look-ahead token iLookAhead.\n    **\n    ** If the look-ahead token is YYNOCODE, then check to see if the action is\n    ** independent of the look-ahead.  If it is, return the action, otherwise\n    ** return YY_NO_ACTION.\n    */\n    static int yy_find_reduce_action(\n    int stateno,              /* Current state number */\n    YYCODETYPE iLookAhead     /* The look-ahead token */\n    )\n    {\n      int i;\n#if YYERRORSYMBOL\nif( stateno>YY_REDUCE_MAX ){\nreturn yy_default[stateno];\n}\n#else\n      Debug.Assert(stateno <= YY_REDUCE_MAX);\n#endif\n      i = yy_reduce_ofst[stateno];\n      Debug.Assert(i != YY_REDUCE_USE_DFLT);\n      Debug.Assert(iLookAhead != YYNOCODE);\n      i += iLookAhead;\n#if YYERRORSYMBOL\nif( i<0 || i>=YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){\nreturn yy_default[stateno];\n}\n#else\n      Debug.Assert(i >= 0 && i < YY_SZ_ACTTAB);\n      Debug.Assert(yy_lookahead[i] == iLookAhead);\n#endif\n      return yy_action[i];\n    }\n\n    /*\n    ** The following routine is called if the stack overflows.\n    */\n    static void yyStackOverflow(yyParser yypParser, YYMINORTYPE yypMinor)\n    {\n      Parse pParse = yypParser.pParse; // sqlite3ParserARG_FETCH;\n      yypParser.yyidx--;\n#if !NDEBUG\n      if (yyTraceFILE != null)\n      {\n        Debugger.Break(); // TODO --\n        //fprintf(yyTraceFILE, "%sStack Overflow!\\n", yyTracePrompt);\n      }\n#endif\n      while (yypParser.yyidx >= 0) yy_pop_parser_stack(yypParser);\n      /* Here code is inserted which will execute if the parser\n      ** stack every overflows */\n      //#line 40 "parse.y"\n\n      UNUSED_PARAMETER(yypMinor); /* Silence some compiler warnings */\n      sqlite3ErrorMsg(pParse, "parser stack overflow");\n      pParse.parseError = 1;\n      //#line 1632  "parse.c"\n      yypParser.pParse = pParse;//      sqlite3ParserARG_STORE; /* Suppress warning about unused %extra_argument var */\n    }\n\n    /*\n    ** Perform a shift action.\n    */\n    static void yy_shift(\n    yyParser yypParser,          /* The parser to be shifted */\n    int yyNewState,               /* The new state to shift in */\n    int yyMajor,                  /* The major token to shift in */\n    YYMINORTYPE yypMinor         /* Pointer to the minor token to shift in */\n    )\n    {\n      yyStackEntry yytos = new yyStackEntry();\n      yypParser.yyidx++;\n#if YYTRACKMAXSTACKDEPTH\nif( yypParser.yyidx>yypParser.yyidxMax ){\nyypParser.yyidxMax = yypParser.yyidx;\n}\n#endif\n#if !YYSTACKDEPTH//was YYSTACKDEPTH>0\n      if (yypParser.yyidx >= YYSTACKDEPTH)\n      {\n        yyStackOverflow(yypParser, yypMinor);\n        return;\n      }\n#else\nif( yypParser.yyidx>=yypParser.yystksz ){\nyyGrowStack(yypParser);\nif( yypParser.yyidx>=yypParser.yystksz ){\nyyStackOverflow(yypParser, yypMinor);\nreturn;\n}\n}\n#endif\n      yypParser.yystack[yypParser.yyidx] = yytos;//yytos = yypParser.yystack[yypParser.yyidx];\n      yytos.stateno = (YYACTIONTYPE)yyNewState;\n      yytos.major = (YYCODETYPE)yyMajor;\n      yytos.minor = yypMinor;\n#if !NDEBUG\n      if (yyTraceFILE != null && yypParser.yyidx > 0)\n      {\n        int i;\n        fprintf(yyTraceFILE, "%sShift %d\\n", yyTracePrompt, yyNewState);\n        fprintf(yyTraceFILE, "%sStack:", yyTracePrompt);\n        for (i = 1; i <= yypParser.yyidx; i++)\n          fprintf(yyTraceFILE, " %s", yyTokenName[yypParser.yystack[i].major]);\n        fprintf(yyTraceFILE, "\\n");\n      }\n#endif\n    }\n    /* The following table contains information about every rule that\n    ** is used during the reduce.\n    */\n    public struct _yyRuleInfo\n    {\n      public YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */\n      public byte nrhs;     /* Number of right-hand side symbols in the rule */\n      public _yyRuleInfo(YYCODETYPE lhs, byte nrhs)\n      {\n        this.lhs = lhs;\n        this.nrhs = nrhs;\n      }\n\n    }\n    static _yyRuleInfo[] yyRuleInfo = new _yyRuleInfo[]{\nnew _yyRuleInfo( 142, 1 ),\nnew _yyRuleInfo( 143, 2 ),\nnew _yyRuleInfo( 143, 1 ),\nnew _yyRuleInfo( 144, 1 ),\nnew _yyRuleInfo( 144, 3 ),\nnew _yyRuleInfo( 145, 0 ),\nnew _yyRuleInfo( 145, 1 ),\nnew _yyRuleInfo( 145, 3 ),\nnew _yyRuleInfo( 146, 1 ),\nnew _yyRuleInfo( 147, 3 ),\nnew _yyRuleInfo( 149, 0 ),\nnew _yyRuleInfo( 149, 1 ),\nnew _yyRuleInfo( 149, 2 ),\nnew _yyRuleInfo( 148, 0 ),\nnew _yyRuleInfo( 148, 1 ),\nnew _yyRuleInfo( 148, 1 ),\nnew _yyRuleInfo( 148, 1 ),\nnew _yyRuleInfo( 147, 2 ),\nnew _yyRuleInfo( 147, 2 ),\nnew _yyRuleInfo( 147, 2 ),\nnew _yyRuleInfo( 151, 1 ),\nnew _yyRuleInfo( 151, 0 ),\nnew _yyRuleInfo( 147, 2 ),\nnew _yyRuleInfo( 147, 3 ),\nnew _yyRuleInfo( 147, 5 ),\nnew _yyRuleInfo( 147, 2 ),\nnew _yyRuleInfo( 152, 6 ),\nnew _yyRuleInfo( 154, 1 ),\nnew _yyRuleInfo( 156, 0 ),\nnew _yyRuleInfo( 156, 3 ),\nnew _yyRuleInfo( 155, 1 ),\nnew _yyRuleInfo( 155, 0 ),\nnew _yyRuleInfo( 153, 4 ),\nnew _yyRuleInfo( 153, 2 ),\nnew _yyRuleInfo( 158, 3 ),\nnew _yyRuleInfo( 158, 1 ),\nnew _yyRuleInfo( 161, 3 ),\nnew _yyRuleInfo( 162, 1 ),\nnew _yyRuleInfo( 165, 1 ),\nnew _yyRuleInfo( 165, 1 ),\nnew _yyRuleInfo( 166, 1 ),\nnew _yyRuleInfo( 150, 1 ),\nnew _yyRuleInfo( 150, 1 ),\nnew _yyRuleInfo( 150, 1 ),\nnew _yyRuleInfo( 163, 0 ),\nnew _yyRuleInfo( 163, 1 ),\nnew _yyRuleInfo( 167, 1 ),\nnew _yyRuleInfo( 167, 4 ),\nnew _yyRuleInfo( 167, 6 ),\nnew _yyRuleInfo( 168, 1 ),\nnew _yyRuleInfo( 168, 2 ),\nnew _yyRuleInfo( 169, 1 ),\nnew _yyRuleInfo( 169, 1 ),\nnew _yyRuleInfo( 164, 2 ),\nnew _yyRuleInfo( 164, 0 ),\nnew _yyRuleInfo( 172, 3 ),\nnew _yyRuleInfo( 172, 1 ),\nnew _yyRuleInfo( 173, 2 ),\nnew _yyRuleInfo( 173, 4 ),\nnew _yyRuleInfo( 173, 3 ),\nnew _yyRuleInfo( 173, 3 ),\nnew _yyRuleInfo( 173, 2 ),\nnew _yyRuleInfo( 173, 2 ),\nnew _yyRuleInfo( 173, 3 ),\nnew _yyRuleInfo( 173, 5 ),\nnew _yyRuleInfo( 173, 2 ),\nnew _yyRuleInfo( 173, 4 ),\nnew _yyRuleInfo( 173, 4 ),\nnew _yyRuleInfo( 173, 1 ),\nnew _yyRuleInfo( 173, 2 ),\nnew _yyRuleInfo( 178, 0 ),\nnew _yyRuleInfo( 178, 1 ),\nnew _yyRuleInfo( 180, 0 ),\nnew _yyRuleInfo( 180, 2 ),\nnew _yyRuleInfo( 182, 2 ),\nnew _yyRuleInfo( 182, 3 ),\nnew _yyRuleInfo( 182, 3 ),\nnew _yyRuleInfo( 182, 3 ),\nnew _yyRuleInfo( 183, 2 ),\nnew _yyRuleInfo( 183, 2 ),\nnew _yyRuleInfo( 183, 1 ),\nnew _yyRuleInfo( 183, 1 ),\nnew _yyRuleInfo( 181, 3 ),\nnew _yyRuleInfo( 181, 2 ),\nnew _yyRuleInfo( 184, 0 ),\nnew _yyRuleInfo( 184, 2 ),\nnew _yyRuleInfo( 184, 2 ),\nnew _yyRuleInfo( 159, 0 ),\nnew _yyRuleInfo( 159, 2 ),\nnew _yyRuleInfo( 185, 3 ),\nnew _yyRuleInfo( 185, 2 ),\nnew _yyRuleInfo( 185, 1 ),\nnew _yyRuleInfo( 186, 2 ),\nnew _yyRuleInfo( 186, 7 ),\nnew _yyRuleInfo( 186, 5 ),\nnew _yyRuleInfo( 186, 5 ),\nnew _yyRuleInfo( 186, 10 ),\nnew _yyRuleInfo( 188, 0 ),\nnew _yyRuleInfo( 188, 1 ),\nnew _yyRuleInfo( 176, 0 ),\nnew _yyRuleInfo( 176, 3 ),\nnew _yyRuleInfo( 189, 0 ),\nnew _yyRuleInfo( 189, 2 ),\nnew _yyRuleInfo( 190, 1 ),\nnew _yyRuleInfo( 190, 1 ),\nnew _yyRuleInfo( 190, 1 ),\nnew _yyRuleInfo( 147, 4 ),\nnew _yyRuleInfo( 192, 2 ),\nnew _yyRuleInfo( 192, 0 ),\nnew _yyRuleInfo( 147, 8 ),\nnew _yyRuleInfo( 147, 4 ),\nnew _yyRuleInfo( 147, 1 ),\nnew _yyRuleInfo( 160, 1 ),\nnew _yyRuleInfo( 160, 3 ),\nnew _yyRuleInfo( 195, 1 ),\nnew _yyRuleInfo( 195, 2 ),\nnew _yyRuleInfo( 195, 1 ),\nnew _yyRuleInfo( 194, 9 ),\nnew _yyRuleInfo( 196, 1 ),\nnew _yyRuleInfo( 196, 1 ),\nnew _yyRuleInfo( 196, 0 ),\nnew _yyRuleInfo( 204, 2 ),\nnew _yyRuleInfo( 204, 0 ),\nnew _yyRuleInfo( 197, 3 ),\nnew _yyRuleInfo( 197, 2 ),\nnew _yyRuleInfo( 197, 4 ),\nnew _yyRuleInfo( 205, 2 ),\nnew _yyRuleInfo( 205, 1 ),\nnew _yyRuleInfo( 205, 0 ),\nnew _yyRuleInfo( 198, 0 ),\nnew _yyRuleInfo( 198, 2 ),\nnew _yyRuleInfo( 207, 2 ),\nnew _yyRuleInfo( 207, 0 ),\nnew _yyRuleInfo( 206, 7 ),\nnew _yyRuleInfo( 206, 7 ),\nnew _yyRuleInfo( 206, 7 ),\nnew _yyRuleInfo( 157, 0 ),\nnew _yyRuleInfo( 157, 2 ),\nnew _yyRuleInfo( 193, 2 ),\nnew _yyRuleInfo( 208, 1 ),\nnew _yyRuleInfo( 208, 2 ),\nnew _yyRuleInfo( 208, 3 ),\nnew _yyRuleInfo( 208, 4 ),\nnew _yyRuleInfo( 210, 2 ),\nnew _yyRuleInfo( 210, 0 ),\nnew _yyRuleInfo( 209, 0 ),\nnew _yyRuleInfo( 209, 3 ),\nnew _yyRuleInfo( 209, 2 ),\nnew _yyRuleInfo( 211, 4 ),\nnew _yyRuleInfo( 211, 0 ),\nnew _yyRuleInfo( 202, 0 ),\nnew _yyRuleInfo( 202, 3 ),\nnew _yyRuleInfo( 214, 4 ),\nnew _yyRuleInfo( 214, 2 ),\nnew _yyRuleInfo( 215, 1 ),\nnew _yyRuleInfo( 177, 1 ),\nnew _yyRuleInfo( 177, 1 ),\nnew _yyRuleInfo( 177, 0 ),\nnew _yyRuleInfo( 200, 0 ),\nnew _yyRuleInfo( 200, 3 ),\nnew _yyRuleInfo( 201, 0 ),\nnew _yyRuleInfo( 201, 2 ),\nnew _yyRuleInfo( 203, 0 ),\nnew _yyRuleInfo( 203, 2 ),\nnew _yyRuleInfo( 203, 4 ),\nnew _yyRuleInfo( 203, 4 ),\nnew _yyRuleInfo( 147, 5 ),\nnew _yyRuleInfo( 199, 0 ),\nnew _yyRuleInfo( 199, 2 ),\nnew _yyRuleInfo( 147, 7 ),\nnew _yyRuleInfo( 217, 5 ),\nnew _yyRuleInfo( 217, 3 ),\nnew _yyRuleInfo( 147, 8 ),\nnew _yyRuleInfo( 147, 5 ),\nnew _yyRuleInfo( 147, 6 ),\nnew _yyRuleInfo( 218, 2 ),\nnew _yyRuleInfo( 218, 1 ),\nnew _yyRuleInfo( 220, 3 ),\nnew _yyRuleInfo( 220, 1 ),\nnew _yyRuleInfo( 219, 0 ),\nnew _yyRuleInfo( 219, 3 ),\nnew _yyRuleInfo( 213, 3 ),\nnew _yyRuleInfo( 213, 1 ),\nnew _yyRuleInfo( 175, 1 ),\nnew _yyRuleInfo( 175, 3 ),\nnew _yyRuleInfo( 174, 1 ),\nnew _yyRuleInfo( 175, 1 ),\nnew _yyRuleInfo( 175, 1 ),\nnew _yyRuleInfo( 175, 3 ),\nnew _yyRuleInfo( 175, 5 ),\nnew _yyRuleInfo( 174, 1 ),\nnew _yyRuleInfo( 174, 1 ),\nnew _yyRuleInfo( 175, 1 ),\nnew _yyRuleInfo( 175, 1 ),\nnew _yyRuleInfo( 175, 3 ),\nnew _yyRuleInfo( 175, 6 ),\nnew _yyRuleInfo( 175, 5 ),\nnew _yyRuleInfo( 175, 4 ),\nnew _yyRuleInfo( 174, 1 ),\nnew _yyRuleInfo( 175, 3 ),\nnew _yyRuleInfo( 175, 3 ),\nnew _yyRuleInfo( 175, 3 ),\nnew _yyRuleInfo( 175, 3 ),\nnew _yyRuleInfo( 175, 3 ),\nnew _yyRuleInfo( 175, 3 ),\nnew _yyRuleInfo( 175, 3 ),\nnew _yyRuleInfo( 175, 3 ),\nnew _yyRuleInfo( 222, 1 ),\nnew _yyRuleInfo( 222, 2 ),\nnew _yyRuleInfo( 222, 1 ),\nnew _yyRuleInfo( 222, 2 ),\nnew _yyRuleInfo( 223, 2 ),\nnew _yyRuleInfo( 223, 0 ),\nnew _yyRuleInfo( 175, 4 ),\nnew _yyRuleInfo( 175, 2 ),\nnew _yyRuleInfo( 175, 3 ),\nnew _yyRuleInfo( 175, 3 ),\nnew _yyRuleInfo( 175, 4 ),\nnew _yyRuleInfo( 175, 2 ),\nnew _yyRuleInfo( 175, 2 ),\nnew _yyRuleInfo( 175, 2 ),\nnew _yyRuleInfo( 175, 2 ),\nnew _yyRuleInfo( 224, 1 ),\nnew _yyRuleInfo( 224, 2 ),\nnew _yyRuleInfo( 175, 5 ),\nnew _yyRuleInfo( 225, 1 ),\nnew _yyRuleInfo( 225, 2 ),\nnew _yyRuleInfo( 175, 5 ),\nnew _yyRuleInfo( 175, 3 ),\nnew _yyRuleInfo( 175, 5 ),\nnew _yyRuleInfo( 175, 4 ),\nnew _yyRuleInfo( 175, 4 ),\nnew _yyRuleInfo( 175, 5 ),\nnew _yyRuleInfo( 227, 5 ),\nnew _yyRuleInfo( 227, 4 ),\nnew _yyRuleInfo( 228, 2 ),\nnew _yyRuleInfo( 228, 0 ),\nnew _yyRuleInfo( 226, 1 ),\nnew _yyRuleInfo( 226, 0 ),\nnew _yyRuleInfo( 221, 1 ),\nnew _yyRuleInfo( 221, 0 ),\nnew _yyRuleInfo( 216, 3 ),\nnew _yyRuleInfo( 216, 1 ),\nnew _yyRuleInfo( 147, 11 ),\nnew _yyRuleInfo( 229, 1 ),\nnew _yyRuleInfo( 229, 0 ),\nnew _yyRuleInfo( 179, 0 ),\nnew _yyRuleInfo( 179, 3 ),\nnew _yyRuleInfo( 187, 5 ),\nnew _yyRuleInfo( 187, 3 ),\nnew _yyRuleInfo( 230, 0 ),\nnew _yyRuleInfo( 230, 2 ),\nnew _yyRuleInfo( 147, 4 ),\nnew _yyRuleInfo( 147, 1 ),\nnew _yyRuleInfo( 147, 2 ),\nnew _yyRuleInfo( 147, 3 ),\nnew _yyRuleInfo( 147, 5 ),\nnew _yyRuleInfo( 147, 6 ),\nnew _yyRuleInfo( 147, 5 ),\nnew _yyRuleInfo( 147, 6 ),\nnew _yyRuleInfo( 231, 1 ),\nnew _yyRuleInfo( 231, 1 ),\nnew _yyRuleInfo( 231, 1 ),\nnew _yyRuleInfo( 231, 1 ),\nnew _yyRuleInfo( 231, 1 ),\nnew _yyRuleInfo( 170, 2 ),\nnew _yyRuleInfo( 171, 2 ),\nnew _yyRuleInfo( 233, 1 ),\nnew _yyRuleInfo( 232, 1 ),\nnew _yyRuleInfo( 232, 0 ),\nnew _yyRuleInfo( 147, 5 ),\nnew _yyRuleInfo( 234, 11 ),\nnew _yyRuleInfo( 236, 1 ),\nnew _yyRuleInfo( 236, 1 ),\nnew _yyRuleInfo( 236, 2 ),\nnew _yyRuleInfo( 236, 0 ),\nnew _yyRuleInfo( 237, 1 ),\nnew _yyRuleInfo( 237, 1 ),\nnew _yyRuleInfo( 237, 3 ),\nnew _yyRuleInfo( 238, 0 ),\nnew _yyRuleInfo( 238, 3 ),\nnew _yyRuleInfo( 239, 0 ),\nnew _yyRuleInfo( 239, 2 ),\nnew _yyRuleInfo( 235, 3 ),\nnew _yyRuleInfo( 235, 2 ),\nnew _yyRuleInfo( 241, 1 ),\nnew _yyRuleInfo( 241, 3 ),\nnew _yyRuleInfo( 242, 0 ),\nnew _yyRuleInfo( 242, 3 ),\nnew _yyRuleInfo( 242, 2 ),\nnew _yyRuleInfo( 240, 7 ),\nnew _yyRuleInfo( 240, 8 ),\nnew _yyRuleInfo( 240, 5 ),\nnew _yyRuleInfo( 240, 5 ),\nnew _yyRuleInfo( 240, 1 ),\nnew _yyRuleInfo( 175, 4 ),\nnew _yyRuleInfo( 175, 6 ),\nnew _yyRuleInfo( 191, 1 ),\nnew _yyRuleInfo( 191, 1 ),\nnew _yyRuleInfo( 191, 1 ),\nnew _yyRuleInfo( 147, 4 ),\nnew _yyRuleInfo( 147, 6 ),\nnew _yyRuleInfo( 147, 3 ),\nnew _yyRuleInfo( 244, 0 ),\nnew _yyRuleInfo( 244, 2 ),\nnew _yyRuleInfo( 243, 1 ),\nnew _yyRuleInfo( 243, 0 ),\nnew _yyRuleInfo( 147, 1 ),\nnew _yyRuleInfo( 147, 3 ),\nnew _yyRuleInfo( 147, 1 ),\nnew _yyRuleInfo( 147, 3 ),\nnew _yyRuleInfo( 147, 6 ),\nnew _yyRuleInfo( 147, 6 ),\nnew _yyRuleInfo( 245, 1 ),\nnew _yyRuleInfo( 246, 0 ),\nnew _yyRuleInfo( 246, 1 ),\nnew _yyRuleInfo( 147, 1 ),\nnew _yyRuleInfo( 147, 4 ),\nnew _yyRuleInfo( 247, 7 ),\nnew _yyRuleInfo( 248, 1 ),\nnew _yyRuleInfo( 248, 3 ),\nnew _yyRuleInfo( 249, 0 ),\nnew _yyRuleInfo( 249, 2 ),\nnew _yyRuleInfo( 250, 1 ),\nnew _yyRuleInfo( 250, 3 ),\nnew _yyRuleInfo( 251, 1 ),\nnew _yyRuleInfo( 252, 0 ),\nnew _yyRuleInfo( 252, 4 ),\nnew _yyRuleInfo( 252, 2 ),\n};\n\n    //static void yy_accept(yyParser*);  /* Forward Declaration */\n\n    /*\n    ** Perform a reduce action and the shift that must immediately\n    ** follow the reduce.\n    */\n    static void yy_reduce(\n    yyParser yypParser,         /* The parser */\n    int yyruleno                 /* Number of the rule by which to reduce */\n    )\n    {\n      int yygoto;                     /* The next state */\n      int yyact;                      /* The next action */\n      YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */\n      yymsp yymsp; // yyStackEntry[] yymsp = new yyStackEntry[0];            /* The top of the parser\'s stack */\n      int yysize;                     /* Amount to pop the stack */\n      Parse pParse = yypParser.pParse; //sqlite3ParserARG_FETCH;\n\n      yymsp = new yymsp(ref yypParser, yypParser.yyidx); //      yymsp[0] = yypParser.yystack[yypParser.yyidx];\n#if !NDEBUG\n      if (yyTraceFILE != null && yyruleno >= 0\n      && yyruleno < yyRuleName.Length)\n      { //(int)(yyRuleName.Length/sizeof(yyRuleName[0])) ){\n        fprintf(yyTraceFILE, "%sReduce [%s].\\n", yyTracePrompt,\n        yyRuleName[yyruleno]);\n      }\n#endif // * NDEBUG */\n\n      /* Silence complaints from purify about yygotominor being uninitialized\n** in some cases when it is copied into the stack after the following\n** switch.  yygotominor is uninitialized when a rule reduces that does\n** not set the value of its left-hand side nonterminal.  Leaving the\n** value of the nonterminal uninitialized is utterly harmless as long\n** as the value is never used.  So really the only thing this code\n** accomplishes is to quieten purify.\n**\n** 2007-01-16:  The wireshark project (www.wireshark.org) reports that\n** without this code, their parser segfaults.  I\'m not sure what there\n** parser is doing to make this happen.  This is the second bug report\n** from wireshark this week.  Clearly they are stressing Lemon in ways\n** that it has not been previously stressed...  (SQLite ticket #2172)\n*/\n      yygotominor = new YYMINORTYPE(); //memset(yygotominor, 0, yygotominor).Length;\n      switch (yyruleno)\n      {\n        /* Beginning here are the reduction cases.  A typical example\n        ** follows:\n        **   case 0:\n        **  //#line <lineno> <grammarfile>\n        **     { ... }           // User supplied code\n        **  //#line <lineno> <thisfile>\n        **     break;\n        */\n        case 5: /* explain ::= */\n          //#line 109 "parse.y"\n          { sqlite3BeginParse(pParse, 0); }\n          //#line 2075 "parse.c"\n          break;\n        case 6: /* explain ::= EXPLAIN */\n          //#line 111 "parse.y"\n          { sqlite3BeginParse(pParse, 1); }\n          //#line 2080 "parse.c"\n          break;\n        case 7: /* explain ::= EXPLAIN QUERY PLAN */\n          //#line 112 "parse.y"\n          { sqlite3BeginParse(pParse, 2); }\n          //#line 2085 "parse.c"\n          break;\n        case 8: /* cmdx ::= cmd */\n          //#line 114 "parse.y"\n          { sqlite3FinishCoding(pParse); }\n          //#line 2090 "parse.c"\n          break;\n        case 9: /* cmd ::= BEGIN transtype trans_opt */\n          //#line 119 "parse.y"\n          { sqlite3BeginTransaction(pParse, yymsp[-1].minor.yy328); }\n          //#line 2095 "parse.c"\n          break;\n        case 13: /* transtype ::= */\n          //#line 124 "parse.y"\n          { yygotominor.yy328 = TK_DEFERRED; }\n          //#line 2100 "parse.c"\n          break;\n        case 14: /* transtype ::= DEFERRED */\n        case 15: /* transtype ::= IMMEDIATE */ //yytestcase(yyruleno==15);\n        case 16: /* transtype ::= EXCLUSIVE */ //yytestcase(yyruleno==16);\n        case 114: /* multiselect_op ::= UNION */ //yytestcase(yyruleno==114);\n        case 116: /* multiselect_op ::= EXCEPT|INTERSECT */ //yytestcase(yyruleno==116);\n          //#line 125 "parse.y"\n          { yygotominor.yy328 = yymsp[0].major; }\n          //#line 2109 "parse.c"\n          break;\n        case 17: /* cmd ::= COMMIT trans_opt */\n        case 18: /* cmd ::= END trans_opt */ //yytestcase(yyruleno==18);\n          //#line 128 "parse.y"\n          { sqlite3CommitTransaction(pParse); }\n          //#line 2115 "parse.c"\n          break;\n        case 19: /* cmd ::= ROLLBACK trans_opt */\n          //#line 130 "parse.y"\n          { sqlite3RollbackTransaction(pParse); }\n          //#line 2120 "parse.c"\n          break;\n        case 22: /* cmd ::= SAVEPOINT nm */\n          //#line 134 "parse.y"\n          {\n            sqlite3Savepoint(pParse, SAVEPOINT_BEGIN, yymsp[0].minor.yy0);\n          }\n          //#line 2127 "parse.c"\n          break;\n        case 23: /* cmd ::= RELEASE savepoint_opt nm */\n          //#line 137 "parse.y"\n          {\n            sqlite3Savepoint(pParse, SAVEPOINT_RELEASE, yymsp[0].minor.yy0);\n          }\n          //#line 2134 "parse.c"\n          break;\n        case 24: /* cmd ::= ROLLBACK trans_opt TO savepoint_opt nm */\n          //#line 140 "parse.y"\n          {\n            sqlite3Savepoint(pParse, SAVEPOINT_ROLLBACK, yymsp[0].minor.yy0);\n          }\n          //#line 2141 "parse.c"\n          break;\n        case 26: /* create_table ::= createkw temp TABLE ifnotexists nm dbnm */\n          //#line 147 "parse.y"\n          {\n            sqlite3StartTable(pParse, yymsp[-1].minor.yy0, yymsp[0].minor.yy0, yymsp[-4].minor.yy328, 0, 0, yymsp[-2].minor.yy328);\n          }\n          //#line 2148 "parse.c"\n          break;\n        case 27: /* createkw ::= CREATE */\n          //#line 150 "parse.y"\n          {\n            pParse.db.lookaside.bEnabled = 0;\n            yygotominor.yy0 = yymsp[0].minor.yy0;\n          }\n          //#line 2156 "parse.c"\n          break;\n        case 28: /* ifnotexists ::= */\n        case 31: /* temp ::= */ //yytestcase(yyruleno==31);\n        case 70: /* autoinc ::= */ //yytestcase(yyruleno==70);\n        case 84: /* init_deferred_pred_opt ::= */ //yytestcase(yyruleno==84);\n        case 86: /* init_deferred_pred_opt ::= INITIALLY IMMEDIATE */ //yytestcase(yyruleno==86);\n        case 97: /* defer_subclause_opt ::= */ //yytestcase(yyruleno==97);\n        case 108: /* ifexists ::= */ //yytestcase(yyruleno==108);\n        case 119: /* distinct ::= ALL */ //yytestcase(yyruleno==119);\n        case 120: /* distinct ::= */ //yytestcase(yyruleno==120);\n        case 222: /* between_op ::= BETWEEN */ //yytestcase(yyruleno==222);\n        case 225: /* in_op ::= IN */ //yytestcase(yyruleno==225);\n          //#line 155 "parse.y"\n          { yygotominor.yy328 = 0; }\n          //#line 2171 "parse.c"\n          break;\n        case 29: /* ifnotexists ::= IF NOT EXISTS */\n        case 30: /* temp ::= TEMP */ //yytestcase(yyruleno==30);\n        case 71: /* autoinc ::= AUTOINCR */ //yytestcase(yyruleno==71);\n        case 85: /* init_deferred_pred_opt ::= INITIALLY DEFERRED */ //yytestcase(yyruleno==85);\n        case 107: /* ifexists ::= IF EXISTS */ //yytestcase(yyruleno==107);\n        case 118: /* distinct ::= DISTINCT */ //yytestcase(yyruleno==118);\n        case 223: /* between_op ::= NOT BETWEEN */ //yytestcase(yyruleno==223);\n        case 226: /* in_op ::= NOT IN */ //yytestcase(yyruleno==226);\n          //#line 156 "parse.y"\n          { yygotominor.yy328 = 1; }\n          //#line 2183 "parse.c"\n          break;\n        case 32: /* create_table_args ::= LP columnlist conslist_opt RP */\n          //#line 162 "parse.y"\n          {\n            sqlite3EndTable(pParse, yymsp[-1].minor.yy0, yymsp[0].minor.yy0, 0);\n          }\n          //#line 2190 "parse.c"\n          break;\n        case 33: /* create_table_args ::= AS select */\n          //#line 165 "parse.y"\n          {\n            sqlite3EndTable(pParse, 0, 0, yymsp[0].minor.yy3);\n            sqlite3SelectDelete(pParse.db, ref yymsp[0].minor.yy3);\n          }\n          //#line 2198 "parse.c"\n          break;\n        case 36: /* column ::= columnid type carglist */\n          //#line 177 "parse.y"\n          {\n            //yygotominor.yy0.z = yymsp[-2].minor.yy0.z;\n            //yygotominor.yy0.n = (int)(pParse.sLastToken.z-yymsp[-2].minor.yy0.z) + pParse.sLastToken.n;\n            yygotominor.yy0.n = (int)(yymsp[-2].minor.yy0.z.Length - pParse.sLastToken.z.Length) + pParse.sLastToken.n;\n            yygotominor.yy0.z = yymsp[-2].minor.yy0.z.Substring(0, yygotominor.yy0.n);\n          }\n          //#line 2206 "parse.c"\n          break;\n        case 37: /* columnid ::= nm */\n          //#line 181 "parse.y"\n          {\n            sqlite3AddColumn(pParse, yymsp[0].minor.yy0);\n            yygotominor.yy0 = yymsp[0].minor.yy0;\n          }\n          //#line 2214 "parse.c"\n          break;\n        case 38: /* id ::= ID */\n        case 39: /* id ::= INDEXED */ //yytestcase(yyruleno==39);\n        case 40: /* ids ::= ID|STRING */ //yytestcase(yyruleno==40);\n        case 41: /* nm ::= id */ //yytestcase(yyruleno==41);\n        case 42: /* nm ::= STRING */ //yytestcase(yyruleno==42);\n        case 43: /* nm ::= JOIN_KW */ //yytestcase(yyruleno==43);\n        case 46: /* typetoken ::= typename */ //yytestcase(yyruleno==46);\n        case 49: /* typename ::= ids */ //yytestcase(yyruleno==49);\n        case 126: /* as ::= AS nm */ //yytestcase(yyruleno==126);\n        case 127: /* as ::= ids */ //yytestcase(yyruleno==127);\n        case 137: /* dbnm ::= DOT nm */ //yytestcase(yyruleno==137);\n        case 146: /* indexed_opt ::= INDEXED BY nm */ //yytestcase(yyruleno==146);\n        case 251: /* collate ::= COLLATE ids */ //yytestcase(yyruleno==251);\n        case 260: /* nmnum ::= plus_num */ //yytestcase(yyruleno==260);\n        case 261: /* nmnum ::= nm */ //yytestcase(yyruleno==261);\n        case 262: /* nmnum ::= ON */ //yytestcase(yyruleno==262);\n        case 263: /* nmnum ::= DELETE */ //yytestcase(yyruleno==263);\n        case 264: /* nmnum ::= DEFAULT */ //yytestcase(yyruleno==264);\n        case 265: /* plus_num ::= plus_opt number */ //yytestcase(yyruleno==265);\n        case 266: /* minus_num ::= MINUS number */ //yytestcase(yyruleno==266);\n        case 267: /* number ::= INTEGER|FLOAT */ //yytestcase(yyruleno==267);\n        case 285: /* trnm ::= nm */ //yytestcase( yyruleno == 285 );\n          //#line 191 "parse.y"\n          { yygotominor.yy0 = yymsp[0].minor.yy0; }\n          //#line 2240 "parse.c"\n          break;\n        case 45: /* type ::= typetoken */\n          //#line 253 "parse.y"\n          { sqlite3AddColumnType(pParse, yymsp[0].minor.yy0); }\n          //#line 2245 "parse.c"\n          break;\n        case 47: /* typetoken ::= typename LP signed RP */\n          //#line 255 "parse.y"\n          {\n            //yygotominor.yy0.z = yymsp[-3].minor.yy0.z;\n            //yygotominor.yy0.n = (int)( yymsp[0].minor.yy0.z[yymsp[0].minor.yy0.n] - yymsp[-3].minor.yy0.z );\n            yygotominor.yy0.n = yymsp[-3].minor.yy0.z.Length - yymsp[0].minor.yy0.z.Length + yymsp[0].minor.yy0.n;\n            yygotominor.yy0.z = yymsp[-3].minor.yy0.z.Substring(0, yygotominor.yy0.n);\n          }\n          //#line 2253 "parse.c"\n          break;\n        case 48: /* typetoken ::= typename LP signed COMMA signed RP */\n          //#line 259 "parse.y"\n          {\n            //yygotominor.yy0.z = yymsp[-5].minor.yy0.z;\n            //yygotominor.yy0.n = (int)(yymsp[0].minor.yy0.z[yymsp[0].minor.yy0.n] - yymsp[-5].minor.yy0.z);\n            yygotominor.yy0.n = yymsp[-5].minor.yy0.z.Length - yymsp[0].minor.yy0.z.Length + 1;\n            yygotominor.yy0.z = yymsp[-5].minor.yy0.z.Substring(0, yygotominor.yy0.n);\n          }\n          //#line 2261 "parse.c"\n          break;\n        case 50: /* typename ::= typename ids */\n          //#line 265 "parse.y"\n          {\n            //yygotominor.yy0.z=yymsp[-1].minor.yy0.z; yygotominor.yy0.n=yymsp[0].minor.yy0.n+(int)(yymsp[0].minor.yy0.z-yymsp[-1].minor.yy0.z);\n            yygotominor.yy0.z = yymsp[-1].minor.yy0.z;\n            yygotominor.yy0.n = yymsp[0].minor.yy0.n + (int)(yymsp[-1].minor.yy0.z.Length - yymsp[0].minor.yy0.z.Length);\n          }\n          //#line 2266 "parse.c"\n          break;\n        case 57: /* ccons ::= DEFAULT term */\n        case 59: /* ccons ::= DEFAULT PLUS term */ //yytestcase(yyruleno==59);\n          //#line 276 "parse.y"\n          { sqlite3AddDefaultValue(pParse, yymsp[0].minor.yy346); }\n          //#line 2272 "parse.c"\n          break;\n        case 58: /* ccons ::= DEFAULT LP expr RP */\n          //#line 277 "parse.y"\n          { sqlite3AddDefaultValue(pParse, yymsp[-1].minor.yy346); }\n          //#line 2277 "parse.c"\n          break;\n        case 60: /* ccons ::= DEFAULT MINUS term */\n          //#line 279 "parse.y"\n          {\n            ExprSpan v = new ExprSpan();\n            v.pExpr = sqlite3PExpr(pParse, TK_UMINUS, yymsp[0].minor.yy346.pExpr, 0, 0);\n            v.zStart = yymsp[-1].minor.yy0.z;\n            v.zEnd = yymsp[0].minor.yy346.zEnd;\n            sqlite3AddDefaultValue(pParse, v);\n          }\n          //#line 2288 "parse.c"\n          break;\n        case 61: /* ccons ::= DEFAULT id */\n          //#line 286 "parse.y"\n          {\n            ExprSpan v = new ExprSpan();\n            spanExpr(v, pParse, TK_STRING, yymsp[0].minor.yy0);\n            sqlite3AddDefaultValue(pParse, v);\n          }\n          //#line 2297 "parse.c"\n          break;\n        case 63: /* ccons ::= NOT NULL onconf */\n          //#line 296 "parse.y"\n          { sqlite3AddNotNull(pParse, yymsp[0].minor.yy328); }\n          //#line 2302 "parse.c"\n          break;\n        case 64: /* ccons ::= PRIMARY KEY sortorder onconf autoinc */\n          //#line 298 "parse.y"\n          { sqlite3AddPrimaryKey(pParse, 0, yymsp[-1].minor.yy328, yymsp[0].minor.yy328, yymsp[-2].minor.yy328); }\n          //#line 2307 "parse.c"\n          break;\n        case 65: /* ccons ::= UNIQUE onconf */\n          //#line 299 "parse.y"\n          { sqlite3CreateIndex(pParse, 0, 0, 0, 0, yymsp[0].minor.yy328, 0, 0, 0, 0); }\n          //#line 2312 "parse.c"\n          break;\n        case 66: /* ccons ::= CHECK LP expr RP */\n          //#line 300 "parse.y"\n          { sqlite3AddCheckConstraint(pParse, yymsp[-1].minor.yy346.pExpr); }\n          //#line 2317 "parse.c"\n          break;\n        case 67: /* ccons ::= REFERENCES nm idxlist_opt refargs */\n          //#line 302 "parse.y"\n          { sqlite3CreateForeignKey(pParse, 0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy14, yymsp[0].minor.yy328); }\n          //#line 2322 "parse.c"\n          break;\n        case 68: /* ccons ::= defer_subclause */\n          //#line 303 "parse.y"\n          { sqlite3DeferForeignKey(pParse, yymsp[0].minor.yy328); }\n          //#line 2327 "parse.c"\n          break;\n        case 69: /* ccons ::= COLLATE ids */\n          //#line 304 "parse.y"\n          { sqlite3AddCollateType(pParse, yymsp[0].minor.yy0); }\n          //#line 2332 "parse.c"\n          break;\n        case 72: /* refargs ::= */\n          //#line 317 "parse.y"\n          { yygotominor.yy328 = OE_Restrict * 0x010101; }\n          //#line 2337 "parse.c"\n          break;\n        case 73: /* refargs ::= refargs refarg */\n          //#line 318 "parse.y"\n          { yygotominor.yy328 = (yymsp[-1].minor.yy328 & ~yymsp[0].minor.yy429.mask) | yymsp[0].minor.yy429.value; }\n          //#line 2342 "parse.c"\n          break;\n        case 74: /* refarg ::= MATCH nm */\n          //#line 320 "parse.y"\n          { yygotominor.yy429.value = 0; yygotominor.yy429.mask = 0x000000; }\n          //#line 2347 "parse.c"\n          break;\n        case 75: /* refarg ::= ON DELETE refact */\n          //#line 321 "parse.y"\n          { yygotominor.yy429.value = yymsp[0].minor.yy328; yygotominor.yy429.mask = 0x0000ff; }\n          //#line 2352 "parse.c"\n          break;\n        case 76: /* refarg ::= ON UPDATE refact */\n          //#line 322 "parse.y"\n          { yygotominor.yy429.value = yymsp[0].minor.yy328 << 8; yygotominor.yy429.mask = 0x00ff00; }\n          //#line 2357 "parse.c"\n          break;\n        case 77: /* refarg ::= ON INSERT refact */\n          //#line 323 "parse.y"\n          { yygotominor.yy429.value = yymsp[0].minor.yy328 << 16; yygotominor.yy429.mask = 0xff0000; }\n          //#line 2362 "parse.c"\n          break;\n        case 78: /* refact ::= SET NULL */\n          //#line 325 "parse.y"\n          { yygotominor.yy328 = OE_SetNull; }\n          //#line 2367 "parse.c"\n          break;\n        case 79: /* refact ::= SET DEFAULT */\n          //#line 326 "parse.y"\n          { yygotominor.yy328 = OE_SetDflt; }\n          //#line 2372 "parse.c"\n          break;\n        case 80: /* refact ::= CASCADE */\n          //#line 327 "parse.y"\n          { yygotominor.yy328 = OE_Cascade; }\n          //#line 2377 "parse.c"\n          break;\n        case 81: /* refact ::= RESTRICT */\n          //#line 328 "parse.y"\n          { yygotominor.yy328 = OE_Restrict; }\n          //#line 2382 "parse.c"\n          break;\n        case 82: /* defer_subclause ::= NOT DEFERRABLE init_deferred_pred_opt */\n        case 83: /* defer_subclause ::= DEFERRABLE init_deferred_pred_opt */ //yytestcase(yyruleno==83);\n        case 98: /* defer_subclause_opt ::= defer_subclause */ //yytestcase(yyruleno==98);\n        case 100: /* onconf ::= ON CONFLICT resolvetype */ //yytestcase(yyruleno==100);\n        case 103: /* resolvetype ::= raisetype */ //yytestcase(yyruleno==103);\n          //#line 330 "parse.y"\n          { yygotominor.yy328 = yymsp[0].minor.yy328; }\n          //#line 2391 "parse.c"\n          break;\n        case 87: /* conslist_opt ::= */\n          //#line 340 "parse.y"\n          { yygotominor.yy0.n = 0; yygotominor.yy0.z = null; }\n          //#line 2396 "parse.c"\n          break;\n        case 88: /* conslist_opt ::= COMMA conslist */\n          //#line 341 "parse.y"\n          { yygotominor.yy0 = yymsp[-1].minor.yy0; }\n          //#line 2401 "parse.c"\n          break;\n        case 93: /* tcons ::= PRIMARY KEY LP idxlist autoinc RP onconf */\n          //#line 347 "parse.y"\n          { sqlite3AddPrimaryKey(pParse, yymsp[-3].minor.yy14, yymsp[0].minor.yy328, yymsp[-2].minor.yy328, 0); }\n          //#line 2406 "parse.c"\n          break;\n        case 94: /* tcons ::= UNIQUE LP idxlist RP onconf */\n          //#line 349 "parse.y"\n          { sqlite3CreateIndex(pParse, 0, 0, 0, yymsp[-2].minor.yy14, yymsp[0].minor.yy328, 0, 0, 0, 0); }\n          //#line 2411 "parse.c"\n          break;\n        case 95: /* tcons ::= CHECK LP expr RP onconf */\n          //#line 351 "parse.y"\n          { sqlite3AddCheckConstraint(pParse, yymsp[-2].minor.yy346.pExpr); }\n          //#line 2416 "parse.c"\n          break;\n        case 96: /* tcons ::= FOREIGN KEY LP idxlist RP REFERENCES nm idxlist_opt refargs defer_subclause_opt */\n          //#line 353 "parse.y"\n          {\n            sqlite3CreateForeignKey(pParse, yymsp[-6].minor.yy14, yymsp[-3].minor.yy0, yymsp[-2].minor.yy14, yymsp[-1].minor.yy328);\n            sqlite3DeferForeignKey(pParse, yymsp[0].minor.yy328);\n          }\n          //#line 2424 "parse.c"\n          break;\n        case 99: /* onconf ::= */\n          //#line 367 "parse.y"\n          { yygotominor.yy328 = OE_Default; }\n          //#line 2429 "parse.c"\n          break;\n        case 101: /* orconf ::= */\n          //#line 369 "parse.y"\n          { yygotominor.yy186 = OE_Default; }\n          //#line 2434 "parse.c"\n          break;\n        case 102: /* orconf ::= OR resolvetype */\n          //#line 370 "parse.y"\n          { yygotominor.yy186 = (u8)yymsp[0].minor.yy328; }\n          //#line 2439 "parse.c"\n          break;\n        case 104: /* resolvetype ::= IGNORE */\n          //#line 372 "parse.y"\n          { yygotominor.yy328 = OE_Ignore; }\n          //#line 2444 "parse.c"\n          break;\n        case 105: /* resolvetype ::= REPLACE */\n          //#line 373 "parse.y"\n          { yygotominor.yy328 = OE_Replace; }\n          //#line 2449 "parse.c"\n          break;\n        case 106: /* cmd ::= DROP TABLE ifexists fullname */\n          //#line 377 "parse.y"\n          {\n            sqlite3DropTable(pParse, yymsp[0].minor.yy65, 0, yymsp[-1].minor.yy328);\n          }\n          //#line 2456 "parse.c"\n          break;\n        case 109: /* cmd ::= createkw temp VIEW ifnotexists nm dbnm AS select */\n          //#line 387 "parse.y"\n          {\n            sqlite3CreateView(pParse, yymsp[-7].minor.yy0, yymsp[-3].minor.yy0, yymsp[-2].minor.yy0, yymsp[0].minor.yy3, yymsp[-6].minor.yy328, yymsp[-4].minor.yy328);\n          }\n          //#line 2463 "parse.c"\n          break;\n        case 110: /* cmd ::= DROP VIEW ifexists fullname */\n          //#line 390 "parse.y"\n          {\n            sqlite3DropTable(pParse, yymsp[0].minor.yy65, 1, yymsp[-1].minor.yy328);\n          }\n          //#line 2470 "parse.c"\n          break;\n        case 111: /* cmd ::= select */\n          //#line 397 "parse.y"\n          {\n            SelectDest dest = new SelectDest(SRT_Output, \'\\0\', 0, 0, 0);\n            sqlite3Select(pParse, yymsp[0].minor.yy3, ref dest);\n            sqlite3SelectDelete(pParse.db, ref yymsp[0].minor.yy3);\n          }\n          //#line 2479 "parse.c"\n          break;\n        case 112: /* select ::= oneselect */\n          //#line 408 "parse.y"\n          { yygotominor.yy3 = yymsp[0].minor.yy3; }\n          //#line 2484 "parse.c"\n          break;\n        case 113: /* select ::= select multiselect_op oneselect */\n          //#line 410 "parse.y"\n          {\n            if (yymsp[0].minor.yy3 != null)\n            {\n              yymsp[0].minor.yy3.op = (u8)yymsp[-1].minor.yy328;\n              yymsp[0].minor.yy3.pPrior = yymsp[-2].minor.yy3;\n            }\n            else\n            {\n              sqlite3SelectDelete(pParse.db, ref yymsp[-2].minor.yy3);\n            }\n            yygotominor.yy3 = yymsp[0].minor.yy3;\n          }\n          //#line 2497 "parse.c"\n          break;\n        case 115: /* multiselect_op ::= UNION ALL */\n          //#line 421 "parse.y"\n          { yygotominor.yy328 = TK_ALL; }\n          //#line 2502 "parse.c"\n          break;\n        case 117: /* oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt */\n          //#line 425 "parse.y"\n          {\n            yygotominor.yy3 = sqlite3SelectNew(pParse, yymsp[-6].minor.yy14, yymsp[-5].minor.yy65, yymsp[-4].minor.yy132, yymsp[-3].minor.yy14, yymsp[-2].minor.yy132, yymsp[-1].minor.yy14, yymsp[-7].minor.yy328, yymsp[0].minor.yy476.pLimit, yymsp[0].minor.yy476.pOffset);\n          }\n          //#line 2509 "parse.c"\n          break;\n        case 121: /* sclp ::= selcollist COMMA */\n        case 247: /* idxlist_opt ::= LP idxlist RP */ //yytestcase(yyruleno==247);\n          //#line 446 "parse.y"\n          { yygotominor.yy14 = yymsp[-1].minor.yy14; }\n          //#line 2515 "parse.c"\n          break;\n        case 122: /* sclp ::= */\n        case 150: /* orderby_opt ::= */ //yytestcase(yyruleno==150);\n        case 158: /* groupby_opt ::= */ //yytestcase(yyruleno==158);\n        case 240: /* exprlist ::= */ //yytestcase(yyruleno==240);\n        case 246: /* idxlist_opt ::= */ //yytestcase(yyruleno==246);\n          //#line 447 "parse.y"\n          { yygotominor.yy14 = null; }\n          //#line 2524 "parse.c"\n          break;\n        case 123: /* selcollist ::= sclp expr as */\n          //#line 448 "parse.y"\n          {\n            yygotominor.yy14 = sqlite3ExprListAppend(pParse, yymsp[-2].minor.yy14, yymsp[-1].minor.yy346.pExpr);\n            if (yymsp[0].minor.yy0.n > 0) sqlite3ExprListSetName(pParse, yygotominor.yy14, yymsp[0].minor.yy0, 1);\n            sqlite3ExprListSetSpan(pParse, yygotominor.yy14, yymsp[-1].minor.yy346);\n          }\n          //#line 2533 "parse.c"\n          break;\n        case 124: /* selcollist ::= sclp STAR */\n          //#line 453 "parse.y"\n          {\n            Expr p = sqlite3Expr(pParse.db, TK_ALL, null);\n            yygotominor.yy14 = sqlite3ExprListAppend(pParse, yymsp[-1].minor.yy14, p);\n          }\n          //#line 2541 "parse.c"\n          break;\n        case 125: /* selcollist ::= sclp nm DOT STAR */\n          //#line 457 "parse.y"\n          {\n            Expr pRight = sqlite3PExpr(pParse, TK_ALL, 0, 0, yymsp[0].minor.yy0);\n            Expr pLeft = sqlite3PExpr(pParse, TK_ID, 0, 0, yymsp[-2].minor.yy0);\n            Expr pDot = sqlite3PExpr(pParse, TK_DOT, pLeft, pRight, 0);\n            yygotominor.yy14 = sqlite3ExprListAppend(pParse, yymsp[-3].minor.yy14, pDot);\n          }\n          //#line 2551 "parse.c"\n          break;\n        case 128: /* as ::= */\n          //#line 470 "parse.y"\n          { yygotominor.yy0.n = 0; }\n          //#line 2556 "parse.c"\n          break;\n        case 129: /* from ::= */\n          //#line 482 "parse.y"\n          { yygotominor.yy65 = new SrcList(); }//sqlite3DbMallocZero(pParse.db, sizeof(*yygotominor.yy65));\n          //#line 2561 "parse.c"\n          break;\n        case 130: /* from ::= FROM seltablist */\n          //#line 483 "parse.y"\n          {\n            yygotominor.yy65 = yymsp[0].minor.yy65;\n            sqlite3SrcListShiftJoinType(yygotominor.yy65);\n          }\n          //#line 2569 "parse.c"\n          break;\n        case 131: /* stl_prefix ::= seltablist joinop */\n          //#line 491 "parse.y"\n          {\n            yygotominor.yy65 = yymsp[-1].minor.yy65;\n            if (ALWAYS(yygotominor.yy65 != null && yygotominor.yy65.nSrc > 0)) yygotominor.yy65.a[yygotominor.yy65.nSrc - 1].jointype = (u8)yymsp[0].minor.yy328;\n          }\n          //#line 2577 "parse.c"\n          break;\n        case 132: /* stl_prefix ::= */\n          //#line 495 "parse.y"\n          { yygotominor.yy65 = null; }\n          //#line 2582 "parse.c"\n          break;\n        case 133: /* seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt */\n          //#line 496 "parse.y"\n          {\n            yygotominor.yy65 = sqlite3SrcListAppendFromTerm(pParse, yymsp[-6].minor.yy65, yymsp[-5].minor.yy0, yymsp[-4].minor.yy0, yymsp[-3].minor.yy0, 0, yymsp[-1].minor.yy132, yymsp[0].minor.yy408);\n            sqlite3SrcListIndexedBy(pParse, yygotominor.yy65, yymsp[-2].minor.yy0);\n          }\n          //#line 2590 "parse.c"\n          break;\n        case 134: /* seltablist ::= stl_prefix LP select RP as on_opt using_opt */\n          //#line 502 "parse.y"\n          {\n            yygotominor.yy65 = sqlite3SrcListAppendFromTerm(pParse, yymsp[-6].minor.yy65, 0, 0, yymsp[-2].minor.yy0, yymsp[-4].minor.yy3, yymsp[-1].minor.yy132, yymsp[0].minor.yy408);\n          }\n          //#line 2597 "parse.c"\n          break;\n        case 135: /* seltablist ::= stl_prefix LP seltablist RP as on_opt using_opt */\n          //#line 506 "parse.y"\n          {\n            if (yymsp[-6].minor.yy65 == null && yymsp[-2].minor.yy0.n == 0 && yymsp[-1].minor.yy132 == null && yymsp[0].minor.yy408 == null)\n            {\n              yygotominor.yy65 = yymsp[-4].minor.yy65;\n            }\n            else\n            {\n              Select pSubquery;\n              sqlite3SrcListShiftJoinType(yymsp[-4].minor.yy65);\n              pSubquery = sqlite3SelectNew(pParse, 0, yymsp[-4].minor.yy65, 0, 0, 0, 0, 0, 0, 0);\n              yygotominor.yy65 = sqlite3SrcListAppendFromTerm(pParse, yymsp[-6].minor.yy65, 0, 0, yymsp[-2].minor.yy0, pSubquery, yymsp[-1].minor.yy132, yymsp[0].minor.yy408);\n            }\n          }\n          //#line 2611 "parse.c"\n          break;\n        case 136: /* dbnm ::= */\n        case 145: /* indexed_opt ::= */ //yytestcase(yyruleno==145);\n          //#line 531 "parse.y"\n          { yygotominor.yy0.z = null; yygotominor.yy0.n = 0; }\n          //#line 2617 "parse.c"\n          break;\n        case 138: /* fullname ::= nm dbnm */\n          //#line 536 "parse.y"\n          { yygotominor.yy65 = sqlite3SrcListAppend(pParse.db, 0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }\n          //#line 2622 "parse.c"\n          break;\n        case 139: /* joinop ::= COMMA|JOIN */\n          //#line 540 "parse.y"\n          { yygotominor.yy328 = JT_INNER; }\n          //#line 2627 "parse.c"\n          break;\n        case 140: /* joinop ::= JOIN_KW JOIN */\n          //#line 541 "parse.y"\n          { yygotominor.yy328 = sqlite3JoinType(pParse, yymsp[-1].minor.yy0, 0, 0); }\n          //#line 2632 "parse.c"\n          break;\n        case 141: /* joinop ::= JOIN_KW nm JOIN */\n          //#line 542 "parse.y"\n          { yygotominor.yy328 = sqlite3JoinType(pParse, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, 0); }\n          //#line 2637 "parse.c"\n          break;\n        case 142: /* joinop ::= JOIN_KW nm nm JOIN */\n          //#line 544 "parse.y"\n          { yygotominor.yy328 = sqlite3JoinType(pParse, yymsp[-3].minor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0); }\n          //#line 2642 "parse.c"\n          break;\n        case 143: /* on_opt ::= ON expr */\n        case 154: /* sortitem ::= expr */ //yytestcase(yyruleno==154);\n        case 161: /* having_opt ::= HAVING expr */ //yytestcase(yyruleno==161);\n        case 168: /* where_opt ::= WHERE expr */ //yytestcase(yyruleno==168);\n        case 235: /* case_else ::= ELSE expr */ //yytestcase(yyruleno==235);\n        case 237: /* case_operand ::= expr */ //yytestcase(yyruleno==237);\n          //#line 548 "parse.y"\n          { yygotominor.yy132 = yymsp[0].minor.yy346.pExpr; }\n          //#line 2652 "parse.c"\n          break;\n        case 144: /* on_opt ::= */\n        case 160: /* having_opt ::= */ //yytestcase(yyruleno==160);\n        case 167: /* where_opt ::= */ //yytestcase(yyruleno==167);\n        case 236: /* case_else ::= */ //yytestcase(yyruleno==236);\n        case 238: /* case_operand ::= */ //yytestcase(yyruleno==238);\n          //#line 549 "parse.y"\n          { yygotominor.yy132 = null; }\n          //#line 2661 "parse.c"\n          break;\n        case 147: /* indexed_opt ::= NOT INDEXED */\n          //#line 564 "parse.y"\n          { yygotominor.yy0.z = null; yygotominor.yy0.n = 1; }\n          //#line 2666 "parse.c"\n          break;\n        case 148: /* using_opt ::= USING LP inscollist RP */\n        case 180: /* inscollist_opt ::= LP inscollist RP */ //yytestcase(yyruleno==180);\n          //#line 568 "parse.y"\n          { yygotominor.yy408 = yymsp[-1].minor.yy408; }\n          //#line 2672 "parse.c"\n          break;\n        case 149: /* using_opt ::= */\n        case 179: /* inscollist_opt ::= */ //yytestcase(yyruleno==179);\n          //#line 569 "parse.y"null\n          { yygotominor.yy408 = null; }\n          //#line 2678 "parse.c"\n          break;\n        case 151: /* orderby_opt ::= ORDER BY sortlist */\n        case 159: /* groupby_opt ::= GROUP BY nexprlist */ //yytestcase(yyruleno==159);\n        case 239: /* exprlist ::= nexprlist */ //yytestcase(yyruleno==239);\n          //#line 580 "parse.y"\n          { yygotominor.yy14 = yymsp[0].minor.yy14; }\n          //#line 2685 "parse.c"\n          break;\n        case 152: /* sortlist ::= sortlist COMMA sortitem sortorder */\n          //#line 581 "parse.y"\n          {\n            yygotominor.yy14 = sqlite3ExprListAppend(pParse, yymsp[-3].minor.yy14, yymsp[-1].minor.yy132);\n            if (yygotominor.yy14 != null) yygotominor.yy14.a[yygotominor.yy14.nExpr - 1].sortOrder = (u8)yymsp[0].minor.yy328;\n          }\n          //#line 2693 "parse.c"\n          break;\n        case 153: /* sortlist ::= sortitem sortorder */\n          //#line 585 "parse.y"\n          {\n            yygotominor.yy14 = sqlite3ExprListAppend(pParse, 0, yymsp[-1].minor.yy132);\n            if (yygotominor.yy14 != null && ALWAYS(yygotominor.yy14.a)) yygotominor.yy14.a[0].sortOrder = (u8)yymsp[0].minor.yy328;\n          }\n          //#line 2701 "parse.c"\n          break;\n        case 155: /* sortorder ::= ASC */\n        case 157: /* sortorder ::= */ //yytestcase(yyruleno==157);\n          //#line 593 "parse.y"\n          { yygotominor.yy328 = SQLITE_SO_ASC; }\n          //#line 2707 "parse.c"\n          break;\n        case 156: /* sortorder ::= DESC */\n          //#line 594 "parse.y"\n          { yygotominor.yy328 = SQLITE_SO_DESC; }\n          //#line 2712 "parse.c"\n          break;\n        case 162: /* limit_opt ::= */\n          //#line 620 "parse.y"\n          { yygotominor.yy476.pLimit = null; yygotominor.yy476.pOffset = null; }\n          //#line 2717 "parse.c"\n          break;\n        case 163: /* limit_opt ::= LIMIT expr */\n          //#line 621 "parse.y"\n          { yygotominor.yy476.pLimit = yymsp[0].minor.yy346.pExpr; yygotominor.yy476.pOffset = null; }\n          //#line 2722 "parse.c"\n          break;\n        case 164: /* limit_opt ::= LIMIT expr OFFSET expr */\n          //#line 623 "parse.y"\n          { yygotominor.yy476.pLimit = yymsp[-2].minor.yy346.pExpr; yygotominor.yy476.pOffset = yymsp[0].minor.yy346.pExpr; }\n          //#line 2727 "parse.c"\n          break;\n        case 165: /* limit_opt ::= LIMIT expr COMMA expr */\n          //#line 625 "parse.y"\n          { yygotominor.yy476.pOffset = yymsp[-2].minor.yy346.pExpr; yygotominor.yy476.pLimit = yymsp[0].minor.yy346.pExpr; }\n          //#line 2732 "parse.c"\n          break;\n        case 166: /* cmd ::= DELETE FROM fullname indexed_opt where_opt */\n          //#line 638 "parse.y"\n          {\n            sqlite3SrcListIndexedBy(pParse, yymsp[-2].minor.yy65, yymsp[-1].minor.yy0);\n            sqlite3DeleteFrom(pParse, yymsp[-2].minor.yy65, yymsp[0].minor.yy132);\n          }\n          //#line 2740 "parse.c"\n          break;\n        case 169: /* cmd ::= UPDATE orconf fullname indexed_opt SET setlist where_opt */\n          //#line 661 "parse.y"\n          {\n            sqlite3SrcListIndexedBy(pParse, yymsp[-4].minor.yy65, yymsp[-3].minor.yy0);\n            sqlite3ExprListCheckLength(pParse, yymsp[-1].minor.yy14, "set list");\n            sqlite3Update(pParse, yymsp[-4].minor.yy65, yymsp[-1].minor.yy14, yymsp[0].minor.yy132, yymsp[-5].minor.yy186);\n          }\n          //#line 2749 "parse.c"\n          break;\n        case 170: /* setlist ::= setlist COMMA nm EQ expr */\n          //#line 671 "parse.y"\n          {\n            yygotominor.yy14 = sqlite3ExprListAppend(pParse, yymsp[-4].minor.yy14, yymsp[0].minor.yy346.pExpr);\n            sqlite3ExprListSetName(pParse, yygotominor.yy14, yymsp[-2].minor.yy0, 1);\n          }\n          //#line 2757 "parse.c"\n          break;\n        case 171: /* setlist ::= nm EQ expr */\n          //#line 675 "parse.y"\n          {\n            yygotominor.yy14 = sqlite3ExprListAppend(pParse, 0, yymsp[0].minor.yy346.pExpr);\n            sqlite3ExprListSetName(pParse, yygotominor.yy14, yymsp[-2].minor.yy0, 1);\n          }\n          //#line 2765 "parse.c"\n          break;\n        case 172: /* cmd ::= insert_cmd INTO fullname inscollist_opt VALUES LP itemlist RP */\n          //#line 684 "parse.y"\n          { sqlite3Insert(pParse, yymsp[-5].minor.yy65, yymsp[-1].minor.yy14, 0, yymsp[-4].minor.yy408, yymsp[-7].minor.yy186); }\n          //#line 2770 "parse.c"\n          break;\n        case 173: /* cmd ::= insert_cmd INTO fullname inscollist_opt select */\n          //#line 686 "parse.y"\n          { sqlite3Insert(pParse, yymsp[-2].minor.yy65, 0, yymsp[0].minor.yy3, yymsp[-1].minor.yy408, yymsp[-4].minor.yy186); }\n          //#line 2775 "parse.c"\n          break;\n        case 174: /* cmd ::= insert_cmd INTO fullname inscollist_opt DEFAULT VALUES */\n          //#line 688 "parse.y"\n          { sqlite3Insert(pParse, yymsp[-3].minor.yy65, 0, 0, yymsp[-2].minor.yy408, yymsp[-5].minor.yy186); }\n          //#line 2780 "parse.c"\n          break;\n        case 175: /* insert_cmd ::= INSERT orconf */\n          //#line 691 "parse.y"\n          { yygotominor.yy186 = yymsp[0].minor.yy186; }\n          //#line 2785 "parse.c"\n          break;\n        case 176: /* insert_cmd ::= REPLACE */\n          //#line 692 "parse.y"\n          { yygotominor.yy186 = OE_Replace; }\n          //#line 2790 "parse.c"\n          break;\n        case 177: /* itemlist ::= itemlist COMMA expr */\n        case 241: /* nexprlist ::= nexprlist COMMA expr */ //yytestcase(yyruleno==241);\n          //#line 699 "parse.y"\n          { yygotominor.yy14 = sqlite3ExprListAppend(pParse, yymsp[-2].minor.yy14, yymsp[0].minor.yy346.pExpr); }\n          //#line 2796 "parse.c"\n          break;\n        case 178: /* itemlist ::= expr */\n        case 242: /* nexprlist ::= expr */ //yytestcase(yyruleno==242);\n          //#line 701 "parse.y"\n          { yygotominor.yy14 = sqlite3ExprListAppend(pParse, 0, yymsp[0].minor.yy346.pExpr); }\n          //#line 2802 "parse.c"\n          break;\n        case 181: /* inscollist ::= inscollist COMMA nm */\n          //#line 711 "parse.y"\n          { yygotominor.yy408 = sqlite3IdListAppend(pParse.db, yymsp[-2].minor.yy408, yymsp[0].minor.yy0); }\n          //#line 2807 "parse.c"\n          break;\n        case 182: /* inscollist ::= nm */\n          //#line 713 "parse.y"\n          { yygotominor.yy408 = sqlite3IdListAppend(pParse.db, 0, yymsp[0].minor.yy0); }\n          //#line 2812 "parse.c"\n          break;\n        case 183: /* expr ::= term */\n        case 211: /* escape ::= ESCAPE expr */ //yytestcase(yyruleno==211);\n          //#line 744 "parse.y"\n          { yygotominor.yy346 = yymsp[0].minor.yy346; }\n          //#line 2818 "parse.c"\n          break;\n        case 184: /* expr ::= LP expr RP */\n          //#line 745 "parse.y"\n          { yygotominor.yy346.pExpr = yymsp[-1].minor.yy346.pExpr; spanSet(yygotominor.yy346, yymsp[-2].minor.yy0, yymsp[0].minor.yy0); }\n          //#line 2823 "parse.c"\n          break;\n        case 185: /* term ::= NULL */\n        case 190: /* term ::= INTEGER|FLOAT|BLOB */ //yytestcase(yyruleno==190);\n        case 191: /* term ::= STRING */ //yytestcase(yyruleno==191);\n          //#line 746 "parse.y"\n          { spanExpr(yygotominor.yy346, pParse, yymsp[0].major, yymsp[0].minor.yy0); }\n          //#line 2830 "parse.c"\n          break;\n        case 186: /* expr ::= id */\n        case 187: /* expr ::= JOIN_KW */ //yytestcase(yyruleno==187);\n          //#line 747 "parse.y"\n          { spanExpr(yygotominor.yy346, pParse, TK_ID, yymsp[0].minor.yy0); }\n          //#line 2836 "parse.c"\n          break;\n        case 188: /* expr ::= nm DOT nm */\n          //#line 749 "parse.y"\n          {\n            Expr temp1 = sqlite3PExpr(pParse, TK_ID, 0, 0, yymsp[-2].minor.yy0);\n            Expr temp2 = sqlite3PExpr(pParse, TK_ID, 0, 0, yymsp[0].minor.yy0);\n            yygotominor.yy346.pExpr = sqlite3PExpr(pParse, TK_DOT, temp1, temp2, 0);\n            spanSet(yygotominor.yy346, yymsp[-2].minor.yy0, yymsp[0].minor.yy0);\n          }\n          //#line 2846 "parse.c"\n          break;\n        case 189: /* expr ::= nm DOT nm DOT nm */\n          //#line 755 "parse.y"\n          {\n            Expr temp1 = sqlite3PExpr(pParse, TK_ID, 0, 0, yymsp[-4].minor.yy0);\n            Expr temp2 = sqlite3PExpr(pParse, TK_ID, 0, 0, yymsp[-2].minor.yy0);\n            Expr temp3 = sqlite3PExpr(pParse, TK_ID, 0, 0, yymsp[0].minor.yy0);\n            Expr temp4 = sqlite3PExpr(pParse, TK_DOT, temp2, temp3, 0);\n            yygotominor.yy346.pExpr = sqlite3PExpr(pParse, TK_DOT, temp1, temp4, 0);\n            spanSet(yygotominor.yy346, yymsp[-4].minor.yy0, yymsp[0].minor.yy0);\n          }\n          //#line 2858 "parse.c"\n          break;\n        case 192: /* expr ::= REGISTER */\n          //#line 765 "parse.y"\n          {\n            /* When doing a nested parse, one can include terms in an expression\n            ** that look like this:   #1 #2 ...  These terms refer to registers\n            ** in the virtual machine.  #N is the N-th register. */\n            if (pParse.nested == 0)\n            {\n              sqlite3ErrorMsg(pParse, "near \\"%T\\": syntax error", yymsp[0].minor.yy0);\n              yygotominor.yy346.pExpr = null;\n            }\n            else\n            {\n              yygotominor.yy346.pExpr = sqlite3PExpr(pParse, TK_REGISTER, 0, 0, yymsp[0].minor.yy0);\n              if (yygotominor.yy346.pExpr != null) sqlite3GetInt32(yymsp[0].minor.yy0.z.Substring(1), ref yygotominor.yy346.pExpr.iTable);\n            }\n            spanSet(yygotominor.yy346, yymsp[0].minor.yy0, yymsp[0].minor.yy0);\n          }\n          //#line 2875 "parse.c"\n          break;\n        case 193: /* expr ::= VARIABLE */\n          //#line 778 "parse.y"\n          {\n            spanExpr(yygotominor.yy346, pParse, TK_VARIABLE, yymsp[0].minor.yy0);\n            sqlite3ExprAssignVarNumber(pParse, yygotominor.yy346.pExpr);\n            spanSet(yygotominor.yy346, yymsp[0].minor.yy0, yymsp[0].minor.yy0);\n          }\n          //#line 2884 "parse.c"\n          break;\n        case 194: /* expr ::= expr COLLATE ids */\n          //#line 783 "parse.y"\n          {\n            yygotominor.yy346.pExpr = sqlite3ExprSetColl(pParse, yymsp[-2].minor.yy346.pExpr, yymsp[0].minor.yy0);\n            yygotominor.yy346.zStart = yymsp[-2].minor.yy346.zStart;\n            yygotominor.yy346.zEnd = yymsp[0].minor.yy0.z.Substring(yymsp[0].minor.yy0.n);\n          }\n          //#line 2893 "parse.c"\n          break;\n        case 195: /* expr ::= CAST LP expr AS typetoken RP */\n          //#line 789 "parse.y"\n          {\n            yygotominor.yy346.pExpr = sqlite3PExpr(pParse, TK_CAST, yymsp[-3].minor.yy346.pExpr, 0, yymsp[-1].minor.yy0);\n            spanSet(yygotominor.yy346, yymsp[-5].minor.yy0, yymsp[0].minor.yy0);\n          }\n          //#line 2901 "parse.c"\n          break;\n        case 196: /* expr ::= ID LP distinct exprlist RP */\n          //#line 794 "parse.y"\n          {\n            if (yymsp[-1].minor.yy14 != null && yymsp[-1].minor.yy14.nExpr > pParse.db.aLimit[SQLITE_LIMIT_FUNCTION_ARG])\n            {\n              sqlite3ErrorMsg(pParse, "too many arguments on function %T", yymsp[-4].minor.yy0);\n            }\n            yygotominor.yy346.pExpr = sqlite3ExprFunction(pParse, yymsp[-1].minor.yy14, yymsp[-4].minor.yy0);\n            spanSet(yygotominor.yy346, yymsp[-4].minor.yy0, yymsp[0].minor.yy0);\n            if (yymsp[-2].minor.yy328 != 0 && yygotominor.yy346.pExpr != null)\n            {\n              yygotominor.yy346.pExpr.flags |= EP_Distinct;\n            }\n          }\n          //#line 2915 "parse.c"\n          break;\n        case 197: /* expr ::= ID LP STAR RP */\n          //#line 804 "parse.y"\n          {\n            yygotominor.yy346.pExpr = sqlite3ExprFunction(pParse, 0, yymsp[-3].minor.yy0);\n            spanSet(yygotominor.yy346, yymsp[-3].minor.yy0, yymsp[0].minor.yy0);\n          }\n          //#line 2923 "parse.c"\n          break;\n        case 198: /* term ::= CTIME_KW */\n          //#line 808 "parse.y"\n          {\n            /* The CURRENT_TIME, CURRENT_DATE, and CURRENT_TIMESTAMP values are\n            ** treated as functions that return constants */\n            yygotominor.yy346.pExpr = sqlite3ExprFunction(pParse, 0, yymsp[0].minor.yy0);\n            if (yygotominor.yy346.pExpr != null)\n            {\n              yygotominor.yy346.pExpr.op = TK_CONST_FUNC;\n            }\n            spanSet(yygotominor.yy346, yymsp[0].minor.yy0, yymsp[0].minor.yy0);\n          }\n          //#line 2936 "parse.c"\n          break;\n        case 199: /* expr ::= expr AND expr */\n        case 200: /* expr ::= expr OR expr */ //yytestcase(yyruleno==200);\n        case 201: /* expr ::= expr LT|GT|GE|LE expr */ //yytestcase(yyruleno==201);\n        case 202: /* expr ::= expr EQ|NE expr */ //yytestcase(yyruleno==202);\n        case 203: /* expr ::= expr BITAND|BITOR|LSHIFT|RSHIFT expr */ //yytestcase(yyruleno==203);\n        case 204: /* expr ::= expr PLUS|MINUS expr */ //yytestcase(yyruleno==204);\n        case 205: /* expr ::= expr STAR|SLASH|REM expr */ //yytestcase(yyruleno==205);\n        case 206: /* expr ::= expr CONCAT expr */ //yytestcase(yyruleno==206);\n          //#line 835 "parse.y"\n          { spanBinaryExpr(yygotominor.yy346, pParse, yymsp[-1].major, yymsp[-2].minor.yy346, yymsp[0].minor.yy346); }\n          //#line 2948 "parse.c"\n          break;\n        case 207: /* likeop ::= LIKE_KW */\n        case 209: /* likeop ::= MATCH */ //yytestcase(yyruleno==209);\n          //#line 848 "parse.y"\n          { yygotominor.yy96.eOperator = yymsp[0].minor.yy0; yygotominor.yy96.not = false; }\n          //#line 2954 "parse.c"\n          break;\n        case 208: /* likeop ::= NOT LIKE_KW */\n        case 210: /* likeop ::= NOT MATCH */ //yytestcase(yyruleno==210);\n          //#line 849 "parse.y"\n          { yygotominor.yy96.eOperator = yymsp[0].minor.yy0; yygotominor.yy96.not = true; }\n          //#line 2960 "parse.c"\n          break;\n        case 212: /* escape ::= */\n          //#line 855 "parse.y"\n          { yygotominor.yy346 = new ExprSpan(); }// memset( yygotominor.yy346, 0, sizeof( yygotominor.yy346 ) ); \n          //#line 2965 "parse.c"\n          break;\n        case 213: /* expr ::= expr likeop expr escape */\n          //#line 856 "parse.y"\n          {\n            ExprList pList;\n            pList = sqlite3ExprListAppend(pParse, 0, yymsp[-1].minor.yy346.pExpr);\n            pList = sqlite3ExprListAppend(pParse, pList, yymsp[-3].minor.yy346.pExpr);\n            if (yymsp[0].minor.yy346.pExpr != null)\n            {\n              pList = sqlite3ExprListAppend(pParse, pList, yymsp[0].minor.yy346.pExpr);\n            }\n            yygotominor.yy346.pExpr = sqlite3ExprFunction(pParse, pList, yymsp[-2].minor.yy96.eOperator);\n            if (yymsp[-2].minor.yy96.not) yygotominor.yy346.pExpr = sqlite3PExpr(pParse, TK_NOT, yygotominor.yy346.pExpr, 0, 0);\n            yygotominor.yy346.zStart = yymsp[-3].minor.yy346.zStart;\n            yygotominor.yy346.zEnd = yymsp[-1].minor.yy346.zEnd;\n            if (yygotominor.yy346.pExpr != null) yygotominor.yy346.pExpr.flags |= EP_InfixFunc;\n          }\n          //#line 2982 "parse.c"\n          break;\n        case 214: /* expr ::= expr ISNULL|NOTNULL */\n          //#line 886 "parse.y"\n          { spanUnaryPostfix(yygotominor.yy346, pParse, yymsp[0].major, yymsp[-1].minor.yy346, yymsp[0].minor.yy0); }\n          //#line 2987 "parse.c"\n          break;\n        case 215: /* expr ::= expr IS NULL */\n          //#line 887 "parse.y"\n          { spanUnaryPostfix(yygotominor.yy346, pParse, TK_ISNULL, yymsp[-2].minor.yy346, yymsp[0].minor.yy0); }\n          //#line 2992 "parse.c"\n          break;\n        case 216: /* expr ::= expr NOT NULL */\n          //#line 888 "parse.y"\n          { spanUnaryPostfix(yygotominor.yy346, pParse, TK_NOTNULL, yymsp[-2].minor.yy346, yymsp[0].minor.yy0); }\n          //#line 2997 "parse.c"\n          break;\n        case 217: /* expr ::= expr IS NOT NULL */\n          //#line 890 "parse.y"\n          { spanUnaryPostfix(yygotominor.yy346, pParse, TK_NOTNULL, yymsp[-3].minor.yy346, yymsp[0].minor.yy0); }\n          //#line 3002 "parse.c"\n          break;\n        case 218: /* expr ::= NOT expr */\n        case 219: /* expr ::= BITNOT expr */ //yytestcase(yyruleno==219);\n          //#line 910 "parse.y"\n          { spanUnaryPrefix(yygotominor.yy346, pParse, yymsp[-1].major, yymsp[0].minor.yy346, yymsp[-1].minor.yy0); }\n          //#line 3008 "parse.c"\n          break;\n        case 220: /* expr ::= MINUS expr */\n          //#line 913 "parse.y"\n          { spanUnaryPrefix(yygotominor.yy346, pParse, TK_UMINUS, yymsp[0].minor.yy346, yymsp[-1].minor.yy0); }\n          //#line 3013 "parse.c"\n          break;\n        case 221: /* expr ::= PLUS expr */\n          //#line 915 "parse.y"\n          { spanUnaryPrefix(yygotominor.yy346, pParse, TK_UPLUS, yymsp[0].minor.yy346, yymsp[-1].minor.yy0); }\n          //#line 3018 "parse.c"\n          break;\n        case 224: /* expr ::= expr between_op expr AND expr */\n          //#line 920 "parse.y"\n          {\n            ExprList pList = sqlite3ExprListAppend(pParse, 0, yymsp[-2].minor.yy346.pExpr);\n            pList = sqlite3ExprListAppend(pParse, pList, yymsp[0].minor.yy346.pExpr);\n            yygotominor.yy346.pExpr = sqlite3PExpr(pParse, TK_BETWEEN, yymsp[-4].minor.yy346.pExpr, 0, 0);\n            if (yygotominor.yy346.pExpr != null)\n            {\n              yygotominor.yy346.pExpr.x.pList = pList;\n            }\n            else\n            {\n              sqlite3ExprListDelete(pParse.db, ref pList);\n            }\n            if (yymsp[-3].minor.yy328 != 0) yygotominor.yy346.pExpr = sqlite3PExpr(pParse, TK_NOT, yygotominor.yy346.pExpr, 0, 0);\n            yygotominor.yy346.zStart = yymsp[-4].minor.yy346.zStart;\n            yygotominor.yy346.zEnd = yymsp[0].minor.yy346.zEnd;\n          }\n          //#line 3035 "parse.c"\n          break;\n        case 227: /* expr ::= expr in_op LP exprlist RP */\n          //#line 937 "parse.y"\n          {\n            yygotominor.yy346.pExpr = sqlite3PExpr(pParse, TK_IN, yymsp[-4].minor.yy346.pExpr, 0, 0);\n            if (yygotominor.yy346.pExpr != null)\n            {\n              yygotominor.yy346.pExpr.x.pList = yymsp[-1].minor.yy14;\n              sqlite3ExprSetHeight(pParse, yygotominor.yy346.pExpr);\n            }\n            else\n            {\n              sqlite3ExprListDelete(pParse.db, ref yymsp[-1].minor.yy14);\n            }\n            if (yymsp[-3].minor.yy328 != 0) yygotominor.yy346.pExpr = sqlite3PExpr(pParse, TK_NOT, yygotominor.yy346.pExpr, 0, 0);\n            yygotominor.yy346.zStart = yymsp[-4].minor.yy346.zStart;\n            yygotominor.yy346.zEnd = yymsp[0].minor.yy0.z.Substring(yymsp[0].minor.yy0.n);\n          }\n          //#line 3051 "parse.c"\n          break;\n        case 228: /* expr ::= LP select RP */\n          //#line 949 "parse.y"\n          {\n            yygotominor.yy346.pExpr = sqlite3PExpr(pParse, TK_SELECT, 0, 0, 0);\n            if (yygotominor.yy346.pExpr != null)\n            {\n              yygotominor.yy346.pExpr.x.pSelect = yymsp[-1].minor.yy3;\n              ExprSetProperty(yygotominor.yy346.pExpr, EP_xIsSelect);\n              sqlite3ExprSetHeight(pParse, yygotominor.yy346.pExpr);\n            }\n            else\n            {\n              sqlite3SelectDelete(pParse.db, ref yymsp[-1].minor.yy3);\n            }\n            yygotominor.yy346.zStart = yymsp[-2].minor.yy0.z;\n            yygotominor.yy346.zEnd = yymsp[0].minor.yy0.z.Substring(yymsp[0].minor.yy0.n);\n          }\n          //#line 3067 "parse.c"\n          break;\n        case 229: /* expr ::= expr in_op LP select RP */\n          //#line 961 "parse.y"\n          {\n            yygotominor.yy346.pExpr = sqlite3PExpr(pParse, TK_IN, yymsp[-4].minor.yy346.pExpr, 0, 0);\n            if (yygotominor.yy346.pExpr != null)\n            {\n              yygotominor.yy346.pExpr.x.pSelect = yymsp[-1].minor.yy3;\n              ExprSetProperty(yygotominor.yy346.pExpr, EP_xIsSelect);\n              sqlite3ExprSetHeight(pParse, yygotominor.yy346.pExpr);\n            }\n            else\n            {\n              sqlite3SelectDelete(pParse.db, ref yymsp[-1].minor.yy3);\n            }\n            if (yymsp[-3].minor.yy328 != 0) yygotominor.yy346.pExpr = sqlite3PExpr(pParse, TK_NOT, yygotominor.yy346.pExpr, 0, 0);\n            yygotominor.yy346.zStart = yymsp[-4].minor.yy346.zStart;\n            yygotominor.yy346.zEnd = yymsp[0].minor.yy0.z.Substring(yymsp[0].minor.yy0.n);\n          }\n          //#line 3084 "parse.c"\n          break;\n        case 230: /* expr ::= expr in_op nm dbnm */\n          //#line 974 "parse.y"\n          {\n            SrcList pSrc = sqlite3SrcListAppend(pParse.db, 0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0);\n            yygotominor.yy346.pExpr = sqlite3PExpr(pParse, TK_IN, yymsp[-3].minor.yy346.pExpr, 0, 0);\n            if (yygotominor.yy346.pExpr != null)\n            {\n              yygotominor.yy346.pExpr.x.pSelect = sqlite3SelectNew(pParse, 0, pSrc, 0, 0, 0, 0, 0, 0, 0);\n              ExprSetProperty(yygotominor.yy346.pExpr, EP_xIsSelect);\n              sqlite3ExprSetHeight(pParse, yygotominor.yy346.pExpr);\n            }\n            else\n            {\n              sqlite3SrcListDelete(pParse.db, ref pSrc);\n            }\n            if (yymsp[-2].minor.yy328 != 0) yygotominor.yy346.pExpr = sqlite3PExpr(pParse, TK_NOT, yygotominor.yy346.pExpr, 0, 0);\n            yygotominor.yy346.zStart = yymsp[-3].minor.yy346.zStart;\n            yygotominor.yy346.zEnd = yymsp[0].minor.yy0.z != null ? yymsp[0].minor.yy0.z.Substring(yymsp[0].minor.yy0.n) : yymsp[-1].minor.yy0.z.Substring(yymsp[-1].minor.yy0.n);\n          }\n          //#line 3102 "parse.c"\n          break;\n        case 231: /* expr ::= EXISTS LP select RP */\n          //#line 988 "parse.y"\n          {\n            Expr p = yygotominor.yy346.pExpr = sqlite3PExpr(pParse, TK_EXISTS, 0, 0, 0);\n            if (p != null)\n            {\n              p.x.pSelect = yymsp[-1].minor.yy3;\n              ExprSetProperty(p, EP_xIsSelect);\n              sqlite3ExprSetHeight(pParse, p);\n            }\n            else\n            {\n              sqlite3SelectDelete(pParse.db, ref yymsp[-1].minor.yy3);\n            }\n            yygotominor.yy346.zStart = yymsp[-3].minor.yy0.z;\n            yygotominor.yy346.zEnd = yymsp[0].minor.yy0.z.Substring(yymsp[0].minor.yy0.n);\n          }\n          //#line 3118 "parse.c"\n          break;\n        case 232: /* expr ::= CASE case_operand case_exprlist case_else END */\n          //#line 1003 "parse.y"\n          {\n            yygotominor.yy346.pExpr = sqlite3PExpr(pParse, TK_CASE, yymsp[-3].minor.yy132, yymsp[-1].minor.yy132, 0);\n            if (yygotominor.yy346.pExpr != null)\n            {\n              yygotominor.yy346.pExpr.x.pList = yymsp[-2].minor.yy14;\n              sqlite3ExprSetHeight(pParse, yygotominor.yy346.pExpr);\n            }\n            else\n            {\n              sqlite3ExprListDelete(pParse.db, ref yymsp[-2].minor.yy14);\n            }\n            yygotominor.yy346.zStart = yymsp[-4].minor.yy0.z;\n            yygotominor.yy346.zEnd = yymsp[0].minor.yy0.z.Substring(yymsp[0].minor.yy0.n);\n          }\n          //#line 3133 "parse.c"\n          break;\n        case 233: /* case_exprlist ::= case_exprlist WHEN expr THEN expr */\n          //#line 1016 "parse.y"\n          {\n            yygotominor.yy14 = sqlite3ExprListAppend(pParse, yymsp[-4].minor.yy14, yymsp[-2].minor.yy346.pExpr);\n            yygotominor.yy14 = sqlite3ExprListAppend(pParse, yygotominor.yy14, yymsp[0].minor.yy346.pExpr);\n          }\n          //#line 3141 "parse.c"\n          break;\n        case 234: /* case_exprlist ::= WHEN expr THEN expr */\n          //#line 1020 "parse.y"\n          {\n            yygotominor.yy14 = sqlite3ExprListAppend(pParse, 0, yymsp[-2].minor.yy346.pExpr);\n            yygotominor.yy14 = sqlite3ExprListAppend(pParse, yygotominor.yy14, yymsp[0].minor.yy346.pExpr);\n          }\n          //#line 3149 "parse.c"\n          break;\n        case 243: /* cmd ::= createkw uniqueflag INDEX ifnotexists nm dbnm ON nm LP idxlist RP */\n          //#line 1049 "parse.y"\n          {\n            sqlite3CreateIndex(pParse, yymsp[-6].minor.yy0, yymsp[-5].minor.yy0,\n            sqlite3SrcListAppend(pParse.db, 0, yymsp[-3].minor.yy0, 0), yymsp[-1].minor.yy14, yymsp[-9].minor.yy328,\n            yymsp[-10].minor.yy0, yymsp[0].minor.yy0, SQLITE_SO_ASC, yymsp[-7].minor.yy328);\n          }\n          //#line 3158 "parse.c"\n          break;\n        case 244: /* uniqueflag ::= UNIQUE */\n        case 298: /* raisetype ::= ABORT */ //yytestcase(yyruleno==298);\n          //#line 1056 "parse.y"\n          { yygotominor.yy328 = OE_Abort; }\n          //#line 3164 "parse.c"\n          break;\n        case 245: /* uniqueflag ::= */\n          //#line 1057 "parse.y"\n          { yygotominor.yy328 = OE_None; }\n          //#line 3169 "parse.c"\n          break;\n        case 248: /* idxlist ::= idxlist COMMA nm collate sortorder */\n          //#line 1066 "parse.y"\n          {\n            Expr p = null;\n            if (yymsp[-1].minor.yy0.n > 0)\n            {\n              p = sqlite3Expr(pParse.db, TK_COLUMN, null);\n              sqlite3ExprSetColl(pParse, p, yymsp[-1].minor.yy0);\n            }\n            yygotominor.yy14 = sqlite3ExprListAppend(pParse, yymsp[-4].minor.yy14, p);\n            sqlite3ExprListSetName(pParse, yygotominor.yy14, yymsp[-2].minor.yy0, 1);\n            sqlite3ExprListCheckLength(pParse, yygotominor.yy14, "index");\n            if (yygotominor.yy14 != null) yygotominor.yy14.a[yygotominor.yy14.nExpr - 1].sortOrder = (u8)yymsp[0].minor.yy328;\n          }\n          //#line 3184 "parse.c"\n          break;\n        case 249: /* idxlist ::= nm collate sortorder */\n          //#line 1077 "parse.y"\n          {\n            Expr p = null;\n            if (yymsp[-1].minor.yy0.n > 0)\n            {\n              p = sqlite3PExpr(pParse, TK_COLUMN, 0, 0, 0);\n              sqlite3ExprSetColl(pParse, p, yymsp[-1].minor.yy0);\n            }\n            yygotominor.yy14 = sqlite3ExprListAppend(pParse, 0, p);\n            sqlite3ExprListSetName(pParse, yygotominor.yy14, yymsp[-2].minor.yy0, 1);\n            sqlite3ExprListCheckLength(pParse, yygotominor.yy14, "index");\n            if (yygotominor.yy14 != null) yygotominor.yy14.a[yygotominor.yy14.nExpr - 1].sortOrder = (u8)yymsp[0].minor.yy328;\n          }\n          //#line 3199 "parse.c"\n          break;\n        case 250: /* collate ::= */\n          //#line 1090 "parse.y"\n          { yygotominor.yy0.z = null; yygotominor.yy0.n = 0; }\n          //#line 3204 "parse.c"\n          break;\n        case 252: /* cmd ::= DROP INDEX ifexists fullname */\n          //#line 1096 "parse.y"\n          { sqlite3DropIndex(pParse, yymsp[0].minor.yy65, yymsp[-1].minor.yy328); }\n          //#line 3209 "parse.c"\n          break;\n        case 253: /* cmd ::= VACUUM */\n        case 254: /* cmd ::= VACUUM nm */ //yytestcase(yyruleno==254);\n          //#line 1102 "parse.y"\n          { sqlite3Vacuum(pParse); }\n          //#line 3215 "parse.c"\n          break;\n        case 255: /* cmd ::= PRAGMA nm dbnm */\n          //#line 1110 "parse.y"\n          { sqlite3Pragma(pParse, yymsp[-1].minor.yy0, yymsp[0].minor.yy0, 0, 0); }\n          //#line 3220 "parse.c"\n          break;\n        case 256: /* cmd ::= PRAGMA nm dbnm EQ nmnum */\n          //#line 1111 "parse.y"\n          { sqlite3Pragma(pParse, yymsp[-3].minor.yy0, yymsp[-2].minor.yy0, yymsp[0].minor.yy0, 0); }\n          //#line 3225 "parse.c"\n          break;\n        case 257: /* cmd ::= PRAGMA nm dbnm LP nmnum RP */\n          //#line 1112 "parse.y"\n          { sqlite3Pragma(pParse, yymsp[-4].minor.yy0, yymsp[-3].minor.yy0, yymsp[-1].minor.yy0, 0); }\n          //#line 3230 "parse.c"\n          break;\n        case 258: /* cmd ::= PRAGMA nm dbnm EQ minus_num */\n          //#line 1114 "parse.y"\n          { sqlite3Pragma(pParse, yymsp[-3].minor.yy0, yymsp[-2].minor.yy0, yymsp[0].minor.yy0, 1); }\n          //#line 3235 "parse.c"\n          break;\n        case 259: /* cmd ::= PRAGMA nm dbnm LP minus_num RP */\n          //#line 1116 "parse.y"\n          { sqlite3Pragma(pParse, yymsp[-4].minor.yy0, yymsp[-3].minor.yy0, yymsp[-1].minor.yy0, 1); }\n          //#line 3240 "parse.c"\n          break;\n        case 270: /* cmd ::= createkw trigger_decl BEGIN trigger_cmd_list END */\n          //#line 1134 "parse.y"\n          {\n            Token all = new Token();\n            //all.z = yymsp[-3].minor.yy0.z;\n            //all.n = (int)(yymsp[0].minor.yy0.z - yymsp[-3].minor.yy0.z) + yymsp[0].minor.yy0.n;\n            all.n = (int)(yymsp[-3].minor.yy0.z.Length - yymsp[0].minor.yy0.z.Length) + yymsp[0].minor.yy0.n;\n            all.z = yymsp[-3].minor.yy0.z.Substring(0, all.n);\n            sqlite3FinishTrigger(pParse, yymsp[-1].minor.yy473, all);\n          }\n          //#line 3250 "parse.c"\n          break;\n        case 271: /* trigger_decl ::= temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON fullname foreach_clause when_clause */\n          //#line 1143 "parse.y"\n          {\n            sqlite3BeginTrigger(pParse, yymsp[-7].minor.yy0, yymsp[-6].minor.yy0, yymsp[-5].minor.yy328, yymsp[-4].minor.yy378.a, yymsp[-4].minor.yy378.b, yymsp[-2].minor.yy65, yymsp[0].minor.yy132, yymsp[-10].minor.yy328, yymsp[-8].minor.yy328);\n            yygotominor.yy0 = (yymsp[-6].minor.yy0.n == 0 ? yymsp[-7].minor.yy0 : yymsp[-6].minor.yy0);\n          }\n          //#line 3258 "parse.c"\n          break;\n        case 272: /* trigger_time ::= BEFORE */\n        case 275: /* trigger_time ::= */ //yytestcase(yyruleno==275);\n          //#line 1149 "parse.y"\n          { yygotominor.yy328 = TK_BEFORE; }\n          //#line 3264 "parse.c"\n          break;\n        case 273: /* trigger_time ::= AFTER */\n          //#line 1150 "parse.y"\n          { yygotominor.yy328 = TK_AFTER; }\n          //#line 3269 "parse.c"\n          break;\n        case 274: /* trigger_time ::= INSTEAD OF */\n          //#line 1151 "parse.y"\n          { yygotominor.yy328 = TK_INSTEAD; }\n          //#line 3274 "parse.c"\n          break;\n        case 276: /* trigger_event ::= DELETE|INSERT */\n        case 277: /* trigger_event ::= UPDATE */ //yytestcase(yyruleno==277);\n          //#line 1156 "parse.y"\n          { yygotominor.yy378.a = yymsp[0].major; yygotominor.yy378.b = null; }\n          //#line 3280 "parse.c"\n          break;\n        case 278: /* trigger_event ::= UPDATE OF inscollist */\n          //#line 1158 "parse.y"\n          { yygotominor.yy378.a = TK_UPDATE; yygotominor.yy378.b = yymsp[0].minor.yy408; }\n          //#line 3285 "parse.c"\n          break;\n        case 281: /* when_clause ::= */\n        case 303: /* key_opt ::= */ //yytestcase(yyruleno==303);\n          //#line 1165 "parse.y"\n          { yygotominor.yy132 = null; }\n          //#line 3291 "parse.c"\n          break;\n        case 282: /* when_clause ::= WHEN expr */\n        case 304: /* key_opt ::= KEY expr */ //yytestcase(yyruleno==304);\n          //#line 1166 "parse.y"\n          { yygotominor.yy132 = yymsp[0].minor.yy346.pExpr; }\n          //#line 3297 "parse.c"\n          break;\n        case 283: /* trigger_cmd_list ::= trigger_cmd_list trigger_cmd SEMI */\n          //#line 1170 "parse.y"\n          {\n            Debug.Assert(yymsp[-2].minor.yy473 != null);\n            yymsp[-2].minor.yy473.pLast.pNext = yymsp[-1].minor.yy473;\n            yymsp[-2].minor.yy473.pLast = yymsp[-1].minor.yy473;\n            yygotominor.yy473 = yymsp[-2].minor.yy473;\n          }\n          //#line 3307 "parse.c"\n          break;\n        case 284: /* trigger_cmd_list ::= trigger_cmd SEMI */\n          //#line 1176 "parse.y"\n          {\n            Debug.Assert(yymsp[-1].minor.yy473 != null);\n            yymsp[-1].minor.yy473.pLast = yymsp[-1].minor.yy473;\n            yygotominor.yy473 = yymsp[-1].minor.yy473;\n          }\n          //#line 3316 "parse.c"\n          break;\n        case 286: /* trnm ::= nm DOT nm */\n          //#line 1188 "parse.y"\n          {\n            yygotominor.yy0 = yymsp[0].minor.yy0;\n            sqlite3ErrorMsg(pParse,\n            "qualified table names are not allowed on INSERT, UPDATE, and DELETE " +\n            "statements within triggers");\n          }\n          //#line 3326 "parse.c"\n          break;\n        case 288: /* tridxby ::= INDEXED BY nm */\n          //#line 1200 "parse.y"\n          {\n            sqlite3ErrorMsg(pParse,\n            "the INDEXED BY clause is not allowed on UPDATE or DELETE statements " +\n            "within triggers");\n          }\n          //#line 3335 "parse.c"\n          break;\n        case 289: /* tridxby ::= NOT INDEXED */\n          //#line 1205 "parse.y"\n          {\n            sqlite3ErrorMsg(pParse,\n            "the NOT INDEXED clause is not allowed on UPDATE or DELETE statements " +\n            "within triggers");\n          }\n          //#line 3344 "parse.c"\n          break;\n        case 290: /* trigger_cmd ::= UPDATE orconf trnm tridxby SET setlist where_opt */\n          //#line 1218 "parse.y"\n          { yygotominor.yy473 = sqlite3TriggerUpdateStep(pParse.db, yymsp[-4].minor.yy0, yymsp[-1].minor.yy14, yymsp[0].minor.yy132, yymsp[-5].minor.yy186); }\n          //#line 3349 "parse.c"\n          break;\n        case 291: /* trigger_cmd ::= insert_cmd INTO trnm inscollist_opt VALUES LP itemlist RP */\n          //#line 1223 "parse.y"\n          { yygotominor.yy473 = sqlite3TriggerInsertStep(pParse.db, yymsp[-5].minor.yy0, yymsp[-4].minor.yy408, yymsp[-1].minor.yy14, 0, yymsp[-7].minor.yy186); }\n          //#line 3354 "parse.c"\n          break;\n        case 292: /* trigger_cmd ::= insert_cmd INTO trnm inscollist_opt select */\n          //#line 1226 "parse.y"\n          { yygotominor.yy473 = sqlite3TriggerInsertStep(pParse.db, yymsp[-2].minor.yy0, yymsp[-1].minor.yy408, 0, yymsp[0].minor.yy3, yymsp[-4].minor.yy186); }\n          //#line 3359 "parse.c"\n          break;\n        case 293: /* trigger_cmd ::= DELETE FROM trnm tridxby where_opt */\n          //#line 1230 "parse.y"\n          { yygotominor.yy473 = sqlite3TriggerDeleteStep(pParse.db, yymsp[-2].minor.yy0, yymsp[0].minor.yy132); }\n          //#line 3364 "parse.c"\n          break;\n        case 294: /* trigger_cmd ::= select */\n          //#line 1233 "parse.y"\n          { yygotominor.yy473 = sqlite3TriggerSelectStep(pParse.db, yymsp[0].minor.yy3); }\n          //#line 3369 "parse.c"\n          break;\n        case 295: /* expr ::= RAISE LP IGNORE RP */\n          //#line 1236 "parse.y"\n          {\n            yygotominor.yy346.pExpr = sqlite3PExpr(pParse, TK_RAISE, 0, 0, 0);\n            if (yygotominor.yy346.pExpr != null)\n            {\n              yygotominor.yy346.pExpr.affinity = (char)OE_Ignore;\n            }\n            yygotominor.yy346.zStart = yymsp[-3].minor.yy0.z;\n            yygotominor.yy346.zEnd = yymsp[0].minor.yy0.z.Substring(yymsp[0].minor.yy0.n);\n          }\n          //#line 3381 "parse.c"\n          break;\n        case 296: /* expr ::= RAISE LP raisetype COMMA nm RP */\n          //#line 1244 "parse.y"\n          {\n            yygotominor.yy346.pExpr = sqlite3PExpr(pParse, TK_RAISE, 0, 0, yymsp[-1].minor.yy0);\n            if (yygotominor.yy346.pExpr != null)\n            {\n              yygotominor.yy346.pExpr.affinity = (char)yymsp[-3].minor.yy328;\n            }\n            yygotominor.yy346.zStart = yymsp[-5].minor.yy0.z;\n            yygotominor.yy346.zEnd = yymsp[0].minor.yy0.z.Substring(yymsp[0].minor.yy0.n);\n          }\n          //#line 3393 "parse.c"\n          break;\n        case 297: /* raisetype ::= ROLLBACK */\n          //#line 1255 "parse.y"\n          { yygotominor.yy328 = OE_Rollback; }\n          //#line 3398 "parse.c"\n          break;\n        case 299: /* raisetype ::= FAIL */\n          //#line 1257 "parse.y"\n          { yygotominor.yy328 = OE_Fail; }\n          //#line 3403 "parse.c"\n          break;\n        case 300: /* cmd ::= DROP TRIGGER ifexists fullname */\n          //#line 1262 "parse.y"\n          {\n            sqlite3DropTrigger(pParse, yymsp[0].minor.yy65, yymsp[-1].minor.yy328);\n          }\n          //#line 3410 "parse.c"\n          break;\n        case 301: /* cmd ::= ATTACH database_kw_opt expr AS expr key_opt */\n          //#line 1269 "parse.y"\n          {\n            sqlite3Attach(pParse, yymsp[-3].minor.yy346.pExpr, yymsp[-1].minor.yy346.pExpr, yymsp[0].minor.yy132);\n          }\n          //#line 3417 "parse.c"\n          break;\n        case 302: /* cmd ::= DETACH database_kw_opt expr */\n          //#line 1272 "parse.y"\n          {\n            sqlite3Detach(pParse, yymsp[0].minor.yy346.pExpr);\n          }\n          //#line 3424 "parse.c"\n          break;\n        case 307: /* cmd ::= REINDEX */\n          //#line 1287 "parse.y"\n          { sqlite3Reindex(pParse, 0, 0); }\n          //#line 3429 "parse.c"\n          break;\n        case 308: /* cmd ::= REINDEX nm dbnm */\n          //#line 1288 "parse.y"\n          { sqlite3Reindex(pParse, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }\n          //#line 3434 "parse.c"\n          break;\n        case 309: /* cmd ::= ANALYZE */\n          //#line 1293 "parse.y"\n          { sqlite3Analyze(pParse, 0, 0); }\n          //#line 3439 "parse.c"\n          break;\n        case 310: /* cmd ::= ANALYZE nm dbnm */\n          //#line 1294 "parse.y"\n          { sqlite3Analyze(pParse, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }\n          //#line 3444 "parse.c"\n          break;\n        case 311: /* cmd ::= ALTER TABLE fullname RENAME TO nm */\n          //#line 1299 "parse.y"\n          {\n            sqlite3AlterRenameTable(pParse, yymsp[-3].minor.yy65, yymsp[0].minor.yy0);\n          }\n          //#line 3451 "parse.c"\n          break;\n        case 312: /* cmd ::= ALTER TABLE add_column_fullname ADD kwcolumn_opt column */\n          //#line 1302 "parse.y"\n          {\n            sqlite3AlterFinishAddColumn(pParse, yymsp[0].minor.yy0);\n          }\n          //#line 3458 "parse.c"\n          break;\n        case 313: /* add_column_fullname ::= fullname */\n          //#line 1305 "parse.y"\n          {\n            pParse.db.lookaside.bEnabled = 0;\n            sqlite3AlterBeginAddColumn(pParse, yymsp[0].minor.yy65);\n          }\n          //#line 3466 "parse.c"\n          break;\n        case 316: /* cmd ::= create_vtab */\n          //#line 1315 "parse.y"\n          { sqlite3VtabFinishParse(pParse, 0); }\n          //#line 3471 "parse.c"\n          break;\n        case 317: /* cmd ::= create_vtab LP vtabarglist RP */\n          //#line 1316 "parse.y"\n          { sqlite3VtabFinishParse(pParse, yymsp[0].minor.yy0); }\n          //#line 3476 "parse.c"\n          break;\n        case 318: /* create_vtab ::= createkw VIRTUAL TABLE nm dbnm USING nm */\n          //#line 1317 "parse.y"\n          {\n            sqlite3VtabBeginParse(pParse, yymsp[-3].minor.yy0, yymsp[-2].minor.yy0, yymsp[0].minor.yy0);\n          }\n          //#line 3483 "parse.c"\n          break;\n        case 321: /* vtabarg ::= */\n          //#line 1322 "parse.y"\n          { sqlite3VtabArgInit(pParse); }\n          //#line 3488 "parse.c"\n          break;\n        case 323: /* vtabargtoken ::= ANY */\n        case 324: /* vtabargtoken ::= lp anylist RP */ //yytestcase(yyruleno==324);\n        case 325: /* lp ::= LP */ //yytestcase(yyruleno==325);\n          //#line 1324 "parse.y"\n          { sqlite3VtabArgExtend(pParse, yymsp[0].minor.yy0); }\n          //#line 3495 "parse.c"\n          break;\n        default:\n          /* (0) input ::= cmdlist */\n          //yytestcase(yyruleno==0);\n          /* (1) cmdlist ::= cmdlist ecmd */\n          //yytestcase(yyruleno==1);\n          /* (2) cmdlist ::= ecmd */\n          //yytestcase(yyruleno==2);\n          /* (3) ecmd ::= SEMI */\n          //yytestcase(yyruleno==3);\n          /* (4) ecmd ::= explain cmdx SEMI */\n          //yytestcase(yyruleno==4);\n          /* (10) trans_opt ::= */\n          //yytestcase(yyruleno==10);\n          /* (11) trans_opt ::= TRANSACTION */\n          //yytestcase(yyruleno==11);\n          /* (12) trans_opt ::= TRANSACTION nm */\n          //yytestcase(yyruleno==12);\n          /* (20) savepoint_opt ::= SAVEPOINT */\n          //yytestcase(yyruleno==20);\n          /* (21) savepoint_opt ::= */\n          //yytestcase(yyruleno==21);\n          /* (25) cmd ::= create_table create_table_args */\n          //yytestcase(yyruleno==25);\n          /* (34) columnlist ::= columnlist COMMA column */\n          //yytestcase(yyruleno==34);\n          /* (35) columnlist ::= column */\n          //yytestcase(yyruleno==35);\n          /* (44) type ::= */\n          //yytestcase(yyruleno==44);\n          /* (51) signed ::= plus_num */\n          //yytestcase(yyruleno==51);\n          /* (52) signed ::= minus_num */\n          //yytestcase(yyruleno==52);\n          /* (53) carglist ::= carglist carg */\n          //yytestcase(yyruleno==53);\n          /* (54) carglist ::= */\n          //yytestcase(yyruleno==54);\n          /* (55) carg ::= CONSTRAINT nm ccons */\n          //yytestcase(yyruleno==55);\n          /* (56) carg ::= ccons */\n          //yytestcase(yyruleno==56);\n          /* (62) ccons ::= NULL onconf */\n          //yytestcase(yyruleno==62);\n          /* (89) conslist ::= conslist COMMA tcons */\n          //yytestcase(yyruleno==89);\n          /* (90) conslist ::= conslist tcons */\n          //yytestcase(yyruleno==90);\n          /* (91) conslist ::= tcons */\n          //yytestcase(yyruleno==91);\n          /* (92) tcons ::= CONSTRAINT nm */\n          //yytestcase(yyruleno==92);\n          /* (268) plus_opt ::= PLUS */\n          //yytestcase(yyruleno==268);\n          /* (269) plus_opt ::= */\n          //yytestcase(yyruleno==269);\n          /* (279) foreach_clause ::= */\n          //yytestcase(yyruleno==279);\n          /* (280) foreach_clause ::= FOR EACH ROW */\n          //yytestcase(yyruleno==280);\n          /* (287) tridxby ::= */\n          //yytestcase(yyruleno==287);\n          /* (305) database_kw_opt ::= DATABASE */\n          //yytestcase(yyruleno==305);\n          /* (306) database_kw_opt ::= */\n          //yytestcase(yyruleno==306);\n          /* (314) kwcolumn_opt ::= */\n          //yytestcase(yyruleno==314);\n          /* (315) kwcolumn_opt ::= COLUMNKW */\n          //yytestcase(yyruleno==315);\n          /* (319) vtabarglist ::= vtabarg */\n          //yytestcase(yyruleno==319);\n          /* (320) vtabarglist ::= vtabarglist COMMA vtabarg */\n          //yytestcase(yyruleno==320);\n          /* (322) vtabarg ::= vtabarg vtabargtoken */\n          //yytestcase(yyruleno==322);\n          /* (326) anylist ::= */\n          //yytestcase(yyruleno==326);\n          /* (327) anylist ::= anylist LP anylist RP */\n          //yytestcase(yyruleno==327);\n          /* (328) anylist ::= anylist ANY */\n          //yytestcase(yyruleno==328);\n          break;\n      };\n      yygoto = yyRuleInfo[yyruleno].lhs;\n      yysize = yyRuleInfo[yyruleno].nrhs;\n      yypParser.yyidx -= yysize;\n      yyact = yy_find_reduce_action(yymsp[-yysize].stateno, (YYCODETYPE)yygoto);\n      if (yyact < YYNSTATE)\n      {\n#if NDEBUG\n/* If we are not debugging and the reduce action popped at least\n** one element off the stack, then we can push the new element back\n** onto the stack here, and skip the stack overflow test in yy_shift().\n** That gives a significant speed improvement. */\nif( yysize!=0 ){\nyypParser.yyidx++;\nyymsp._yyidx -= yysize - 1;\nyymsp[0].stateno = (YYACTIONTYPE)yyact;\nyymsp[0].major = (YYCODETYPE)yygoto;\nyymsp[0].minor = yygotominor;\n}else\n#endif\n        {\n          yy_shift(yypParser, yyact, yygoto, yygotominor);\n        }\n      }\n      else\n      {\n        Debug.Assert(yyact == YYNSTATE + YYNRULE + 1);\n        yy_accept(yypParser);\n      }\n    }\n\n    /*\n    ** The following code executes when the parse fails\n    */\n#if !YYNOERRORRECOVERY\n    static void yy_parse_failed(\n    yyParser yypParser           /* The parser */\n    )\n    {\n      Parse pParse = yypParser.pParse; //       sqlite3ParserARG_FETCH;\n#if !NDEBUG\n      if (yyTraceFILE != null)\n      {\n        Debugger.Break(); // TODO --        fprintf(yyTraceFILE, "%sFail!\\n", yyTracePrompt);\n      }\n#endif\n      while (yypParser.yyidx >= 0) yy_pop_parser_stack(yypParser);\n      /* Here code is inserted which will be executed whenever the\n      ** parser fails */\n      yypParser.pParse = pParse;//      sqlite3ParserARG_STORE; /* Suppress warning about unused %extra_argument variable */\n    }\n#endif //* YYNOERRORRECOVERY */\n\n    /*\n** The following code executes when a syntax error first occurs.\n*/\n    static void yy_syntax_error(\n    yyParser yypParser,           /* The parser */\n    int yymajor,                   /* The major type of the error token */\n    YYMINORTYPE yyminor            /* The minor type of the error token */\n    )\n    {\n      Parse pParse = yypParser.pParse; //       sqlite3ParserARG_FETCH;\n      //#define TOKEN (yyminor.yy0)\n      //#line 34 "parse.y"\n\n      UNUSED_PARAMETER(yymajor);  /* Silence some compiler warnings */\n      Debug.Assert(yyminor.yy0.z.Length > 0); //TOKEN.z[0]);  /* The tokenizer always gives us a token */\n      sqlite3ErrorMsg(pParse, "near \\"%T\\": syntax error", yyminor.yy0);//&TOKEN);\n      pParse.parseError = 1;\n      //#line 3603 "parse.c"\n      yypParser.pParse = pParse; // sqlite3ParserARG_STORE; /* Suppress warning about unused %extra_argument variable */\n    }\n\n    /*\n    ** The following is executed when the parser accepts\n    */\n    static void yy_accept(\n    yyParser yypParser           /* The parser */\n    )\n    {\n      Parse pParse = yypParser.pParse; //       sqlite3ParserARG_FETCH;\n#if !NDEBUG\n      if (yyTraceFILE != null)\n      {\n        fprintf(yyTraceFILE, "%sAccept!\\n", yyTracePrompt);\n      }\n#endif\n      while (yypParser.yyidx >= 0) yy_pop_parser_stack(yypParser);\n      /* Here code is inserted which will be executed whenever the\n      ** parser accepts */\n      yypParser.pParse = pParse;//      sqlite3ParserARG_STORE; /* Suppress warning about unused %extra_argument variable */\n    }\n\n    /* The main parser program.\n    ** The first argument is a pointer to a structure obtained from\n    ** "sqlite3ParserAlloc" which describes the current state of the parser.\n    ** The second argument is the major token number.  The third is\n    ** the minor token.  The fourth optional argument is whatever the\n    ** user wants (and specified in the grammar) and is available for\n    ** use by the action routines.\n    **\n    ** Inputs:\n    ** <ul>\n    ** <li> A pointer to the parser (an opaque structure.)\n    ** <li> The major token number.\n    ** <li> The minor token number.\n    ** <li> An option argument of a grammar-specified type.\n    ** </ul>\n    **\n    ** Outputs:\n    ** None.\n    */\n    static void sqlite3Parser(\n    yyParser yyp,                   /* The parser */\n    int yymajor,                     /* The major token code number */\n    sqlite3ParserTOKENTYPE yyminor  /* The value for the token */\n    , Parse pParse //sqlite3ParserARG_PDECL           /* Optional %extra_argument parameter */\n    )\n    {\n      YYMINORTYPE yyminorunion = new YYMINORTYPE();\n      int yyact;            /* The parser action. */\n      bool yyendofinput;     /* True if we are at the end of input */\n#if YYERRORSYMBOL\nint yyerrorhit = 0;   /* True if yymajor has invoked an error */\n#endif\n      yyParser yypParser;  /* The parser */\n\n      /* (re)initialize the parser, if necessary */\n      yypParser = yyp;\n      if (yypParser.yyidx < 0)\n      {\n#if YYSTACKDEPTH//<=0\nif( yypParser.yystksz <=0 ){\nmemset(yyminorunion, 0, yyminorunion).Length;\nyyStackOverflow(yypParser, yyminorunion);\nreturn;\n}\n#endif\n        yypParser.yyidx = 0;\n        yypParser.yyerrcnt = -1;\n        yypParser.yystack[0] = new yyStackEntry();\n        yypParser.yystack[0].stateno = 0;\n        yypParser.yystack[0].major = 0;\n      }\n      yyminorunion.yy0 = yyminor.Copy();\n      yyendofinput = (yymajor == 0);\n      yypParser.pParse = pParse;//      sqlite3ParserARG_STORE;\n\n#if !NDEBUG\n      if (yyTraceFILE != null)\n      {\n        fprintf(yyTraceFILE, "%sInput %s\\n", yyTracePrompt, yyTokenName[yymajor]);\n      }\n#endif\n\n      do\n      {\n        yyact = yy_find_shift_action(yypParser, (YYCODETYPE)yymajor);\n        if (yyact < YYNSTATE)\n        {\n          Debug.Assert(!yyendofinput);  /* Impossible to shift the $ token */\n          yy_shift(yypParser, yyact, yymajor, yyminorunion);\n          yypParser.yyerrcnt--;\n          yymajor = YYNOCODE;\n        }\n        else if (yyact < YYNSTATE + YYNRULE)\n        {\n          yy_reduce(yypParser, yyact - YYNSTATE);\n        }\n        else\n        {\n          Debug.Assert(yyact == YY_ERROR_ACTION);\n#if YYERRORSYMBOL\nint yymx;\n#endif\n#if !NDEBUG\n          if (yyTraceFILE != null)\n          {\n            Debugger.Break(); // TODO --            fprintf(yyTraceFILE, "%sSyntax Error!\\n", yyTracePrompt);\n          }\n#endif\n#if YYERRORSYMBOL\n/* A syntax error has occurred.\n** The response to an error depends upon whether or not the\n** grammar defines an error token "ERROR".\n**\n** This is what we do if the grammar does define ERROR:\n**\n**  * Call the %syntax_error function.\n**\n**  * Begin popping the stack until we enter a state where\n**    it is legal to shift the error symbol, then shift\n**    the error symbol.\n**\n**  * Set the error count to three.\n**\n**  * Begin accepting and shifting new tokens.  No new error\n**    processing will occur until three tokens have been\n**    shifted successfully.\n**\n*/\nif( yypParser.yyerrcnt<0 ){\nyy_syntax_error(yypParser,yymajor,yyminorunion);\n}\nyymx = yypParser.yystack[yypParser.yyidx].major;\nif( yymx==YYERRORSYMBOL || yyerrorhit ){\n#if !NDEBUG\nif( yyTraceFILE ){\nDebug.Assert(false); // TODO --                      fprintf(yyTraceFILE,"%sDiscard input token %s\\n",\nyyTracePrompt,yyTokenName[yymajor]);\n}\n#endif\nyy_destructor(yypParser,(YYCODETYPE)yymajor,yyminorunion);\nyymajor = YYNOCODE;\n}else{\nwhile(\nyypParser.yyidx >= 0 &&\nyymx != YYERRORSYMBOL &&\n(yyact = yy_find_reduce_action(\nyypParser.yystack[yypParser.yyidx].stateno,\nYYERRORSYMBOL)) >= YYNSTATE\n){\nyy_pop_parser_stack(yypParser);\n}\nif( yypParser.yyidx < 0 || yymajor==0 ){\nyy_destructor(yypParser, (YYCODETYPE)yymajor,yyminorunion);\nyy_parse_failed(yypParser);\nyymajor = YYNOCODE;\n}else if( yymx!=YYERRORSYMBOL ){\nYYMINORTYPE u2;\nu2.YYERRSYMDT = 0;\nyy_shift(yypParser,yyact,YYERRORSYMBOL,u2);\n}\n}\nyypParser.yyerrcnt = 3;\nyyerrorhit = 1;\n#elif (YYNOERRORRECOVERY)\n/* If the YYNOERRORRECOVERY macro is defined, then do not attempt to\n** do any kind of error recovery.  Instead, simply invoke the syntax\n** error routine and continue going as if nothing had happened.\n**\n** Applications can set this macro (for example inside %include) if\n** they intend to abandon the parse upon the first syntax error seen.\n*/\nyy_syntax_error(yypParser,yymajor,yyminorunion);\nyy_destructor(yypParser,(YYCODETYPE)yymajor,yyminorunion);\nyymajor = YYNOCODE;\n#else  // * YYERRORSYMBOL is not defined */\n          /* This is what we do if the grammar does not define ERROR:\n**\n**  * Report an error message, and throw away the input token.\n**\n**  * If the input token is $, then fail the parse.\n**\n** As before, subsequent error messages are suppressed until\n** three input tokens have been successfully shifted.\n*/\n          if (yypParser.yyerrcnt <= 0)\n          {\n            yy_syntax_error(yypParser, yymajor, yyminorunion);\n          }\n          yypParser.yyerrcnt = 3;\n          yy_destructor(yypParser, (YYCODETYPE)yymajor, yyminorunion);\n          if (yyendofinput)\n          {\n            yy_parse_failed(yypParser);\n          }\n          yymajor = YYNOCODE;\n#endif\n        }\n      } while (yymajor != YYNOCODE && yypParser.yyidx >= 0);\n      return;\n    }\n    public class yymsp\n    {\n      public yyParser _yyParser;\n      public int _yyidx;\n      // CONSTRUCTOR\n      public yymsp(ref yyParser pointer_to_yyParser, int yyidx) //\' Parser and Stack Index\n      {\n        this._yyParser = pointer_to_yyParser;\n        this._yyidx = yyidx;\n      }\n      // Default Value\n      public yyStackEntry this[int offset]\n      {\n        get { return _yyParser.yystack[_yyidx + offset]; }\n      }\n    }\n  }\n}\n'