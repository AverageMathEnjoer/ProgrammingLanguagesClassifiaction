b'module Utils where\n\nimport Data.Aeson qualified as Aeson\nimport Data.ByteString.Lazy.Char8 qualified as BSL\nimport Data.Text.Lazy (Text)\nimport Data.Text.Lazy qualified as TL\nimport Web.Scotty.Internal.Types\n\nbslToText :: BSL.ByteString -> Text\nbslToText = TL.pack . BSL.unpack\n\nparamValue :: Text -> [Param] -> [Text]\nparamValue key = fmap snd . filter (hasParam key)\n\nhasParam :: Text -> Param -> Bool\nhasParam t = (== t) . fst\n\nparseValue :: Aeson.FromJSON a => Maybe Aeson.Value -> Maybe a\nparseValue Nothing = Nothing\nparseValue (Just a) = case Aeson.fromJSON a of\n  Aeson.Error _ -> Nothing\n  Aeson.Success b -> Just b\n'