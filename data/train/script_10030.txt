b'{-# LANGUAGE JavaScriptFFI #-}\n\nmodule Hoodle.Web.ForeignJS where\n\nimport qualified Data.JSString as JSS\nimport GHCJS.Foreign.Callback (Callback)\nimport GHCJS.Marshal (FromJSVal (fromJSValUncheckedListOf), ToJSVal (toJSValListOf))\nimport GHCJS.Types (JSString, JSVal)\n\nforeign import javascript unsafe "console.log($1)"\n  js_console_log :: JSVal -> IO ()\n\nforeign import javascript unsafe "$r = location.hostname"\n  js_hostname :: IO JSString\n\nforeign import javascript unsafe "preventDefaultTouchMove()"\n  js_prevent_default_touch_move :: IO ()\n\nforeign import javascript unsafe "$r = SVG(\'#box\')"\n  js_svg_box :: IO JSVal\n\nforeign import javascript unsafe "$1.on($2,$3)"\n  js_on :: JSVal -> JSString -> Callback a -> IO ()\n\nforeign import javascript unsafe "$r = $1.clientX"\n  js_clientX :: JSVal -> IO Double\n\nforeign import javascript unsafe "$r = $1.clientY"\n  js_clientY :: JSVal -> IO Double\n\nforeign import javascript unsafe "$r = $1.clientX"\n  js_x :: JSVal -> IO Double\n\nforeign import javascript unsafe "$r = $1.clientY"\n  js_y :: JSVal -> IO Double\n\nforeign import javascript unsafe "$r = toSVGPoint($1,$2,$3)"\n  js_to_svg_point :: JSVal -> Double -> Double -> IO JSVal\n\nforeign import javascript unsafe "$r = toSVGPointArray($1,$2)"\n  js_to_svg_point_array :: JSVal -> JSVal -> IO JSVal\n\nforeign import javascript unsafe "drawPath($1,$2,$3)"\n  js_draw_path :: JSVal -> JSString -> JSVal -> IO ()\n\nforeign import javascript unsafe "window.requestAnimationFrame($1)"\n  js_requestAnimationFrame :: Callback a -> IO ()\n\nforeign import javascript unsafe "refresh($1,$2)"\n  js_refresh :: JSVal -> JSVal -> IO ()\n\nforeign import javascript unsafe "$1.addEventListener($2,$3)"\n  js_addEventListener :: JSVal -> JSString -> Callback a -> IO ()\n\nforeign import javascript unsafe "overlay_point($1,$2,$3,$4,$5,$6)"\n  js_overlay_point :: JSVal -> JSVal -> Double -> Double -> Double -> Double -> IO ()\n\nforeign import javascript unsafe "clear_overlay($1)"\n  js_clear_overlay :: JSVal -> IO ()\n\nforeign import javascript unsafe "fix_dpi($1)"\n  js_fix_dpi :: JSVal -> IO ()\n\nforeign import javascript unsafe "$r = $1.width"\n  js_get_width :: JSVal -> IO Double\n\nforeign import javascript unsafe "$1.width = $2"\n  js_set_width :: JSVal -> Double -> IO ()\n\nforeign import javascript unsafe "$r = $1.height"\n  js_get_height :: JSVal -> IO Double\n\nforeign import javascript unsafe "$1.height = $2"\n  js_set_height :: JSVal -> Double -> IO ()\n\nforeign import javascript unsafe "$r = document.createElement(\'canvas\')"\n  js_create_canvas :: IO JSVal\n\nforeign import javascript unsafe "$r = $1.pointerType"\n  js_pointer_type :: JSVal -> IO JSString\n\nforeign import javascript unsafe "debug_show($1)"\n  js_debug_show :: JSVal -> IO ()\n\nforeign import javascript unsafe "document.getElementById($1)"\n  js_document_getElementById :: JSString -> IO JSVal\n\nforeign import javascript unsafe "stroke_change_color($1,$2)"\n  js_stroke_change_color :: JSVal -> JSString -> IO ()\n\nforeign import javascript unsafe "stroke_remove($1,$2)"\n  js_stroke_remove :: JSVal -> JSString -> IO ()\n\nforeign import javascript unsafe "$1.classList.add($2)"\n  js_add_class :: JSVal -> JSString -> IO ()\n\nforeign import javascript unsafe "$1.classList.remove($2)"\n  js_remove_class :: JSVal -> JSString -> IO ()\n\ndata PointerType = Mouse | Touch | Pen\n  deriving (Show, Eq)\n\ngetXY :: JSVal -> IO (Double, Double)\ngetXY ev = (,) <$> js_clientX ev <*> js_clientY ev\n\ngetXYinSVG :: JSVal -> (Double, Double) -> IO (Double, Double)\ngetXYinSVG svg (x0, y0) = do\n  r <- js_to_svg_point svg x0 y0\n  [x, y] <- fromJSValUncheckedListOf r\n  pure (x, y)\n\ngetPointerType :: JSVal -> IO PointerType\ngetPointerType ev =\n  js_pointer_type ev >>= \\s -> do\n    case JSS.unpack s of\n      "touch" -> pure Touch\n      "pen" -> pure Pen\n      _ -> pure Mouse\n\ndrawPath :: JSVal -> String -> [(Double, Double)] -> IO ()\ndrawPath svg id\' xys = do\n  arr <- toJSValListOf xys\n  js_draw_path svg (JSS.pack id\') arr\n\nstrokeChangeColor :: JSVal -> String -> IO ()\nstrokeChangeColor svg id\' =\n  js_stroke_change_color svg (JSS.pack id\')\n\nstrokeRemove :: JSVal -> String -> IO ()\nstrokeRemove svg id\' =\n  js_stroke_remove svg (JSS.pack id\')\n'