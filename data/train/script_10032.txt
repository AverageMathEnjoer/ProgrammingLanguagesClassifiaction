b'/*\n * Copyright (C) 2015 Naman Dwivedi\n *\n * Licensed under the GNU General Public License v3\n *\n * This is free software: you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n */\n\npackage com.naman14.timber.adapters;\n\nimport android.graphics.Color;\nimport android.os.Handler;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.recyclerview.widget.RecyclerView;\n\nimport android.view.LayoutInflater;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.view.animation.Animation;\nimport android.view.animation.AnimationUtils;\nimport android.widget.ImageView;\nimport android.widget.PopupMenu;\nimport android.widget.TextView;\n\nimport com.afollestad.appthemeengine.Config;\nimport com.naman14.timber.MusicPlayer;\nimport com.naman14.timber.R;\nimport com.naman14.timber.dialogs.AddPlaylistDialog;\nimport com.naman14.timber.models.Song;\nimport com.naman14.timber.utils.Helpers;\nimport com.naman14.timber.utils.NavigationUtils;\nimport com.naman14.timber.utils.TimberUtils;\nimport com.naman14.timber.widgets.BubbleTextGetter;\nimport com.naman14.timber.widgets.MusicVisualizer;\nimport com.nostra13.universalimageloader.core.DisplayImageOptions;\nimport com.nostra13.universalimageloader.core.ImageLoader;\n\nimport java.util.List;\n\npublic class SongsListAdapter extends BaseSongAdapter<SongsListAdapter.ItemHolder> implements BubbleTextGetter {\n\n    public int currentlyPlayingPosition;\n    private List<Song> arraylist;\n    private AppCompatActivity mContext;\n    private long[] songIDs;\n    private boolean isPlaylist;\n    private boolean animate;\n    private int lastPosition = -1;\n    private String ateKey;\n    private long playlistId;\n\n    public SongsListAdapter(AppCompatActivity context, List<Song> arraylist, boolean isPlaylistSong, boolean animate) {\n        this.arraylist = arraylist;\n        this.mContext = context;\n        this.isPlaylist = isPlaylistSong;\n        this.songIDs = getSongIds();\n        this.ateKey = Helpers.getATEKey(context);\n        this.animate = animate;\n    }\n\n    @Override\n    public ItemHolder onCreateViewHolder(ViewGroup viewGroup, int i) {\n        if (isPlaylist) {\n            View v = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.item_song_playlist, null);\n            ItemHolder ml = new ItemHolder(v);\n            return ml;\n        } else {\n            View v = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.item_song, null);\n            ItemHolder ml = new ItemHolder(v);\n            return ml;\n        }\n    }\n\n    @Override\n    public void onBindViewHolder(ItemHolder itemHolder, int i) {\n        Song localItem = arraylist.get(i);\n\n        itemHolder.title.setText(localItem.title);\n        itemHolder.artist.setText(localItem.artistName);\n\n        ImageLoader.getInstance().displayImage(TimberUtils.getAlbumArtUri(localItem.albumId).toString(),\n                itemHolder.albumArt, new DisplayImageOptions.Builder().cacheInMemory(true)\n                        .showImageOnLoading(R.drawable.ic_empty_music2)\n                        .resetViewBeforeLoading(true).build());\n\n        if (MusicPlayer.getCurrentAudioId() == localItem.id) {\n            itemHolder.title.setTextColor(Config.accentColor(mContext, ateKey));\n            if (MusicPlayer.isPlaying()) {\n                itemHolder.visualizer.setColor(Config.accentColor(mContext, ateKey));\n                itemHolder.visualizer.setVisibility(View.VISIBLE);\n            } else {\n                itemHolder.visualizer.setVisibility(View.GONE);\n            }\n        } else {\n            itemHolder.visualizer.setVisibility(View.GONE);\n            if (isPlaylist) {\n                itemHolder.title.setTextColor(Color.WHITE);\n            } else {\n                itemHolder.title.setTextColor(Config.textColorPrimary(mContext, ateKey));\n            }\n        }\n\n\n        if (animate && isPlaylist) {\n            if (TimberUtils.isLollipop())\n                setAnimation(itemHolder.itemView, i);\n            else {\n                if (i > 10)\n                    setAnimation(itemHolder.itemView, i);\n            }\n        }\n\n\n        setOnPopupMenuListener(itemHolder, i);\n\n    }\n\n    public void setPlaylistId(long playlistId) {\n        this.playlistId = playlistId;\n    }\n\n    @Override\n    public int getItemCount() {\n        return (null != arraylist ? arraylist.size() : 0);\n    }\n\n    private void setOnPopupMenuListener(ItemHolder itemHolder, final int position) {\n\n        itemHolder.popupMenu.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n\n                final PopupMenu menu = new PopupMenu(mContext, v);\n\n                menu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {\n                    @Override\n                    public boolean onMenuItemClick(MenuItem item) {\n                        switch (item.getItemId()) {\n                            case R.id.popup_song_remove_playlist:\n                                TimberUtils.removeFromPlaylist(mContext, arraylist.get(position).id, playlistId);\n                                removeSongAt(position);\n                                notifyItemRemoved(position);\n                                break;\n                            case R.id.popup_song_play:\n                                MusicPlayer.playAll(mContext, songIDs, position, -1, TimberUtils.IdType.NA, false);\n                                break;\n                            case R.id.popup_song_play_next:\n                                long[] ids = new long[1];\n                                ids[0] = arraylist.get(position).id;\n                                MusicPlayer.playNext(mContext, ids, -1, TimberUtils.IdType.NA);\n                                break;\n                            case R.id.popup_song_goto_album:\n                                NavigationUtils.goToAlbum(mContext, arraylist.get(position).albumId);\n                                break;\n                            case R.id.popup_song_goto_artist:\n                                NavigationUtils.goToArtist(mContext, arraylist.get(position).artistId);\n                                break;\n                            case R.id.popup_song_addto_queue:\n                                long[] id = new long[1];\n                                id[0] = arraylist.get(position).id;\n                                MusicPlayer.addToQueue(mContext, id, -1, TimberUtils.IdType.NA);\n                                break;\n                            case R.id.popup_song_addto_playlist:\n                                AddPlaylistDialog.newInstance(arraylist.get(position)).show(mContext.getSupportFragmentManager(), "ADD_PLAYLIST");\n                                break;\n                            case R.id.popup_song_share:\n                               TimberUtils.shareTrack(mContext, arraylist.get(position).id);\n                                break;\n                            case R.id.popup_song_delete:\n                                long[] deleteIds = {arraylist.get(position).id};\n                                TimberUtils.showDeleteDialog(mContext,arraylist.get(position).title, deleteIds, SongsListAdapter.this, position);\n                                break;\n                        }\n                        return false;\n                    }\n                });\n                menu.inflate(R.menu.popup_song);\n                menu.show();\n                if (isPlaylist)\n                    menu.getMenu().findItem(R.id.popup_song_remove_playlist).setVisible(true);\n            }\n        });\n    }\n\n    public long[] getSongIds() {\n        long[] ret = new long[getItemCount()];\n        for (int i = 0; i < getItemCount(); i++) {\n            ret[i] = arraylist.get(i).id;\n        }\n\n        return ret;\n    }\n\n    @Override\n    public String getTextToShowInBubble(final int pos) {\n        if (arraylist == null || arraylist.size() == 0)\n            return "";\n        Character ch = arraylist.get(pos).title.charAt(0);\n        if (Character.isDigit(ch)) {\n            return "#";\n        } else\n            return Character.toString(ch);\n    }\n\n    private void setAnimation(View viewToAnimate, int position) {\n        // If the bound view wasn\'t previously displayed on screen, it\'s animated\n        if (position > lastPosition) {\n            Animation animation = AnimationUtils.loadAnimation(mContext, R.anim.abc_slide_in_bottom);\n            viewToAnimate.startAnimation(animation);\n            lastPosition = position;\n        }\n    }\n\n    @Override\n    public void updateDataSet(List<Song> arraylist) {\n        this.arraylist = arraylist;\n        this.songIDs = getSongIds();\n    }\n\n    public class ItemHolder extends RecyclerView.ViewHolder implements View.OnClickListener {\n        protected TextView title, artist;\n        protected ImageView albumArt, popupMenu;\n        private MusicVisualizer visualizer;\n\n        public ItemHolder(View view) {\n            super(view);\n            this.title = (TextView) view.findViewById(R.id.song_title);\n            this.artist = (TextView) view.findViewById(R.id.song_artist);\n            this.albumArt = (ImageView) view.findViewById(R.id.albumArt);\n            this.popupMenu = (ImageView) view.findViewById(R.id.popup_menu);\n            visualizer = (MusicVisualizer) view.findViewById(R.id.visualizer);\n            view.setOnClickListener(this);\n        }\n\n        @Override\n        public void onClick(View v) {\n            final Handler handler = new Handler();\n            handler.postDelayed(new Runnable() {\n                @Override\n                public void run() {\n                    playAll(mContext, songIDs, getAdapterPosition(), -1,\n                            TimberUtils.IdType.NA, false,\n                            arraylist.get(getAdapterPosition()), false);\n                    Handler handler1 = new Handler();\n                    handler1.postDelayed(new Runnable() {\n                        @Override\n                        public void run() {\n                            notifyItemChanged(currentlyPlayingPosition);\n                            notifyItemChanged(getAdapterPosition());\n                        }\n                    }, 50);\n                }\n            }, 100);\n\n\n        }\n\n    }\n\n    public Song getSongAt(int i) {\n        return arraylist.get(i);\n    }\n\n    public void addSongTo(int i, Song song) {\n        arraylist.add(i, song);\n    }\n\n    @Override\n    public void removeSongAt(int i) {\n        arraylist.remove(i);\n        updateDataSet(arraylist);\n    }\n}\n\n\n'