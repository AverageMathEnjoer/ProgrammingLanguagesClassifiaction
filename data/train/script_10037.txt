b'-- |\n-- Copyright  : (c) Ivan Perez and Manuel Baerenz, 2016\n-- License    : BSD3\n-- Maintainer : ivan.perez@keera.co.uk\n--\n-- Monadic Stream Functions are synchronized stream functions with side\n-- effects.\n--\n-- \'MSF\'s are defined by a function\n-- @unMSF :: MSF m a b -> a -> m (b, MSF m a b)@\n-- that executes one step of a simulation, and produces an output in a monadic\n-- context, and a continuation to be used for future steps.\n--\n-- See the module "Data.MonadicStreamFunction.Core" for details.\n--\n-- \'MSF\'s are a generalisation of the implementation mechanism used by Yampa,\n-- Wormholes and other FRP and reactive implementations.\n--\n-- When combined with different monads, they produce interesting effects. For\n-- example, when combined with the \'Maybe\' monad, they become transformations\n-- that may stop producing outputs (and continuations). The \'Either\' monad\n-- gives rise to \'MSF\'s that end with a result (akin to Tasks in Yampa, and\n-- Monadic FRP).\n--\n-- Flattening, that is, going from some structure @MSF (t m) a b@ to @MSF m a\n-- b@ for a specific transformer @t@ often gives rise to known FRP constructs.\n-- For instance, flattening with \'EitherT\' gives rise to switching, and\n-- flattening with \'ListT\' gives rise to parallelism with broadcasting.\n--\n-- \'MSF\'s can be used to implement many FRP variants, including Arrowized FRP,\n-- Classic FRP, and plain reactive programming. Arrowized and applicative\n-- syntax are both supported.\n--\n-- For a very detailed introduction to \'MSF\'s, see:\n-- <http://dl.acm.org/citation.cfm?id=2976010>\n-- (mirror: <http://www.cs.nott.ac.uk/~psxip1/#FRPRefactored>).\n--\n-- Apart from the modules exported, this module exports instances from:\n--\n-- - "Data.MonadicStreamFunction.Instances.ArrowChoice"\n-- - "Data.MonadicStreamFunction.Instances.ArrowLoop"\n-- - "Data.MonadicStreamFunction.Instances.ArrowPlus"\nmodule Data.MonadicStreamFunction\n  ( module Control.Arrow\n  , module Data.MonadicStreamFunction.Core\n  , module Data.MonadicStreamFunction.Util\n  )\n where\n\n-- External imports\nimport Control.Arrow\n\n-- Internal imports\nimport Data.MonadicStreamFunction.Core\nimport Data.MonadicStreamFunction.Util\n\n-- Internal imports (instances)\nimport Data.MonadicStreamFunction.Instances.ArrowChoice ()\nimport Data.MonadicStreamFunction.Instances.ArrowLoop   ()\nimport Data.MonadicStreamFunction.Instances.ArrowPlus   ()\n'