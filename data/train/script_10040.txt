b'module Keyboard where\n\nimport Data.Int\nimport Data.Char (ord)\nimport Control.Monad.Trans.State\nimport Data.Functor.Identity\n\nimport Color\nimport Effects\nimport Layouts\nimport Devices.I3 (WorkspaceConfig(..))\nimport SystemState\n\nlight :: Bool -> (Int32, Int32) -> SystemState -> Maybe Frame\nlight new dim\n      SystemState { _keyboard = KeyboardLightingState { _mode = mode\n                                                      , _time = t\n                                                      , _workspaces = workspaces\n                                                      }\n                  , _language = lang} = \n    case mode of\n        LightingCtrlShiftSuper -> withNewFrame lightCtrlShiftSuper\n        LightingCtrlSuper -> withNewFrame lightCtrlSuper\n        LightingCtrlAltShift -> withNewFrame lightCtrlAltShift\n        LightingCtrlShift -> withNewFrame lightCtrlShift\n        LightingCtrlAlt -> withNewFrame lightCtrlAlt\n        LightingCtrl -> withNewFrame lightCtrl\n        LightingShiftSuper -> withNewFrame (lightShiftSuper >> lightWorkspaces workspaces)\n        LightingAltSuper -> withNewFrame lightAltSuper\n        LightingSuper -> withNewFrame (lightSuper >> lightWorkspaces workspaces)\n        LightingAltShift -> withNewFrame lightAltShift\n        LightingShift -> withNewFrame lightShift\n        LightingAlt -> withNewFrame lightAlt\n        _               -> fromFrame (lightWorkspaces workspaces)\n    where keyboardWithEffect :: Frame\n          keyboardWithEffect = fillKeyboard effect dim\n          effect = case lang of\n                        LangUS -> rainbow t\n                        LangRU -> wrongCoolRainbow t --disassemblingRainbow t \n          fromFrame actions = Just . fst . snd $ runState actions (keyboardWithEffect, colorBlack)\n          withNewFrame :: StateT (Frame, Color) Identity () -> Maybe Frame\n          withNewFrame actions = \n                if not new \n                    then Nothing \n                    else Just . fst . snd $ (runState actions (solidColor colorBlack dim, languageToColor lang)) \n\nlightWorkspaces :: [WorkspaceConfig] -> StateT (Frame, Color) Identity ()\nlightWorkspaces ws = mapM_ lightWorkspace (zip [1..15] ws)\n\nlightWorkspace :: (Int32, WorkspaceConfig) -> StateT (Frame, Color) Identity ()\nlightWorkspace (i, ws) = setColor (1, i) color\n    where color = case ws of\n                WorkspaceEmpty  -> colorDarkgreen\n                WorkspaceWindow -> colorYellow\n                WorkspaceUrgent -> colorOrange\n                WorkspaceActive -> colorWhite\n\nlanguageToColor LangRU = colorRed\nlanguageToColor LangUS = colorBlue\n\nsignalToMode :: KeyboardSignal -> Maybe KeyboardLightingMode\nsignalToMode (Modifier SignalCtrlShiftSuper) = Just LightingCtrlShiftSuper\nsignalToMode (Modifier SignalCtrlSuper) = Just LightingCtrlSuper\nsignalToMode (Modifier SignalCtrlAltShift) = Just LightingCtrlAltShift\nsignalToMode (Modifier SignalCtrlShift) = Just LightingCtrlShift\nsignalToMode (Modifier SignalCtrlAlt) = Just LightingCtrlAlt\nsignalToMode (Modifier SignalCtrl) = Just LightingCtrl\nsignalToMode (Modifier SignalShiftSuper) = Just LightingShiftSuper\nsignalToMode (Modifier SignalAltSuper) = Just LightingAltSuper\nsignalToMode (Modifier SignalSuper) = Just LightingSuper\nsignalToMode (Modifier SignalAltShift) = Just LightingAltShift\nsignalToMode (Modifier SignalShift) = Just LightingShift\nsignalToMode (Modifier SignalAlt) = Just LightingAlt\nsignalToMode SignalDefault = Just LightingDefault\nsignalToMode _ = Nothing\n\ndata ModifierSignal = \n      SignalCtrlShiftSuper\n    | SignalCtrlSuper\n    | SignalCtrlAltShift\n    | SignalCtrlShift\n    | SignalCtrlAlt\n    | SignalCtrl\n    | SignalShiftSuper\n    | SignalAltSuper\n    | SignalSuper\n    | SignalAltShift\n    | SignalShift\n    | SignalAlt\n    deriving (Show, Eq)\n\ndata KeyboardSignal =\n      Modifier ModifierSignal\n    | SignalDefault\n    | SignalSwitchlang\n    | SignalUpdateWorkspaces\n    | SignalSetReactive\n    | SignalUnsetReactive\n    | SignalIncreaseBulbBrightness\n    | SignalDecreaseBulbBrightness\n    deriving (Show, Eq)\n\ncharToSignal :: Char -> KeyboardSignal\ncharToSignal c = case ord c of\n    0  -> Modifier SignalCtrlShiftSuper\n    1  -> Modifier SignalCtrlSuper\n    2  -> Modifier SignalCtrlAltShift\n    3  -> Modifier SignalCtrlShift\n    4  -> Modifier SignalCtrlAlt\n    5  -> Modifier SignalCtrl\n    6  -> Modifier SignalShiftSuper\n    7  -> Modifier SignalAltSuper\n    8  -> Modifier SignalSuper\n    9  -> Modifier SignalAltShift\n    10 -> Modifier SignalShift\n    11 -> Modifier SignalAlt\n    12 -> SignalDefault\n    15 -> SignalSwitchlang\n    14 -> SignalUpdateWorkspaces\n    56 -> SignalSetReactive\n    57 -> SignalUnsetReactive\n    100 -> SignalIncreaseBulbBrightness\n    101 -> SignalDecreaseBulbBrightness'