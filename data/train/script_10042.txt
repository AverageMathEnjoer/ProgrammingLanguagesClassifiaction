b'{-# LANGUAGE OverloadedStrings #-}\n\nmodule Test.FontDescriptor\n(\n  spec,\n)\nwhere\n\nimport Pdf.Content.FontDescriptor\n\nimport Data.Int\nimport Test.Hspec\n\nspec :: Spec\nspec = describe "FontDescriptor" $ do\n  testFlagSet\n\ndefFD :: FontDescriptor\ndefFD = FontDescriptor\n  { fdFontName = "test"\n  , fdFontFamily = Nothing\n  , fdFontStretch = Nothing\n  , fdFontWeight = Nothing\n  , fdFlags = 5\n  , fdFontBBox = Nothing\n  , fdItalicAngle = -12.5\n  , fdDescent = Nothing\n  , fdAscent = Nothing\n  , fdLeading = Nothing\n  , fdCapHeight = Nothing\n  , fdXHeight = Nothing\n  , fdStemV = Nothing\n  , fdStemH = Nothing\n  , fdAvgWidth = Nothing\n  , fdMaxWidth = Nothing\n  , fdMissingWidth = Nothing\n  , fdCharSet = Nothing\n  }\n\ntestFlagSet :: Spec\ntestFlagSet = describe "flagSet" $ do\n  it "should return True when testing FixedPitch on 5" $ do\n    let res = flagSet defFD FixedPitch\n    res `shouldSatisfy` (==True)\n\n  it "should return False when testing Serif on 5" $ do\n    let res = flagSet defFD Serif\n    res `shouldSatisfy` (==False)\n\n  it "should return True when testing Symbolic on 5" $ do\n    let res = flagSet defFD Symbolic\n    res `shouldSatisfy` (==True)\n\n  it "should return False when testing Script on 5" $ do\n    let res = flagSet defFD Script\n    res `shouldSatisfy` (==False)\n\n  it "should return False when testing ForceBold on 5" $ do\n    let res = flagSet defFD ForceBold\n    res `shouldSatisfy` (==False)\n\n  it "should return True when testing ForceBold on (2^32)-1" $ do\n    let res = flagSet (defFD {fdFlags = (power64 2 32)-1})  ForceBold\n    res `shouldSatisfy` (==True)\n\n  it "should return False when testing ForceBold on 0" $ do\n    let res = flagSet (defFD {fdFlags = 0}) ForceBold\n    res `shouldSatisfy` (==False)\n\n  where\n    power64 :: Int64 -> Int64 -> Int64\n    power64 _ 0 = 1\n    power64 b e = b * power64 b (e-1)\n'