b'\xef\xbb\xbfusing BaiduPanDownload.Util.FileTool;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Net;\nusing System.Net.Security;\nusing System.Text;\nusing System.Windows.Forms;\n\nnamespace BaiduPanDownload.HttpTool\n{\n    class WebTool\n    {\n        /// <summary>\n        /// Get\xe8\xaf\xb7\xe6\xb1\x82\xe7\xbd\x91\xe7\xab\x99\n        /// </summary>\n        /// <param name="Url">\xe5\x9c\xb0\xe5\x9d\x80</param>\n        /// <returns>\xe7\xbd\x91\xe7\xab\x99\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae</returns>\n        public static string GetHtml(string Url)\n        {\n            string sRslt = null;\n            LogTool.WriteLogDebug(typeof(WebTool),$"\xe6\xad\xa3\xe5\x9c\xa8GET {Url} ");\n            WebResponse oWebRps = null;\n            HttpWebRequest rq = (HttpWebRequest)WebRequest.Create(Url);\n            rq.UserAgent = "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; QQWubi 133; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; CIBA; InfoPath.2)";\n            rq.Method = "GET";\n            rq.Timeout = 5000;\n            try\n            {\n                oWebRps = rq.GetResponse();\n            }\n            catch (Exception e)\n            {\n                sRslt = "ERROR:" + e.Message;\n                LogTool.WriteLogError(typeof(WebTool),$"GET {Url} \xe6\x97\xb6\xe5\x8f\x91\xe7\x94\x9f\xe9\x94\x99\xe8\xaf\xaf!",e);\n            }\n            finally\n            {\n                if (oWebRps != null)\n                {\n                    StreamReader oStreamRd = new StreamReader(oWebRps.GetResponseStream(), Encoding.GetEncoding("UTF-8"));\n                    sRslt = oStreamRd.ReadToEnd();\n                    oStreamRd.Close();\n                    oWebRps.Close();\n                }\n            }\n            return sRslt;\n        }\n\n        /// <summary>  \n        /// \xe5\x88\x9b\xe5\xbb\xbaPOST\xe6\x96\xb9\xe5\xbc\x8f\xe7\x9a\x84HTTP\xe8\xaf\xb7\xe6\xb1\x82  \n        /// </summary>  \n        /// <param name="url">\xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84URL</param>  \n        /// <param name="parameters">\xe9\x9a\x8f\xe5\x90\x8c\xe8\xaf\xb7\xe6\xb1\x82POST\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\xe5\x90\x8d\xe7\xa7\xb0\xe5\x8f\x8a\xe5\x8f\x82\xe6\x95\xb0\xe5\x80\xbc\xe5\xad\x97\xe5\x85\xb8</param>  \n        /// <param name="timeout">\xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84\xe8\xb6\x85\xe6\x97\xb6\xe6\x97\xb6\xe9\x97\xb4</param>  \n        /// <param name="userAgent">\xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84\xe5\xae\xa2\xe6\x88\xb7\xe7\xab\xaf\xe6\xb5\x8f\xe8\xa7\x88\xe5\x99\xa8\xe4\xbf\xa1\xe6\x81\xaf\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xb8\xba\xe7\xa9\xba</param>  \n        /// <param name="requestEncoding">\xe5\x8f\x91\xe9\x80\x81HTTP\xe8\xaf\xb7\xe6\xb1\x82\xe6\x97\xb6\xe6\x89\x80\xe7\x94\xa8\xe7\x9a\x84\xe7\xbc\x96\xe7\xa0\x81</param>  \n        /// <param name="cookies">\xe9\x9a\x8f\xe5\x90\x8cHTTP\xe8\xaf\xb7\xe6\xb1\x82\xe5\x8f\x91\xe9\x80\x81\xe7\x9a\x84Cookie\xe4\xbf\xa1\xe6\x81\xaf\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x8d\xe9\x9c\x80\xe8\xa6\x81\xe8\xba\xab\xe4\xbb\xbd\xe9\xaa\x8c\xe8\xaf\x81\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xb8\xba\xe7\xa9\xba</param>  \n        /// <returns></returns>  \n        public static HttpWebResponse CreatePostHttpResponse(string url, IDictionary<string, string> parameters, int? timeout, string userAgent, Encoding requestEncoding, CookieCollection cookies)\n        {\n            if (string.IsNullOrEmpty(url))\n            {\n                throw new ArgumentNullException("url");\n            }\n            if (requestEncoding == null)\n            {\n                throw new ArgumentNullException("requestEncoding");\n            }\n            HttpWebRequest request = null;\n            //\xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe5\x8f\x91\xe9\x80\x81HTTPS\xe8\xaf\xb7\xe6\xb1\x82  \n            if (url.StartsWith("https", StringComparison.OrdinalIgnoreCase))\n            {\n                //ServicePointManager.ServerCertificateValidationCallback = new RemoteCertificateValidationCallback(CheckValidationResult);\n                request = WebRequest.Create(url) as HttpWebRequest;\n                request.ProtocolVersion = HttpVersion.Version10;\n            }\n            else\n            {\n                request = WebRequest.Create(url) as HttpWebRequest;\n            }\n            request.Method = "POST";\n\n            request.Headers.Add("X_REG_CODE", "288a633ccc1");\n            request.Headers.Add("X_MACHINE_ID", "a306b7c51254cfc5e22c7ac0702cdf87");\n            request.Headers.Add("X_REG_SECRET", "de308301cf381bd4a37a184854035475d4c64946");\n            request.Headers.Add("X_STORE", "0001");\n            request.Headers.Add("X_BAY", "0001-01");\n            request.Headers.Add("X-Requested-With", "XMLHttpRequest");\n            request.ContentType = "application/x-www-form-urlencoded";\n            request.Headers.Add("Accept-Language", "zh-CN");\n            request.Headers.Add("Accept-Encoding", "gzip, deflate");\n            request.Accept = "*/*";\n\n            if (!string.IsNullOrEmpty(userAgent))\n            {\n                request.UserAgent = userAgent;\n            }\n            else\n            {\n                request.UserAgent = "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; QQWubi 133; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; CIBA; InfoPath.2)";\n            }\n\n            if (timeout.HasValue)\n            {\n                request.Timeout = timeout.Value;\n            }\n            // if (cookies != null)\n            // {\n            request.CookieContainer = new CookieContainer();\n            // request.CookieContainer.Add(cookies);\n            // }\n            //\xe5\xa6\x82\xe6\x9e\x9c\xe9\x9c\x80\xe8\xa6\x81POST\xe6\x95\xb0\xe6\x8d\xae  \n            if (!(parameters == null || parameters.Count == 0))\n            {\n                StringBuilder buffer = new StringBuilder();\n                int i = 0;\n                foreach (string key in parameters.Keys)\n                {\n                    if (i > 0)\n                    {\n                        buffer.AppendFormat("&{0}={1}", key, parameters[key]);\n                    }\n                    else\n                    {\n                        buffer.AppendFormat("{0}={1}", key, parameters[key]);\n                    }\n                    i++;\n                }\n\n                byte[] data = requestEncoding.GetBytes(buffer.ToString());\n                using (Stream stream = request.GetRequestStream())\n                {\n                    stream.Write(data, 0, data.Length);\n                }\n            }\n            HttpWebResponse res;\n            try\n            {\n                res = (HttpWebResponse)request.GetResponse();\n            }\n            catch (WebException ex)\n            {\n                res = (HttpWebResponse)ex.Response;\n            }\n\n            return res;\n        }\n\n        /// <summary>\n        /// \xe4\xb8\x8b\xe8\xbd\xbd\xe6\x96\x87\xe4\xbb\xb6\n        /// </summary>\n        /// <param name="Url">\xe4\xb8\x8b\xe8\xbd\xbd\xe9\x93\xbe\xe6\x8e\xa5</param>\n        /// <param name="FileName">\xe4\xbf\x9d\xe5\xad\x98\xe8\xb7\xaf\xe5\xbe\x84</param>\n        /// <param name="From">Range\xe5\xae\x9a\xe4\xb9\x89\xe7\x9a\x84\xe5\xa4\xb4</param>\n        /// <param name="To">Range\xe5\xae\x9a\xe4\xb9\x89\xe7\x9a\x84\xe5\xb0\xbe</param>\n        public static bool DownloadFile(string Url,string FileName,int From,int To)\n        {\n            try\n            {\n                HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(Url);\n                httpWebRequest.Timeout = 5000;\n                httpWebRequest.AddRange(From, To);\n                HttpWebResponse httpWebResponse = (HttpWebResponse)httpWebRequest.GetResponse();\n                long contentLength = httpWebResponse.ContentLength;\n                using (Stream responseStream = httpWebResponse.GetResponseStream())\n                {\n                    using (Stream stream = new FileStream(FileName, FileMode.Create))\n                    {\n                        long num = 0L;\n                        byte[] array = new byte[1024];\n                        int i = responseStream.Read(array, 0, array.Length);\n                        while (i > 0)\n                        {\n                            num = (long)i + num;\n                            Application.DoEvents();\n                            stream.Write(array, 0, i);\n                            i = responseStream.Read(array, 0, array.Length);\n                            Application.DoEvents();\n                        }\n                    }\n                }\n                return true;\n            }\n            catch\n            {\n                return false;\n            }\n        }\n    }\n}\n'