b'import assertk.assertThat\nimport assertk.assertions.isGreaterThan\nimport com.github.eprendre.tingshu.utils.Book\nimport com.github.eprendre.tingshu.utils.Episode\nimport org.jsoup.Jsoup\nimport org.junit.Test\n\nclass JiHeTest {\n    @Test\n    fun bookDetail() {\n        val doc = Jsoup.connect("https://www.gcores.com/radios/138374").testConfig(false).get()\n        val downloadUrl = doc.selectFirst("svg[data-icon=download]").parent().absUrl("href")\n        val episodes = ArrayList<Episode>()\n        Episode("1", downloadUrl).apply {\n            episodes.add(this)\n        }\n\n        episodes.take(20).forEach { println(it) }\n    }\n\n    @Test\n    fun category() {\n        val doc = Jsoup.connect("https://www.gcores.com/radios?page=2").testConfig(false).get()\n        val totalPage = 132\n        val currentPage = doc.selectFirst(".pagination_item.is_active > a").text().toInt()\n        val nextUrl = doc.selectFirst(".pagination_next > a").absUrl("href")\n\n        println("$currentPage/$totalPage")\n        println("nextUrl: $nextUrl")\n\n        val list = ArrayList<Book>()\n        val elementList = doc.select(".original-radio")\n        elementList.forEach { element ->\n            val coverUrl = element.selectFirst(".original_imgArea").attr("style")\n                .replace("background-image:url(", "")\n                .replace(")", "")\n            val bookUrl = element.selectFirst(".am_card_inner > .am_card_content.original_content").absUrl("href")\n            val title = element.selectFirst(".am_card_title").text()\n            val author = ""\n            val artist = element.selectFirst(".avatar_text > h3").text()\n            list.add(Book(coverUrl, bookUrl, title, author, artist).apply {\n            })\n        }\n        list.forEach { println(it) }\n        assertThat(list.size).isGreaterThan(0)\n\n    }\n\n}'