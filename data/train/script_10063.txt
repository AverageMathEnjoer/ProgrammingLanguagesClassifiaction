b'{-# LANGUAGE OverloadedStrings #-}\n\nmodule Test.Object.Util\n(\n  spec,\n)\nwhere\n\nimport Pdf.Core.Object\nimport Pdf.Core.Object.Util\n\nimport qualified Data.Vector as Vector\nimport qualified Data.HashMap.Strict as HashMap\nimport Test.Hspec\n\nspec :: Spec\nspec = describe "Object.Util" $ do\n  boolValueSpec\n  stringValueSpec\n  intValueSpec\n  realValueSpec\n  arrayValueSpec\n  dictValueSpec\n  nameValueSpec\n  refValueSpec\n  streamValueSpec\n\nboolValueSpec :: Spec\nboolValueSpec = describe "boolValue" $ do\n  it "should convert boolean value to Bool" $ do\n    boolValue (Bool True) `shouldBe` Just True\n\n  it "should return Nothing for other values" $ do\n    boolValue (String "hello") `shouldBe` Nothing\n\nstringValueSpec :: Spec\nstringValueSpec = describe "stringValue" $ do\n  it "should convert string value to ByteString" $ do\n    stringValue (String "hello") `shouldBe` Just "hello"\n\n  it "should return Nothing for other values" $ do\n    stringValue (Bool True) `shouldBe` Nothing\n\nintValueSpec :: Spec\nintValueSpec = describe "intValue" $ do\n  it "should convert int value to Int" $ do\n    intValue (Number 42) `shouldBe` Just 42\n\n  it "should not convert float value" $ do\n    intValue (Number 42.6) `shouldBe` Nothing\n\n  it "should not convert any other value" $ do\n    intValue (Bool True) `shouldBe` Nothing\n\nrealValueSpec :: Spec\nrealValueSpec = describe "realValue" $ do\n  it "should convert int value to Float" $ do\n    realValue (Number 42) `shouldBe` Just 42.0\n\n  it "should convert float value to Float" $ do\n    realValue (Number 42.4) `shouldBe` Just 42.4\n\n  it "should not convert any other value" $ do\n    realValue (Bool True) `shouldBe` Nothing\n\narrayValueSpec :: Spec\narrayValueSpec = describe "arrayValue" $ do\n  it "should convert array value to Array" $ do\n    let arr = Vector.fromList [Bool True]\n    arrayValue (Array arr) `shouldBe` Just arr\n\n  it "should return Nothing for any other value" $ do\n    arrayValue (Bool True) `shouldBe` Nothing\n\ndictValueSpec :: Spec\ndictValueSpec = describe "dictValue" $ do\n  it "should convert dict value to Dict" $ do\n    let dict = HashMap.fromList [("hello", Bool True)]\n    dictValue (Dict dict) `shouldBe` Just dict\n\n  it "should return Nothing for any other value" $ do\n    dictValue (Bool True) `shouldBe` Nothing\n\nnameValueSpec :: Spec\nnameValueSpec = describe "nameValue" $ do\n  it "should convert name value to Name" $ do\n    nameValue (Name "hello") `shouldBe` Just "hello"\n\n  it "should return Nothing for any other value" $ do\n    nameValue (Bool True) `shouldBe` Nothing\n\nrefValueSpec :: Spec\nrefValueSpec = describe "refValue" $ do\n  it "should convert ref value to Ref" $ do\n    let ref = R 42 24\n    refValue (Ref ref) `shouldBe` Just ref\n\n  it "should return Nothing for any other value" $ do\n    refValue (Bool True) `shouldBe` Nothing\n\nstreamValueSpec :: Spec\nstreamValueSpec = describe "streamValue" $ do\n  it "should convert stream value to Stream" $ do\n    let stream = S dict 42\n        dict = HashMap.fromList [("a", String "b")]\n    streamValue (Stream stream) `shouldBe` Just stream\n\n  it "should return Nothing for any other value" $ do\n    streamValue (Bool True) `shouldBe` (Nothing :: Maybe Stream)\n'