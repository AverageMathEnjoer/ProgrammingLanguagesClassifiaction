b'package effectivejava.chapter6.item37;\nimport java.util.*;\nimport static java.util.stream.Collectors.groupingBy;\nimport static java.util.stream.Collectors.toSet;\n\n// Using an EnumMap to associate data with an enum (Pages 171-3)\n\n// Simplistic class representing a plant (Page 171)\nclass Plant {\n    enum LifeCycle { ANNUAL, PERENNIAL, BIENNIAL }\n\n    final String name;\n    final LifeCycle lifeCycle;\n\n    Plant(String name, LifeCycle lifeCycle) {\n        this.name = name;\n        this.lifeCycle = lifeCycle;\n    }\n\n    @Override public String toString() {\n        return name;\n    }\n\n    public static void main(String[] args) {\n        Plant[] garden = {\n            new Plant("Basil",    LifeCycle.ANNUAL),\n            new Plant("Carroway", LifeCycle.BIENNIAL),\n            new Plant("Dill",     LifeCycle.ANNUAL),\n            new Plant("Lavendar", LifeCycle.PERENNIAL),\n            new Plant("Parsley",  LifeCycle.BIENNIAL),\n            new Plant("Rosemary", LifeCycle.PERENNIAL)\n        };\n\n        // Using ordinal() to index into an array - DON\'T DO THIS!  (Page 171)\n        Set<Plant>[] plantsByLifeCycleArr =\n                (Set<Plant>[]) new Set[Plant.LifeCycle.values().length];\n        for (int i = 0; i < plantsByLifeCycleArr.length; i++)\n            plantsByLifeCycleArr[i] = new HashSet<>();\n        for (Plant p : garden)\n            plantsByLifeCycleArr[p.lifeCycle.ordinal()].add(p);\n        // Print the results\n        for (int i = 0; i < plantsByLifeCycleArr.length; i++) {\n            System.out.printf("%s: %s%n",\n                    Plant.LifeCycle.values()[i], plantsByLifeCycleArr[i]);\n        }\n\n        // Using an EnumMap to associate data with an enum (Page 172)\n        Map<Plant.LifeCycle, Set<Plant>> plantsByLifeCycle =\n                new EnumMap<>(Plant.LifeCycle.class);\n        for (Plant.LifeCycle lc : Plant.LifeCycle.values())\n            plantsByLifeCycle.put(lc, new HashSet<>());\n        for (Plant p : garden)\n            plantsByLifeCycle.get(p.lifeCycle).add(p);\n        System.out.println(plantsByLifeCycle);\n\n        // Naive stream-based approach - unlikely to produce an EnumMap!  (Page 172)\n        System.out.println(Arrays.stream(garden)\n                .collect(groupingBy(p -> p.lifeCycle)));\n\n        // Using a stream and an EnumMap to associate data with an enum (Page 173)\n        System.out.println(Arrays.stream(garden)\n                .collect(groupingBy(p -> p.lifeCycle,\n                        () -> new EnumMap<>(LifeCycle.class), toSet())));\n    }\n}\n'