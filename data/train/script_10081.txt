b'using interval = vector<int>; // length 2\n// [1, 3] and [1, 19]\n// [1, 19] can contain [1, 3]\nbool comparator(const interval &left, const interval &right) {\n    if(left[0] == right[0])\n        return left[1] > right[1];\n    return left[0] < right[0]; // asc order of starting time\n}\n\nclass Solution {\npublic:\n    int removeCoveredIntervals(vector<interval>& intervals) {\n        sort(intervals.begin(), intervals.end(), comparator);\n        int ans = intervals.size();\n        \n        int maxEnd = 0;\n\n        for(interval cur: intervals) {\n            // need to check if cur is already contained\n            int curEnd = cur[1];\n            if (curEnd <= maxEnd) {\n                ans--; // throw away the current interval\n            }\n            \n            maxEnd = max(maxEnd, curEnd);\n        }\n        \n        return ans;\n    }\n};\n'