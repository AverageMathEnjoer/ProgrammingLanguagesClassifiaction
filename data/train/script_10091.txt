b'package com.db.williamchart.renderer\n\nimport com.db.williamchart.ChartContract\nimport com.db.williamchart.Painter\nimport com.db.williamchart.animation.ChartAnimation\nimport com.db.williamchart.data.AxisType\nimport com.db.williamchart.data.DataPoint\nimport com.db.williamchart.data.configuration.LineChartConfiguration\nimport com.db.williamchart.data.Paddings\nimport com.db.williamchart.data.Scale\nimport com.nhaarman.mockito_kotlin.any\nimport com.nhaarman.mockito_kotlin.atMost\nimport com.nhaarman.mockito_kotlin.mock\nimport com.nhaarman.mockito_kotlin.verify\nimport org.junit.Assert\nimport org.junit.Test\n\nclass LineChartRendererTest {\n\n    private val view: ChartContract.LineView = mock()\n    private val painter: Painter = mock()\n    private val animation: ChartAnimation<DataPoint> = mock()\n\n    private val lineChartRenderer by lazy {\n        LineChartRenderer(\n            view = view,\n            painter = painter,\n            animation = animation\n        )\n    }\n\n    @Test\n    fun `draw line background`() {\n        // Arrange\n        val data = listOf(\n            "this" to 999f,\n            "that" to 111f\n        )\n        val chartConfiguration =\n            LineChartConfiguration(\n                width = 0,\n                height = 0,\n                paddings = Paddings(0f, 0f, 0f, 0f),\n                axis = AxisType.NONE,\n                labelsSize = 0f,\n                lineThickness = 0f,\n                pointsDrawableWidth = 0,\n                pointsDrawableHeight = 0,\n                fillColor = 20705,\n                gradientFillColors = intArrayOf(),\n                scale = Scale(0f, 0f),\n                clickableRadius = 0\n            )\n\n        // Act\n        lineChartRenderer.render(data)\n        lineChartRenderer.preDraw(chartConfiguration)\n        lineChartRenderer.draw()\n\n        // Assert\n        verify(view).drawLineBackground(any(), any())\n    }\n\n    @Test\n    fun `draw x labels`() {\n        // Arrange\n        val data = listOf(\n            "this" to 999f,\n            "that" to 111f\n        )\n        val chartConfiguration =\n            LineChartConfiguration(\n                width = 0,\n                height = 0,\n                paddings = Paddings(0f, 0f, 0f, 0f),\n                axis = AxisType.X,\n                labelsSize = 0f,\n                lineThickness = 0f,\n                pointsDrawableWidth = 0,\n                pointsDrawableHeight = 0,\n                fillColor = 20705,\n                gradientFillColors = intArrayOf(),\n                scale = Scale(0f, 0f),\n                clickableRadius = 0\n            )\n\n        // Act\n        lineChartRenderer.render(data)\n        lineChartRenderer.preDraw(chartConfiguration)\n        lineChartRenderer.draw()\n\n        // Assert\n        verify(view, atMost(1)).drawLabels(any())\n    }\n\n    @Test\n    fun `do not execute click check if no data available`() {\n        // Act\n        val got = lineChartRenderer.processClick(1f, 2f)\n\n        // Assert\n        Assert.assertEquals(-1, got.first)\n        Assert.assertEquals(-1f, got.second)\n        Assert.assertEquals(-1f, got.third)\n    }\n}\n'