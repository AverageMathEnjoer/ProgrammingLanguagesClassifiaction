b'module Network.Server.Common.Lens where\n\n-- | A lens is a pair of set and get.\n--\n-- The type parameter \'a\' denotes the target object.\n-- The type parameter \'b\' denotes the field object.\ndata Lens a b =\n  Lens (a -> b -> a) (a -> b)\n\n-- | Given a lens and a target object, return its field object.\ngetL ::\n  Lens a b\n  -> a\n  -> b\ngetL (Lens _ g) =\n  g\n\n-- | Given a lens, a target object and a field object, return a new target object with the field set.\nsetL ::\n  Lens a b\n  -> a\n  -> b\n  -> a\nsetL (Lens s _) =\n  s\n\n-- | Produce the lens for the first element of a pair.\n--\n-- >>> getL fstL ("hi", 3)\n-- "hi"\n--\n-- >>> setL fstL ("hi", 3) "bye"\n-- ("bye",3)\nfstL ::\n  Lens (a, b) a\nfstL =\n  Lens (\\(_, b) a -> (a, b)) fst\n\n-- | Produce the lens for the second element of a pair.\n--\n-- >>> getL sndL ("hi", 3)\n-- 3\n--\n-- >>> setL sndL ("hi", 3) 4\n-- ("hi",4)\nsndL ::\n  Lens (a, b) b\nsndL =\n  Lens (\\(a, _) b -> (a, b)) snd\n\n-- | Lens composition.\n-- Given lens (a to b) and lens (b to c), produce lens (a to c).\n--\n-- >>> getL (fstL .@ sndL) (("hi", 3), [7,8,9])\n-- 3\n--\n-- >>> setL (fstL .@ sndL) (("hi", 3), [7,8,9]) 4\n-- (("hi",4),[7,8,9])\n(.@) ::\n  Lens a b\n  -> Lens b c\n  -> Lens a c\nLens s1 g1 .@ Lens s2 g2 =\n  Lens (\\a -> s1 a . s2 (g1 a)) (g2 . g1)\n\n-- | Lens identity.\n-- Produce lens that /does nothing/.\n--\n-- prop> getL identityL (x :: Int) == x\n--\n-- prop> setL identityL x (y :: Int) == y\nidentityL ::\n  Lens a a\nidentityL =\n  Lens (const id) id\n\n-- | Lens modification.\n-- Given a lens and a modification function on the field object\n-- and a target object, return a target with the function applied at that field.\n--\n-- >>> modify fstL (+10) (4, "hi")\n-- (14,"hi")\nmodify ::\n  Lens a b\n  -> (b -> b)\n  -> a\n  -> a\nmodify (Lens s g) f a =\n  s a (f (g a))\n\niso ::\n  (a -> b)\n  -> (b -> a)\n  -> Lens a b\niso f g =\n  Lens (const g) f\n'