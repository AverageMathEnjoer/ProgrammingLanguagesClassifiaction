b'module Rest.Gen.NoAnnotation where\n\nimport qualified Language.Haskell.Exts as A\n\ntype Alt = A.Alt ()\ntype BangType = A.BangType ()\ntype Binds = A.Binds ()\ntype ClassDecl = A.ClassDecl ()\ntype Context = A.Context ()\ntype Decl = A.Decl ()\ntype DeclHead = A.DeclHead ()\ntype Exp = A.Exp ()\ntype ExportSpec = A.ExportSpec ()\ntype ExportSpecList = A.ExportSpecList ()\ntype FieldDecl = A.FieldDecl ()\ntype FieldUpdate = A.FieldUpdate ()\ntype GadtDecl = A.GadtDecl ()\ntype GuardedRhs = A.GuardedRhs ()\ntype ImportDecl = A.ImportDecl ()\ntype ImportSpec = A.ImportSpec ()\ntype Literal = A.Literal ()\ntype Match = A.Match ()\ntype Module = A.Module ()\ntype ModuleName = A.ModuleName ()\ntype ModulePragma = A.ModulePragma ()\ntype Name = A.Name ()\ntype Pat = A.Pat ()\ntype PatField = A.PatField ()\ntype QName = A.QName ()\ntype QOp = A.QOp ()\ntype QualConDecl = A.QualConDecl ()\ntype QualStmt = A.QualStmt ()\ntype Rhs = A.Rhs ()\ntype Sign = A.Sign ()\ntype SpecialCon = A.SpecialCon ()\ntype SrcLoc = A.SrcLoc\ntype SrcSpan = A.SrcSpan\ntype SrcSpanInfo = A.SrcSpanInfo\ntype Stmt = A.Stmt ()\ntype TyVarBind = A.TyVarBind ()\ntype Type = A.Type ()\ntype WarningText = A.WarningText ()\n'