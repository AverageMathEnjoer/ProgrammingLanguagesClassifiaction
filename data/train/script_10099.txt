b'module Main where\nimport Control.Monad (forM_)\nimport Text.Trifecta\nimport Text.Trifecta.Delta(Delta(..))\nimport Text.PrettyPrint.ANSI.Leijen(putDoc)\n\ndata Expr = Literal Integer\n          | Add Expr Expr\n          | Sub Expr Expr\n          | Mul Expr Expr\n          | Div Expr Expr\n\narithmeticExpr :: Parser Expr\narithmeticExpr = do\n  n  <- integer\n  x2 <- optional $ do\n    symbol "+"\n    arithmeticExpr\n  case x2 of\n    Nothing -> return $ Literal n\n    Just x -> return $ Add (Literal n) x\n\neval :: Expr -> Integer\neval (Literal n) = n\neval (Add x y) = eval x + eval y\n\n\nmain = do\n  con <- getContents\n  forM_ (lines con) $ \\str -> do\n    case parseString arithmeticExpr (Columns 0 0) str of\n      Failure doc -> do\n        putDoc doc\n        putStrLn "Parse error."\n      Success expr  -> print $ eval expr\n'