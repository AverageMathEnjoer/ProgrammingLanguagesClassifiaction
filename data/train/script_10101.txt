b'#include "stdafx.h"\n#include "Win32PluginManager.h"\n#include <filesystem>\n#include "../UABE_Generic/AppContext.h"\n#include "../UABE_Generic/FileContextInfo.h"\n#include <algorithm>\n\nIAssetListTabOptionProvider::IAssetListTabOptionProvider() {}\nIAssetViewEntryOptionProvider::IAssetViewEntryOptionProvider() {}\n\nvoid loadPlugin(Win32AppContext& appContext, PluginMapping& outMapping, const std::filesystem::path& path)\n{\n\tHMODULE hModule = LoadLibrary(path.c_str());\n\tif (hModule == NULL)\n\t\treturn;\n\tauto pGetDescCallback = reinterpret_cast<UABEGetPluginDescCallback1>(GetProcAddress(hModule, "GetUABEPluginDesc1"));\n\tIPluginDesc* pPluginDesc = nullptr;\n\tif (pGetDescCallback == nullptr || (pPluginDesc = pGetDescCallback(sizeof(AppContext), sizeof(BundleFileContextInfo))) == nullptr)\n\t{\n\t\tFreeLibrary(hModule);\n\t\treturn;\n\t}\n\toutMapping.descriptions.emplace_back(pPluginDesc);\n\tfor (std::shared_ptr<IOptionProvider> &pProvider : pPluginDesc->getPluginOptions(appContext))\n\t\toutMapping.options.emplace_back(pProvider);\n\t//TODO: Keep the HMODULE somewhere, so it can be unloaded during runtime.\n}\n\nvoid loadAllPlugins(Win32AppContext& appContext, PluginMapping& outMapping, const std::string& pluginsDir)\n{\n\t//Create a path object, treating pluginsDir as UTF-8 (C++20; older equivalent: std::filesystem::u8path(pluginsDir)).\n\tstd::filesystem::path pluginsDirPath(\n\t\treinterpret_cast<const char8_t*>(&pluginsDir.data()[0]),\n\t\treinterpret_cast<const char8_t*>(&pluginsDir.data()[pluginsDir.size()]));\n\t//Ignore errors accessing the directory.\n\tstd::error_code errc;\n\tfor (const auto& dirEntry : std::filesystem::directory_iterator(pluginsDirPath.make_preferred(), errc))\n\t{\n\t\tauto extension = dirEntry.path().extension().string();\n\t\tconst std::string expectedExtension(".bep");\n\t\tif (dirEntry.is_regular_file()\n\t\t\t&& std::equal(extension.begin(), extension.end(),\n\t\t\t\texpectedExtension.begin(), expectedExtension.end(),\n\t\t\t\t[](unsigned char is, unsigned char exp) { return std::tolower(is) == exp; }))\n\t\t{\n\t\t\tloadPlugin(appContext, outMapping, dirEntry.path());\n\t\t}\n\t}\n}\n\nsize_t ShowContextMenu(size_t numEntries, std::function<const char* (size_t)> entryNameGetter,\n\tUINT popupMenuFlags, LONG x, LONG y, HWND hParent,\n\tHMENU& hCurPopupMenu, size_t nMaxEntriesOnScreen)\n{\n\tauto displayPopupMenu = [numEntries, &entryNameGetter, popupMenuFlags, x, y, hParent, &hCurPopupMenu](size_t rangeMin, size_t rangeMax) {\n\t\tassert(rangeMax <= numEntries);\n\t\tif (rangeMax <= rangeMin || rangeMax > numEntries)\n\t\t\treturn (uintptr_t)0;\n\t\tif (hCurPopupMenu != NULL)\n\t\t\tDestroyMenu(hCurPopupMenu);\n\t\thCurPopupMenu = CreatePopupMenu();\n\t\tif (hCurPopupMenu == NULL)\n\t\t\treturn (uintptr_t)0;\n\t\tif (rangeMin > 0)\n\t\t\tAppendMenu(hCurPopupMenu, MF_STRING, 100, TEXT("..."));\n\t\tfor (size_t i = 0; i < rangeMax - rangeMin; ++i)\n\t\t{\n\t\t\tauto pOptionNameT = unique_MultiByteToTCHAR(entryNameGetter(i + rangeMin));\n\t\t\tAppendMenu(hCurPopupMenu, MF_STRING, 9000 + i, pOptionNameT.get());\n\t\t}\n\t\tif (rangeMax < numEntries)\n\t\t\tAppendMenu(hCurPopupMenu, MF_STRING, 101, TEXT("..."));\n\t\treturn static_cast<uintptr_t>(TrackPopupMenuEx(hCurPopupMenu, popupMenuFlags, x, y, hParent, NULL));\n\t};\n\tsize_t rangeMin = 0;\n\tsize_t rangeMax = std::min<size_t>(numEntries, nMaxEntriesOnScreen);\n\tsize_t ret = (size_t)-1;\n\twhile (uintptr_t selectedId = displayPopupMenu(rangeMin, rangeMax))\n\t{\n\t\tif (selectedId == 100) //Up\n\t\t{\n\t\t\trangeMin = std::max<size_t>(rangeMin, nMaxEntriesOnScreen) - nMaxEntriesOnScreen;\n\t\t\trangeMax = std::min<size_t>(numEntries, rangeMin + nMaxEntriesOnScreen);\n\t\t}\n\t\telse if (selectedId == 101) //Down\n\t\t{\n\t\t\trangeMax = std::min<size_t>(numEntries, rangeMax + nMaxEntriesOnScreen);\n\t\t\trangeMin = std::max<size_t>(rangeMax, nMaxEntriesOnScreen) - nMaxEntriesOnScreen;\n\t\t}\n\t\telse if (selectedId >= 9000 && selectedId < (9000 + (rangeMax - rangeMin)))\n\t\t{\n\t\t\tsize_t iOption = static_cast<size_t>(selectedId - 9000) + rangeMin;\n\t\t\tassert(iOption < numEntries);\n\t\t\tif (iOption < numEntries)\n\t\t\t\tret = iOption;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (hCurPopupMenu != NULL)\n\t{\n\t\tDestroyMenu(hCurPopupMenu);\n\t\thCurPopupMenu = NULL;\n\t}\n\treturn ret;\n}\n'