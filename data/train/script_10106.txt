b'{-# OPTIONS_GHC -fno-warn-dodgy-exports #-}\n\n-- | Finally tagless extension of SQL92 syntaxes for SQL99\nmodule Database.Beam.Backend.SQL.SQL99\n  ( module Database.Beam.Backend.SQL.SQL92\n  , IsSql99FunctionExpressionSyntax(..)\n  , IsSql99ExpressionSyntax(..)\n  , IsSql99ConcatExpressionSyntax(..)\n  , IsSql99AggregationExpressionSyntax(..)\n  , IsSql99CommonTableExpressionSelectSyntax(..)\n  , IsSql99CommonTableExpressionSyntax(..)\n  , IsSql99RecursiveCommonTableExpressionSelectSyntax(..)\n  , IsSql99SelectSyntax(..)\n  , IsSql99DataTypeSyntax(..) ) where\n\nimport Database.Beam.Backend.SQL.SQL92\n\nimport Data.Kind ( Type )\nimport Data.Text ( Text )\n\nclass IsSql92SelectSyntax select =>\n  IsSql99SelectSyntax select\n\nclass IsSql92ExpressionSyntax expr =>\n  IsSql99FunctionExpressionSyntax expr where\n\n  functionCallE :: expr -> [ expr ] -> expr\n  functionNameE :: Text -> expr\n\nclass IsSql99FunctionExpressionSyntax expr =>\n  IsSql99ExpressionSyntax expr where\n\n  distinctE :: Sql92ExpressionSelectSyntax expr -> expr\n  similarToE :: expr -> expr -> expr\n\n  instanceFieldE :: expr -> Text -> expr\n  refFieldE :: expr -> Text -> expr\n\nclass IsSql92ExpressionSyntax expr =>\n  IsSql99ConcatExpressionSyntax expr where\n  concatE :: [ expr ] -> expr\n\nclass IsSql92AggregationExpressionSyntax expr =>\n  IsSql99AggregationExpressionSyntax expr where\n  everyE, someE, anyE :: Maybe (Sql92AggregationSetQuantifierSyntax expr) -> expr -> expr\n\nclass IsSql92DataTypeSyntax dataType =>\n  IsSql99DataTypeSyntax dataType where\n  characterLargeObjectType :: dataType\n  binaryLargeObjectType :: dataType\n  booleanType :: dataType\n  arrayType :: dataType -> Int -> dataType\n  rowType :: [ (Text, dataType) ] -> dataType\n\nclass IsSql92SelectSyntax syntax =>\n  IsSql99CommonTableExpressionSelectSyntax syntax where\n  type Sql99SelectCTESyntax syntax :: Type\n\n  withSyntax :: [ Sql99SelectCTESyntax syntax ] -> syntax -> syntax\n\nclass IsSql99CommonTableExpressionSelectSyntax syntax\n    => IsSql99RecursiveCommonTableExpressionSelectSyntax syntax where\n\n  withRecursiveSyntax :: [ Sql99SelectCTESyntax syntax ] -> syntax -> syntax\n\nclass IsSql99CommonTableExpressionSyntax syntax where\n  type Sql99CTESelectSyntax syntax :: Type\n\n  cteSubquerySyntax :: Text -> [Text] -> Sql99CTESelectSyntax syntax -> syntax\n'