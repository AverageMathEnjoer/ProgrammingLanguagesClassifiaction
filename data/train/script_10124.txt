b'package com.codeest.geeknews.util;\r\n\r\nimport android.content.ClipData;\r\nimport android.content.ClipboardManager;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.graphics.Bitmap;\r\nimport android.net.ConnectivityManager;\r\nimport android.net.NetworkInfo;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.provider.MediaStore;\r\nimport android.support.v4.content.FileProvider;\r\nimport android.text.TextUtils;\r\nimport android.view.View;\r\n\r\nimport com.codeest.geeknews.app.App;\r\nimport com.codeest.geeknews.app.Constants;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileOutputStream;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\n\r\n/**\r\n * Created by codeest on 2016/8/4.\r\n */\r\npublic class SystemUtil {\r\n\r\n    /**\r\n     * \xe6\xa3\x80\xe6\x9f\xa5WIFI\xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9e\xe6\x8e\xa5\r\n     */\r\n    public static boolean isWifiConnected() {\r\n        ConnectivityManager connectivityManager = (ConnectivityManager) App.getInstance().getApplicationContext().getSystemService(Context.CONNECTIVITY_SERVICE);\r\n        NetworkInfo wifiInfo = connectivityManager\r\n                .getNetworkInfo(ConnectivityManager.TYPE_WIFI);\r\n        return wifiInfo != null;\r\n    }\r\n    /**\r\n     * \xe6\xa3\x80\xe6\x9f\xa5\xe6\x89\x8b\xe6\x9c\xba\xe7\xbd\x91\xe7\xbb\x9c(4G/3G/2G)\xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9e\xe6\x8e\xa5\r\n     */\r\n    public static boolean isMobileNetworkConnected() {\r\n        ConnectivityManager connectivityManager = (ConnectivityManager) App.getInstance().getApplicationContext().getSystemService(Context.CONNECTIVITY_SERVICE);\r\n        NetworkInfo mobileNetworkInfo = connectivityManager\r\n                .getNetworkInfo(ConnectivityManager.TYPE_MOBILE);\r\n        return mobileNetworkInfo != null;\r\n    }\r\n    /**\r\n     * \xe6\xa3\x80\xe6\x9f\xa5\xe6\x98\xaf\xe5\x90\xa6\xe6\x9c\x89\xe5\x8f\xaf\xe7\x94\xa8\xe7\xbd\x91\xe7\xbb\x9c\r\n     */\r\n    public static boolean isNetworkConnected() {\r\n        ConnectivityManager connectivityManager = (ConnectivityManager) App.getInstance().getApplicationContext().getSystemService(Context.CONNECTIVITY_SERVICE);\r\n        return connectivityManager.getActiveNetworkInfo() != null;\r\n    }\r\n\r\n    /**\r\n     * \xe4\xbf\x9d\xe5\xad\x98\xe6\x96\x87\xe5\xad\x97\xe5\x88\xb0\xe5\x89\xaa\xe8\xb4\xb4\xe6\x9d\xbf\r\n     * @param context\r\n     * @param text\r\n     */\r\n    public static void copyToClipBoard(Context context, String text) {\r\n        ClipData clipData = ClipData.newPlainText("url", text);\r\n        ClipboardManager manager = (ClipboardManager) context.getSystemService(Context.CLIPBOARD_SERVICE);\r\n        manager.setPrimaryClip(clipData);\r\n        ToastUtil.shortShow("\xe5\xb7\xb2\xe5\xa4\x8d\xe5\x88\xb6\xe5\x88\xb0\xe5\x89\xaa\xe8\xb4\xb4\xe6\x9d\xbf");\r\n    }\r\n\r\n    /**\r\n     * \xe4\xbf\x9d\xe5\xad\x98\xe5\x9b\xbe\xe7\x89\x87\xe5\x88\xb0\xe6\x9c\xac\xe5\x9c\xb0\r\n     * @param context\r\n     * @param url\r\n     * @param bitmap\r\n     */\r\n    public static Uri saveBitmapToFile(Context context, String url, Bitmap bitmap,View container, boolean isShare){\r\n        String fileName = url.substring(url.lastIndexOf("/"),url.lastIndexOf(".")) + ".png";\r\n        File fileDir = new File(Constants.PATH_SDCARD);\r\n        if (!fileDir.exists()){\r\n            fileDir.mkdirs();\r\n        }\r\n        File imageFile = new File(fileDir,fileName);\r\n        Uri uri = Uri.fromFile(imageFile);\r\n        if (isShare && imageFile.exists()) {\r\n            if (Build.VERSION.SDK_INT >= 24) {\r\n                uri = FileProvider.getUriForFile(context.getApplicationContext(),\r\n                        Constants.FILE_PROVIDER_AUTHORITY, imageFile);\r\n            }\r\n            return uri;\r\n        }\r\n        try {\r\n            FileOutputStream fos = new FileOutputStream(imageFile);\r\n            boolean isCompress = bitmap.compress(Bitmap.CompressFormat.PNG, 90, fos);\r\n            if (isCompress) {\r\n                SnackbarUtil.showShort(container,"\xe4\xbf\x9d\xe5\xad\x98\xe5\xa6\xb9\xe7\xba\xb8\xe6\x88\x90\xe5\x8a\x9fn(*\xe2\x89\xa7\xe2\x96\xbd\xe2\x89\xa6*)n");\r\n            } else {\r\n                SnackbarUtil.showShort(container,"\xe4\xbf\x9d\xe5\xad\x98\xe5\xa6\xb9\xe7\xba\xb8\xe5\xa4\xb1\xe8\xb4\xa5\xe3\x83\xbd(\xe2\x89\xa7\xd0\x94\xe2\x89\xa6)\xe3\x83\x8e");\r\n            }\r\n            fos.flush();\r\n            fos.close();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n            SnackbarUtil.showShort(container,"\xe4\xbf\x9d\xe5\xad\x98\xe5\xa6\xb9\xe7\xba\xb8\xe5\xa4\xb1\xe8\xb4\xa5\xe3\x83\xbd(\xe2\x89\xa7\xd0\x94\xe2\x89\xa6)\xe3\x83\x8e");\r\n        }\r\n        try {\r\n            MediaStore.Images.Media.insertImage(context.getContentResolver(), imageFile.getAbsolutePath(), fileName, null);\r\n        } catch (FileNotFoundException e) {\r\n            e.printStackTrace();\r\n        }\r\n        context.sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE,uri));\r\n        if (Build.VERSION.SDK_INT >= 24) {\r\n            uri = FileProvider.getUriForFile(context.getApplicationContext(),\r\n                    Constants.FILE_PROVIDER_AUTHORITY, imageFile);\r\n        }\r\n        return uri;\r\n    }\r\n\r\n    /**\r\n     * \xe6\xa0\xb9\xe6\x8d\xae\xe6\x89\x8b\xe6\x9c\xba\xe7\x9a\x84\xe5\x88\x86\xe8\xbe\xa8\xe7\x8e\x87\xe4\xbb\x8e dp \xe7\x9a\x84\xe5\x8d\x95\xe4\xbd\x8d \xe8\xbd\xac\xe6\x88\x90\xe4\xb8\xba px(\xe5\x83\x8f\xe7\xb4\xa0)\r\n     */\r\n    public static int dp2px(Context context, float dpValue) {\r\n        final float scale = context.getResources().getDisplayMetrics().density;\r\n        return (int) (dpValue * scale + 0.5f);\r\n    }\r\n\r\n    public static int dp2px(float dpValue) {\r\n        final float scale = App.getInstance().getResources().getDisplayMetrics().density;\r\n        return (int) (dpValue * scale + 0.5f);\r\n    }\r\n\r\n    /**\r\n     * \xe6\xa0\xb9\xe6\x8d\xae\xe6\x89\x8b\xe6\x9c\xba\xe7\x9a\x84\xe5\x88\x86\xe8\xbe\xa8\xe7\x8e\x87\xe4\xbb\x8e px(\xe5\x83\x8f\xe7\xb4\xa0) \xe7\x9a\x84\xe5\x8d\x95\xe4\xbd\x8d \xe8\xbd\xac\xe6\x88\x90\xe4\xb8\xba dp\r\n     */\r\n    public static int px2dp(Context context, float pxValue) {\r\n        final float scale = context.getResources().getDisplayMetrics().density;\r\n        return (int) (pxValue / scale + 0.5f);\r\n    }\r\n\r\n    public static int px2dp(float pxValue) {\r\n        final float scale = App.getInstance().getResources().getDisplayMetrics().density;\r\n        return (int) (pxValue / scale + 0.5f);\r\n    }\r\n\r\n    /**\r\n     * \xe8\x8e\xb7\xe5\x8f\x96\xe8\xbf\x9b\xe7\xa8\x8b\xe5\x8f\xb7\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe5\x90\x8d\r\n     *\r\n     * @param pid \xe8\xbf\x9b\xe7\xa8\x8b\xe5\x8f\xb7\r\n     * @return \xe8\xbf\x9b\xe7\xa8\x8b\xe5\x90\x8d\r\n     */\r\n    public static String getProcessName(int pid) {\r\n        BufferedReader reader = null;\r\n        try {\r\n            reader = new BufferedReader(new FileReader("/proc/" + pid + "/cmdline"));\r\n            String processName = reader.readLine();\r\n            if (!TextUtils.isEmpty(processName)) {\r\n                processName = processName.trim();\r\n            }\r\n            return processName;\r\n        } catch (Throwable throwable) {\r\n            throwable.printStackTrace();\r\n        } finally {\r\n            try {\r\n                if (reader != null) {\r\n                    reader.close();\r\n                }\r\n            } catch (IOException exception) {\r\n                exception.printStackTrace();\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n'