b'-- % cabal install hspec\n-- % runghc <this_file>\n\nimport Small\n\nmain :: IO ()\nmain = hspec $ do\n    describe "my_soap" $\n      prop "behaves as model" $ \\(Small n) -> n >= 0\n        ==> my_soap n == sum [0..n]\n    describe "my_fact" $\n      prop "behaves as model" $ \\(Small n) -> n >= 1\n        ==> my_fact n == product [1..n]\n    describe "my_mul" $\n      prop "behaves as model" $ \\(Small m) (Small n) -> m >= 1 && n >= 1\n        ==> my_mul m n == m * n\n    describe "my_plus" $\n      prop "behaves as model" $ \\(Small m) (Small n) -> m >= 0 && n >= 0\n        ==> my_plus m n == m + n\n    describe "my_minus" $\n      prop "behaves as model" $ \\(Small m) (Small n) -> m >= 0 && n >= 0\n        ==> my_minus m n == m - n\n    describe "my_power" $\n      prop "behaves as model" $ \\(Small m) (Small n) -> m >= 1 && n >= 0\n        ==> my_power m n == m ^ n\n\nmy_soap :: Integer -> Integer\nmy_soap 0 = 0\nmy_soap n = my_soap (n-1) + n\n\nmy_fact :: Integer -> Integer\nmy_fact 1 = 1\nmy_fact n = my_fact (n - 1) * n\n\nmy_mul :: Integer -> Integer -> Integer\nmy_mul m 1 = m\nmy_mul m n = my_mul m (n - 1) + m\n\nmy_plus :: Integer -> Integer -> Integer\nmy_plus = undefined\n\nmy_minus :: Integer -> Integer -> Integer\nmy_minus = undefined\n\nmy_power :: Integer -> Integer -> Integer\nmy_power = undefined\n'