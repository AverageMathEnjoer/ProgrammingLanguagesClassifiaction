b'package com.github.eprendre.videosource\n\nimport com.github.eprendre.tingshu.extensions.config\nimport com.github.eprendre.tingshu.sources.AudioUrlDirectExtractor\nimport com.github.eprendre.tingshu.sources.AudioUrlExtractor\nimport com.github.eprendre.tingshu.sources.TingShu\nimport com.github.eprendre.tingshu.utils.*\nimport org.jsoup.Jsoup\nimport java.net.URLEncoder\n\nobject NiuNiu : TingShu() {\n    override fun getSourceId(): String {\n        return "8eb0da4061a4448e85c30fd683c13d99"\n    }\n\n    override fun getUrl(): String {\n        return "http://www.ziliao6.com/tv/"\n    }\n\n    override fun getName(): String {\n        return "\xe7\x89\x9b\xe7\x89\x9bTV"\n    }\n\n    override fun getDesc(): String {\n        return "\xe5\x8f\x97\xe9\xa1\xb5\xe9\x9d\xa2\xe7\xbb\x93\xe6\x9e\x84\xe9\x99\x90\xe5\x88\xb6\xef\xbc\x8c\xe6\xad\xa4\xe6\xba\x90\xe4\xb8\x8d\xe6\x94\xaf\xe6\x8c\x81\xe7\xab\xa0\xe8\x8a\x82\xe5\x88\x97\xe8\xa1\xa8\xe7\x9a\x84\xe5\x88\xb7\xe6\x96\xb0\xef\xbc\x8c\xe8\x8b\xa5\xe6\x9c\x89\xe6\x9b\xb4\xe6\x96\xb0\xe8\xaf\xb7\xe5\x8e\xbb\xe9\x87\x8d\xe6\x96\xb0\xe6\x90\x9c\xe7\xb4\xa2\xe6\x89\x93\xe5\xbc\x80\xe3\x80\x82"\n    }\n\n    override fun search(keywords: String, page: Int): Pair<List<Book>, Int> {\n        val encodedKeywords = URLEncoder.encode(keywords, "utf-8")\n        val url = "http://www.ziliao6.com/tv/?name=${encodedKeywords}"\n        val doc = Jsoup.connect(url).config(false).get()\n\n        val list = ArrayList<Book>()\n\n        doc.selectFirst(".alert.alert-info").children()\n            .forEach { element ->\n                val coverUrl = ""\n                if (element.`is`("details")) {\n                    val title = element.selectFirst("summary").ownText()\n                    val bookUrl = element.select("ul > a").filter { a ->\n                        a.text().isNotEmpty()\n                    }.joinToString(separator = ",") { a ->\n                        return@joinToString a.text() + "&&" + a.absUrl("href")\n                    }\n                    list.add(Book(coverUrl, bookUrl, title, "", "").apply {\n                        this.sourceId = getSourceId()\n                    })\n                } else if(element.`is`("a")) {\n                    val title = element.text()\n                    val bookUrl = title + "&&" + element.absUrl("href")\n                    list.add(Book(coverUrl, bookUrl, title, "", "").apply {\n                        this.sourceId = getSourceId()\n                    })\n                }\n            }\n        return Pair(list, 1)\n    }\n\n    override fun isCacheable(): Boolean {\n        return false\n    }\n\n    override fun isDiscoverable(): Boolean {\n        return false\n    }\n\n    override fun isWebViewNotRequired(): Boolean {\n        return true\n    }\n\n    override fun getAudioUrlExtractor(): AudioUrlExtractor {\n        return AudioUrlDirectExtractor\n    }\n\n    override fun getCategoryMenus(): List<CategoryMenu> {\n        return emptyList()\n    }\n\n    override fun getCategoryList(url: String): Category {\n        return Category(emptyList(), 0, 0, "", "")\n    }\n\n    override fun getBookDetailInfo(bookUrl: String, loadEpisodes: Boolean, loadFullPages: Boolean): BookDetail {\n        val episodes = ArrayList<Episode>()\n        bookUrl.split(",").forEach {\n            val params = it.split("&&")\n            val e = Episode(params[0], params[1])\n            episodes.add(e)\n        }\n        return BookDetail(episodes)\n    }\n}'