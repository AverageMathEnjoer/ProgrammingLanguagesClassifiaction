b'\n-- | Utils\n\nmodule Pdf.Core.Parsers.Util\n( endOfLine\n, skipSpace\n)\nwhere\n\nimport Data.Attoparsec.ByteString (Parser)\nimport qualified Data.Attoparsec.ByteString.Char8 as P\nimport Control.Applicative (many)\n\n-- | In pdf file EOL could be \\"\\\\n\\", \\"\\\\r\\" or \\"\\\\n\\\\r\\"\n--\n-- Also space (0x20) is usually ok before EOL\nendOfLine :: Parser ()\nendOfLine = do\n  _ <- many $ P.char \' \'\n  P.choice [\n    P.endOfLine, -- it already handles both the \\n and \\n\\r\n    P.char \'\\r\' >>= const (return ())\n    ]\n\nskipSpace :: Parser ()\nskipSpace = do\n  P.skipSpace\n  _ <- many (skipComment *> P.skipSpace)\n  return ()\n\nskipComment :: Parser ()\nskipComment = do\n  _ <- P.char \'%\'\n  P.skipWhile (`notElem` "\\r\\n")\n'