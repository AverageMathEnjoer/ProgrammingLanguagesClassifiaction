b'//Given: An array A with all elements occuring twice except for x and y that occur once.\n//To Do: Find the x and y in O(1) space and O(N) time\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 1e6;\nint arr[N];\n\nbool hasBitSet(int n, int x) {\n\tint tem = n & (1<<x);\n\treturn tem!=0;\n}\n\nint main() {\n\tint n;\n\tcin >> n;\n\t\n\tint all = 0;\n\tint ans[2] = {0,0};\n\t\n\tfor(int i=0; i<n; i++){\n\t\tcin >> arr[i];\n\t\tall ^= arr[i];\n\t}\n\t\n\t//assert(all != 0); \n\tint k = 0;\n\twhile( hasBitSet(all, k) == 0 ) k++;\n\t\n\t//parition array into two sets: kth bit on v/s off\n\tfor (int i=0; i<n; i++) {\n\t\tans[hasBitSet(arr[i], k)] ^= arr[i];\n\t}\n\t\n\tcout << ans[0] << " " << ans[1] << endl;\n\treturn 0;\n}\n'