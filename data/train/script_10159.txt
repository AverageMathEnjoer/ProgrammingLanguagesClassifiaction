b'package com.github.eprendre.sources_by_eprendre\n\nimport com.github.eprendre.tingshu.extensions.config\nimport com.github.eprendre.tingshu.extensions.getCurrentBook\nimport com.github.eprendre.tingshu.sources.*\nimport com.github.eprendre.tingshu.utils.*\nimport org.jsoup.Jsoup\nimport java.lang.Exception\nimport java.net.URLEncoder\n\nobject TingChina : TingShu(), AudioUrlExtraHeaders {\n    override fun getSourceId(): String {\n        return "5027db6a06934655a73aa99945034c97"\n    }\n\n    override fun getUrl(): String {\n        return "https://www.tingchina.com"\n    }\n\n    override fun getName(): String {\n        return "\xe5\x90\xac\xe4\xb8\xad\xe5\x9b\xbd"\n    }\n\n    override fun getDesc(): String {\n        return "\xe6\x8e\xa8\xe8\x8d\x90\xe6\x8c\x87\xe6\x95\xb0:4\xe6\x98\x9f \xe2\xad\x90\xe2\xad\x90\xe2\xad\x90\xe2\xad\x90\\n\xe9\x80\x9f\xe5\xba\xa6\xe4\xb8\x8d\xe9\x94\x99, \xe8\xb5\x84\xe6\xba\x90\xe7\xa8\xb3\xe5\xae\x9a"\n    }\n\n    override fun getCategoryMenus(): List<CategoryMenu> {\n        val menu1 = CategoryMenu(\n            "\xe6\x9c\x89\xe5\xa3\xb0\xe5\xb0\x8f\xe8\xaf\xb4", listOf(\n                CategoryTab("\xe7\x8e\x84\xe5\xb9\xbb\xe5\xa5\x87\xe5\xb9\xbb", "http://www.tingchina.com/yousheng/lei_135_1.htm"),\n                CategoryTab("\xe7\xbd\x91\xe7\xbb\x9c\xe7\x83\xad\xe9\x97\xa8", "http://www.tingchina.com/yousheng/lei_146_1.htm"),\n                CategoryTab("\xe7\xa7\x91\xe5\xb9\xbb\xe6\x9c\x89\xe5\xa3\xb0", "http://www.tingchina.com/yousheng/lei_128_1.htm"),\n                CategoryTab("\xe6\xad\xa6\xe4\xbe\xa0\xe5\xb0\x8f\xe8\xaf\xb4", "http://www.tingchina.com/yousheng/lei_133_1.htm"),\n                CategoryTab("\xe9\x83\xbd\xe5\xb8\x82\xe8\xa8\x80\xe6\x83\x85", "http://www.tingchina.com/yousheng/lei_125_1.htm"),\n                CategoryTab("\xe9\xac\xbc\xe6\x95\x85\xe4\xba\x8b", "http://www.tingchina.com/yousheng/lei_129_1.htm"),\n                CategoryTab("\xe5\x8e\x86\xe5\x8f\xb2\xe5\x86\x9b\xe4\xba\x8b", "http://www.tingchina.com/yousheng/lei_130_1.htm"),\n                CategoryTab("\xe5\xae\x98\xe5\x9c\xba\xe5\x95\x86\xe6\x88\x98", "http://www.tingchina.com/yousheng/lei_126_1.htm"),\n                CategoryTab("\xe5\x88\x91\xe4\xbe\xa6\xe6\x8e\xa8\xe7\x90\x86", "http://www.tingchina.com/yousheng/lei_134_1.htm"),\n                CategoryTab("\xe7\xbb\x8f\xe5\x85\xb8\xe7\xba\xaa\xe5\xae\x9e", "http://www.tingchina.com/yousheng/lei_127_1.htm"),\n                CategoryTab("\xe9\x80\x9a\xe4\xbf\x97\xe6\x96\x87\xe5\xad\xa6", "http://www.tingchina.com/yousheng/lei_132_1.htm"),\n                CategoryTab("\xe4\xba\xba\xe7\x89\xa9\xe4\xbc\xa0\xe8\xae\xb0", "http://www.tingchina.com/yousheng/lei_131_1.htm")\n            )\n        )\n\n        val menu2 = CategoryMenu(\n            "\xe8\xaf\x84\xe4\xb9\xa6\xe5\xa4\xa7\xe5\x85\xa8", listOf(\n                CategoryTab("\xe5\x8d\x95\xe7\x94\xb0\xe8\x8a\xb3", "http://www.tingchina.com/pingshu/lei_136_1.htm"),\n                CategoryTab("\xe7\x94\xb0\xe8\xbf\x9e\xe5\x85\x83", "http://www.tingchina.com/pingshu/lei_141_1.htm"),\n                CategoryTab("\xe8\xa2\x81\xe9\x98\x94\xe6\x88\x90", "http://www.tingchina.com/pingshu/lei_143_1.htm"),\n                CategoryTab("\xe8\xbf\x9e\xe4\xb8\xbd\xe5\xa6\x82", "http://www.tingchina.com/pingshu/lei_137_1.htm"),\n                CategoryTab("\xe5\xbc\xa0\xe5\xb0\x91\xe4\xbd\x90", "http://www.tingchina.com/pingshu/lei_145_1.htm"),\n                CategoryTab("\xe5\xad\x99\xe4\xb8\x80", "http://www.tingchina.com/pingshu/lei_140_1.htm"),\n                CategoryTab("\xe7\x94\xb0\xe6\x88\x98\xe4\xb9\x89", "http://www.tingchina.com/pingshu/lei_142_1.htm"),\n                CategoryTab("\xe7\xb2\xa4\xe8\xaf\xad\xe8\xaf\x84\xe4\xb9\xa6", "http://www.tingchina.com/pingshu/lei_144_1.htm"),\n                CategoryTab("\xe5\x85\xb6\xe4\xbb\x96\xe8\xaf\x84\xe4\xb9\xa6", "http://www.tingchina.com/pingshu/lei_139_1.htm")\n\n            )\n        )\n        return listOf(menu1, menu2)\n    }\n\n    override fun search(keywords: String, page: Int): Pair<List<Book>, Int> {\n        val encodedKeywords = URLEncoder.encode(keywords, "gb2312")\n        val totalPage = 1\n        val list = ArrayList<Book>()\n        val categories = listOf("0", "1", "2")\n        for (category in categories) {\n            try {\n                searchCategory(list, category, encodedKeywords)\n            } catch (e: Exception) {\n                e.printStackTrace()\n            }\n        }\n        return Pair(list, totalPage)\n    }\n\n    private fun searchCategory(list: ArrayList<Book>, category: String, keywords: String) {\n        val url = "http://www.tingchina.com/search1.asp?mainlei=$category&lei=0&keyword=$keywords"\n        val doc = Jsoup.connect(url).config(true).get()\n        val elementList = doc.select(".singerlist1 dd ul li a")\n        elementList.forEach { element ->\n            val bookUrl = element.absUrl("href")\n            val title = element.text()\n            val book = Book("", bookUrl, title, "", "")\n            book.sourceId = getSourceId()\n            list.add(book)\n        }\n    }\n\n    override fun getBookDetailInfo(bookUrl: String, loadEpisodes: Boolean, loadFullPages: Boolean): BookDetail {\n        //\xe8\x8e\xb7\xe5\x8f\x96\xe7\xab\xa0\xe8\x8a\x82\xe5\x88\x97\xe8\xa1\xa8\n        val doc = Jsoup.connect(bookUrl).config(true).get()\n        val episodes = doc.select(".main03 .list a").map {\n            Episode(it.text(), it.attr("abs:href"))\n        }\n        var coverUrl = ""\n        var author = ""\n        var artist = ""\n//        var status = ""\n        var intro = ""\n        val book01 = doc.selectFirst(".book01")\n        if (book01 != null) {\n            coverUrl = book01.selectFirst("img").absUrl("src")\n            val lis = book01.select("ul li")\n            author = lis[5].text()\n            artist = lis[4].text()\n//            status = lis[6].text()\n            intro = doc.selectFirst(".book02").ownText()\n        }\n        val book03 = doc.selectFirst(".book03")\n        if (book03 != null) {\n            coverUrl = "none"\n            val lis = book03.select("ul > li")\n//            status = lis[1].text()\n            intro = lis[3].text()\n        }\n\n        return BookDetail(episodes, intro, artist, author, coverUrl = coverUrl)\n    }\n\n    override fun getAudioUrlExtractor(): AudioUrlExtractor {\n        AudioUrlWebViewExtractor.setUp(true) { html ->\n            val doc = Jsoup.parse(html)\n            return@setUp doc.selectFirst("#wjAudio").attr("src")\n        }\n        return AudioUrlWebViewExtractor\n    }\n\n    override fun getCategoryList(url: String): Category {\n        val doc = Jsoup.connect(url).config(true).get()\n        val pages = doc.selectFirst(".yema > span").children()\n        val currentPage = Regex(".+lei_\\\\d+_(\\\\d+)\\\\.htm").find(url)!!.groupValues[1].toInt()\n        var totalPage = currentPage\n        if (pages.last().absUrl("href") != url) {\n            totalPage = currentPage + 1\n        }\n        var nextUrl = ""\n        if (currentPage != totalPage) {\n            val index = pages.indexOfFirst { it.text() == currentPage.toString() }\n            nextUrl = pages[index + 1].absUrl("href")\n        }\n\n        val list = ArrayList<Book>()\n        val elementList = doc.select(".zimulist > dl")\n        elementList.forEach { element ->\n            val coverUrl = element.selectFirst("dt > a > img").absUrl("src")\n            val titleElement = element.selectFirst("dd > a")\n            val bookUrl = titleElement.absUrl("href")\n            val title = titleElement.text().trim()\n            val status = element.selectFirst("dd").ownText().split("\xe3\x80\x80")[0]\n            val author = ""\n            val artist = ""\n//            val (title, author, artist) = titleElement.text().split(" ").let {\n//                val i = it[0].replace("\xe3\x80\x8a", "").replace("\xe3\x80\x8b", "")\n//                val j = if (it.size > 2) it[1] else "" //\xe5\xa4\xa7\xe4\xba\x8e2\xe4\xbb\xa3\xe8\xa1\xa8\xe4\xb8\x8d\xe6\x98\xaf\xe8\xaf\x84\xe4\xb9\xa6\n//                val k = if (it.size > 2) {\n//                    if (it.size > 3) {\n//                        val temp = StringBuilder()\n//                        (2 until (it.size - 1)).forEach { index ->\n//                            temp.append(it[index])\n//                            temp.append(" ")\n//                        }\n//                        temp.append(it.last().split("\xe3\x80\x80")[0])\n//                        temp.toString()\n//                    } else {\n//                        it[2].split("\xe3\x80\x80")[0]\n//                    }\n//                } else ""\n//\n//                status = if (it.size > 2) {\n//                    it.last().split("\xe3\x80\x80")[1]\n//                } else{\n//                    it[1]\n//                }\n//                Triple(i, j, k)\n//            }\n//            val intro = element.selectFirst("dd .info").ownText()\n            list.add(Book(coverUrl, bookUrl, title, author, artist).apply {\n                this.status = status\n                this.sourceId = getSourceId()\n            })\n        }\n        return Category(list, currentPage, totalPage, url, nextUrl)\n    }\n\n    override fun headers(audioUrl: String): Map<String, String> {\n        val hashMap = hashMapOf<String, String>()\n        if (audioUrl.contains("tingchina.com")) {\n            hashMap["Referer"] = getCurrentBook()?.currentEpisodeUrl ?: "https://www.tingchina.com/"\n        }\n        return hashMap\n    }\n}'