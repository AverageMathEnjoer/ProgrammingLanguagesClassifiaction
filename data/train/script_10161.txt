b'package com.github.eprendre.sources_by_eprendre\n\nimport com.github.eprendre.tingshu.extensions.config\nimport com.github.eprendre.tingshu.sources.AudioUrlExtractor\nimport com.github.eprendre.tingshu.sources.AudioUrlWebViewExtractor\nimport com.github.eprendre.tingshu.sources.TingShu\nimport com.github.eprendre.tingshu.utils.*\nimport org.jsoup.Jsoup\n\nobject Wap520 : TingShu() {\n    override fun getSourceId(): String {\n        return "2f7c45c8fd1141e9a433e062afbd6f5a"\n    }\n\n    override fun getUrl(): String {\n        return "http://wap.fushu520.com/"\n    }\n\n    override fun getName(): String {\n        return "520\xe5\x90\xac\xe4\xb9\xa6\xe7\xbd\x91v2"\n    }\n\n    override fun isDiscoverable(): Boolean {\n        return false\n    }\n\n    override fun isSearchable(): Boolean {\n        return false\n    }\n\n    override fun getDesc(): String {\n        return "\xe6\x8e\xa8\xe8\x8d\x90\xe6\x8c\x87\xe6\x95\xb0:2\xe6\x98\x9f \xe2\xad\x90\xe2\xad\x90\\n\xe5\x8f\xa6\xe4\xb8\x80\xe4\xb8\xaa520\xe5\x90\xac\xe4\xb9\xa6\xe7\xbd\x91, \xe8\x99\xbd\xe5\x90\x8c\xe5\x90\x8d\xe5\xba\x94\xe8\xaf\xa5\xe4\xb8\x8d\xe6\x98\xaf\xe5\x90\x8c\xe4\xb8\x80\xe4\xb8\xaa\xe3\x80\x82\xe6\xad\xa4\xe6\xba\x90\xe8\xb4\xa8\xe9\x87\x8f\xe4\xb8\x8d\xe8\xa1\x8c\xef\xbc\x8c\xe7\xa6\x81\xe7\x94\xa8\xe4\xb9\x8b\xe3\x80\x82"\n    }\n\n    override fun search(keywords: String, page: Int): Pair<List<Book>, Int> {\n        val url = "http://wap.fushu520.com/search.html"\n        val requestParams = mapOf("searchword" to keywords, "searchtype" to "novelname")\n\n        val doc = Jsoup.connect(url)\n            .config(false)\n            .headers(mapOf("Referer" to "http://wap.fushu520.com/"))\n            .data(requestParams)\n            .post()\n\n        val list = ArrayList<Book>()\n\n        val elementList = doc.select(".book-ol > .book-li")\n        elementList.forEach { item ->\n            var coverUrl = item.selectFirst(".book-cover").attr("data-original")\n            if (coverUrl.startsWith("/")) {\n                coverUrl = "http://wap.fushu520.com$coverUrl"\n            }\n            val bookUrl = item.selectFirst("a").absUrl("href")\n            val title = item.selectFirst(".book-title").text().trim()\n            val a = item.selectFirst(".book-meta").text().trim().split(" ")\n            var author = ""\n            var artist = ""\n            if (a.isNotEmpty()) {\n                author = a[0]\n                if (a.size > 1) {\n                    artist = a[1]\n                }\n            }\n            val intro = item.selectFirst(".book-desc").text().trim()\n            list.add(Book(coverUrl, bookUrl, title, author, artist).apply {\n                this.intro = intro\n                this.sourceId = getSourceId()\n            })\n        }\n\n        return Pair(list, 1)\n    }\n\n    override fun getAudioUrlExtractor(): AudioUrlExtractor {\n        AudioUrlWebViewExtractor.setUp(isDeskTop = false, script = "document.getElementById(\'play\').contentDocument.getElementById(\'jp_audio_0\').getAttribute(\'src\')") {\n            return@setUp it.replace("\\"", "")\n        }\n        return AudioUrlWebViewExtractor\n    }\n\n    override fun getCategoryMenus(): List<CategoryMenu> {\n        val menu1 = CategoryMenu(\n            "\xe6\x9c\x89\xe5\xa3\xb0\xe5\xb0\x8f\xe8\xaf\xb4", listOf(\n                CategoryTab("\xe7\x8e\x84\xe5\xb9\xbb\xe6\x9c\x89\xe5\xa3\xb0", "http://wap.fushu520.com/sort/xuanhuan.html"),\n                CategoryTab("\xe7\x9b\xb8\xe5\xa3\xb0\xe5\xb0\x8f\xe5\x93\x81", "http://wap.fushu520.com/sort/xiangsheng.html"),\n                CategoryTab("\xe7\xbb\xbc\xe8\x89\xba\xe5\xa8\xb1\xe4\xb9\x90", "http://wap.fushu520.com/sort/yule.html"),\n                CategoryTab("\xe9\x95\xbf\xe7\xaf\x87\xe8\xaf\x84\xe4\xb9\xa6", "http://wap.fushu520.com/sort/pingshu.html"),\n                CategoryTab("\xe9\x83\xbd\xe5\xb8\x82\xe6\x9c\x89\xe5\xa3\xb0", "http://wap.fushu520.com/sort/dushi.html"),\n                CategoryTab("\xe7\x99\xbe\xe5\xae\xb6\xe8\xae\xb2\xe5\x9d\x9b", "http://wap.fushu520.com/sort/bjjt.html"),\n                CategoryTab("\xe5\x86\x9b\xe4\xba\x8b\xe6\x9c\x89\xe5\xa3\xb0", "http://wap.fushu520.com/sort/junshi.html"),\n                CategoryTab("\xe5\x84\xbf\xe7\xab\xa5\xe6\x95\x85\xe4\xba\x8b", "http://wap.fushu520.com/sort/ertong.html"),\n                CategoryTab("\xe7\xbd\x91\xe6\xb8\xb8\xe7\xab\x9e\xe6\x8a\x80", "http://wap.fushu520.com/sort/jingji.html"),\n                CategoryTab("\xe7\xa7\x91\xe5\xb9\xbb", "http://wap.fushu520.com/sort/kehuan.html"),\n                CategoryTab("\xe7\x81\xb5\xe5\xbc\x82\xe6\x9c\x89\xe5\xa3\xb0", "http://wap.fushu520.com/sort/lingyi.html"),\n                CategoryTab("\xe8\x81\x8c\xe5\x9c\xba\xe6\x9c\x89\xe5\xa3\xb0", "http://wap.fushu520.com/sort/tongren.html"),\n                CategoryTab("\xe5\xa5\xb3\xe7\x94\x9f", "http://wap.fushu520.com/sort/nvsheng.html"),\n                CategoryTab("\xe5\x85\xb6\xe4\xbb\x96\xe6\x9c\x89\xe5\xa3\xb0", "http://wap.fushu520.com/sort/qita.html")\n            )\n        )\n\n        val menu2 = CategoryMenu(\n            "\xe9\x95\xbf\xe7\xaf\x87\xe8\xaf\x84\xe4\xb9\xa6", listOf(\n                CategoryTab("\xe5\x8d\x95\xe7\x94\xb0\xe8\x8a\xb3", "http://wap.fushu520.com/boyin/119"),\n                CategoryTab("\xe7\x94\xb0\xe8\xbf\x9e\xe5\x85\x83", "http://wap.fushu520.com/boyin/131"),\n                CategoryTab("\xe8\xa2\x81\xe9\x98\x94\xe6\x88\x90", "http://wap.fushu520.com/boyin/123"),\n                CategoryTab("\xe8\xbf\x9e\xe4\xb8\xbd\xe5\xa6\x82", "http://wap.fushu520.com/boyin/103"),\n                CategoryTab("\xe5\xbc\xa0\xe5\xb0\x91\xe4\xbd\x90", "http://wap.fushu520.com/boyin/120"),\n                CategoryTab("\xe5\xad\x99\xe4\xb8\x80", "http://wap.fushu520.com/boyin/101"),\n                CategoryTab("\xe7\x94\xb0\xe6\x88\x98\xe4\xb9\x89", "http://wap.fushu520.com/boyin/121"),\n                CategoryTab("\xe7\xb2\xa4\xe8\xaf\xad\xe8\xaf\x84\xe4\xb9\xa6", "http://wap.fushu520.com/boyin/130"),\n                CategoryTab("\xe5\x85\xb6\xe4\xbb\x96\xe8\xaf\x84\xe4\xb9\xa6", "http://wap.fushu520.com/boyin/122")\n            )\n        )\n        return listOf(menu1, menu2)\n    }\n\n    override fun getCategoryList(url: String): Category {\n        val doc = Jsoup.connect(url)\n            .config(false)\n            .headers(mapOf("Referer" to "http://wap.fushu520.com/"))\n            .get()\n\n        val nextUrl = doc.selectFirst(".paging > .next").absUrl("href")\n        val totalPage = Regex(".+\\\\/(\\\\d+)\\\\.html").find(nextUrl)!!.groupValues[1].toInt()\n        val currentPage = if (url == nextUrl) {\n            totalPage\n        } else {\n            totalPage - 1\n        }\n\n        val list = ArrayList<Book>()\n\n        val elementList = doc.select(".book-ol > .book-li")\n        elementList.forEach { item ->\n            var coverUrl = item.selectFirst(".book-cover").attr("data-original")\n            if (coverUrl.startsWith("/")) {\n                coverUrl = "http://wap.fushu520.com$coverUrl"\n            }\n            val bookUrl = item.selectFirst("a").absUrl("href")\n            val title = item.selectFirst(".book-title").text().trim()\n            val a = item.selectFirst(".book-meta").text().trim().split(" ")\n            var author = ""\n            var artist = ""\n            if (a.isNotEmpty()) {\n                author = a[0]\n                if (a.size > 1) {\n                    artist = a[1]\n                }\n            }\n            val intro = item.selectFirst(".book-desc").text().trim()\n            list.add(Book(coverUrl, bookUrl, title, author, artist).apply {\n                this.intro = intro\n                this.sourceId = getSourceId()\n            })\n        }\n        return Category(list, currentPage, totalPage, url, nextUrl)\n    }\n\n    override fun getBookDetailInfo(bookUrl: String, loadEpisodes: Boolean, loadFullPages: Boolean): BookDetail {\n        val episodes = ArrayList<Episode>()\n        if (loadEpisodes) {\n            val doc = Jsoup.connect(bookUrl).config(false).get()\n            val l = doc.select("#playlist > ul > li > a").map {\n                val title = it.text()\n                val url = it.absUrl("href")\n                Episode(title, url)\n            }\n            episodes.addAll(l)\n        }\n        return BookDetail(episodes)\n    }\n}'