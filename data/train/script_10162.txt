b'{-# LANGUAGE OverloadedStrings #-}\n{-# OPTIONS_GHC-fno-warn-unused-imports#-}\nmodule Restexample.Client.Test.SubscriptionSite where\nimport Rest.Client.Internal\nimport qualified Restexample.Client.Test as Test\nimport qualified Rest.Types.Container\nimport qualified Rest.StringMap.HashMap.Strict\nimport qualified Rest.Types.Error\n\ntype Identifier = [(Char)]\n\nreadId :: Identifier -> [String]\nreadId x = ["uri", showUrl x]\n\nlist ::\n       ApiStateC m =>\n       [(String, String)] ->\n         m (ApiResponse () (Rest.Types.Container.List (())))\nlist pList\n  = let rHeaders\n          = [(hAccept, "text/json"), (hContentType, "text/plain")]\n        request\n          = makeReq "GET" "v1.0.0" [["test"], ["subscription-site"]] pList\n              rHeaders\n              ""\n      in doRequest fromJSON fromJSON request\n\nremoveManyUri ::\n                ApiStateC m =>\n                Rest.StringMap.HashMap.Strict.StringHashMap ([(Char)]) (()) ->\n                  m (ApiResponse ()\n                       (Rest.StringMap.HashMap.Strict.StringHashMap ([(Char)])\n                          (Rest.Types.Error.Status (Rest.Types.Error.Reason (())) (()))))\nremoveManyUri input\n  = let rHeaders\n          = [(hAccept, "text/json"), (hContentType, "text/json")]\n        request\n          = makeReq "DELETE" "v1.0.0"\n              [["test"], ["subscription-site"], ["uri"]]\n              []\n              rHeaders\n              (toJSON input)\n      in doRequest fromJSON fromJSON request\n\nremove :: ApiStateC m => Identifier -> m (ApiResponse () ())\nremove subscription-site\n  = let rHeaders\n          = [(hAccept, "text/json"), (hContentType, "text/plain")]\n        request\n          = makeReq "DELETE" "v1.0.0"\n              [["test"], ["subscription-site"], readId subscriptionSite]\n              []\n              rHeaders\n              ""\n      in doRequest fromJSON (const ()) request\n'