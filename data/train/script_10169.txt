b'using Aerial;\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Diagnostics;\nusing System.Drawing;\nusing System.Net;\nusing System.IO;\nusing System.Windows.Forms;\nusing System.Linq;\n\nnamespace ScreenSaver\n{\n    public partial class ScreenSaverForm : Form\n    {\n        private int currentVideoIndex = 0;\n        private DateTime lastInteraction = DateTime.Now;\n        private Point mouseLocation = Point.Empty;\n        private List<Asset> Movies;\n        private Timer NextVideoTimer = new Timer();\n        private bool previewMode = false;\n        private SettingsForm settingsFrm = null;\n        private bool shouldCache = false;\n        private bool showVideo = true;\n        private bool windowMode = false;\n        \n        public ScreenSaverForm()\n        {\n            InitializeComponent();\n\n#if !DEBUG\n            TopMost = true;\n#endif\n\n            RegisterEvents();\n        }\n\n        /// <summary>\n        /// Initiate the form inside window\'s screen saver settings screen\n        /// </summary>\n        /// <param name="PreviewWndHandle"></param>\n        public ScreenSaverForm(IntPtr PreviewWndHandle) : this()\n        {\n            previewMode = true;\n\n            // Set the preview window as the parent of this window\n            NativeMethods.SetParent(this.Handle, PreviewWndHandle);\n\n            // Make this a child window so it will close when the parent dialog closes\n            NativeMethods.SetWindowLong(this.Handle, -16, new IntPtr(NativeMethods.GetWindowLong(this.Handle, -16) | 0x40000000));\n\n            // Place our window inside the parent\n            Rectangle ParentRect;\n            NativeMethods.GetClientRect(PreviewWndHandle, out ParentRect);\n            Size = new Size(ParentRect.Size.Width + 1, ParentRect.Size.Height + 1);\n            Location = new Point(-1, -1);\n        }\n\n        public ScreenSaverForm(bool WindowMode = false) : this()\n        {\n            SetStyle(ControlStyles.SupportsTransparentBackColor, true);\n            SetStyle(ControlStyles.Opaque, true);\n            this.BackColor = Color.Transparent;\n            windowMode = WindowMode;\n            MaximizeVideo();\n\n            ShowButtons();\n        }\n\n        public ScreenSaverForm(Rectangle Bounds, bool shouldCache, bool showVideo) : this()\n        {\n            this.Bounds = Bounds;\n            this.shouldCache = shouldCache;\n            this.showVideo = showVideo;\n        }\n        \n        void RegisterEvents()\n        {\n            this.player.MouseDownEvent += Player_MouseDownEvent;\n            this.player.KeyPressEvent += player_KeyPressEvent;\n            this.player.PlayStateChange += player_PlayStateChange;\n            this.player.MouseMoveEvent += player_MouseMoveEvent;\n\n            this.btnClose.Click += new EventHandler(this.btnClose_Click);\n            this.btnClose.MouseMove += new MouseEventHandler(this.btnClose_MouseMove);\n            this.btnSettings.Click += new EventHandler(this.btnSettings_Click);\n            this.btnSettings.MouseMove += new MouseEventHandler(this.btnClose_MouseMove);\n\n            this.KeyPress += new KeyPressEventHandler(this.ScreenSaverForm_KeyPress);\n            this.MouseDown += DoMouseDown;\n            this.MouseClick += new System.Windows.Forms.MouseEventHandler(this.ScreenSaverForm_MouseClick);\n            this.MouseMove += new System.Windows.Forms.MouseEventHandler(this.ScreenSaverForm_MouseMove);\n            this.MouseUp += new System.Windows.Forms.MouseEventHandler(this.ScreenSaverForm_MouseUp);\n        }\n\n        protected override bool ProcessCmdKey(ref Message msg, Keys keyData)\n        {\n            if (!previewMode && keyData == Keys.Escape)\n            {\n                this.Close();\n                return true;\n            }\n            return base.ProcessCmdKey(ref msg, keyData);\n        }\n\n        #region Form\n        private void ScreenSaverForm_Load(object sender, EventArgs e)\n        {\n            if (!previewMode && !windowMode) Cursor.Hide();\n\n            LayoutPlayer();\n            \n            this.BackgroundImageLayout = ImageLayout.None;\n\n            if (showVideo) // testing preview video speed didn\'t work well && !previewMode\n            {\n                Movies = AerialContext.GetMovies();\n\n#if DEBUG && false\n                Movies = new List<Asset>\n                {\n                    new Asset { url = @"http://18292-presscdn-0-89.pagely.netdna-cdn.com/wp-content/uploads/2015/07/stripe-checkout.mp4?_=1" },\n                    new Asset {url = @"http://18292-presscdn-0-89.pagely.netdna-cdn.com/wp-content/uploads/2015/07/stripe-shake.mp4?_=3" },\n                };\n#endif\n\n                NextVideoTimer.Tick += NextVideoTimer_Tick;\n                NextVideoTimer.Interval = 1000;\n                NextVideoTimer.Enabled = true;\n                    \n                SetNextVideo();\n            } else if (previewMode)\n            {\n                // on preview - hide player.\n                ShowButtons(false);\n\n                // show picture preview in the windows screensaver dialog inside the 1980s CRT monitor with that CD rom drive at it\'s bottom\n\n                var pictureBox1 = new PictureBox();\n                pictureBox1.Image = global::Aerial.Properties.Resources.bridgeSm3;\n                pictureBox1.Location = new System.Drawing.Point(0,0);\n                pictureBox1.Name = "pictureBox1";\n                pictureBox1.Size = new System.Drawing.Size(166, 130);\n                pictureBox1.TabIndex = 3;\n                pictureBox1.TabStop = false;\n                this.Controls.Add(pictureBox1);\n            }\n        }\n\n        private void ScreenSaverForm_Resize(object sender, EventArgs e)\n        {\n            Trace.WriteLine("ScreenSaverForm_Resize()");\n            if (windowMode) ResizePlayer();\n        }\n\n        private void ScreenSaverForm_Shown(object sender, EventArgs e)\n        {\n            this.Resize += ScreenSaverForm_Resize;\n        }\n\n        private void ScreenSaverForm_KeyPress(object sender, KeyPressEventArgs e)\n        {\n            if (e.KeyChar == \'n\')\n                SetNextVideo();\n            else\n                ShouldExit();\n        }\n        private void player_KeyPressEvent(object sender, AxWMPLib._WMPOCXEvents_KeyPressEvent e)\n        {\n            ScreenSaverForm_KeyPress(sender, new KeyPressEventArgs((char)e.nKeyAscii));\n        }\n#endregion\n\n        #region Mouse events\n        \n        private void Player_MouseDownEvent(object sender, AxWMPLib._WMPOCXEvents_MouseDownEvent e)\n        {\n            Trace.WriteLine("Player_MouseDownEvent() e.nButton=" + e.nButton);\n            \n            DoMouseDown(null, new MouseEventArgs(e.nButton == 1 ? MouseButtons.Left : MouseButtons.Right, 0, e.fX, e.fY, 0));\n        }\n        private void DoMouseDown(object sender, MouseEventArgs e)\n        {\n            Trace.WriteLine("ScreenSaverForm_MouseDown()");\n            Point m = PointToClient(Cursor.Position);\n            var drag = 12;\n            bool? toTop = m.Y < drag ? true : (m.Y > (Size.Height - drag) ? false : (bool?)null);\n            bool? toLeft = m.X < drag ? true : (m.X > (Size.Width - drag) ? false : (bool?)null);\n\n            if (e.Button == MouseButtons.Left)\n            {\n                if (toTop == null && toLeft == null)\n                    NativeMethods.DragWindow(Handle);\n                else\n                    NativeMethods.ResizeWindow(Handle, toTop, toLeft);\n            }\n        }\n\n        private void ScreenSaverForm_MouseClick(object sender, MouseEventArgs e)\n        {\n            Trace.WriteLine("ScreenSaverForm_MouseClick()");\n            ShouldExit();\n        }\n        private void ScreenSaverForm_MouseUp(object sender, MouseEventArgs e)\n        {\n            Trace.WriteLine("ScreenSaverForm_MouseUp()");\n        }\n        \n        private void player_MouseMoveEvent(object sender, AxWMPLib._WMPOCXEvents_MouseMoveEvent e)\n        {\n            Trace.WriteLine("player_MouseMoveEvent()");\n            ScreenSaverForm_MouseMove(sender, new MouseEventArgs(MouseButtons.None, 0, e.fX, e.fY, 0));\n        }\n        \n        private void btnClose_MouseMove(object sender, MouseEventArgs e)\n        {\n            Trace.WriteLine("btnClose_MouseMove()");\n            this.Cursor = Cursors.Default;\n        }\n        private void btnClose_Click(object sender, EventArgs e)\n        {\n            Trace.WriteLine("btnClose_Click()");\n            Application.Exit();\n        }\n\n        private void btnSettings_MouseMove(object sender, MouseEventArgs e)\n        {\n            Trace.WriteLine("btnSettings_MouseMove()");\n            this.Cursor = Cursors.Default;\n        }\n        private void btnSettings_Click(object sender, EventArgs e)\n        {\n            Trace.WriteLine("btnSettings_Click()");\n            if (settingsFrm == null)\n            {\n                settingsFrm = new SettingsForm();\n                var result = settingsFrm.ShowDialog();\n                DialogResult = DialogResult.Ignore;\n                settingsFrm = null;\n            }\n        }\n\n        private void ScreenSaverForm_MouseMove(object sender, MouseEventArgs e)\n        {\n            Trace.WriteLine("ScreenSaverForm_MouseMove()");\n            lastInteraction = DateTime.Now;\n\n            if (!windowMode)\n            {\n                if (!mouseLocation.IsEmpty)\n                {\n                    // Terminate if mouse is moved a significant distance\n                    if (Math.Abs(mouseLocation.X - e.X) > 5 ||\n                        Math.Abs(mouseLocation.Y - e.Y) > 5)\n                        ShouldExit();\n                }\n                // Update current mouse location\n                mouseLocation = e.Location;\n            }\n            else\n            {\n                Point m = PointToClient(Cursor.Position);\n                int drag = 10;\n                bool? toTop = m.Y < drag ? true : (m.Y > (Size.Height - drag) ? false : (bool?)null);\n                bool? toLeft = m.X < drag ? true : (m.X > (Size.Width - drag) ? false : (bool?)null);\n\n                if (toTop == true && toLeft == true) Cursor = Cursors.SizeNWSE;\n                if (toTop == true && toLeft == null) Cursor = Cursors.SizeNS;\n                if (toTop == true && toLeft == false) Cursor = Cursors.SizeNESW;\n\n                if (toTop == false && toLeft == true) Cursor = Cursors.SizeNESW;\n                if (toTop == false && toLeft == null) Cursor = Cursors.SizeNS;\n                if (toTop == false && toLeft == false) Cursor = Cursors.SizeNWSE;\n\n                if (toTop == null && toLeft == true) Cursor = Cursors.SizeWE;\n                if (toTop == null && toLeft == null) Cursor = Cursors.Default;\n                if (toTop == null && toLeft == false) Cursor = Cursors.SizeWE;\n\n                ShowButtons();\n            }\n\n        }\n\n        void ShowButtons(bool visibility = true)\n        {\n            btnClose.Visible = visibility;\n            btnSettings.Visible = visibility;\n        }\n\n\n        #endregion\n\n        #region Video player\n        private void MaximizeVideo()\n        {\n            var screenArea = Screen.FromControl(this).WorkingArea;\n            var videoSize = this.Size;\n            if (screenArea.Size.Width > videoSize.Width && screenArea.Height > videoSize.Height)\n            {\n                videoSize = new Size(1920, 1080);\n            }\n\n            if (new RegSettings().MultiMonitorMode == RegSettings.MultiMonitorModeEnum.SpanAll)\n            {\n                var bounds = Screen.AllScreens.GetBounds();\n                SetBounds(bounds.X, bounds.Y, bounds.Width, bounds.Height);\n            }\n            else\n            {\n                SetBounds(\n                    (screenArea.Width - videoSize.Width) / 2,\n                    (screenArea.Height - videoSize.Height) / 2,\n                    videoSize.Width,\n                    videoSize.Height);\n            }\n        }\n\n\n        private void SetNextVideo()\n        {\n            Trace.WriteLine("SetNextVideo()");\n            var cacheEnabled = new RegSettings().CacheVideos;\n            if (showVideo)\n            {\n                //If movies is null, when we tried to parse the JSON doc with the movies it\n                //failed or it was empty.\n                if (Movies == null || Movies.Count == 0)\n                {\n                    showVideo = false;\n                    MessageBox.Show("Error finding the video locations.  Please confirm that the video source " +\n                        "is a valid JSON document and can be reached.  Resart after fixing the video source");\n\n                    return;\n                }\n\n                string url = Movies[currentVideoIndex].url;\n\n                if (Caching.IsHit(url))\n                {\n                    player.URL = Caching.Get(url);\n                }\n                else\n                {\n                    player.URL = url;\n                    if (cacheEnabled && shouldCache && \n                        !previewMode &&  !Caching.IsCaching(url)) {\n                        Caching.StartDelayedCache(url);\n                    }\n                }\n                currentVideoIndex++;\n                if (currentVideoIndex >= Movies.Count)\n                    currentVideoIndex = 0;\n            }\n        }\n\n        private void NextVideoTimer_Tick(object sender, EventArgs e)\n        {\n            // Trace.WriteLine("Timer: " + state);\n            var state = this.player.playState;\n            if (state == WMPLib.WMPPlayState.wmppsReady ||\n                state == WMPLib.WMPPlayState.wmppsUndefined ||\n                state == WMPLib.WMPPlayState.wmppsStopped)\n            {\n                SetNextVideo();\n            }\n            if (lastInteraction.AddSeconds(1) < DateTime.Now)\n            {\n                ShowButtons(false);\n            }\n        }\n\n        private void player_PlayStateChange(object sender, AxWMPLib._WMPOCXEvents_PlayStateChangeEvent e)\n        {\n            NativeMethods.EnableMonitorSleep();\n        }\n\n        private void LayoutPlayer()\n        {\n            this.player.enableContextMenu = false;\n            this.player.settings.autoStart = true;\n            this.player.settings.enableErrorDialogs = true;\n            this.player.stretchToFit = true;\n            this.player.uiMode = "none";\n            Application.AddMessageFilter(new IgnoreMouseClickMessageFilter(this, player));\n\n            ResizePlayer();\n        }\n        \n        /// <summary>\n        /// Resize & center player\n        /// </summary>\n        private void ResizePlayer()\n        {\n            this.player.Size = CalculateVideoFillSize(this.Size);\n            this.player.Top = (this.Size.Height / 2) - (this.player.Size.Height / 2);\n            this.player.Left =  (this.Size.Width / 2) - (this.player.Size.Width / 2);\n        }\n\n        /// <summary>\n        /// Algoirthm for calculating video fill size to fill available screensize on different resolutions.\n        /// </summary>\n        /// <param name="displaySize"></param>\n        /// <param name="scaleMode"></param>\n        /// <returns>The size of the canvas needed to fill the screen with the source width and height element</returns>\n        private Size CalculateVideoFillSize(Size displaySize, double sourceHeight = 1080.0, double sourceWidth = 1920.0)\n        {\n            var screenHeight = (double)displaySize.Height;\n            var screenWidth = (double)displaySize.Width;\n            var screenRatio = screenWidth / screenHeight;\n\n            var scale = Math.Max(screenWidth / sourceWidth, screenHeight / sourceHeight);\n\n            return new Size()\n            {\n                Height = Convert.ToInt32(scale * sourceHeight),\n                Width = Convert.ToInt32(scale * sourceWidth)\n            };\n        }\n\n#endregion\n\n\n        /// <summary>\n        /// Exits if not in windowed or preview mode.\n        /// </summary>\n        void ShouldExit()\n        {\n            if (!previewMode && !windowMode)\n                Application.Exit();\n        }\n\n    }\n}\n'