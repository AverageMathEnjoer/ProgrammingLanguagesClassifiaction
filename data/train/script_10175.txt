b'{-# LANGUAGE\n    GeneralizedNewtypeDeriving\n  , NoImplicitPrelude\n  #-}\nmodule ApiTypes where\n\nimport Prelude.Compat\n\nimport Control.Concurrent.STM (TVar)\nimport Control.Monad.Reader (MonadReader, ReaderT (..))\nimport Control.Monad.Trans (MonadIO)\nimport Data.HashMap.Strict (HashMap)\nimport Data.Set (Set)\n\nimport Type.Comment (Comment)\nimport Type.Post (Post)\nimport Type.User (User)\nimport qualified Type.Post as Post\n\ndata ServerData = ServerData\n  { users    :: TVar (Set User)\n  , posts    :: TVar (Set Post)\n  , comments :: TVar (HashMap Post.Id (Set Comment))\n  }\n\nnewtype BlogApi a = BlogApi { unBlogApi :: ReaderT ServerData IO a }\n  deriving ( Applicative\n           , Functor\n           , Monad\n           , MonadIO\n           , MonadReader ServerData\n           )\n\nrunBlogApi :: ServerData -> BlogApi a -> IO a\nrunBlogApi serverdata = flip runReaderT serverdata . unBlogApi\n'