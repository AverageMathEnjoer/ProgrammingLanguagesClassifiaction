b'package com.github.eprendre.videosource\n\nimport com.github.eprendre.tingshu.extensions.config\nimport com.github.eprendre.tingshu.sources.AudioUrlExtractor\nimport com.github.eprendre.tingshu.sources.AudioUrlWebViewSniffExtractor\nimport com.github.eprendre.tingshu.sources.TingShu\nimport com.github.eprendre.tingshu.utils.*\nimport org.jsoup.Jsoup\nimport java.net.URLEncoder\n\nobject JiuZhou : TingShu() {\n    override fun getSourceId(): String {\n        return "be8f23528aba4682b0252b7fd61ad0d6"\n    }\n\n    override fun getUrl(): String {\n        return "http://www.unss.net/"\n    }\n\n    override fun getName(): String {\n        return "\xe4\xb9\x9d\xe5\xb7\x9e\xe5\xbd\xb1\xe8\xa7\x86"\n    }\n\n    override fun search(keywords: String, page: Int): Pair<List<Book>, Int> {\n        val encodedKeywords = URLEncoder.encode(keywords, "utf-8")\n        val url = "http://www.unss.net/vodsearch/${encodedKeywords}----------${page}---.html"\n        val doc = Jsoup.connect(url).config(false).get()\n\n        var currentPage = 1\n        var totalPage = 1\n        val pages = doc.selectFirst(".stui-page > .visible-xs")?.text() ?: ""\n        if (pages.isNotEmpty()) {\n            pages.split("/").let {\n                currentPage = it[0].toInt()\n                totalPage = it[1].toInt()\n            }\n        }\n\n        val list = ArrayList<Book>()\n        val elementList = doc.select(".stui-vodlist__media > li")\n        elementList.forEach { item ->\n            val thumb = item.selectFirst(".thumb > .v-thumb")\n            val coverUrl = thumb.attr("data-original")\n            val bookUrl = thumb.absUrl("href")\n            val title = thumb.attr("title")\n            val status = thumb.selectFirst(".text-right").text()\n            val pList = item.select(".detail > p")\n            val author = pList[0].text()\n            val artist = pList[1].text()\n            val desc = pList[2].text()\n            list.add(Book(coverUrl, bookUrl, title, author, artist).apply {\n                this.status = status\n                this.intro = desc\n                this.sourceId = getSourceId()\n            })\n        }\n\n        return Pair(list, totalPage)\n    }\n\n    override fun getCategoryMenus(): List<CategoryMenu> {\n        val menu1 = CategoryMenu(\n            "\xe5\x88\x86\xe7\xb1\xbb", listOf(\n                CategoryTab("\xe7\x94\xb5\xe5\xbd\xb1", "http://www.unss.net/vodtype/1.html"),\n                CategoryTab("\xe7\x94\xb5\xe8\xa7\x86\xe5\x89\xa7", "http://www.unss.net/vodtype/2.html"),\n                CategoryTab("\xe7\xbb\xbc\xe8\x89\xba", "http://www.unss.net/vodtype/3.html"),\n                CategoryTab("\xe5\x8a\xa8\xe6\xbc\xab", "http://www.unss.net/vodtype/4.html")\n            )\n        )\n        return listOf(menu1)\n    }\n\n\n    override fun isCacheable(): Boolean {\n        return false\n    }\n\n    override fun getAudioUrlExtractor(): AudioUrlExtractor {\n        return AudioUrlWebViewSniffExtractor\n    }\n\n    override fun getCategoryList(url: String): Category {\n        val list = ArrayList<Book>()\n        val doc = Jsoup.connect(url).config(false).get()\n\n        var currentPage = 1\n        var totalPage = 1\n        var nextUrl = ""\n        val pages = doc.selectFirst(".stui-page > .visible-xs")?.text() ?: ""\n        if (pages.isNotEmpty()) {\n            pages.split("/").let {\n                currentPage = it[0].toInt()\n                totalPage = it[1].toInt()\n            }\n            nextUrl = doc.select(".stui-page > li").first { it.text() == "\xe4\xb8\x8b\xe4\xb8\x80\xe9\xa1\xb5" }\n                .selectFirst("a").absUrl("href")\n        }\n\n        val elementList = doc.select(".stui-vodlist > li > div")\n        elementList.forEach { item ->\n            val thumb = item.selectFirst(".stui-vodlist__thumb")\n            val coverUrl = thumb.attr("data-original")\n            val bookUrl = thumb.absUrl("href")\n            val title = thumb.attr("title")\n            val status = thumb.selectFirst(".text-right").text()\n            val author = ""\n            val artist = ""\n            list.add(Book(coverUrl, bookUrl, title, author, artist).apply {\n                this.status = status\n                this.sourceId = getSourceId()\n            })\n        }\n\n        return Category(list, currentPage, totalPage, url, nextUrl)\n    }\n\n    override fun getBookDetailInfo(bookUrl: String, loadEpisodes: Boolean, loadFullPages: Boolean): BookDetail {\n        val episodes = ArrayList<Episode>()\n        if (loadEpisodes) {\n            val doc = Jsoup.connect(bookUrl).config(false).get()\n            val tabs = doc.select(".nav-tabs > li")\n            val playlists = doc.select(".tab-content > div")\n\n            tabs.forEachIndexed { index, tab ->\n                val tabTitle = tab.text()\n                val list = playlists[index].select("ul > li > a").map { element ->\n                    val title = "$tabTitle - ${element.text()}"\n                    val url = element.absUrl("href")\n                    Episode(title, url)\n                }\n                episodes.addAll(list)\n            }\n        }\n        return BookDetail(episodes)\n    }\n}'