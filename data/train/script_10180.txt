b'module Cachix.Client.Env\n  ( Env (..),\n    mkEnv,\n    createClientEnv,\n    customManagerSettings,\n  )\nwhere\n\nimport Cachix.Client.Config (Config)\nimport qualified Cachix.Client.Config as Config\nimport qualified Cachix.Client.OptionsParser as Options\nimport Cachix.Client.URI (getBaseUrl)\nimport Cachix.Client.Version (cachixVersion)\nimport qualified Hercules.CNix as CNix\nimport qualified Hercules.CNix.Util as CNix.Util\nimport Network.HTTP.Client\n  ( ManagerSettings,\n    managerModifyRequest,\n    managerResponseTimeout,\n    responseTimeoutNone,\n  )\nimport Network.HTTP.Client.TLS (newTlsManagerWith, tlsManagerSettings)\nimport Network.HTTP.Simple (setRequestHeader)\nimport Protolude hiding (toS)\nimport Protolude.Conv\nimport Servant.Client.Streaming (ClientEnv, mkClientEnv)\nimport System.Directory (canonicalizePath)\nimport System.Posix.Signals (getSignalMask, setSignalMask)\n\ndata Env = Env\n  { cachixoptions :: Config.CachixOptions,\n    clientenv :: ClientEnv,\n    config :: Config\n  }\n\nmkEnv :: Options.Flags -> IO Env\nmkEnv flags = do\n  signalset <- getSignalMask\n  -- Initialize the Nix library\n  CNix.init\n\n  -- darwin: restore the signal mask modified by Nix\n  -- https://github.com/cachix/cachix/issues/501\n  setSignalMask signalset\n\n  -- Interrupt Nix before throwing UserInterrupt\n  CNix.Util.installDefaultSigINTHandler\n\n  -- make sure path to the config is passed as absolute to dhall logic\n  canonicalConfigPath <- canonicalizePath (Options.configPath flags)\n  cfg <- Config.getConfig canonicalConfigPath\n  let cachixOptions =\n        Config.CachixOptions\n          { Config.configPath = canonicalConfigPath,\n            Config.host = fromMaybe (Config.hostname cfg) (Options.hostname flags),\n            Config.verbose = Options.verbose flags\n          }\n  clientEnv <- createClientEnv cachixOptions\n  return\n    Env\n      { cachixoptions = cachixOptions,\n        clientenv = clientEnv,\n        config = cfg\n      }\n\ncustomManagerSettings :: ManagerSettings\ncustomManagerSettings =\n  tlsManagerSettings\n    { managerResponseTimeout = responseTimeoutNone,\n      -- managerModifyRequest :: Request -> IO Request\n      managerModifyRequest = return . setRequestHeader "User-Agent" [toS cachixVersion]\n    }\n\ncreateClientEnv :: Config.CachixOptions -> IO ClientEnv\ncreateClientEnv cachixOptions = do\n  manager <- newTlsManagerWith customManagerSettings\n  return $ mkClientEnv manager $ getBaseUrl (Config.host cachixOptions)\n'