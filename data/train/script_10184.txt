b'/*\n * Copyright 2013 - 2016 Mario Arias\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.funktionale.utils\n\nimport org.testng.Assert.assertEquals\nimport org.testng.Assert.assertTrue\nimport org.testng.annotations.Test\n\nclass PartialFunctionTest {\n    private val definetAt: (Int) -> Boolean = { it.rem(2) == 0 }\n    private val body: (Int) -> String = {\n        "is even"\n    }\n\n    @Test\n    fun partial() {\n        val isEven = PartialFunction(definetAt, body)\n\n        assertTrue(isEven.isDefinedAt(2))\n        assertEquals(isEven(2), "is even")\n    }\n\n    @Test fun toPartialFunction() {\n        val isEven = body.toPartialFunction(definetAt)\n        assertTrue(isEven.isDefinedAt(2))\n        assertEquals(isEven(2), "is even")\n    }\n\n    @Test fun orElse() {\n        val isEven = body.toPartialFunction(definetAt)\n        val isOdd = { _: Int -> "is odd" }.toPartialFunction { !definetAt(it) }\n        assertEquals(listOf(1, 2, 3).map(isEven orElse isOdd), listOf("is odd", "is even", "is odd"))\n    }\n\n    @Test fun invokeOrElse() {\n        val isEven = body.toPartialFunction(definetAt)\n        assertEquals(listOf(1, 2, 3).map { isEven.invokeOrElse(it, "is odd") }, listOf("is odd", "is even", "is odd"))\n    }\n}'