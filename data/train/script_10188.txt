b'\xef\xbb\xbf#load "SupportVectorMachine.fs"\n\nopen System.IO\nopen System.Net\nopen MachineLearning.SupportVectorMachine\n\n// retrieve data from UC Irvine Machine Learning repository\nlet url = "http://archive.ics.uci.edu/ml/machine-learning-databases/semeion/semeion.data"\nlet request = WebRequest.Create(url)\nlet response = request.GetResponse()\n\nlet stream = response.GetResponseStream()\nlet reader = new StreamReader(stream)\nlet data = reader.ReadToEnd()\nreader.Close()\nstream.Close()\n\n// prepare data\n\n// a line in the dataset is 16 x 16 = 256 pixels,\n// followed by 10 digits, 1 denoting the number\nlet parse (line: string) =\n    let parsed = line.Split(\' \') \n    let observation = \n        parsed\n        |> Seq.take 256\n        |> Seq.map (fun s -> (float)s)\n        |> Seq.toList\n    let label =\n        parsed\n        |> Seq.skip 256\n        |> Seq.findIndex (fun e -> (int)e = 1)\n    observation, label\n\n// renders a scanned digit as "ASCII-art"\nlet render observation =\n    printfn " "\n    List.iteri (fun i pix ->\n        if i % 16 = 0 then printfn "" |> ignore\n        if pix > 0.0 then printf "\xe2\x96\xa0" else printf " ") observation\n\n// classifier: 7s vs. rest of the world\n\nlet dataset, labels = \n    data.Split((char)10)\n    |> Array.filter (fun l -> l.Length > 0) // because of last line\n    |> Array.map parse\n    |> Array.map (fun (data, l) -> \n        data, if l = 7 then 1.0 else -1.0 )\n    |> Array.unzip\n\nlet parameters = { C = 5.0; Tolerance = 0.001; Depth = 20 }\nlet rbfKernel = radialBias 10.0\n\n// split dataset into training vs. valiation\nlet sampleSize = 600\nlet trainingSet = dataset.[ 0 .. (sampleSize - 1)]\nlet trainingLbl = labels.[ 0 .. (sampleSize - 1)]\nlet validateSet = dataset.[ sampleSize .. ]\nlet validateLbl = labels.[ sampleSize .. ]\n\nprintfn "Training classifier"\nlet model = smo trainingSet trainingLbl rbfKernel parameters\nlet classify = classifier rbfKernel model\n\n// Compute average correctly classified\nlet quality classifier sample =\n    sample\n    |> Array.map (fun (d, l) -> if (classifier d) * l > 0.0 then 1.0 else 0.0)\n    |> Array.average\n    |> printfn "Proportion correctly classified: %f"\n\n// split dataset by label and compute quality for each group\nlet evaluate classifier (dataset, labels) =\n    let group1, group2 =\n        Array.zip dataset labels\n        |> Array.partition (fun (d, l) -> l > 0.0)\n    quality classifier group1\n    quality classifier group2\n\n// verify training sample classification\nprintfn "Classification in training set"\nevaluate classify (trainingSet, trainingLbl)\n\n// validate on remaining sample\nprintfn "Classification in validation set"\nevaluate classify (validateSet, validateLbl)\n\n// calibration (Careful,takes a while)\nfor c in [ 0.1; 1.0; 10.0 ] do\n    for s in [ 0.1; 1.0; 10.0 ] do\n        let parameters = { C = c; Tolerance = 0.001; Depth = 10 }\n        let rbfKernel = radialBias s\n\n        printfn "Model with C = %f, s = %f" c s\n        let model = smo trainingSet trainingLbl rbfKernel parameters\n        let classify = classifier rbfKernel model\n\n        printfn "Classification in training set"\n        evaluate classify (trainingSet, trainingLbl)\n\n        // validate on remaining sample\n        printfn "Classification in validation set"\n        evaluate classify (validateSet, validateLbl)\n        \n        printfn "Done"\n        \n// display the 200 first validation observations \n// and their classification\nArray.sub (Array.zip dataset labels) sampleSize (sampleSize + 199)\n|> Array.iter (fun (d, l) -> \n    printfn ""    \n    printfn "******************************************"\n    let predicted = if (classify d) > 0.0 then 1.0 else -1.0\n    printfn "Class %f, classified as %f" l predicted\n    render d)'