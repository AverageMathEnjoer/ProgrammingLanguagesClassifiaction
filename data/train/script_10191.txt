b'package org.sang.config;\n\nimport org.sang.service.UserService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.builders.WebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.AuthenticationException;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.web.access.AccessDeniedHandler;\nimport org.springframework.security.web.authentication.AuthenticationFailureHandler;\nimport org.springframework.security.web.authentication.AuthenticationSuccessHandler;\nimport org.springframework.util.DigestUtils;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\n/**\n * Created by sang on 2017/12/17.\n */\n@Configuration\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n    @Autowired\n    UserService userService;\n\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        auth.userDetailsService(userService);\n    }\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.authorizeRequests()\n                .antMatchers("/admin/category/all").authenticated()\n                .antMatchers("/admin/**","/reg").hasRole("\xe8\xb6\x85\xe7\xba\xa7\xe7\xae\xa1\xe7\x90\x86\xe5\x91\x98")///admin/**\xe7\x9a\x84URL\xe9\x83\xbd\xe9\x9c\x80\xe8\xa6\x81\xe6\x9c\x89\xe8\xb6\x85\xe7\xba\xa7\xe7\xae\xa1\xe7\x90\x86\xe5\x91\x98\xe8\xa7\x92\xe8\x89\xb2\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe4\xbd\xbf\xe7\x94\xa8.hasAuthority()\xe6\x96\xb9\xe6\xb3\x95\xe6\x9d\xa5\xe9\x85\x8d\xe7\xbd\xae\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe5\x9c\xa8\xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\xad\xe5\x8a\xa0\xe4\xb8\x8aROLE_,\xe5\xa6\x82\xe4\xb8\x8b.hasAuthority("ROLE_\xe8\xb6\x85\xe7\xba\xa7\xe7\xae\xa1\xe7\x90\x86\xe5\x91\x98")\n                .anyRequest().authenticated()//\xe5\x85\xb6\xe4\xbb\x96\xe7\x9a\x84\xe8\xb7\xaf\xe5\xbe\x84\xe9\x83\xbd\xe6\x98\xaf\xe7\x99\xbb\xe5\xbd\x95\xe5\x90\x8e\xe5\x8d\xb3\xe5\x8f\xaf\xe8\xae\xbf\xe9\x97\xae\n                .and().formLogin().loginPage("/login_page").successHandler(new AuthenticationSuccessHandler() {\n            @Override\n            public void onAuthenticationSuccess(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Authentication authentication) throws IOException, ServletException {\n                httpServletResponse.setContentType("application/json;charset=utf-8");\n                PrintWriter out = httpServletResponse.getWriter();\n                out.write("{\\"status\\":\\"success\\",\\"msg\\":\\"\xe7\x99\xbb\xe5\xbd\x95\xe6\x88\x90\xe5\x8a\x9f\\"}");\n                out.flush();\n                out.close();\n            }\n        })\n                .failureHandler(new AuthenticationFailureHandler() {\n                    @Override\n                    public void onAuthenticationFailure(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AuthenticationException e) throws IOException, ServletException {\n                        httpServletResponse.setContentType("application/json;charset=utf-8");\n                        PrintWriter out = httpServletResponse.getWriter();\n                        out.write("{\\"status\\":\\"error\\",\\"msg\\":\\"\xe7\x99\xbb\xe5\xbd\x95\xe5\xa4\xb1\xe8\xb4\xa5\\"}");\n                        out.flush();\n                        out.close();\n                    }\n                }).loginProcessingUrl("/login")\n                .usernameParameter("username").passwordParameter("password").permitAll()\n                .and().logout().permitAll().and().csrf().disable().exceptionHandling().accessDeniedHandler(getAccessDeniedHandler());\n    }\n\n    @Override\n    public void configure(WebSecurity web) throws Exception {\n        web.ignoring().antMatchers("/blogimg/**","/index.html","/static/**");\n    }\n\n    @Bean\n    AccessDeniedHandler getAccessDeniedHandler() {\n        return new AuthenticationAccessDeniedHandler();\n    }\n}'