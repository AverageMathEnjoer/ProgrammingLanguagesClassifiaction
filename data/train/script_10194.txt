b'/*\n * Copyright 2013 - 2016 Mario Arias\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.funktionale.either\n\nimport org.funktionale.either.Either.Left\nimport org.funktionale.either.Either.Right\nimport org.funktionale.option.Option\nimport org.funktionale.option.Option.None\nimport org.funktionale.option.toOption\nimport org.testng.Assert.*\nimport org.testng.annotations.Test\n\n/**\n * Created by IntelliJ IDEA.\n * @author Mario Arias\n * Date: 17/05/13\n * Time: 21:53\n */\nclass EitherTest {\n\n    val pair = 5 to "kotlin"\n    val left = pair.toLeft()\n    val right = pair.toRight()\n\n    @Test fun get() {\n        assertEquals(left.left().get(), 5)\n        assertEquals(right.right().get(), "kotlin")\n    }\n\n    //[Test(expectedExceptions = array(javaClass<NoSuchElementException>()))]\n\n    @Test fun getWithException() {\n        try {\n            assertEquals(right.left().get(), 5)\n            fail()\n        } catch(e: Exception) {\n            //expected\n        }\n        try {\n            assertEquals(left.right().get(), "kotlin")\n            fail()\n        } catch(e: Exception) {\n            //Expected\n        }\n    }\n\n    @Test fun forEach() {\n        left.left().forEach {\n            assertEquals(it * 2, 10)\n        }\n\n        right.right().forEach {\n            assertEquals(it.length, 6)\n        }\n    }\n\n    @Test fun getOrElse() {\n        assertEquals(left.left().getOrElse { 2 }, 5)\n        assertEquals(left.right().getOrElse { "java" }, "java")\n    }\n\n    @Test fun exists() {\n        assertTrue(left.left().exists { it == 5 })\n        assertFalse(left.right().exists { it == "kotlin" })\n    }\n\n    @Test fun flatMap() {\n        assertEquals(left.left().flatMap { Left<String, Int>(it.toString()) }.left().get(), "5")\n        assertEquals(right.right().flatMap { Right<String, Int>(it.length) }.right().get(), 6)\n    }\n\n    @Test fun map() {\n        assertEquals(left.left().map(Int::toString).left().get(), "5")\n        assertEquals(right.right().map { it.length }.right().get(), 6)\n    }\n\n    @Test fun filter() {\n        assertEquals(left.left().filter { it == 5 }.get().left().get(), 5)\n        assertEquals(left.left().filter { it == 6 }, None)\n        assertEquals(right.right().filter { it.startsWith(\'k\') }.get().right().get(), "kotlin")\n        assertEquals(right.right().filter { it.startsWith(\'j\') }, None)\n    }\n\n    @Test fun toList() {\n        assertEquals(left.left().toList(), listOf(5))\n        assertEquals(left.right().toList(), listOf<Int>())\n    }\n\n    @Test fun toOption() {\n        assertEquals(left.left().toOption().get(), 5)\n        assertEquals(left.right().toOption(), None)\n    }\n\n    @Test fun fold() {\n        assertEquals(left.fold(Int::toString) { it }, "5")\n    }\n\n    @Test fun swap() {\n        assertEquals(left.swap().right().get(), 5)\n        assertEquals(right.swap().left().get(), "kotlin")\n    }\n\n    @Test fun components() {\n        val (aInt, aNullString) = left\n        assertNotNull(aInt)\n        assertNull(aNullString)\n\n        val (aNullInt, aString) = right\n        assertNull(aNullInt)\n        assertNotNull(aString)\n    }\n\n    @Test fun merge() {\n        assertEquals(left.merge(), 5)\n        assertEquals(right.merge(), "kotlin")\n    }\n\n    @Test fun either() {\n        val e: Either<Throwable, Nothing> = eitherTry {\n            throw RuntimeException()\n        }\n        assertTrue(e.isLeft())\n    }\n\n    @Test fun sequential() {\n        fun parseInts(ints: List<String>): Either<Throwable, List<Int>> {\n            return ints.map { eitherTry { it.toInt() } }.eitherSequential()\n        }\n\n        assertEquals(parseInts(listOf("1", "2", "3")), Right<Exception, List<Int>>(listOf(1, 2, 3)))\n        assertTrue(parseInts(listOf("1", "foo", "3")) is Left)\n    }\n\n    val some: Option<String> = "kotlin".toOption()\n    val none: Option<String> = null.toOption()\n\n    @Test fun toRight() {\n        assertTrue(some.toEitherRight { 0 }.isRight())\n        assertFalse(none.toEitherRight { 0 }.isRight())\n    }\n\n\n    @Test fun toLeft() {\n        assertTrue(some.toEitherLeft { 0 }.isLeft())\n        assertFalse(none.toEitherLeft { 0 }.isLeft())\n    }\n}\n'