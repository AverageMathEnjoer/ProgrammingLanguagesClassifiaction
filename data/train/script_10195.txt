b'(* Note the listings below make use of the "do" keyword. These simply allow us to declare\n   an abitrary scope so that we can re-use symbols e.g. "name" without getting warnings from the\n   compiler. This is only required for symbols declared directly within scripts. *)\n\n// Listing 9.3\ndo\n    let parseName(name:string) =\n        let parts = name.Split(\' \')\n        let forename = parts.[0]\n        let surname = parts.[1]\n        forename, surname\n    let name = parseName("Isaac Abraham")\n    let forename, surname = name\n\n    let fname, sname = parseName("Isaac Abraham")\n    ()\n\n// Now you try\nlet parse (person:string) =\n    let parts = person.Split(\' \')\n    let age = int parts.[2]\n    parts.[0], parts.[1], age\n\nlet fname, sname, age = parse "Mary Simpson 24"\n\n// Listing 9.4\ndo\n    let nameAndAge = ("Joe", "Bloggs"), 28\n    let name, age = nameAndAge\n    let (forename, surname), theAge = nameAndAge\n    ()\n\n// Listing 9.5\ndo\n    let nameAndAge = "Jane", "Smith", 25\n    let forename, surname, _ = nameAndAge\n    ()\n\n// Listing 9.6\nlet explicit : int * int = 10,5\nlet implicit = 10,5\n\nlet addNumbers arguments =\n    let a, b = arguments\n    a + b\n\n// Listing 9.7\nlet addNumbersGeneric arguments =\n    let a, b, c, _ = arguments\n    a + b\n\n'