b'package icu.nullptr.twifucker.hook\n\nimport com.github.kyuubiran.ezxhelper.ClassUtils.loadClass\nimport com.github.kyuubiran.ezxhelper.HookFactory.`-Static`.createHook\nimport com.github.kyuubiran.ezxhelper.Log\nimport com.github.kyuubiran.ezxhelper.finders.FieldFinder\nimport com.github.kyuubiran.ezxhelper.finders.MethodFinder.`-Static`.methodFinder\nimport de.robv.android.xposed.XC_MethodHook\nimport icu.nullptr.twifucker.beforeMeasure\nimport icu.nullptr.twifucker.forEach\nimport icu.nullptr.twifucker.forEachIndexed\nimport icu.nullptr.twifucker.modulePrefs\nimport icu.nullptr.twifucker.writeJsonLog\nimport org.json.JSONArray\nimport org.json.JSONException\nimport org.json.JSONObject\nimport java.io.BufferedReader\nimport java.io.InputStream\n\nobject JsonHook : BaseHook() {\n    override val name: String\n        get() = "JsonHook"\n\n    override fun init() {\n        try {\n            FieldFinder.fromClass(loadClass("com.bluelinelabs.logansquare.LoganSquare"))\n                .filterByName("JSON_FACTORY").first().type.apply {\n                    // com.fasterxml.jackson.core.JsonFactory\n                    Log.d("Located json class $name")\n                }.methodFinder().filterFinal()\n                .filterByParamTypes { it.isNotEmpty() && it[0] == InputStream::class.java }.first()\n                .apply {\n                    Log.d("Located json method $name")\n                }.createHook {\n                    beforeMeasure(name) { param ->\n                        try {\n                            handleJson(param)\n                        } catch (t: Throwable) {\n                            Log.e(t)\n                        }\n                    }\n                }\n        } catch (e: NoSuchFieldException) {\n            Log.d("Failed to relocate json field", e)\n        } catch (e: NoSuchMethodException) {\n            Log.d("Failed to relocate json method", e)\n        } catch (e: Throwable) {\n            Log.e("json hook failed", e)\n        }\n    }\n\n    // root\n    private fun JSONObject.jsonGetTweets(): JSONObject? =\n        optJSONObject("globalObjects")?.optJSONObject("tweets")\n\n    private fun JSONObject.jsonGetInstructions(): JSONArray? =\n        optJSONObject("timeline")?.optJSONArray("instructions")\n\n    private fun JSONObject.jsonGetData(): JSONObject? = optJSONObject("data")\n\n    private fun JSONObject.jsonHasRecommendedUsers(): Boolean = has("recommended_users")\n\n    private fun JSONObject.jsonRemoveRecommendedUsers() {\n        remove("recommended_users")\n    }\n\n    private fun JSONObject.jsonCheckAndRemoveRecommendedUsers() {\n        if (modulePrefs.getBoolean(\n                "disable_recommended_users", false\n            ) && jsonHasRecommendedUsers()\n        ) {\n            Log.d("Handle recommended users: $this")\n            jsonRemoveRecommendedUsers()\n        }\n    }\n\n    private fun JSONObject.jsonHasThreads(): Boolean = has("threads")\n\n    private fun JSONObject.jsonRemoveThreads() {\n        remove("threads")\n    }\n\n    private fun JSONObject.jsonCheckAndRemoveThreads() {\n        if (modulePrefs.getBoolean("disable_threads", false) && jsonHasThreads()) {\n            Log.d("Handle threads: $this")\n            jsonRemoveThreads()\n        }\n    }\n\n    // data\n    private fun JSONObject.dataGetInstructions(): JSONArray? {\n        val timeline = optJSONObject("user_result")?.optJSONObject("result")\n            ?.optJSONObject("timeline_response")?.optJSONObject("timeline")\n            ?: optJSONObject("timeline_response")?.optJSONObject("timeline")\n            ?: optJSONObject("timeline_response")\n        return timeline?.optJSONArray("instructions")\n    }\n\n    private fun JSONObject.dataCheckAndRemove() {\n        dataGetInstructions()?.forEach { instruction ->\n            instruction.instructionCheckAndRemove()\n        }\n        dataGetLegacy()?.legacyCheckAndRemove()\n    }\n\n    private fun JSONObject.dataGetLegacy(): JSONObject? =\n        optJSONObject("tweet_result")?.optJSONObject("result")?.let {\n            if (it.has("tweet")) {\n                it.optJSONObject("tweet")\n            } else {\n                it\n            }\n        }?.optJSONObject("legacy")\n\n    // tweets\n    private fun JSONObject.tweetsForEach(action: (JSONObject) -> Unit) {\n        for (i in keys()) {\n            optJSONObject(i)?.let { action(it) }\n        }\n    }\n\n    // tweet\n    private fun JSONObject.tweetGetExtendedEntitiesMedias(): JSONArray? =\n        optJSONObject("extended_entities")?.optJSONArray("media")\n\n    private fun JSONObject.tweetCheckAndRemove() {\n        tweetGetExtendedEntitiesMedias()?.forEach { media ->\n            media.mediaCheckAndRemove()\n        }\n    }\n\n    // entry\n    private fun JSONObject.entryHasPromotedMetadata(): Boolean =\n        optJSONObject("content")?.optJSONObject("item")?.optJSONObject("content")\n            ?.optJSONObject("tweet")\n            ?.has("promotedMetadata") == true || optJSONObject("content")?.optJSONObject("content")\n            ?.has("tweetPromotedMetadata") == true || optJSONObject("item")?.optJSONObject("content")\n            ?.has("tweetPromotedMetadata") == true\n\n    private fun JSONObject.entryIsWhoToFollow(): Boolean = optString("entryId").let {\n        it.startsWith("whoToFollow-") || it.startsWith("who-to-follow-") || it.startsWith("connect-module-")\n    }\n\n    private fun JSONObject.entryIsTopicsModule(): Boolean =\n        optString("entryId").startsWith("TopicsModule-")\n\n    private fun JSONObject.entryGetContentItems(): JSONArray? =\n        optJSONObject("content")?.optJSONArray("items")\n            ?: optJSONObject("content")?.optJSONObject("timelineModule")?.optJSONArray("items")\n\n    private fun JSONObject.entryIsTweet(): Boolean = optString("entryId").startsWith("tweet-")\n    private fun JSONObject.entryIsConversationThread(): Boolean =\n        optString("entryId").startsWith("conversationthread-")\n\n    private fun JSONObject.entryIsTweetDetailRelatedTweets(): Boolean =\n        optString("entryId").startsWith("tweetdetailrelatedtweets-")\n\n    private fun JSONObject.entryIsVideoCarousel(): Boolean =\n        optJSONObject("content")?.optJSONObject("timelineModule")?.optJSONObject("clientEventInfo")\n            ?.optString("component") == "video_carousel"\n\n    private fun JSONObject.entryGetLegacy(): JSONObject? {\n        val temp = when {\n            has("content") -> {\n                optJSONObject("content")\n            }\n\n            has("item") -> {\n                optJSONObject("item")\n            }\n\n            else -> return null\n        }\n        return temp?.optJSONObject("content")?.optJSONObject("tweetResult")?.optJSONObject("result")\n            ?.let {\n                if (it.has("tweet")) {\n                    it.optJSONObject("tweet")\n                } else {\n                    it\n                }\n            }?.optJSONObject("legacy")\n    }\n\n    private fun JSONObject.entryGetTrends(): JSONArray? =\n        optJSONObject("content")?.optJSONObject("timelineModule")?.optJSONArray("items")\n\n    // trend\n    private fun JSONObject.trendHasPromotedMetadata(): Boolean =\n        optJSONObject("item")?.optJSONObject("content")?.optJSONObject("trend")\n            ?.has("promotedMetadata") == true\n\n    private fun JSONArray.trendRemoveAds() {\n        if (!modulePrefs.getBoolean("disable_promoted_trends", true)) return\n        val trendRemoveIndex = mutableListOf<Int>()\n        forEachIndexed { trendIndex, trend ->\n            if (trend.trendHasPromotedMetadata()) {\n                Log.d("Handle trends ads $trendIndex $trend")\n                trendRemoveIndex.add(trendIndex)\n            }\n        }\n        for (i in trendRemoveIndex.asReversed()) {\n            remove(i)\n        }\n    }\n\n    // legacy\n    private fun JSONObject.legacyGetRetweetedStatusLegacy(): JSONObject? =\n        optJSONObject("retweeted_status_result")?.optJSONObject("result")?.optJSONObject("legacy")\n\n    private fun JSONObject.legacyGetExtendedEntitiesMedias(): JSONArray? =\n        optJSONObject("extended_entities")?.optJSONArray("media")\n\n    private fun JSONObject.legacyCheckAndRemove() {\n        legacyGetExtendedEntitiesMedias()?.forEach { media ->\n            media.mediaCheckAndRemove()\n        }\n        legacyGetRetweetedStatusLegacy()?.legacyGetExtendedEntitiesMedias()?.forEach { media ->\n            media.mediaCheckAndRemove()\n        }\n    }\n\n    // item\n    private fun JSONObject.itemContainsPromotedUser(): Boolean =\n        optJSONObject("item")?.optJSONObject("content")\n            ?.has("userPromotedMetadata") == true || optJSONObject("item")?.optJSONObject("content")\n            ?.optJSONObject("user")\n            ?.has("userPromotedMetadata") == true || optJSONObject("item")?.optJSONObject("content")\n            ?.optJSONObject("user")?.has("promotedMetadata") == true\n\n    // instruction\n    private fun JSONObject.instructionTimelinePinEntry(): JSONObject? = optJSONObject("entry")\n    private fun JSONObject.instructionTimelineAddEntries(): JSONArray? = optJSONArray("entries")\n\n    private fun JSONObject.instructionGetAddEntries(): JSONArray? =\n        optJSONObject("addEntries")?.optJSONArray("entries")\n\n    private fun JSONObject.instructionCheckAndRemove() {\n        instructionTimelinePinEntry()?.entryRemoveSensitiveMediaWarning()\n        instructionTimelineAddEntries()?.entriesRemoveAnnoyance()\n        instructionGetAddEntries()?.entriesRemoveAnnoyance()\n    }\n\n    // media\n    private fun JSONObject.mediaHasSensitiveMediaWarning(): Boolean =\n        has("sensitive_media_warning") || (has("ext_sensitive_media_warning") && optJSONObject("ext_sensitive_media_warning") != null)\n\n    private fun JSONObject.mediaRemoveSensitiveMediaWarning() {\n        remove("sensitive_media_warning")\n        remove("ext_sensitive_media_warning")\n    }\n\n    private fun JSONObject.mediaCheckAndRemove() {\n        if (!modulePrefs.getBoolean("disable_sensitive_media_warning", false)) return\n        if (mediaHasSensitiveMediaWarning()) {\n            Log.d("Handle sensitive media warning $this")\n            mediaRemoveSensitiveMediaWarning()\n        }\n    }\n\n    // entries\n    private fun JSONArray.entriesRemoveTimelineAds() {\n        val removeIndex = mutableListOf<Int>()\n        forEachIndexed { entryIndex, entry ->\n            entry.entryGetTrends()?.trendRemoveAds()\n\n            if (!modulePrefs.getBoolean("disable_promoted_content", true)) return@forEachIndexed\n            if (entry.entryHasPromotedMetadata()) {\n                Log.d("Handle timeline ads $entryIndex $entry")\n                removeIndex.add(entryIndex)\n            }\n\n            val innerRemoveIndex = mutableListOf<Int>()\n            val contentItems = entry.entryGetContentItems()\n            contentItems?.forEachIndexed inner@{ itemIndex, item ->\n                if (item.entryHasPromotedMetadata()) {\n                    Log.d("Handle timeline replies ads $entryIndex $entry")\n                    if (contentItems.length() == 1) {\n                        removeIndex.add(entryIndex)\n                    } else {\n                        innerRemoveIndex.add(itemIndex)\n                    }\n                    return@inner\n                }\n            }\n            for (i in innerRemoveIndex.asReversed()) {\n                contentItems?.remove(i)\n            }\n        }\n        for (i in removeIndex.reversed()) {\n            remove(i)\n        }\n    }\n\n    private fun JSONArray.entriesRemoveWhoToFollow() {\n        val entryRemoveIndex = mutableListOf<Int>()\n        forEachIndexed { entryIndex, entry ->\n            if (!entry.entryIsWhoToFollow()) return@forEachIndexed\n\n            if (modulePrefs.getBoolean("disable_who_to_follow", false)) {\n                Log.d("Handle whoToFollow $entryIndex $entry")\n                entryRemoveIndex.add(entryIndex)\n                return@forEachIndexed\n            }\n\n            if (!modulePrefs.getBoolean("disable_promoted_user", true)) return@forEachIndexed\n\n            val items = entry.entryGetContentItems()\n            val userRemoveIndex = mutableListOf<Int>()\n            items?.forEachIndexed { index, item ->\n                item.itemContainsPromotedUser().let {\n                    if (it) {\n                        Log.d("Handle whoToFollow promoted user $index $item")\n                        userRemoveIndex.add(index)\n                    }\n                }\n            }\n            for (i in userRemoveIndex.reversed()) {\n                items?.remove(i)\n            }\n        }\n        for (i in entryRemoveIndex.reversed()) {\n            remove(i)\n        }\n    }\n\n    private fun JSONArray.entriesRemoveTopicsToFollow() {\n        val entryRemoveIndex = mutableListOf<Int>()\n        forEachIndexed { entryIndex, entry ->\n            if (!entry.entryIsTopicsModule()) return@forEachIndexed\n\n            if (modulePrefs.getBoolean("disable_topics_to_follow", false)) {\n                Log.d("Handle TopicsModule $entryIndex $entry")\n                entryRemoveIndex.add(entryIndex)\n                return@forEachIndexed\n            }\n        }\n        for (i in entryRemoveIndex.reversed()) {\n            remove(i)\n        }\n    }\n\n    private fun JSONObject.entryRemoveSensitiveMediaWarning() {\n        if (entryIsTweet()) {\n            entryGetLegacy()?.let {\n                it.legacyGetExtendedEntitiesMedias()?.forEach { media ->\n                    media.mediaCheckAndRemove()\n                }\n                it.legacyGetRetweetedStatusLegacy()?.legacyGetExtendedEntitiesMedias()\n                    ?.forEach { media ->\n                        media.mediaCheckAndRemove()\n                    }\n            }\n        } else if (entryIsConversationThread()) {\n            entryGetContentItems()?.forEach { item ->\n                item.entryGetLegacy()?.let { legacy ->\n                    legacy.legacyGetExtendedEntitiesMedias()?.forEach { media ->\n                        media.mediaCheckAndRemove()\n                    }\n                }\n            }\n        }\n    }\n\n    private fun JSONArray.entriesRemoveSensitiveMediaWarning() {\n        forEach { entry ->\n            entry.entryRemoveSensitiveMediaWarning()\n        }\n    }\n\n    private fun JSONArray.entriesRemoveTweetDetailRelatedTweets() {\n        val removeIndex = mutableListOf<Int>()\n        forEachIndexed { entryIndex, entry ->\n            if (!modulePrefs.getBoolean(\n                    "disable_tweet_detail_related_tweets", false\n                )\n            ) return@forEachIndexed\n            if (entry.entryIsTweetDetailRelatedTweets()) {\n                Log.d("Handle tweet detail related tweets $entryIndex $entry")\n                removeIndex.add(entryIndex)\n            }\n        }\n        for (i in removeIndex.reversed()) {\n            remove(i)\n        }\n    }\n\n    private fun JSONArray.entriesRemoveVideoCarousel() {\n        val removeIndex = mutableListOf<Int>()\n        forEachIndexed { entryIndex, entry ->\n            if (!modulePrefs.getBoolean("disable_video_carousel", false)) return@forEachIndexed\n            if (entry.entryIsVideoCarousel()) {\n                Log.d("Handle explore video carousel $entryIndex $entry")\n                removeIndex.add(entryIndex)\n            }\n        }\n        for (i in removeIndex.reversed()) {\n            remove(i)\n        }\n    }\n\n    private fun JSONArray.entriesRemoveAnnoyance() {\n        entriesRemoveTimelineAds()\n        entriesRemoveWhoToFollow()\n        entriesRemoveTopicsToFollow()\n        entriesRemoveSensitiveMediaWarning()\n        entriesRemoveTweetDetailRelatedTweets()\n        entriesRemoveVideoCarousel()\n    }\n\n\n    private fun handleJson(param: XC_MethodHook.MethodHookParam) {\n        val inputStream = param.args[0] as InputStream\n        val reader = BufferedReader(inputStream.reader())\n        var content: String\n        try {\n            reader.use { r ->\n                content = r.readText()\n            }\n        } catch (_: java.io.IOException) {\n            param.args[0] = object : InputStream() {\n                override fun read(): Int {\n                    return -1\n                }\n            }\n            return\n        }\n\n        if (modulePrefs.getBoolean("enable_log", false)) {\n            val isRefreshSessionResponse = try {\n                JSONObject(content).let {\n                    return@let it.has("session_token")\n                }\n            } catch (t: Throwable) {\n                false\n            }\n            if (!isRefreshSessionResponse) {\n                writeJsonLog(content)\n            }\n        }\n\n        try {\n            val json = JSONObject(content)\n\n            json.jsonGetTweets()?.tweetsForEach { tweet ->\n                tweet.tweetCheckAndRemove()\n            }\n            json.jsonGetInstructions()?.forEach { instruction ->\n                instruction.instructionCheckAndRemove()\n            }\n            json.jsonGetData()?.dataCheckAndRemove()\n\n            json.jsonCheckAndRemoveRecommendedUsers()\n\n            json.jsonCheckAndRemoveThreads()\n\n            content = json.toString()\n        } catch (_: JSONException) {\n        } catch (e: Throwable) {\n            Log.e("json hook failed to parse JSONObject", e)\n            Log.d(content)\n        }\n\n        try {\n            val json = JSONArray(content)\n            json.forEach {\n                it.tweetCheckAndRemove()\n            }\n            content = json.toString()\n        } catch (_: JSONException) {\n        } catch (e: Throwable) {\n            Log.e("json hook failed to parse JSONArray", e)\n            Log.d(content)\n        }\n\n        param.args[0] = content.byteInputStream()\n    }\n\n}\n'