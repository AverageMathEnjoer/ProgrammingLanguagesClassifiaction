b'#include <bits/stdc++.h>\nusing namespace std;\n#define gc getchar_unlocked\n#define fo(i,n) for(i=0;i<n;i++)\n#define Fo(i,k,n) for(i=k;i<n;i++)\n#define ll long long\n#define si(x)\tscanf("%d",&x)\n#define sl(x)\tscanf("%I64d",&x)\n#define ss(s)\tscanf("%s",s)\n#define pb push_back\n#define mp make_pair\n#define F first\n#define S second\n#define clr(x) memset(x, 0, sizeof(x))\n#define tr(it, a) for(auto it = a.begin(); it != a.end(); it++)\n#define PI 3.1415926535897932384626\ntypedef pair<int, int>\tpii;\ntypedef pair<ll, ll>\tpll;\ntypedef vector<int>\t\tvi;\ntypedef vector<ll>\t\tvl;\ntypedef vector<pii>\t\tvpii;\ntypedef vector<pll>\t\tvpll;\ntypedef vector<vi>\t\tvvi;\ntypedef vector<vl>\t\tvvl;\nconst int mod = 1000000007;\nconst int N = 2e5;\nstruct compar{\n\t//priority queue \n\t//u need top element.. sort such \n\t//that ur element comes at last\n\tbool operator() (pii a, pii b){\n\t\tif (a.F != b.F)\n\t\t\treturn a.F > b.F;\n\t\treturn a.S < b.S;\n\t}\t\n};\n//UNDIRECTED GRAPH\nclass Dijkstra{\n\tint n, m;\n\tll *dis;\n\tbool *vis;\n\tint *par;\n\tll inf;\n\tpriority_queue<pii, vector<pii>,compar> Q;\n\tvpii *G;\n\tpublic:\n\t\tvoid setVertices(int no){\n\t\t\tn = no;\n\t\t\tG = new vpii[n+1];\n\t\t\tdis = new ll[n+1];\n\t\t\tvis = new bool[n+1];\n\t\t\tpar = new int[n+1];\n\t\t\tinf = 1e18;\n\t\t\t\n\t\t}\n\t\tvoid setEdges(int no){\n\t\t\tm = no;\n\t\t}\n\t\tvoid addEdge(int u, int v, int w){\n\t\t\tG[u].pb({w, v});\n\t\t\t//UNDIRECTED-GRAPH\n\t\t\tG[v].pb({w, u});\n\t\t}\n\t\tll shortestPath(int source, int sink){\n\t\t\tint i;\n\t\t\tfor(i=1; i<=n; i++)\n\t\t\t\tdis[i] = inf, vis[i] = 0;\n\t\t\tdis[source] = 0;\n\t\t\tQ.push({0, source});\n\t\t\twhile(!Q.empty()){\n\t\t\t\tpii cur = Q.top(); Q.pop();\n\t\t\t\tif (vis[cur.S]) continue;\n\t\t\t\tvis[cur.S] = 1;\n\t\t\t\tdis[cur.S] = cur.F;\n\t\t\t\tfor(pii x: G[cur.S]){\n\t\t\t\t\tint to = x.S, w = x.F;\n\t\t\t\t\tQ.push({cur.F+w, to});\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\tif (dis[sink] != inf) return dis[sink];\n\t\t\treturn -1;\n\t\t}\n};\nint main()\n{\n\tios_base::sync_with_stdio(false);\n\tcin.tie(NULL);\n\tint i, j, n, m;\n\tcin>>n>>m;\n\tDijkstra A;\n\tA.setVertices(n);\n\tA.setEdges(m);\n\twhile(m--){\n\t\tint u, v, w;\n\t\tcin>>u>>v>>w;\n\t\tA.addEdge(u, v, w);\n\t}\n\tA.pathOfShortestPath(1, n);\n\treturn 0;\n} \n\n\n'