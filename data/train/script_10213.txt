b'package com.github.razir.progressbutton\n\nimport android.graphics.Canvas\nimport android.graphics.Color\nimport android.graphics.Paint\nimport android.graphics.drawable.Drawable\nimport android.text.style.ImageSpan\n\nclass DrawableSpan(drawable: Drawable, var paddingStart: Int = 0, var paddingEnd: Int = 0, val useTextAlpha: Boolean) :\n    ImageSpan(drawable) {\n\n    override fun getSize(\n        paint: Paint, text: CharSequence, start: Int, end: Int,\n        fontMetricsInt: Paint.FontMetricsInt?\n    ): Int {\n        val drawable = drawable\n        val rect = drawable.bounds\n        fontMetricsInt?.let {\n            val fontMetrics = paint.fontMetricsInt\n            val lineHeight = fontMetrics.bottom - fontMetrics.top\n            val drHeight = Math.max(lineHeight, rect.bottom - rect.top)\n            val centerY = fontMetrics.top + lineHeight / 2\n            fontMetricsInt.apply {\n                ascent = centerY - drHeight / 2\n                descent = centerY + drHeight / 2\n                top = ascent\n                bottom = descent\n            }\n        }\n        return rect.width() + paddingStart + paddingEnd\n    }\n\n\n    override fun draw(\n        canvas: Canvas, text: CharSequence, start: Int, end: Int,\n        x: Float, top: Int, y: Int, bottom: Int, paint: Paint\n    ) {\n\n        val drawable = drawable\n        canvas.save()\n        val fontMetrics = paint.fontMetricsInt\n        val lineHeight = fontMetrics.descent - fontMetrics.ascent\n        val centerY = y + fontMetrics.descent - lineHeight / 2\n        val transY = centerY - drawable.bounds.height() / 2\n        if (paddingStart != 0) {\n            canvas.translate(x + paddingStart, transY.toFloat())\n        } else {\n            canvas.translate(x, transY.toFloat())\n        }\n        if (useTextAlpha) {\n            val colorAlpha = Color.alpha(paint.color)\n            drawable.alpha = colorAlpha\n        }\n        drawable.draw(canvas)\n        canvas.restore()\n    }\n\n}'