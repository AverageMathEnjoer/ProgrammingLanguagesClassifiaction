b'# smart_split ------------------------------------------------------------------\n# Fn to smartly split variable names that are too long\n# ref: https://tinyurl.com/y7qv48z9\n#\' @keywords internal\nsmart_split <- function(str, maxlen) {\n  re <- paste0("(?=.{1,", maxlen, "}(.*))",\n               "(?=.*?[^\\\\W._].*?[\\\\W._].*?\\\\1)",\n               ".{1,", maxlen, "}(?<=_|\\\\b|\\\\Z)",\n               "|.{1,", maxlen, "}")\n  matchinfo <- gregexpr(pattern = re,\n                        text = str, perl = TRUE)\n  groups <- regmatches(x = str, m = matchinfo)[[1]]\n  paste(groups, collapse = "<br/>")\n}\n\n# %+=% -------------------------------------------------------------------------\n# infix to simplify append()ing\n#\' @keywords internal\n`%+=%` <- function(x, value) {\n  eval.parent(substitute(x <- append(x, value)))\n}\n\n# unquote ----------------------------------------------------------------------\n# Remove quotation marks inside a string\n#\' @keywords internal\nunquote <- function(x) {\n  x <- sub("^\\\\\'(.+)\\\\\'$", "\\\\1", x)\n  x <- sub(\'^\\\\"(.+)\\\\"$\', "\\\\1", x)\n  x\n}\n\n# conv_non_ascii ---------------------------------------------------------------\n# Replace accentuated characters by their html decimal entity\n#\' @keywords internal\nconv_non_ascii <- function(...) {\n  out <- character()\n  for (s in list(...)) {\n    if (is.null(s)) next\n    splitted <- unlist(strsplit(s, ""))\n    intvalues <- utf8ToInt(enc2utf8(s))\n    pos_to_modify_lat <- which(intvalues >=  161 & intvalues <=  255)\n    pos_to_modify_cyr <- which(intvalues >= 1024 & intvalues <= 1279)\n    pos_to_modify_no  <- which(intvalues == 8470)\n    pos_to_modify <- c(pos_to_modify_lat, pos_to_modify_cyr, pos_to_modify_no)\n    splitted[pos_to_modify] <- paste0("&#0",  intvalues[pos_to_modify], ";")\n    out <- c(out, paste0(splitted, collapse = ""))\n  }\n  out\n}\n\n# ws_to_symbol -----------------------------------------------------------------\n# Replace leading and trailing white space in character vectors and factor\n# levels by the special character intToUtf8(183)\n#\' @keywords internal\nws_to_symbol <- function(x) {\n  \n  ws_symbol <- intToUtf8(183)\n  x_is_char <- is.character(x)\n  if (isTRUE(x_is_char)) {\n    x <- as.factor(x)\n  }\n  \n  xx <- levels(x)\n  xx_encod <- Encoding(xx)\n  \n  for (enc in setdiff(Encoding(xx), "unknown")) {\n    xx[xx_encod == enc] <- iconv(xx[xx_encod == enc], \n                                 from = enc, to = "UTF-8")\n  }\n  \n  left_ws_count  <- nchar(xx) - nchar(sub("^ +", "", xx))\n  right_ws_count <- nchar(xx) - nchar(sub(" +$", "", xx))\n  \n  # Correction to avoid doubling the length of whitespace-only strings\n  right_ws_count[right_ws_count == nchar(xx)] <- 0\n  \n  xx <- gsub("((?:\\\\A|\\\\G) )|(?&rec)( )+(?\'rec\')$", ws_symbol, xx, perl = TRUE)\n  \n  \n  levels(x) <- xx\n  \n  if (isTRUE(x_is_char)) {\n    return(as.character(x))\n  } else {\n    return(x)\n  }\n}\n\n\n# Shorcut function to get translation strings\n#\' @keywords internal\ntrs <- function(item, l = st_options("lang")) {\n  l <- force(l)\n  if (l != "custom") {\n    val <- .translations[l,item]\n  } else {\n    val <- .st_env$custom_lang["custom", item]\n  }\n  ifelse(is.na(val), "", val)\n}\n\n\n# Count "empty" elements (NA\'s / vectors of size 0)\n#\' @keywords internal\ncount_empty <- function(x, count.nas = TRUE) {\n  n <- 0\n  for (item in x) {\n    if (length(item) == 0) {\n      n <- n + 1\n    } else if (isTRUE(count.nas)) {\n      n <- n + sum(is.na(item))\n    }\n  }\n  n\n}\n\n# Clone of htmltools:::paste8\n#\' @keywords internal\npaste8 <- function(..., sep = " ", collapse = NULL) {\n  args <- c(\n    lapply(list(...), enc2utf8), \n    list(\n      sep = if (is.null(sep)) sep else enc2utf8(sep), \n      collapse = if (is.null(collapse)) collapse else enc2utf8(collapse)\n    )\n  )\n  do.call(paste, args)\n}\n\n# Map columns / values of dplyr\'s group_by objects based on group_keys\n#\' @keywords internal\nmap_groups <- function(gk) {\n  grs <- c()\n  for (i in seq_len(nrow(gk))) {\n    gr <- paste(colnames(gk), as.character(unlist(gk[i,])), \n                sep = " = ", collapse = ", ")\n    grs <- c(grs, gr)\n  }\n  grs\n}\n\npad <- function(string, width) {\n  paste0(strrep(" ", max(0, width - nchar(string))), string)\n}\n\npctvalid <- function(x, round.digits = 1) {\n  round(sum(!is.na(x)) / length(x) * 100, round.digits)\n}\n'