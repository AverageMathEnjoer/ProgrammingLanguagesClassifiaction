b'package com.rd.animation.type;\n\nimport android.animation.IntEvaluator;\nimport android.animation.PropertyValuesHolder;\nimport android.animation.ValueAnimator;\nimport androidx.annotation.NonNull;\nimport android.view.animation.AccelerateDecelerateInterpolator;\nimport com.rd.animation.controller.ValueController;\nimport com.rd.animation.data.type.SlideAnimationValue;\n\npublic class SlideAnimation extends BaseAnimation<ValueAnimator> {\n\n    private static final String ANIMATION_COORDINATE = "ANIMATION_COORDINATE";\n    private static final int COORDINATE_NONE = -1;\n\n    private SlideAnimationValue value;\n    private int coordinateStart = COORDINATE_NONE;\n    private int coordinateEnd = COORDINATE_NONE;\n\n    public SlideAnimation(@NonNull ValueController.UpdateListener listener) {\n        super(listener);\n        value = new SlideAnimationValue();\n    }\n\n    @NonNull\n    @Override\n    public ValueAnimator createAnimator() {\n        ValueAnimator animator = new ValueAnimator();\n        animator.setDuration(BaseAnimation.DEFAULT_ANIMATION_TIME);\n        animator.setInterpolator(new AccelerateDecelerateInterpolator());\n        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n            @Override\n            public void onAnimationUpdate(ValueAnimator animation) {\n                onAnimateUpdated(animation);\n            }\n        });\n\n        return animator;\n    }\n\n    @Override\n    public SlideAnimation progress(float progress) {\n        if (animator != null) {\n            long playTime = (long) (progress * animationDuration);\n\n            if (animator.getValues() != null && animator.getValues().length > 0) {\n                animator.setCurrentPlayTime(playTime);\n            }\n        }\n\n        return this;\n    }\n\n    @NonNull\n    public SlideAnimation with(int coordinateStart, int coordinateEnd) {\n        if (animator != null && hasChanges(coordinateStart, coordinateEnd)) {\n\n            this.coordinateStart = coordinateStart;\n            this.coordinateEnd = coordinateEnd;\n\n            PropertyValuesHolder holder = createSlidePropertyHolder();\n            animator.setValues(holder);\n        }\n\n        return this;\n    }\n\n    private PropertyValuesHolder createSlidePropertyHolder() {\n        PropertyValuesHolder holder = PropertyValuesHolder.ofInt(ANIMATION_COORDINATE, coordinateStart, coordinateEnd);\n        holder.setEvaluator(new IntEvaluator());\n\n        return holder;\n    }\n\n    private void onAnimateUpdated(@NonNull ValueAnimator animation) {\n        int coordinate = (int) animation.getAnimatedValue(ANIMATION_COORDINATE);\n        value.setCoordinate(coordinate);\n\n        if (listener != null) {\n            listener.onValueUpdated(value);\n        }\n    }\n\n    @SuppressWarnings("RedundantIfStatement")\n    private boolean hasChanges(int coordinateStart, int coordinateEnd) {\n        if (this.coordinateStart != coordinateStart) {\n            return true;\n        }\n\n        if (this.coordinateEnd != coordinateEnd) {\n            return true;\n        }\n\n        return false;\n    }\n}\n'