b'//Given the list of M transacations b/w N people, find out the minimum number of transactions required to settle it up!\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 1e6;\nint balance[N];\nint main()\n{\n    int i, n, m, u, v, w, poor, x, rich, y;\n    cin >> n >> m;\n    for(i=0; i<m; i++) {\n        cin >> u >> v >> w;\n        //u has to pay v an amount w\n        balance[u] -= w;\n        balance[v] += w;\n    }\n    \n    multiset<tuple<int,int>> S;\n    for(i=0; i<n; i++) \n        if(balance[i] != 0) S.insert(make_tuple(balance[i], i));\n       \n    int count = 0;\n    while(!S.empty()) {\n        tie(poor, x) = *S.begin(); S.erase(S.begin());\n        tie(rich, y) = *S.rbegin(); S.erase(prev(S.end()));\n        int amount = min(-poor, rich);\n        \n        count++; //poor pays amount "amount" to rich\n        printf("%d pays %d amount to %d\\n", x, amount, y);\n        poor += amount;\n        rich -= amount;\n        \n        if (poor) S.insert(make_tuple(poor, x));\n        if (rich) S.insert(make_tuple(rich, y));\n    }\n    \n    cout << count << endl;\n    \n    \n}\n'