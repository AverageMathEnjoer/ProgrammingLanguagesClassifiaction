b'\xef\xbb\xbfusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Reflection;\nusing System.Text;\nusing System.Xml;\nusing log4net;\nusing log4net.Repository;\n\nnamespace Core.CrossCuttingConcerns.Logging.Log4Net\n{\n    public class LoggerServiceBase\n    {\n        private ILog _log;\n        public LoggerServiceBase(string name)\n        {\n            XmlDocument xmlDocument=new XmlDocument();\n            xmlDocument.Load(File.OpenRead("log4net.config"));\n\n            ILoggerRepository loggerRepository = LogManager.CreateRepository(Assembly.GetEntryAssembly(),\n                typeof(log4net.Repository.Hierarchy.Hierarchy));\n            log4net.Config.XmlConfigurator.Configure(loggerRepository, xmlDocument["log4net"]);\n\n            _log = LogManager.GetLogger(loggerRepository.Name, name);\n\n\n        }\n\n        public bool IsInfoEnabled => _log.IsInfoEnabled;\n        public bool IsDebugEnabled => _log.IsDebugEnabled;\n        public bool IsWarnEnabled => _log.IsWarnEnabled;\n        public bool IsFatalEnabled => _log.IsFatalEnabled;\n        public bool IsErrorEnabled => _log.IsErrorEnabled;\n\n        public void Info(object logMessage)\n        {\n            if(IsInfoEnabled)\n            _log.Info(logMessage);\n        }\n\n        public void Debug(object logMessage)\n        {\n            if (IsDebugEnabled)\n                _log.Debug(logMessage);\n        }\n\n        public void Warn(object logMessage)\n        {\n            if (IsWarnEnabled)\n                _log.Warn(logMessage);\n        }\n\n        public void Fatal(object logMessage)\n        {\n            if (IsFatalEnabled)\n                _log.Fatal(logMessage);\n        }\n\n        public void Error(object logMessage)\n        {\n            if (IsErrorEnabled)\n                _log.Error(logMessage);\n        }\n\n\n    }\n}\n'