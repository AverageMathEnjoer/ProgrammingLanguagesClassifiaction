b'package effectivejava.chapter8.item50;\nimport java.util.*;\n\n// Broken "immutable" time period class (Pages 231-3)\npublic final class Period {\n    private final Date start;\n    private final Date end;\n\n    /**\n     * @param  start the beginning of the period\n     * @param  end the end of the period; must not precede start\n     * @throws IllegalArgumentException if start is after end\n     * @throws NullPointerException if start or end is null\n     */\n    public Period(Date start, Date end) {\n        if (start.compareTo(end) > 0)\n            throw new IllegalArgumentException(\n                    start + " after " + end);\n        this.start = start;\n        this.end   = end;\n    }\n\n    public Date start() {\n        return start;\n    }\n    public Date end() {\n        return end;\n    }\n\n    public String toString() {\n        return start + " - " + end;\n    }\n\n//    // Repaired constructor - makes defensive copies of parameters (Page 232)\n//    public Period(Date start, Date end) {\n//        this.start = new Date(start.getTime());\n//        this.end   = new Date(end.getTime());\n//\n//        if (this.start.compareTo(this.end) > 0)\n//            throw new IllegalArgumentException(\n//                    this.start + " after " + this.end);\n//    }\n//\n//    // Repaired accessors - make defensive copies of internal fields (Page 233)\n//    public Date start() {\n//        return new Date(start.getTime());\n//    }\n//\n//    public Date end() {\n//        return new Date(end.getTime());\n//    }\n\n    // Remainder omitted\n}'