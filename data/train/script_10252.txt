b'/*\n * Copyright (C) 2015 Naman Dwivedi\n *\n * Licensed under the GNU General Public License v3\n *\n * This is free software: you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n */\npackage com.naman14.timber.fragments;\n\nimport android.annotation.TargetApi;\nimport android.content.Context;\nimport android.graphics.Bitmap;\nimport android.graphics.Color;\nimport android.os.AsyncTask;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport com.google.android.material.appbar.AppBarLayout;\nimport com.google.android.material.appbar.CollapsingToolbarLayout;\nimport com.google.android.material.floatingactionbutton.FloatingActionButton;\nimport androidx.fragment.app.Fragment;\nimport androidx.appcompat.app.ActionBar;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.palette.graphics.Palette;\nimport androidx.recyclerview.widget.LinearLayoutManager;\nimport androidx.recyclerview.widget.RecyclerView;\nimport androidx.appcompat.widget.Toolbar;\nimport android.transition.Transition;\nimport android.view.LayoutInflater;\nimport android.view.Menu;\nimport android.view.MenuInflater;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.ImageView;\nimport android.widget.TextView;\n\nimport com.afollestad.appthemeengine.ATE;\nimport com.afollestad.appthemeengine.Config;\nimport com.naman14.timber.MusicPlayer;\nimport com.naman14.timber.R;\nimport com.naman14.timber.adapters.AlbumSongsAdapter;\nimport com.naman14.timber.dataloaders.AlbumLoader;\nimport com.naman14.timber.dataloaders.AlbumSongLoader;\nimport com.naman14.timber.dialogs.AddPlaylistDialog;\nimport com.naman14.timber.listeners.SimplelTransitionListener;\nimport com.naman14.timber.models.Album;\nimport com.naman14.timber.models.Song;\nimport com.naman14.timber.utils.ATEUtils;\nimport com.naman14.timber.utils.Constants;\nimport com.naman14.timber.utils.FabAnimationUtils;\nimport com.naman14.timber.utils.Helpers;\nimport com.naman14.timber.utils.ImageUtils;\nimport com.naman14.timber.utils.NavigationUtils;\nimport com.naman14.timber.utils.PreferencesUtility;\nimport com.naman14.timber.utils.SortOrder;\nimport com.naman14.timber.utils.TimberUtils;\nimport com.naman14.timber.widgets.DividerItemDecoration;\nimport com.nostra13.universalimageloader.core.assist.FailReason;\nimport com.nostra13.universalimageloader.core.listener.ImageLoadingListener;\n\nimport net.steamcrafted.materialiconlib.MaterialDrawableBuilder;\n\nimport java.util.List;\n\npublic class AlbumDetailFragment extends Fragment {\n\n    private long albumID = -1;\n\n    private ImageView albumArt, artistArt;\n    private TextView albumTitle, albumDetails;\n    private AppCompatActivity mContext;\n\n    private RecyclerView recyclerView;\n    private AlbumSongsAdapter mAdapter;\n\n    private Toolbar toolbar;\n\n    private Album album;\n\n    private CollapsingToolbarLayout collapsingToolbarLayout;\n    private AppBarLayout appBarLayout;\n    private FloatingActionButton fab;\n\n    private boolean loadFailed = false;\n\n    private PreferencesUtility mPreferences;\n    private Context context;\n    private int primaryColor = -1;\n\n    public static AlbumDetailFragment newInstance(long id, boolean useTransition, String transitionName) {\n        AlbumDetailFragment fragment = new AlbumDetailFragment();\n        Bundle args = new Bundle();\n        args.putLong(Constants.ALBUM_ID, id);\n        args.putBoolean("transition", useTransition);\n        if (useTransition)\n            args.putString("transition_name", transitionName);\n        fragment.setArguments(args);\n        return fragment;\n    }\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        if (getArguments() != null) {\n            albumID = getArguments().getLong(Constants.ALBUM_ID);\n        }\n        context = getActivity();\n        mContext = (AppCompatActivity) context;\n        mPreferences = PreferencesUtility.getInstance(context);\n    }\n\n    @TargetApi(21)\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        final View rootView = inflater.inflate(\n                R.layout.fragment_album_detail, container, false);\n\n        albumArt = (ImageView) rootView.findViewById(R.id.album_art);\n        artistArt = (ImageView) rootView.findViewById(R.id.artist_art);\n        albumTitle = (TextView) rootView.findViewById(R.id.album_title);\n        albumDetails = (TextView) rootView.findViewById(R.id.album_details);\n\n        toolbar = (Toolbar) rootView.findViewById(R.id.toolbar);\n\n        fab = (FloatingActionButton) rootView.findViewById(R.id.fab);\n\n        if (getArguments().getBoolean("transition")) {\n            albumArt.setTransitionName(getArguments().getString("transition_name"));\n        }\n        recyclerView = (RecyclerView) rootView.findViewById(R.id.recyclerview);\n        collapsingToolbarLayout = (CollapsingToolbarLayout) rootView.findViewById(R.id.collapsing_toolbar);\n        appBarLayout = (AppBarLayout) rootView.findViewById(R.id.app_bar);\n        recyclerView.setEnabled(false);\n        recyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));\n\n        album = AlbumLoader.getAlbum(getActivity(), albumID);\n\n        setAlbumart();\n\n        setUpEverything();\n\n\n        fab.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Handler handler = new Handler();\n                handler.postDelayed(new Runnable() {\n                    @Override\n                    public void run() {\n                        AlbumSongsAdapter adapter = (AlbumSongsAdapter) recyclerView.getAdapter();\n                        MusicPlayer.playAll(getActivity(), adapter.getSongIds(), 0, albumID, TimberUtils.IdType.Album, true);\n                        NavigationUtils.navigateToNowplaying(getActivity(), false);\n                    }\n                }, 150);\n            }\n        });\n\n        return rootView;\n    }\n\n    private void setupToolbar() {\n\n        ((AppCompatActivity) getActivity()).setSupportActionBar(toolbar);\n        final ActionBar ab = ((AppCompatActivity) getActivity()).getSupportActionBar();\n        ab.setDisplayHomeAsUpEnabled(true);\n        collapsingToolbarLayout.setTitle(album.title);\n\n    }\n\n    private void setAlbumart() {\n        ImageUtils.loadAlbumArtIntoView(album.id, albumArt, new ImageLoadingListener() {\n                    @Override\n                    public void onLoadingStarted(String imageUri, View view) {\n                    }\n\n                    @Override\n                    public void onLoadingFailed(String imageUri, View view, FailReason failReason) {\n                        loadFailed = true;\n                        MaterialDrawableBuilder builder = MaterialDrawableBuilder.with(context)\n                                .setIcon(MaterialDrawableBuilder.IconValue.SHUFFLE)\n                                .setColor(TimberUtils.getBlackWhiteColor(Config.accentColor(context, Helpers.getATEKey(context))));\n                        ATEUtils.setFabBackgroundTint(fab, Config.accentColor(context, Helpers.getATEKey(context)));\n                        fab.setImageDrawable(builder.build());\n                    }\n\n                    @Override\n                    public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {\n                        try {\n                            new Palette.Builder(loadedImage).generate(new Palette.PaletteAsyncListener() {\n                                                                          @Override\n                                                                          public void onGenerated(Palette palette) {\n                                                                              Palette.Swatch swatch = palette.getVibrantSwatch();\n                                                                              if (swatch != null) {\n                                                                                  primaryColor = swatch.getRgb();\n                                                                                  collapsingToolbarLayout.setContentScrimColor(primaryColor);\n                                                                                  if (getActivity() != null)\n                                                                                      ATEUtils.setStatusBarColor(getActivity(), Helpers.getATEKey(getActivity()), primaryColor);\n                                                                              } else {\n                                                                                  Palette.Swatch swatchMuted = palette.getMutedSwatch();\n                                                                                  if (swatchMuted != null) {\n                                                                                      primaryColor = swatchMuted.getRgb();\n                                                                                      collapsingToolbarLayout.setContentScrimColor(primaryColor);\n                                                                                      if (getActivity() != null)\n                                                                                          ATEUtils.setStatusBarColor(getActivity(), Helpers.getATEKey(getActivity()), primaryColor);\n                                                                                  }\n                                                                              }\n\n                                                                              if (getActivity() != null) {\n                                                                                  MaterialDrawableBuilder builder = MaterialDrawableBuilder.with(getActivity())\n                                                                                          .setIcon(MaterialDrawableBuilder.IconValue.SHUFFLE)\n                                                                                          .setSizeDp(30);\n                                                                                  if (primaryColor != -1) {\n                                                                                      builder.setColor(TimberUtils.getBlackWhiteColor(primaryColor));\n                                                                                      ATEUtils.setFabBackgroundTint(fab, primaryColor);\n                                                                                      fab.setImageDrawable(builder.build());\n                                                                                  } else {\n                                                                                      if (context != null) {\n                                                                                          ATEUtils.setFabBackgroundTint(fab, Config.accentColor(context, Helpers.getATEKey(context)));\n                                                                                          builder.setColor(TimberUtils.getBlackWhiteColor(Config.accentColor(context, Helpers.getATEKey(context))));\n                                                                                          fab.setImageDrawable(builder.build());\n                                                                                      }\n                                                                                  }\n                                                                              }\n                                                                          }\n                                                                      }\n\n                            );\n                        } catch (\n                                Exception ignored\n                                )\n\n                        {\n\n                        }\n                    }\n\n                    @Override\n                    public void onLoadingCancelled(String imageUri, View view) {\n                    }\n\n                }\n\n        );\n    }\n\n    private void setAlbumDetails() {\n\n        String songCount = TimberUtils.makeLabel(getActivity(), R.plurals.Nsongs, album.songCount);\n\n        String year = (album.year != 0) ? (" - " + String.valueOf(album.year)) : "";\n\n        albumTitle.setText(album.title);\n        albumDetails.setText(album.artistName + " - " + songCount + year);\n\n\n    }\n\n    private void setUpAlbumSongs() {\n\n        List<Song> songList = AlbumSongLoader.getSongsForAlbum(getActivity(), albumID);\n        mAdapter = new AlbumSongsAdapter(getActivity(), songList, albumID);\n        recyclerView.addItemDecoration(new DividerItemDecoration(getActivity(), DividerItemDecoration.VERTICAL_LIST));\n        recyclerView.setAdapter(mAdapter);\n\n    }\n\n    private void setUpEverything() {\n        setupToolbar();\n        setAlbumDetails();\n        setUpAlbumSongs();\n    }\n\n    private void reloadAdapter() {\n        new AsyncTask<Void, Void, Void>() {\n            @Override\n            protected Void doInBackground(final Void... unused) {\n                List<Song> songList = AlbumSongLoader.getSongsForAlbum(getActivity(), albumID);\n                mAdapter.updateDataSet(songList);\n                return null;\n            }\n\n            @Override\n            protected void onPostExecute(Void aVoid) {\n                mAdapter.notifyDataSetChanged();\n            }\n        }.execute();\n    }\n\n    @Override\n    public void onActivityCreated(final Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n        setHasOptionsMenu(true);\n    }\n\n    @Override\n    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {\n        super.onCreateOptionsMenu(menu, inflater);\n        inflater.inflate(R.menu.album_detail, menu);\n        if (getActivity() != null)\n            ATE.applyMenu(getActivity(), "dark_theme", menu);\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        switch (item.getItemId()) {\n            case R.id.menu_go_to_artist:\n                NavigationUtils.goToArtist(getContext(), album.artistId);\n                break;\n            case R.id.popup_song_addto_queue:\n                MusicPlayer.addToQueue(context, mAdapter.getSongIds(), -1, TimberUtils.IdType.NA);\n                break;\n            case R.id.popup_song_addto_playlist:\n                AddPlaylistDialog.newInstance(mAdapter.getSongIds()).show(mContext.getSupportFragmentManager(), "ADD_PLAYLIST");\n                break;\n            case R.id.menu_sort_by_az:\n                mPreferences.setAlbumSongSortOrder(SortOrder.AlbumSongSortOrder.SONG_A_Z);\n                reloadAdapter();\n                return true;\n            case R.id.menu_sort_by_za:\n                mPreferences.setAlbumSongSortOrder(SortOrder.AlbumSongSortOrder.SONG_Z_A);\n                reloadAdapter();\n                return true;\n            case R.id.menu_sort_by_year:\n                mPreferences.setAlbumSongSortOrder(SortOrder.AlbumSongSortOrder.SONG_YEAR);\n                reloadAdapter();\n                return true;\n            case R.id.menu_sort_by_duration:\n                mPreferences.setAlbumSongSortOrder(SortOrder.AlbumSongSortOrder.SONG_DURATION);\n                reloadAdapter();\n                return true;\n            case R.id.menu_sort_by_track_number:\n                mPreferences.setAlbumSongSortOrder(SortOrder.AlbumSongSortOrder.SONG_TRACK_LIST);\n                reloadAdapter();\n                return true;\n        }\n        return super.onOptionsItemSelected(item);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n        String ateKey = Helpers.getATEKey(getActivity());\n        toolbar.setBackgroundColor(Color.TRANSPARENT);\n        if (primaryColor != -1 && getActivity() != null) {\n            collapsingToolbarLayout.setContentScrimColor(primaryColor);\n            ATEUtils.setFabBackgroundTint(fab, primaryColor);\n            ATEUtils.setStatusBarColor(getActivity(), ateKey, primaryColor);\n        }\n\n    }\n\n    private class EnterTransitionListener extends SimplelTransitionListener {\n\n        @TargetApi(21)\n        public void onTransitionEnd(Transition paramTransition) {\n            FabAnimationUtils.scaleIn(fab);\n        }\n\n        public void onTransitionStart(Transition paramTransition) {\n            FabAnimationUtils.scaleOut(fab, 0, null);\n        }\n\n    }\n}\n'