b'{-# LANGUAGE BangPatterns #-}\n\nmodule Hoodle.Web.Erase where\n\nimport Control.Monad (when)\nimport Control.Monad.IO.Class (MonadIO (liftIO))\nimport Control.Monad.State (MonadState (get))\nimport Data.Foldable (toList, traverse_)\nimport Data.List (nub, sort)\nimport Data.Sequence (Seq, ViewR (..), singleton, viewr, (|>))\nimport qualified Data.Sequence as Seq (length)\nimport Hoodle.Web.Default (nextevent)\nimport qualified Hoodle.Web.ForeignJS as J\nimport Hoodle.Web.Type.Coroutine (MainCoroutine)\nimport Hoodle.Web.Type.Event (UserEvent (..))\nimport Hoodle.Web.Type.State\n  ( docstateData,\n    hdlstateDocState,\n    hdlstateSVGBox,\n    hdlstateWebSocket,\n  )\nimport Hoodle.Web.Util\n  ( intersectingStrokes,\n    sendBinary,\n    transformPathFromCanvasToSVG,\n  )\nimport Lens.Micro ((<&>), (^.))\nimport Message\n  ( C2SMsg (DeleteStrokes),\n    CommitId (..),\n    -- TextSerializable (serialize),\n  )\n\neraseUpdatePeriod :: Int\neraseUpdatePeriod = 10\n\nerasingMode :: [CommitId] -> Seq (Double, Double) -> MainCoroutine ()\nerasingMode hstrks0 cxys = do\n  ev <- nextevent\n  case ev of\n    PointerMove cxy -> do\n      s <- get\n      let svg = s ^. hdlstateSVGBox\n          strks = s ^. hdlstateDocState . docstateData\n      case viewr cxys of\n        _ :> _ ->\n          if Seq.length cxys >= eraseUpdatePeriod\n            then do\n              xys <- liftIO $ transformPathFromCanvasToSVG svg (toList cxys)\n              let hstrks = intersectingStrokes xys strks\n              liftIO $\n                traverse_ (J.strokeChangeColor svg . ("stroke" ++) . show . unCommitId) hstrks\n              let !hstrks\' = nub $ sort (hstrks ++ hstrks0)\n              erasingMode hstrks\' (singleton cxy)\n            else erasingMode hstrks0 (cxys |> cxy)\n        _ -> pure ()\n    PointerUp _ -> do\n      sock <- get <&> (^. hdlstateWebSocket)\n      when (not . null $ hstrks0) $\n        liftIO $ do\n          let msg = DeleteStrokes hstrks0\n          sendBinary sock msg\n    _ -> erasingMode hstrks0 cxys\n'