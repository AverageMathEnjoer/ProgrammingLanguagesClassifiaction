b'using System;\nusing System.Diagnostics;\nusing System.Text;\n\nusing sqlite3_int64 = System.Int64;\nusing i64 = System.Int64;\nusing u8 = System.Byte;\nusing u32 = System.UInt32;\nusing u64 = System.UInt64;\n\nnamespace CS_SQLite3\n{\n  using sqlite3_value = CSSQLite.Mem;\n  using sqlite_int64 = System.Int64;\n\n  public partial class CSSQLite\n  {\n    /*\n    ** 2002 February 23\n    **\n    ** The author disclaims copyright to this source code.  In place of\n    ** a legal notice, here is a blessing:\n    **\n    **    May you do good and not evil.\n    **    May you find forgiveness for yourself and forgive others.\n    **    May you share freely, never taking more than you give.\n    **\n    *************************************************************************\n    ** This file contains the C functions that implement various SQL\n    ** functions of SQLite.\n    **\n    ** There is only one exported symbol in this file - the function\n    ** sqliteRegisterBuildinFunctions() found at the bottom of the file.\n    ** All other code has file scope.\n    **\n    ** $Id: func.c,v 1.239 2009/06/19 16:44:41 drh Exp $\n    **\n    *************************************************************************\n    **  Included in SQLite3 port to C#-SQLite;  2008 Noah B Hart\n    **  C#-SQLite is an independent reimplementation of the SQLite software library\n    **\n    **  $Header$\n    *************************************************************************\n    */\n    //#include "sqliteInt.h"\n    //#include <stdlib.h>\n    //#include <assert.h>\n    //#include "vdbeInt.h"\n\n\n    /*\n    ** Return the collating function associated with a function.\n    */\n    static CollSeq sqlite3GetFuncCollSeq( sqlite3_context context )\n    {\n      return context.pColl;\n    }\n\n    /*\n    ** Implementation of the non-aggregate min() and max() functions\n    */\n    static void minmaxFunc(\n    sqlite3_context context,\n    int argc,\n    sqlite3_value[] argv\n    )\n    {\n      int i;\n      int mask;    /* 0 for min() or 0xffffffff for max() */\n      int iBest;\n      CollSeq pColl;\n\n      Debug.Assert( argc > 1 );\n      mask = (int)sqlite3_user_data( context ) == 0 ? 0 : -1;\n      pColl = sqlite3GetFuncCollSeq( context );\n      Debug.Assert( pColl != null );\n      Debug.Assert( mask == -1 || mask == 0 );\n      testcase( mask == 0 );\n      iBest = 0;\n      if ( sqlite3_value_type( argv[0] ) == SQLITE_NULL ) return;\n      for ( i = 1 ; i < argc ; i++ )\n      {\n        if ( sqlite3_value_type( argv[i] ) == SQLITE_NULL ) return;\n        if ( ( sqlite3MemCompare( argv[iBest], argv[i], pColl ) ^ mask ) >= 0 )\n        {\n          iBest = i;\n        }\n      }\n      sqlite3_result_value( context, argv[iBest] );\n    }\n\n    /*\n    ** Return the type of the argument.\n    */\n    static void typeofFunc(\n    sqlite3_context context,\n    int NotUsed,\n    sqlite3_value[] argv\n    )\n    {\n      string z = "";\n      UNUSED_PARAMETER( NotUsed );\n      switch ( sqlite3_value_type( argv[0] ) )\n      {\n        case SQLITE_INTEGER: z = "integer"; break;\n        case SQLITE_TEXT: z = "text"; break;\n        case SQLITE_FLOAT: z = "real"; break;\n        case SQLITE_BLOB: z = "blob"; break;\n        default: z = "null"; break;\n      }\n      sqlite3_result_text( context, z, -1, SQLITE_STATIC );\n    }\n\n\n    /*\n    ** Implementation of the length() function\n    */\n    static void lengthFunc(\n    sqlite3_context context,\n    int argc,\n    sqlite3_value[] argv\n    )\n    {\n      int len;\n\n      Debug.Assert( argc == 1 );\n      UNUSED_PARAMETER( argc );\n      switch ( sqlite3_value_type( argv[0] ) )\n      {\n        case SQLITE_BLOB:\n        case SQLITE_INTEGER:\n        case SQLITE_FLOAT:\n          {\n            sqlite3_result_int( context, sqlite3_value_bytes( argv[0] ) );\n            break;\n          }\n        case SQLITE_TEXT:\n          {\n            byte[] z = sqlite3_value_blob( argv[0] );\n            if ( z == null ) return;\n            len = 0;\n            int iz = 0;\n            while ( iz < z.Length && z[iz] != \'\\0\' )\n            {\n              len++;\n              SQLITE_SKIP_UTF8( z, ref iz );\n            }\n            sqlite3_result_int( context, len );\n            break;\n          }\n        default:\n          {\n            sqlite3_result_null( context );\n            break;\n          }\n      }\n    }\n\n    /*\n    ** Implementation of the abs() function\n    */\n    static void absFunc(\n    sqlite3_context context,\n    int argc,\n    sqlite3_value[] argv\n    )\n    {\n      Debug.Assert( argc == 1 );\n      UNUSED_PARAMETER( argc );\n      switch ( sqlite3_value_type( argv[0] ) )\n      {\n        case SQLITE_INTEGER:\n          {\n            i64 iVal = sqlite3_value_int64( argv[0] );\n            if ( iVal < 0 )\n            {\n              if ( ( iVal << 1 ) == 0 )\n              {\n                sqlite3_result_error( context, "integer overflow", -1 );\n                return;\n              }\n              iVal = -iVal;\n            }\n            sqlite3_result_int64( context, iVal );\n            break;\n          }\n        case SQLITE_NULL:\n          {\n            sqlite3_result_null( context );\n            break;\n          }\n        default:\n          {\n            double rVal = sqlite3_value_double( argv[0] );\n            if ( rVal < 0 ) rVal = -rVal;\n            sqlite3_result_double( context, rVal );\n            break;\n          }\n      }\n    }\n\n    /*\n    ** Implementation of the substr() function.\n    **\n    ** substr(x,p1,p2)  returns p2 characters of x[] beginning with p1.\n    ** p1 is 1-indexed.  So substr(x,1,1) returns the first character\n    ** of x.  If x is text, then we actually count UTF-8 characters.\n    ** If x is a blob, then we count bytes.\n    **\n    ** If p1 is negative, then we begin abs(p1) from the end of x[].\n    */\n    static void substrFunc(\n    sqlite3_context context,\n    int argc,\n    sqlite3_value[] argv\n    )\n    {\n      string z = "";\n      byte[] zBLOB = null;\n      string z2;\n      int len;\n      int p0type;\n      int p1, p2;\n      int negP2 = 0;\n\n      Debug.Assert( argc == 3 || argc == 2 );\n      if ( sqlite3_value_type( argv[1] ) == SQLITE_NULL\n      || ( argc == 3 && sqlite3_value_type( argv[2] ) == SQLITE_NULL )\n      )\n      {\n        return;\n      }\n      p0type = sqlite3_value_type( argv[0] );\n      if ( p0type == SQLITE_BLOB )\n      {\n        len = sqlite3_value_bytes( argv[0] );\n        zBLOB = argv[0].zBLOB;\n        if ( zBLOB == null ) return;\n        Debug.Assert( len == zBLOB.Length );\n      }\n      else\n      {\n        z = sqlite3_value_text( argv[0] );\n        if ( z == null ) return;\n        len = z.Length;\n        //len = 0;\n        //for ( z2 = z ; z2 != "" ; len++ )\n        //{\n        //  SQLITE_SKIP_UTF8( ref z2 );\n        //}\n      }\n      p1 = sqlite3_value_int( argv[1] );\n      if ( argc == 3 )\n      {\n        p2 = sqlite3_value_int( argv[2] );\n        if ( p2 < 0 )\n        {\n          p2 = -p2;\n          negP2 = 1;\n        }\n      }\n      else\n      {\n        p2 = ( sqlite3_context_db_handle( context ) ).aLimit[SQLITE_LIMIT_LENGTH];\n      }\n      if ( p1 < 0 )\n      {\n        p1 += len;\n        if ( p1 < 0 )\n        {\n          p2 += p1;\n          if ( p2 < 0 ) p2 = 0;\n          p1 = 0;\n        }\n      }\n      else if ( p1 > 0 )\n      {\n        p1--;\n      }\n      else if ( p2 > 0 )\n      {\n        p2--;\n      }\n      if ( negP2 != 0 )\n      {\n        p1 -= p2;\n        if ( p1 < 0 )\n        {\n          p2 += p1;\n          p1 = 0;\n        }\n      }\n      Debug.Assert( p1 >= 0 && p2 >= 0 );\n      if ( p1 + p2 > len )\n      {\n        p2 = len - p1;\n        if ( p2 < 0 ) p2 = 0;\n      }\n      if ( p0type != SQLITE_BLOB )\n      {\n        //while ( z != "" && p1 != 0 )\n        //{\n        //  SQLITE_SKIP_UTF8( ref z );\n        //  p1--;\n        //}\n        //for ( z2 = z ; z2 != "" && p2 != 0 ; p2-- )\n        //{\n        //  SQLITE_SKIP_UTF8( ref z2 );\n        //}\n        sqlite3_result_text( context, z.Length == 0 || p1 > z.Length ? "" : z.Substring( p1, p2 ), (int)p2, SQLITE_TRANSIENT );\n      }\n      else\n      {\n        StringBuilder sb = new StringBuilder( zBLOB.Length );\n        if ( zBLOB.Length == 0 || p1 > zBLOB.Length ) sb.Length = 0;\n        else\n        {\n          for ( int i = p1 ; i < p1 + p2 ; i++ ) { sb.Append( (char)zBLOB[i] ); }\n        }\n\n        sqlite3_result_blob( context, sb.ToString(), (int)p2, SQLITE_TRANSIENT );\n      }\n    }\n\n    /*\n    ** Implementation of the round() function\n    */\n#if !SQLITE_OMIT_FLOATING_POINT\n    static void roundFunc(\n    sqlite3_context context,\n    int argc,\n    sqlite3_value[] argv\n    )\n    {\n      int n = 0;\n      double r;\n      string zBuf = "";\n      Debug.Assert( argc == 1 || argc == 2 );\n      if ( argc == 2 )\n      {\n        if ( SQLITE_NULL == sqlite3_value_type( argv[1] ) ) return;\n        n = sqlite3_value_int( argv[1] );\n        if ( n > 30 ) n = 30;\n        if ( n < 0 ) n = 0;\n      }\n      if ( sqlite3_value_type( argv[0] ) == SQLITE_NULL ) return;\n      r = sqlite3_value_double( argv[0] );\n      zBuf = sqlite3_mprintf( "%.*f", n, r );\n      if ( zBuf == null )\n      {\n        sqlite3_result_error_nomem( context );\n      }\n      else\n      {\n        sqlite3AtoF( zBuf, ref r );\n        //sqlite3_free( ref zBuf );\n        sqlite3_result_double( context, r );\n      }\n    }\n#endif\n\n    /*\n** Allocate nByte bytes of space using sqlite3_malloc(). If the\n** allocation fails, call sqlite3_result_error_nomem() to notify\n** the database handle that malloc() has failed and return NULL.\n** If nByte is larger than the maximum string or blob length, then\n** raise an SQLITE_TOOBIG exception and return NULL.\n*/\n    //static void* contextMalloc( sqlite3_context* context, i64 nByte )\n    //{\n    //  char* z;\n    //  sqlite3* db = sqlite3_context_db_handle( context );\n    //  assert( nByte > 0 );\n    //  testcase( nByte == db->aLimit[SQLITE_LIMIT_LENGTH] );\n    //  testcase( nByte == db->aLimit[SQLITE_LIMIT_LENGTH] + 1 );\n    //  if ( nByte > db->aLimit[SQLITE_LIMIT_LENGTH] )\n    //  {\n    //    sqlite3_result_error_toobig( context );\n    //    z = 0;\n    //  }\n    //  else\n    //  {\n    //    z = sqlite3Malloc( (int)nByte );\n    //    if ( !z )\n    //    {\n    //      sqlite3_result_error_nomem( context );\n    //    }\n    //  }\n    //  return z;\n    //}\n\n    /*\n    ** Implementation of the upper() and lower() SQL functions.\n    */\n    static void upperFunc(\n    sqlite3_context context,\n    int argc,\n    sqlite3_value[] argv\n    )\n    {\n      string z1;\n      string z2;\n      int i, n;\n      UNUSED_PARAMETER( argc );\n      z2 = sqlite3_value_text( argv[0] );\n      n = sqlite3_value_bytes( argv[0] );\n      /* Verify that the call to _bytes() does not invalidate the _text() pointer */\n      //Debug.Assert( z2 == sqlite3_value_text( argv[0] ) );\n      if ( z2 != null )\n      {\n        //z1 = new byte[n];// contextMalloc(context, ((i64)n)+1);\n        //if ( z1 !=null)\n        //{\n        //  memcpy( z1, z2, n + 1 );\n        //for ( i = 0 ; i< z1.Length ; i++ )\n        //{\n        //(char)sqlite3Toupper( z1[i] );\n        //}\n        sqlite3_result_text(context, z2.Length == 0 ? "" : z2.Substring(0, n).ToUpper(), -1, null); //sqlite3_free );\n        // }\n      }\n    }\n\n    static void lowerFunc(\n    sqlite3_context context,\n    int argc,\n    sqlite3_value[] argv\n    )\n    {\n      string z1;\n      string z2;\n      int i, n;\n      UNUSED_PARAMETER( argc );\n      z2 = sqlite3_value_text( argv[0] );\n      n = sqlite3_value_bytes( argv[0] );\n      /* Verify that the call to _bytes() does not invalidate the _text() pointer */\n      //Debug.Assert( z2 == sqlite3_value_text( argv[0] ) );\n      if ( z2 != null )\n      {\n        //z1 = contextMalloc(context, ((i64)n)+1);\n        //if ( z1 )\n        //{\n        //  memcpy( z1, z2, n + 1 );\n        //  for ( i = 0 ; z1[i] ; i++ )\n        //  {\n        //    z1[i] = (char)sqlite3Tolower( z1[i] );\n        //  }\n        z1 = z2.Length == 0 ? "" : z2.Substring( 0, n ).ToLower();\n        sqlite3_result_text(context, z1, -1, null);//sqlite3_free );\n        //}\n      }\n    }\n\n    /*\n    ** Implementation of the IFNULL(), NVL(), and COALESCE() functions.\n    ** All three do the same thing.  They return the first non-NULL\n    ** argument.\n    */\n    static void ifnullFunc(\n    sqlite3_context context,\n    int argc,\n    sqlite3_value[] argv\n    )\n    {\n      int i;\n      for ( i = 0 ; i < argc ; i++ )\n      {\n        if ( SQLITE_NULL != sqlite3_value_type( argv[i] ) )\n        {\n          sqlite3_result_value( context, argv[i] );\n          break;\n        }\n      }\n    }\n\n    /*\n    ** Implementation of random().  Return a random integer.\n    */\n    static void randomFunc(\n    sqlite3_context context,\n    int NotUsed,\n    sqlite3_value[] NotUsed2\n    )\n    {\n      sqlite_int64 r = 0;\n      UNUSED_PARAMETER2( NotUsed, NotUsed2 );\n      sqlite3_randomness( sizeof( sqlite_int64 ), ref r );\n      if ( r < 0 )\n      {\n        /* We need to prevent a random number of 0x8000000000000000\n        ** (or -9223372036854775808) since when you do abs() of that\n        ** number of you get the same value back again.  To do this\n        ** in a way that is testable, mask the sign bit off of negative\n        ** values, resulting in a positive value.  Then take the\n        ** 2s complement of that positive value.  The end result can\n        ** therefore be no less than -9223372036854775807.\n        */\n        r = -( r ^ ( ( (sqlite3_int64)1 ) << 63 ) );\n      }\n      sqlite3_result_int64( context, r );\n    }\n\n    /*\n    ** Implementation of randomblob(N).  Return a random blob\n    ** that is N bytes long.\n    */\n    static void randomBlob(\n    sqlite3_context context,\n    int argc,\n    sqlite3_value[] argv\n    )\n    {\n      int n;\n      char[] p;\n      Debug.Assert( argc == 1 );\n      UNUSED_PARAMETER( argc );\n      n = sqlite3_value_int( argv[0] );\n      if ( n < 1 )\n      {\n        n = 1;\n      }\n      p = new char[n]; //contextMalloc( context, n );\n      if ( p != null )\n      {\n        i64 _p = 0;\n        for ( int i = 0 ; i < n ; i++ )\n        {\n          sqlite3_randomness( sizeof( u8 ), ref _p );\n          p[i] = (char)( _p & 0x7F );\n        }\n        sqlite3_result_blob( context, new string( p ), n,  null);//sqlite3_free );\n      }\n    }\n\n    /*\n    ** Implementation of the last_insert_rowid() SQL function.  The return\n    ** value is the same as the sqlite3_last_insert_rowid() API function.\n    */\n    static void last_insert_rowid(\n    sqlite3_context context,\n    int NotUsed,\n    sqlite3_value[] NotUsed2\n    )\n    {\n      sqlite3 db = sqlite3_context_db_handle( context );\n      UNUSED_PARAMETER2( NotUsed, NotUsed2 );\n      sqlite3_result_int64( context, sqlite3_last_insert_rowid( db ) );\n    }\n\n    /*\n    ** Implementation of the changes() SQL function.  The return value is the\n    ** same as the sqlite3_changes() API function.\n    */\n    static void changes(\n    sqlite3_context context,\n    int NotUsed,\n    sqlite3_value[] NotUsed2\n    )\n    {\n      sqlite3 db = sqlite3_context_db_handle( context );\n      UNUSED_PARAMETER2( NotUsed, NotUsed2 );\n      sqlite3_result_int( context, sqlite3_changes( db ) );\n    }\n\n    /*\n    ** Implementation of the total_changes() SQL function.  The return value is\n    ** the same as the sqlite3_total_changes() API function.\n    */\n    static void total_changes(\n    sqlite3_context context,\n    int NotUsed,\n    sqlite3_value[] NotUsed2\n    )\n    {\n      sqlite3 db = (sqlite3)sqlite3_context_db_handle( context );\n      UNUSED_PARAMETER2( NotUsed, NotUsed2 );\n      sqlite3_result_int( context, sqlite3_total_changes( db ) );\n    }\n\n    /*\n    ** A structure defining how to do GLOB-style comparisons.\n    */\n    struct compareInfo\n    {\n      public char matchAll;\n      public char matchOne;\n      public char matchSet;\n      public bool noCase;\n      public compareInfo( char matchAll, char matchOne, char matchSet, bool noCase )\n      {\n        this.matchAll = matchAll;\n        this.matchOne = matchOne;\n        this.matchSet = matchSet;\n        this.noCase = noCase;\n      }\n    };\n\n    /*\n    ** For LIKE and GLOB matching on EBCDIC machines, assume that every\n    ** character is exactly one byte in size.  Also, all characters are\n    ** able to participate in upper-case-to-lower-case mappings in EBCDIC\n    ** whereas only characters less than 0x80 do in ASCII.\n    */\n#if (SQLITE_EBCDIC)\n//# define sqlite3Utf8Read(A,C)    (*(A++))\n//# define GlogUpperToLower(A)     A = sqlite3UpperToLower[A]\n#else\n    //# define GlogUpperToLower(A)     if( A<0x80 ){ A = sqlite3UpperToLower[A]; }\n#endif\n\n    static compareInfo globInfo = new compareInfo( \'*\', \'?\', \'[\', false );\n    /* The correct SQL-92 behavior is for the LIKE operator to ignore\n    ** case.  Thus  \'a\' LIKE \'A\' would be true. */\n    static compareInfo likeInfoNorm = new compareInfo( \'%\', \'_\', \'\\0\', true );\n    /* If SQLITE_CASE_SENSITIVE_LIKE is defined, then the LIKE operator\n    ** is case sensitive causing \'a\' LIKE \'A\' to be false */\n    static compareInfo likeInfoAlt = new compareInfo( \'%\', \'_\', \'\\0\', false );\n\n    /*\n    ** Compare two UTF-8 strings for equality where the first string can\n    ** potentially be a "glob" expression.  Return true (1) if they\n    ** are the same and false (0) if they are different.\n    **\n    ** Globbing rules:\n    **\n    **      \'*\'       Matches any sequence of zero or more characters.\n    **\n    **      \'?\'       Matches exactly one character.\n    **\n    **     [...]      Matches one character from the enclosed list of\n    **                characters.\n    **\n    **     [^...]     Matches one character not in the enclosed list.\n    **\n    ** With the [...] and [^...] matching, a \']\' character can be included\n    ** in the list by making it the first character after \'[\' or \'^\'.  A\n    ** range of characters can be specified using \'-\'.  Example:\n    ** "[a-z]" matches any single lower-case letter.  To match a \'-\', make\n    ** it the last character in the list.\n    **\n    ** This routine is usually quick, but can be N**2 in the worst case.\n    **\n    ** Hints: to match \'*\' or \'?\', put them in "[]".  Like this:\n    **\n    **         abc[*]xyz        Matches "abc*xyz" only\n    */\n    static bool patternCompare(\n    string zPattern,            /* The glob pattern */\n    string zString,             /* The string to compare against the glob */\n    compareInfo pInfo,          /* Information about how to do the compare */\n    int esc                     /* The escape character */\n    )\n    {\n      int c, c2;\n      int invert;\n      int seen;\n      int matchOne = (int)pInfo.matchOne;\n      int matchAll = (int)pInfo.matchAll;\n      int matchSet = (int)pInfo.matchSet;\n      bool noCase = pInfo.noCase;\n      bool prevEscape = false;     /* True if the previous character was \'escape\' */\n      string inPattern = zPattern; //Entered Pattern\n\n      while ( ( c = sqlite3Utf8Read( zPattern, ref zPattern ) ) != 0 )\n      {\n        if ( !prevEscape && c == matchAll )\n        {\n          while ( ( c = sqlite3Utf8Read( zPattern, ref zPattern ) ) == matchAll\n          || c == matchOne )\n          {\n            if ( c == matchOne && sqlite3Utf8Read( zString, ref zString ) == 0 )\n            {\n              return false;\n            }\n          }\n          if ( c == 0 )\n          {\n            return true;\n          }\n          else if ( c == esc )\n          {\n            c = sqlite3Utf8Read( zPattern, ref zPattern );\n            if ( c == 0 )\n            {\n              return false;\n            }\n          }\n          else if ( c == matchSet )\n          {\n            Debug.Assert( esc == 0 );         /* This is GLOB, not LIKE */\n            Debug.Assert( matchSet < 0x80 );  /* \'[\' is a single-byte character */\n            int len = 0;\n            while ( len < zString.Length && patternCompare( inPattern.Substring( inPattern.Length - zPattern.Length - 1 ), zString.Substring( len ), pInfo, esc ) == false )\n            {\n              SQLITE_SKIP_UTF8( zString, ref len );\n            }\n            return len < zString.Length;\n          }\n          while ( ( c2 = sqlite3Utf8Read( zString, ref zString ) ) != 0 )\n          {\n            if ( noCase )\n            {\n              if ( c2 < 0x80 ) c2 = sqlite3UpperToLower[c2]; //GlogUpperToLower(c2);\n              if ( c < 0x80 ) c = sqlite3UpperToLower[c]; //GlogUpperToLower(c);\n              while ( c2 != 0 && c2 != c )\n              {\n                c2 = sqlite3Utf8Read( zString, ref zString );\n                if ( c2 < 0x80 ) c2 = sqlite3UpperToLower[c2]; //GlogUpperToLower(c2);\n              }\n            }\n            else\n            {\n              while ( c2 != 0 && c2 != c )\n              {\n                c2 = sqlite3Utf8Read( zString, ref zString );\n              }\n            }\n            if ( c2 == 0 ) return false;\n            if ( patternCompare( zPattern, zString, pInfo, esc ) ) return true;\n          }\n          return false;\n        }\n        else if ( !prevEscape && c == matchOne )\n        {\n          if ( sqlite3Utf8Read( zString, ref zString ) == 0 )\n          {\n            return false;\n          }\n        }\n        else if ( c == matchSet )\n        {\n          int prior_c = 0;\n          Debug.Assert( esc == 0 );    /* This only occurs for GLOB, not LIKE */\n          seen = 0;\n          invert = 0;\n          c = sqlite3Utf8Read( zString, ref zString );\n          if ( c == 0 ) return false;\n          c2 = sqlite3Utf8Read( zPattern, ref zPattern );\n          if ( c2 == \'^\' )\n          {\n            invert = 1;\n            c2 = sqlite3Utf8Read( zPattern, ref zPattern );\n          }\n          if ( c2 == \']\' )\n          {\n            if ( c == \']\' ) seen = 1;\n            c2 = sqlite3Utf8Read( zPattern, ref zPattern );\n          }\n          while ( c2 != 0 && c2 != \']\' )\n          {\n            if ( c2 == \'-\' && zPattern[0] != \']\' && zPattern[0] != 0 && prior_c > 0 )\n            {\n              c2 = sqlite3Utf8Read( zPattern, ref zPattern );\n              if ( c >= prior_c && c <= c2 ) seen = 1;\n              prior_c = 0;\n            }\n            else\n            {\n              if ( c == c2 )\n              {\n                seen = 1;\n              }\n              prior_c = c2;\n            }\n            c2 = sqlite3Utf8Read( zPattern, ref zPattern );\n          }\n          if ( c2 == 0 || ( seen ^ invert ) == 0 )\n          {\n            return false;\n          }\n        }\n        else if ( esc == c && !prevEscape )\n        {\n          prevEscape = true;\n        }\n        else\n        {\n          c2 = sqlite3Utf8Read( zString, ref zString );\n          if ( noCase )\n          {\n            if ( c < 0x80 ) c = sqlite3UpperToLower[c]; //GlogUpperToLower(c);\n            if ( c2 < 0x80 ) c2 = sqlite3UpperToLower[c2]; //GlogUpperToLower(c2);\n          }\n          if ( c != c2 )\n          {\n            return false;\n          }\n          prevEscape = false;\n        }\n      }\n      return zString.Length == 0;\n    }\n\n    /*\n    ** Count the number of times that the LIKE operator (or GLOB which is\n    ** just a variation of LIKE) gets called.  This is used for testing\n    ** only.\n    */\n#if SQLITE_TEST\n    //static int sqlite3_like_count = 0;\n#endif\n\n\n    /*\n** Implementation of the like() SQL function.  This function implements\n** the build-in LIKE operator.  The first argument to the function is the\n** pattern and the second argument is the string.  So, the SQL statements:\n**\n**       A LIKE B\n**\n** is implemented as like(B,A).\n**\n** This same function (with a different compareInfo structure) computes\n** the GLOB operator.\n*/\n    static void likeFunc(\n    sqlite3_context context,\n    int argc,\n    sqlite3_value[] argv\n    )\n    {\n      string zA, zB;\n      int escape = 0;\n      int nPat;\n      sqlite3 db = sqlite3_context_db_handle( context );\n\n      zB = sqlite3_value_text( argv[0] );\n      zA = sqlite3_value_text( argv[1] );\n\n      /* Limit the length of the LIKE or GLOB pattern to avoid problems\n      ** of deep recursion and N*N behavior in patternCompare().\n      */\n      nPat = sqlite3_value_bytes( argv[0] );\n      testcase( nPat == db.aLimit[SQLITE_LIMIT_LIKE_PATTERN_LENGTH] );\n      testcase( nPat == db.aLimit[SQLITE_LIMIT_LIKE_PATTERN_LENGTH] + 1 );\n      if ( nPat > db.aLimit[SQLITE_LIMIT_LIKE_PATTERN_LENGTH] )\n      {\n        sqlite3_result_error( context, "LIKE or GLOB pattern too complex", -1 );\n        return;\n      }\n      //Debug.Assert( zB == sqlite3_value_text( argv[0] ) );  /* Encoding did not change */\n\n      if ( argc == 3 )\n      {\n        /* The escape character string must consist of a single UTF-8 character.\n        ** Otherwise, return an error.\n        */\n        string zEsc = sqlite3_value_text( argv[2] );\n        if ( zEsc == null ) return;\n        if ( sqlite3Utf8CharLen( zEsc, -1 ) != 1 )\n        {\n          sqlite3_result_error( context,\n          "ESCAPE expression must be a single character", -1 );\n          return;\n        }\n        escape = sqlite3Utf8Read( zEsc, ref zEsc );\n      }\n      if ( zA != null && zB != null )\n      {\n        compareInfo pInfo = (compareInfo)sqlite3_user_data( context );\n#if SQLITE_TEST\n        sqlite3_like_count.iValue++;\n#endif\n        sqlite3_result_int( context, patternCompare( zB, zA, pInfo, escape ) ? 1 : 0 );\n      }\n    }\n\n    /*\n    ** Implementation of the NULLIF(x,y) function.  The result is the first\n    ** argument if the arguments are different.  The result is NULL if the\n    ** arguments are equal to each other.\n    */\n    static void nullifFunc(\n    sqlite3_context context,\n    int NotUsed,\n    sqlite3_value[] argv\n    )\n    {\n      CollSeq pColl = sqlite3GetFuncCollSeq( context );\n      UNUSED_PARAMETER( NotUsed );\n      if ( sqlite3MemCompare( argv[0], argv[1], pColl ) != 0 )\n      {\n        sqlite3_result_value( context, argv[0] );\n      }\n    }\n\n    /*\n    ** Implementation of the VERSION(*) function.  The result is the version\n    ** of the SQLite library that is running.\n    */\n    static void versionFunc(\n    sqlite3_context context,\n    int NotUsed,\n    sqlite3_value[] NotUsed2\n    )\n    {\n      UNUSED_PARAMETER2( NotUsed, NotUsed2 );\n      sqlite3_result_text( context, sqlite3_version, -1, SQLITE_STATIC );\n    }\n\n    /* Array for converting from half-bytes (nybbles) into ASCII hex\n    ** digits. */\n    static char[] hexdigits = new char[]  {\n\'0\', \'1\', \'2\', \'3\', \'4\', \'5\', \'6\', \'7\',\n\'8\', \'9\', \'A\', \'B\', \'C\', \'D\', \'E\', \'F\'\n};\n\n    /*\n    ** EXPERIMENTAL - This is not an official function.  The interface may\n    ** change.  This function may disappear.  Do not write code that depends\n    ** on this function.\n    **\n    ** Implementation of the QUOTE() function.  This function takes a single\n    ** argument.  If the argument is numeric, the return value is the same as\n    ** the argument.  If the argument is NULL, the return value is the string\n    ** "NULL".  Otherwise, the argument is enclosed in single quotes with\n    ** single-quote escapes.\n    */\n    static void quoteFunc(\n    sqlite3_context context,\n    int argc,\n    sqlite3_value[] argv\n    )\n    {\n      Debug.Assert( argc == 1 );\n      UNUSED_PARAMETER( argc );\n\n      switch ( sqlite3_value_type( argv[0] ) )\n      {\n        case SQLITE_INTEGER:\n        case SQLITE_FLOAT:\n          {\n            sqlite3_result_value( context, argv[0] );\n            break;\n          }\n        case SQLITE_BLOB:\n          {\n            StringBuilder zText;\n            byte[] zBlob = sqlite3_value_blob( argv[0] );\n            int nBlob = sqlite3_value_bytes( argv[0] );\n            Debug.Assert( zBlob.Length == sqlite3_value_blob( argv[0] ).Length ); /* No encoding change */\n            zText = new StringBuilder( 2 * nBlob + 4 );//(char*)contextMalloc(context, (2*(i64)nBlob)+4);\n            zText.Append( "X\'" );\n            if ( zText != null )\n            {\n              int i;\n              for ( i = 0 ; i < nBlob ; i++ )\n              {\n                zText.Append( hexdigits[( zBlob[i] >> 4 ) & 0x0F] );\n                zText.Append( hexdigits[( zBlob[i] ) & 0x0F] );\n              }\n              zText.Append( "\'" );\n              //zText[( nBlob * 2 ) + 2] = \'\\\'\';\n              //zText[( nBlob * 2 ) + 3] = \'\\0\';\n              //zText[0] = \'X\';\n              //zText[1] = \'\\\'\';\n              sqlite3_result_text( context, zText.ToString(), -1, SQLITE_TRANSIENT );\n              //sqlite3_free( ref  zText );\n            }\n            break;\n          }\n        case SQLITE_TEXT:\n          {\n            int i, j;\n            int n;\n            string zArg = sqlite3_value_text( argv[0] );\n            StringBuilder z;\n\n            if ( zArg == null || zArg.Length == 0 ) return;\n            for ( i = 0, n = 0 ; i < zArg.Length ; i++ ) { if ( zArg[i] == \'\\\'\' ) n++; }\n            z = new StringBuilder( i + n + 3 );// contextMalloc(context, ((i64)i)+((i64)n)+3);\n            if ( z != null )\n            {\n              z.Append( \'\\\'\' );\n              for ( i = 0, j = 1 ; i < zArg.Length && zArg[i] != 0 ; i++ )\n              {\n                z.Append( (char)zArg[i] ); j++;\n                if ( zArg[i] == \'\\\'\' )\n                {\n                  z.Append( \'\\\'\' ); j++;\n                }\n              }\n              z.Append( \'\\\'\' ); j++;\n              //z[j] = \'\\0\'; ;\n              sqlite3_result_text(context, z.ToString(), j, null);//sqlite3_free );\n            }\n            break;\n          }\n        default:\n          {\n            Debug.Assert( sqlite3_value_type( argv[0] ) == SQLITE_NULL );\n            sqlite3_result_text( context, "NULL", 4, SQLITE_STATIC );\n            break;\n          }\n      }\n    }\n\n    /*\n    ** The hex() function.  Interpret the argument as a blob.  Return\n    ** a hexadecimal rendering as text.\n    */\n    static void hexFunc(\n    sqlite3_context context,\n    int argc,\n    sqlite3_value[] argv\n    )\n    {\n      int i, n;\n      byte[] pBlob;\n      //string zHex, z;\n      Debug.Assert( argc == 1 );\n      UNUSED_PARAMETER( argc );\n      pBlob = sqlite3_value_blob( argv[0] );\n      n = sqlite3_value_bytes( argv[0] );\n      Debug.Assert( n == pBlob.Length );  /* No encoding change */\n      StringBuilder zHex = new StringBuilder( n * 2 + 1 );\n      //  z = zHex = contextMalloc(context, ((i64)n)*2 + 1);\n      if ( zHex != null )\n      {\n        for ( i = 0 ; i < n ; i++ )\n        {//, pBlob++){\n          byte c = pBlob[i];\n          zHex.Append( hexdigits[( c >> 4 ) & 0xf] );\n          zHex.Append( hexdigits[c & 0xf] );\n        }\n        sqlite3_result_text(context, zHex.ToString(), n * 2, null); //sqlite3_free );\n      }\n    }\n\n    /*\n    ** The zeroblob(N) function returns a zero-filled blob of size N bytes.\n    */\n    static void zeroblobFunc(\n    sqlite3_context context,\n    int argc,\n    sqlite3_value[] argv\n    )\n    {\n      i64 n;\n      sqlite3 db = sqlite3_context_db_handle( context );\n      Debug.Assert( argc == 1 );\n      UNUSED_PARAMETER( argc );\n      n = sqlite3_value_int64( argv[0] );\n      testcase( n == db.aLimit[SQLITE_LIMIT_LENGTH] );\n      testcase( n == db.aLimit[SQLITE_LIMIT_LENGTH] + 1 );\n      if ( n > db.aLimit[SQLITE_LIMIT_LENGTH] )\n      {\n        sqlite3_result_error_toobig( context );\n      }\n      else\n      {\n        sqlite3_result_zeroblob( context, (int)n );\n      }\n    }\n\n    /*\n    ** The replace() function.  Three arguments are all strings: call\n    ** them A, B, and C. The result is also a string which is derived\n    ** from A by replacing every occurance of B with C.  The match\n    ** must be exact.  Collating sequences are not used.\n    */\n    static void replaceFunc(\n    sqlite3_context context,\n    int argc,\n    sqlite3_value[] argv\n    )\n    {\n      string zStr;        /* The input string A */\n      string zPattern;    /* The pattern string B */\n      string zRep;        /* The replacement string C */\n      string zOut;              /* The output */\n      int nStr;                /* Size of zStr */\n      int nPattern;            /* Size of zPattern */\n      int nRep;                /* Size of zRep */\n      int nOut;                /* Maximum size of zOut */\n      //int loopLimit;           /* Last zStr[] that might match zPattern[] */\n      int i, j;                /* Loop counters */\n\n      Debug.Assert( argc == 3 );\n      UNUSED_PARAMETER( argc );\n      zStr = sqlite3_value_text( argv[0] );\n      if ( zStr == null ) return;\n      nStr = sqlite3_value_bytes( argv[0] );\n      Debug.Assert( zStr == sqlite3_value_text( argv[0] ) );  /* No encoding change */\n      zPattern = sqlite3_value_text( argv[1] );\n      if ( zPattern == null )\n      {\n        Debug.Assert( sqlite3_value_type( argv[1] ) == SQLITE_NULL\n        //|| sqlite3_context_db_handle( context ).mallocFailed != 0\n        );\n        return;\n      }\n      if ( zPattern == "" )\n      {\n        Debug.Assert( sqlite3_value_type( argv[1] ) != SQLITE_NULL );\n        sqlite3_result_value( context, argv[0] );\n        return;\n      }\n      nPattern = sqlite3_value_bytes( argv[1] );\n      Debug.Assert( zPattern == sqlite3_value_text( argv[1] ) );  /* No encoding change */\n      zRep = sqlite3_value_text( argv[2] );\n      if ( zRep == null ) return;\n      nRep = sqlite3_value_bytes( argv[2] );\n      Debug.Assert( zRep == sqlite3_value_text( argv[2] ) );\n      nOut = nStr + 1;\n      Debug.Assert( nOut < SQLITE_MAX_LENGTH );\n      //zOut = contextMalloc(context, (i64)nOut);\n      //if( zOut==0 ){\n      //  return;\n      //}\n      //loopLimit = nStr - nPattern;\n      //for(i=j=0; i<=loopLimit; i++){\n      //  if( zStr[i]!=zPattern[0] || memcmp(&zStr[i], zPattern, nPattern) ){\n      //    zOut[j++] = zStr[i];\n      //  }else{\n      //    u8 *zOld;\n      // sqlite3 db = sqlite3_context_db_handle( context );\n      //    nOut += nRep - nPattern;\n      //testcase( nOut-1==db->aLimit[SQLITE_LIMIT_LENGTH] );\n      //testcase( nOut-2==db->aLimit[SQLITE_LIMIT_LENGTH] );\n      //if( nOut-1>db->aLimit[SQLITE_LIMIT_LENGTH] ){\n      //      sqlite3_result_error_toobig(context);\n      //      //sqlite3DbFree(db,ref  zOut);\n      //      return;\n      //    }\n      //    zOld = zOut;\n      //    zOut = sqlite3_realloc(zOut, (int)nOut);\n      //    if( zOut==0 ){\n      //      sqlite3_result_error_nomem(context);\n      //      //sqlite3DbFree(db,ref  zOld);\n      //      return;\n      //    }\n      //    memcpy(&zOut[j], zRep, nRep);\n      //    j += nRep;\n      //    i += nPattern-1;\n      //  }\n      //}\n      //Debug.Assert( j+nStr-i+1==nOut );\n      //memcpy(&zOut[j], zStr[i], nStr-i);\n      //j += nStr - i;\n      //Debug.Assert( j<=nOut );\n      //zOut[j] = 0;\n      zOut = zStr.Replace( zPattern, zRep );\n      j = zOut.Length;\n      sqlite3_result_text(context, zOut, j, null);//sqlite3_free );\n    }\n\n    /*\n    ** Implementation of the TRIM(), LTRIM(), and RTRIM() functions.\n    ** The userdata is 0x1 for left trim, 0x2 for right trim, 0x3 for both.\n    */\n    static void trimFunc(\n    sqlite3_context context,\n    int argc,\n    sqlite3_value[] argv\n    )\n    {\n      string zIn;           /* Input string */\n      string zCharSet;      /* Set of characters to trim */\n      int nIn;              /* Number of bytes in input */\n      int izIn = 0;         /* C# string pointer */\n      int flags;            /* 1: trimleft  2: trimright  3: trim */\n      int i;                /* Loop counter */\n      int[] aLen = null;    /* Length of each character in zCharSet */\n      byte[][] azChar = null; /* Individual characters in zCharSet */\n      int nChar = 0;          /* Number of characters in zCharSet */\n      byte[] zBytes = null;\n      byte[] zBlob = null;\n\n      if ( sqlite3_value_type( argv[0] ) == SQLITE_NULL )\n      {\n        return;\n      }\n      zIn = sqlite3_value_text( argv[0] );\n      if ( zIn == null ) return;\n      nIn = sqlite3_value_bytes( argv[0] );\n      zBlob = sqlite3_value_blob( argv[0] );\n      //Debug.Assert( zIn == sqlite3_value_text( argv[0] ) );\n      if ( argc == 1 )\n      {\n        int[] lenOne = new int[] { 1 };\n        byte[] azOne = new byte[] { (u8)\' \' };//static unsigned char * const azOne[] = { (u8*)" " };\n        nChar = 1;\n        aLen = lenOne;\n        azChar = new byte[1][];\n        azChar[0] = azOne;\n        zCharSet = null;\n      }\n      else if ( ( zCharSet = sqlite3_value_text( argv[1] ) ) == null )\n      {\n        return;\n      }\n      else\n      {\n        zBytes = sqlite3_value_blob( argv[1] );\n        int iz = 0;\n        for ( nChar = 0 ; iz < zBytes.Length ; nChar++ )\n        {\n          SQLITE_SKIP_UTF8( zBytes, ref iz );\n        }\n        if ( nChar > 0 )\n        {\n          azChar = new byte[nChar][];//contextMalloc(context, ((i64)nChar)*(sizeof(char*)+1));\n          if ( azChar == null )\n          {\n            return;\n          }\n          aLen = new int[nChar];\n\n          int iz0 = 0;\n          int iz1 = 0;\n          for ( int ii = 0 ; ii < nChar ; ii++ )\n          {\n            SQLITE_SKIP_UTF8( zBytes, ref iz1 );\n            aLen[ii] = iz1 - iz0;\n            azChar[ii] = new byte[aLen[ii]];\n            Buffer.BlockCopy( zBytes, iz0, azChar[ii], 0, azChar[ii].Length );\n            iz0 = iz1;\n          }\n        }\n      }\n      if ( nChar > 0 )\n      {\n        flags = (int)sqlite3_user_data( context ); // flags = SQLITE_PTR_TO_INT(sqlite3_user_data(context));\n        if ( ( flags & 1 ) != 0 )\n        {\n          while ( nIn > 0 )\n          {\n            int len = 0;\n            for ( i = 0 ; i < nChar ; i++ )\n            {\n              len = aLen[i];\n              if ( len <= nIn && memcmp( zBlob, izIn, azChar[i], len ) == 0 ) break;\n            }\n            if ( i >= nChar ) break;\n            izIn += len;\n            nIn -= len;\n          }\n        }\n        if ( ( flags & 2 ) != 0 )\n        {\n          while ( nIn > 0 )\n          {\n            int len = 0;\n            for ( i = 0 ; i < nChar ; i++ )\n            {\n              len = aLen[i];\n              if ( len <= nIn && memcmp( zBlob, izIn + nIn - len, azChar[i], len ) == 0 ) break;\n            }\n            if ( i >= nChar ) break;\n            nIn -= len;\n          }\n        }\n        if ( zCharSet != null )\n        {\n          //sqlite3_free( ref  azChar );\n        }\n      }\n      StringBuilder sb = new StringBuilder( nIn );\n      for ( i = 0 ; i < nIn ; i++ ) sb.Append( (char)zBlob[izIn + i] );\n      sqlite3_result_text( context, sb.ToString(), nIn, SQLITE_TRANSIENT );\n    }\n\n#if SQLITE_SOUNDEX\n/*\n** Compute the soundex encoding of a word.\n*/\nstatic void soundexFunc(\nsqlite3_context context,\nint argc,\nsqlite3_value[] argv\n)\n{\nDebug.Assert(false); // TODO -- func_c\nchar zResult[8];\nconst u8 *zIn;\nint i, j;\nstatic const unsigned char iCode[] = {\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n0, 0, 1, 2, 3, 0, 1, 2, 0, 0, 2, 2, 4, 5, 5, 0,\n1, 2, 6, 2, 3, 0, 1, 0, 2, 0, 2, 0, 0, 0, 0, 0,\n0, 0, 1, 2, 3, 0, 1, 2, 0, 0, 2, 2, 4, 5, 5, 0,\n1, 2, 6, 2, 3, 0, 1, 0, 2, 0, 2, 0, 0, 0, 0, 0,\n};\nDebug.Assert( argc==1 );\nzIn = (u8*)sqlite3_value_text(argv[0]);\nif( zIn==0 ) zIn = (u8*)"";\nfor(i=0; zIn[i] && !sqlite3Isalpha(zIn[i]); i++){}\nif( zIn[i] ){\nu8 prevcode = iCode[zIn[i]&0x7f];\nzResult[0] = sqlite3Toupper(zIn[i]);\nfor(j=1; j<4 && zIn[i]; i++){\nint code = iCode[zIn[i]&0x7f];\nif( code>0 ){\nif( code!=prevcode ){\nprevcode = code;\nzResult[j++] = code + \'0\';\n}\n}else{\nprevcode = 0;\n}\n}\nwhile( j<4 ){\nzResult[j++] = \'0\';\n}\nzResult[j] = 0;\nsqlite3_result_text(context, zResult, 4, SQLITE_TRANSIENT);\n}else{\nsqlite3_result_text(context, "?000", 4, SQLITE_STATIC);\n}\n}\n#endif\n\n#if ! SQLITE_OMIT_LOAD_EXTENSION\n    /*\n** A function that loads a shared-library extension then returns NULL.\n*/\n    static void loadExt(\n    sqlite3_context context,\n    int argc,\n    sqlite3_value[] argv\n    )\n    {\n      string zFile = sqlite3_value_text( argv[0] );\n      string zProc;\n      sqlite3 db = (sqlite3)sqlite3_context_db_handle( context );\n      string zErrMsg = "";\n\n      if ( argc == 2 )\n      {\n        zProc = sqlite3_value_text( argv[1] );\n      }\n      else\n      {\n        zProc = "";\n      }\n      if ( zFile != null && sqlite3_load_extension( db, zFile, zProc, ref zErrMsg ) != 0 )\n      {\n        sqlite3_result_error( context, zErrMsg, -1 );\n        //sqlite3DbFree( db, ref  zErrMsg );\n      }\n    }\n#endif\n\n    /*\n** An instance of the following structure holds the context of a\n** sum() or avg() aggregate computation.\n*/\n    //typedef struct SumCtx SumCtx;\n    public class SumCtx\n    {\n      public double rSum;      /* Floating point sum */\n      public i64 iSum;         /* Integer sum */\n      public i64 cnt;          /* Number of elements summed */\n      public int overflow;     /* True if integer overflow seen */\n      public bool approx;      /* True if non-integer value was input to the sum */\n      public Mem _M;\n      public Mem Context\n      {\n        get { return _M; }\n        set\n        {\n          _M = value;\n          if ( _M == null || _M.z == null )\n            iSum = 0;\n          else iSum = Convert.ToInt64( _M.z );\n        }\n      }\n    };\n\n    /*\n    ** Routines used to compute the sum, average, and total.\n    **\n    ** The SUM() function follows the (broken) SQL standard which means\n    ** that it returns NULL if it sums over no inputs.  TOTAL returns\n    ** 0.0 in that case.  In addition, TOTAL always returns a float where\n    ** SUM might return an integer if it never encounters a floating point\n    ** value.  TOTAL never fails, but SUM might through an exception if\n    ** it overflows an integer.\n    */\n    static void sumStep(\n    sqlite3_context context,\n    int argc,\n    sqlite3_value[] argv\n    )\n    {\n      SumCtx p;\n\n      int type;\n      Debug.Assert( argc == 1 );\n      UNUSED_PARAMETER( argc );\n      Mem pMem = sqlite3_aggregate_context( context, -1 );//sizeof(*p));\n      if ( pMem._SumCtx == null ) pMem._SumCtx = new SumCtx();\n      p = pMem._SumCtx;\n      if ( p.Context == null ) p.Context = pMem;\n      type = sqlite3_value_numeric_type( argv[0] );\n      if ( p != null && type != SQLITE_NULL )\n      {\n        p.cnt++;\n        if ( type == SQLITE_INTEGER )\n        {\n          i64 v = sqlite3_value_int64( argv[0] );\n          p.rSum += v;\n          if ( !( p.approx | p.overflow != 0 ) )\n          {\n            i64 iNewSum = p.iSum + v;\n            int s1 = (int)( p.iSum >> ( sizeof( i64 ) * 8 - 1 ) );\n            int s2 = (int)( v >> ( sizeof( i64 ) * 8 - 1 ) );\n            int s3 = (int)( iNewSum >> ( sizeof( i64 ) * 8 - 1 ) );\n            p.overflow = ( ( s1 & s2 & ~s3 ) | ( ~s1 & ~s2 & s3 ) ) != 0 ? 1 : 0;\n            p.iSum = iNewSum;\n          }\n        }\n        else\n        {\n          p.rSum += sqlite3_value_double( argv[0] );\n          p.approx = true;\n        }\n      }\n    }\n    static void sumFinalize( sqlite3_context context )\n    {\n      SumCtx p = null;\n      Mem pMem = sqlite3_aggregate_context( context, 0 );\n      if ( pMem != null ) p = pMem._SumCtx;\n      if ( p != null && p.cnt > 0 )\n      {\n        if ( p.overflow != 0 )\n        {\n          sqlite3_result_error( context, "integer overflow", -1 );\n        }\n        else if ( p.approx )\n        {\n          sqlite3_result_double( context, p.rSum );\n        }\n        else\n        {\n          sqlite3_result_int64( context, p.iSum );\n        }\n      }\n    }\n\n    static void avgFinalize( sqlite3_context context )\n    {\n      SumCtx p = null;\n      Mem pMem = sqlite3_aggregate_context( context, 0 );\n      if ( pMem != null ) p = pMem._SumCtx;\n      if ( p != null && p.cnt > 0 )\n      {\n        sqlite3_result_double( context, p.rSum / (double)p.cnt );\n      }\n    }\n\n    static void totalFinalize( sqlite3_context context )\n    {\n      SumCtx p = null;\n      Mem pMem = sqlite3_aggregate_context( context, 0 );\n      if ( pMem != null ) p = pMem._SumCtx;\n      /* (double)0 In case of SQLITE_OMIT_FLOATING_POINT... */\n      sqlite3_result_double( context, p != null ? p.rSum : (double)0 );\n    }\n\n    /*\n    ** The following structure keeps track of state information for the\n    ** count() aggregate function.\n    */\n    //typedef struct CountCtx CountCtx;\n    public class CountCtx\n    {\n      i64 _n;\n      Mem _M;\n      public Mem Context\n      {\n        get { return _M; }\n        set\n        {\n          _M = value;\n          if ( _M == null || _M.z == null )\n            _n = 0;\n          else _n = Convert.ToInt64( _M.z );\n        }\n      }\n      public i64 n\n      {\n        get { return _n; }\n        set\n        {\n          _n = value;\n          if ( _M != null ) _M.z = _n.ToString();\n        }\n      }\n    }\n\n    /*\n    ** Routines to implement the count() aggregate function.\n    */\n    static void countStep(\n    sqlite3_context context,\n    int argc,\n    sqlite3_value[] argv\n    )\n    {\n      CountCtx p = new CountCtx();\n      p.Context = sqlite3_aggregate_context( context, -1 );//sizeof(*p));\n      if ( ( argc == 0 || SQLITE_NULL != sqlite3_value_type( argv[0] ) ) && p.Context != null )\n      {\n        p.n++;\n      }\n#if !SQLITE_OMIT_DEPRECATED\n      /* The sqlite3_aggregate_count() function is deprecated.  But just to make\n** sure it still operates correctly, verify that its count agrees with our\n** internal count when using count(*) and when the total count can be\n** expressed as a 32-bit integer. */\n      Debug.Assert( argc == 1 || p == null || p.n > 0x7fffffff\n      || p.n == sqlite3_aggregate_count( context ) );\n#endif\n    }\n\n    static void countFinalize( sqlite3_context context )\n    {\n      CountCtx p = new CountCtx();\n      p.Context = sqlite3_aggregate_context( context, 0 );\n      sqlite3_result_int64( context, p != null ? p.n : 0 );\n    }\n\n    /*\n    ** Routines to implement min() and max() aggregate functions.\n    */\n    static void minmaxStep(\n    sqlite3_context context,\n    int NotUsed,\n    sqlite3_value[] argv\n    )\n    {\n      Mem pArg = (Mem)argv[0];\n      Mem pBest;\n      UNUSED_PARAMETER( NotUsed );\n\n      if ( sqlite3_value_type( argv[0] ) == SQLITE_NULL ) return;\n      pBest = (Mem)sqlite3_aggregate_context( context, -1 );//sizeof(*pBest));\n      if ( pBest == null ) return;\n\n      if ( pBest.flags != 0 )\n      {\n        bool max;\n        int cmp;\n        CollSeq pColl = sqlite3GetFuncCollSeq( context );\n        /* This step function is used for both the min() and max() aggregates,\n        ** the only difference between the two being that the sense of the\n        ** comparison is inverted. For the max() aggregate, the\n        ** sqlite3_context_db_handle() function returns (void *)-1. For min() it\n        ** returns (void *)db, where db is the sqlite3* database pointer.\n        ** Therefore the next statement sets variable \'max\' to 1 for the max()\n        ** aggregate, or 0 for min().\n        */\n        max = sqlite3_context_db_handle( context ) != null && (int)sqlite3_user_data( context ) != 0;\n        cmp = sqlite3MemCompare( pBest, pArg, pColl );\n        if ( ( max && cmp < 0 ) || ( !max && cmp > 0 ) )\n        {\n          sqlite3VdbeMemCopy( pBest, pArg );\n        }\n      }\n      else\n      {\n        sqlite3VdbeMemCopy( pBest, pArg );\n      }\n    }\n\n    static void minMaxFinalize( sqlite3_context context )\n    {\n      sqlite3_value pRes;\n      pRes = (sqlite3_value)sqlite3_aggregate_context( context, 0 );\n      if ( pRes != null )\n      {\n        if ( ALWAYS( pRes.flags != 0 ) )\n        {\n          sqlite3_result_value( context, pRes );\n        }\n        sqlite3VdbeMemRelease( pRes );\n      }\n    }\n\n    /*\n    ** group_concat(EXPR, ?SEPARATOR?)\n    */\n    static void groupConcatStep(\n    sqlite3_context context,\n    int argc,\n    sqlite3_value[] argv\n    )\n    {\n      string zVal;\n      StrAccum pAccum;\n      string zSep;\n      int nVal, nSep;\n      Debug.Assert( argc == 1 || argc == 2 );\n      if ( sqlite3_value_type( argv[0] ) == SQLITE_NULL ) return;\n      Mem pMem = sqlite3_aggregate_context( context, -1 );//sizeof(*pAccum));\n      if ( pMem._StrAccum == null ) pMem._StrAccum = new StrAccum();\n      pAccum = pMem._StrAccum;\n      if ( pAccum.Context == null ) pAccum.Context = pMem;\n      if ( pAccum != null )\n      {\n        sqlite3 db = sqlite3_context_db_handle( context );\n        int firstTerm = pAccum.useMalloc == 0 ? 1 : 0;\n        pAccum.useMalloc = 1;\n        pAccum.mxAlloc = db.aLimit[SQLITE_LIMIT_LENGTH];\n        if ( 0 == firstTerm )\n        {\n          if ( argc == 2 )\n          {\n            zSep = sqlite3_value_text( argv[1] );\n            nSep = sqlite3_value_bytes( argv[1] );\n          }\n          else\n          {\n            zSep = ",";\n            nSep = 1;\n          }\n          sqlite3StrAccumAppend( pAccum, zSep, nSep );\n        }\n        zVal = sqlite3_value_text( argv[0] );\n        nVal = sqlite3_value_bytes( argv[0] );\n        sqlite3StrAccumAppend( pAccum, zVal, nVal );\n      }\n    }\n\n    static void groupConcatFinalize( sqlite3_context context )\n    {\n      StrAccum pAccum = null;\n      Mem pMem = sqlite3_aggregate_context( context, 0 );\n      if ( pMem != null )\n      {\n        if ( pMem._StrAccum == null ) pMem._StrAccum = new StrAccum();\n        pAccum = pMem._StrAccum;\n      }\n      if ( pAccum != null )\n      {\n        if ( pAccum.tooBig != 0 )\n        {\n          sqlite3_result_error_toobig( context );\n        }\n        //else if ( pAccum.mallocFailed != 0 )\n        //{\n        //  sqlite3_result_error_nomem( context );\n        //}\n        else\n        {\n          sqlite3_result_text( context, sqlite3StrAccumFinish( pAccum ), -1,\n          null); //sqlite3_free );\n        }\n      }\n    }\n\n    /*\n    ** This function registered all of the above C functions as SQL\n    ** functions.  This should be the only routine in this file with\n    ** external linkage.\n    */\n    public struct sFuncs\n    {\n      public string zName;\n      public sbyte nArg;\n      public u8 argType;           /* 1: 0, 2: 1, 3: 2,...  N:  N-1. */\n      public u8 eTextRep;          /* 1: UTF-16.  0: UTF-8 */\n      public u8 needCollSeq;\n      public dxFunc xFunc; //(sqlite3_context*,int,sqlite3_value **);\n\n      // Constructor\n      public sFuncs( string zName, sbyte nArg, u8 argType, u8 eTextRep, u8 needCollSeq, dxFunc xFunc )\n      {\n        this.zName = zName;\n        this.nArg = nArg;\n        this.argType = argType;\n        this.eTextRep = eTextRep;\n        this.needCollSeq = needCollSeq;\n        this.xFunc = xFunc;\n      }\n    };\n\n    public struct sAggs\n    {\n      public string zName;\n      public sbyte nArg;\n      public u8 argType;\n      public u8 needCollSeq;\n      public dxStep xStep; //(sqlite3_context*,int,sqlite3_value**);\n      public dxFinal xFinalize; //(sqlite3_context*);\n      // Constructor\n      public sAggs( string zName, sbyte nArg, u8 argType, u8 needCollSeq, dxStep xStep, dxFinal xFinalize )\n      {\n        this.zName = zName;\n        this.nArg = nArg;\n        this.argType = argType;\n        this.needCollSeq = needCollSeq;\n        this.xStep = xStep;\n        this.xFinalize = xFinalize;\n      }\n    }\n    static void sqlite3RegisterBuiltinFunctions( sqlite3 db )\n    {\n#if !SQLITE_OMIT_ALTERTABLE\n      sqlite3AlterFunctions( db );\n#endif\n      ////if ( 0 == db.mallocFailed )\n      {\n        int rc = sqlite3_overload_function( db, "MATCH", 2 );\n        Debug.Assert( rc == SQLITE_NOMEM || rc == SQLITE_OK );\n        if ( rc == SQLITE_NOMEM )\n        {\n  ////        db.mallocFailed = 1;\n        }\n      }\n    }\n\n    /*\n    ** Set the LIKEOPT flag on the 2-argument function with the given name.\n    */\n    static void setLikeOptFlag( sqlite3 db, string zName, int flagVal )\n    {\n      FuncDef pDef;\n      pDef = sqlite3FindFunction( db, zName, sqlite3Strlen30( zName ),\n      2, SQLITE_UTF8, 0 );\n      if ( ALWAYS( pDef != null ) )\n      {\n        pDef.flags = (byte)flagVal;\n      }\n    }\n\n    /*\n    ** Register the built-in LIKE and GLOB functions.  The caseSensitive\n    ** parameter determines whether or not the LIKE operator is case\n    ** sensitive.  GLOB is always case sensitive.\n    */\n    static void sqlite3RegisterLikeFunctions( sqlite3 db, int caseSensitive )\n    {\n      compareInfo pInfo;\n      if ( caseSensitive != 0 )\n      {\n        pInfo = likeInfoAlt;\n      }\n      else\n      {\n        pInfo = likeInfoNorm;\n      }\n      sqlite3CreateFunc( db, "like", 2, SQLITE_ANY, pInfo, (dxFunc)likeFunc, null, null );\n      sqlite3CreateFunc( db, "like", 3, SQLITE_ANY, pInfo, (dxFunc)likeFunc, null, null );\n      sqlite3CreateFunc( db, "glob", 2, SQLITE_ANY,\n      globInfo, (dxFunc)likeFunc, null, null );\n      setLikeOptFlag( db, "glob", SQLITE_FUNC_LIKE | SQLITE_FUNC_CASE );\n      setLikeOptFlag( db, "like",\n      caseSensitive != 0 ? ( SQLITE_FUNC_LIKE | SQLITE_FUNC_CASE ) : SQLITE_FUNC_LIKE );\n    }\n\n    /*\n    ** pExpr points to an expression which implements a function.  If\n    ** it is appropriate to apply the LIKE optimization to that function\n    ** then set aWc[0] through aWc[2] to the wildcard characters and\n    ** return TRUE.  If the function is not a LIKE-style function then\n    ** return FALSE.\n    */\n    static bool sqlite3IsLikeFunction( sqlite3 db, Expr pExpr, ref bool pIsNocase, char[] aWc )\n    {\n      FuncDef pDef;\n      if ( pExpr.op != TK_FUNCTION\n      || null == pExpr.x.pList\n      || pExpr.x.pList.nExpr != 2\n      )\n      {\n        return false;\n      }\n      Debug.Assert( !ExprHasProperty( pExpr, EP_xIsSelect ) );\n      pDef = sqlite3FindFunction( db, pExpr.u.zToken, sqlite3Strlen30( pExpr.u.zToken ),\n                      2, SQLITE_UTF8, 0 );\n      if ( NEVER( pDef == null ) || ( pDef.flags & SQLITE_FUNC_LIKE ) == 0 )\n      {\n        return false;\n      }\n\n      /* The memcpy() statement assumes that the wildcard characters are\n      ** the first three statements in the compareInfo structure.  The\n      ** Debug.Asserts() that follow verify that assumption\n      */\n      //memcpy( aWc, pDef.pUserData, 3 );\n      aWc[0] = ( (compareInfo)pDef.pUserData ).matchAll;\n      aWc[1] = ( (compareInfo)pDef.pUserData ).matchOne;\n      aWc[2] = ( (compareInfo)pDef.pUserData ).matchSet;\n      // Debug.Assert((char*)&likeInfoAlt == (char*)&likeInfoAlt.matchAll);\n      // Debug.Assert(&((char*)&likeInfoAlt)[1] == (char*)&likeInfoAlt.matchOne);\n      // Debug.Assert(&((char*)&likeInfoAlt)[2] == (char*)&likeInfoAlt.matchSet);\n      pIsNocase = ( pDef.flags & SQLITE_FUNC_CASE ) == 0;\n      return true;\n    }\n\n    /*\n    ** All all of the FuncDef structures in the aBuiltinFunc[] array above\n    ** to the global function hash table.  This occurs at start-time (as\n    ** a consequence of calling sqlite3_initialize()).\n    **\n    ** After this routine runs\n    */\n    static void sqlite3RegisterGlobalFunctions()\n    {\n      /*\n      ** The following array holds FuncDef structures for all of the functions\n      ** defined in this file.\n      **\n      ** The array cannot be constant since changes are made to the\n      ** FuncDef.pHash elements at start-time.  The elements of this array\n      ** are read-only after initialization is complete.\n      */\n      FuncDef[] aBuiltinFunc =  {\nFUNCTION("ltrim",              1, 1, 0, trimFunc         ),\nFUNCTION("ltrim",              2, 1, 0, trimFunc         ),\nFUNCTION("rtrim",              1, 2, 0, trimFunc         ),\nFUNCTION("rtrim",              2, 2, 0, trimFunc         ),\nFUNCTION("trim",               1, 3, 0, trimFunc         ),\nFUNCTION("trim",               2, 3, 0, trimFunc         ),\nFUNCTION("min",               -1, 0, 1, minmaxFunc       ),\nFUNCTION("min",                0, 0, 1, null                ),\nAGGREGATE("min",               1, 0, 1, minmaxStep,      minMaxFinalize ),\nFUNCTION("max",               -1, 1, 1, minmaxFunc       ),\nFUNCTION("max",                0, 1, 1, null                ),\nAGGREGATE("max",               1, 1, 1, minmaxStep,      minMaxFinalize ),\nFUNCTION("typeof",             1, 0, 0, typeofFunc       ),\nFUNCTION("length",             1, 0, 0, lengthFunc       ),\nFUNCTION("substr",             2, 0, 0, substrFunc       ),\nFUNCTION("substr",             3, 0, 0, substrFunc       ),\nFUNCTION("abs",                1, 0, 0, absFunc          ),\n#if !SQLITE_OMIT_FLOATING_POINT\nFUNCTION("round",              1, 0, 0, roundFunc        ),\nFUNCTION("round",              2, 0, 0, roundFunc        ),\n#endif\nFUNCTION("upper",              1, 0, 0, upperFunc        ),\nFUNCTION("lower",              1, 0, 0, lowerFunc        ),\nFUNCTION("coalesce",           1, 0, 0, null                ),\nFUNCTION("coalesce",          -1, 0, 0, ifnullFunc       ),\nFUNCTION("coalesce",           0, 0, 0, null                ),\nFUNCTION("hex",                1, 0, 0, hexFunc          ),\nFUNCTION("ifnull",             2, 0, 1, ifnullFunc       ),\nFUNCTION("random",             0, 0, 0, randomFunc       ),\nFUNCTION("randomblob",         1, 0, 0, randomBlob       ),\nFUNCTION("nullif",             2, 0, 1, nullifFunc       ),\nFUNCTION("sqlite_version",     0, 0, 0, versionFunc      ),\nFUNCTION("quote",              1, 0, 0, quoteFunc        ),\nFUNCTION("last_insert_rowid",  0, 0, 0, last_insert_rowid),\nFUNCTION("changes",            0, 0, 0, changes          ),\nFUNCTION("total_changes",      0, 0, 0, total_changes    ),\nFUNCTION("replace",            3, 0, 0, replaceFunc      ),\nFUNCTION("zeroblob",           1, 0, 0, zeroblobFunc     ),\n#if SQLITE_SOUNDEX\nFUNCTION("soundex",            1, 0, 0, soundexFunc      ),\n#endif\n#if !SQLITE_OMIT_LOAD_EXTENSION\nFUNCTION("load_extension",     1, 0, 0, loadExt          ),\nFUNCTION("load_extension",     2, 0, 0, loadExt          ),\n#endif\nAGGREGATE("sum",               1, 0, 0, sumStep,         sumFinalize    ),\nAGGREGATE("total",             1, 0, 0, sumStep,         totalFinalize    ),\nAGGREGATE("avg",               1, 0, 0, sumStep,         avgFinalize    ),\n/*AGGREGATE("count",             0, 0, 0, countStep,       countFinalize  ), */\n/* AGGREGATE(count,             0, 0, 0, countStep,       countFinalize  ), */\nnew FuncDef( 0,SQLITE_UTF8,SQLITE_FUNC_COUNT,null,null,null,countStep,countFinalize,"count",null),\nAGGREGATE("count",             1, 0, 0, countStep,       countFinalize  ),\nAGGREGATE("group_concat",      1, 0, 0, groupConcatStep, groupConcatFinalize),\nAGGREGATE("group_concat",      2, 0, 0, groupConcatStep, groupConcatFinalize),\n\nLIKEFUNC("glob", 2, globInfo, SQLITE_FUNC_LIKE|SQLITE_FUNC_CASE),\n#if SQLITE_CASE_SENSITIVE_LIKE\nLIKEFUNC("like", 2, likeInfoAlt, SQLITE_FUNC_LIKE|SQLITE_FUNC_CASE),\nLIKEFUNC("like", 3, likeInfoAlt, SQLITE_FUNC_LIKE|SQLITE_FUNC_CASE),\n#else\nLIKEFUNC("like", 2, likeInfoNorm, SQLITE_FUNC_LIKE),\nLIKEFUNC("like", 3, likeInfoNorm, SQLITE_FUNC_LIKE),\n#endif\n};\n      int i;\n#if SQLITE_OMIT_WSD\nFuncDefHash pHash = GLOBAL( FuncDefHash, sqlite3GlobalFunctions );\nFuncDef[] aFunc = (FuncDef[])GLOBAL( FuncDef, aBuiltinFunc );\n#else\n      FuncDefHash pHash = sqlite3GlobalFunctions;\n      FuncDef[] aFunc = aBuiltinFunc;\n#endif\n      for ( i = 0 ; i < ArraySize( aBuiltinFunc ) ; i++ )\n      {\n        sqlite3FuncDefInsert( pHash, aFunc[i] );\n      }\n      sqlite3RegisterDateTimeFunctions();\n    }\n  }\n}\n'