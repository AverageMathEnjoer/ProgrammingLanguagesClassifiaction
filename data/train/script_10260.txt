b'{-# LANGUAGE CPP #-}\n\n-- NOTE: comment out this module for now.\n\nmodule Graphics.Hoodle.Render.Debug\n  (\n  )\nwhere\n\n{-\n    -- * dummy rendering\n    renderRBkg_Dummy,\n\n    -- * nopdf\n    renderRBkg_NoPDF,\n\n    -- * render only bbox (for debug purpose)\n    renderStrkBBx_BBoxOnly,\n    renderImgBBx_BBoxOnly,\n    renderRItem_BBoxOnly,\n    renderRLayer_BBoxOnly,\n    renderRPage_BBoxOnly,\n\n    -- * render using buf\n    renderRBkg_Buf,\n    renderRLayer_InBBoxBuf,\n-}\n\n{-\nimport Control.Lens\nimport Control.Monad.State hiding (mapM, mapM_)\nimport Data.Foldable\n-- from hoodle-platform\n\nimport Data.Hoodle.BBox\nimport Data.Hoodle.Generic\nimport Data.Hoodle.Predefined\nimport Data.Hoodle.Simple\nimport qualified Data.Map as M\n-- from this package\nimport Graphics.Hoodle.Render\nimport Graphics.Hoodle.Render.Highlight\nimport Graphics.Hoodle.Render.Type\nimport qualified Graphics.Rendering.Cairo as Cairo\n--\nimport Prelude hiding (concatMap, curry, mapM, mapM_, uncurry)\n\n-----\n-- Dummy (for testing)\n-----\n\nrenderRBkg_Dummy :: RenderCache -> (RBackground, Dimension, Maybe Xform4Page) -> Cairo.Render ()\nrenderRBkg_Dummy _ (_, Dim w h, _) = do\n  Cairo.setSourceRGBA 1 1 1 1\n  Cairo.rectangle 0 0 w h\n  Cairo.fill\n\n-----------\n-- NoPDF --\n-----------\n\n-- | render background without pdf\nrenderRBkg_NoPDF :: RenderCache -> (RBackground, Dimension, Maybe Xform4Page) -> Cairo.Render ()\nrenderRBkg_NoPDF cache r@(RBkgSmpl _ _ _, _, _) = renderRBkg cache r >> return ()\nrenderRBkg_NoPDF _ (RBkgPDF _ _ _ _ _, _, _) = return ()\nrenderRBkg_NoPDF _ (RBkgEmbedPDF _ _ _, _, _) = return ()\n\n--------------\n-- BBoxOnly --\n--------------\n\n-- | render only bounding box of a StrokeBBox\nrenderStrkBBx_BBoxOnly :: BBoxed Stroke -> Cairo.Render ()\nrenderStrkBBx_BBoxOnly sbbox = do\n  let s = bbxed_content sbbox\n  case M.lookup (stroke_color s) predefined_pencolor of\n    Just (r, g, b, a) -> Cairo.setSourceRGBA r g b a\n    Nothing -> Cairo.setSourceRGBA 0 0 0 1\n  Cairo.setSourceRGBA 0 0 0 1\n  Cairo.setLineWidth (stroke_width s)\n  let BBox (x1, y1) (x2, y2) = getBBox sbbox\n  Cairo.rectangle x1 y1 (x2 - x1) (y2 - y1)\n  Cairo.stroke\n\n-- |\nrenderImgBBx_BBoxOnly :: BBoxed Image -> Cairo.Render ()\nrenderImgBBx_BBoxOnly ibbox = do\n  Cairo.setSourceRGBA 0 0 0 1\n  Cairo.setLineWidth 10\n  let BBox (x1, y1) (x2, y2) = getBBox ibbox\n  Cairo.rectangle x1 y1 (x2 - x1) (y2 - y1)\n  Cairo.stroke\n\nrenderSVGBBx_BBoxOnly :: BBoxed SVG -> Cairo.Render ()\nrenderSVGBBx_BBoxOnly svg = do\n  Cairo.setSourceRGBA 0 0 0 1\n  Cairo.setLineWidth 10\n  let BBox (x1, y1) (x2, y2) = getBBox svg\n  Cairo.rectangle x1 y1 (x2 - x1) (y2 - y1)\n  Cairo.stroke\n\nrenderLnkBBx_BBoxOnly :: BBoxed Link -> Cairo.Render ()\nrenderLnkBBx_BBoxOnly lnk = do\n  Cairo.setSourceRGBA 0 0 0 1\n  Cairo.setLineWidth 10\n  let BBox (x1, y1) (x2, y2) = getBBox lnk\n  Cairo.rectangle x1 y1 (x2 - x1) (y2 - y1)\n  Cairo.stroke\n\n-- |\nrenderRItem_BBoxOnly :: RenderCache -> RItem -> Cairo.Render ()\nrenderRItem_BBoxOnly _ (RItemStroke sbbox) = renderStrkBBx_BBoxOnly sbbox\nrenderRItem_BBoxOnly _ (RItemImage ibbox _) = renderImgBBx_BBoxOnly ibbox\nrenderRItem_BBoxOnly _ (RItemSVG svg _) = renderSVGBBx_BBoxOnly svg\nrenderRItem_BBoxOnly _ (RItemLink lnk _) = renderLnkBBx_BBoxOnly lnk\nrenderRItem_BBoxOnly _ (RItemAnchor anc _) = (renderHltBBox . getBBox) anc\n\n-- |\nrenderRLayer_BBoxOnly :: RenderCache -> RLayer -> Cairo.Render ()\nrenderRLayer_BBoxOnly cache = mapM_ (renderRItem_BBoxOnly cache) . view gitems\n\n-- | render only bounding box of a StrokeBBox\nrenderRPage_BBoxOnly :: RenderCache -> RPage -> Cairo.Render ()\nrenderRPage_BBoxOnly cache page = do\n  let dim = view gdimension page\n      bkg = view gbackground page\n      lyrs = view glayers page\n  renderRBkg_NoPDF cache (bkg, dim, Nothing)\n  mapM_ (renderRLayer_BBoxOnly cache) lyrs\n-}\n'