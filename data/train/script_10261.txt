b'/*\n    SPDX-FileCopyrightText: 2014-2019 Milian Wolff <mail@milianw.de>\n\n    SPDX-License-Identifier: LGPL-2.1-or-later\n*/\n\n/**\n * @brief A libunwind based backtrace.\n */\n\n#include "trace.h"\n\n#include "util/libunwind_config.h"\n\n#include <cinttypes>\n#include <cstdio>\n\n#define UNW_LOCAL_ONLY\n#include <libunwind.h>\n\nvoid Trace::print()\n{\n#if LIBUNWIND_HAS_UNW_GETCONTEXT && LIBUNWIND_HAS_UNW_INIT_LOCAL\n    unw_context_t context;\n    unw_getcontext(&context);\n\n    unw_cursor_t cursor;\n    unw_init_local(&cursor, &context);\n\n    int frameNr = 0;\n    while (unw_step(&cursor)) {\n        ++frameNr;\n        unw_word_t ip = 0;\n        unw_get_reg(&cursor, UNW_REG_IP, &ip);\n\n        unw_word_t sp = 0;\n        unw_get_reg(&cursor, UNW_REG_SP, &sp);\n\n        char symbol[256] = {"<unknown>"};\n        unw_word_t offset = 0;\n        unw_get_proc_name(&cursor, symbol, sizeof(symbol), &offset);\n\n        fprintf(stderr, "#%-2d 0x%016" PRIxPTR " sp=0x%016" PRIxPTR " %s + 0x%" PRIxPTR "\\n", frameNr,\n                static_cast<uintptr_t>(ip), static_cast<uintptr_t>(sp), symbol, static_cast<uintptr_t>(offset));\n    }\n#endif\n}\n\nvoid Trace::setup()\n{\n    // configure libunwind for better speed\n    if (unw_set_caching_policy(unw_local_addr_space, UNW_CACHE_PER_THREAD)) {\n        fprintf(stderr, "WARNING: Failed to enable per-thread libunwind caching.\\n");\n    }\n#if LIBUNWIND_HAS_UNW_SET_CACHE_SIZE\n    if (unw_set_cache_size(unw_local_addr_space, 1024, 0)) {\n        fprintf(stderr, "WARNING: Failed to set libunwind cache size.\\n");\n    }\n#endif\n}\n\nint Trace::unwind(void** data)\n{\n    return unw_backtrace(data, MAX_SIZE);\n}\n'