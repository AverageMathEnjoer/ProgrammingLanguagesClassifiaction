b'{-# LANGUAGE OverloadedStrings #-}\n\n-- |\n-- Module      : Hoodle.ModelAction.Pen\n-- Copyright   : (c) 2011-2015 Ian-Woo Kim\n--\n-- License     : BSD3\n-- Maintainer  : Ian-Woo Kim <ianwookim@gmail.com>\n-- Stability   : experimental\n-- Portability : GHC\nmodule Hoodle.ModelAction.Pen where\n\nimport Control.Lens (view)\nimport Control.Monad (when)\nimport Data.Foldable (toList)\nimport Data.Hoodle.Simple (Stroke (..))\nimport Data.Sequence (Seq)\nimport Data.Strict.Tuple (Pair ((:!:)))\nimport qualified Graphics.Rendering.Cairo as Cairo\nimport Hoodle.Type.Canvas\n  ( PenInfo,\n    currentTool,\n    penColor,\n    penType,\n    penWidth,\n    variableWidthPen,\n  )\nimport Hoodle.Type.Enum\n  ( PenType (HighlighterWork, PenWork),\n    convertPenColorToByteString,\n  )\n\n--\n\ndata TempRender a = TempRender\n  { tempSurfaceSrc :: Cairo.Surface,\n    tempSurfaceTgt :: Cairo.Surface,\n    widthHeight :: (Double, Double),\n    tempInfo :: a\n  }\n\n-- | update the content of temp selection. should not be often updated\nupdateTempRender :: TempRender a -> Cairo.Render () -> Bool -> IO ()\nupdateTempRender temprender renderfunc isFullErase =\n  Cairo.renderWith (tempSurfaceSrc temprender) $ do\n    when isFullErase $ do\n      let (cw, ch) = widthHeight temprender\n      Cairo.setSourceRGBA 0.5 0.5 0.5 1\n      Cairo.rectangle 0 0 cw ch\n      Cairo.fill\n    renderfunc\n\n-- |\ncreateNewStroke :: PenInfo -> Seq (Double, Double, Double) -> Stroke\ncreateNewStroke pinfo pdraw =\n  let ptype = view penType pinfo\n      pcolor = view (currentTool . penColor) pinfo\n      pcolname = convertPenColorToByteString pcolor\n      pwidth = view (currentTool . penWidth) pinfo\n      pvwpen = view variableWidthPen pinfo\n      ptool = case ptype of\n        PenWork -> "pen"\n        HighlighterWork -> "highlighter"\n        _ -> error "error in createNewStroke"\n\n      newstroke =\n        if pvwpen\n          then\n            VWStroke\n              { stroke_tool = ptool,\n                stroke_color = pcolname,\n                stroke_vwdata = map (\\(x, y, z) -> (x, y, pwidth * z)) . toList $ pdraw\n              }\n          else\n            Stroke\n              { stroke_tool = ptool,\n                stroke_color = pcolname,\n                stroke_width = pwidth,\n                stroke_data = map (\\(x, y, _) -> x :!: y) . toList $ pdraw\n              }\n   in newstroke\n'