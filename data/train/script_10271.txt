b'\xef\xbb\xbfusing Asn1;\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace Rubeus\n{\n    //S4UUserID::= SEQUENCE {\n    //    nonce[0] UInt32, --the nonce in KDC - REQ - BODY\n    //    cname[1] PrincipalName OPTIONAL,\n    //    --Certificate mapping hints\n    //    crealm[2] Realm,\n    //    subject-certificate[3] OCTET STRING OPTIONAL, \n    //    options[4] BIT STRING OPTIONAL,\n    //    ...\n    //}\n\n    public class S4UUserID\n    {\n        public S4UUserID(string name, string realm, uint n)\n        {\n            nonce = n;\n\n            cname = new PrincipalName(name);\n            cname.name_type = Interop.PRINCIPAL_TYPE.NT_ENTERPRISE;\n\n            crealm = realm;\n\n            // default for creation\n            options = Interop.PA_S4U_X509_USER_OPTIONS.SIGN_REPLY;\n        }\n\n        public AsnElt Encode()\n        {\n            List<AsnElt> allNodes = new List<AsnElt>();\n\n            // nonce                   [0] UInt32\n            AsnElt nonceAsn = AsnElt.MakeInteger(nonce);\n            AsnElt nonceSeq = AsnElt.Make(AsnElt.SEQUENCE, new[] { nonceAsn });\n            nonceSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 0, nonceSeq);\n            allNodes.Add(nonceSeq);\n\n            // cname                   [1] PrincipalName\n            AsnElt cnameElt = cname.Encode();\n            cnameElt = AsnElt.MakeImplicit(AsnElt.CONTEXT, 1, cnameElt);\n            allNodes.Add(cnameElt);\n\n            // crealm                  [2] Realm\n            AsnElt realmAsn = AsnElt.MakeString(AsnElt.IA5String, crealm);\n            realmAsn = AsnElt.MakeImplicit(AsnElt.UNIVERSAL, AsnElt.GeneralString, realmAsn);\n            AsnElt realmSeq = AsnElt.Make(AsnElt.SEQUENCE, new[] { realmAsn });\n            realmSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 2, realmSeq);\n            allNodes.Add(realmSeq);\n\n            // options                 [4] PA_S4U_X509_USER_OPTIONS\n            byte[] optionsBytes = BitConverter.GetBytes((uint)options);\n            if (BitConverter.IsLittleEndian)\n            {\n                Array.Reverse(optionsBytes);\n            }\n            AsnElt optionsAsn = AsnElt.MakeBitString(optionsBytes);\n            AsnElt optionsSeq = AsnElt.Make(AsnElt.SEQUENCE, new[] { optionsAsn });\n            optionsSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 4, optionsSeq);\n            allNodes.Add(optionsSeq);\n\n            AsnElt seq = AsnElt.Make(AsnElt.SEQUENCE, allNodes.ToArray());\n            //AsnElt seq2 = AsnElt.Make(AsnElt.SEQUENCE, seq);\n\n            return seq;\n        }\n\n        public UInt32 nonce { get; set; }\n\n        public PrincipalName cname { get; set; }\n\n        public string crealm { get; set; }\n\n        public Interop.PA_S4U_X509_USER_OPTIONS options { get; set; }\n    }\n}\n'