b'{-# LANGUAGE OverloadedStrings #-}\n{-# OPTIONS_GHC -fno-warn-unused-imports#-}\nmodule Restexample.Client.Test where\nimport Rest.Client.Internal\nimport qualified Rest.Types.Void\nimport qualified Api.Test\nimport qualified Api.Test.Err2\n\nnoResponse ::\n             ApiStateC m => m (ApiResponse Rest.Types.Void.Void ())\nnoResponse\n  = let rHeaders\n          = [(hAccept, "text/json"), (hContentType, "text/plain")]\n        request\n          = makeReq "POST" "v1.0.0" [["test"], ["noResponse"]] [] rHeaders ""\n      in doRequest fromJSON (const ()) request\n\nonlyError :: ApiStateC m => m (ApiResponse Api.Test.Err ())\nonlyError\n  = let rHeaders\n          = [(hAccept, "text/json"), (hContentType, "text/plain")]\n        request\n          = makeReq "POST" "v1.0.0" [["test"], ["onlyError"]] [] rHeaders ""\n      in doRequest fromJSON (const ()) request\n\ndifferentFormats ::\n                   ApiStateC m => String -> m (ApiResponse Api.Test.Err Api.Test.Ok)\ndifferentFormats input\n  = let rHeaders\n          = [(hAccept, "text/json,text/xml"), (hContentType, "text/plain")]\n        request\n          = makeReq "POST" "v1.0.0" [["test"], ["differentFormats"]] []\n              rHeaders\n              (toLbs input)\n      in doRequest fromJSON fromXML request\n\nintersectedFormats ::\n                     ApiStateC m => String -> m (ApiResponse Api.Test.Err Api.Test.Ok)\nintersectedFormats input\n  = let rHeaders\n          = [(hAccept, "text/json"), (hContentType, "text/plain")]\n        request\n          = makeReq "POST" "v1.0.0" [["test"], ["intersectedFormats"]] []\n              rHeaders\n              (toLbs input)\n      in doRequest fromJSON fromJSON request\n\nintersectedFormats2 ::\n                      ApiStateC m => String -> m (ApiResponse Api.Test.Err Api.Test.Ok)\nintersectedFormats2 input\n  = let rHeaders\n          = [(hAccept, "text/xml"), (hContentType, "text/plain")]\n        request\n          = makeReq "POST" "v1.0.0" [["test"], ["intersectedFormats2"]] []\n              rHeaders\n              (toLbs input)\n      in doRequest fromXML fromXML request\n\nrawXmlIO ::\n           ApiStateC m => String -> m (ApiResponse Api.Test.Err2.Err String)\nrawXmlIO input\n  = let rHeaders\n          = [(hAccept, "text/xml"), (hContentType, "text/xml")]\n        request\n          = makeReq "POST" "v1.0.0" [["test"], ["rawXmlIO"]] [] rHeaders\n              (toXML input)\n      in doRequest fromXML fromXML request\n\nrawJsonIO ::\n            ApiStateC m => String -> m (ApiResponse Api.Test.Err2.Err String)\nrawJsonIO input\n  = let rHeaders\n          = [(hAccept, "text/json"), (hContentType, "text/json")]\n        request\n          = makeReq "POST" "v1.0.0" [["test"], ["rawJsonIO"]] [] rHeaders\n              (toJSON input)\n      in doRequest fromJSON fromJSON request\n\nrawJsonAndXmlI ::\n                 ApiStateC m =>\n                 ByteString -> m (ApiResponse Rest.Types.Void.Void String)\nrawJsonAndXmlI input\n  = let rHeaders\n          = [(hAccept, "text/plain,text/json"),\n             (hContentType, "application/octet-stream")]\n        request\n          = makeReq "POST" "v1.0.0" [["test"], ["rawJsonAndXmlI"]] []\n              rHeaders\n              (id input)\n      in doRequest fromJSON toString request\n\nrawJsonAndXmlO ::\n                 ApiStateC m =>\n                 [(String, String)] ->\n                   m (ApiResponse Rest.Types.Void.Void ByteString)\nrawJsonAndXmlO pList\n  = let rHeaders\n          = [(hAccept, "application/octet-stream,text/json"),\n             (hContentType, "text/plain")]\n        request\n          = makeReq "POST" "v1.0.0" [["test"], ["rawJsonAndXmlO"]] pList\n              rHeaders\n              ""\n      in doRequest fromJSON id request\n\nnoError ::\n          ApiStateC m => m (ApiResponse Rest.Types.Void.Void Api.Test.Ok)\nnoError\n  = let rHeaders\n          = [(hAccept, "text/json"), (hContentType, "text/plain")]\n        request\n          = makeReq "POST" "v1.0.0" [["test"], ["noError"]] [] rHeaders ""\n      in doRequest fromJSON fromJSON request\n\njustStringO ::\n              ApiStateC m => m (ApiResponse Rest.Types.Void.Void String)\njustStringO\n  = let rHeaders\n          = [(hAccept, "text/plain,text/json"), (hContentType, "text/plain")]\n        request\n          = makeReq "POST" "v1.0.0" [["test"], ["justStringO"]] [] rHeaders\n              ""\n      in doRequest fromJSON toString request\n\npreferJson ::\n             ApiStateC m => String -> m (ApiResponse Api.Test.Err Api.Test.Ok)\npreferJson input\n  = let rHeaders\n          = [(hAccept, "text/json"), (hContentType, "text/plain")]\n        request\n          = makeReq "POST" "v1.0.0" [["test"], ["preferJson"]] [] rHeaders\n              (toLbs input)\n      in doRequest fromJSON fromJSON request\n\noctetStreamOut ::\n                 ApiStateC m =>\n                 ByteString -> m (ApiResponse Api.Test.Err ByteString)\noctetStreamOut input\n  = let rHeaders\n          = [(hAccept, "text/json,application/octet-stream"),\n             (hContentType, "application/octet-stream")]\n        request\n          = makeReq "POST" "v1.0.0" [["test"], ["octetStreamOut"]] []\n              rHeaders\n              (id input)\n      in doRequest fromJSON id request\n\nonlyInput ::\n            ApiStateC m => () -> m (ApiResponse Rest.Types.Void.Void ())\nonlyInput input\n  = let rHeaders\n          = [(hAccept, "text/json"), (hContentType, "text/json")]\n        request\n          = makeReq "POST" "v1.0.0" [["test"], ["onlyInput"]] [] rHeaders\n              (toJSON input)\n      in doRequest fromJSON (const ()) request'