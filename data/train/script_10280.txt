b'\xef\xbb\xbfusing System;\nusing Asn1;\nusing System.Security.Cryptography.X509Certificates;\nusing System.Security.Cryptography;\n\n\nnamespace Rubeus {\n    public class PA_DATA\n    {\n        public static readonly Oid DiffieHellman = new Oid("1.2.840.10046.2.1");\n\n        //PA-DATA         ::= SEQUENCE {\n        //        -- NOTE: first tag is [1], not [0]\n        //        padata-type     [1] Int32,\n        //        padata-value    [2] OCTET STRING -- might be encoded AP-REQ\n        //}\n\n        public PA_DATA(bool pac = true)\n        {\n            // defaults for creation\n            type = Interop.PADATA_TYPE.PA_PAC_REQUEST;\n\n            value = new KERB_PA_PAC_REQUEST(pac);\n        }\n\n        public PA_DATA(bool claims, bool branch, bool fullDC, bool rbcd)\n        {\n            // defaults for creation\n            type = Interop.PADATA_TYPE.PA_PAC_OPTIONS;\n            value = new PA_PAC_OPTIONS(claims, branch, fullDC, rbcd);\n        }\n\n        public PA_DATA(string keyString, Interop.KERB_ETYPE etype)\n        {\n            // include pac, supply enc timestamp\n\n            type = Interop.PADATA_TYPE.ENC_TIMESTAMP;\n\n            PA_ENC_TS_ENC temp = new PA_ENC_TS_ENC();\n\n            byte[] rawBytes = temp.Encode().Encode();\n            byte[] key = Helpers.StringToByteArray(keyString);\n\n            // KRB_KEY_USAGE_AS_REQ_PA_ENC_TIMESTAMP == 1\n            // From https://github.com/gentilkiwi/kekeo/blob/master/modules/asn1/kull_m_kerberos_asn1.h#L55\n            byte[] encBytes = Crypto.KerberosEncrypt(etype, Interop.KRB_KEY_USAGE_AS_REQ_PA_ENC_TIMESTAMP, key, rawBytes);\n\n            value = new EncryptedData((int)etype, encBytes);\n        }\n\n        public PA_DATA(byte[] key, string name, string realm)\n        {\n            // used for constrained delegation\n            type = Interop.PADATA_TYPE.S4U2SELF;\n\n            value = new PA_FOR_USER(key, name, realm);\n        }\n\n        public PA_DATA(byte[] key, string name, string realm, uint nonce, Interop.KERB_ETYPE eType = Interop.KERB_ETYPE.aes256_cts_hmac_sha1)\n        {\n            // used for constrained delegation\n            type = Interop.PADATA_TYPE.PA_S4U_X509_USER;\n\n            value = new PA_S4U_X509_USER(key, name, realm, nonce, eType);\n        }\n\n        public PA_DATA(string crealm, string cname, Ticket providedTicket, byte[] clientKey, Interop.KERB_ETYPE etype, bool opsec = false, byte[] req_body = null)\n        {\n            // include an AP-REQ, so PA-DATA for a TGS-REQ\n\n            type = Interop.PADATA_TYPE.AP_REQ;\n\n            // build the AP-REQ\n            AP_REQ ap_req = new AP_REQ(crealm, cname, providedTicket, clientKey, etype);\n\n            // make authenticator look more realistic\n            if (opsec)\n            {\n                var rand = new Random();\n                ap_req.authenticator.seq_number = (UInt32)rand.Next(1, Int32.MaxValue);\n                // Could be useful to output the sequence number in case we implement KRB_PRIV or KRB_SAFE messages\n                Console.WriteLine("[+] Sequence number is: {0}", ap_req.authenticator.seq_number);\n\n                // randomize cusec to avoid fingerprinting\n                ap_req.authenticator.cusec = rand.Next(0, 999999);\n\n                if (req_body != null)\n                    ap_req.authenticator.cksum = new Checksum(Interop.KERB_CHECKSUM_ALGORITHM.KERB_CHECKSUM_RSA_MD5, req_body);\n            }\n\n            value = ap_req;\n        }\n\n        public PA_DATA(X509Certificate2 pkInitCert, KDCKeyAgreement agreement, KDCReqBody kdcRequestBody, bool verifyCerts = false) {\n\n            DateTime now = DateTime.UtcNow;\n            KrbPkAuthenticator authenticator = new KrbPkAuthenticator((uint)now.Millisecond, now, now.Millisecond, kdcRequestBody);\n            KrbAuthPack authPack = new KrbAuthPack(authenticator, pkInitCert);\n\n            byte[] pubKeyInfo = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] {\n                AsnElt.MakeInteger(agreement.P),\n                AsnElt.MakeInteger(agreement.G),\n            }).Encode();\n     \n            authPack.ClientPublicValue = new KrbSubjectPublicKeyInfo(new KrbAlgorithmIdentifier(DiffieHellman, pubKeyInfo),            \n                AsnElt.MakeInteger(agreement.Y).Encode());\n            \n            type = Interop.PADATA_TYPE.PK_AS_REQ;\n            value = new PA_PK_AS_REQ(authPack, pkInitCert, agreement, verifyCerts);\n        }\n\n        public PA_DATA(AsnElt body)\n        {\n            //if (body.Sub.Length != 2)\n            //{\n            //    throw new System.Exception("PA-DATA should contain two elements");\n            //}\n\n            //Console.WriteLine("tag: {0}", body.Sub[0].Sub[0].TagValue);\n            try\n            {\n                type = (Interop.PADATA_TYPE)body.Sub[0].Sub[0].GetInteger();\n                byte[] valueBytes = body.Sub[1].Sub[0].GetOctetString();\n            }\n            catch\n            {\n                type = (Interop.PADATA_TYPE)body.Sub[0].Sub[0].Sub[0].GetInteger();\n                byte[] valueBytes = body.Sub[0].Sub[1].Sub[0].GetOctetString();\n            }\n\n            switch (type) {\n                case Interop.PADATA_TYPE.PA_PAC_REQUEST:\n                    value = new KERB_PA_PAC_REQUEST(AsnElt.Decode(body.Sub[1].Sub[0].CopyValue()));\n                    break;\n\n                case Interop.PADATA_TYPE.PK_AS_REP:\n                    value = new PA_PK_AS_REP(AsnElt.Decode(body.Sub[1].Sub[0].CopyValue()));\n                    break;\n                case Interop.PADATA_TYPE.PA_S4U_X509_USER:\n                    break;\n            }\n        }\n\n        public AsnElt Encode()\n        {\n            // padata-type     [1] Int32\n            AsnElt typeElt = AsnElt.MakeInteger((long)type);\n            AsnElt nameTypeSeq = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] { typeElt });\n            nameTypeSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 1, nameTypeSeq);\n\n            AsnElt paDataElt;\n            if (type == Interop.PADATA_TYPE.PA_PAC_REQUEST)\n            {\n                // used for AS-REQs\n\n                // padata-value    [2] OCTET STRING -- might be encoded AP-REQ\n                paDataElt = ((KERB_PA_PAC_REQUEST)value).Encode();\n                paDataElt = AsnElt.MakeImplicit(AsnElt.CONTEXT, 2, paDataElt);\n\n                AsnElt seq = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] { nameTypeSeq, paDataElt });\n                return seq;\n            }\n            else if (type == Interop.PADATA_TYPE.ENC_TIMESTAMP)\n            {\n                // used for AS-REQs\n                AsnElt blob = AsnElt.MakeBlob(((EncryptedData)value).Encode().Encode());\n                AsnElt blobSeq = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] { blob });\n                blobSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 2, blobSeq);\n\n                AsnElt seq = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] { nameTypeSeq, blobSeq });\n                return seq;\n            }\n            else if (type == Interop.PADATA_TYPE.AP_REQ)\n            {\n                // used for TGS-REQs\n                AsnElt blob = AsnElt.MakeBlob(((AP_REQ)value).Encode().Encode());\n                AsnElt blobSeq = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] { blob });\n\n                paDataElt = AsnElt.MakeImplicit(AsnElt.CONTEXT, 2, blobSeq);\n\n                AsnElt seq = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] { nameTypeSeq, paDataElt });\n                return seq;\n            }\n            else if (type == Interop.PADATA_TYPE.S4U2SELF)\n            {\n                // used for constrained delegation\n                AsnElt blob = AsnElt.MakeBlob(((PA_FOR_USER)value).Encode().Encode());\n                AsnElt blobSeq = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] { blob });\n\n                paDataElt = AsnElt.MakeImplicit(AsnElt.CONTEXT, 2, blobSeq);\n\n                AsnElt seq = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] { nameTypeSeq, paDataElt });\n                return seq;\n            }\n            else if (type == Interop.PADATA_TYPE.PA_S4U_X509_USER)\n            {\n                // used for constrained delegation\n                AsnElt blob = AsnElt.MakeBlob(((PA_S4U_X509_USER)value).Encode().Encode());\n                AsnElt blobSeq = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] { blob });\n\n                paDataElt = AsnElt.MakeImplicit(AsnElt.CONTEXT, 2, blobSeq);\n\n                AsnElt seq = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] { nameTypeSeq, paDataElt });\n                return seq;\n            }\n            else if (type == Interop.PADATA_TYPE.PA_PAC_OPTIONS)\n            {\n                AsnElt blob = AsnElt.MakeBlob(((PA_PAC_OPTIONS)value).Encode().Encode());\n                AsnElt blobSeq = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] { blob });\n\n                paDataElt = AsnElt.MakeImplicit(AsnElt.CONTEXT, 2, blobSeq);\n\n                AsnElt seq = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] { nameTypeSeq, paDataElt });\n                return seq;\n            }\n            else if(type == Interop.PADATA_TYPE.PK_AS_REQ) {\n\n                AsnElt blob = AsnElt.MakeBlob(((PA_PK_AS_REQ)value).Encode().Encode());\n                AsnElt blobSeq = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] { blob });\n\n                paDataElt = AsnElt.MakeImplicit(AsnElt.CONTEXT, 2, blobSeq);\n\n                AsnElt seq = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] { nameTypeSeq, paDataElt });\n                return seq;\n            }\n            else\n            {\n                return null;\n            }\n        }\n\n        public Interop.PADATA_TYPE type { get; set; }\n\n        public Object value { get; set; }\n    }\n}'