b'package com.quyunshuo.androidbaseframemvvm.common.ui\n\nimport androidx.fragment.app.Fragment\nimport androidx.fragment.app.FragmentActivity\nimport androidx.recyclerview.widget.DiffUtil\nimport androidx.recyclerview.widget.RecyclerView\nimport androidx.viewpager2.adapter.FragmentStateAdapter\nimport kotlin.random.Random\n\n/**\n * @author DBoy 2021/8/5 <p>\n * - \xe6\x96\x87\xe4\xbb\xb6\xe6\x8f\x8f\xe8\xbf\xb0 : ViewPager2 FragmentAdapter\xe5\xb0\x81\xe8\xa3\x85\n * - \xe5\xaf\xb9\xe4\xba\x8e\xe5\x85\x83\xe6\x95\xb0\xe6\x8d\xae[mData]\xe7\x9a\x84\xe5\xa2\x9e\xe5\x8a\xa0\xe5\x88\xa0\xe9\x99\xa4\xe6\x93\x8d\xe4\xbd\x9c\xe5\x8f\xaa\xe8\x83\xbd\xe9\x80\x9a\xe8\xbf\x87\xe5\x86\x85\xe9\x83\xa8\xe6\x8f\x90\xe4\xbe\x9b\xe7\x9a\x844\xe7\xa7\x8d\xe6\x96\xb9\xe5\xbc\x8f\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x93\x8d\xe4\xbd\x9c:\n *     - [setNewData]\n *     - [addNewData]\n *     - [addData]\n *     - [removeData]\n * - \xe5\x86\x85\xe9\x83\xa8\xe4\xbd\xbf\xe7\x94\xa8[DiffUtil]\xe5\xb7\xa5\xe5\x85\xb7\xe5\xae\x9e\xe7\x8e\xb0\xe6\x9b\xb4\xe6\x96\xb0UI,\xe4\xb8\x8d\xe9\x9c\x80\xe8\xb0\x83\xe7\x94\xa8[notifyDataSetChanged]\xe7\xad\x89\xe4\xb8\x80\xe7\xb3\xbb\xe5\x88\x97\xe6\x96\xb9\xe6\xb3\x95\xe3\x80\x82\n */\nabstract class BaseFragmentStateAdapter<T> : FragmentStateAdapter {\n\n    private val TAG = "FragmentAdapter"\n\n    /**\n     * \xe8\xae\xb0\xe5\xbd\x95\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84Fragment id\xe5\x88\x97\xe8\xa1\xa8\n     */\n    private var mFragmentIdMap = mutableMapOf<T, Long>()\n\n    /**\n     * \xe9\x9c\x80\xe8\xa6\x81\xe7\x94\x9f\xe6\x88\x90\xe9\xa1\xb5\xe9\x9d\xa2\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\n     */\n    var mData: MutableList<T>\n        set(value) {\n            field = value\n            mFragmentIdMap.clear()\n            createFragmentsIds(field)\n        }\n\n    constructor(fragment: Fragment, data: MutableList<T> = mutableListOf()) : super(fragment) {\n        mData = data\n    }\n\n    constructor(activity: FragmentActivity, data: MutableList<T> = mutableListOf()) : super(\n        activity\n    ) {\n        mData = data\n    }\n\n    /**\n     * \xe8\x8e\xb7\xe5\x8f\x96\xe9\x9c\x80\xe8\xa6\x81\xe5\x88\x9b\xe5\xbb\xba\xe5\x87\xa0\xe4\xb8\xaaFragment\n     */\n    override fun getItemCount(): Int = mData.size\n\n    /**\n     * \xe5\x88\x9b\xe5\xbb\xbaFragment\n     */\n    final override fun createFragment(position: Int): Fragment {\n        return createFragment(mData[position], position)\n    }\n\n    /**\n     * \xe5\x88\x9b\xe5\xbb\xbafragment \xe4\xbc\xa0\xe9\x80\x92\xe6\x95\xb0\xe6\x8d\xae\n     */\n    abstract fun createFragment(item: T, position: Int): Fragment\n\n    /**\n     * \xe8\x8e\xb7\xe5\x8f\x96fragment \xe5\xaf\xb9\xe5\xba\x94 id\n     */\n    override fun getItemId(position: Int): Long {\n        if (position >= mData.size) return RecyclerView.NO_ID\n        return mFragmentIdMap[mData[position]] ?: return RecyclerView.NO_ID\n    }\n\n    /**\n     * \xe5\x88\xa4\xe6\x96\xad\xe6\x98\xaf\xe5\x90\xa6\xe5\x8c\x85\xe5\x90\xab\xe8\xbf\x99\xe4\xb8\xaaid\xe7\x9a\x84\xe6\x95\xb0\n     */\n    override fun containsItem(itemId: Long): Boolean {\n        return mFragmentIdMap.values.contains(itemId)\n    }\n\n    /**\n     * \xe8\xae\xbe\xe7\xbd\xae\xe6\x96\xb0\xe6\x95\xb0\xe6\x8d\xae\n     */\n    fun setNewData(data: MutableList<T> = mutableListOf()) {\n        val oldData = copyData()\n        mData = data\n        diffNotifyDataSetChanged(oldData, mData)\n    }\n\n    /**\n     * \xe7\xb4\xaf\xe5\x8a\xa0\xe6\x96\xb0\xe6\x95\xb0\xe6\x8d\xae\n     */\n    fun addNewData(data: MutableList<T> = mutableListOf()) {\n        val oldData = copyData()\n        mData.addAll(data)\n        //\xe5\x88\x9b\xe5\xbb\xba\xe6\x96\xb0\xe7\x9a\x84\xe5\xaf\xb9\xe5\xba\x94\xe4\xbd\x8d\xe7\xbd\xae\xe7\x9a\x84id\n        createFragmentsIds(data)\n        diffNotifyDataSetChanged(oldData, mData)\n\n    }\n\n    /**\n     * \xe6\xb7\xbb\xe5\x8a\xa0\xe6\x95\xb0\xe6\x8d\xae\n     */\n    fun addData(data: T) {\n        val oldData = copyData()\n        mData.add(data)\n        //\xe9\x9a\x8f\xe6\x9c\xba\xe4\xb8\x80\xe4\xb8\xaaid\xe5\xaf\xb9\xe5\xba\x94\xe5\xbd\x93\xe5\x89\x8d\xe4\xbd\x8d\xe7\xbd\xaeFragment,\xe4\xb8\xa4\xe6\xac\xa1\xe9\x9a\x8f\xe6\x9c\xba\xe7\xa1\xae\xe4\xbf\x9d\xe5\x90\x8cid\xe7\x8e\x87\xe4\xb8\xba\xe6\x9c\x80\xe4\xbd\x8e\xe6\xa6\x82\xe7\x8e\x87\n        mFragmentIdMap[data] = Random.nextLong() - Random.nextInt()\n        diffNotifyDataSetChanged(oldData, mData)\n    }\n\n    /**\n     * \xe7\xa7\xbb\xe9\x99\xa4\xe6\x9f\x90\xe4\xb8\xaa\xe6\x95\xb0\xe6\x8d\xae\n     */\n    fun removeData(data: T): Boolean {\n        val oldData = copyData()\n        if (mData.remove(data)) {\n            mFragmentIdMap.remove(data)\n            diffNotifyDataSetChanged(oldData, mData)\n            return true\n        }\n        return false\n    }\n\n    /**\n     * \xe7\xa7\xbb\xe9\x99\xa4\xe6\x9f\x90\xe4\xb8\xaa\xe4\xbd\x8d\xe7\xbd\xae\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\n     */\n    fun removeData(position: Int): Boolean {\n        if (position < mData.size && position < mFragmentIdMap.size) {\n            val oldData = copyData()\n            val removeItem = mData.removeAt(position)\n            mFragmentIdMap.remove(removeItem)\n            diffNotifyDataSetChanged(oldData, mData)\n            return true\n        }\n        return false\n    }\n\n    /**\n     * \xe6\x8b\xb7\xe8\xb4\x9d\xe5\x8e\x9f\xe6\x95\xb0\xe6\x8d\xae\n     */\n    private fun copyData(): MutableList<T> {\n        val oldData = mutableListOf<T>()\n        oldData.addAll(mData)\n        return oldData\n    }\n\n    /**\n     * \xe4\xbd\xbf\xe7\x94\xa8diff\xe5\xb7\xa5\xe5\x85\xb7\xe6\x9b\xb4\xe6\x96\xb0UI,\xe5\xbd\x93\xe5\x89\x8ddiff\xe5\xb7\xa5\xe5\x85\xb7\xe5\xaf\xb9\xe6\xaf\x94\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe6\x96\xb9\xe5\xbc\x8f\xe6\x98\xaf [==] \xe6\x89\x80\xe4\xbb\xa5\xe5\xa6\x82\xe6\x9e\x9c\xe9\x9c\x80\xe8\xa6\x81\xe7\xb2\xbe\xe7\xa1\xae\xe5\xaf\xb9\xe6\xaf\x94\xe4\xb8\x8d\xe5\x90\x8citem\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe9\x87\x8d\xe5\x86\x99[T]\xe7\x9a\x84[equals]\xe6\x96\xb9\xe6\xb3\x95.\n     */\n    private fun diffNotifyDataSetChanged(oldData: MutableList<T>, newData: MutableList<T>) {\n        DiffUtil.calculateDiff(object : DiffUtil.Callback() {\n\n            override fun getOldListSize(): Int = oldData.size\n\n            override fun getNewListSize(): Int = newData.size\n\n            override fun areItemsTheSame(oldItemPosition: Int, newItemPosition: Int): Boolean = oldData[oldItemPosition] == newData[newItemPosition]\n\n            override fun areContentsTheSame(oldItemPosition: Int, newItemPosition: Int): Boolean = oldData[oldItemPosition] == newData[newItemPosition]\n\n        }, true).dispatchUpdatesTo(this)\n    }\n\n\n    /**\n     * \xe5\x88\x9b\xe5\xbb\xba[mData]\xe5\xaf\xb9\xe5\xba\x94Fragment\xe7\x9a\x84id\n     */\n    private fun createFragmentsIds(data: MutableList<T>) {\n        for (item in data) {\n            mFragmentIdMap[item] = Random.nextLong() - Random.nextInt()\n        }\n    }\n\n}\n'