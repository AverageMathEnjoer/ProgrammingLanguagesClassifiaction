b'package com.loper7.date_time_picker.controller\n\nimport android.util.Log\nimport com.loper7.date_time_picker.DateTimeConfig\nimport com.loper7.date_time_picker.DateTimeConfig.DAY\nimport com.loper7.date_time_picker.DateTimeConfig.HOUR\nimport com.loper7.date_time_picker.DateTimeConfig.MIN\nimport com.loper7.date_time_picker.DateTimeConfig.MONTH\nimport com.loper7.date_time_picker.DateTimeConfig.SECOND\nimport com.loper7.date_time_picker.DateTimeConfig.YEAR\nimport com.loper7.date_time_picker.ext.*\nimport com.loper7.date_time_picker.ext.getMaxDayInMonth\nimport com.loper7.date_time_picker.ext.isSameDay\nimport com.loper7.date_time_picker.ext.isSameMonth\nimport com.loper7.date_time_picker.ext.isSameYear\nimport com.loper7.date_time_picker.number_picker.NumberPicker\nimport com.loper7.date_time_picker.utils.StringUtils\nimport java.util.*\nimport kotlin.math.min\n\n/**\n *\n * @CreateDate:     2020/9/11 13:36\n * @Description:    \xe6\x97\xa5\xe6\x9c\x9f/\xe6\x97\xb6\xe9\x97\xb4\xe9\x80\xbb\xe8\xbe\x91\xe6\x8e\xa7\xe5\x88\xb6\xe5\x99\xa8\n * @Author:         LOPER7\n * @Email:          loper7@163.com\n */\nopen class DateTimeController : BaseDateTimeController() {\n    private var mYearSpinner: NumberPicker? = null\n    private var mMonthSpinner: NumberPicker? = null\n    private var mDaySpinner: NumberPicker? = null\n    private var mHourSpinner: NumberPicker? = null\n    private var mMinuteSpinner: NumberPicker? = null\n    private var mSecondSpinner: NumberPicker? = null\n\n    private lateinit var calendar: Calendar\n    private lateinit var minCalendar: Calendar\n    private lateinit var maxCalendar: Calendar\n\n    private var global = DateTimeConfig.GLOBAL_LOCAL\n\n    private var mOnDateTimeChangedListener: ((Long) -> Unit)? = null\n\n    private var wrapSelectorWheel = true\n    private var wrapSelectorWheelTypes: MutableList<Int>? = null\n\n\n    override fun bindPicker(type: Int, picker: NumberPicker?): DateTimeController {\n        when (type) {\n            YEAR -> mYearSpinner = picker\n            MONTH -> mMonthSpinner = picker\n            DAY -> mDaySpinner = picker\n            HOUR -> mHourSpinner = picker\n            MIN -> mMinuteSpinner = picker\n            SECOND -> mSecondSpinner = picker\n        }\n        return this\n    }\n\n    override fun bindGlobal(global: Int): DateTimeController {\n        this.global = global\n        return this\n    }\n\n    override fun build(): DateTimeController {\n        calendar = Calendar.getInstance()\n        calendar.set(Calendar.MILLISECOND,0)\n        minCalendar = Calendar.getInstance()\n        minCalendar.set(Calendar.YEAR, 1900)\n        minCalendar.set(Calendar.MONTH, 0)\n        minCalendar.set(Calendar.DAY_OF_MONTH, 1)\n        minCalendar.set(Calendar.HOUR_OF_DAY, 0)\n        minCalendar.set(Calendar.MINUTE, 0)\n        minCalendar.set(Calendar.SECOND, 0)\n\n        maxCalendar = Calendar.getInstance()\n        maxCalendar.set(Calendar.YEAR, calendar.get(Calendar.YEAR) + 1900)\n        maxCalendar.set(Calendar.MONTH, 11)\n        maxCalendar.set(Calendar.DAY_OF_MONTH, maxCalendar.getMaxDayInMonth())\n        maxCalendar.set(Calendar.HOUR_OF_DAY, 23)\n        maxCalendar.set(Calendar.MINUTE, 59)\n        maxCalendar.set(Calendar.SECOND, 59)\n\n        mYearSpinner?.run {\n            maxValue = maxCalendar.get(Calendar.YEAR)\n            minValue = minCalendar.get(Calendar.YEAR)\n            value = calendar.get(Calendar.YEAR)\n            isFocusable = true\n            isFocusableInTouchMode = true\n            descendantFocusability = NumberPicker.FOCUS_BLOCK_DESCENDANTS //\xe8\xae\xbe\xe7\xbd\xaeNumberPicker\xe4\xb8\x8d\xe5\x8f\xaf\xe7\xbc\x96\xe8\xbe\x91\n            setOnValueChangedListener(onChangeListener)\n        }\n\n\n        mMonthSpinner?.run {\n            maxValue = maxCalendar.get(Calendar.MONTH) + 1\n            minValue = minCalendar.get(Calendar.MONTH) + 1\n            value = calendar.get(Calendar.MONTH) + 1\n            isFocusable = true\n            isFocusableInTouchMode = true\n\n            formatter = if (DateTimeConfig.showChina(global))\n                DateTimeConfig.formatter //\xe6\xa0\xbc\xe5\xbc\x8f\xe5\x8c\x96\xe6\x98\xbe\xe7\xa4\xba\xe6\x95\xb0\xe5\xad\x97\xef\xbc\x8c\xe4\xb8\xaa\xe4\xbd\x8d\xe6\x95\xb0\xe5\x89\x8d\xe6\xb7\xbb\xe5\x8a\xa00\n            else\n                DateTimeConfig.globalMonthFormatter\n\n            descendantFocusability = NumberPicker.FOCUS_BLOCK_DESCENDANTS\n            setOnValueChangedListener(onChangeListener)\n        }\n\n        mDaySpinner?.run {\n            maxValue = maxCalendar.get(Calendar.DAY_OF_MONTH)\n            minValue = minCalendar.get(Calendar.DAY_OF_MONTH)\n            value = calendar.get(Calendar.DAY_OF_MONTH)\n            isFocusable = true\n            isFocusableInTouchMode = true\n            formatter = DateTimeConfig.formatter\n            descendantFocusability = NumberPicker.FOCUS_BLOCK_DESCENDANTS\n            setOnValueChangedListener(onChangeListener)\n        }\n\n        mHourSpinner?.run {\n            maxValue = maxCalendar.get(Calendar.HOUR_OF_DAY)\n            minValue = minCalendar.get(Calendar.HOUR_OF_DAY)\n            isFocusable = true\n            isFocusableInTouchMode = true\n            value = calendar.get(Calendar.HOUR_OF_DAY)\n            formatter = DateTimeConfig.formatter\n            descendantFocusability = NumberPicker.FOCUS_BLOCK_DESCENDANTS\n            setOnValueChangedListener(onChangeListener)\n        }\n\n        mMinuteSpinner?.run {\n            maxValue = maxCalendar.get(Calendar.MINUTE)\n            minValue = minCalendar.get(Calendar.MINUTE)\n            isFocusable = true\n            isFocusableInTouchMode = true\n            value = calendar.get(Calendar.MINUTE)\n            formatter = DateTimeConfig.formatter\n            descendantFocusability = NumberPicker.FOCUS_BLOCK_DESCENDANTS\n            setOnValueChangedListener(onChangeListener)\n        }\n\n        mSecondSpinner?.run {\n            maxValue = maxCalendar.get(Calendar.SECOND)\n            minValue = minCalendar.get(Calendar.SECOND)\n            isFocusable = true\n            isFocusableInTouchMode = true\n            value = calendar.get(Calendar.SECOND)\n            formatter = DateTimeConfig.formatter\n            descendantFocusability = NumberPicker.FOCUS_BLOCK_DESCENDANTS\n            setOnValueChangedListener(onChangeListener)\n        }\n        return this\n    }\n\n\n    private val onChangeListener = NumberPicker.OnValueChangeListener { view, old, new ->\n        applyDateData()\n        limitMaxAndMin()\n        onDateTimeChanged()\n    }\n\n    /**\n     * \xe5\x90\x8c\xe6\xad\xa5\xe6\x95\xb0\xe6\x8d\xae\n     */\n    private fun applyDateData() {\n        calendar.clear()\n        mYearSpinner?.apply { calendar.set(Calendar.YEAR, value) }\n        mMonthSpinner?.apply { calendar.set(Calendar.MONTH, (value - 1)) }\n\n        var maxDayInMonth = getMaxDayInMonth(mYearSpinner?.value, (mMonthSpinner?.value ?: 0) - 1)\n        if (mDaySpinner?.value ?: 0 >= maxDayInMonth) {\n            mDaySpinner?.value = maxDayInMonth\n        }\n\n        mDaySpinner?.apply { calendar.set(Calendar.DAY_OF_MONTH, value) }\n        mHourSpinner?.apply { calendar.set(Calendar.HOUR_OF_DAY, value) }\n        mMinuteSpinner?.apply { calendar.set(Calendar.MINUTE, value) }\n        mSecondSpinner?.apply { calendar.set(Calendar.SECOND, value) }\n    }\n\n    /**\n     * \xe6\x97\xa5\xe6\x9c\x9f\xe5\x8f\x91\xe7\x94\x9f\xe5\x8f\x98\xe5\x8c\x96\n     */\n    private fun onDateTimeChanged() {\n        if (mOnDateTimeChangedListener != null) {\n            mOnDateTimeChangedListener?.invoke(calendar.timeInMillis)\n        }\n    }\n\n    /**\n     * \xe8\xae\xbe\xe7\xbd\xae\xe5\x85\x81\xe8\xae\xb8\xe9\x80\x89\xe6\x8b\xa9\xe7\x9a\x84\xe5\x8c\xba\xe9\x97\xb4\n     */\n    private fun limitMaxAndMin() {\n        if(calendar.timeInMillis < minCalendar.timeInMillis){\n            calendar.clear()\n            calendar.timeInMillis = minCalendar.timeInMillis\n        }\n        if(calendar.timeInMillis > maxCalendar.timeInMillis){\n            calendar.clear()\n            calendar.timeInMillis = maxCalendar.timeInMillis\n        }\n        var maxDayInMonth = getMaxDayInMonth(calendar?.get(Calendar.YEAR), calendar?.get(Calendar.MONTH))\n\n        mMonthSpinner?.apply {\n            minValue =\n                if (calendar.isSameYear(minCalendar)) minCalendar.get(Calendar.MONTH) + 1 else 1\n            maxValue =\n                if ((calendar.isSameYear(maxCalendar))) maxCalendar.get(Calendar.MONTH) + 1 else 12\n        }\n        mDaySpinner?.apply {\n            minValue =\n                if (calendar.isSameMonth(minCalendar)) minCalendar.get(Calendar.DAY_OF_MONTH) else 1\n            maxValue =\n                if (calendar.isSameMonth(maxCalendar)) maxCalendar.get(Calendar.DAY_OF_MONTH) else maxDayInMonth\n        }\n        mHourSpinner?.apply {\n            minValue =\n                if (calendar.isSameDay(minCalendar)) minCalendar.get(Calendar.HOUR_OF_DAY) else 0\n            maxValue =\n                if (calendar.isSameDay(maxCalendar)) maxCalendar.get(Calendar.HOUR_OF_DAY) else 23\n        }\n        mMinuteSpinner?.apply {\n            minValue = if (calendar.isSameHour(minCalendar)) minCalendar.get(Calendar.MINUTE) else 0\n            maxValue =\n                if (calendar.isSameHour(maxCalendar)) maxCalendar.get(Calendar.MINUTE) else 59\n        }\n        mSecondSpinner?.apply {\n            minValue =\n                if (calendar.isSameMinute(minCalendar)) minCalendar.get(Calendar.SECOND) else 0\n            maxValue =\n                if (calendar.isSameMinute(maxCalendar)) maxCalendar.get(Calendar.SECOND) else 59\n        }\n        mYearSpinner?.value = calendar.get(Calendar.YEAR)\n        mMonthSpinner?.value = calendar.get(Calendar.MONTH) + 1\n        mDaySpinner?.value = calendar.get(Calendar.DAY_OF_MONTH)\n        mHourSpinner?.value = calendar.get(Calendar.HOUR_OF_DAY)\n        mMinuteSpinner?.value = calendar.get(Calendar.MINUTE)\n        mSecondSpinner?.value = calendar.get(Calendar.SECOND)\n\n        if (mDaySpinner?.value ?: 0 >= maxDayInMonth) {\n            mDaySpinner?.value = maxDayInMonth\n        }\n\n        setWrapSelectorWheel(wrapSelectorWheelTypes, wrapSelectorWheel)\n    }\n\n\n    override fun setDefaultMillisecond(time: Long) {\n        if (time == 0L) return\n        calendar.clear()\n        calendar.timeInMillis = time\n        limitMaxAndMin()\n        onDateTimeChanged()\n    }\n\n    override fun setMinMillisecond(time: Long) {\n        if (time == 0L) return\n        if (maxCalendar?.timeInMillis in 1 until time) return\n        if (minCalendar == null)\n            minCalendar = Calendar.getInstance()\n        minCalendar?.timeInMillis = time\n        mYearSpinner?.minValue = minCalendar?.get(Calendar.YEAR)\n\n        setDefaultMillisecond(calendar.timeInMillis)\n    }\n\n    override fun setMaxMillisecond(time: Long) {\n        if (time == 0L) return\n        if (minCalendar?.timeInMillis > 0L && time < minCalendar?.timeInMillis) return\n        if (maxCalendar == null)\n            maxCalendar = Calendar.getInstance()\n        maxCalendar?.timeInMillis = time\n\n        mYearSpinner?.maxValue =\n            maxCalendar?.get(Calendar.YEAR)\n\n        setDefaultMillisecond(calendar.timeInMillis)\n    }\n\n\n    override fun setWrapSelectorWheel(types: MutableList<Int>?, wrapSelector: Boolean) {\n        this.wrapSelectorWheelTypes = types\n        this.wrapSelectorWheel = wrapSelector\n        if (wrapSelectorWheelTypes == null || wrapSelectorWheelTypes!!.isEmpty()) {\n            wrapSelectorWheelTypes = mutableListOf()\n            wrapSelectorWheelTypes!!.add(YEAR)\n            wrapSelectorWheelTypes!!.add(MONTH)\n            wrapSelectorWheelTypes!!.add(DAY)\n            wrapSelectorWheelTypes!!.add(HOUR)\n            wrapSelectorWheelTypes!!.add(MIN)\n            wrapSelectorWheelTypes!!.add(SECOND)\n        }\n\n        wrapSelectorWheelTypes!!.apply {\n            for (type in this) {\n                when (type) {\n                    YEAR -> mYearSpinner?.run { wrapSelectorWheel = wrapSelector }\n                    MONTH -> mMonthSpinner?.run { wrapSelectorWheel = wrapSelector }\n                    DAY -> mDaySpinner?.run { wrapSelectorWheel = wrapSelector }\n                    HOUR -> mHourSpinner?.run { wrapSelectorWheel = wrapSelector }\n                    MIN -> mMinuteSpinner?.run { wrapSelectorWheel = wrapSelector }\n                    SECOND -> mSecondSpinner?.run { wrapSelectorWheel = wrapSelector }\n                }\n            }\n        }\n    }\n\n\n    override fun setOnDateTimeChangedListener(callback: ((Long) -> Unit)?) {\n        mOnDateTimeChangedListener = callback\n        onDateTimeChanged()\n    }\n\n    override fun getMillisecond(): Long {\n        return calendar.timeInMillis\n    }\n}\n'