b'package droidninja.filepicker.utils\n\nimport android.content.ContentUris\nimport android.content.Context\nimport android.net.Uri\nimport android.os.Build\nimport android.os.Environment\nimport android.provider.DocumentsContract\nimport android.provider.MediaStore\nimport androidx.annotation.WorkerThread\nimport java.net.URISyntaxException\n\nobject ContentUriUtils {\n    /**\n     * make sure to use this getFilePath method from worker thread\n     */\n    @WorkerThread\n    @Throws(URISyntaxException::class)\n    fun getFilePath(context: Context, fileUri: Uri): String? {\n        var uri = fileUri\n        var selection: String? = null\n        var selectionArgs: Array<String>? = null\n        // Uri is different in versions after KITKAT (Android 4.4), we need to\n        if (Build.VERSION.SDK_INT >= 19 && DocumentsContract.isDocumentUri(context.applicationContext, uri)) {\n            if (isExternalStorageDocument(uri)) {\n                val docId = DocumentsContract.getDocumentId(uri)\n                val split = docId.split(":").toTypedArray()\n                return Environment.getExternalStorageDirectory().toString() + "/" + split[1]\n            } else if (isDownloadsDocument(uri)) {\n                val id = DocumentsContract.getDocumentId(uri)\n                uri = ContentUris.withAppendedId(\n                        Uri.parse("content://downloads/public_downloads"), java.lang.Long.valueOf(id))\n            } else if (isMediaDocument(uri)) {\n                val docId = DocumentsContract.getDocumentId(uri)\n                val split = docId.split(":").toTypedArray()\n                val type = split[0]\n                if ("image" == type) {\n                    uri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI\n                } else if ("video" == type) {\n                    uri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI\n                } else if ("audio" == type) {\n                    uri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI\n                }\n                selection = "_id=?"\n                selectionArgs = arrayOf(\n                        split[1]\n                )\n            }\n        }\n        if ("content".equals(uri.scheme, ignoreCase = true)) {\n            if (isGooglePhotosUri(uri)) {\n                return uri.lastPathSegment\n            }\n            val projection = arrayOf(\n                    MediaStore.Images.Media.DATA\n            )\n            try {\n                val cursor = context.contentResolver?.query(uri, projection, selection, selectionArgs, null)\n                var path: String? = null\n                if (cursor != null) {\n                    val column_index = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)\n                    if (cursor.moveToFirst()) {\n                        path = cursor.getString(column_index)\n                        cursor.close()\n                    }\n                }\n                return path\n            } catch (e: Exception) {\n                e.printStackTrace()\n            }\n        } else if ("file".equals(uri.scheme, ignoreCase = true)) {\n            return uri.path\n        }\n        return null\n    }\n\n    fun isExternalStorageDocument(uri: Uri): Boolean {\n        return "com.android.externalstorage.documents" == uri.authority\n    }\n\n    fun isDownloadsDocument(uri: Uri): Boolean {\n        return "com.android.providers.downloads.documents" == uri.authority\n    }\n\n    fun isMediaDocument(uri: Uri): Boolean {\n        return "com.android.providers.media.documents" == uri.authority\n    }\n\n    fun isGooglePhotosUri(uri: Uri): Boolean {\n        return "com.google.android.apps.photos.content" == uri.authority\n    }\n}'