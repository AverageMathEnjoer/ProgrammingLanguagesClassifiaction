b'{-# LANGUAGE FlexibleInstances #-}\n{-# LANGUAGE GADTs #-}\n{-# LANGUAGE UndecidableInstances #-}\n\nmodule Control.Monad.Trans.Crtn.Logger where\n\nimport Control.Monad (void)\nimport Control.Monad.Trans (MonadTrans (lift))\nimport Control.Monad.Trans.Crtn (request)\nimport Control.Monad.Trans.Crtn.Object\n  ( Arg (..),\n    CObjT,\n    SObjT,\n  )\n\n-------------------------\n-- Logging monad\n-------------------------\n\nclass (Monad m) => MonadLog m where\n  scribe :: String -> m ()\n\ninstance (MonadTrans t, MonadLog m, Monad (t m)) => MonadLog (t m) where\n  scribe = lift . scribe\n\ninstance MonadLog IO where\n  scribe = putStrLn\n\ndata LogOp i o where\n  WriteLog :: LogOp String ()\n\ntype LogInput = Arg LogOp\n\ntype LogServer m r = SObjT LogOp m r\n\ntype LogClient m r = CObjT LogOp m r\n\n-- |\nwriteLog :: (Monad m) => String -> LogClient m ()\nwriteLog msg =\n  void $ request (Arg WriteLog msg)\n'