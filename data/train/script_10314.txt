b'package io.github.javiewer.activity;\n\nimport android.annotation.SuppressLint;\nimport android.content.Context;\nimport android.graphics.Bitmap;\nimport android.graphics.drawable.Drawable;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.os.Parcelable;\nimport androidx.viewpager.widget.PagerAdapter;\nimport androidx.viewpager.widget.ViewPager;\nimport androidx.appcompat.app.ActionBar;\nimport androidx.appcompat.widget.Toolbar;\nimport android.view.GestureDetector;\nimport android.view.LayoutInflater;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.MotionEvent;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.view.animation.AccelerateInterpolator;\nimport android.view.animation.AlphaAnimation;\nimport android.view.animation.Animation;\nimport android.view.animation.DecelerateInterpolator;\nimport android.widget.ImageView;\nimport android.widget.ProgressBar;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.bumptech.glide.Glide;\nimport com.bumptech.glide.load.resource.drawable.GlideDrawable;\nimport com.bumptech.glide.request.animation.GlideAnimation;\nimport com.bumptech.glide.request.target.SimpleTarget;\n\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\n\nimport butterknife.BindView;\nimport butterknife.ButterKnife;\nimport io.github.javiewer.JAViewer;\nimport io.github.javiewer.R;\nimport io.github.javiewer.adapter.item.Movie;\n\npublic class GalleryActivity extends SecureActivity {\n\n    private static final boolean AUTO_HIDE = true;\n    private static final int AUTO_HIDE_DELAY_MILLIS = 3000;\n    private static final int UI_ANIMATION_DELAY = 300;\n    private final Handler mHideHandler = new Handler();\n    @BindView(R.id.gallery_pager)\n    public ViewPager mPager;\n    private final Runnable mHidePart2Runnable = new Runnable() {\n        @SuppressLint("InlinedApi")\n        @Override\n        public void run() {\n            mPager.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LOW_PROFILE\n                    | View.SYSTEM_UI_FLAG_FULLSCREEN\n                    | View.SYSTEM_UI_FLAG_LAYOUT_STABLE\n                    | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY\n                    | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION\n                    | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION);\n        }\n    };\n    @BindView(R.id.toolbar_gallery)\n    public Toolbar mToolbar;\n    Animation fadeIn = new AlphaAnimation(0, 1);\n    private final Runnable mShowPart2Runnable = new Runnable() {\n        @Override\n        public void run() {\n            // Delayed display of UI elements\n            ActionBar actionBar = getSupportActionBar();\n            if (actionBar != null) {\n                actionBar.show();\n            }\n            mToolbar.startAnimation(fadeIn);\n\n            //mControlsView.setVisibility(View.VISIBLE);\n        }\n    };\n    Animation fadeOut = new AlphaAnimation(1, 0);\n    GestureDetector detector;\n    private boolean mVisible;\n    private final Runnable mHideRunnable = new Runnable() {\n        @Override\n        public void run() {\n            hide();\n        }\n    };\n    private String[] imageUrls;\n    private Movie movie;\n\n    {\n        fadeIn.setInterpolator(new DecelerateInterpolator()); //add this\n        fadeIn.setDuration(150);\n    }\n\n    {\n        fadeOut.setInterpolator(new AccelerateInterpolator()); //and this\n        fadeOut.setDuration(150);\n    }\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.activity_gallery);\n\n        ButterKnife.bind(this);\n\n        setSupportActionBar(mToolbar);\n        getSupportActionBar().setDisplayHomeAsUpEnabled(true);\n        getSupportActionBar().setDisplayShowHomeEnabled(true);\n\n        detector = new GestureDetector(this, new GestureDetector.SimpleOnGestureListener() {\n            @Override\n            public boolean onSingleTapUp(MotionEvent e) {\n                toggle();\n                return true;\n            }\n        });\n        mPager.setOnTouchListener(new View.OnTouchListener() {\n            @Override\n            public boolean onTouch(View v, MotionEvent event) {\n                detector.onTouchEvent(event);\n                return false;\n            }\n        });\n\n        {\n            ActionBar actionBar = getSupportActionBar();\n            if (actionBar != null) {\n                actionBar.hide();\n            }\n            mToolbar.startAnimation(fadeOut);\n            //mControlsView.setVisibility(View.GONE);\n            mVisible = false;\n            mHidePart2Runnable.run();\n        }\n\n        Bundle bundle = this.getIntent().getExtras();\n\n        mPager.setAdapter(new ImageAdapter(this, imageUrls = bundle.getStringArray("urls"), this));\n        mPager.setCurrentItem(bundle.getInt("position"));\n        mPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {\n            @Override\n            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {\n                updateIndicator();\n            }\n\n            @Override\n            public void onPageSelected(int position) {\n            }\n\n            @Override\n            public void onPageScrollStateChanged(int state) {\n            }\n        });\n        updateIndicator();\n\n        movie = (Movie) bundle.getSerializable("movie");\n    }\n\n    private void updateIndicator() {\n        delayedHide(AUTO_HIDE_DELAY_MILLIS);\n        getSupportActionBar().setTitle((mPager.getCurrentItem() + 1) + " / " + (imageUrls.length));\n        //mTextIndicator.setText((mPager.getCurrentItem() + 1) + " / " + (imageUrls.length));\n    }\n\n    public void toggle() {\n        if (mVisible) {\n            hide();\n        } else {\n            show();\n            if (AUTO_HIDE) {\n                delayedHide(AUTO_HIDE_DELAY_MILLIS);\n            }\n        }\n    }\n\n    private void hide() {\n        hide(UI_ANIMATION_DELAY);\n    }\n\n    private void hide(int delay) {\n        // Hide UI first\n        ActionBar actionBar = getSupportActionBar();\n        if (actionBar != null) {\n            actionBar.hide();\n        }\n        mToolbar.startAnimation(fadeOut);\n        //mControlsView.setVisibility(View.GONE);\n        mVisible = false;\n\n        // Schedule a runnable to remove the status and navigation bar after a delay\n        mHideHandler.removeCallbacks(mShowPart2Runnable);\n        mHideHandler.postDelayed(mHidePart2Runnable, delay);\n    }\n\n    @SuppressLint("InlinedApi")\n    private void show() {\n        // Show the system bar\n        mPager.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\n                | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION);\n        mVisible = true;\n\n        // Schedule a runnable to display UI elements after a delay\n        mHideHandler.removeCallbacks(mHidePart2Runnable);\n        mHideHandler.postDelayed(mShowPart2Runnable, UI_ANIMATION_DELAY);\n    }\n\n    private void delayedHide(int delayMillis) {\n        mHideHandler.removeCallbacks(mHideRunnable);\n        mHideHandler.postDelayed(mHideRunnable, delayMillis);\n    }\n\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        getMenuInflater().inflate(R.menu.gallery, menu);\n        return super.onCreateOptionsMenu(menu);\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        switch (item.getItemId()) {\n            case R.id.action_save:\n                final File dir = new File(\n                        JAViewer.getStorageDir(),\n                        String.format("/movies/[%s] %s", movie.code, movie.title).replaceAll("^(?!(COM[0-9]|LPT[0-9]|CON|PRN|AUX|CLOCK\\\\$|NUL)$)[^./\\\\\\\\:*?\\u200C\\u200B\\"<>|]+$", "-")\n                );\n                dir.mkdirs();\n                final int index = mPager.getCurrentItem();\n                Glide\n                        .with(this)\n                        .load(imageUrls[index])\n                        .asBitmap()\n                        .into(new SimpleTarget<Bitmap>() {\n                            @Override\n                            public void onResourceReady(Bitmap resource, GlideAnimation<? super Bitmap> glideAnimation) {\n                                try {\n                                    OutputStream os = new BufferedOutputStream(new FileOutputStream(new File(dir, (index + 1) + ".jpeg")));\n                                    resource.compress(Bitmap.CompressFormat.JPEG, 100, os);\n                                    os.flush();\n                                    os.close();\n                                    Toast.makeText(GalleryActivity.this, "\xe6\x88\x90\xe5\x8a\x9f\xe4\xbf\x9d\xe5\xad\x98\xe5\x88\xb0 " + dir, Toast.LENGTH_SHORT).show();\n                                } catch (IOException e) {\n                                    onLoadFailed(e, null);\n                                }\n                            }\n                        });\n                return true;\n        }\n\n        return super.onOptionsItemSelected(item);\n    }\n\n    @Override\n    public boolean onSupportNavigateUp() {\n        onBackPressed();\n        return true;\n    }\n\n    private static class ImageAdapter extends PagerAdapter {\n\n        private final String[] imageUrls;\n        private GalleryActivity mActivity;\n        private LayoutInflater inflater;\n        //private DisplayImageOptions options;\n\n        ImageAdapter(Context context, String[] imageUrls, GalleryActivity mActivity) {\n            inflater = LayoutInflater.from(context);\n            this.mActivity = mActivity;\n            this.imageUrls = imageUrls;\n        }\n\n        @Override\n        public void destroyItem(ViewGroup container, int position, Object object) {\n            container.removeView((View) object);\n        }\n\n        @Override\n        public int getCount() {\n            return imageUrls.length;\n        }\n\n        @Override\n        public Object instantiateItem(ViewGroup view, int position) {\n            View imageLayout = inflater.inflate(R.layout.content_gallery, view, false);\n            final ImageView imageView = imageLayout.findViewById(R.id.image);\n            final ProgressBar progressBar = imageLayout.findViewById(R.id.progress_bar);\n            final TextView textView = imageLayout.findViewById(R.id.gallery_text_error);\n\n            imageView.setOnClickListener(new View.OnClickListener() {\n                @Override\n                public void onClick(View view) {\n                    mActivity.toggle();\n                }\n            });\n\n            Glide.with(imageView.getContext().getApplicationContext())\n                    .load(imageUrls[position])\n                    .into(new SimpleTarget<GlideDrawable>() {\n                        @Override\n                        public void onResourceReady(GlideDrawable resource, GlideAnimation<? super GlideDrawable> glideAnimation) {\n                            progressBar.setVisibility(View.GONE);\n                            imageView.setImageDrawable(resource);\n                        }\n\n                        @Override\n                        public void onLoadFailed(Exception e, Drawable errorDrawable) {\n                            super.onLoadFailed(e, errorDrawable);\n                            textView.setText("\xe5\x9b\xbe\xe7\x89\x87\xe5\x8a\xa0\xe8\xbd\xbd\xe5\xa4\xb1\xe8\xb4\xa5 :(\\n" + e.getMessage());\n                        }\n                    });\n\n            view.addView(imageLayout, 0);\n            return imageLayout;\n        }\n\n        @Override\n        public boolean isViewFromObject(View view, Object object) {\n            return view.equals(object);\n        }\n\n        @Override\n        public void restoreState(Parcelable state, ClassLoader loader) {\n        }\n\n        @Override\n        public Parcelable saveState() {\n            return null;\n        }\n    }\n}\n'