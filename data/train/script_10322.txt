b'{-# LANGUAGE GeneralizedNewtypeDeriving #-}\nmodule Database.Beam.Backend.SQL.Types where\n\nimport qualified Data.Aeson as Json\nimport           Data.Bits\n\ndata SqlNull = SqlNull\n  deriving (Show, Eq, Ord, Bounded, Enum)\nnewtype SqlBitString = SqlBitString Integer\n  deriving (Show, Eq, Ord, Enum, Bits)\n\nnewtype SqlSerial a = SqlSerial { unSerial :: a }\n  deriving (Show, Read, Eq, Ord, Num, Integral, Real, Enum)\n\ninstance Json.FromJSON a => Json.FromJSON (SqlSerial a) where\n  parseJSON a = SqlSerial <$> Json.parseJSON a\ninstance Json.ToJSON a => Json.ToJSON (SqlSerial a) where\n  toJSON (SqlSerial a) = Json.toJSON a\n  toEncoding (SqlSerial a) = Json.toEncoding a\n\n'