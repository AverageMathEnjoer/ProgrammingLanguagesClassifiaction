b'/*\n * Copyright (C) 2015 Naman Dwivedi\n *\n * Licensed under the GNU General Public License v3\n *\n * This is free software: you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n */\n\npackage com.naman14.timber.fragments;\n\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.graphics.Color;\nimport android.os.Bundle;\nimport android.preference.ListPreference;\nimport android.preference.Preference;\nimport android.preference.PreferenceFragment;\nimport android.preference.SwitchPreference;\nimport android.view.View;\n\nimport com.afollestad.appthemeengine.ATE;\nimport com.afollestad.appthemeengine.Config;\nimport com.afollestad.appthemeengine.prefs.ATECheckBoxPreference;\nimport com.afollestad.appthemeengine.prefs.ATEColorPreference;\nimport com.afollestad.materialdialogs.color.ColorChooserDialog;\nimport com.naman14.timber.R;\nimport com.naman14.timber.activities.DonateActivity;\nimport com.naman14.timber.activities.SettingsActivity;\nimport com.naman14.timber.dialogs.LastFmLoginDialog;\nimport com.naman14.timber.lastfmapi.LastFmClient;\nimport com.naman14.timber.utils.Constants;\nimport com.naman14.timber.utils.NavigationUtils;\nimport com.naman14.timber.utils.PreferencesUtility;\n\npublic class SettingsFragment extends PreferenceFragment implements SharedPreferences.OnSharedPreferenceChangeListener {\n\n    private static final String NOW_PLAYING_SELECTOR = "now_playing_selector";\n    private static final String LASTFM_LOGIN = "lastfm_login";\n\n    private static final String LOCKSCREEN = "show_albumart_lockscreen";\n    private static final String XPOSED = "toggle_xposed_trackselector";\n\n    private static final String KEY_ABOUT = "preference_about";\n    private static final String KEY_SOURCE = "preference_source";\n    private static final String KEY_THEME = "theme_preference";\n    private static final String TOGGLE_ANIMATIONS = "toggle_animations";\n    private static final String TOGGLE_SYSTEM_ANIMATIONS = "toggle_system_animations";\n    private static final String KEY_START_PAGE = "start_page_preference";\n    private boolean lastFMlogedin;\n\n    private Preference nowPlayingSelector,  lastFMlogin, lockscreen, xposed;\n\n    private SwitchPreference toggleAnimations;\n    private ListPreference themePreference, startPagePreference;\n    private PreferencesUtility mPreferences;\n    private String mAteKey;\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        addPreferencesFromResource(R.xml.preferences);\n\n        mPreferences = PreferencesUtility.getInstance(getActivity());\n\n        lockscreen = findPreference(LOCKSCREEN);\n        nowPlayingSelector = findPreference(NOW_PLAYING_SELECTOR);\n\n        xposed = findPreference(XPOSED);\n\n        lastFMlogin = findPreference(LASTFM_LOGIN);\n        updateLastFM();\n//        themePreference = (ListPreference) findPreference(KEY_THEME);\n        startPagePreference = (ListPreference) findPreference(KEY_START_PAGE);\n\n        nowPlayingSelector.setIntent(NavigationUtils.getNavigateToStyleSelectorIntent(getActivity(), Constants.SETTINGS_STYLE_SELECTOR_NOWPLAYING));\n\n        setPreferenceClickListeners();\n\n    }\n\n    @Override\n    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences,\n                                          String key) {\n    }\n\n    private void setPreferenceClickListeners() {\n\n//        themePreference.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {\n//            @Override\n//            public boolean onPreferenceChange(Preference preference, Object newValue) {\n//                Intent i = getActivity().getBaseContext().getPackageManager().getLaunchIntentForPackage(getActivity().getBaseContext().getPackageName());\n//                i.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n//                startActivity(i);\n//                return true;\n//            }\n//        });\n\n        startPagePreference.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {\n            @Override\n            public boolean onPreferenceChange(Preference preference, Object newValue) {\n                switch ((String) newValue) {\n                    case "last_opened":\n                        mPreferences.setLastOpenedAsStartPagePreference(true);\n                        break;\n                    case "songs":\n                        mPreferences.setLastOpenedAsStartPagePreference(false);\n                        mPreferences.setStartPageIndex(0);\n                        break;\n                    case "albums":\n                        mPreferences.setLastOpenedAsStartPagePreference(false);\n                        mPreferences.setStartPageIndex(1);\n                        break;\n                    case "artists":\n                        mPreferences.setLastOpenedAsStartPagePreference(false);\n                        mPreferences.setStartPageIndex(2);\n                        break;\n                }\n                return true;\n            }\n        });\n\n        Intent restoreIntent = new Intent(getActivity(), DonateActivity.class);\n        restoreIntent.putExtra("title", "Restoring purchases..");\n        restoreIntent.setAction("restore");\n\n        findPreference("support_development").setIntent(new Intent(getActivity(), DonateActivity.class));\n        findPreference("restore_purchases").setIntent(restoreIntent);\n\n        lockscreen.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {\n            @Override\n            public boolean onPreferenceChange(Preference preference, Object newValue) {\n                Bundle extras = new Bundle();\n                extras.putBoolean("lockscreen",(boolean)newValue);\n                mPreferences.updateService(extras);\n                return true;\n            }\n        });\n\n        xposed.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {\n            @Override\n            public boolean onPreferenceChange(Preference preference, Object newValue) {\n                Bundle extras = new Bundle();\n                extras.putBoolean("xtrack",(boolean)newValue);\n                mPreferences.updateService(extras);\n                return true;\n            }\n        });\n\n        lastFMlogin.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {\n            @Override\n            public boolean onPreferenceClick(Preference preference) {\n                if (lastFMlogedin) {\n                    LastFmClient.getInstance(getActivity()).logout();\n                    Bundle extras = new Bundle();\n                    extras.putString("lf_token","logout");\n                    extras.putString("lf_user",null);\n                    mPreferences.updateService(extras);\n                    updateLastFM();\n                } else {\n                    LastFmLoginDialog lastFmLoginDialog = new LastFmLoginDialog();\n                    lastFmLoginDialog.show(getChildFragmentManager(), LastFmLoginDialog.FRAGMENT_NAME);\n\n                }\n                return true;\n            }\n        });\n\n    }\n\n    @Override\n    public void onViewCreated(View view, Bundle savedInstanceState) {\n        super.onViewCreated(view, savedInstanceState);\n        invalidateSettings();\n        ATE.apply(view, mAteKey);\n    }\n\n    public void invalidateSettings() {\n        mAteKey = ((SettingsActivity) getActivity()).getATEKey();\n\n        ATEColorPreference primaryColorPref = (ATEColorPreference) findPreference("primary_color");\n        primaryColorPref.setColor(Config.primaryColor(getActivity(), mAteKey), Color.BLACK);\n        primaryColorPref.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {\n            @Override\n            public boolean onPreferenceClick(Preference preference) {\n                new ColorChooserDialog.Builder((SettingsActivity) getActivity(), R.string.primary_color)\n                        .preselect(Config.primaryColor(getActivity(), mAteKey))\n                        .show();\n                return true;\n            }\n        });\n\n        ATEColorPreference accentColorPref = (ATEColorPreference) findPreference("accent_color");\n        accentColorPref.setColor(Config.accentColor(getActivity(), mAteKey), Color.BLACK);\n        accentColorPref.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {\n            @Override\n            public boolean onPreferenceClick(Preference preference) {\n                new ColorChooserDialog.Builder((SettingsActivity) getActivity(), R.string.accent_color)\n                        .preselect(Config.accentColor(getActivity(), mAteKey))\n                        .show();\n                return true;\n            }\n        });\n\n\n        findPreference("dark_theme").setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {\n            @Override\n            public boolean onPreferenceChange(Preference preference, Object newValue) {\n                // Marks both theme configs as changed so MainActivity restarts itself on return\n                Config.markChanged(getActivity(), "light_theme");\n                Config.markChanged(getActivity(), "dark_theme");\n                // The dark_theme preference value gets saved by Android in the default PreferenceManager.\n                // It\'s used in getATEKey() of both the Activities.\n                getActivity().recreate();\n                return true;\n            }\n        });\n\n        final ATECheckBoxPreference statusBarPref = (ATECheckBoxPreference) findPreference("colored_status_bar");\n        final ATECheckBoxPreference navBarPref = (ATECheckBoxPreference) findPreference("colored_nav_bar");\n\n        statusBarPref.setChecked(Config.coloredStatusBar(getActivity(), mAteKey));\n        statusBarPref.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {\n            @Override\n            public boolean onPreferenceChange(Preference preference, Object newValue) {\n                ATE.config(getActivity(), mAteKey)\n                        .coloredStatusBar((Boolean) newValue)\n                        .apply(getActivity());\n                return true;\n            }\n        });\n\n\n        navBarPref.setChecked(Config.coloredNavigationBar(getActivity(), mAteKey));\n        navBarPref.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {\n            @Override\n            public boolean onPreferenceChange(Preference preference, Object newValue) {\n                ATE.config(getActivity(), mAteKey)\n                        .coloredNavigationBar((Boolean) newValue)\n                        .apply(getActivity());\n                return true;\n            }\n        });\n\n    }\n\n\n    public void updateLastFM() {\n        String username = LastFmClient.getInstance(getActivity()).getUsername();\n        if (username != null) {\n            lastFMlogedin = true;\n            lastFMlogin.setTitle("Logout");\n            lastFMlogin.setSummary(String.format(getString(R.string.lastfm_loged_in),username));\n        } else {\n            lastFMlogedin = false;\n            lastFMlogin.setTitle("Login");\n            lastFMlogin.setSummary(getString(R.string.lastfm_pref));\n        }\n    }\n}\n'