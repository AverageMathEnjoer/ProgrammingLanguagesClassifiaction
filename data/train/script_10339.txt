b'package droidninja.filepicker.adapters\n\nimport android.content.Context\nimport androidx.recyclerview.widget.RecyclerView\nimport android.util.DisplayMetrics\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.view.WindowManager\nimport android.widget.ImageView\nimport android.widget.TextView\n\nimport com.bumptech.glide.RequestManager\nimport com.bumptech.glide.request.RequestOptions\n\nimport java.io.File\nimport java.util.ArrayList\n\nimport droidninja.filepicker.PickerManager\nimport droidninja.filepicker.R\nimport droidninja.filepicker.models.PhotoDirectory\nimport droidninja.filepicker.utils.AndroidLifecycleUtils\n\nclass FolderGridAdapter(private val context: Context, private val glide: RequestManager, var items: List<PhotoDirectory>, private val showCamera: Boolean) : RecyclerView.Adapter<FolderGridAdapter.PhotoViewHolder>() {\n    private var imageSize: Int = 0\n    private var folderGridAdapterListener: FolderGridAdapterListener? = null\n\n    interface FolderGridAdapterListener {\n        fun onCameraClicked()\n        fun onFolderClicked(photoDirectory: PhotoDirectory)\n    }\n\n    init {\n        setColumnNumber(context, 3)\n    }\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): PhotoViewHolder {\n        val itemView = LayoutInflater.from(context).inflate(R.layout.item_folder_layout, parent, false)\n\n        return PhotoViewHolder(itemView)\n    }\n\n    override fun getItemViewType(position: Int): Int {\n        return if (showCamera)\n            if (position == 0) ITEM_TYPE_CAMERA else ITEM_TYPE_PHOTO\n        else\n            ITEM_TYPE_PHOTO\n    }\n\n    override fun onBindViewHolder(holder: PhotoViewHolder, position: Int) {\n        if (getItemViewType(position) == ITEM_TYPE_PHOTO) {\n\n            val photoDirectory = items[if (showCamera) position - 1 else position]\n\n            if (AndroidLifecycleUtils.canLoadImage(holder.imageView.context)) {\n                glide.load(photoDirectory.getCoverPath())\n                        .apply(RequestOptions\n                                .centerCropTransform()\n                                .override(imageSize, imageSize)\n                                .placeholder(R.drawable.image_placeholder))\n                        .thumbnail(0.5f)\n                        .into(holder.imageView)\n            }\n\n            holder.folderTitle.text = photoDirectory.name\n            holder.folderCount.text = photoDirectory.medias.size.toString()\n\n            holder.itemView.setOnClickListener {\n                    folderGridAdapterListener?.onFolderClicked(photoDirectory)\n            }\n            holder.bottomOverlay.visibility = View.VISIBLE\n        } else {\n            holder.imageView.setImageResource(PickerManager.cameraDrawable)\n            holder.itemView.setOnClickListener {\n                folderGridAdapterListener?.onCameraClicked()\n            }\n            holder.bottomOverlay.visibility = View.GONE\n        }\n    }\n\n    fun setData(newItems: List<PhotoDirectory>) {\n        this.items = newItems\n    }\n\n    private fun setColumnNumber(context: Context, columnNum: Int) {\n        val wm = context.getSystemService(Context.WINDOW_SERVICE) as WindowManager\n        val metrics = DisplayMetrics()\n        wm.defaultDisplay.getMetrics(metrics)\n        val widthPixels = metrics.widthPixels\n        imageSize = widthPixels / columnNum\n    }\n\n    override fun getItemCount(): Int {\n        return if (showCamera) items.size + 1 else items.size\n    }\n\n    fun setFolderGridAdapterListener(onClickListener: FolderGridAdapterListener) {\n        this.folderGridAdapterListener = onClickListener\n    }\n\n    class PhotoViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n\n        var imageView: ImageView\n        var folderTitle: TextView\n        var folderCount: TextView\n        var bottomOverlay: View\n        var selectBg: View\n\n        init {\n            imageView = itemView.findViewById<View>(R.id.iv_photo) as ImageView\n            folderTitle = itemView.findViewById<View>(R.id.folder_title) as TextView\n            folderCount = itemView.findViewById<View>(R.id.folder_count) as TextView\n            bottomOverlay = itemView.findViewById(R.id.bottomOverlay)\n            selectBg = itemView.findViewById(R.id.transparent_bg)\n        }\n    }\n\n    companion object {\n\n        val ITEM_TYPE_CAMERA = 100\n        val ITEM_TYPE_PHOTO = 101\n    }\n}\n'