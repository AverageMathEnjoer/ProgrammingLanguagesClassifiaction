b'\xef\xbb\xbf//  Copyright 2019 Google Inc. All Rights Reserved.\n//\n//  Licensed under the Apache License, Version 2.0 (the "License");\n//  you may not use this file except in compliance with the License.\n//  You may obtain a copy of the License at\n//\n//  http://www.apache.org/licenses/LICENSE-2.0\n//\n//  Unless required by applicable law or agreed to in writing, software\n//  distributed under the License is distributed on an "AS IS" BASIS,\n//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n//  See the License for the specific language governing permissions and\n//  limitations under the License.\n\nusing System;\n\nnamespace Rubeus.Ndr.Marshal\n{\n    /// <summary>\n    /// Class to represent a 16 bit enumerated type.\n    /// </summary>\n    public struct NdrEnum16 : IFormattable, IEquatable<NdrEnum16>\n    {\n        /// <summary>\n        /// Value of the structure.\n        /// </summary>\n        public readonly int Value;\n\n        /// <summary>\n        /// Constructor.\n        /// </summary>\n        /// <param name="value"></param>\n        public NdrEnum16(int value)\n        {\n            Value = value;\n        }\n\n        /// <summary>\n        /// Constructor.\n        /// </summary>\n        /// <param name="value">The value to construct from.</param>\n        public static implicit operator NdrEnum16(int value)\n        {\n            return new NdrEnum16(value);\n        }\n\n        /// <summary>\n        /// Constructor.\n        /// </summary>\n        /// <param name="value">The value to construct from.</param>\n        public static implicit operator int(NdrEnum16 value)\n        {\n            return value.Value;\n        }\n\n        /// <summary>\n        /// Constructor.\n        /// </summary>\n        /// <param name="value">The value to construct from.</param>\n        public static explicit operator NdrEnum16(uint value)\n        {\n            return new NdrEnum16((int)value);\n        }\n\n        /// <summary>\n        /// Constructor.\n        /// </summary>\n        /// <param name="value">The value to construct from.</param>\n        public static explicit operator long(NdrEnum16 value)\n        {\n            return value.Value;\n        }\n\n        /// <summary>\n        /// Constructor.\n        /// </summary>\n        /// <param name="value">The value to construct from.</param>\n        public static explicit operator NdrEnum16(long value)\n        {\n            return new NdrEnum16((int)value);\n        }\n\n        /// <summary>\n        /// Constructor.\n        /// </summary>\n        /// <param name="value">The value to construct from.</param>\n        public static explicit operator NdrEnum16(Enum value)\n        {\n            Type enum_type = value.GetType().GetEnumUnderlyingType();\n            if (enum_type == typeof(uint))\n            {\n                return (NdrEnum16)Convert.ToUInt32(value);\n            }\n            return new NdrEnum16(Convert.ToInt32(value));\n        }\n\n        /// <summary>\n        /// Constructor.\n        /// </summary>\n        /// <param name="value">The value to construct from.</param>\n        public static explicit operator uint(NdrEnum16 value)\n        {\n            return (uint)value.Value;\n        }\n\n        /// <summary>\n        /// Equality operator.\n        /// </summary>\n        /// <param name="left">The left value.</param>\n        /// <param name="right">The right value.</param>\n        /// <returns>True if the values are equal.</returns>\n        public static bool operator ==(NdrEnum16 left, NdrEnum16 right)\n        {\n            return left.Equals(right);\n        }\n\n        /// <summary>\n        /// Inequality operator.\n        /// </summary>\n        /// <param name="left">The left value.</param>\n        /// <param name="right">The right value.</param>\n        /// <returns>True if the values are not-equal.</returns>\n        public static bool operator !=(NdrEnum16 left, NdrEnum16 right)\n        {\n            return !left.Equals(right);\n        }\n\n        /// <summary>\n        /// Overridden ToString.\n        /// </summary>\n        /// <returns>The value as a string.</returns>\n        public override string ToString()\n        {\n            return Value.ToString();\n        }\n\n        /// <summary>\n        /// ToString method.\n        /// </summary>\n        /// <param name="format">The formatting string.</param>\n        /// <returns>The value as a string.</returns>\n        public string ToString(string format)\n        {\n            return Value.ToString(format);\n        }\n\n        /// <summary>\n        /// IFormattable ToString.\n        /// </summary>\n        /// <param name="format">The formatting string.</param>\n        /// <param name="formatProvider">Formatting provider.</param>\n        /// <returns>The value as a string.</returns>\n        public string ToString(string format, IFormatProvider formatProvider)\n        {\n            return Value.ToString(format, formatProvider);\n        }\n\n        /// <summary>\n        /// Equals operator.\n        /// </summary>\n        /// <param name="other">The other enum16.</param>\n        /// <returns>True if the values are equal.</returns>\n        public bool Equals(NdrEnum16 other)\n        {\n            return Value == other.Value;\n        }\n\n        /// <summary>\n        /// Compare \n        /// </summary>\n        /// <param name="obj"></param>\n        /// <returns></returns>\n        public override bool Equals(object obj)\n        {\n            if (obj is NdrEnum16 e)\n            {\n                return Equals(e);\n            }\n            return false;\n        }\n\n        /// <summary>\n        /// Overridden GetHashCode.\n        /// </summary>\n        /// <returns>The hash code of the enumeration.</returns>\n        public override int GetHashCode()\n        {\n            return Value.GetHashCode();\n        }\n    }\n}\n'