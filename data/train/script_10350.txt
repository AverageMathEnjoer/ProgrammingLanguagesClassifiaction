b'package effectivejava.chapter7.item45;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.Stream;\nimport static java.util.stream.Collectors.*;\n\n// Generating the Cartesian product of two lists using iteration and streams (Page 209)\npublic class Card {\n    public enum Suit { SPADE, HEART, DIAMOND, CLUB }\n    public enum Rank { ACE, DEUCE, THREE, FOUR, FIVE, SIX, SEVEN,\n                       EIGHT, NINE, TEN, JACK, QUEEN, KING }\n\n    private final Suit suit;\n    private final Rank rank;\n\n    @Override public String toString() {\n        return rank + " of " + suit + "S";\n    }\n\n    public Card(Suit suit, Rank rank) {\n        this.suit = suit;\n        this.rank = rank;\n\n    }\n    private static final List<Card> NEW_DECK = newDeck();\n\n    // Iterative Cartesian product computation\n    private static List<Card> newDeck() {\n        List<Card> result = new ArrayList<>();\n        for (Suit suit : Suit.values())\n            for (Rank rank : Rank.values())\n                result.add(new Card(suit, rank));\n        return result;\n    }\n\n//    // Stream-based Cartesian product computation\n//    private static List<Card> newDeck() {\n//        return Stream.of(Suit.values())\n//                .flatMap(suit ->\n//                        Stream.of(Rank.values())\n//                                .map(rank -> new Card(suit, rank)))\n//                .collect(toList());\n//    }\n\n    public static void main(String[] args) {\n        System.out.println(NEW_DECK);\n    }\n}\n'