b'package droidninja.filepicker.adapters\n\nimport android.net.Uri\nimport androidx.recyclerview.widget.RecyclerView\n\nimport java.util.ArrayList\n\nimport droidninja.filepicker.PickerManager\nimport droidninja.filepicker.models.BaseFile\n\nabstract class SelectableAdapter<VH : RecyclerView.ViewHolder, T : BaseFile>(var items: List<T>, var selectedPaths: MutableList<Uri> = mutableListOf()) : RecyclerView.Adapter<VH>(), Selectable<T> {\n\n    override val selectedItemCount: Int\n        get() = selectedPaths.size\n    /**\n     * Indicates if the item at position where is selected\n     *\n     * @param photo Media of the item to check\n     * @return true if the item is selected, false otherwise\n     */\n    override fun isSelected(item: T): Boolean {\n        return selectedPaths.contains(item.path)\n    }\n\n    /**\n     * Toggle the selection status of the item at a given position\n     *\n     * @param photo Media of the item to toggle the selection status for\n     */\n    override fun toggleSelection(item: T) {\n        if (selectedPaths.contains(item.path)) {\n            selectedPaths.remove(item.path)\n        } else {\n            selectedPaths.add(item.path)\n        }\n    }\n\n    /**\n     * Clear the selection status for all items\n     */\n    override fun clearSelection() {\n        selectedPaths.clear()\n        notifyDataSetChanged()\n    }\n\n    fun selectAll() {\n        selectedPaths.clear()\n        selectedPaths.addAll(items.map {\n            it.path\n        })\n        notifyDataSetChanged()\n    }\n\n    fun setData(items: List<T>, selectedPaths: MutableList<Uri>) {\n        this.items = items\n        this.selectedPaths = selectedPaths\n        notifyDataSetChanged()\n    }\n\n    companion object {\n\n        private val TAG = "SelectableAdapter"\n    }\n}'