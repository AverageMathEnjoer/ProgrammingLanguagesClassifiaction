b'/*\n * Copyright (C) 2015 Naman Dwivedi\n *\n * Licensed under the GNU General Public License v3\n *\n * This is free software: you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n */\n\npackage com.naman14.timber.fragments;\n\nimport android.graphics.Rect;\nimport android.os.AsyncTask;\nimport android.os.Bundle;\nimport androidx.fragment.app.Fragment;\nimport androidx.recyclerview.widget.GridLayoutManager;\nimport androidx.recyclerview.widget.RecyclerView;\nimport android.view.LayoutInflater;\nimport android.view.Menu;\nimport android.view.MenuInflater;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.view.ViewGroup;\n\nimport com.naman14.timber.R;\nimport com.naman14.timber.adapters.ArtistAdapter;\nimport com.naman14.timber.dataloaders.ArtistLoader;\nimport com.naman14.timber.models.Artist;\nimport com.naman14.timber.utils.PreferencesUtility;\nimport com.naman14.timber.utils.SortOrder;\nimport com.naman14.timber.widgets.BaseRecyclerView;\nimport com.naman14.timber.widgets.DividerItemDecoration;\nimport com.naman14.timber.widgets.FastScroller;\n\nimport java.util.List;\n\npublic class ArtistFragment extends Fragment {\n\n    private ArtistAdapter mAdapter;\n    private BaseRecyclerView recyclerView;\n    private GridLayoutManager layoutManager;\n    private RecyclerView.ItemDecoration itemDecoration;\n    private PreferencesUtility mPreferences;\n    private boolean isGrid;\n\n    @Override\n    public void onCreate(final Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        mPreferences = PreferencesUtility.getInstance(getActivity());\n        isGrid = mPreferences.isArtistsInGrid();\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        View rootView = inflater.inflate(\n                R.layout.fragment_recyclerview, container, false);\n\n        recyclerView =  rootView.findViewById(R.id.recyclerview);\n        FastScroller fastScroller = rootView.findViewById(R.id.fastscroller);\n        fastScroller.setRecyclerView(recyclerView);\n        recyclerView.setEmptyView(getActivity(), rootView.findViewById(R.id.list_empty), "No media found");\n\n        setLayoutManager();\n\n        if (getActivity() != null)\n            new loadArtists().execute("");\n        return rootView;\n    }\n\n    private void setLayoutManager() {\n        if (isGrid) {\n            layoutManager = new GridLayoutManager(getActivity(), 2);\n        } else {\n            layoutManager = new GridLayoutManager(getActivity(), 1);\n        }\n        recyclerView.setLayoutManager(layoutManager);\n    }\n\n    private void setItemDecoration() {\n        if (isGrid) {\n            int spacingInPixels = getActivity().getResources().getDimensionPixelSize(R.dimen.spacing_card_album_grid);\n            itemDecoration = new SpacesItemDecoration(spacingInPixels);\n        } else {\n            itemDecoration = new DividerItemDecoration(getActivity(), DividerItemDecoration.VERTICAL_LIST);\n        }\n        recyclerView.addItemDecoration(itemDecoration);\n    }\n\n    private void updateLayoutManager(int column) {\n        recyclerView.removeItemDecoration(itemDecoration);\n        recyclerView.setAdapter(new ArtistAdapter(getActivity(), ArtistLoader.getAllArtists(getActivity())));\n        layoutManager.setSpanCount(column);\n        layoutManager.requestLayout();\n        setItemDecoration();\n    }\n\n    private void reloadAdapter() {\n        new AsyncTask<Void, Void, Void>() {\n            @Override\n            protected Void doInBackground(final Void... unused) {\n                List<Artist> artistList = ArtistLoader.getAllArtists(getActivity());\n                mAdapter.updateDataSet(artistList);\n                return null;\n            }\n\n            @Override\n            protected void onPostExecute(Void aVoid) {\n                mAdapter.notifyDataSetChanged();\n            }\n        }.execute();\n    }\n\n    @Override\n    public void onActivityCreated(final Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n        setHasOptionsMenu(true);\n    }\n\n    @Override\n    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {\n        super.onCreateOptionsMenu(menu, inflater);\n        inflater.inflate(R.menu.artist_sort_by, menu);\n        inflater.inflate(R.menu.menu_show_as, menu);\n\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        switch (item.getItemId()) {\n            case R.id.menu_sort_by_az:\n                mPreferences.setArtistSortOrder(SortOrder.ArtistSortOrder.ARTIST_A_Z);\n                reloadAdapter();\n                return true;\n            case R.id.menu_sort_by_za:\n                mPreferences.setArtistSortOrder(SortOrder.ArtistSortOrder.ARTIST_Z_A);\n                reloadAdapter();\n                return true;\n            case R.id.menu_sort_by_number_of_songs:\n                mPreferences.setArtistSortOrder(SortOrder.ArtistSortOrder.ARTIST_NUMBER_OF_SONGS);\n                reloadAdapter();\n                return true;\n            case R.id.menu_sort_by_number_of_albums:\n                mPreferences.setArtistSortOrder(SortOrder.ArtistSortOrder.ARTIST_NUMBER_OF_ALBUMS);\n                reloadAdapter();\n                return true;\n            case R.id.menu_show_as_list:\n                mPreferences.setArtistsInGrid(false);\n                isGrid = false;\n                updateLayoutManager(1);\n                return true;\n            case R.id.menu_show_as_grid:\n                mPreferences.setArtistsInGrid(true);\n                isGrid = true;\n                updateLayoutManager(2);\n                return true;\n        }\n        return super.onOptionsItemSelected(item);\n    }\n\n    private class loadArtists extends AsyncTask<String, Void, String> {\n\n        @Override\n        protected String doInBackground(String... params) {\n            if (getActivity() != null)\n                mAdapter = new ArtistAdapter(getActivity(), ArtistLoader.getAllArtists(getActivity()));\n            return "Executed";\n        }\n\n        @Override\n        protected void onPostExecute(String result) {\n            if (mAdapter != null) {\n                mAdapter.setHasStableIds(true);\n                recyclerView.setAdapter(mAdapter);\n            }\n            if (getActivity() != null) {\n                setItemDecoration();\n            }\n        }\n\n        @Override\n        protected void onPreExecute() {\n        }\n    }\n\n    public class SpacesItemDecoration extends RecyclerView.ItemDecoration {\n        private int space;\n\n        public SpacesItemDecoration(int space) {\n            this.space = space;\n        }\n\n        @Override\n        public void getItemOffsets(Rect outRect, View view,\n                                   RecyclerView parent, RecyclerView.State state) {\n            outRect.left = space;\n            outRect.top = space;\n            outRect.right = space;\n            outRect.bottom = space;\n\n        }\n    }\n\n\n}\n'