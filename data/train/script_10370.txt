b'package icu.nullptr.twifucker.hook\n\nimport com.github.kyuubiran.ezxhelper.ClassUtils.loadClass\nimport com.github.kyuubiran.ezxhelper.HookFactory.`-Static`.createHook\nimport com.github.kyuubiran.ezxhelper.Log\nimport com.github.kyuubiran.ezxhelper.finders.MethodFinder\nimport dalvik.bytecode.Opcodes\nimport icu.nullptr.twifucker.afterMeasure\nimport icu.nullptr.twifucker.data.TwitterItem\nimport icu.nullptr.twifucker.exceptions.CachedHookNotFound\nimport icu.nullptr.twifucker.hook.HookEntry.Companion.dexKit\nimport icu.nullptr.twifucker.hook.HookEntry.Companion.loadDexKit\nimport icu.nullptr.twifucker.hostAppLastUpdate\nimport icu.nullptr.twifucker.moduleLastModify\nimport icu.nullptr.twifucker.modulePrefs\nimport icu.nullptr.twifucker.ui.SettingsDialog\nimport icu.nullptr.twifucker.ui.SettingsDialog.Companion.PREF_HIDDEN_BOTTOM_NAVBAR_ITEMS\n\nobject DrawerNavbarHook : BaseHook() {\n    override val name: String\n        get() = "DrawerNavbarHook"\n\n    private const val HOOK_DRAWER_ITEMS_CLASS = "hook_drawer_items_class"\n    private const val HOOK_DRAWER_ITEMS_GET_METHOD = "hook_drawer_items_get_method"\n    private const val HOOK_BOTTOM_NAVBAR_ITEMS_CLASS = "hook_bottom_navbar_items_class"\n    private const val HOOK_BOTTOM_NAVBAR_ITEMS_GET_METHOD = "hook_bottom_navbar_items_get_method"\n\n    var drawerItems = mutableListOf<TwitterItem>()\n    var bottomNavbarItems = mutableListOf<TwitterItem>()\n\n    private lateinit var drawerItemsClassName: String\n    private lateinit var drawerItemsGetMethod: String\n    private lateinit var bottomNavbarItemsClassName: String\n    private lateinit var bottomNavbarItemsGetMethod: String\n\n    override fun init() {\n        try {\n            loadHookInfo()\n        } catch (t: Throwable) {\n            Log.e(t)\n            return\n        }\n\n        MethodFinder.fromClass(loadClass(drawerItemsClassName)).filterByName(drawerItemsGetMethod)\n            .first().createHook {\n                afterMeasure(name) { param ->\n                    val hiddenItems = modulePrefs.getStringSet(\n                        SettingsDialog.PREF_HIDDEN_DRAWER_ITEMS, mutableSetOf()\n                    )\n                    drawerItems.clear()\n                    val originalDrawerItems = param.result as List<*>\n                    val newDrawerItems = originalDrawerItems.toMutableList()\n                    originalDrawerItems.forEach { item ->\n                        val itemName = item.toString()\n                        drawerItems.add(\n                            TwitterItem(\n                                itemName, hiddenItems?.contains(itemName) == false\n                            )\n                        )\n                        if (hiddenItems?.contains(itemName) == true && itemName != "SettingsAndSupportGroup") {\n                            newDrawerItems.remove(item)\n                        }\n                    }\n                    param.result = newDrawerItems.toList()\n                }\n            }\n\n        MethodFinder.fromClass(loadClass(bottomNavbarItemsClassName)).filterByName(\n            bottomNavbarItemsGetMethod\n        ).first().createHook {\n            afterMeasure(name) { param ->\n                val hiddenItems =\n                    modulePrefs.getStringSet(PREF_HIDDEN_BOTTOM_NAVBAR_ITEMS, mutableSetOf())\n                bottomNavbarItems.clear()\n                val originalBottomNavbarItems = param.result as List<*>\n                val newBottomNavbarItems = originalBottomNavbarItems.toMutableList()\n                originalBottomNavbarItems.forEach { item ->\n                    val itemName = item.toString()\n                    bottomNavbarItems.add(\n                        TwitterItem(\n                            itemName, hiddenItems?.contains(itemName) == false\n                        )\n                    )\n                    if (hiddenItems?.contains(itemName) == true && itemName != "HOME") {\n                        newBottomNavbarItems.remove(item)\n                    }\n                }\n                param.result = newBottomNavbarItems.toList()\n            }\n        }\n    }\n\n    private fun loadCachedHookInfo() {\n        modulePrefs.let {\n            drawerItemsClassName =\n                it.getString(HOOK_DRAWER_ITEMS_CLASS, null) ?: throw CachedHookNotFound()\n            drawerItemsGetMethod =\n                it.getString(HOOK_DRAWER_ITEMS_GET_METHOD, null) ?: throw CachedHookNotFound()\n            bottomNavbarItemsClassName =\n                it.getString(HOOK_BOTTOM_NAVBAR_ITEMS_CLASS, null) ?: throw CachedHookNotFound()\n            bottomNavbarItemsGetMethod = it.getString(HOOK_BOTTOM_NAVBAR_ITEMS_GET_METHOD, null)\n                ?: throw CachedHookNotFound()\n        }\n    }\n\n    private fun saveHookInfo() {\n        modulePrefs.let {\n            it.putString(HOOK_DRAWER_ITEMS_CLASS, drawerItemsClassName)\n            it.putString(HOOK_DRAWER_ITEMS_GET_METHOD, drawerItemsGetMethod)\n            it.putString(HOOK_BOTTOM_NAVBAR_ITEMS_CLASS, bottomNavbarItemsClassName)\n            it.putString(HOOK_BOTTOM_NAVBAR_ITEMS_GET_METHOD, bottomNavbarItemsGetMethod)\n        }\n    }\n\n    private fun searchHook() {\n        val drawerClassDesc = dexKit.findMethodUsingOpPrefixSeq {\n            opSeq = intArrayOf(\n                Opcodes.OP_CONST_16,\n                Opcodes.OP_NEW_ARRAY,\n                Opcodes.OP_SGET_OBJECT,\n                Opcodes.OP_CONST_4,\n                Opcodes.OP_APUT_OBJECT,\n                Opcodes.OP_SGET_OBJECT,\n                Opcodes.OP_CONST_4,\n                Opcodes.OP_APUT_OBJECT,\n                Opcodes.OP_SGET_OBJECT,\n                Opcodes.OP_CONST_4,\n                Opcodes.OP_APUT_OBJECT,\n                Opcodes.OP_SGET_OBJECT,\n                Opcodes.OP_CONST_4,\n                Opcodes.OP_APUT_OBJECT,\n                Opcodes.OP_SGET_OBJECT,\n                Opcodes.OP_CONST_4,\n                Opcodes.OP_APUT_OBJECT,\n                Opcodes.OP_SGET_OBJECT,\n                Opcodes.OP_CONST_4,\n                Opcodes.OP_APUT_OBJECT,\n                Opcodes.OP_SGET_OBJECT,\n                Opcodes.OP_CONST_4,\n                Opcodes.OP_APUT_OBJECT,\n                Opcodes.OP_SGET_OBJECT,\n                Opcodes.OP_CONST_4,\n                Opcodes.OP_APUT_OBJECT,\n                Opcodes.OP_SGET_OBJECT,\n                Opcodes.OP_CONST_16,\n                Opcodes.OP_APUT_OBJECT,\n                Opcodes.OP_SGET_OBJECT,\n                Opcodes.OP_CONST_16,\n                Opcodes.OP_APUT_OBJECT,\n                Opcodes.OP_SGET_OBJECT,\n                Opcodes.OP_CONST_16,\n                Opcodes.OP_APUT_OBJECT,\n                Opcodes.OP_SGET_OBJECT,\n                Opcodes.OP_CONST_16,\n                Opcodes.OP_APUT_OBJECT,\n                Opcodes.OP_SGET_OBJECT,\n                Opcodes.OP_CONST_16,\n                Opcodes.OP_APUT_OBJECT,\n                Opcodes.OP_SGET_OBJECT,\n                Opcodes.OP_CONST_16,\n                Opcodes.OP_APUT_OBJECT,\n                Opcodes.OP_SGET_OBJECT,\n                Opcodes.OP_CONST_16,\n                Opcodes.OP_APUT_OBJECT,\n                Opcodes.OP_SGET_OBJECT,\n                Opcodes.OP_CONST_16,\n                Opcodes.OP_APUT_OBJECT,\n                Opcodes.OP_SGET_OBJECT,\n            )\n            methodName = "invoke"\n            methodReturnType = Object::class.java.name\n            methodParamTypes = emptyArray()\n        }.first()\n\n        val bottomNavbarDesc = dexKit.findMethodUsingOpCodeSeq {\n            opSeq = intArrayOf(\n                Opcodes.OP_MOVE_RESULT,\n                Opcodes.OP_IGET_OBJECT,\n                Opcodes.OP_INVOKE_INTERFACE,\n                Opcodes.OP_MOVE_RESULT,\n                Opcodes.OP_SGET_OBJECT,\n                Opcodes.OP_CONST_4,\n                Opcodes.OP_NEW_ARRAY,\n                Opcodes.OP_IF_EQZ,\n                Opcodes.OP_SGET_OBJECT,\n            )\n            methodReturnType = List::class.java.name\n            methodParamTypes = emptyArray()\n        }.first()\n\n        drawerItemsClassName = drawerClassDesc.declaringClassName\n        drawerItemsGetMethod = drawerClassDesc.name\n        bottomNavbarItemsClassName = bottomNavbarDesc.declaringClassName\n        bottomNavbarItemsGetMethod = bottomNavbarDesc.name\n    }\n\n    private fun loadHookInfo() {\n        val hookDrawerLastUpdate = modulePrefs.getLong("hook_drawer_last_update", 0)\n\n        Log.d("hookDrawerLastUpdate: $hookDrawerLastUpdate, hostAppLastUpdate: $hostAppLastUpdate, moduleLastModify: $moduleLastModify")\n\n        val timeStart = System.currentTimeMillis()\n\n        if (hookDrawerLastUpdate > hostAppLastUpdate && hookDrawerLastUpdate > moduleLastModify) {\n            loadCachedHookInfo()\n            Log.d("Drawer Hook load time: ${System.currentTimeMillis() - timeStart} ms")\n        } else {\n            loadDexKit()\n            searchHook()\n            Log.d("Drawer Hook search time: ${System.currentTimeMillis() - timeStart} ms")\n            saveHookInfo()\n            modulePrefs.putLong("hook_drawer_last_update", System.currentTimeMillis())\n        }\n    }\n}\n'