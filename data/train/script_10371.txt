b'/*\n * Copyright (C) 2015 Naman Dwivedi\n *\n * Licensed under the GNU General Public License v3\n *\n * This is free software: you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n */\n\npackage com.naman14.timber.lastfmapi;\n\nimport android.content.Context;\n\nimport com.naman14.timber.utils.PreferencesUtility;\nimport com.squareup.okhttp.Cache;\nimport com.squareup.okhttp.OkHttpClient;\n\nimport java.util.concurrent.TimeUnit;\n\nimport retrofit.RequestInterceptor;\nimport retrofit.RestAdapter;\nimport retrofit.client.OkClient;\n\npublic class RestServiceFactory {\n    private static final String TAG_OK_HTTP = "OkHttp";\n    private static final long CACHE_SIZE = 1024 * 1024;\n\n    public static <T> T createStatic(final Context context, String baseUrl, Class<T> clazz) {\n        final OkHttpClient okHttpClient = new OkHttpClient();\n\n        okHttpClient.setCache(new Cache(context.getApplicationContext().getCacheDir(),\n                CACHE_SIZE));\n        okHttpClient.setConnectTimeout(40, TimeUnit.SECONDS);\n\n        RequestInterceptor interceptor = new RequestInterceptor() {\n            PreferencesUtility prefs = PreferencesUtility.getInstance(context);\n\n            @Override\n            public void intercept(RequestFacade request) {\n                //7-days cache\n                request.addHeader("Cache-Control",\n                        String.format("max-age=%d,%smax-stale=%d",\n                                Integer.valueOf(60 * 60 * 24 * 7),\n                                prefs.loadArtistAndAlbumImages() ? "" : "only-if-cached,", Integer.valueOf(31536000)));\n                request.addHeader("Connection", "keep-alive");\n            }\n        };\n\n        RestAdapter.Builder builder = new RestAdapter.Builder()\n                .setEndpoint(baseUrl)\n                .setRequestInterceptor(interceptor)\n                .setClient(new OkClient(okHttpClient));\n\n        return builder\n                .build()\n                .create(clazz);\n\n    }\n\n    public static <T> T create(final Context context, String baseUrl, Class<T> clazz) {\n\n        RestAdapter.Builder builder = new RestAdapter.Builder()\n                .setEndpoint(baseUrl);\n\n        return builder\n                .build()\n                .create(clazz);\n\n    }\n\n\n}\n'