b'module Code.Build.PHP where\n\nimport Code.Build\nimport Data.List\n\nhashmap :: [(String, Code)] -> Code\nhashmap = call "array" . map (\\(a,b) -> a <++> "=>" <++> b)\n\nstatements :: CodeList a => a -> Code\nstatements = mkStack . codeList\n\nblock :: CodeList a => a -> Code\nblock c = "{" <-> indent 2 (statements c) <-> "}"\n\nphpIf :: (Codeable a, CodeList b) => a -> b -> Code\nphpIf cond blk = "if" <++> parenthesis cond <-> block blk\n\nphpElse :: CodeList a => a -> Code\nphpElse blk = "else" <-> block blk\n\nfor :: (Codeable a, CodeList b) => a -> b -> Code\nfor cond blk = "for" <++> parenthesis cond <-> block blk\n\nphp :: CodeList a => a -> Code\nphp a = "<?php" <-> statements a <-> "?>"\n\nphpClass :: CodeList a => String -> a -> Code\nphpClass name c = "class" <++> name <-> block c\n\nprotected :: Codeable a => String -> a -> Code\nprotected s c = "protected" <++> var s c\n\nfunction :: CodeList a => [String] -> a -> Code\nfunction pars body = "function" <++> parenthesis (intercalate ", " pars) <-> block body\n\nfunctionDecl :: CodeList a => String -> [String] -> a -> Code\nfunctionDecl name pars body = "function" <++> name <++> parenthesis (intercalate ", " pars) <-> block body\n\ncall :: CodeList a => String -> a -> Code\ncall func as | all singleLine (codeList as) = func <+> parenthesis (interleave ", " $ codeList as)\n             | otherwise                    = func <+| (("( " <-> many ", ") |>+<| as) <+> ")"\n\nproc :: CodeList a => String -> a -> Code\nproc f a = call f a <+> ";"\n\nret :: Codeable a => a -> Code\nret a = "return " <+| a <+> ";"\n\nstring :: Codeable a => a -> Code\nstring = surround "\\"" "\\""\n\nnew :: Codeable a => String -> a ->  Code\nnew clas c = "new" <++> clas <+| parenthesis c\n\nvar :: Codeable a => String -> a -> Code\nvar n c | isNull (code c)     = "$" <+> n <+> ";"\nvar n c | singleLine (code c) = "$" <+> n <+> " = " <+| c <+> ";"\n        | otherwise           = "$" <+> n <+> " =" <-> indent 2 c <+> ";"\n\ninfix 2 .=.\n\n(.=.) :: Codeable b => String -> b -> Code\nv .=. c | singleLine (code c) = "$" <+> v <+> " = " <+| c <+> ";"\n        | otherwise           = "$" <+> v <+> " =" <-> indent 2 c <+> ";"\n'