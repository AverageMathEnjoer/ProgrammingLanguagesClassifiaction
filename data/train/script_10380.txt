b'import com.github.eprendre.tingshu.utils.Book\nimport com.github.eprendre.tingshu.utils.Episode\nimport org.jsoup.Jsoup\nimport org.junit.Test\n\nclass VBusTest {\n    @Test\n    fun audioUrl() {\n        val doc = Jsoup.connect("https://www.vbus.cc/v/472").testConfig(false).get()\n        println(doc.selectFirst("audio").absUrl("src"))\n    }\n\n    @Test\n    fun categoryList() {\n        val url = "https://www.vbus.cc/recommend/1"\n        val doc = Jsoup.connect(url).testConfig(false).get()\n        val pages = doc.select(".page-item > a")\n        val nextPage = pages.firstOrNull { it.text().contains("\xe4\xb8\x8b\xe4\xb8\x80\xe9\xa1\xb5") }\n        var nextUrl = ""\n        if (nextPage != null) {\n            nextUrl = nextPage.absUrl("href")\n        }\n        val currentPage = url.split("/").last().toInt()\n        val totalPage = if (nextPage == null) {\n            currentPage\n        } else {\n            currentPage + 1\n        }\n\n        val list = ArrayList<Book>()\n        val elementList = doc.select(".program-list > li")\n        elementList.forEach { element ->\n            val a = element.selectFirst("h3 > a")\n            val bookUrl = a.absUrl("href")\n            val coverUrl = ""\n            val title = a.text()\n            val programMeta = element.selectFirst(".program-meta")\n            val status = programMeta.select("span").last().text()\n            val artist = programMeta.select("span").first().text()\n            val author = programMeta.select("> a").joinToString(separator = ",") { it.text() }\n            list.add(Book(coverUrl, bookUrl, title, author, artist).apply {\n                this.status = status\n            })\n        }\n        println(nextUrl)\n        println("$currentPage / $totalPage")\n        list.take(5).forEach { println(it) }\n        assert(list.isNotEmpty())\n    }\n}'