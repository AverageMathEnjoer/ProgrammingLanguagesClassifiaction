b'#include <bits/stdc++.h>\nusing namespace std;\n#define gc getchar_unlocked\n#define fo(i,n) for(i=0;i<n;i++)\n#define Fo(i,k,n) for(i=k;k<n?i<n:i>n;k<n?i+=1:i-=1)\n#define ll long long\n#define si(x)\tscanf("%d",&x)\n#define sl(x)\tscanf("%lld",&x)\n#define ss(s)\tscanf("%s",s)\n#define pi(x)\tprintf("%d\\n",x)\n#define pl(x)\tprintf("%lld\\n",x)\n#define ps(s)\tprintf("%s\\n",s)\n#define pb push_back\n#define mp make_pair\n#define F first\n#define S second\n#define all(x) x.begin(), x.end()\n#define clr(x) memset(x, 0, sizeof(x))\n#define sortall(x) sort(all(x))\n#define tr(it, a) for(auto it = a.begin(); it != a.end(); it++)\n#define PI 3.1415926535897932384626\ntypedef pair<int, int>\tpii;\ntypedef pair<ll, ll>\tpl;\ntypedef vector<int>\t\tvi;\ntypedef vector<ll>\t\tvl;\ntypedef vector<pii>\t\tvpii;\ntypedef vector<pl>\t\tvpl;\ntypedef vector<vi>\t\tvvi;\ntypedef vector<vl>\t\tvvl;\nint mpow(int base, int exp); \nvoid ipgraph(int m);\nvoid dfs(int u, int par);\nconst int mod = 1000000007;\nconst int N = 3e5, M = N;\n//=======================\n\nvi g[N];\nint a[N];\n/*\nInput: A vector of intervals in any random order\nOutput: \n1. Removes redundant intervals ie remove [2,3] if [1,4] is present.\n2. does NOT merge overlapping intervals.\n3. Sorted in ascending order of starting interval which are distinct.\n*/\nvoid fun_interval(vpii &in){\n\tint i = 1, n = in.size();\n\tsort(in.begin(), in.end(), [](pii x, pii y){if(x.F == y.F)return x.S>y.S;return x.F<y.F;});\n\tvpii took = {in[0]};\n\tint hi = in[0].S;\n\tFo(i, 1, n){\n\t\tif(hi>=in[i].S)continue;\n\t\thi = in[i].S;\n\t\ttook.pb(in[i]);\n\t}\n\tin.clear();\n\tfor(pii x: took) in.pb(x);\n//\tUncomment the following lines, if you wish to sort intervals on asc order of HI value.\n//\tfor(auto& x: in) swap(x.F,x.S);  // [lo, hi] is converted to [hi, lo].\n//\tsort(in.begin(), in.end(), [](pii x, pii y){return x.F<y.F;});\n}\nint main()\n{\n\tios_base::sync_with_stdio(false);\n\tcin.tie(NULL);\n\tint i,n,k,j;\n\tcin >> n;\n\tvpii in(n, {0,0});\n\tfo(i, n) cin >> in[i].F >> in[i].S ;\n\tfun_interval(in);\n\tfor(pii x: in) cout << x.F << " " << x.S << endl;\n\n\treturn 0;\n} \n/*\nInput:\n5\n1 4\n0 3\n2 3\n0 5\n3 9\nOutput:\n0 5\n3 9\n*/\n'