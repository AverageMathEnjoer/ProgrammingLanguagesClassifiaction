b'package co.joebirch.composeplayground.material\n\nimport androidx.compose.material.Text\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material.*\nimport androidx.compose.material.TabRowDefaults.tabIndicatorOffset\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.unit.dp\nimport co.joebirch.composeplayground.ComposableLayout\n\nobject TabBarView : ComposableLayout {\n\n    @Composable\n    override fun build() {\n\n\n        Scaffold(topBar = {\n            TopAppBar(\n                elevation = 0.dp\n            ) {\n                Text(\n                    "Jetpack Compose",\n                    modifier = Modifier.padding(16.dp)\n                )\n            }\n        }, content = {\n            Column(\n                modifier = Modifier.fillMaxSize(),\n                verticalArrangement = Arrangement.Top\n            ) {\n\n                CustomIndicatorTabRow()\n            }\n        })\n    }\n\n    @Composable\n    fun MinimalTabRow() {\n        val tabs = listOf("One", "Two")\n        val selectedTab = remember { mutableStateOf(0) }\n        TabRow(\n            selectedTabIndex = selectedTab.value\n        ) {\n            tabs.forEachIndexed { index, s ->\n                Tab(\n                    selected = selectedTab.value == index,\n                    onClick = {\n                        selectedTab.value = index\n                    }) {\n                    Text(\n                        text = s,\n                        modifier = Modifier.padding(16.dp)\n                    )\n                }\n            }\n        }\n    }\n\n    @Composable\n    fun BackgroundColorTabRow() {\n        val tabs = listOf("One", "Two")\n        val selectedTab = remember { mutableStateOf(0) }\n        TabRow(\n            selectedTabIndex = selectedTab.value,\n            backgroundColor = Color.Red\n        ) {\n            tabs.forEachIndexed { index, s ->\n                Tab(\n                    selected = selectedTab.value == index,\n                    onClick = {\n                        selectedTab.value = index\n                    }) {\n                    Text(\n                        text = s,\n                        modifier = Modifier.padding(16.dp)\n                    )\n                }\n            }\n        }\n    }\n\n    @Composable\n    fun ContentColorTabRow() {\n        val tabs = listOf("One", "Two")\n        val selectedTab = remember { mutableStateOf(0) }\n        TabRow(\n            selectedTabIndex = selectedTab.value,\n            backgroundColor = Color.Blue\n        ) {\n            tabs.forEachIndexed { index, s ->\n                Tab(\n                    selected = selectedTab.value == index,\n                    onClick = {\n                        selectedTab.value = index\n                    }) {\n                    Text(\n                        text = s,\n                        modifier = Modifier.padding(16.dp)\n                    )\n                }\n            }\n        }\n    }\n\n    @Composable\n    fun DividerTabRow() {\n        val tabs = listOf("One", "Two")\n        val selectedTab = remember { mutableStateOf(0) }\n        TabRow(\n            selectedTabIndex = selectedTab.value,\n            divider = {\n                Divider(\n                    modifier = Modifier.height(8.dp)\n                        .fillMaxWidth()\n                        .background(color = Color.Red)\n                )\n            }\n        ) {\n            tabs.forEachIndexed { index, s ->\n                Tab(\n                    selected = selectedTab.value == index,\n                    onClick = {\n                        selectedTab.value = index\n                    }\n                )\n            }\n        }\n    }\n\n    @Composable\n    fun CustomIndicatorTabRow() {\n        val tabs = listOf("One", "Two")\n        val selectedTab = remember { mutableStateOf(0) }\n        TabRow(\n            selectedTabIndex = selectedTab.value,\n            indicator = { tabPositions: List<TabPosition> ->\n                val modifier = Modifier.tabIndicatorOffset(\n                    tabPositions[selectedTab.value]\n                )\n                Box(\n                    modifier.fillMaxWidth().height(5.dp)\n                        .background(\n                            color = Color.White,\n                            shape = RoundedCornerShape(\n                                topStart = 16.dp, topEnd = 16.dp\n                            )\n                        ),\n                )\n            }\n        ) {\n            tabs.forEachIndexed { index, s ->\n                Tab(\n                    selected = selectedTab.value == index,\n                    onClick = {\n                        selectedTab.value = index\n                    }) {\n                    Text(\n                        text = s,\n                        modifier = Modifier.padding(16.dp)\n                    )\n                }\n            }\n        }\n    }\n\n}'