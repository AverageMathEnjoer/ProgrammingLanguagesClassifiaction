b'/*\n * Copyright (C) 2015 Naman Dwivedi\n *\n * Licensed under the GNU General Public License v3\n *\n * This is free software: you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n */\n\npackage com.naman14.timber.dataloaders;\n\nimport android.content.ContentProviderOperation;\nimport android.content.Context;\nimport android.content.OperationApplicationException;\nimport android.database.Cursor;\nimport android.net.Uri;\nimport android.os.RemoteException;\nimport android.provider.MediaStore;\nimport android.provider.MediaStore.Audio.AudioColumns;\nimport android.provider.MediaStore.Audio.Playlists;\n\nimport com.naman14.timber.models.Song;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class PlaylistSongLoader {\n\n    private static Cursor mCursor;\n\n    private static long mPlaylistID;\n    private static Context context;\n\n\n    public static List<Song> getSongsInPlaylist(Context mContext, long playlistID) {\n        ArrayList<Song> mSongList = new ArrayList<>();\n\n        context = mContext;\n        mPlaylistID = playlistID;\n\n        final int playlistCount = countPlaylist(context, mPlaylistID);\n\n        mCursor = makePlaylistSongCursor(context, mPlaylistID);\n\n        if (mCursor != null) {\n            boolean runCleanup = false;\n            if (mCursor.getCount() != playlistCount) {\n                runCleanup = true;\n            }\n\n            if (!runCleanup && mCursor.moveToFirst()) {\n                final int playOrderCol = mCursor.getColumnIndexOrThrow(Playlists.Members.PLAY_ORDER);\n\n                int lastPlayOrder = -1;\n                do {\n                    int playOrder = mCursor.getInt(playOrderCol);\n                    if (playOrder == lastPlayOrder) {\n                        runCleanup = true;\n                        break;\n                    }\n                    lastPlayOrder = playOrder;\n                } while (mCursor.moveToNext());\n            }\n\n            if (runCleanup) {\n\n                cleanupPlaylist(context, mPlaylistID, mCursor);\n\n                mCursor.close();\n                mCursor = makePlaylistSongCursor(context, mPlaylistID);\n                if (mCursor != null) {\n                }\n            }\n        }\n\n        if (mCursor != null && mCursor.moveToFirst()) {\n            do {\n\n                final long id = mCursor.getLong(mCursor\n                        .getColumnIndexOrThrow(MediaStore.Audio.Playlists.Members.AUDIO_ID));\n\n                final String songName = mCursor.getString(mCursor\n                        .getColumnIndexOrThrow(AudioColumns.TITLE));\n\n                final String artist = mCursor.getString(mCursor\n                        .getColumnIndexOrThrow(AudioColumns.ARTIST));\n\n                final long albumId = mCursor.getLong(mCursor\n                        .getColumnIndexOrThrow(AudioColumns.ALBUM_ID));\n\n                final long artistId = mCursor.getLong(mCursor\n                        .getColumnIndexOrThrow(AudioColumns.ARTIST_ID));\n\n                final String album = mCursor.getString(mCursor\n                        .getColumnIndexOrThrow(AudioColumns.ALBUM));\n\n                final long duration = mCursor.getLong(mCursor\n                        .getColumnIndexOrThrow(AudioColumns.DURATION));\n\n                final int durationInSecs = (int) duration / 1000;\n\n                final int tracknumber = mCursor.getInt(mCursor\n                        .getColumnIndexOrThrow(AudioColumns.TRACK));\n\n                final Song song = new Song(id, albumId, artistId, songName, artist, album, durationInSecs, tracknumber);\n\n                mSongList.add(song);\n            } while (mCursor.moveToNext());\n        }\n        // Close the cursor\n        if (mCursor != null) {\n            mCursor.close();\n            mCursor = null;\n        }\n        return mSongList;\n    }\n\n    private static void cleanupPlaylist(final Context context, final long playlistId,\n                                        final Cursor cursor) {\n        final int idCol = cursor.getColumnIndexOrThrow(MediaStore.Audio.Playlists.Members.AUDIO_ID);\n        final Uri uri = MediaStore.Audio.Playlists.Members.getContentUri("external", playlistId);\n\n        ArrayList<ContentProviderOperation> ops = new ArrayList<ContentProviderOperation>();\n\n        ops.add(ContentProviderOperation.newDelete(uri).build());\n\n        final int YIELD_FREQUENCY = 100;\n\n        if (cursor.moveToFirst() && cursor.getCount() > 0) {\n            do {\n                final ContentProviderOperation.Builder builder =\n                        ContentProviderOperation.newInsert(uri)\n                                .withValue(Playlists.Members.PLAY_ORDER, cursor.getPosition())\n                                .withValue(Playlists.Members.AUDIO_ID, cursor.getLong(idCol));\n\n                if ((cursor.getPosition() + 1) % YIELD_FREQUENCY == 0) {\n                    builder.withYieldAllowed(true);\n                }\n                ops.add(builder.build());\n            } while (cursor.moveToNext());\n        }\n\n        try {\n            context.getContentResolver().applyBatch(MediaStore.AUTHORITY, ops);\n        } catch (RemoteException e) {\n        } catch (OperationApplicationException e) {\n        }\n    }\n\n\n    private static int countPlaylist(final Context context, final long playlistId) {\n        Cursor c = null;\n        try {\n            c = context.getContentResolver().query(\n                    MediaStore.Audio.Playlists.Members.getContentUri("external", playlistId),\n                    new String[]{\n                            MediaStore.Audio.Playlists.Members.AUDIO_ID,\n                    }, null, null,\n                    MediaStore.Audio.Playlists.Members.DEFAULT_SORT_ORDER);\n\n            if (c != null) {\n                return c.getCount();\n            }\n        } finally {\n            if (c != null) {\n                c.close();\n                c = null;\n            }\n        }\n\n        return 0;\n    }\n\n\n    public static final Cursor makePlaylistSongCursor(final Context context, final Long playlistID) {\n        final StringBuilder mSelection = new StringBuilder();\n        mSelection.append(AudioColumns.IS_MUSIC + "=1");\n        mSelection.append(" AND " + AudioColumns.TITLE + " != \'\'");\n        return context.getContentResolver().query(\n                MediaStore.Audio.Playlists.Members.getContentUri("external", playlistID),\n                new String[]{\n                        MediaStore.Audio.Playlists.Members._ID,\n                        MediaStore.Audio.Playlists.Members.AUDIO_ID,\n                        AudioColumns.TITLE,\n                        AudioColumns.ARTIST,\n                        AudioColumns.ALBUM_ID,\n                        AudioColumns.ARTIST_ID,\n                        AudioColumns.ALBUM,\n                        AudioColumns.DURATION,\n                        AudioColumns.TRACK,\n                        Playlists.Members.PLAY_ORDER,\n                }, mSelection.toString(), null,\n                MediaStore.Audio.Playlists.Members.DEFAULT_SORT_ORDER);\n    }\n}\n'