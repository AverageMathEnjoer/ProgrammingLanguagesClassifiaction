b'module Color where\n\nimport Prelude\nimport Data.Int\nimport Data.Word\nimport Control.Monad.Trans.State\nimport Data.Functor.Identity\nimport Data.List.Index\n\ntype ColorComponent = Word8\n\ntype Color = (ColorComponent, ColorComponent, ColorComponent)\n\ntype ColorFunction = (Int32, Int32) -> Color\ntype TimeColorFunction = Double -> ColorFunction\n\n\ntype Brightness = Word8\n\ndata Frame = Frame { _dimensions :: (Word8, Word8), _keys :: [[Color]] }\n\ncolorRed :: Color\ncolorRed = (255, 0, 0)\n\ncolorGreenplus :: Color\ncolorGreenplus = (60, 255, 20)\n\ncolorGreen :: Color\ncolorGreen = (0, 255, 0)\n\ncolorLightgreen :: Color\ncolorLightgreen = (55, 255, 55)\n\ncolorDarkgreen :: Color\ncolorDarkgreen = (0, 10, 0)\n\ncolorDarkblue :: Color\ncolorDarkblue = (5, 0, 15)\n\ncolorBlue :: Color\ncolorBlue = (0, 0, 255)\n\ncolorCyan :: Color\ncolorCyan = (0, 255, 255)\n\ncolorMagenta :: Color\ncolorMagenta = (255, 0, 255)\n\ncolorYellow :: Color\ncolorYellow = (255, 255, 0)\n\ncolorBlack :: Color\ncolorBlack = (0, 0, 0)\n\ncolorWhite :: Color\ncolorWhite = (255, 255, 255)\n\ncolorOrange :: Color\ncolorOrange = (255, 64, 0)\n\nfillKeyboard :: ColorFunction -> (Int32, Int32) -> Frame\nfillKeyboard color dim = Frame { _dimensions = (fromIntegral h, fromIntegral w), _keys = keys }\n    where (h, w) = dim\n          indices :: [[(Int32, Int32)]]\n          indices = [zip (replicate (fromIntegral w) i) [1..w] | i <- [1..h]]\n          keys :: [[Color]]\n          keys = map (map color) indices\n\nsolidColor :: Color -> (Int32, Int32) -> Frame\nsolidColor color dim = Frame { _dimensions = (fromIntegral h, fromIntegral w), _keys = keys }\n    where (h, w) = dim\n          keys = replicate (fromIntegral h) (replicate (fromIntegral w) color)\n\nsetColor :: (Int32, Int32) -> Color -> StateT (Frame, Color) Identity ()\nsetColor (y, x) c = do\n    (frame, unused) <- get\n    let row = _keys frame !! fromIntegral y\n    let newRow = setAt (fromIntegral x) c row\n    put (frame { _keys = setAt (fromIntegral y) newRow (_keys frame) }, unused)\n'