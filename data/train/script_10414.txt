b'package com.naman14.timber.dialogs;\n\nimport android.content.Context;\nimport android.content.DialogInterface;\nimport android.os.Environment;\nimport androidx.appcompat.app.AlertDialog;\n\nimport com.naman14.timber.R;\n\nimport java.io.File;\nimport java.io.FileFilter;\n\n/**\n * Created by nv95 on 06.12.16.\n */\n\npublic class StorageSelectDialog implements DialogInterface.OnClickListener {\n\n    private final AlertDialog mDialog;\n    private final File[] mStorages;\n    private OnDirSelectListener mDirSelectListener;\n\n    public StorageSelectDialog(final Context context) {\n        mStorages = getAvailableStorages(context);\n        String[] names = new String[mStorages.length];\n        for (int i=0;i<mStorages.length;i++) {\n            names[i] = mStorages[i].getName();\n        }\n        mDialog = new AlertDialog.Builder(context)\n                .setItems(names, this)\n                .setNegativeButton(android.R.string.cancel, null)\n                .setNeutralButton(R.string.menu_show_as_entry_default, new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialog, int which) {\n                        mDirSelectListener.onDirSelected(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MUSIC));\n                    }\n                })\n                .setCancelable(true)\n                .setTitle(R.string.select_storage)\n                .create();\n    }\n\n    public StorageSelectDialog setDirSelectListener(OnDirSelectListener dirSelectListener) {\n        this.mDirSelectListener = dirSelectListener;\n        return this;\n    }\n\n    public void show() {\n        mDialog.show();\n    }\n\n    @Override\n    public void onClick(DialogInterface dialogInterface, int position) {\n        File dir = mStorages[position];\n        mDirSelectListener.onDirSelected(dir);\n    }\n\n\n    private static File[] getAvailableStorages(Context context) {\n        File storageRoot = new File("/storage");\n        return storageRoot.listFiles(new FileFilter() {\n            @Override\n            public boolean accept(File file) {\n                return file.canRead();\n            }\n        });\n    }\n\n    public interface OnDirSelectListener {\n        void onDirSelected(File dir);\n    }\n}'