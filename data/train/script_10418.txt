b'{-# LANGUAGE MultiWayIf #-}\n{-# LANGUAGE OverloadedStrings #-}\n\nmodule Hoodle.Coroutine.LaTeX where\n\nimport Control.Lens (view, _1, _2)\nimport Control.Monad (guard)\nimport Control.Monad.Trans.Maybe (MaybeT (..))\nimport Data.Function (on)\nimport Data.Hoodle.Simple (Hoodle, Item (..), SVG (..), items, layers, pages)\nimport Data.List (sortBy)\nimport Data.Maybe (catMaybes)\nimport qualified Data.Text as T\nimport qualified Data.Text.Encoding as TE\nimport Hoodle.ModelAction.Text (extractKeyword)\n\nhoistMaybe :: (Monad m) => Maybe a -> MaybeT m a\nhoistMaybe = MaybeT . return\n\ngetLaTeXComponentsFromHdl :: Hoodle -> [(Maybe T.Text, (Int, Double, T.Text))]\ngetLaTeXComponentsFromHdl hdl =\n  let mlatex_components = do\n        (pgnum, pg) <- (zip ([1 ..] :: [Int]) . view pages) hdl\n        l <- view layers pg\n        i <- view items l\n        case i of\n          ItemSVG svg ->\n            runMaybeT $ do\n              v <- hoistMaybe (svg_command svg)\n              guard (v == "latex")\n              svgtextbstr <- hoistMaybe (svg_text svg)\n              let (_, y) = svg_pos svg\n                  svgtext = TE.decodeUtf8 svgtextbstr\n                  mk = extractKeyword svgtext\n              return (mk, (pgnum, y, svgtext))\n          _ -> []\n      cfunc :: (Ord a, Ord b, Ord c) => (a, b, c) -> (a, b, c) -> Ordering\n      cfunc x y\n        | view _1 x > view _1 y = GT\n        | view _1 x < view _1 y = LT\n        | otherwise =\n          if\n              | view _2 x > view _2 y -> GT\n              | view _2 x < view _2 y -> LT\n              | otherwise -> EQ\n      latex_components = catMaybes mlatex_components\n      sorted = sortBy (cfunc `on` snd) latex_components\n   in sorted\n\n{-\nupdateLaTeX :: MainCoroutine ()\nupdateLaTeX = do\n    rhdl <- getHoodle <$> get\n    let hdl = rHoodle2Hoodle rhdl\n    runMaybeT $ do\n      {- txtsrc <- -} MaybeT $ return (rhdl ^. gembeddedtext)\n      -- let km = getKeywordMap txtsrc\n      -- liftIO $ print km\n    -- let sorted = getLaTeXComponentsFromHdl hdl\n    -- liftIO $ print sorted\n    return ()\n-}\n\nlaTeXHeader :: T.Text\nlaTeXHeader =\n  "\\\\documentclass[a4paper]{article}\\n\\\n  \\\\\\usepackage[affil-it]{authblk}\\n\\\n  \\\\\\usepackage{xeCJK}\\n\\\n  \\\\\\xeCJKsetup{\\n\\\n  \\  CJKspace=true,\\n\\\n  \\  CJKecglue={}\\n\\\n  \\}\\n\\\n  \\\\\\usepackage{setspace}\\n\\\n  \\\\\\onehalfspacing\\n\\\n  \\\\\\usepackage{fontspec}\\n\\\n  \\\\\\setCJKmainfont{NanumGothic}\\n\\\n  \\\\\\usepackage{minted}\\n\\\n  \\\\\\pagestyle{empty}\\n\\\n  \\\\\\begin{document}\\n"\n\n-- \\\\\\\\documentclass{article}\\n\\\n--              \\\\\\pagestyle{empty}\\n\\\n--              \\\\\\begin{document}\\n\n\nlaTeXFooter :: T.Text\nlaTeXFooter = "\\\\end{document}\\n"\n'