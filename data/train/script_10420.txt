b'package com.github.razir.progressbutton\n\nimport android.animation.Animator\nimport android.graphics.drawable.Animatable\nimport android.view.View\nimport android.widget.TextView\nimport androidx.lifecycle.Lifecycle\nimport androidx.lifecycle.LifecycleEventObserver\nimport androidx.lifecycle.LifecycleOwner\nimport java.lang.ref.WeakReference\nimport java.util.*\n\ninternal val attachedViews = WeakHashMap<TextView, TextChangeAnimatorParams>()\ninternal val activeAnimations = WeakHashMap<TextView, MutableList<Animator>>()\ninternal val activeViews = WeakHashMap<TextView, DrawableViewData>()\n\n/**\n * Binds your buttons to component lifecycle for the correct data recycling\n * This method is required for all buttons that show progress/drawable\n * @receiver lifecycle owner to which to bin (eg. Activity, Fragment or other)\n * @param button button instance to bind\n */\nfun LifecycleOwner.bindProgressButton(button: TextView) {\n    lifecycle.addObserver(ProgressButtonHolder(WeakReference(button)))\n}\n\nfun TextView.cleanUpDrawable() {\n    if (activeViews.containsKey(this)) {\n        activeViews[this]?.drawable?.apply {\n            if (this is Animatable) {\n                stop()\n            }\n            callback = null\n        }\n        activeViews.remove(this)\n    }\n}\n\nprivate class ProgressButtonHolder(private val textView: WeakReference<TextView>) :\n    LifecycleEventObserver {\n\n    override fun onStateChanged(source: LifecycleOwner, event: Lifecycle.Event) {\n        if (event == Lifecycle.Event.ON_DESTROY) {\n            textView.get()?.let {\n                it.cancelAnimations()\n                it.cleanUpDrawable()\n                it.removeTextAnimationAttachViewListener()\n                it.removeDrawableAttachViewListener()\n                attachedViews.remove(it)\n            }\n        }\n    }\n}\n\ninternal fun TextView.addTextAnimationAttachViewListener() {\n    addOnAttachStateChangeListener(textAnimationsAttachListener)\n}\n\ninternal fun TextView.removeTextAnimationAttachViewListener() {\n    removeOnAttachStateChangeListener(textAnimationsAttachListener)\n}\n\ninternal fun TextView.addDrawableAttachViewListener() {\n    addOnAttachStateChangeListener(drawablesAttachListener)\n}\n\nprivate fun TextView.removeDrawableAttachViewListener() {\n    removeOnAttachStateChangeListener(drawablesAttachListener)\n}\n\nprivate val textAnimationsAttachListener = object : View.OnAttachStateChangeListener {\n    override fun onViewDetachedFromWindow(v: View) {\n        if (attachedViews.containsKey(v)) {\n            (v as TextView).cancelAnimations()\n        }\n    }\n\n    override fun onViewAttachedToWindow(v: View?) {\n    }\n}\n\nprivate val drawablesAttachListener = object : View.OnAttachStateChangeListener {\n    override fun onViewDetachedFromWindow(v: View?) {\n        if (activeViews.containsKey(v)) {\n            activeViews[v]?.drawable?.apply {\n                if (this is Animatable) {\n                    stop()\n                }\n            }\n        }\n    }\n\n    override fun onViewAttachedToWindow(v: View?) {\n        if (activeViews.containsKey(v)) {\n            activeViews[v]?.drawable?.apply {\n                if (this is Animatable) {\n                    start()\n                }\n            }\n        }\n    }\n}\n'