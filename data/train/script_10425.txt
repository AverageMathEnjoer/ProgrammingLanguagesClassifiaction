b'module Database.Beam.Sqlite.Test.Migrate (tests) where\n\nimport Database.SQLite.Simple\nimport Test.Tasty\nimport Test.Tasty.HUnit\n\nimport Database.Beam\nimport Database.Beam.Sqlite\nimport Database.Beam.Sqlite.Migrate\nimport Database.Beam.Migrate\nimport Database.Beam.Migrate.Simple\n\nimport Database.Beam.Sqlite.Test\n\ntests :: TestTree\ntests = testGroup "Migration tests"\n  [ verifiesPrimaryKey\n  , verifiesNoPrimaryKey\n  ]\n\nnewtype WithPkT f = WithPkT\n  { _with_pk_value :: C f Bool\n  } deriving (Generic, Beamable)\n\ninstance Table WithPkT where\n  newtype PrimaryKey WithPkT f = Pk (C f Bool)\n    deriving (Generic, Beamable)\n\n  primaryKey = Pk . _with_pk_value\n\ndata WithPkDb entity = WithPkDb\n  { _with_pk :: entity (TableEntity WithPkT)\n  } deriving (Generic, Database Sqlite)\n\nwithPkDbChecked :: CheckedDatabaseSettings Sqlite WithPkDb\nwithPkDbChecked = defaultMigratableDbSettings\n\nnewtype WithoutPkT f = WithoutPkT\n  { _without_pk_value :: C f Bool\n  } deriving (Generic, Beamable)\n\ninstance Table WithoutPkT where\n  data PrimaryKey WithoutPkT f = NoPk\n    deriving (Generic, Beamable)\n\n  primaryKey _ = NoPk\n\ndata WithoutPkDb entity = WithoutPkDb\n  { _without_pk :: entity (TableEntity WithoutPkT)\n  } deriving (Generic, Database Sqlite)\n\nwithoutPkDbChecked :: CheckedDatabaseSettings Sqlite WithoutPkDb\nwithoutPkDbChecked = defaultMigratableDbSettings\n\nverifiesPrimaryKey :: TestTree\nverifiesPrimaryKey = testCase "verifySchema correctly detects primary key" $\n  withTestDb $ \\conn -> do\n    execute_ conn "create table with_pk (with_pk_value bool not null primary key)"\n    testVerifySchema conn withPkDbChecked\n\nverifiesNoPrimaryKey :: TestTree\nverifiesNoPrimaryKey = testCase "verifySchema correctly handles table with no primary key" $\n  withTestDb $ \\conn -> do\n    execute_ conn "create table without_pk (without_pk_value bool not null)"\n    testVerifySchema conn withoutPkDbChecked\n\ntestVerifySchema\n  :: Database Sqlite db\n  => Connection -> CheckedDatabaseSettings Sqlite db -> Assertion\ntestVerifySchema conn db =\n  runBeamSqlite conn (verifySchema migrationBackend db) >>= \\case\n    VerificationSucceeded -> return ()\n    VerificationFailed failures ->\n      fail $ "Verification failed: " ++ show failures\n'