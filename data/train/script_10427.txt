b'package wendu.dsbridge;\n\nimport android.annotation.SuppressLint;\nimport android.annotation.TargetApi;\nimport android.app.Activity;\n//import android.app.AlertDialog;\nimport android.app.Dialog;\nimport android.content.Context;\nimport android.content.DialogInterface;\nimport android.graphics.Bitmap;\nimport android.net.Uri;\nimport android.os.Build;\nimport android.os.Handler;\nimport android.os.Looper;\nimport android.os.Message;\nimport android.support.annotation.Keep;\nimport android.support.v7.app.AlertDialog;\nimport android.util.AttributeSet;\nimport android.util.Log;\nimport android.view.Gravity;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.webkit.ConsoleMessage;\nimport android.webkit.CookieManager;\nimport android.webkit.GeolocationPermissions;\nimport android.webkit.JavascriptInterface;\nimport android.webkit.JsPromptResult;\nimport android.webkit.JsResult;\nimport android.webkit.PermissionRequest;\nimport android.webkit.ValueCallback;\nimport android.webkit.WebChromeClient;\nimport android.webkit.WebSettings;\nimport android.webkit.WebStorage;\nimport android.webkit.WebView;\nimport android.widget.EditText;\nimport android.widget.FrameLayout;\n\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport java.io.File;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\n\n\n/**\n * Created by du on 16/12/29.\n */\n\npublic class DWebView extends WebView {\n    private static final String BRIDGE_NAME = "_dsbridge";\n    private static final String LOG_TAG = "dsBridge";\n    private static boolean isDebug = false;\n    private Map<String, Object> javaScriptNamespaceInterfaces = new HashMap<String, Object>();\n    private String APP_CACHE_DIRNAME;\n    private int callID = 0;\n    private WebChromeClient webChromeClient;\n\n    private volatile boolean alertBoxBlock = true;\n    private JavascriptCloseWindowListener javascriptCloseWindowListener = null;\n    private ArrayList<CallInfo> callInfoList;\n    private InnerJavascriptInterface innerJavascriptInterface = new InnerJavascriptInterface();\n    private Handler mainHandler = new Handler(Looper.getMainLooper());\n\n    private class InnerJavascriptInterface {\n\n        private void PrintDebugInfo(String error) {\n            Log.d(LOG_TAG, error);\n            if (isDebug) {\n                evaluateJavascript(String.format("alert(\'%s\')", "DEBUG ERR MSG:\\\\n" + error.replaceAll("\\\\\'", "\\\\\\\\\'")));\n            }\n        }\n\n        @Keep\n        @JavascriptInterface\n        public String call(String methodName, String argStr) {\n            String error = "Js bridge  called, but can\'t find a corresponded " +\n                    "JavascriptInterface object , please check your code!";\n            String[] nameStr = parseNamespace(methodName.trim());\n            methodName = nameStr[1];\n            Object jsb = javaScriptNamespaceInterfaces.get(nameStr[0]);\n            JSONObject ret = new JSONObject();\n            try {\n                ret.put("code", -1);\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n            if (jsb == null) {\n                PrintDebugInfo(error);\n                return ret.toString();\n            }\n            Object arg=null;\n            Method method = null;\n            String callback = null;\n\n            try {\n                JSONObject args = new JSONObject(argStr);\n                if (args.has("_dscbstub")) {\n                    callback = args.getString("_dscbstub");\n                }\n                if(args.has("data")) {\n                    arg = args.get("data");\n                }\n            } catch (JSONException e) {\n                error = String.format("The argument of \\"%s\\" must be a JSON object string!", methodName);\n                PrintDebugInfo(error);\n                e.printStackTrace();\n                return ret.toString();\n            }\n\n\n            Class<?> cls = jsb.getClass();\n            boolean asyn = false;\n            try {\n                method = cls.getMethod(methodName,\n                        new Class[]{Object.class, CompletionHandler.class});\n                asyn = true;\n            } catch (Exception e) {\n                try {\n                    method = cls.getMethod(methodName, new Class[]{Object.class});\n                } catch (Exception ex) {\n\n                }\n            }\n\n            if (method == null) {\n                error = "Not find method \\"" + methodName + "\\" implementation! please check if the  signature or namespace of the method is right ";\n                PrintDebugInfo(error);\n                return ret.toString();\n            }\n\n\n            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN_MR1) {\n                JavascriptInterface annotation = method.getAnnotation(JavascriptInterface.class);\n                if (annotation == null) {\n                    error = "Method " + methodName + " is not invoked, since  " +\n                            "it is not declared with JavascriptInterface annotation! ";\n                    PrintDebugInfo(error);\n                    return ret.toString();\n                }\n            }\n\n            Object retData;\n            method.setAccessible(true);\n            try {\n                if (asyn) {\n                    final String cb = callback;\n                    method.invoke(jsb, arg, new CompletionHandler() {\n\n                        @Override\n                        public void complete(Object retValue) {\n                            complete(retValue, true);\n                        }\n\n                        @Override\n                        public void complete() {\n                            complete(null, true);\n                        }\n\n                        @Override\n                        public void setProgressData(Object value) {\n                            complete(value, false);\n                        }\n\n                        private void complete(Object retValue, boolean complete) {\n                            try {\n                                JSONObject ret = new JSONObject();\n                                ret.put("code", 0);\n                                ret.put("data", retValue);\n                                //retValue = URLEncoder.encode(ret.toString(), "UTF-8").replaceAll("\\\\+", "%20");\n                                if (cb != null) {\n                                    //String script = String.format("%s(JSON.parse(decodeURIComponent(\\"%s\\")).data);", cb, retValue);\n                                    String script = String.format("%s(%s.data);", cb, ret.toString());\n                                    if (complete) {\n                                        script += "delete window." + cb;\n                                    }\n                                    //Log.d(LOG_TAG, "complete " + script);\n                                    evaluateJavascript(script);\n                                }\n                            } catch (Exception e) {\n                                e.printStackTrace();\n                            }\n                        }\n                    });\n                } else {\n                    retData = method.invoke(jsb, arg);\n                    ret.put("code", 0);\n                    ret.put("data", retData);\n                    return ret.toString();\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n                error = String.format("Call failed\xef\xbc\x9aThe parameter of \\"%s\\" in Java is invalid.", methodName);\n                PrintDebugInfo(error);\n                return ret.toString();\n            }\n            return ret.toString();\n        }\n\n    }\n\n    Map<Integer, OnReturnValue> handlerMap = new HashMap<>();\n\n    public interface JavascriptCloseWindowListener {\n        /**\n         * @return If true, close the current activity, otherwise, do nothing.\n         */\n        boolean onClose();\n    }\n\n\n    @Deprecated\n    public interface FileChooser {\n        @TargetApi(Build.VERSION_CODES.HONEYCOMB)\n        void openFileChooser(ValueCallback valueCallback, String acceptType);\n\n        @TargetApi(Build.VERSION_CODES.JELLY_BEAN)\n        void openFileChooser(ValueCallback<Uri> valueCallback,\n                             String acceptType, String capture);\n    }\n\n    public DWebView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        init();\n    }\n\n    public DWebView(Context context) {\n        super(context);\n        init();\n    }\n\n    /**\n     * Set debug mode. if in debug mode, some errors will be prompted by a dialog\n     * and the exception caused by the native handlers will not be captured.\n     *\n     * @param enabled\n     */\n    public static void setWebContentsDebuggingEnabled(boolean enabled) {\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n            WebView.setWebContentsDebuggingEnabled(enabled);\n        }\n        isDebug = enabled;\n    }\n\n    @SuppressLint({"SetJavaScriptEnabled", "AddJavascriptInterface"})\n    private void init() {\n        APP_CACHE_DIRNAME = getContext().getFilesDir().getAbsolutePath() + "/webcache";\n        WebSettings settings = getSettings();\n        settings.setDomStorageEnabled(true);\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n            CookieManager.getInstance().setAcceptThirdPartyCookies(this, true);\n            settings.setMixedContentMode(WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);\n        }\n        settings.setAllowFileAccess(false);\n        settings.setAppCacheEnabled(false);\n        settings.setCacheMode(WebSettings.LOAD_NO_CACHE);\n        settings.setJavaScriptEnabled(true);\n        settings.setLoadWithOverviewMode(true);\n        settings.setAppCachePath(APP_CACHE_DIRNAME);\n        settings.setUseWideViewPort(true);\n        super.setWebChromeClient(mWebChromeClient);\n        addInternalJavascriptObject();\n        if (Build.VERSION.SDK_INT > Build.VERSION_CODES.JELLY_BEAN) {\n            super.addJavascriptInterface(innerJavascriptInterface, BRIDGE_NAME);\n        } else {\n            // add dsbridge tag in lower android version\n            settings.setUserAgentString(settings.getUserAgentString() + " _dsbridge");\n        }\n    }\n\n\n    private String[] parseNamespace(String method) {\n        int pos = method.lastIndexOf(\'.\');\n        String namespace = "";\n        if (pos != -1) {\n            namespace = method.substring(0, pos);\n            method = method.substring(pos + 1);\n        }\n        return new String[]{namespace, method};\n    }\n\n    @Keep\n    private void addInternalJavascriptObject() {\n        addJavascriptObject(new Object() {\n\n            @Keep\n            @JavascriptInterface\n            public boolean hasNativeMethod(Object args) throws JSONException {\n                JSONObject jsonObject = (JSONObject) args;\n                String methodName = jsonObject.getString("name").trim();\n                String type = jsonObject.getString("type").trim();\n                String[] nameStr = parseNamespace(methodName);\n                Object jsb = javaScriptNamespaceInterfaces.get(nameStr[0]);\n                if (jsb != null) {\n                    Class<?> cls = jsb.getClass();\n                    boolean asyn = false;\n                    Method method = null;\n                    try {\n                        method = cls.getMethod(nameStr[1],\n                                new Class[]{Object.class, CompletionHandler.class});\n                        asyn = true;\n                    } catch (Exception e) {\n                        try {\n                            method = cls.getMethod(nameStr[1], new Class[]{Object.class});\n                        } catch (Exception ex) {\n\n                        }\n                    }\n                    if (method != null) {\n                        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN_MR1) {\n                            JavascriptInterface annotation = method.getAnnotation(JavascriptInterface.class);\n                            if (annotation == null) {\n                                return false;\n                            }\n                        }\n                        if ("all".equals(type) || (asyn && "asyn".equals(type) || (!asyn && "syn".equals(type)))) {\n                            return true;\n                        }\n\n                    }\n                }\n                return false;\n            }\n\n            @Keep\n            @JavascriptInterface\n            public String closePage(Object object) throws JSONException {\n                runOnMainThread(new Runnable() {\n                    @Override\n                    public void run() {\n                        if (javascriptCloseWindowListener == null\n                                || javascriptCloseWindowListener.onClose()) {\n                            Context context = getContext();\n                            if (context instanceof Activity) {\n                                ((Activity)context).onBackPressed();\n                            }\n                        }\n                    }\n                });\n                return null;\n            }\n\n            @Keep\n            @JavascriptInterface\n            public void disableJavascriptDialogBlock(Object object) throws JSONException {\n                JSONObject jsonObject = (JSONObject) object;\n                alertBoxBlock = !jsonObject.getBoolean("disable");\n            }\n\n            @Keep\n            @JavascriptInterface\n            public void dsinit(Object jsonObject) {\n                DWebView.this.dispatchStartupQueue();\n            }\n\n            @Keep\n            @JavascriptInterface\n            public void returnValue(final Object obj){\n                runOnMainThread(new Runnable() {\n                    @Override\n                    public void run() {\n                        JSONObject jsonObject = (JSONObject) obj;\n                        Object data = null;\n                        try {\n                            int id = jsonObject.getInt("id");\n                            boolean isCompleted = jsonObject.getBoolean("complete");\n                            OnReturnValue handler = handlerMap.get(id);\n                            if (jsonObject.has("data")) {\n                                data = jsonObject.get("data");\n                            }\n                            if (handler != null) {\n                                handler.onValue(data);\n                                if (isCompleted) {\n                                    handlerMap.remove(id);\n                                }\n                            }\n                        } catch (JSONException e) {\n                            e.printStackTrace();\n                        }\n                    }\n                });\n            }\n\n        }, "_dsb");\n    }\n\n    private void _evaluateJavascript(String script) {\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n            DWebView.super.evaluateJavascript(script, null);\n        } else {\n            super.loadUrl("javascript:" + script);\n        }\n    }\n\n    /**\n     * This method can be called in any thread, and if it is not called in the main thread,\n     * it will be automatically distributed to the main thread.\n     *\n     * @param script\n     */\n    public void evaluateJavascript(final String script) {\n        runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                _evaluateJavascript(script);\n            }\n        });\n    }\n\n    /**\n     * This method can be called in any thread, and if it is not called in the main thread,\n     * it will be automatically distributed to the main thread.\n     *\n     * @param url\n     */\n    @Override\n    public void loadUrl(final String url) {\n        runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                if (url != null && url.startsWith("javascript:")){\n                    DWebView.super.loadUrl(url);\n                }else{\n                    callInfoList = new ArrayList<>();\n                    DWebView.super.loadUrl(url);\n                }\n            }\n        });\n    }\n\n    /**\n     * This method can be called in any thread, and if it is not called in the main thread,\n     * it will be automatically distributed to the main thread.\n     *\n     * @param url\n     * @param additionalHttpHeaders\n     */\n    @Override\n    public void loadUrl(final String url, final Map<String, String> additionalHttpHeaders) {\n        runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                if (url != null && url.startsWith("javascript:")){\n                    DWebView.super.loadUrl(url, additionalHttpHeaders);\n                }else{\n                    callInfoList = new ArrayList<>();\n                    DWebView.super.loadUrl(url, additionalHttpHeaders);\n                }\n            }\n        });\n    }\n\n    @Override\n    public void reload() {\n        runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                callInfoList = new ArrayList<>();\n                DWebView.super.reload();\n            }\n        });\n    }\n\n    /**\n     * set a listener for javascript closing the current activity.\n     */\n    public void setJavascriptCloseWindowListener(JavascriptCloseWindowListener listener) {\n        javascriptCloseWindowListener = listener;\n    }\n\n\n    private static class CallInfo {\n        private String data;\n        private int callbackId;\n        private String method;\n\n        CallInfo(String handlerName, int id, Object[] args) {\n            if (args == null) args = new Object[0];\n            data = new JSONArray(Arrays.asList(args)).toString();\n            callbackId = id;\n            method = handlerName;\n        }\n\n        @Override\n        public String toString() {\n            JSONObject jo = new JSONObject();\n            try {\n                jo.put("method", method);\n                jo.put("callbackId", callbackId);\n                jo.put("data", data);\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n            return jo.toString();\n        }\n    }\n\n    private synchronized void dispatchStartupQueue() {\n        if (callInfoList != null) {\n            for (CallInfo info : callInfoList) {\n                dispatchJavascriptCall(info);\n            }\n            callInfoList = null;\n        }\n    }\n\n    private void dispatchJavascriptCall(CallInfo info) {\n        evaluateJavascript(String.format("window._handleMessageFromNative(%s)", info.toString()));\n    }\n\n    public synchronized <T> void callHandler(String method, Object[] args, final OnReturnValue<T> handler) {\n\n        CallInfo callInfo = new CallInfo(method, ++callID, args);\n        if (handler != null) {\n            handlerMap.put(callInfo.callbackId, handler);\n        }\n\n        if (callInfoList != null) {\n            callInfoList.add(callInfo);\n        } else {\n            dispatchJavascriptCall(callInfo);\n        }\n\n    }\n\n    public void callHandler(String method, Object[] args) {\n        callHandler(method, args, null);\n    }\n\n    public <T> void callHandler(String method, OnReturnValue<T> handler) {\n        callHandler(method, null, handler);\n    }\n\n\n    /**\n     * Test whether the handler exist in javascript\n     *\n     * @param handlerName\n     * @param existCallback\n     */\n    public void hasJavascriptMethod(String handlerName, OnReturnValue<Boolean> existCallback) {\n        callHandler("_hasJavascriptMethod", new Object[]{handlerName}, existCallback);\n    }\n\n    /**\n     * Add a java object which implemented the javascript interfaces to dsBridge with namespace.\n     * Remove the object using {@link #removeJavascriptObject(String) removeJavascriptObject(String)}\n     *\n     * @param object\n     * @param namespace if empty, the object have no namespace.\n     */\n    public void addJavascriptObject(Object object, String namespace) {\n        if (namespace == null) {\n            namespace = "";\n        }\n        if (object != null) {\n            javaScriptNamespaceInterfaces.put(namespace, object);\n        }\n    }\n\n    /**\n     * remove the javascript object with supplied namespace.\n     *\n     * @param namespace\n     */\n    public void removeJavascriptObject(String namespace) {\n        if (namespace == null) {\n            namespace = "";\n        }\n        javaScriptNamespaceInterfaces.remove(namespace);\n\n    }\n\n\n    public void disableJavascriptDialogBlock(boolean disable) {\n        alertBoxBlock = !disable;\n    }\n\n    @Override\n    public void setWebChromeClient(WebChromeClient client) {\n        webChromeClient = client;\n    }\n\n    private WebChromeClient mWebChromeClient = new WebChromeClient() {\n\n        @Override\n        public void onProgressChanged(WebView view, int newProgress) {\n            if (webChromeClient != null) {\n                webChromeClient.onProgressChanged(view, newProgress);\n            } else {\n                super.onProgressChanged(view, newProgress);\n            }\n        }\n\n        @Override\n        public void onReceivedTitle(WebView view, String title) {\n            if (webChromeClient != null) {\n                webChromeClient.onReceivedTitle(view, title);\n            } else {\n                super.onReceivedTitle(view, title);\n            }\n        }\n\n        @Override\n        public void onReceivedIcon(WebView view, Bitmap icon) {\n            if (webChromeClient != null) {\n                webChromeClient.onReceivedIcon(view, icon);\n            } else {\n                super.onReceivedIcon(view, icon);\n            }\n        }\n\n        @Override\n        public void onReceivedTouchIconUrl(WebView view, String url, boolean precomposed) {\n            if (webChromeClient != null) {\n                webChromeClient.onReceivedTouchIconUrl(view, url, precomposed);\n            } else {\n                super.onReceivedTouchIconUrl(view, url, precomposed);\n            }\n        }\n\n        @Override\n        public void onShowCustomView(View view, CustomViewCallback callback) {\n            if (webChromeClient != null) {\n                webChromeClient.onShowCustomView(view, callback);\n            } else {\n                super.onShowCustomView(view, callback);\n            }\n        }\n\n        @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)\n        public void onShowCustomView(View view, int requestedOrientation,\n                                     CustomViewCallback callback) {\n            if (webChromeClient != null) {\n                webChromeClient.onShowCustomView(view, requestedOrientation, callback);\n            } else {\n                super.onShowCustomView(view, requestedOrientation, callback);\n            }\n        }\n\n        @Override\n        public void onHideCustomView() {\n            if (webChromeClient != null) {\n                webChromeClient.onHideCustomView();\n            } else {\n                super.onHideCustomView();\n            }\n        }\n\n        @Override\n        public boolean onCreateWindow(WebView view, boolean isDialog,\n                                      boolean isUserGesture, Message resultMsg) {\n            if (webChromeClient != null) {\n                return webChromeClient.onCreateWindow(view, isDialog,\n                        isUserGesture, resultMsg);\n            }\n            return super.onCreateWindow(view, isDialog, isUserGesture, resultMsg);\n        }\n\n        @Override\n        public void onRequestFocus(WebView view) {\n            if (webChromeClient != null) {\n                webChromeClient.onRequestFocus(view);\n            } else {\n                super.onRequestFocus(view);\n            }\n        }\n\n        @Override\n        public void onCloseWindow(WebView window) {\n            if (webChromeClient != null) {\n                webChromeClient.onCloseWindow(window);\n            } else {\n                super.onCloseWindow(window);\n            }\n        }\n\n        @Override\n        public boolean onJsAlert(WebView view, String url, final String message, final JsResult result) {\n            if (!alertBoxBlock) {\n                result.confirm();\n            }\n            if (webChromeClient != null) {\n                if (webChromeClient.onJsAlert(view, url, message, result)) {\n                    return true;\n                }\n            }\n            Dialog alertDialog = new AlertDialog.Builder(getContext()).\n                    setMessage(message).\n                    setCancelable(false).\n                    setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {\n                        @Override\n                        public void onClick(DialogInterface dialog, int which) {\n                            dialog.dismiss();\n                            if (alertBoxBlock) {\n                                result.confirm();\n                            }\n                        }\n                    })\n                    .create();\n            alertDialog.show();\n            return true;\n        }\n\n        @Override\n        public boolean onJsConfirm(WebView view, String url, String message,\n                                   final JsResult result) {\n            if (!alertBoxBlock) {\n                result.confirm();\n            }\n            if (webChromeClient != null && webChromeClient.onJsConfirm(view, url, message, result)) {\n                return true;\n            } else {\n                DialogInterface.OnClickListener listener = new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialog, int which) {\n                        if (alertBoxBlock) {\n                            if (which == Dialog.BUTTON_POSITIVE) {\n                                result.confirm();\n                            } else {\n                                result.cancel();\n                            }\n                        }\n                    }\n                };\n                new AlertDialog.Builder(getContext())\n                        .setMessage(message)\n                        .setCancelable(false)\n                        .setPositiveButton(android.R.string.ok, listener)\n                        .setNegativeButton(android.R.string.cancel, listener).show();\n                return true;\n\n            }\n\n        }\n\n        @Override\n        public boolean onJsPrompt(WebView view, String url, final String message,\n                                  String defaultValue, final JsPromptResult result) {\n\n            if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.JELLY_BEAN) {\n                String prefix = "_dsbridge=";\n                if (message.startsWith(prefix)) {\n                    result.confirm(innerJavascriptInterface.call(message.substring(prefix.length()), defaultValue));\n                    return true;\n                }\n            }\n\n            if (!alertBoxBlock) {\n                result.confirm();\n            }\n\n            if (webChromeClient != null && webChromeClient.onJsPrompt(view, url, message, defaultValue, result)) {\n                return true;\n            } else {\n                final EditText editText = new EditText(getContext());\n                editText.setText(defaultValue);\n                if (defaultValue != null) {\n                    editText.setSelection(defaultValue.length());\n                }\n                float dpi = getContext().getResources().getDisplayMetrics().density;\n                DialogInterface.OnClickListener listener = new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialog, int which) {\n                        if (alertBoxBlock) {\n                            if (which == Dialog.BUTTON_POSITIVE) {\n                                result.confirm(editText.getText().toString());\n                            } else {\n                                result.cancel();\n                            }\n                        }\n                    }\n                };\n                new AlertDialog.Builder(getContext())\n                        .setTitle(message)\n                        .setView(editText)\n                        .setCancelable(false)\n                        .setPositiveButton(android.R.string.ok, listener)\n                        .setNegativeButton(android.R.string.cancel, listener)\n                        .show();\n                FrameLayout.LayoutParams layoutParams = new FrameLayout.LayoutParams(\n                        ViewGroup.LayoutParams.MATCH_PARENT,\n                        ViewGroup.LayoutParams.WRAP_CONTENT);\n                int t = (int) (dpi * 16);\n                layoutParams.setMargins(t, 0, t, 0);\n                layoutParams.gravity = Gravity.CENTER_HORIZONTAL;\n                editText.setLayoutParams(layoutParams);\n                int padding = (int) (15 * dpi);\n                editText.setPadding(padding - (int) (5 * dpi), padding, padding, padding);\n                return true;\n            }\n\n        }\n\n        @Override\n        public boolean onJsBeforeUnload(WebView view, String url, String message, JsResult result) {\n            if (webChromeClient != null) {\n                return webChromeClient.onJsBeforeUnload(view, url, message, result);\n            }\n            return super.onJsBeforeUnload(view, url, message, result);\n        }\n\n        @Override\n        public void onExceededDatabaseQuota(String url, String databaseIdentifier, long quota,\n                                            long estimatedDatabaseSize,\n                                            long totalQuota,\n                                            WebStorage.QuotaUpdater quotaUpdater) {\n            if (webChromeClient != null) {\n                webChromeClient.onExceededDatabaseQuota(url, databaseIdentifier, quota,\n                        estimatedDatabaseSize, totalQuota, quotaUpdater);\n            } else {\n                super.onExceededDatabaseQuota(url, databaseIdentifier, quota,\n                        estimatedDatabaseSize, totalQuota, quotaUpdater);\n            }\n        }\n\n        @Override\n        public void onReachedMaxAppCacheSize(long requiredStorage, long quota, WebStorage.QuotaUpdater quotaUpdater) {\n            if (webChromeClient != null) {\n                webChromeClient.onReachedMaxAppCacheSize(requiredStorage, quota, quotaUpdater);\n            }\n            super.onReachedMaxAppCacheSize(requiredStorage, quota, quotaUpdater);\n        }\n\n        @Override\n        public void onGeolocationPermissionsShowPrompt(String origin, GeolocationPermissions.Callback callback) {\n            if (webChromeClient != null) {\n                webChromeClient.onGeolocationPermissionsShowPrompt(origin, callback);\n            } else {\n                super.onGeolocationPermissionsShowPrompt(origin, callback);\n            }\n        }\n\n        @Override\n        public void onGeolocationPermissionsHidePrompt() {\n            if (webChromeClient != null) {\n                webChromeClient.onGeolocationPermissionsHidePrompt();\n            } else {\n                super.onGeolocationPermissionsHidePrompt();\n            }\n        }\n\n\n        @TargetApi(Build.VERSION_CODES.LOLLIPOP)\n        public void onPermissionRequest(PermissionRequest request) {\n            if (webChromeClient != null) {\n                webChromeClient.onPermissionRequest(request);\n            } else {\n                super.onPermissionRequest(request);\n            }\n        }\n\n\n        @TargetApi(Build.VERSION_CODES.LOLLIPOP)\n        @Override\n        public void onPermissionRequestCanceled(PermissionRequest request) {\n            if (webChromeClient != null) {\n                webChromeClient.onPermissionRequestCanceled(request);\n            } else {\n                super.onPermissionRequestCanceled(request);\n            }\n        }\n\n        @Override\n        public boolean onJsTimeout() {\n            if (webChromeClient != null) {\n                return webChromeClient.onJsTimeout();\n            }\n            return super.onJsTimeout();\n        }\n\n        @Override\n        public void onConsoleMessage(String message, int lineNumber, String sourceID) {\n            if (webChromeClient != null) {\n                webChromeClient.onConsoleMessage(message, lineNumber, sourceID);\n            } else {\n                super.onConsoleMessage(message, lineNumber, sourceID);\n            }\n        }\n\n        @Override\n        public boolean onConsoleMessage(ConsoleMessage consoleMessage) {\n            if (webChromeClient != null) {\n                return webChromeClient.onConsoleMessage(consoleMessage);\n            }\n            return super.onConsoleMessage(consoleMessage);\n        }\n\n        @Override\n        public Bitmap getDefaultVideoPoster() {\n\n            if (webChromeClient != null) {\n                return webChromeClient.getDefaultVideoPoster();\n            }\n            return super.getDefaultVideoPoster();\n        }\n\n        @Override\n        public View getVideoLoadingProgressView() {\n            if (webChromeClient != null) {\n                return webChromeClient.getVideoLoadingProgressView();\n            }\n            return super.getVideoLoadingProgressView();\n        }\n\n        @Override\n        public void getVisitedHistory(ValueCallback<String[]> callback) {\n            if (webChromeClient != null) {\n                webChromeClient.getVisitedHistory(callback);\n            } else {\n                super.getVisitedHistory(callback);\n            }\n        }\n\n\n        @TargetApi(Build.VERSION_CODES.LOLLIPOP)\n        public boolean onShowFileChooser(WebView webView, ValueCallback<Uri[]> filePathCallback,\n                                         FileChooserParams fileChooserParams) {\n            if (webChromeClient != null) {\n                return webChromeClient.onShowFileChooser(webView, filePathCallback, fileChooserParams);\n            }\n            return super.onShowFileChooser(webView, filePathCallback, fileChooserParams);\n        }\n\n\n        @Keep\n        @TargetApi(Build.VERSION_CODES.HONEYCOMB)\n        public void openFileChooser(ValueCallback valueCallback, String acceptType) {\n            if (webChromeClient instanceof FileChooser) {\n                ((FileChooser) webChromeClient).openFileChooser(valueCallback, acceptType);\n            }\n        }\n\n\n        @Keep\n        @TargetApi(Build.VERSION_CODES.JELLY_BEAN)\n        public void openFileChooser(ValueCallback<Uri> valueCallback,\n                                    String acceptType, String capture) {\n            if (webChromeClient instanceof FileChooser) {\n                ((FileChooser) webChromeClient).openFileChooser(valueCallback, acceptType, capture);\n            }\n        }\n\n    };\n\n    @Override\n    public void clearCache(boolean includeDiskFiles) {\n        super.clearCache(includeDiskFiles);\n        CookieManager.getInstance().removeAllCookie();\n        Context context = getContext();\n        try {\n            context.deleteDatabase("webview.db");\n            context.deleteDatabase("webviewCache.db");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        File appCacheDir = new File(APP_CACHE_DIRNAME);\n        File webviewCacheDir = new File(context.getCacheDir()\n                .getAbsolutePath() + "/webviewCache");\n\n        if (webviewCacheDir.exists()) {\n            deleteFile(webviewCacheDir);\n        }\n\n        if (appCacheDir.exists()) {\n            deleteFile(appCacheDir);\n        }\n    }\n\n    public void deleteFile(File file) {\n        if (file.exists()) {\n            if (file.isFile()) {\n                file.delete();\n            } else if (file.isDirectory()) {\n                File files[] = file.listFiles();\n                for (int i = 0; i < files.length; i++) {\n                    deleteFile(files[i]);\n                }\n            }\n            file.delete();\n        } else {\n            Log.e("Webview", "delete file no exists " + file.getAbsolutePath());\n        }\n    }\n\n    private void runOnMainThread(Runnable runnable) {\n        if (Looper.getMainLooper() == Looper.myLooper()) {\n            runnable.run();\n            return;\n        }\n        mainHandler.post(runnable);\n    }\n\n\n\n\n}\n'