b'\xef\xbb\xbf// UVa122 Trees on the level\n// Rujia Liu\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<vector>\n#include<queue>\nusing namespace std;\n\nconst int maxn = 256 + 10;\n\nstruct Node{\n  bool have_value;\n  int v;\n  Node* left, *right;\n  Node():have_value(false),left(NULL),right(NULL){}\n};\n\nNode* root;\n\nqueue<Node*> freenodes; // \xe7\xa9\xba\xe9\x97\xb2\xe5\x88\x97\xe8\xa1\xa8\nNode node[maxn]; // \xe5\x86\x85\xe5\xad\x98\xe6\xb1\xa0\n\nvoid init() {\n  for(int i = 0; i < maxn; i++)\n    freenodes.push(&node[i]);\n}\n\nNode* newnode() {\n  Node* u = freenodes.front();\n  u->left = u->right = NULL; u->have_value = false; // \xe9\x87\x8d\xe6\x96\xb0\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe8\xaf\xa5\xe7\xbb\x93\xe7\x82\xb9\n  freenodes.pop();\n  return u;\n}\n\nvoid deletenode(Node* u) {\n  freenodes.push(u);\n}\n\nbool failed;\nvoid addnode(int v, char* s) {\n  int n = strlen(s);\n  Node* u = root;\n  for(int i = 0; i < n; i++)\n    if(s[i] == \'L\') {\n      if(u->left == NULL) u->left = newnode();\n      u = u->left;\n    } else if(s[i] == \'R\') {\n      if(u->right == NULL) u->right = newnode();\n      u = u->right;\n    }\n  if(u->have_value) failed = true;\n  u->v = v;\n  u->have_value = true;\n}\n\nvoid remove_tree(Node* u) {\n  if(u == NULL) return;\n  remove_tree(u->left);\n  remove_tree(u->right);\n  deletenode(u);\n}\n\nchar s[maxn];\nbool read_input() {\n  failed = false;\n  remove_tree(root);\n  root = newnode();\n  for(;;) {\n    if(scanf("%s", s) != 1) return false;\n    if(!strcmp(s, "()")) break;\n    int v;\n    sscanf(&s[1], "%d", &v);\n    addnode(v, strchr(s, \',\')+1);\n  }\n  return true;\n}\n\nbool bfs(vector<int>& ans) {\n  queue<Node*> q;\n  ans.clear();\n  q.push(root);\n  while(!q.empty()) {\n    Node* u = q.front(); q.pop();\n    if(!u->have_value) return false;\n    ans.push_back(u->v);\n    if(u->left != NULL) q.push(u->left);\n    if(u->right != NULL) q.push(u->right);\n  }\n  return true;\n}\n\nint main() {\n  vector<int> ans;\n  init();\n  while(read_input()) {\n    if(!bfs(ans)) failed = 1;\n    if(failed) printf("not complete\\n");\n    else {\n      for(int i = 0; i < ans.size(); i++) {\n        if(i != 0) printf(" ");\n        printf("%d", ans[i]);\n      }\n      printf("\\n");\n    }\n  }\n  return 0;\n}\n'