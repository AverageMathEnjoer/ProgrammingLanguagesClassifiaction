b'package icu.nullptr.twifucker.hook\n\nimport android.app.Activity\nimport android.content.ClipData\nimport android.content.Intent\nimport android.net.Uri\nimport android.os.Bundle\nimport com.github.kyuubiran.ezxhelper.ClassUtils.loadClass\nimport com.github.kyuubiran.ezxhelper.HookFactory.`-Static`.createHook\nimport com.github.kyuubiran.ezxhelper.Log\nimport com.github.kyuubiran.ezxhelper.finders.MethodFinder\nimport icu.nullptr.twifucker.beforeMeasure\n\nobject UrlHook : BaseHook() {\n    override val name: String\n        get() = "UrlHook"\n\n    override fun init() {\n        MethodFinder.fromClass(Intent::class.java).filterByName("replaceExtras")\n            .filterByParamTypes(Bundle::class.java).first().createHook {\n                beforeMeasure(name) { param ->\n                    param.args[0] ?: return@beforeMeasure\n                    val bundle = param.args[0] as Bundle\n                    val extraText = bundle.getString(Intent.EXTRA_TEXT) ?: return@beforeMeasure\n                    if (extraText.isTwitterUrl()) {\n                        val newExtraText = clearExtraParams(extraText)\n                        bundle.putString(Intent.EXTRA_TEXT, newExtraText)\n                    }\n                }\n            }\n\n        MethodFinder.fromClass(Intent::class.java).filterByName("createChooser")\n            .filterByParamCount(2..3).filterByParamTypes {\n                it[0] == Intent::class.java && it[1] == CharSequence::class.java\n            }.forEach {\n                it.createHook {\n                    beforeMeasure(name) { param ->\n                        val intent = param.args[0] as Intent\n                        val extraText =\n                            intent.getStringExtra(Intent.EXTRA_TEXT) ?: return@beforeMeasure\n                        if (extraText.isTwitterUrl()) {\n                            intent.putExtra(Intent.EXTRA_TEXT, clearExtraParams(extraText))\n                        }\n                    }\n                }\n            }\n\n\n        MethodFinder.fromClass(ClipData::class.java).filterByName("newPlainText")\n            .filterByParamTypes(CharSequence::class.java, CharSequence::class.java).first()\n            .createHook {\n                beforeMeasure(name) { param ->\n                    val text = (param.args[1] as CharSequence).toString()\n                    if (text.isTwitterUrl()) {\n                        param.args[1] = clearExtraParams(text)\n                    }\n                }\n            }\n\n        MethodFinder.fromClass(loadClass("com.twitter.deeplink.implementation.UrlInterpreterActivity"))\n            .filterByName("onCreate").first().createHook {\n                beforeMeasure(name) { param ->\n                    val intent = (param.thisObject as Activity).intent\n                    val url = intent.data.toString()\n                    if (url.isTwitterUrl()) {\n                        val newUrl = clearExtraParams(url)\n                        intent.data = Uri.parse(newUrl)\n                    }\n                }\n            }\n    }\n\n    private fun String.isTwitterUrl(): Boolean {\n        val uri = Uri.parse(this)\n        return (uri.scheme == "https" || uri.scheme == "http") && (uri.host == "twitter.com" || uri.host == "www.twitter.com" || uri.host == "mobile.twitter.com")\n    }\n\n    private fun String.hasExtraParam(): Boolean {\n        return this == "t" || this == "s"\n    }\n\n    private fun clearExtraParams(url: String): String {\n        Log.d("Handle Url before: $url")\n        val oldUri = Uri.parse(url)\n        val newUri = oldUri.buildUpon().clearQuery()\n        oldUri.queryParameterNames.forEach {\n            if (it.hasExtraParam()) {\n                return@forEach\n            }\n            newUri.appendQueryParameter(it, oldUri.getQueryParameter(it))\n        }\n        val newUrl = newUri.build().toString()\n        Log.d("Handle Url after: $newUrl")\n        return newUrl\n    }\n}\n\n'