b'-- | Modular finally tagless extension of SQL99 and SQL92 syntaxes for various\n--   SQL2003 core and optional features.\nmodule Database.Beam.Backend.SQL.SQL2003\n    ( module Database.Beam.Backend.SQL.SQL99\n\n    , IsSql2003FromSyntax(..)\n    , IsSql2003OrderingElementaryOLAPOperationsSyntax(..)\n    , IsSql2003ExpressionSyntax(..)\n    , IsSql2003ExpressionElementaryOLAPOperationsSyntax(..)\n    , IsSql2003ExpressionAdvancedOLAPOperationsSyntax(..)\n    , IsSql2003BinaryAndVarBinaryDataTypeSyntax(..)\n    , IsSql2003WindowFrameSyntax(..)\n    , IsSql2003WindowFrameBoundsSyntax(..)\n    , IsSql2003WindowFrameBoundSyntax(..)\n    , IsSql2003EnhancedNumericFunctionsExpressionSyntax(..)\n    , IsSql2003EnhancedNumericFunctionsAggregationExpressionSyntax(..)\n    , IsSql2003FirstValueAndLastValueExpressionSyntax(..)\n    , IsSql2003NtileExpressionSyntax(..)\n    , IsSql2003NthValueExpressionSyntax(..)\n    , IsSql2003LeadAndLagExpressionSyntax(..)\n    , IsSql2008BigIntDataTypeSyntax(..)\n\n    , Sql2003SanityCheck\n    ) where\n\nimport Database.Beam.Backend.SQL.SQL99\n\nimport Data.Kind (Type)\nimport Data.Text (Text)\n\ntype Sql2003SanityCheck syntax =\n    ( Sql92ExpressionSyntax syntax ~ Sql2003WindowFrameExpressionSyntax (Sql2003ExpressionWindowFrameSyntax (Sql92ExpressionSyntax syntax))\n    , Sql92SelectOrderingSyntax (Sql92SelectSyntax syntax) ~\n      Sql2003WindowFrameOrderingSyntax (Sql2003ExpressionWindowFrameSyntax (Sql92ExpressionSyntax syntax))\n    )\n\nclass IsSql92FromSyntax from =>\n    IsSql2003FromSyntax from where\n\n    type Sql2003FromSampleMethodSyntax from :: Type\n\n    fromTableSample :: Sql92FromTableSourceSyntax from\n                    -> Sql2003FromSampleMethodSyntax from\n                    -> Maybe Double\n                    -> Maybe Integer\n                    -> Maybe Text\n                    -> from\n\n-- | Optional SQL2003 "Elementary OLAP operations" T611 support\nclass IsSql92OrderingSyntax ord =>\n    IsSql2003OrderingElementaryOLAPOperationsSyntax ord where\n    nullsFirstOrdering, nullsLastOrdering :: ord -> ord\n\nclass ( IsSql99ExpressionSyntax expr\n      , IsSql2003WindowFrameSyntax (Sql2003ExpressionWindowFrameSyntax expr) ) =>\n    IsSql2003ExpressionSyntax expr where\n\n    type Sql2003ExpressionWindowFrameSyntax expr :: Type\n\n    overE :: expr\n          -> Sql2003ExpressionWindowFrameSyntax expr\n          -> expr\n    rowNumberE :: expr\n\n-- | Optional SQL2003 "Advanced OLAP operations" T612 support\nclass IsSql2003ExpressionSyntax expr =>\n  IsSql2003ExpressionAdvancedOLAPOperationsSyntax expr where\n  percentRankAggE :: expr\n  denseRankAggE :: expr\n  cumeDistAggE :: expr\n\n-- | Optional SQL2003 "Elementary OLAP operations" T611 support\nclass IsSql2003ExpressionSyntax expr =>\n  IsSql2003ExpressionElementaryOLAPOperationsSyntax expr where\n\n  filterAggE :: expr -> expr -> expr\n  rankAggE :: expr\n\n-- | Optional SQL2003 "BINARY AND VARBINARY data type" T021 support\nclass IsSql99DataTypeSyntax dataType =>\n  IsSql2003BinaryAndVarBinaryDataTypeSyntax dataType where\n  binaryType :: Maybe Word -> dataType\n  varBinaryType :: Maybe Word -> dataType\n\nclass IsSql2003WindowFrameBoundsSyntax (Sql2003WindowFrameBoundsSyntax frame) =>\n    IsSql2003WindowFrameSyntax frame where\n    type Sql2003WindowFrameExpressionSyntax frame :: Type\n    type Sql2003WindowFrameOrderingSyntax frame :: Type\n    type Sql2003WindowFrameBoundsSyntax frame :: Type\n\n    frameSyntax :: Maybe [Sql2003WindowFrameExpressionSyntax frame]\n                -> Maybe [Sql2003WindowFrameOrderingSyntax frame]\n                -> Maybe (Sql2003WindowFrameBoundsSyntax frame)\n                -> frame\n\nclass IsSql2003WindowFrameBoundSyntax (Sql2003WindowFrameBoundsBoundSyntax bounds) =>\n    IsSql2003WindowFrameBoundsSyntax bounds where\n    type Sql2003WindowFrameBoundsBoundSyntax bounds :: Type\n    fromToBoundSyntax :: Sql2003WindowFrameBoundsBoundSyntax bounds\n                      -> Maybe (Sql2003WindowFrameBoundsBoundSyntax bounds)\n                      -> bounds\n\nclass IsSql2003WindowFrameBoundSyntax bound where\n    unboundedSyntax :: bound\n    nrowsBoundSyntax :: Int -> bound\n\n-- | Optional SQL2003 "Enhanced numeric functions" T621 support\nclass IsSql99ExpressionSyntax expr =>\n   IsSql2003EnhancedNumericFunctionsExpressionSyntax expr where\n\n  lnE, expE, sqrtE, ceilE, floorE :: expr -> expr\n  powerE :: expr -> expr -> expr\n\nclass IsSql99AggregationExpressionSyntax agg =>\n   IsSql2003EnhancedNumericFunctionsAggregationExpressionSyntax agg where\n\n  stddevPopE, stddevSampE, varPopE, varSampE\n    :: Maybe (Sql92AggregationSetQuantifierSyntax agg) -> agg -> agg\n\n  covarPopE, covarSampE, corrE, regrSlopeE, regrInterceptE, regrCountE,\n    regrRSquaredE, regrAvgXE, regrAvgYE, regrSXXE, regrSXYE, regrSYYE ::\n    Maybe (Sql92AggregationSetQuantifierSyntax agg) -> agg -> agg -> agg\n\n-- | Optional SQL2003 "NTILE function" T614 support\nclass IsSql99AggregationExpressionSyntax agg =>\n   IsSql2003NtileExpressionSyntax agg where\n  ntileE :: agg -> agg\n\n-- | Optional SQL2003 "LEAD and LAG function" T615 support\nclass IsSql99AggregationExpressionSyntax agg =>\n   IsSql2003LeadAndLagExpressionSyntax agg where\n  leadE, lagE :: agg -> Maybe agg -> Maybe agg -> agg\n\n-- | Optional SQL2003 "FIRST_VALUE and LAST_VALUE function" T616 support\nclass IsSql99AggregationExpressionSyntax agg =>\n   IsSql2003FirstValueAndLastValueExpressionSyntax agg where\n  firstValueE, lastValueE :: agg -> agg\n\n-- | Optional SQL2003 "NTH_VALUE function" T618 support\nclass IsSql99AggregationExpressionSyntax agg =>\n   IsSql2003NthValueExpressionSyntax agg where\n  nthValueE :: agg -> agg -> agg\n\n-- | Optional SQL2008 "BIGINT data type" T071 support\nclass IsSql99DataTypeSyntax dataType =>\n  IsSql2008BigIntDataTypeSyntax dataType where\n  bigIntType :: dataType\n'