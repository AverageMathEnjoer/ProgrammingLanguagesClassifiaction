b'package wendu.jsbdemo;\n\nimport android.util.Base64;\n\nimport org.json.JSONObject;\n\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.TimeUnit;\n\nimport okhttp3.Call;\nimport okhttp3.Callback;\nimport okhttp3.MediaType;\nimport okhttp3.OkHttpClient;\nimport okhttp3.Request;\nimport okhttp3.RequestBody;\nimport okhttp3.Response;\nimport wendu.dsbridge.CompletionHandler;\n\n/**\n * Created by du on 2017/10/31.\n *\n * This class handles the Ajax requests forwarded by fly.js in DWebView\n * More about fly.js see https://github.com/wendux/fly\n */\n\npublic class AjaxHandler {\n    public static void onAjaxRequest(final JSONObject requestData, final CompletionHandler handler){\n\n        // Define response structure\n        final Map<String, Object> responseData=new HashMap<>();\n        responseData.put("statusCode",0);\n\n        try {\n            int timeout =requestData.getInt("timeout");\n            // Create a okhttp instance and set timeout\n            final OkHttpClient okHttpClient = new OkHttpClient\n                    .Builder()\n                    .connectTimeout(timeout, TimeUnit.MILLISECONDS)\n                    .build();\n\n            // Determine whether you need to encode the response result.\n            // And encode when responseType is stream.\n            String contentType="";\n            boolean encode=false;\n            String responseType=requestData.optString("responseType",null);\n            if(responseType!=null&&responseType.equals("stream")){\n                encode=true;\n            }\n\n            Request.Builder rb= new Request.Builder();\n            rb.url(requestData.getString("url"));\n            JSONObject headers=requestData.getJSONObject("headers");\n\n            // Set request headers\n            Iterator iterator = headers.keys();\n            while(iterator.hasNext()){\n                String  key = (String) iterator.next();\n                String value = headers.getString(key);\n                String lKey=key.toLowerCase();\n                if(lKey.equals("cookie")){\n                    // Here you can use CookieJar to manage cookie in a unified way with you native code.\n                    continue;\n                }\n                if(lKey.toLowerCase().equals("content-type")){\n                    contentType=value;\n                }\n                rb.header(key,value);\n            }\n\n            // Create request body\n            if(requestData.getString("method").equals("POST")){\n                RequestBody requestBody=RequestBody\n                        .create(MediaType.parse(contentType),requestData.getString("data"));\n                rb.post(requestBody) ;\n            }\n            // Create and send HTTP requests\n            Call call=okHttpClient.newCall(rb.build());\n            final boolean finalEncode = encode;\n            call.enqueue(new Callback() {\n                @Override\n                public void onFailure(Call call, IOException e) {\n                    responseData.put("responseText",e.getMessage());\n                    handler.complete(new JSONObject(responseData).toString());\n                }\n\n                @Override\n                public void onResponse(Call call, Response response) throws IOException {\n                    String data;\n                    // If encoding is needed, the result is encoded by Base64 and returned\n                    if(finalEncode){\n                        data= Base64.encodeToString(response.body().bytes(),Base64.DEFAULT);\n                    }else{\n                        data=response.body().string();\n                    }\n                    responseData.put("responseText",data);\n                    responseData.put("statusCode",response.code());\n                    responseData.put("statusMessage",response.message());\n                    Map<String, List<String>> responseHeaders= response.headers().toMultimap();\n                    responseHeaders.remove(null);\n                    responseData.put("headers",responseHeaders);\n                    handler.complete(new JSONObject(responseData).toString());\n                }\n            });\n\n        }catch (Exception e){\n            responseData.put("responseText",e.getMessage());\n            handler.complete(new JSONObject(responseData).toString());\n        }\n    }\n}\n'