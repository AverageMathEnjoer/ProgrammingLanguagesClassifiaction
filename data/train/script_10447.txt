b'context("lfcShrink")\ntest_that("LFC shrinkage works", {\n  \n  # testing out various methods for LFC shrinkage\n  set.seed(1)\n  dds <- makeExampleDESeqDataSet(betaSD=1,n=200,m=20)\n  expect_error(lfcShrink(dds, coef=2), "first run")\n  dds <- DESeq(dds)\n  res <- results(dds, name="condition_B_vs_A")\n\n  # dds and res must match\n  idx <- 1:(nrow(dds)/2)\n  expect_error(lfcShrink(dds=dds, coef=2, res=res[idx,], type="normal"), "rownames")\n  expect_error(lfcShrink(dds=dds, coef=2, res=res[idx,], type="apeglm"), "rownames")\n\n  # some quick contrast tests\n  expect_error(lfcShrink(dds=dds, contrast=c("treatment","B","A"), res=res, type="normal"))\n  expect_error(lfcShrink(dds=dds, contrast=c("condition","C","A"), res=res, type="normal"))\n\n  # try out various types and ways of specifying coefs\n  res.n <- lfcShrink(dds=dds, coef="condition_B_vs_A", res=res, type="normal")\n  res.n <- lfcShrink(dds=dds, coef=2, res=res, type="normal")\n  res.n <- lfcShrink(dds=dds, coef=2, type="normal")\n  res.ape <- lfcShrink(dds=dds, coef=2, type="apeglm")\n  res.ash <- lfcShrink(dds=dds, res=res, type="ashr")\n\n  # prior info\n  #str(priorInfo(res.n))\n  #str(priorInfo(res.ape))\n  #str(priorInfo(res.ash))\n  \n  # ranged versions\n  gr.res <- results(dds, name="condition_B_vs_A", format="GRanges")\n  expect_error(lfcShrink(dds=dds, coef=2, type="normal", res=gr.res), "GRanges")\n  gr.res <- lfcShrink(dds=dds, coef=2, type="normal", format="GRanges")\n  gr.res <- lfcShrink(dds=dds, coef=2, type="apeglm", format="GRanges")\n  gr.res <- lfcShrink(dds=dds, coef=2, type="ashr", format="GRanges")\n  priorInfo(mcols(gr.res)) # still has priorInfo() on the metadata columns\n\n  # plot against true\n  ## par(mfrow=c(1,3))\n  ## plot(mcols(dds)$trueBeta, res.n$log2FoldChange); abline(0,1,col="red")\n  ## plot(mcols(dds)$trueBeta, res.ape$log2FoldChange); abline(0,1,col="red")\n  ## plot(mcols(dds)$trueBeta, res.ash$log2FoldChange); abline(0,1,col="red")\n\n  # LFC threshold for "normal" and "apeglm"\n  res0 <- results(dds, name="condition_B_vs_A", lfcThreshold=1)\n  res.n <- lfcShrink(dds=dds, coef=2, type="normal", lfcThreshold=1)\n  res.ape <- lfcShrink(dds=dds, coef=2, type="apeglm", lfcThreshold=1)\n  res.ash <- lfcShrink(dds=dds, coef=2, type="ashr", lfcThreshold=1)\n\n  # this doesn\'t work in R-devel as of June 2019...\n  #summary.res <- capture.output({ summary(res.n) })\n  #expect_true(any(grepl("1.00", summary.res)))\n  \n  #plotMA(res0, ylim=c(-4,4), cex=1); abline(h=c(-1,1),col="dodgerblue")\n  #plotMA(res.n, ylim=c(-4,4), cex=1); abline(h=c(-1,1),col="dodgerblue")\n  #plotMA(res.ape, ylim=c(-4,4), cex=1); abline(h=c(-1,1),col="dodgerblue")\n  \n  # s-value returned\n  res.ape <- lfcShrink(dds=dds, coef=2, type="apeglm", svalue=TRUE)\n  expect_true("svalue" %in% names(res.ape))\n  res.ash <- lfcShrink(dds=dds, res=res, type="ashr", svalue=TRUE)\n  expect_true("svalue" %in% names(res.ash))\n\n  # plotMA works with s-values\n  plotMA(res.ape, cex=1)\n  plotMA(res.ash, cex=1)\n  dev.off()\n\n  # summary works with s-values\n  summary.res <- capture.output({ summary(res.ape) })\n  summary.res <- capture.output({ summary(res.ash) })\n  \n  # list returned\n  res.ape <- lfcShrink(dds=dds, coef=2, type="apeglm", returnList=TRUE)\n  names(res.ape)\n  res.ash <- lfcShrink(dds=dds, res=res, type="ashr", returnList=TRUE)\n  names(res.ash)\n\n  # test wrong coef specified\n  resInt <- results(dds, name="Intercept")\n  expect_error(lfcShrink(dds=dds, coef=2, res=resInt, type="apeglm"))\n\n  # test supplied model.matrix\n  full <- model.matrix(~condition, colData(dds))\n  dds <- DESeq(dds, full=full)\n  res <- results(dds)\n  res.normal <- lfcShrink(dds=dds, coef=2, res=res, type="normal")\n  res.ape <- lfcShrink(dds=dds, coef=2, res=res, type="apeglm")\n\n  # only running LRT upstream\n  dds <- makeExampleDESeqDataSet(m=4, n=200)\n  mm <- model.matrix(~condition, colData(dds))\n  mm0 <- model.matrix(~1, colData(dds))\n  dds <- DESeq(dds, full=mm, reduced=mm0, test="LRT")\n  res.normal <- lfcShrink(dds, coef="conditionB", type="normal")\n\n  # only running glmGamPoi\n  dds <- makeExampleDESeqDataSet(m=4, n=200)\n  dds <- DESeq(dds, test="LRT", reduced=~1,\n               fitType="glmGamPoi", quiet=TRUE)\n  res <- results(dds)\n  expect_error(lfcShrink(dds, coef="conditionB", type="apeglm"), "standard errors")\n  \n})  \n'