b'{-# LANGUAGE StandaloneDeriving #-}\n\nmodule Control.Monad.Trans.Crtn.Queue where\n\n---------------------------\n-- queue\n---------------------------\n\ndata Queue a = Queue\n  { fqueue :: [a],\n    bqueue :: [a]\n  }\n\nderiving instance (Show a) => Show (Queue a)\n\nemptyQueue :: Queue a\nemptyQueue = Queue [] []\n\nenqueue :: a -> Queue a -> Queue a\nenqueue y (Queue xs ys) = Queue xs (y : ys)\n\ndequeue :: Queue a -> (Queue a, Maybe a)\ndequeue (Queue (x : xs) ys) = (Queue xs ys, Just x)\ndequeue q@(Queue [] []) = (q, Nothing)\ndequeue (Queue [] ys) = dequeue (Queue (reverse ys) [])\n'