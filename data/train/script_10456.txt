b'\xef\xbb\xbf// UVa101 The Blocks Problem\n// Rujia Liu\n#include <cstdio>\n#include <string>\n#include <vector>\n#include <iostream>\nusing namespace std;\n\nconst int maxn = 30;\nint n;\nvector<int> pile[maxn]; // \xe6\xaf\x8f\xe4\xb8\xaapile[i]\xe6\x98\xaf\xe4\xb8\x80\xe4\xb8\xaavector\n\n// \xe6\x89\xbe\xe6\x9c\xa8\xe5\x9d\x97a\xe6\x89\x80\xe5\x9c\xa8\xe7\x9a\x84pile\xe5\x92\x8cheight\xef\xbc\x8c\xe4\xbb\xa5\xe5\xbc\x95\xe7\x94\xa8\xe7\x9a\x84\xe5\xbd\xa2\xe5\xbc\x8f\xe8\xbf\x94\xe5\x9b\x9e\xe8\xb0\x83\xe7\x94\xa8\xe8\x80\x85\nvoid find_block(int a, int& p, int& h) {\n  for(p = 0; p < n; p++)\n    for(h = 0; h < pile[p].size(); h++)\n      if(pile[p][h] == a) return;\n}\n\n// \xe6\x8a\x8a\xe7\xac\xacp\xe5\xa0\x86\xe9\xab\x98\xe5\xba\xa6\xe4\xb8\xbah\xe7\x9a\x84\xe6\x9c\xa8\xe5\x9d\x97\xe4\xb8\x8a\xe6\x96\xb9\xe7\x9a\x84\xe6\x89\x80\xe6\x9c\x89\xe6\x9c\xa8\xe5\x9d\x97\xe7\xa7\xbb\xe5\x9b\x9e\xe5\x8e\x9f\xe4\xbd\x8d\nvoid clear_above(int p, int h) {\n  for(int i = h+1; i < pile[p].size(); i++) {\n    int b = pile[p][i];\n    pile[b].push_back(b); // \xe6\x8a\x8a\xe6\x9c\xa8\xe5\x9d\x97b\xe6\x94\xbe\xe5\x9b\x9e\xe5\x8e\x9f\xe4\xbd\x8d\n  }\n  pile[p].resize(h+1); // pile\xe5\x8f\xaa\xe5\xba\x94\xe4\xbf\x9d\xe7\x95\x99\xe4\xb8\x8b\xe6\xa0\x870~h\xe7\x9a\x84\xe5\x85\x83\xe7\xb4\xa0\n}\n\n// \xe6\x8a\x8a\xe7\xac\xacp\xe5\xa0\x86\xe9\xab\x98\xe5\xba\xa6h\xe5\x8f\x8a\xe5\x85\xb6\xe4\xb8\x8a\xe6\x96\xb9\xe7\x9a\x84\xe6\x9c\xa8\xe5\x9d\x97\xe6\x95\xb4\xe4\xbd\x93\xe7\xa7\xbb\xe5\x8a\xa8\xe5\x88\xb0p2\xe5\xa0\x86\xe7\x9a\x84\xe9\xa1\xb6\xe9\x83\xa8\nvoid pile_onto(int p, int h, int p2) {\n  for(int i = h; i < pile[p].size(); i++)\n    pile[p2].push_back(pile[p][i]);\n  pile[p].resize(h);\n}\n\nvoid print() {\n  for(int i = 0; i < n; i++) {\n    printf("%d:", i);\n    for(int j = 0; j < pile[i].size(); j++) printf(" %d", pile[i][j]);\n    printf("\\n");\n  }  \n}\n\nint main() {\n  int a, b;\n  cin >> n;\n  string s1, s2;\n  for(int i = 0; i < n; i++) pile[i].push_back(i);\n  while(cin >> s1 >> a >> s2 >> b) {\n    int pa, pb, ha, hb;\n    find_block(a, pa, ha);\n    find_block(b, pb, hb);\n    if(pa == pb) continue; // \xe9\x9d\x9e\xe6\xb3\x95\xe6\x8c\x87\xe4\xbb\xa4\n    if(s2 == "onto") clear_above(pb, hb);\n    if(s1 == "move") clear_above(pa, ha);\n    pile_onto(pa, ha, pb);\n  }\n  print();\n  return 0;\n}\n'