b'import com.github.eprendre.tingshu.extensions.splitQuery\nimport com.github.eprendre.tingshu.utils.Book\nimport com.github.eprendre.tingshu.utils.Episode\nimport com.github.kittinunf.fuel.Fuel\nimport com.github.kittinunf.fuel.core.FuelManager\nimport com.github.kittinunf.fuel.json.responseJson\nimport org.json.JSONObject\nimport org.junit.Test\nimport java.net.URL\nimport java.net.URLEncoder\nimport java.security.cert.X509Certificate\nimport javax.net.ssl.HostnameVerifier\nimport javax.net.ssl.SSLContext\nimport javax.net.ssl.TrustManager\nimport javax.net.ssl.X509TrustManager\n\n/**\n * \xe6\x9c\x89\xe5\x85\x94\xe9\x98\x85\xe8\xaf\xbb\xe6\xb5\x8b\xe8\xaf\x95\n */\nclass YouTuYueDuTest {\n    private val headers = mapOf(\n    "devicetype" to "3",\n    "channelname" to "official",\n    "origin" to "https://www.mituyuedu.com",\n    "Referer" to "https://www.mituyuedu.com",\n    "seq" to "11111111111111111111111111111111",\n    "User-Agent" to "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36",\n    "version" to "1.9.0"\n    )\n    private val manager : FuelManager = FuelManager().apply {\n        val trustAllCerts = arrayOf<TrustManager>(object : X509TrustManager {\n            override fun getAcceptedIssuers(): Array<X509Certificate>? = null\n            override fun checkClientTrusted(chain: Array<X509Certificate>, authType: String) = Unit\n            override fun checkServerTrusted(chain: Array<X509Certificate>, authType: String) = Unit\n        })\n\n        socketFactory = SSLContext.getInstance("SSL").apply {\n            init(null, trustAllCerts, java.security.SecureRandom())\n        }.socketFactory\n\n        hostnameVerifier = HostnameVerifier { _, _ -> true }\n    }\n\n    /**\n     * \xe5\x8f\x91\xe7\x8e\xb0\xe5\x88\x86\xe7\xb1\xbb\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe6\xb2\xa1\xe6\x9c\x89\xe5\x88\x99\xe4\xb8\x8d\xe7\x94\xa8\xe6\x8f\x90\xe4\xbe\x9b\n     */\n    @Test\n    fun categories() {\n        val url = "https://app1.youzibank.com/audio/book/cls/list"\n        val jsonObject = manager.get(url)\n            .header(headers)\n            .responseJson()\n            .third.get().obj()\n\n        val data = jsonObject.getJSONArray("data")\n        (0 until data.length()).forEach { i ->\n            val obj = data.getJSONObject(i)\n            val name = obj.getString("clsName")\n            val code = obj.getInt("code")\n            val subCls = obj.getJSONArray("subCls")\n            println(name)\n            (0 until subCls.length()).forEach { t ->\n                val subObj = subCls.getJSONObject(t)\n                val subName = subObj.getString("clsName")\n                val subCode = subObj.getInt("code")\n                val parentCode = subObj.getInt("parentCode")\n                println(subName)\n            }\n            println("--------------")\n        }\n    }\n\n    /**\n     * \xe6\x90\x9c\xe7\xb4\xa2\n     * \xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x94\xe5\x9b\x9e\xef\xbc\x9a1.\xe7\xbb\x93\xe6\x9e\x9clist\xef\xbc\x8c 2.\xe6\x80\xbb\xe9\xa1\xb5\xe6\x95\xb0\n     */\n    @Test\n    fun search() {\n        val keywords = "\xe4\xbb\x99" //\xe6\x90\x9c\xe7\xb4\xa2\xe5\x85\xb3\xe9\x94\xae\xe8\xaf\x8d\n        val page = 1 //\xe5\xbd\x93\xe5\x89\x8d\xe9\xa1\xb5\xe6\x95\xb0\n        val encodedKeywords = URLEncoder.encode(keywords, "utf-8") //\xe7\xbc\x96\xe7\xa0\x81\n        val url = "https://app1.youzibank.com/es/search/audio?q=${encodedKeywords}&pageSize=10&pageNo=${page}&page=${page}&size=10"\n\n        val jsonObject = manager.get(url)\n            .header(headers)\n            .responseJson()\n            .third.get().obj()\n\n        val pageCount = jsonObject.getInt("pageCount")\n        val list = ArrayList<Book>()\n\n        val data = jsonObject.getJSONArray("data")\n        (0 until data.length()).forEach { i ->\n            val item = data.getJSONObject(i)\n            val coverUrl = "https://img.dayouzh.com/klajdfiaoj/music_collect${item.getString("photoPath")}"\n            val bookUrl = "https://app1.youzibank.com/audio/chapter/listAll?audioId=${item.getInt("id")}"\n            val title = item.getString("name")\n            val author = ""\n            val artist = item.getString("actorName")\n            val status = "\xe5\x85\xb1 ${item.getInt("chapterCnt")} \xe7\xab\xa0"\n            val intro = item.getString("intro")\n            list.add(\n                Book(coverUrl,\n                    bookUrl,\n                    title,\n                    author,\n                    artist\n                ).apply {\n                    this.status = status\n                    this.intro = intro\n                }\n            )\n        }\n\n        list.take(5).forEach {\n            println(it)\n        }\n        assert(list.size > 0)\n    }\n\n    /**\n     * \xe4\xb9\xa6\xe7\xb1\x8d\xe8\xaf\xa6\xe6\x83\x85\xe9\xa1\xb5\xef\xbc\x8c\xe5\x8c\x85\xe5\x90\xab\xe6\x9b\xb4\xe5\xa4\x9a\xe7\x9a\x84\xe4\xb9\xa6\xe7\xb1\x8d\xe4\xbf\xa1\xe6\x81\xaf\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a\xe7\xab\xa0\xe8\x8a\x82\xe5\x88\x97\xe8\xa1\xa8\xe3\x80\x82\n     * \xe7\xab\xa0\xe8\x8a\x82\xe5\x88\x97\xe8\xa1\xa8\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x94\xe5\x9b\x9e\xef\xbc\x8c\xe5\x85\xb6\xe5\xae\x83\xe4\xb9\xa6\xe7\xb1\x8d\xe4\xbf\xa1\xe6\x81\xaf\xe7\x9c\x8b\xe6\x83\x85\xe5\x86\xb5\xe8\xbf\x94\xe5\x9b\x9e\n     */\n    @Test\n    fun bookDetail() {\n        val bookUrl = "https://app1.youzibank.com/audio/chapter/listAll?audioId=141"\n        val jsonObject = manager.get(bookUrl)\n            .header(headers)\n            .responseJson()\n            .third.get().obj()\n\n        val episodes = ArrayList<Episode>()\n        val data = jsonObject.getJSONArray("data")\n        (0 until data.length()).forEach {\n            val item = data.getJSONObject(it)\n            val name = item.getString("name")\n            val musicPathObject = JSONObject(item.getString("musicPath"))\n            val musicPath = when {\n                musicPathObject.has("h") -> {\n                    musicPathObject.getJSONObject("h").getString("addr")\n                }\n                musicPathObject.has("m") -> {\n                    musicPathObject.getJSONObject("m").getString("addr")\n                }\n                else -> {\n                    musicPathObject.getJSONObject("l").getString("addr")\n                }\n            }\n            val url = "https://ys.jiuhew.com/klajdfiaoj/music_collect${musicPath}"\n            episodes.add(Episode(name, url))\n        }\n        episodes.take(10).forEach {\n            println(it)\n        }\n        assert(episodes.isNotEmpty())\n    }\n\n    /**\n     * \xe5\x88\x86\xe7\xb1\xbb\xe5\x88\x97\xe8\xa1\xa8\xe8\x8e\xb7\xe5\x8f\x96\n     * \xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x94\xe5\x9b\x9e\xef\xbc\x9a1. \xe4\xb8\x8b\xe4\xb8\x80\xe9\xa1\xb5\xe5\x9c\xb0\xe5\x9d\x80 2. \xe5\xbd\x93\xe5\x89\x8d\xe9\xa1\xb5\xe6\x95\xb0 3. \xe6\x80\xbb\xe9\xa1\xb5\xe6\x95\xb0 4. \xe4\xb9\xa6\xe7\xb1\x8dlist\n     */\n    @Test\n    fun categoryList() {\n        val parentId = 38\n        val subId = 39\n        val url = "https://app1.youzibank.com/audio/list?fullFlag=2&orderBy=play_cnt&clsIdFirst=${parentId}&clsIdSecond=${subId}&pageNo=1&pageSize=10&page=1&size=10"\n        val jsonObject = manager.get(url)\n            .header(headers)\n            .responseJson()\n            .third.get().obj()\n\n        val currentPage = jsonObject.getInt("pageNo")\n        val pageCount = jsonObject.getInt("pageCount")\n\n        val list = ArrayList<Book>()\n        val nextUrl = if (currentPage < pageCount) {\n            val queryMap = splitQuery(URL(url))\n            queryMap["pageNo"] = (currentPage + 1).toString()\n            queryMap["page"] = (currentPage + 1).toString()\n            "https://app1.youzibank.com/audio/list?" + queryMap.map { "${it.key}=${it.value}" }.joinToString("&")\n        } else {\n            ""\n        }\n\n        val data = jsonObject.getJSONArray("data")\n        (0 until data.length()).forEach { i ->\n            val item = data.getJSONObject(i)\n            val coverUrl = "https://img.dayouzh.com/klajdfiaoj/music_collect${item.getString("photoPath")}"\n            val bookUrl = "https://app1.youzibank.com/audio/chapter/listAll?audioId=${item.getInt("id")}"\n            val title = item.getString("name")\n            val author = ""\n            val artist = item.getString("actorName")\n            val status = "\xe5\x85\xb1 ${item.getInt("chapterCnt")}\xe7\xab\xa0"\n            val intro = item.getString("intro")\n            list.add(\n                Book(coverUrl,\n                    bookUrl,\n                    title,\n                    author,\n                    artist\n                ).apply {\n                    this.status = status\n                    this.intro = intro\n                }\n            )\n        }\n        println(nextUrl)\n        println("$currentPage / $pageCount")\n        list.take(5).forEach { println(it) }\n        assert(list.isNotEmpty())\n    }\n}'