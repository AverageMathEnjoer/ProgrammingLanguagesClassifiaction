b'{-# LANGUAGE GADTs #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n\nmodule Simple where\n\nimport Control.Monad.Reader\n--\nimport Control.Monad.Trans.Crtn\nimport Control.Monad.Trans.Crtn.Logger\nimport Control.Monad.Trans.Crtn.Object\n\n-- |\nsimplelogger :: (MonadLog m) => LogServer m ()\nsimplelogger = loggerW 0\n\n-- |\nloggerW :: forall m. (MonadLog m) => Int -> LogServer m ()\nloggerW num = ReaderT (f num)\n  where\n    f :: Int -> LogInput -> CrtnT (Res LogOp) (Arg LogOp) m ()\n    f n req =\n      case req of\n        Arg WriteLog msg -> do\n          lift (scribe ("log number " ++ show n ++ " : " ++ msg))\n          req\' <- request (Res WriteLog ())\n          f (n + 1) req\'\n'