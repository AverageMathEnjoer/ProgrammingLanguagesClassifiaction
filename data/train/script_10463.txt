b'{-# LANGUAGE DeriveDataTypeable, BangPatterns #-}\nimport Test.Tasty\nimport Test.Tasty.Options\nimport Test.Tasty.HUnit\nimport Data.Proxy\nimport Data.Typeable\nimport Text.Read\nimport Control.Concurrent\nimport System.Random (newStdGen, RandomGen)\nimport System.Random.Shuffle (shuffle\')\n\n-- The shuffle\' function from System.Random.Shuffle is broken; it doesn\'t work on empty lists.\nshuffle :: RandomGen gen => [a] -> Int -> gen -> [a]\nshuffle l n g\n  | n == 0 = []\n  | otherwise = shuffle\' l n g\n\nmain :: IO ()\nmain = do\n  gen <- newStdGen\n\n  defaultMainWithIngredients (includingOptions allOptions : defaultIngredients) $\n    askOption $ \\(Result requestedResult) ->\n    askOption $ \\(Fast n_fast) ->\n    askOption $ \\(Slow n_slow) ->\n      testGroup "Test" $\n        -- we shuffle fast and slow tests to test various code paths in the \'statusMapResult\' function\n        shuffle\n          (replicate n_slow (testCase "Slow test" $ threadDelay (5*10^6)) ++\n           replicate n_fast (testCase "Fast test" $ threadDelay (10^4)))\n          (n_slow + n_fast) -- number of elements\n          gen\n        ++\n        [ testCase "The test that may fail" $ assertBool "Requested failure" requestedResult ]\n\nallOptions :: [OptionDescription]\nallOptions =\n  [ Option (Proxy :: Proxy Result)\n  , Option (Proxy :: Proxy Slow)\n  , Option (Proxy :: Proxy Fast)\n  ]\n\nnewtype Result = Result Bool\n  deriving Typeable\ninstance IsOption Result where\n  defaultValue = Result True\n  parseValue = fmap Result . readMaybe\n  optionName = return "result"\n  optionHelp = return "True means the suite will succeed, False means it will fail"\nnewtype Fast = Fast Int\n  deriving Typeable\ninstance IsOption Fast where\n  defaultValue = Fast 0\n  parseValue = fmap Fast . readMaybe\n  optionName = return "fast"\n  optionHelp = return "Number of fast tests to add"\nnewtype Slow = Slow Int\n  deriving Typeable\ninstance IsOption Slow where\n  defaultValue = Slow 0\n  parseValue = fmap Slow . readMaybe\n  optionName = return "slow"\n  optionHelp = return "Number of slow tests to add"\n'