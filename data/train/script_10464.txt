b'module AppSpec where\n\nimport           Control.Exception              ( throwIO\n                                                , ErrorCall(..)\n                                                )\nimport           Control.Monad.Trans.Except\nimport           Network.HTTP.Client            ( Manager\n                                                , newManager\n                                                , defaultManagerSettings\n                                                )\nimport           Network.HTTP.Types\nimport           Network.Wai.Handler.Warp\nimport           Servant.API\nimport           Servant.Client\nimport           Test.Hspec\n\nimport           Api\nimport           App                            ( app )\n\ngetItemIds :: ClientM [ItemId]\ngetItem :: ItemId -> ClientM Item\npostItem :: String -> ClientM ItemId\ndeleteItem :: ItemId -> ClientM ()\ngetItemIds :<|> getItem :<|> postItem :<|> deleteItem = client api\n\nspec :: Spec\nspec = do\n  describe "app" $ around withApp $ do\n    context "/api/item" $ do\n      it "returns an empty list" $ \\host -> do\n        try host getItemIds `shouldReturn` []\n\n      context "/api/item/:id" $ do\n        it "returns a 404 for missing items" $ \\(manager, baseUrl) -> do\n          Left err <- runClientM (getItem $ ItemId 23)\n                                 (ClientEnv manager baseUrl Nothing defaultMakeClientRequest)\n          errorStatus err `shouldBe` (Just notFound404)\n\n      context "POST" $ do\n        it "allows to create an item" $ \\host -> do\n          i <- try host $ postItem "foo"\n          try host (getItem i) `shouldReturn` Item i "foo"\n\n        it "lists created items" $ \\host -> do\n          i <- try host $ postItem "foo"\n          try host getItemIds `shouldReturn` [i]\n\n        it "lists 2 created items" $ \\host -> do\n          a <- try host $ postItem "foo"\n          b <- try host $ postItem "bar"\n          try host getItemIds `shouldReturn` [a, b]\n\n      context "DELETE" $ do\n        it "allows to delete items" $ \\host -> do\n          i <- try host $ postItem "foo"\n          _ <- try host $ deleteItem i\n          try host getItemIds `shouldReturn` []\n\ntype Host = (Manager, BaseUrl)\n\ntry :: Host -> ClientM a -> IO a\ntry (manager, baseUrl) action = do\n  result <- runClientM action (ClientEnv manager baseUrl Nothing defaultMakeClientRequest)\n  case result of\n    Right x   -> return x\n    Left  err -> throwIO $ ErrorCall $ show err\n\nwithApp :: (Host -> IO a) -> IO a\nwithApp action = testWithApplication app $ \\port -> do\n  manager <- newManager defaultManagerSettings\n  let url = BaseUrl Http "localhost" port ""\n  action (manager, url)\n\nerrorStatus :: ClientError -> Maybe Status\nerrorStatus servantError = case servantError of\n  FailureResponse _ response -> Just $ responseStatusCode response\n  _                          -> Nothing\n\n'