b'{-# LANGUAGE CPP #-}\n{-# LANGUAGE NumericUnderscores #-}\n{-# LANGUAGE Rank2Types #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n\nmodule Hoodle.GUI where\n\nimport Control.Concurrent (forkIO, threadDelay)\nimport Control.Exception (SomeException (..), catch)\nimport Control.Lens (view)\nimport Control.Monad (forever, return, void, (>>), (>>=))\nimport Control.Monad.Trans (liftIO)\nimport Data.Foldable (forM_, traverse_)\nimport Data.IORef (newIORef, readIORef)\nimport Data.Maybe (Maybe (..), maybe)\nimport qualified Graphics.UI.Gtk as Gtk\nimport Hoodle.Accessor\n  ( lensSetToggleUIForFlag,\n    setToggleUIForFlag,\n  )\nimport Hoodle.Config\n  ( getMaxUndo,\n    getPenConfig,\n    getWidgetConfig,\n    getXInputConfig,\n    loadConfigFile,\n  )\nimport Hoodle.Coroutine.Callback (eventHandler)\nimport Hoodle.Coroutine.Default (initCoroutine)\nimport Hoodle.Device (initDevice)\nimport Hoodle.ModelAction.Window (setTitleFromFileName)\nimport Hoodle.Script.Hook (Hook)\nimport Hoodle.Type.Event\n  ( AllEvent (SysEv, UsrEv),\n    MenuEvent (MenuQuit),\n    SystemEvent (ClockUpdateEvent),\n    UserEvent\n      ( GetHoodleFileInfo,\n        Initialized,\n        Menu\n      ),\n  )\nimport Hoodle.Type.HoodleState\n  ( HoodleState,\n    callBack,\n    doesEmbedImage,\n    doesEmbedPDF,\n    doesUsePopUpMenu,\n    doesUseTouch,\n    doesUseXInput,\n    rootNotebook,\n    settings,\n    statusBar,\n  )\nimport System.Directory (createDirectoryIfMissing)\nimport System.Environment (getEnv)\nimport System.FilePath ((</>))\nimport System.IO\n  ( FilePath,\n    IO,\n    IOMode (WriteMode),\n    hClose,\n    hPutStrLn,\n    openFile,\n  )\n--\nimport Prelude (Bool (..), String, error, ($), (.))\n\n-- |\nstartGUI :: Maybe FilePath -> Maybe Hook -> IO ()\nstartGUI mfname mhook = do\n  _ <- Gtk.initGUI\n  window <- Gtk.windowNew\n  Gtk.windowSetDefaultSize window 800 400\n  cfg <- loadConfigFile\n  devlst <- initDevice cfg\n  maxundo <- getMaxUndo cfg >>= maybe (return 50) return\n  xinputbool <- getXInputConfig cfg\n  varcsr <- getPenConfig cfg\n  (usepz, uselyr) <- getWidgetConfig cfg\n  (tref, st0, ui, vbox) <- initCoroutine devlst window mhook maxundo (xinputbool, usepz, uselyr, varcsr)\n  setTitleFromFileName st0\n  void $ lensSetToggleUIForFlag "UXINPUTA" (settings . doesUseXInput) st0\n  void $ lensSetToggleUIForFlag "HANDA" (settings . doesUseTouch) st0\n  void $ lensSetToggleUIForFlag "POPMENUA" (settings . doesUsePopUpMenu) st0\n  void $ lensSetToggleUIForFlag "EBDIMGA" (settings . doesEmbedImage) st0\n  void $ lensSetToggleUIForFlag "EBDPDFA" (settings . doesEmbedPDF) st0\n\n  _ <- setToggleUIForFlag "TOGGLENETSRCA" False st0\n  --\n  outerLayout ui vbox st0\n  _ <- window `Gtk.on` Gtk.deleteEvent $ do\n    liftIO $ eventHandler tref (UsrEv (Menu MenuQuit))\n    return True\n  Gtk.widgetShowAll window\n\n  _ <- forkIO $ clock (eventHandler tref)\n  let mainaction = eventHandler tref (UsrEv (Initialized mfname)) >> Gtk.mainGUI\n  mainaction `catch` \\(_e :: SomeException) -> do\n    homepath <- getEnv "HOME"\n    let dir = homepath </> ".hoodle.d"\n    createDirectoryIfMissing False dir\n    outh <- openFile (dir </> "error.log") WriteMode\n    hPutStrLn outh "error occured"\n    hClose outh\n  return ()\n\nclock :: (AllEvent -> IO ()) -> IO ()\nclock evhandler = forever $ do\n  threadDelay 1_000_000\n  Gtk.postGUIAsync (evhandler (SysEv ClockUpdateEvent))\n\nouterLayout :: Gtk.UIManager -> Gtk.VBox -> HoodleState -> IO ()\nouterLayout ui vbox xst = do\n  let notebook = view rootNotebook xst\n      mstatusbar = view statusBar xst\n  menubar <-\n    Gtk.uiManagerGetWidget ui "/ui/menubar"\n      >>= maybe (error "GUI.hs:no menubar") return\n  toolbar1 <-\n    Gtk.uiManagerGetWidget ui "/ui/toolbar1"\n      >>= maybe (error "GUI.hs:no toolbar1") return\n  toolbar2 <-\n    Gtk.uiManagerGetWidget ui "/ui/toolbar2"\n      >>= maybe (error "GUI.hs:no toolbar2") return\n  --\n  ebox <- Gtk.eventBoxNew\n  label <- Gtk.labelNew (Just "drag me")\n  Gtk.containerAdd ebox label\n  Gtk.dragSourceSet ebox [Gtk.Button1] [Gtk.ActionCopy]\n  Gtk.dragSourceSetIconStock ebox Gtk.stockIndex\n  Gtk.dragSourceAddTextTargets ebox\n  _ <- ebox `Gtk.on` Gtk.dragDataGet $ \\_dc _iid _ts -> do\n    -- very dirty solution but..\n    minfo <- liftIO $ do\n      ref <- newIORef (Nothing :: Maybe String)\n      view callBack xst (UsrEv (GetHoodleFileInfo ref))\n      readIORef ref\n    traverse_ Gtk.selectionDataSetText minfo\n\n  --\n  hbox <- Gtk.hBoxNew False 0\n  Gtk.boxPackStart hbox toolbar1 Gtk.PackGrow 0\n  Gtk.boxPackStart hbox ebox Gtk.PackNatural 0\n  Gtk.boxPackStart vbox menubar Gtk.PackNatural 0\n  Gtk.boxPackStart vbox hbox Gtk.PackNatural 0\n  Gtk.boxPackStart vbox toolbar2 Gtk.PackNatural 0\n  forM_ mstatusbar $ \\statusbar -> Gtk.boxPackEnd vbox statusbar Gtk.PackNatural 0\n  --\n  Gtk.boxPackStart vbox notebook Gtk.PackGrow 0\n'