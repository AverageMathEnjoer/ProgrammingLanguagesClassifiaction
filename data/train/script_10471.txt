b'\xef\xbb\xbf//  Copyright 2019 Google Inc. All Rights Reserved.\n//\n//  Licensed under the Apache License, Version 2.0 (the "License");\n//  you may not use this file except in compliance with the License.\n//  You may obtain a copy of the License at\n//\n//  http://www.apache.org/licenses/LICENSE-2.0\n//\n//  Unless required by applicable law or agreed to in writing, software\n//  distributed under the License is distributed on an "AS IS" BASIS,\n//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n//  See the License for the specific language governing permissions and\n//  limitations under the License.\n\nusing Rubeus.Ndr.Marshal;\nusing System;\nusing System.Diagnostics;\nusing System.IO;\n\nnamespace Rubeus.Win32.Rpc\n{\n    /// <summary>\n    /// Some addition internal utilities for RPC code.\n    /// </summary>\n    public static class RpcUtils\n    {\n        internal static TraceSwitch RpcTraceSwitch = new TraceSwitch("RpcTrace", "RPC Tracing");\n\n        internal static byte[] ReadAllBytes(this BinaryReader reader, int length) {\n            byte[] ret = reader.ReadBytes(length);\n            if (ret.Length != length) {\n                throw new EndOfStreamException();\n            }\n            return ret;\n        }\n\n        /// <summary>\n        /// Specify RPC trace level.\n        /// </summary>\n        /// <param name="level">Specify the RPC trace level.</param>\n        public static void SetRpcTraceLevel(TraceLevel level)\n        {\n            RpcTraceSwitch.Level = level;\n        }\n\n        /// <summary>\n        /// Helper to dereference a type.\n        /// </summary>\n        /// <typeparam name="T">The type to dereference.</typeparam>\n        /// <param name="t">The value to dereference.</param>\n        /// <returns>The dereferenced result.</returns>\n        public static T DeRef<T>(T t)\n        {\n            return t;\n        }\n\n        /// <summary>\n        /// Helper to dereference a type.\n        /// </summary>\n        /// <typeparam name="T">The type to dereference.</typeparam>\n        /// <param name="t">The value to dereference.</param>\n        /// <returns>The dereferenced result.</returns>\n        public static T DeRef<T>(T? t) where T : struct\n        {\n            return t.Value;\n        }\n\n        /// <summary>\n        /// Helper to check for NULL.\n        /// </summary>\n        /// <typeparam name="T">The type to check.</typeparam>\n        /// <param name="obj">The object to check.</param>\n        /// <param name="name">The name of the value to check.</param>\n        /// <returns>The checked value.</returns>\n        public static T CheckNull<T>(T obj, string name) where T : class\n        {\n            if (obj == null)\n            {\n                throw new ArgumentNullException(name);\n            }\n            return obj;\n        }\n\n        /// <summary>\n        /// Helper to check for NULL.\n        /// </summary>\n        /// <typeparam name="T">The type to check.</typeparam>\n        /// <param name="obj">The object to check.</param>\n        /// <param name="name">The name of the value to check.</param>\n        /// <returns>The checked value.</returns>\n        public static T[] CheckNull<T>(T[] obj, string name)\n        {\n            if (obj == null)\n            {\n                throw new ArgumentNullException(name);\n            }\n            return obj;\n        }\n\n        /// <summary>\n        /// Helper to check for NULL.\n        /// </summary>\n        /// <typeparam name="T">The type to check.</typeparam>\n        /// <param name="obj">The object to check.</param>\n        /// <param name="name">The name of the value to check.</param>\n        /// <returns>The checked value.</returns>\n        public static T CheckNull<T>(T? obj, string name) where T : struct\n        {\n            if (!obj.HasValue)\n            {\n                throw new ArgumentNullException(name);\n            }\n            return obj.Value;\n        }\n\n        /// <summary>\n        /// Helper to dereference a type.\n        /// </summary>\n        /// <typeparam name="T">The type to dereference.</typeparam>\n        /// <param name="t">The value to dereference.</param>\n        /// <returns>The dereferenced result.</returns>\n        public static T DeRef<T>(NdrEmbeddedPointer<T> t) \n        {\n            return t.GetValue();\n        }\n\n        /// <summary>\n        /// Helper to perform a plus unary operation.\n        /// </summary>\n        /// <param name="v">The value to apply the operator to.</param>\n        /// <returns>The result.</returns>\n        public static long OpPlus(long v)\n        {\n            return +v;\n        }\n\n        /// <summary>\n        /// Helper to perform a minus unary operation.\n        /// </summary>\n        /// <param name="v">The value to apply the operator to.</param>\n        /// <returns>The result.</returns>\n        public static long OpMinus(long v)\n        {\n            return -v;\n        }\n\n        /// <summary>\n        /// Helper to perform a complement unary operation.\n        /// </summary>\n        /// <param name="v">The value to apply the operator to.</param>\n        /// <returns>The result.</returns>\n        public static long OpComplement(long v)\n        {\n            return ~v;\n        }\n\n        /// <summary>\n        /// Perform a ternary operation.\n        /// </summary>\n        /// <param name="condition">The condition to evaluate as != 0.</param>\n        /// <param name="true_value">The result if true.</param>\n        /// <param name="false_value">The result if false.</param>\n        /// <returns>The result.</returns>\n        public static int OpTernary(bool condition, long true_value, long false_value)\n        {\n            return (int)(condition ? true_value : false_value);\n        }\n\n        /// <summary>\n        /// Perform ADD.\n        /// </summary>\n        /// <param name="left">The left operand.</param>\n        /// <param name="right">The right operand.</param>\n        /// <returns>The result.</returns>\n        public static int OpPlus(long left, long right)\n        {\n            return (int)(left + right);\n        }\n\n        /// <summary>\n        /// Perform SUB.\n        /// </summary>\n        /// <param name="left">The left operand.</param>\n        /// <param name="right">The right operand.</param>\n        /// <returns>The result.</returns>\n        public static int OpMinus(long left, long right)\n        {\n            return (int)(left - right);\n        }\n\n        /// <summary>\n        /// Perform MUL.\n        /// </summary>\n        /// <param name="left">The left operand.</param>\n        /// <param name="right">The right operand.</param>\n        /// <returns>The result.</returns>\n        public static int OpStar(long left, long right)\n        {\n            return (int)(left * right);\n        }\n\n        /// <summary>\n        /// Perform DIV.\n        /// </summary>\n        /// <param name="left">The left operand.</param>\n        /// <param name="right">The right operand.</param>\n        /// <returns>The result.</returns>\n        public static int OpSlash(long left, long right)\n        {\n            return (int)(left / right);\n        }\n\n        /// <summary>\n        /// Perform MOD.\n        /// </summary>\n        /// <param name="left">The left operand.</param>\n        /// <param name="right">The right operand.</param>\n        /// <returns>The result.</returns>\n        public static int OpMod(long left, long right)\n        {\n            return (int)(left % right);\n        }\n\n        /// <summary>\n        /// Perform Bitwise AND.\n        /// </summary>\n        /// <param name="left">The left operand.</param>\n        /// <param name="right">The right operand.</param>\n        /// <returns>The result.</returns>\n        public static int OpBitwiseAnd(long left, long right)\n        {\n            return (int)(left & right);\n        }\n\n        /// <summary>\n        /// Perform Bitwise OR.\n        /// </summary>\n        /// <param name="left">The left operand.</param>\n        /// <param name="right">The right operand.</param>\n        /// <returns>The result.</returns>\n        public static int OpBitwiseOr(long left, long right)\n        {\n            return (int)(left | right);\n        }\n\n        /// <summary>\n        /// Perform bitwise XOR. Needed as Code DOM doesn\'t support XOR.\n        /// </summary>\n        /// <param name="left">The left operand.</param>\n        /// <param name="right">The right operand.</param>\n        /// <returns>The result.</returns>\n        public static int OpXor(long left, long right)\n        {\n            return (int)(left ^ right);\n        }\n\n        /// <summary>\n        /// Perform bitwise LEFTSHIFT.\n        /// </summary>\n        /// <param name="left">The left operand.</param>\n        /// <param name="right">The right operand.</param>\n        /// <returns>The result.</returns>\n        public static int OpLeftShift(long left, long right)\n        {\n            return (int)(left << (int)right);\n        }\n\n        /// <summary>\n        /// Perform bitwise RIGHTSHIFT.\n        /// </summary>\n        /// <param name="left">The left operand.</param>\n        /// <param name="right">The right operand.</param>\n        /// <returns>The result.</returns>\n        public static int OpRightShift(long left, long right)\n        {\n            return (int)(left >> (int)right);\n        }\n\n        /// <summary>\n        /// Perform logical AND.\n        /// </summary>\n        /// <param name="left">The left operand.</param>\n        /// <param name="right">The right operand.</param>\n        /// <returns>The result.</returns>\n        public static int OpLogicalAnd(long left, long right)\n        {\n            return ToInt(ToBool(left) && ToBool(right));\n        }\n\n        /// <summary>\n        /// Perform logical OR.\n        /// </summary>\n        /// <param name="left">The left operand.</param>\n        /// <param name="right">The right operand.</param>\n        /// <returns>The result.</returns>\n        public static int OpLogicalOr(long left, long right)\n        {\n            return ToInt(ToBool(left) || ToBool(right));\n        }\n\n        /// <summary>\n        /// Perform EQUAL.\n        /// </summary>\n        /// <param name="left">The left operand.</param>\n        /// <param name="right">The right operand.</param>\n        /// <returns>The result.</returns>\n        public static int OpEqual(long left, long right)\n        {\n            return ToInt(left == right);\n        }\n\n        /// <summary>\n        /// Perform NOTEQUAL.\n        /// </summary>\n        /// <param name="left">The left operand.</param>\n        /// <param name="right">The right operand.</param>\n        /// <returns>The result.</returns>\n        public static int OpNotEqual(long left, long right)\n        {\n            return ToInt(left != right);\n        }\n\n        /// <summary>\n        /// Perform GREATER.\n        /// </summary>\n        /// <param name="left">The left operand.</param>\n        /// <param name="right">The right operand.</param>\n        /// <returns>The result.</returns>\n        public static int OpGreater(long left, long right)\n        {\n            return ToInt(left > right);\n        }\n\n        /// <summary>\n        /// Perform GREATEREQUAL.\n        /// </summary>\n        /// <param name="left">The left operand.</param>\n        /// <param name="right">The right operand.</param>\n        /// <returns>The result.</returns>\n        public static int OpGreaterEqual(long left, long right)\n        {\n            return ToInt(left >= right);\n        }\n\n        /// <summary>\n        /// Perform LESS.\n        /// </summary>\n        /// <param name="left">The left operand.</param>\n        /// <param name="right">The right operand.</param>\n        /// <returns>The result.</returns>\n        public static int OpLess(long left, long right)\n        {\n            return ToInt(left < right);\n        }\n\n        /// <summary>\n        /// Perform LESSEQUAL.\n        /// </summary>\n        /// <param name="left">The left operand.</param>\n        /// <param name="right">The right operand.</param>\n        /// <returns>Returns left LESSEQUAL right.</returns>\n        public static int OpLessEqual(long left, long right)\n        {\n            return ToInt(left <= right);\n        }\n\n        private static int ToInt(bool b)\n        {\n            return b ? 1 : 0;\n        }\n\n        /// <summary>\n        /// Convert value to a boolean.\n        /// </summary>\n        /// <param name="value">The value</param>\n        /// <returns>True if value != 0.</returns>\n        public static bool ToBool(bool value)\n        {\n            return value;\n        }\n\n        /// <summary>\n        /// Convert value to a boolean.\n        /// </summary>\n        /// <param name="value">The value</param>\n        /// <returns>True if value != 0.</returns>\n        public static bool ToBool(sbyte value)\n        {\n            return value != 0;\n        }\n\n        /// <summary>\n        /// Convert value to a boolean.\n        /// </summary>\n        /// <param name="value">The value</param>\n        /// <returns>True if value != 0.</returns>\n        public static bool ToBool(byte value)\n        {\n            return value != 0;\n        }\n\n        /// <summary>\n        /// Convert value to a boolean.\n        /// </summary>\n        /// <param name="value">The value</param>\n        /// <returns>True if value != 0.</returns>\n        public static bool ToBool(short value)\n        {\n            return value != 0;\n        }\n\n        /// <summary>\n        /// Convert value to a boolean.\n        /// </summary>\n        /// <param name="value">The value</param>\n        /// <returns>True if value != 0.</returns>\n        public static bool ToBool(ushort value)\n        {\n            return value != 0;\n        }\n\n        /// <summary>\n        /// Convert value to a boolean.\n        /// </summary>\n        /// <param name="value">The value</param>\n        /// <returns>True if value != 0.</returns>\n        public static bool ToBool(int value)\n        {\n            return value != 0;\n        }\n\n        /// <summary>\n        /// Convert value to a boolean.\n        /// </summary>\n        /// <param name="value">The value</param>\n        /// <returns>True if value != 0.</returns>\n        public static bool ToBool(uint value)\n        {\n            return value != 0;\n        }\n\n        /// <summary>\n        /// Convert value to a boolean.\n        /// </summary>\n        /// <param name="value">The value</param>\n        /// <returns>True if value != 0.</returns>\n        public static bool ToBool(long value)\n        {\n            return value != 0;\n        }\n\n        /// <summary>\n        /// Convert value to a boolean.\n        /// </summary>\n        /// <param name="value">The value</param>\n        /// <returns>True if value != 0.</returns>\n        public static bool ToBool(ulong value)\n        {\n            return value != 0;\n        }\n\n        /// <summary>\n        /// Convert value to a boolean.\n        /// </summary>\n        /// <param name="value">The nullable value</param>\n        /// <returns>True if value has a value set.</returns>\n        public static bool ToBool<T>(T? value) where T : struct\n        {\n            return value.HasValue;\n        }\n\n        /// <summary>\n        /// Convert value to a boolean.\n        /// </summary>\n        /// <param name="value">The nullable value</param>\n        /// <returns>True if value has a value set.</returns>\n        public static bool ToBool<T>(T value) where T : class\n        {\n            return value != null;\n        }\n    }\n}\n'