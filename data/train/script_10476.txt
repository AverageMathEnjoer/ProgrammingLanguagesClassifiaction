b'package com.naman14.timber.widgets;\n\nimport android.graphics.Canvas;\nimport android.graphics.Color;\nimport android.graphics.ColorFilter;\nimport android.graphics.Paint;\nimport android.graphics.PixelFormat;\nimport android.graphics.Rect;\nimport android.graphics.RectF;\nimport android.graphics.Typeface;\nimport android.graphics.drawable.ShapeDrawable;\nimport android.graphics.drawable.shapes.OvalShape;\nimport android.graphics.drawable.shapes.RectShape;\nimport android.graphics.drawable.shapes.RoundRectShape;\n\n\npublic class TextDrawable extends ShapeDrawable {\n\n    private static final float SHADE_FACTOR = 0.9f;\n    private final Paint textPaint;\n    private final Paint borderPaint;\n    private final String text;\n    private final int color;\n    private final RectShape shape;\n    private final int height;\n    private final int width;\n    private final int fontSize;\n    private final float radius;\n    private final int borderThickness;\n\n    private TextDrawable(Builder builder) {\n        super(builder.shape);\n\n        // shape properties\n        shape = builder.shape;\n        height = builder.height;\n        width = builder.width;\n        radius = builder.radius;\n\n        // text and color\n        text = builder.toUpperCase ? builder.text.toUpperCase() : builder.text;\n        color = builder.color;\n\n        // text paint settings\n        fontSize = builder.fontSize;\n        textPaint = new Paint();\n        textPaint.setColor(builder.textColor);\n        textPaint.setAntiAlias(true);\n        textPaint.setFakeBoldText(builder.isBold);\n        textPaint.setStyle(Paint.Style.FILL);\n        textPaint.setTypeface(builder.font);\n        textPaint.setTextAlign(Paint.Align.CENTER);\n        textPaint.setStrokeWidth(builder.borderThickness);\n\n        // border paint settings\n        borderThickness = builder.borderThickness;\n        borderPaint = new Paint();\n        borderPaint.setColor(getDarkerShade(color));\n        borderPaint.setStyle(Paint.Style.STROKE);\n        borderPaint.setStrokeWidth(borderThickness);\n\n        // drawable paint color\n        Paint paint = getPaint();\n        paint.setColor(color);\n\n    }\n\n    public static IShapeBuilder builder() {\n        return new Builder();\n    }\n\n    private int getDarkerShade(int color) {\n        return Color.rgb((int) (SHADE_FACTOR * Color.red(color)),\n                (int) (SHADE_FACTOR * Color.green(color)),\n                (int) (SHADE_FACTOR * Color.blue(color)));\n    }\n\n    @Override\n    public void draw(Canvas canvas) {\n        super.draw(canvas);\n        Rect r = getBounds();\n\n\n        // draw border\n        if (borderThickness > 0) {\n            drawBorder(canvas);\n        }\n\n        int count = canvas.save();\n        canvas.translate(r.left, r.top);\n\n        // draw text\n        int width = this.width < 0 ? r.width() : this.width;\n        int height = this.height < 0 ? r.height() : this.height;\n        int fontSize = this.fontSize < 0 ? (Math.min(width, height) / 2) : this.fontSize;\n        textPaint.setTextSize(fontSize);\n        canvas.drawText(text, width / 2, height / 2 - ((textPaint.descent() + textPaint.ascent()) / 2), textPaint);\n\n        canvas.restoreToCount(count);\n\n    }\n\n    private void drawBorder(Canvas canvas) {\n        RectF rect = new RectF(getBounds());\n        rect.inset(borderThickness / 2, borderThickness / 2);\n\n        if (shape instanceof OvalShape) {\n            canvas.drawOval(rect, borderPaint);\n        } else if (shape instanceof RoundRectShape) {\n            canvas.drawRoundRect(rect, radius, radius, borderPaint);\n        } else {\n            canvas.drawRect(rect, borderPaint);\n        }\n    }\n\n    @Override\n    public void setAlpha(int alpha) {\n        textPaint.setAlpha(alpha);\n    }\n\n    @Override\n    public void setColorFilter(ColorFilter cf) {\n        textPaint.setColorFilter(cf);\n    }\n\n    @Override\n    public int getOpacity() {\n        return PixelFormat.TRANSLUCENT;\n    }\n\n    @Override\n    public int getIntrinsicWidth() {\n        return width;\n    }\n\n    @Override\n    public int getIntrinsicHeight() {\n        return height;\n    }\n\n    public interface IConfigBuilder {\n        IConfigBuilder width(int width);\n\n        IConfigBuilder height(int height);\n\n        IConfigBuilder textColor(int color);\n\n        IConfigBuilder withBorder(int thickness);\n\n        IConfigBuilder useFont(Typeface font);\n\n        IConfigBuilder fontSize(int size);\n\n        IConfigBuilder bold();\n\n        IConfigBuilder toUpperCase();\n\n        IShapeBuilder endConfig();\n    }\n\n    public interface IBuilder {\n\n        TextDrawable build(String text, int color);\n    }\n\n    public interface IShapeBuilder {\n\n        IConfigBuilder beginConfig();\n\n        IBuilder rect();\n\n        IBuilder round();\n\n        IBuilder roundRect(int radius);\n\n        TextDrawable buildRect(String text, int color);\n\n        TextDrawable buildRoundRect(String text, int color, int radius);\n\n        TextDrawable buildRound(String text, int color);\n    }\n\n    public static class Builder implements IConfigBuilder, IShapeBuilder, IBuilder {\n\n        public int textColor;\n        public float radius;\n        private String text;\n        private int color;\n        private int borderThickness;\n        private int width;\n        private int height;\n        private Typeface font;\n        private RectShape shape;\n        private int fontSize;\n        private boolean isBold;\n        private boolean toUpperCase;\n\n        private Builder() {\n            text = "";\n            color = Color.GRAY;\n            textColor = Color.WHITE;\n            borderThickness = 0;\n            width = -1;\n            height = -1;\n            shape = new RectShape();\n            font = Typeface.create("sans-serif-light", Typeface.NORMAL);\n            fontSize = -1;\n            isBold = false;\n            toUpperCase = false;\n        }\n\n        public IConfigBuilder width(int width) {\n            this.width = width;\n            return this;\n        }\n\n        public IConfigBuilder height(int height) {\n            this.height = height;\n            return this;\n        }\n\n        public IConfigBuilder textColor(int color) {\n            this.textColor = color;\n            return this;\n        }\n\n        public IConfigBuilder withBorder(int thickness) {\n            this.borderThickness = thickness;\n            return this;\n        }\n\n        public IConfigBuilder useFont(Typeface font) {\n            this.font = font;\n            return this;\n        }\n\n        public IConfigBuilder fontSize(int size) {\n            this.fontSize = size;\n            return this;\n        }\n\n        public IConfigBuilder bold() {\n            this.isBold = true;\n            return this;\n        }\n\n        public IConfigBuilder toUpperCase() {\n            this.toUpperCase = true;\n            return this;\n        }\n\n        @Override\n        public IConfigBuilder beginConfig() {\n            return this;\n        }\n\n        @Override\n        public IShapeBuilder endConfig() {\n            return this;\n        }\n\n        @Override\n        public IBuilder rect() {\n            this.shape = new RectShape();\n            return this;\n        }\n\n        @Override\n        public IBuilder round() {\n            this.shape = new OvalShape();\n            return this;\n        }\n\n        @Override\n        public IBuilder roundRect(int radius) {\n            this.radius = radius;\n            float[] radii = {radius, radius, radius, radius, radius, radius, radius, radius};\n            this.shape = new RoundRectShape(radii, null, null);\n            return this;\n        }\n\n        @Override\n        public TextDrawable buildRect(String text, int color) {\n            rect();\n            return build(text, color);\n        }\n\n        @Override\n        public TextDrawable buildRoundRect(String text, int color, int radius) {\n            roundRect(radius);\n            return build(text, color);\n        }\n\n        @Override\n        public TextDrawable buildRound(String text, int color) {\n            round();\n            return build(text, color);\n        }\n\n        @Override\n        public TextDrawable build(String text, int color) {\n            this.color = color;\n            this.text = text;\n            return new TextDrawable(this);\n        }\n    }\n}'