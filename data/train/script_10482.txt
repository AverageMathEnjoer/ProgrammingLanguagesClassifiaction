b'package com.github.eprendre.sources_by_eprendre\n\nimport com.github.eprendre.tingshu.extensions.config\nimport com.github.eprendre.tingshu.extensions.getCookie\nimport com.github.eprendre.tingshu.sources.*\nimport com.github.eprendre.tingshu.utils.*\nimport com.github.kittinunf.fuel.Fuel\nimport org.jsoup.Jsoup\nimport java.net.URLEncoder\n\nobject HaiYangTingShu : TingShu(), AudioUrlExtraHeaders {\n    override fun getSourceId(): String {\n        return "fc7a225fc7414567a87b8118e105eb56"\n    }\n\n    override fun getUrl(): String {\n        return "http://m.ychy.com"\n    }\n\n    override fun getName(): String {\n        return "\xe6\xb5\xb7\xe6\xb4\x8b\xe5\x90\xac\xe4\xb9\xa6\xe7\xbd\x91"\n    }\n\n    override fun getDesc(): String {\n        return "\xe6\x8e\xa8\xe8\x8d\x90\xe6\x8c\x87\xe6\x95\xb0:2\xe6\x98\x9f \xe2\xad\x90\xe2\xad\x90"\n    }\n\n    override fun search(keywords: String, page: Int): Pair<List<Book>, Int> {\n        val encodedKeywords = URLEncoder.encode(keywords, "gb2312")\n        val url = "http://m.ychy.com/search.asp?page=$page&searchword=$encodedKeywords"\n        val doc = Jsoup.connect(url).config().get()\n        val totalPage = doc.selectFirst(".page").ownText().split("/")[1].toInt()\n\n        val list = ArrayList<Book>()\n        val elementList = doc.select("#cateList_wap > .bookbox")\n        elementList.forEach { element ->\n            val bookId = element.attr("bookid")\n            val bookUrl = "http://m.ychy.com/book/$bookId.html"\n            val coverUrl = element.selectFirst(".bookimg > img").attr("orgsrc")\n            val bookinfo = element.selectFirst(".bookinfo")\n            val title = bookinfo.selectFirst(".bookname").text()\n            val (author, artist) = bookinfo.selectFirst(".author").text().split(" ").let {\n                Pair(it[1].replace("\xe6\x92\xad\xe9\x9f\xb3:", "\xe4\xbd\x9c\xe8\x80\x85: "), it[0].replace("\xe4\xbd\x9c\xe8\x80\x85\xef\xbc\x9a", "\xe6\x92\xad\xe9\x9f\xb3: "))\n            }\n            val intro = bookinfo.selectFirst(".intro_line").text()\n            val status = bookinfo.selectFirst(".update").text()\n            list.add(Book(coverUrl, bookUrl, title, author, artist).apply {\n                this.intro = intro\n                this.status = status\n                this.sourceId = getSourceId()\n            })\n        }\n\n        return Pair(list, totalPage)\n    }\n\n    override fun getBookDetailInfo(bookUrl: String, loadEpisodes: Boolean, loadFullPages: Boolean): BookDetail {\n        val doc = Jsoup.connect(bookUrl).config().get()\n        val episodes = doc.select("#playlist > ul > li > a").map {\n            Episode(it.text(), it.attr("abs:href"))\n        }\n\n        val intro = doc.selectFirst(".book_intro").text()\n        return BookDetail(episodes, intro)\n    }\n\n    override fun getAudioUrlExtractor(): AudioUrlExtractor {\n//        AudioUrlWebViewExtractor.setUp(\n//            script = "(function() { return (\'<html>\'+document.getElementById(\'xplayer\').contentDocument.getElementById(\'viframe\').contentDocument.documentElement.innerHTML+\'</html>\'); })();") { str ->\n//            val doc = Jsoup.parse(str)\n//            val audioElement = doc.selectFirst("audio")\n//            var audioUrl = audioElement?.attr("src")\n//            try {\n//                if (!audioUrl.isNullOrEmpty() && audioUrl.contains("ysting.ysxs8.com")) {\n//                    val result = Fuel.get("http://ysting.ysxs8.com:81/_sys_vw.vhtml?js=yes")\n//                        .responseString()\n//                        .third\n//                        .get()\n//                    val vsid = Regex("VW_VSID=\\"(.+)\\";").find(result)?.groupValues?.get(1)\n//                    if (vsid != null) {\n//                        audioUrl += "?vsid=$vsid"\n//                    }\n//                }\n//            } catch (e: Exception) {\n//                e.printStackTrace()\n//            }\n//            return@setUp audioUrl\n//        }\n        return AudioUrlWebViewSniffExtractor\n    }\n\n    override fun getCategoryMenus(): List<CategoryMenu> {\n        val menu1 = CategoryMenu(\n            "\xe6\x9c\x89\xe5\xa3\xb0\xe5\xb0\x8f\xe8\xaf\xb4", listOf(\n                CategoryTab("\xe7\xbd\x91\xe7\xbb\x9c\xe7\x8e\x84\xe5\xb9\xbb", "http://m.ychy.com/list/52.html"),\n                CategoryTab("\xe6\x81\x90\xe6\x80\x96\xe6\x82\xac\xe7\x96\x91", "http://m.ychy.com/list/17.html"),\n                CategoryTab("\xe4\xbc\xa0\xe7\xbb\x9f\xe6\xad\xa6\xe4\xbe\xa0", "http://m.ychy.com/list/12.html"),\n                CategoryTab("\xe9\x83\xbd\xe5\xb8\x82\xe8\xa8\x80\xe6\x83\x85", "http://m.ychy.com/list/13.html"),\n                CategoryTab("\xe5\xae\x98\xe5\x9c\xba\xe5\x88\x91\xe4\xbe\xa6", "http://m.ychy.com/list/14.html"),\n                CategoryTab("\xe6\x9c\x89\xe5\xa3\xb0\xe6\x96\x87\xe5\xad\xa6", "http://m.ychy.com/list/41.html"),\n                CategoryTab("\xe6\x8e\xa2\xe9\x99\xa9\xe7\x9b\x97\xe5\xa2\x93", "http://m.ychy.com/list/45.html")\n            )\n        )\n        val menu2 = CategoryMenu(\n            "\xe5\x85\xb6\xe4\xbb\x96", listOf(\n                CategoryTab("\xe8\xaf\x84\xe4\xb9\xa6", "http://m.ychy.com/list/3.html"),\n                CategoryTab("\xe5\x84\xbf\xe7\xab\xa5\xe8\xaf\xbb\xe7\x89\xa9", "http://m.ychy.com/list/4.html"),\n                CategoryTab("\xe5\x8e\x86\xe5\x8f\xb2\xe5\x86\x9b\xe4\xba\x8b", "http://m.ychy.com/list/15.html"),\n                CategoryTab("\xe4\xba\xba\xe7\x89\xa9\xe4\xbc\xa0\xe8\xae\xb0", "http://m.ychy.com/list/16.html"),\n                CategoryTab("\xe5\xb9\xbf\xe6\x92\xad\xe5\x89\xa7", "http://m.ychy.com/list/18.html"),\n                CategoryTab("\xe7\x99\xbe\xe5\xae\xb6\xe8\xae\xb2\xe5\x9d\x9b", "http://m.ychy.com/list/32.html"),\n                CategoryTab("\xe8\x81\x8c\xe5\x9c\xba\xe5\x95\x86\xe6\x88\x98", "http://m.ychy.com/list/81.html")\n            )\n        )\n        return listOf(menu1, menu2)\n    }\n\n    override fun getCategoryList(url: String): Category {\n        val doc = Jsoup.connect(url).config().get()\n        val nextUrl = doc.selectFirst(".ychy_next").attr("abs:href") ?: ""\n        val pages = doc.selectFirst(".page").ownText().let { text ->\n            Regex("(\\\\d+)/(\\\\d+)").find(text)!!.groupValues\n        }\n        val currentPage = pages[1].toInt()\n        val totalPage = pages[2].toInt()\n\n        val list = ArrayList<Book>()\n        val elementList = doc.select("#infocon > li > a")\n        elementList.forEach { element ->\n            val bookUrl = element.absUrl("href")\n            val coverUrl = element.selectFirst("img").attr("src")\n            val bookInfo = element.selectFirst(".del")\n            val title = bookInfo.selectFirst(".tit").text()\n            val (author, artist) = bookInfo.selectFirst(".author").text().split("/").let {\n                Pair(it[1].trim(), it[0].trim())\n            }\n            val intro = bookInfo.selectFirst(".desc").text()\n            val status = bookInfo.selectFirst("p > span").text()\n            list.add(Book(coverUrl, bookUrl, title, author, artist).apply {\n                this.intro = intro\n                this.status = status\n                this.sourceId = getSourceId()\n            })\n        }\n\n        return Category(list, currentPage, totalPage, url, nextUrl)\n    }\n\n    override fun headers(audioUrl: String): Map<String, String> {\n        val hashMap = hashMapOf<String, String>()\n        if (audioUrl.contains("ysxs8") || audioUrl.contains("ychy")) {\n            hashMap["Referer"] = "http://m.ychy.com/"\n            hashMap["Cookie"] = getCookie("http://m.ychy.com/") ?: ""\n        }\n        return hashMap\n    }\n\n}'