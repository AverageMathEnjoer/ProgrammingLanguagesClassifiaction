b'/*\n    0-1 Knapsack Problem\n    --------------------\n    Given weights and values of n items, put these items in a knapsack\n    of a fixed capacity to get the maximum total value in the knapsack.\n\n    Time complexity\n    ---------------\n    O(N*W), where N is the number of items and W is the capacity of the knapsack.\n\n    Space complexity\n    ----------------\n    O(N*W), the variables same as time complexity.\n\n    Author\n    ------\n    Fedurko Nikolaus (@B1Z0N)\n*/\n\n\n#include "knapsack.hpp"\n\n#include <iostream>\t// cin, cout\n#include <vector>\t// vector\n\n\nstd::ostream& operator<<( std::ostream& os, Knapsack& knp )\n{\n\treturn os << knp();\n}\n\n\nstd::istream& operator>>( std::istream& is, Knapsack& knp )\n{\n\tis >> knp.capacity;\n\n\tstd::size_t n, value, weight;\n\tis >> n;\n\n\twhile( n-- )\n\t{\n\t\tis >> value >> weight;\n\n\t\tknp.values.push_back(value);\n\t\tknp.weights.push_back(weight);\n\t}\n\n\treturn is;\n}\t\n\n\n/**\n * Algorithm implementation\n */\nstd::size_t Knapsack::solve()\n{\n\tstd::size_t size { values.size( ) };\n\tstd::size_t remember[ size + 1 ][ capacity + 1 ];\n\t/**\n\t * A row number i represents the set of all the items \n\t * from rows 1 to i. For instance, the values in row 3 assumes \n\t * that we only have items 1, 2, and 3.\n\t *\n\t * A column number j represents the weight capacity of our knapsack. \n\t * Therefore, the values in column 5, for example, assumes that our \n\t * knapsack can hold 5 weight units.\n\t *\n\t * Putting everything together, an entry in row i, column j represents \n\t * the maximum value that can be obtained with items 1, 2, 3 \xe2\x80\xa6 i, in a \n\t * knapsack that can hold j weight units.\n\t */\n\n\tfor( int i = 0; i <= size; ++i )\n\t{\n\t\tfor( int w = 0; w <= capacity; ++w )\n\t\t{\n\t\t\tif( i == 0 || w == 0 )\n\t\t\t\t// base case \n\t\t\t\tremember[ i ][ w ] = 0;\n\t\t\telse if( weights[ i - 1 ] <= w )\n\t\t\t\tremember[ i ][ w ] = std::max( \n\t\t\t\t\tvalues[ i - 1 ] + remember[ i - 1 ][ w - weights[ i - 1 ] ],\t\n\t\t\t\t\t// include this item\n\t\t\t\t\tremember[ i - 1 ][ w ]\t// or\n\t\t\t\t\t// don\'t include\n\t\t\t\t);\n\t\t\telse\n\t\t\t\tremember[ i ][ w ] = remember[ i - 1 ][ w ];\n\t\t}\n\t}\n\n\treturn remember[ size ][ capacity ];\n}'