b'{-# LANGUAGE CPP #-}\n#ifdef __GLASGOW_HASKELL__\n{-# LANGUAGE MagicHash #-}\n#endif\n\n{-# OPTIONS_HADDOCK hide #-}\n\n-- | Really unsafe pointer equality\nmodule Utils.Containers.Internal.PtrEquality (ptrEq, hetPtrEq) where\n\n#ifdef __GLASGOW_HASKELL__\nimport GHC.Exts ( reallyUnsafePtrEquality# )\nimport Unsafe.Coerce ( unsafeCoerce )\nimport GHC.Exts ( Int#, isTrue# )\n#endif\n\n-- | Checks if two pointers are equal. Yes means yes;\n-- no means maybe. The values should be forced to at least\n-- WHNF before comparison to get moderately reliable results.\nptrEq :: a -> a -> Bool\n\n-- | Checks if two pointers are equal, without requiring\n-- them to have the same type. The values should be forced\n-- to at least WHNF before comparison to get moderately\n-- reliable results.\nhetPtrEq :: a -> b -> Bool\n\n#ifdef __GLASGOW_HASKELL__\nptrEq x y = isTrue# (reallyUnsafePtrEquality# x y)\nhetPtrEq x y = isTrue# (unsafeCoerce (reallyUnsafePtrEquality# :: x -> x -> Int#) x y)\n\n#else\n-- Not GHC\nptrEq _ _ = False\nhetPtrEq _ _ = False\n#endif\n\n{-# INLINE ptrEq #-}\n{-# INLINE hetPtrEq #-}\n\ninfix 4 `ptrEq`\ninfix 4 `hetPtrEq`\n'