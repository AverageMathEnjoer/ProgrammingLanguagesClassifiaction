b'module Network.Server.Common.Env where\n\nimport Network.Server.Common.Accept\nimport Network.Server.Common.Ref\nimport Network.Server.Common.HandleLens\nimport Network.Server.Common.Lens\nimport Data.IORef(IORef, atomicModifyIORef)\nimport Data.Set(Set)\n\ndata Env a =\n  Env\n    Accept\n    (IORef (Set Ref))\n    a\n  deriving Eq\n\nacceptL ::\n  Lens (Env a) Accept\nacceptL =\n  Lens\n    (\\(Env _ s a) x -> Env x s a)\n    (\\(Env x _ _) -> x)\n\nclientsL ::\n  Lens (Env a) (IORef (Set Ref))\nclientsL =\n  Lens\n    (\\(Env x _ a) s -> Env x s a)\n    (\\(Env _ s _) -> s)\n\nenvvalL ::\n  Lens (Env a) a\nenvvalL =\n  Lens\n    (\\(Env x s _) a -> Env x s a)\n    (\\(Env _ _ a) -> a)\n\ninstance HandleLens (Env a) where\n  handleL =\n    acceptL .@ handleL\n\ninstance Functor Env where\n  fmap f (Env x s a) =\n    Env x s (f a)\n\natomicModifyIORef_ ::\n  IORef a\n  -> (a -> a)\n  -> IO a\natomicModifyIORef_ r f =\n  atomicModifyIORef r (\\a -> (f a, a))\n'