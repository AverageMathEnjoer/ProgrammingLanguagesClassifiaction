b'/**\n * Copyright (C) 2020 Fernando Cejas Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.fernandocejas.sample.features.movies\n\nimport com.fernandocejas.sample.UnitTest\nimport com.fernandocejas.sample.core.exception.Failure.NetworkConnection\nimport com.fernandocejas.sample.core.exception.Failure.ServerError\nimport com.fernandocejas.sample.core.extension.empty\nimport com.fernandocejas.sample.core.functional.Either\nimport com.fernandocejas.sample.core.functional.Either.Right\nimport com.fernandocejas.sample.core.platform.NetworkHandler\nimport com.fernandocejas.sample.features.movies.MoviesRepository.Network\nimport io.mockk.Called\nimport io.mockk.every\nimport io.mockk.impl.annotations.MockK\nimport io.mockk.verify\nimport org.amshove.kluent.shouldBeInstanceOf\nimport org.amshove.kluent.shouldEqual\nimport org.junit.Before\nimport org.junit.Test\nimport retrofit2.Call\nimport retrofit2.Response\n\nclass MoviesRepositoryTest : UnitTest() {\n\n    private lateinit var networkRepository: MoviesRepository.Network\n\n    @MockK private lateinit var networkHandler: NetworkHandler\n    @MockK private lateinit var service: MoviesService\n\n    @MockK private lateinit var moviesCall: Call<List<MovieEntity>>\n    @MockK private lateinit var moviesResponse: Response<List<MovieEntity>>\n    @MockK private lateinit var movieDetailsCall: Call<MovieDetailsEntity>\n    @MockK private lateinit var movieDetailsResponse: Response<MovieDetailsEntity>\n\n    @Before fun setUp() {\n        networkRepository = Network(networkHandler, service)\n    }\n\n    @Test fun `should return empty list by default`() {\n        every { networkHandler.isNetworkAvailable() } returns true\n        every { moviesResponse.body() } returns null\n        every { moviesResponse.isSuccessful } returns true\n        every { moviesCall.execute() } returns moviesResponse\n        every { service.movies() } returns moviesCall\n\n        val movies = networkRepository.movies()\n\n        movies shouldEqual Right(emptyList<Movie>())\n        verify(exactly = 1) { service.movies() }\n    }\n\n    @Test fun `should get movie list from service`() {\n        every { networkHandler.isNetworkAvailable() } returns true\n        every { moviesResponse.body() } returns listOf(MovieEntity(1, "poster"))\n        every { moviesResponse.isSuccessful } returns true\n        every { moviesCall.execute() } returns moviesResponse\n        every { service.movies() } returns moviesCall\n\n        val movies = networkRepository.movies()\n\n        movies shouldEqual Right(listOf(Movie(1, "poster")))\n        verify(exactly = 1) { service.movies() }\n    }\n\n    @Test fun `movies service should return network failure when no connection`() {\n        every { networkHandler.isNetworkAvailable() } returns false\n\n        val movies = networkRepository.movies()\n\n        movies shouldBeInstanceOf Either::class.java\n        movies.isLeft shouldEqual true\n        movies.fold({ failure -> failure shouldBeInstanceOf NetworkConnection::class.java }, {})\n        verify { service wasNot Called }\n    }\n\n    @Test fun `movies service should return server error if no successful response`() {\n        every { networkHandler.isNetworkAvailable() } returns true\n        every { moviesResponse.isSuccessful } returns false\n        every { moviesCall.execute() } returns moviesResponse\n        every { service.movies() } returns moviesCall\n\n        val movies = networkRepository.movies()\n\n        movies shouldBeInstanceOf Either::class.java\n        movies.isLeft shouldEqual true\n        movies.fold({ failure -> failure shouldBeInstanceOf ServerError::class.java }, {})\n    }\n\n    @Test fun `movies request should catch exceptions`() {\n        every { networkHandler.isNetworkAvailable() } returns true\n        every { moviesCall.execute() } returns moviesResponse\n        every { service.movies() } returns moviesCall\n\n        val movies = networkRepository.movies()\n\n        movies shouldBeInstanceOf Either::class.java\n        movies.isLeft shouldEqual true\n        movies.fold({ failure -> failure shouldBeInstanceOf ServerError::class.java }, {})\n    }\n\n    @Test fun `should return empty movie details by default`() {\n        every { networkHandler.isNetworkAvailable() } returns true\n        every { movieDetailsResponse.body() } returns null\n        every { movieDetailsResponse.isSuccessful } returns true\n        every { movieDetailsCall.execute() } returns movieDetailsResponse\n        every { service.movieDetails(1) } returns movieDetailsCall\n\n        val movieDetails = networkRepository.movieDetails(1)\n\n        movieDetails shouldEqual Right(MovieDetails.empty)\n        verify(exactly = 1) { service.movieDetails(1) }\n    }\n\n    @Test fun `should get movie details from service`() {\n        every { networkHandler.isNetworkAvailable() } returns true\n        every { movieDetailsResponse.body() } returns\n                MovieDetailsEntity(8, "title", String.empty(), String.empty(),\n                        String.empty(), String.empty(), 0, String.empty())\n        every { movieDetailsResponse.isSuccessful } returns true\n        every { movieDetailsCall.execute() } returns movieDetailsResponse\n        every { service.movieDetails(1) } returns movieDetailsCall\n\n        val movieDetails = networkRepository.movieDetails(1)\n\n        movieDetails shouldEqual Right(MovieDetails(8, "title", String.empty(),\n            String.empty(), String.empty(), String.empty(), 0, String.empty()))\n        verify(exactly = 1) { service.movieDetails(1) }\n    }\n\n    @Test fun `movie details service should return network failure when no connection`() {\n        every { networkHandler.isNetworkAvailable() } returns false\n\n        val movieDetails = networkRepository.movieDetails(1)\n\n        movieDetails shouldBeInstanceOf Either::class.java\n        movieDetails.isLeft shouldEqual true\n        movieDetails.fold({ failure -> failure shouldBeInstanceOf NetworkConnection::class.java }, {})\n        verify { service wasNot Called }\n    }\n\n    @Test fun `movie details service should return server error if no successful response`() {\n        every { networkHandler.isNetworkAvailable() } returns true\n        every { movieDetailsResponse.body() } returns null\n        every { movieDetailsResponse.isSuccessful } returns false\n        every { movieDetailsCall.execute() } returns movieDetailsResponse\n        every { service.movieDetails(1) } returns movieDetailsCall\n\n        val movieDetails = networkRepository.movieDetails(1)\n\n        movieDetails shouldBeInstanceOf Either::class.java\n        movieDetails.isLeft shouldEqual true\n        movieDetails.fold({ failure -> failure shouldBeInstanceOf ServerError::class.java }, {})\n    }\n\n    @Test fun `movie details request should catch exceptions`() {\n        every { networkHandler.isNetworkAvailable() } returns true\n        every { movieDetailsCall.execute() } returns movieDetailsResponse\n        every { service.movieDetails(1) } returns movieDetailsCall\n\n        val movieDetails = networkRepository.movieDetails(1)\n\n        movieDetails shouldBeInstanceOf Either::class.java\n        movieDetails.isLeft shouldEqual true\n        movieDetails.fold({ failure -> failure shouldBeInstanceOf ServerError::class.java }, {})\n    }\n}'