b'package effectivejava.chapter2.item8;\n\nimport java.lang.ref.Cleaner;\n\n// An autocloseable class using a cleaner as a safety net (Page 32)\npublic class Room implements AutoCloseable {\n    private static final Cleaner cleaner = Cleaner.create();\n\n    // Resource that requires cleaning. Must not refer to Room!\n    private static class State implements Runnable {\n        int numJunkPiles; // Number of junk piles in this room\n\n        State(int numJunkPiles) {\n            this.numJunkPiles = numJunkPiles;\n        }\n\n        // Invoked by close method or cleaner\n        @Override public void run() {\n            System.out.println("Cleaning room");\n            numJunkPiles = 0;\n        }\n    }\n\n    // The state of this room, shared with our cleanable\n    private final State state;\n\n    // Our cleanable. Cleans the room when it\xe2\x80\x99s eligible for gc\n    private final Cleaner.Cleanable cleanable;\n\n    public Room(int numJunkPiles) {\n        state = new State(numJunkPiles);\n        cleanable = cleaner.register(this, state);\n    }\n\n    @Override public void close() {\n        cleanable.clean();\n    }\n}\n'