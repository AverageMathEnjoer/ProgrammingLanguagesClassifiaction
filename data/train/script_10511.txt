b'package com.github.eprendre.sources_by_eprendre\n\nimport com.github.eprendre.tingshu.extensions.config\nimport com.github.eprendre.tingshu.sources.*\nimport com.github.eprendre.tingshu.utils.*\nimport org.jsoup.Jsoup\nimport java.net.URLEncoder\nimport java.security.MessageDigest\nimport java.security.NoSuchAlgorithmException\nimport java.util.*\nimport kotlin.collections.ArrayList\n\nobject JingTing : TingShu() {\n\n    override fun getSourceId(): String {\n        return "ec9440c632b04292b0836004434eecc7"\n    }\n\n    override fun getUrl(): String {\n        return "http://m.audio698.com"\n    }\n\n    override fun getName(): String {\n        return "\xe9\x9d\x99\xe5\x90\xac\xe7\xbd\x91"\n    }\n\n    override fun getDesc(): String {\n        return "\xe6\x8e\xa8\xe8\x8d\x90\xe6\x8c\x87\xe6\x95\xb0:4\xe6\x98\x9f \xe2\xad\x90\xe2\xad\x90\xe2\xad\x90\xe2\xad\x90\\n" +\n                "\xe8\xb5\x84\xe6\xba\x90\xe6\x95\xb0\xe9\x87\x8f\xe5\xb0\x9a\xe5\x8f\xaf\xef\xbc\x8c\xe4\xbd\x86\xe5\x88\xab\xe8\xae\xbf\xe9\x97\xae\xe7\x9a\x84\xe5\xa4\xaa\xe9\xa2\x91\xe7\xb9\x81\xef\xbc\x8c\xe4\xbc\x9a\xe5\xb0\x81IP\xe7\x9a\x84"\n    }\n\n    override fun isWebViewNotRequired(): Boolean {//\xe5\xbd\x93\xe6\xba\x90\xe6\xb2\xa1\xe6\xb6\x89\xe5\x8f\x8a\xe5\x88\xb0webview\xe5\x88\x99\xe8\xbf\x94\xe5\x9b\x9etrue\xef\xbc\x8c\xe4\xbb\xa3\xe8\xa1\xa8\xe5\x9c\xa8\xe6\xb2\xa1\xe6\x9c\x89webview\xe7\x9a\x84\xe8\xae\xbe\xe5\xa4\x87\xe4\xb8\x8a\xe4\xb9\x9f\xe5\x8f\xaf\xe4\xbb\xa5\xe6\xad\xa3\xe5\xb8\xb8\xe4\xbd\xbf\xe7\x94\xa8\xe8\xbf\x99\xe4\xb8\xaa\xe6\xba\x90\n        return true\n    }\n\n    override fun search(keywords: String, page: Int): Pair<List<Book>, Int> {\n        val encodedKeywords = URLEncoder.encode(keywords, "utf8") //\xe7\xbc\x96\xe7\xa0\x81\n        val url = "http://m.audio698.com/search?keyword=$encodedKeywords"\n        val doc = Jsoup.connect(url).referrer(url).config().get()\n        val list = ArrayList<Book>()\n        doc.select(".clist > a").forEach {\n            print(it.text())\n            val coverUrl = it.selectFirst("a > dl > dt > img ").absUrl("src")\n            val bookUrl = it.selectFirst("a").absUrl("href")\n            val title = it.selectFirst("a > dl > dd > h3").text()\n            var author = ""\n            var artist = ""\n            var status = ""\n            it.select("a > dl > dd > p").forEach {\n                if (it.text().contains("\xe4\xbd\x9c\xe8\x80\x85")) {\n                    author = it.text()\n                }\n                if (it.text().contains("\xe6\x92\xad\xe9\x9f\xb3")) {\n                    artist = it.text()\n                }\n                if (it.text().contains("\xe7\x8a\xb6\xe6\x80\x81")) {\n                    status = it.text()\n                }\n            }\n            list.add(Book(coverUrl, bookUrl, title, author, artist).apply {\n                this.status = status\n                this.sourceId = getSourceId()\n            })\n        }\n        return Pair(list, 1)\n    }\n\n    override fun getAudioUrlExtractor(): AudioUrlExtractor {\n        AudioUrlCustomExtractor.setUp { url ->\n            val ref = url.replaceAfterLast("/","").removeSuffix("/")+".html"\n            val date = Date().time.toString()\n            val str = "1234"+date+"115599"\n            val md5 = encode(str)\n            val ooo = "$date|$md5"\n            val doc = Jsoup.connect(url).config()\n                    .referrer(ref)\n                    .header("Accept","text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9")\n                    .header("Accept-Encoding","gzip,deflate")\n                    .header("Accept-Language","zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6")\n                    .header("Connection","keep-alive")\n                    .header("Host","m.audio698.com")\n                    .header("Referer",ref)\n                    .header("Upgrade-Insecure-Requests","1")\n                    .cookie("ooo", ooo)\n                    .get()\n            return@setUp doc.getElementsByTag("source")?.first()?.attr("src") ?: ""\n        }\n        return AudioUrlCustomExtractor\n    }\n\n    override fun getCategoryMenus(): List<CategoryMenu> {\n        val doc = Jsoup.connect("http://m.audio698.com/").config().get()\n        val list = ArrayList<CategoryMenu>()\n        val subMenu = doc.select(".nav > a").map { catefory ->\n            CategoryTab(catefory.text(), catefory.absUrl("href"))\n        }\n        list.add(CategoryMenu("\xe5\x88\x97\xe8\xa1\xa8", subMenu))\n        return list\n    }\n\n    override fun getCategoryList(url: String): Category {\n        val doc = Jsoup.connect(url).config().get()\n        val uiPage = doc.select(".cpage")\n\n        val upPageUrl = uiPage.select("a").filter { it.text().contains("\xe4\xb8\x8a\xe4\xb8\x80\xe9\xa1\xb5") }.first().absUrl("href")\n        val nextPageUrl = uiPage.select("a").filter { it.text().contains("\xe4\xb8\x8b\xe4\xb8\x80\xe9\xa1\xb5") }.first().absUrl("href")\n        val lastPage = uiPage.select("a").filter { it.text().contains("\xe6\x9c\xab\xe9\xa1\xb5") }.first().absUrl("href");\n\n        val totalPage = lastPage.split("_")[1].split(".")[0]\n\n        val up = upPageUrl.split("_")[1].split(".")[0];\n        val next = nextPageUrl.split("_")[1].split(".")[0];\n        var currentPage = ""\n        if (up.toInt() == next.toInt()) {\n            currentPage = "1"\n        } else if ((next.toInt() != totalPage.toInt()) && (next.toInt() - up.toInt()) == 1) {\n            currentPage = "1"\n        } else {\n            currentPage = (up.toInt() + 1).toString()\n        }\n        val list = ArrayList<Book>()\n        doc.select(".clist > a").forEach {\n            val coverUrl = it.selectFirst("a > dl > dt > img ").absUrl("src")\n            val bookUrl = it.selectFirst("a").absUrl("href")\n            val title = it.selectFirst("a > dl > dd > h3").text()\n            var author = ""\n            var artist = ""\n            var status = ""\n            it.select("a > dl > dd > p").forEach {\n                if (it.text().contains("\xe4\xbd\x9c\xe8\x80\x85")) {\n                    author = it.text()\n                }\n                if (it.text().contains("\xe6\x92\xad\xe9\x9f\xb3")) {\n                    artist = it.text()\n                }\n                if (it.text().contains("\xe7\x8a\xb6\xe6\x80\x81")) {\n                    status = it.text()\n                }\n            }\n            list.add(Book(coverUrl, bookUrl, title, author, artist).apply {\n                this.status = status\n                this.sourceId = getSourceId()\n            })\n        }\n        return Category(list, currentPage.toInt(), totalPage.toInt(), url, nextPageUrl)\n    }\n\n    override fun getBookDetailInfo(bookUrl: String, loadEpisodes: Boolean, loadFullPages: Boolean): BookDetail {\n        val episodes = ArrayList<Episode>()\n        var info = ""\n        if(loadEpisodes)\n        {\n            val doc = Jsoup.connect(bookUrl).config().get()\n            doc.select(".plist > a").forEach {\n                episodes.add(Episode(it.text(), it.select("a").first().absUrl("href")))\n            }\n            info = doc.select(".intro > p").text()\n        }\n        return BookDetail(episodes, info)\n    }\n\n    fun encode(text: String): String {\n        try {\n            //\xe8\x8e\xb7\xe5\x8f\x96md5\xe5\x8a\xa0\xe5\xaf\x86\xe5\xaf\xb9\xe8\xb1\xa1\n            val instance: MessageDigest = MessageDigest.getInstance("MD5")\n            //\xe5\xaf\xb9\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe5\x8a\xa0\xe5\xaf\x86\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe5\xad\x97\xe8\x8a\x82\xe6\x95\xb0\xe7\xbb\x84\n            val digest:ByteArray = instance.digest(text.toByteArray())\n            var sb : StringBuffer = StringBuffer()\n            for (b in digest) {\n                //\xe8\x8e\xb7\xe5\x8f\x96\xe4\xbd\x8e\xe5\x85\xab\xe4\xbd\x8d\xe6\x9c\x89\xe6\x95\x88\xe5\x80\xbc\n                var i :Int = b.toInt() and 0xff\n                //\xe5\xb0\x86\xe6\x95\xb4\xe6\x95\xb0\xe8\xbd\xac\xe5\x8c\x96\xe4\xb8\xba16\xe8\xbf\x9b\xe5\x88\xb6\n                var hexString = Integer.toHexString(i)\n                if (hexString.length < 2) {\n                    //\xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe4\xb8\x80\xe4\xbd\x8d\xe7\x9a\x84\xe8\xaf\x9d\xef\xbc\x8c\xe8\xa1\xa50\n                    hexString = "0" + hexString\n                }\n                sb.append(hexString)\n            }\n            return sb.toString()\n\n        } catch (e: NoSuchAlgorithmException) {\n            e.printStackTrace()\n        }\n\n        return ""\n    }\n}'