b'// Copyright (C) 2014-2023 Manuel Schneider\n\n#include "albert/logging.h"\n#include "telemetry.h"\n#include <QApplication>\n#include <QCryptographicHash>\n#include <QDateTime>\n#include <QJsonDocument>\n#include <QMessageBox>\n#include <QNetworkAccessManager>\n#include <QNetworkReply>\n#include <QSettings>\n#include <QTimer>\nstatic const char *CFG_LAST_REPORT = "last_report";\nstatic const uint DEF_LAST_REPORT = 0;\nstatic const char *CFG_TELEMETRY = "telemetry";\n\n\nTelemetry::Telemetry()\n{\n    QObject::connect(&timer_, &QTimer::timeout, [this]{trySendReport();});\n\n    QSettings settings(qApp->applicationName());\n    if (!settings.contains(CFG_TELEMETRY)) {\n        QMessageBox mb(QMessageBox::Question, "Albert telemetry",\n                       "Albert collects anonymous data to improve user experience. You can check "\n                       "the data sent in the details. Opt in?",\n                       QMessageBox::No|QMessageBox::Yes);\n        mb.setDefaultButton(QMessageBox::Yes);\n        mb.setDetailedText(QJsonDocument(buildReport()).toJson(QJsonDocument::Indented));\n        settings.setValue(CFG_TELEMETRY, mb.exec() == QMessageBox::Yes);\n    }\n    enable(settings.value(CFG_TELEMETRY).toBool());\n}\n\nvoid Telemetry::enable(bool enable)\n{\n    if (enable) {\n        trySendReport();\n        timer_.start(60000);\n    }\n    else {\n        timer_.stop();\n    }\n    QSettings(qApp->applicationName()).setValue(CFG_TELEMETRY, enable);\n}\n\nbool Telemetry::isEnabled() const\n{\n    return QSettings(qApp->applicationName()).value(CFG_TELEMETRY).toBool();\n}\n\nvoid Telemetry::trySendReport()\n{\n    // timezones and daytimes of users make it complicated to get trustworthy per day data.\n    // Therefore three hours sampling rate.\n\n    auto ts = QSettings(qApp->applicationName()).value(CFG_LAST_REPORT, DEF_LAST_REPORT).toUInt();\n    if (ts < QDateTime::currentSecsSinceEpoch() - 10800) {\n        QJsonObject object = buildReport();\n        QString addr = "Zffb,!!*\\" $## $\\"\' **!";\n        for ( auto &c: addr)\n            c.unicode()=c.unicode()+14;\n\n        static QNetworkAccessManager *manager = new QNetworkAccessManager;\n        QNetworkRequest request((QUrl(addr)));\n        request.setHeader(QNetworkRequest::ContentTypeHeader, QString("application/json"));\n        QNetworkReply* reply = manager->put(request, QJsonDocument(object).toJson(QJsonDocument::Compact));\n        QObject::connect(reply, &QNetworkReply::finished, [reply](){\n            if (reply->error() == QNetworkReply::NoError){\n                DEBG << "Report sent.";\n                QSettings(qApp->applicationName()).setValue(CFG_LAST_REPORT, QDateTime::currentSecsSinceEpoch());\n            }\n            reply->deleteLater();\n        });\n    }\n}\n\nQJsonObject Telemetry::buildReport()\n{\n    QJsonObject object;\n    object.insert("report", 1);\n    object.insert("version", qApp->applicationVersion());\n    object.insert("os", QSysInfo::prettyProductName());\n    object.insert("id", QString::fromUtf8(QCryptographicHash::hash(QSysInfo::machineUniqueId(), QCryptographicHash::Sha1).toHex()).left(12));\n    return object;\n}\n'