b'package effectivejava.chapter8.item55;\n\nimport java.util.*;\n\n// Using Optional<T> as a return type (Pages 249-251)\npublic class Max {\n//    // Returns maximum value in collection - throws exception if empty (Page 249)\n//    public static <E extends Comparable<E>> E max(Collection<E> c) {\n//        if (c.isEmpty())\n//            throw new IllegalArgumentException("Empty collection");\n//\n//        E result = null;\n//        for (E e : c)\n//            if (result == null || e.compareTo(result) > 0)\n//                result = Objects.requireNonNull(e);\n//\n//        return result;\n//    }\n\n//    // Returns maximum value in collection as an Optional<E> (Page 250)\n//    public static <E extends Comparable<E>>\n//    Optional<E> max(Collection<E> c) {\n//        if (c.isEmpty())\n//            return Optional.empty();\n//\n//        E result = null;\n//        for (E e : c)\n//            if (result == null || e.compareTo(result) > 0)\n//                result = Objects.requireNonNull(e);\n//\n//        return Optional.of(result);\n//    }\n\n    // Returns max val in collection as Optional<E> - uses stream (Page 250)\n    public static <E extends Comparable<E>>\n    Optional<E> max(Collection<E> c) {\n        return c.stream().max(Comparator.naturalOrder());\n    }\n\n    public static void main(String[] args) {\n        List<String> words = Arrays.asList(args);\n\n        System.out.println(max(words));\n\n        // Using an optional to provide a chosen default value (Page 251)\n        String lastWordInLexicon = max(words).orElse("No words...");\n        System.out.println(lastWordInLexicon);\n    }\n}\n'