b'/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    pair<int, int> getDepthAndSum(TreeNode* root) {\n        if (root == NULL) return {0, 0};\n        if (root->left == NULL and root->right == NULL)\n            return {1, root->val};\n        \n        auto [left_depth, left_sum] = getDepthAndSum(root->left);\n        auto [right_depth, right_sum] = getDepthAndSum(root->right);\n        \n        if (left_depth == right_depth)\n            return {1 + left_depth, left_sum + right_sum};\n        if (left_depth > right_depth)\n            return {1 + left_depth, left_sum};\n        return {1 + right_depth, right_sum};\n    }\npublic:\n    int deepestLeavesSum(TreeNode* root) {\n        return getDepthAndSum(root).second;\n    }\n};'