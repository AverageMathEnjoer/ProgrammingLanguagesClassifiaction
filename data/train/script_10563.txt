b'// UVa1103 Ancient Messages\n// Rujia Liu\n// we pad one empty line/column to the top/bottom/left/right border, so color 1 is always "background" white\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<vector>\n#include<set>\nusing namespace std;\n\nchar bin[256][5];\n\nconst int maxh = 200 + 5;\nconst int maxw = 50 * 4 + 5;\n\nint H, W, pic[maxh][maxw], color[maxh][maxw];\nchar line[maxw];\n\nvoid decode(char ch, int row, int col) {\n  for(int i = 0; i < 4; i++)\n    pic[row][col+i] = bin[ch][i] - \'0\';\n}\n\nconst int dr[] = {-1, 1, 0, 0};\nconst int dc[] = {0, 0, -1, 1};\n\n// dfs from (row, col) and paint color c\nvoid dfs(int row, int col, int c) {\n  color[row][col] = c;\n  for(int i = 0; i < 4; i++) {\n    int row2 = row + dr[i];\n    int col2 = col + dc[i];\n    if(row2 >= 0 && row2 < H && col2 >= 0 && col2 < W && pic[row2][col2] == pic[row][col] && color[row2][col2] == 0)\n      dfs(row2, col2, c);\n  }\n}\n\nvector<set<int> > neighbors;\n\nvoid check_neighbors(int row, int col) {\n  for(int i = 0; i < 4; i++) {\n    int row2 = row + dr[i];\n    int col2 = col + dc[i];\n    if(row2 >= 0 && row2 < H && col2 >= 0&& col2 < W && pic[row2][col2] == 0 && color[row2][col2] != 1)\n      neighbors[color[row][col]].insert(color[row2][col2]);\n  }\n}\n\nconst char* code = "WAKJSD";\n\nchar recognize(int c) {\n  int cnt = neighbors[c].size();\n  return code[cnt];\n}\n\n// use this function to print the decoded picture\nvoid print() {\n  for(int i = 0; i < H; i++) {\n    for(int j = 0; j < W; j++) printf("%d", pic[i][j]);\n    printf("\\n");\n  }\n}\n\nint main() {\n  strcpy(bin[\'0\'], "0000");\n  strcpy(bin[\'1\'], "0001");\n  strcpy(bin[\'2\'], "0010");\n  strcpy(bin[\'3\'], "0011");\n  strcpy(bin[\'4\'], "0100");\n  strcpy(bin[\'5\'], "0101");\n  strcpy(bin[\'6\'], "0110");\n  strcpy(bin[\'7\'], "0111");\n  strcpy(bin[\'8\'], "1000");\n  strcpy(bin[\'9\'], "1001");\n  strcpy(bin[\'a\'], "1010");\n  strcpy(bin[\'b\'], "1011");\n  strcpy(bin[\'c\'], "1100");\n  strcpy(bin[\'d\'], "1101");\n  strcpy(bin[\'e\'], "1110");\n  strcpy(bin[\'f\'], "1111");\n\n  int kase = 0;\n  while(scanf("%d%d", &H, &W) == 2 && H) {\n    memset(pic, 0, sizeof(pic));\n    for(int i = 0; i < H; i++) {\n      scanf("%s", line);\n      for(int j = 0; j < W; j++)\n        decode(line[j], i+1, j*4+1);\n    }\n\n    H += 2;\n    W = W * 4 + 2;\n\n    int cnt = 0;\n    vector<int> cc; // connected components of 1\n    memset(color, 0, sizeof(color));\n    for(int i = 0; i < H; i++)\n      for(int j = 0; j < W; j++)\n        if(!color[i][j]) {\n          dfs(i, j, ++cnt);\n          if(pic[i][j] == 1) cc.push_back(cnt);\n        }\n\n    neighbors.clear();\n    neighbors.resize(cnt+1);\n    for(int i = 0; i < H; i++)\n      for(int j = 0; j < W; j++)\n        if(pic[i][j] == 1)\n          check_neighbors(i, j);\n\n    vector<char> ans;\n    for(int i = 0; i < cc.size(); i++)\n      ans.push_back(recognize(cc[i]));\n    sort(ans.begin(), ans.end());\n\n    printf("Case %d: ", ++kase);\n    for(int i = 0; i < ans.size(); i++) printf("%c", ans[i]);\n    printf("\\n");\n  }\n  return 0;\n}\n'