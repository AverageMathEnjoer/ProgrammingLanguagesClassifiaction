b"{-# LANGUAGE DeriveDataTypeable #-}\n\n-- | Exceptions and utilities\nmodule Pdf.Core.Exception\n(\n  Corrupted(..),\n  Unexpected(..),\n  sure,\n  message\n)\nwhere\n\nimport Data.Typeable\nimport Control.Exception hiding (throw)\n\n-- | File is corrupted\n--\n-- Contains general message and a list of details\ndata Corrupted = Corrupted String [String]\n  deriving (Show, Typeable)\n\ninstance Exception Corrupted where\n\n-- | Something unexpected occurs, probably API missuse\ndata Unexpected = Unexpected String [String]\n  deriving (Show, Typeable)\n\ninstance Exception Unexpected where\n\n-- | We are sure it is 'Right'. Otherwise 'Corripted' is thrown\nsure :: Either String a -> IO a\nsure (Right a) = return a\nsure (Left err) = throwIO (Corrupted err [])\n\n-- | Catch 'Corrupted' and 'Unexpected'\n-- and add a message to it before rethrowing\nmessage :: String -> IO a -> IO a\nmessage msg a = a `catches`\n  [ Handler $ \\(Corrupted err msgs) -> throwIO (Corrupted msg (err : msgs))\n  , Handler $ \\(Unexpected err msgs) -> throwIO (Unexpected msg (err : msgs))\n  ]\n"