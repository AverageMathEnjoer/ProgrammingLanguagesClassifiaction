b'    internal class PhoneSearchBest\n    {\n        private static readonly Lazy<PhoneSearchBest> lazy = new Lazy<PhoneSearchBest>(() => new PhoneSearchBest());\n        public static PhoneSearchBest Instance { get { return lazy.Value; } }\n        private PhoneSearchBest()\n        {\n            LoadDat();\n\n        }\n\n        private byte[] data;\n        private long[,] phone2D;\n        private string[] addrArr;\n        private string[] ispArr;\n\n        /// <summary>\n        /// \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe4\xba\x8c\xe8\xbf\x9b\xe5\x88\xb6dat\xe6\x95\xb0\xe6\x8d\xae\n        /// </summary>\n        /// <param name="dataPath"></param>\n        /// \n\n\n        private void LoadDat()\n        {\n\n            var datPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, @"qqzeng-phone-3.0.dat");\n\n            data = File.ReadAllBytes(datPath);\n\n            var PrefSize = BitConverter.ToUInt32(data, 0);\n\n            var descLength = BitConverter.ToUInt32(data, 8);\n            var ispLength = BitConverter.ToUInt32(data, 12);\n\n            var PhoneSize = BitConverter.ToUInt32(data, 4);\n            var verNum = BitConverter.ToUInt32(data, 16);\n\n            var headLength = 20;\n            int startIndex = (int)(headLength + descLength + ispLength);\n\n            //\xe5\x86\x85\xe5\xae\xb9\xe6\x95\xb0\xe7\xbb\x84        \n            string descString = Encoding.UTF8.GetString(data, headLength, (int)descLength);\n            addrArr = descString.Split(\'&\');\n\n            //\xe8\xbf\x90\xe8\x90\xa5\xe5\x95\x86\xe6\x95\xb0\xe7\xbb\x84        \n            string ispString = Encoding.UTF8.GetString(data, headLength + (int)descLength, (int)ispLength);\n            ispArr = ispString.Split(\'&\');\n\n\n            phone2D = new long[200, 10000];\n            for (var m = 0; m < PrefSize; m++)\n            {\n                int i = m * 7 + startIndex;\n                int pref = data[i];\n                int index = (int)BitConverter.ToUInt32(data, i + 1);\n                int length = BitConverter.ToUInt16(data, i + 5);\n\n                for (int n = 0; n < length; n++)\n                {\n                    int p = (int)(startIndex + PrefSize * 7 + (n + index) * 4);\n                    var suff = BitConverter.ToUInt16(data, p);\n                    var addrispIndex = BitConverter.ToUInt16(data, p + 2);\n                    phone2D[pref, suff] = addrispIndex;\n                }\n\n            }\n\n\n\n        }\n\n\n\n\n\n        public string Query(string phone)\n        {\n            var prefix = Convert.ToInt32(phone.Substring(0, 3));//\xe5\x89\x8d\xe7\xbc\x80\n            var suffix = Convert.ToInt32(phone.Substring(3, 4));//\xe5\x90\x8e\xe7\xbc\x80\n            var addrispIndex = phone2D[prefix, suffix];\n            if (addrispIndex == 0)\n            {\n                return "";\n            }\n            return addrArr[addrispIndex / 100] + "|" + ispArr[addrispIndex % 100];\n\n        }\n\n\n\n\n    }\n\n    /*\n    \xef\xbc\x88\xe8\xb0\x83\xe7\x94\xa8\xe4\xbe\x8b\xe5\xad\x90\xef\xbc\x89\xef\xbc\x9a    \n   string result = PhoneSearchBest.Instance.Query("\xe5\x8f\xb7\xe6\xae\xb5|\xe5\x8f\xb7\xe7\xa0\x81");\n   --> result="\xe7\x9c\x81\xe4\xbb\xbd|\xe5\x9f\x8e\xe5\xb8\x82|\xe5\x8c\xba\xe5\x8f\xb7|\xe9\x82\xae\xe7\xbc\x96|\xe8\xa1\x8c\xe6\x94\xbf\xe5\x8c\xba\xe5\x88\x92\xe4\xbb\xa3\xe7\xa0\x81|\xe8\xbf\x90\xe8\x90\xa5\xe5\x95\x86"\n    */\n'