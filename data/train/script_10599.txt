b'package com.rd.animation.type;\n\nimport android.animation.ArgbEvaluator;\nimport android.animation.PropertyValuesHolder;\nimport android.animation.ValueAnimator;\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\nimport android.view.animation.AccelerateDecelerateInterpolator;\nimport com.rd.animation.controller.ValueController;\nimport com.rd.animation.data.type.ColorAnimationValue;\n\npublic class ColorAnimation extends BaseAnimation<ValueAnimator> {\n\n    public static final String DEFAULT_UNSELECTED_COLOR = "#33ffffff";\n    public static final String DEFAULT_SELECTED_COLOR = "#ffffff";\n\n    static final String ANIMATION_COLOR_REVERSE = "ANIMATION_COLOR_REVERSE";\n    static final String ANIMATION_COLOR = "ANIMATION_COLOR";\n\n    private ColorAnimationValue value;\n\n    int colorStart;\n    int colorEnd;\n\n    public ColorAnimation(@Nullable ValueController.UpdateListener listener) {\n        super(listener);\n        value = new ColorAnimationValue();\n    }\n\n    @NonNull\n    @Override\n    public ValueAnimator createAnimator() {\n        ValueAnimator animator = new ValueAnimator();\n        animator.setDuration(BaseAnimation.DEFAULT_ANIMATION_TIME);\n        animator.setInterpolator(new AccelerateDecelerateInterpolator());\n        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n            @Override\n            public void onAnimationUpdate(ValueAnimator animation) {\n                onAnimateUpdated(animation);\n            }\n        });\n\n        return animator;\n    }\n\n    @Override\n    public ColorAnimation progress(float progress) {\n        if (animator != null) {\n            long playTime = (long) (progress * animationDuration);\n\n            if (animator.getValues() != null && animator.getValues().length > 0) {\n                animator.setCurrentPlayTime(playTime);\n            }\n        }\n\n        return this;\n    }\n\n    @NonNull\n    public ColorAnimation with(int colorStart, int colorEnd) {\n        if (animator != null && hasChanges(colorStart, colorEnd)) {\n\n            this.colorStart = colorStart;\n            this.colorEnd = colorEnd;\n\n            PropertyValuesHolder colorHolder = createColorPropertyHolder(false);\n            PropertyValuesHolder reverseColorHolder = createColorPropertyHolder(true);\n\n            animator.setValues(colorHolder, reverseColorHolder);\n        }\n\n        return this;\n    }\n\n    PropertyValuesHolder createColorPropertyHolder(boolean isReverse) {\n        String propertyName;\n        int colorStart;\n        int colorEnd;\n\n        if (isReverse) {\n            propertyName = ANIMATION_COLOR_REVERSE;\n            colorStart = this.colorEnd;\n            colorEnd = this.colorStart;\n\n        } else {\n            propertyName = ANIMATION_COLOR;\n            colorStart = this.colorStart;\n            colorEnd = this.colorEnd;\n        }\n\n        PropertyValuesHolder holder = PropertyValuesHolder.ofInt(propertyName, colorStart, colorEnd);\n        holder.setEvaluator(new ArgbEvaluator());\n\n        return holder;\n    }\n\n    @SuppressWarnings("RedundantIfStatement")\n    private boolean hasChanges(int colorStart, int colorEnd) {\n        if (this.colorStart != colorStart) {\n            return true;\n        }\n\n        if (this.colorEnd != colorEnd) {\n            return true;\n        }\n\n        return false;\n    }\n\n    private void onAnimateUpdated(@NonNull ValueAnimator animation) {\n        int color = (int) animation.getAnimatedValue(ANIMATION_COLOR);\n        int colorReverse = (int) animation.getAnimatedValue(ANIMATION_COLOR_REVERSE);\n\n        value.setColor(color);\n        value.setColorReverse(colorReverse);\n\n        if (listener != null) {\n            listener.onValueUpdated(value);\n        }\n    }\n}\n'