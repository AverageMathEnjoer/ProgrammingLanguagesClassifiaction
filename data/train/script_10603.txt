b"\n-- | The FontDescriptor describes a font's other metrics than it's\n-- widths, see chap. 9.8 of PDF32000:2008\n\nmodule Pdf.Content.FontDescriptor\n  ( FontDescriptor(..)\n  , FontDescriptorFlag(..)\n  , flagSet\n  )\nwhere\n\nimport Pdf.Core.Types\n\nimport Data.Int\nimport Data.ByteString (ByteString)\n\ndata FontDescriptor = FontDescriptor {\n  fdFontName :: ByteString,\n  fdFontFamily :: Maybe ByteString,\n  fdFontStretch :: Maybe ByteString,\n  fdFontWeight :: Maybe Int,\n  fdFlags :: Int64, -- must hold at least 32 bit unsigned integers\n  fdFontBBox :: Maybe (Rectangle Double),\n  fdItalicAngle :: Double,\n  fdAscent :: Maybe Double,\n  fdDescent :: Maybe Double,\n  fdLeading :: Maybe Double,\n  fdCapHeight :: Maybe Double,\n  fdXHeight :: Maybe Double,\n  fdStemV :: Maybe Double,\n  fdStemH :: Maybe Double,\n  fdAvgWidth :: Maybe Double,\n  fdMaxWidth :: Maybe Double,\n  fdMissingWidth :: Maybe Double,\n  -- FIXME: add FontFile*\n  fdCharSet :: Maybe ByteString\n  -- FIXME: add special fields for CIDFonts\n  } deriving (Show)\n\n\ndata FontDescriptorFlag =\n  FixedPitch | Serif | Symbolic | Script | NonSymbolic | Italic | AllCap | SmallCap | ForceBold\n\n\nflagSet :: FontDescriptor -> FontDescriptorFlag -> Bool\nflagSet fd FixedPitch = flagSet' 1 (fdFlags fd) 0\nflagSet fd Serif = flagSet' 2 (fdFlags fd) 0\nflagSet fd Symbolic = flagSet' 3 (fdFlags fd) 0\nflagSet fd Script = flagSet' 4 (fdFlags fd) 0\nflagSet fd NonSymbolic = flagSet' 6 (fdFlags fd) 0\nflagSet fd Italic = flagSet' 7 (fdFlags fd) 0\nflagSet fd AllCap = flagSet' 17 (fdFlags fd) 0\nflagSet fd SmallCap = flagSet' 18 (fdFlags fd) 0\nflagSet fd ForceBold = flagSet' 19 (fdFlags fd) 0\n\nflagSet' :: Int -> Int64 -> Int -> Bool\nflagSet' pos val expnt\n  | expnt == pos - 1 = val `mod` 2 == 1\n  | val == 0 = False\n  | otherwise = flagSet' pos (val `div` 2) (expnt+1)\n"