b'\xef\xbb\xbf// UVa548 Tree\n// Rujia Liu\n// \xe9\xa2\x98\xe6\x84\x8f\xef\xbc\x9a\xe7\xbb\x99\xe4\xb8\x80\xe6\xa3\xb5\xe7\x82\xb9\xe5\xb8\xa6\xe6\x9d\x83\xef\xbc\x88\xe6\x9d\x83\xe5\x90\x84\xe4\xb8\x8d\xe7\x9b\xb8\xe5\x90\x8c\xef\xbc\x8c\xe9\x83\xbd\xe6\x98\xaf\xe6\xad\xa3\xe6\x95\xb4\xe6\x95\xb0\xef\xbc\x89\xe4\xba\x8c\xe5\x8f\x89\xe6\xa0\x91\xe7\x9a\x84\xe4\xb8\xad\xe5\xba\x8f\xe5\x92\x8c\xe5\x90\x8e\xe5\xba\x8f\xe9\x81\x8d\xe5\x8e\x86\xef\xbc\x8c\xe6\x89\xbe\xe4\xb8\x80\xe4\xb8\xaa\xe5\x8f\xb6\xe5\xad\x90\xe4\xbd\xbf\xe5\xbe\x97\xe5\xae\x83\xe5\x88\xb0\xe6\xa0\xb9\xe7\x9a\x84\xe8\xb7\xaf\xe5\xbe\x84\xe4\xb8\x8a\xe7\x9a\x84\xe6\x9d\x83\xe5\x92\x8c\xe6\x9c\x80\xe5\xb0\x8f\xe3\x80\x82\xe5\xa6\x82\xe6\x9e\x9c\xe6\x9c\x89\xe5\xa4\x9a\xe8\xa7\xa3\xef\xbc\x8c\xe8\xaf\xa5\xe5\x8f\xb6\xe5\xad\x90\xe6\x9c\xac\xe8\xba\xab\xe7\x9a\x84\xe6\x9d\x83\xe5\xba\x94\xe5\xb0\xbd\xe9\x87\x8f\xe5\xb0\x8f\n// \xe7\xae\x97\xe6\xb3\x95\xef\xbc\x9a\xe9\x80\x92\xe5\xbd\x92\xe5\xbb\xba\xe6\xa0\x91\xef\xbc\x8c\xe7\x84\xb6\xe5\x90\x8eDFS\xe3\x80\x82\xe6\xb3\xa8\xe6\x84\x8f\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe9\x80\x92\xe5\xbd\x92\xe6\xb1\x82\xe7\xbb\x93\xe6\x9e\x9c\xe4\xb9\x9f\xe5\x8f\xaf\xe4\xbb\xa5\xef\xbc\x8c\xe4\xbd\x86\xe6\x98\xaf\xe5\x85\x88\xe5\xbb\xba\xe6\xa0\x91\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xe4\xb8\x8d\xe4\xbb\x85\xe7\x9b\xb4\xe8\xa7\x82\xef\xbc\x8c\xe8\x80\x8c\xe4\xb8\x94\xe6\x9b\xb4\xe5\xa5\xbd\xe8\xb0\x83\xe8\xaf\x95\n#include<iostream>\n#include<string>\n#include<sstream>\n#include<algorithm>\nusing namespace std;\n\n// \xe5\x9b\xa0\xe4\xb8\xba\xe5\x90\x84\xe4\xb8\xaa\xe7\xbb\x93\xe7\x82\xb9\xe7\x9a\x84\xe6\x9d\x83\xe5\x80\xbc\xe5\x90\x84\xe4\xb8\x8d\xe7\x9b\xb8\xe5\x90\x8c\xe4\xb8\x94\xe9\x83\xbd\xe6\x98\xaf\xe6\xad\xa3\xe6\x95\xb4\xe6\x95\xb0\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe7\x94\xa8\xe6\x9d\x83\xe5\x80\xbc\xe4\xbd\x9c\xe4\xb8\xba\xe7\xbb\x93\xe7\x82\xb9\xe7\xbc\x96\xe5\x8f\xb7\nconst int maxv = 10000 + 10;\nint in_order[maxv], post_order[maxv], lch[maxv], rch[maxv];\nint n;\n\nbool read_list(int* a) {\n  string line;\n  if(!getline(cin, line)) return false;\n  stringstream ss(line);\n  n = 0;\n  int x;\n  while(ss >> x) a[n++] = x;\n  return n > 0;\n}\n\n// \xe6\x8a\x8ain_order[L1..R1]\xe5\x92\x8cpost_order[L2..R2]\xe5\xbb\xba\xe6\x88\x90\xe4\xb8\x80\xe6\xa3\xb5\xe4\xba\x8c\xe5\x8f\x89\xe6\xa0\x91\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe6\xa0\x91\xe6\xa0\xb9\nint build(int L1, int R1, int L2, int R2) {\n  if(L1 > R1) return 0; // \xe7\xa9\xba\xe6\xa0\x91\n  int root = post_order[R2];\n  int p = L1;\n  while(in_order[p] != root) p++;\n  int cnt = p-L1; // \xe5\xb7\xa6\xe5\xad\x90\xe6\xa0\x91\xe7\x9a\x84\xe7\xbb\x93\xe7\x82\xb9\xe4\xb8\xaa\xe6\x95\xb0\n  lch[root] = build(L1, p-1, L2, L2+cnt-1);\n  rch[root] = build(p+1, R1, L2+cnt, R2-1);\n  return root;\n}\n\nint best, best_sum; // \xe7\x9b\xae\xe5\x89\x8d\xe4\xb8\xba\xe6\xad\xa2\xe7\x9a\x84\xe6\x9c\x80\xe4\xbc\x98\xe8\xa7\xa3\xe5\x92\x8c\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe6\x9d\x83\xe5\x92\x8c\n\nvoid dfs(int u, int sum) {\n  sum += u;\n  if(!lch[u] && !rch[u]) { // \xe5\x8f\xb6\xe5\xad\x90\n    if(sum < best_sum || (sum == best_sum && u < best)) { best = u; best_sum = sum; }\n  }\n  if(lch[u]) dfs(lch[u], sum);\n  if(rch[u]) dfs(rch[u], sum);\n}\n\nint main() {\n  while(read_list(in_order)) {\n    read_list(post_order);\n    build(0, n-1, 0, n-1);\n    best_sum = 1000000000;\n    dfs(post_order[n-1], 0);\n    cout << best << "\\n";\n  }\n  return 0;\n}\n'