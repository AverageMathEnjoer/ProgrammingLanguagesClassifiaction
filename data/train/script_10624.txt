b'{-# LANGUAGE DeriveGeneric #-}\n{-# LANGUAGE OverloadedStrings #-}\n\n-- | Bindings Authorization part of The OAuth 2.0 Authorization Framework\n-- RFC6749 <https://www.rfc-editor.org/rfc/rfc6749>\nmodule Network.OAuth.OAuth2.AuthorizationRequest where\n\nimport Data.Aeson\nimport Data.Function (on)\nimport Data.List qualified as List\nimport Data.Text.Encoding qualified as T\nimport GHC.Generics (Generic)\nimport Lens.Micro (over)\nimport Network.OAuth.OAuth2.Internal\nimport URI.ByteString\n\n--------------------------------------------------\n\n-- * Errors\n\n--------------------------------------------------\n\ninstance FromJSON Errors where\n  parseJSON = genericParseJSON defaultOptions {constructorTagModifier = camelTo2 \'_\'}\n\n-- | Authorization Code Grant Error Responses https://tools.ietf.org/html/rfc6749#section-4.1.2.1\n-- I found hard time to figure a way to test the authorization error flow\n-- When anything wrong in @/authorize@ request, it will stuck at the Provider page\n-- hence no way for this library to parse error response.\n-- In other words, @/authorize@ ends up with 4xx or 5xx.\n-- Revisit this whenever find a case OAuth2 provider redirects back to Relying party with errors.\ndata Errors\n  = InvalidRequest\n  | UnauthorizedClient\n  | AccessDenied\n  | UnsupportedResponseType\n  | InvalidScope\n  | ServerError\n  | TemporarilyUnavailable\n  deriving (Show, Eq, Generic)\n\n--------------------------------------------------\n\n-- * URLs\n\n--------------------------------------------------\n\n-- | See \'authorizationUrlWithParams\'\nauthorizationUrl :: OAuth2 -> URI\nauthorizationUrl = authorizationUrlWithParams []\n\n-- | Prepare the authorization URL.  Redirect to this URL\n-- asking for user interactive authentication.\n--\n-- @since 2.6.0\nauthorizationUrlWithParams :: QueryParams -> OAuth2 -> URI\nauthorizationUrlWithParams qs oa = over (queryL . queryPairsL) (++ queryParts) (oauth2AuthorizeEndpoint oa)\n  where\n    queryParts =\n      List.nubBy ((==) `on` fst) $\n        qs\n          ++ [ ("client_id", T.encodeUtf8 $ oauth2ClientId oa)\n             , ("response_type", "code")\n             , ("redirect_uri", serializeURIRef\' $ oauth2RedirectUri oa)\n             ]\n'