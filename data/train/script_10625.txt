b'package com.github.eprendre.sources_by_eprendre\n\nimport com.github.eprendre.tingshu.extensions.config\nimport com.github.eprendre.tingshu.sources.AudioUrlExtractor\nimport com.github.eprendre.tingshu.sources.AudioUrlWebViewExtractor\nimport com.github.eprendre.tingshu.sources.TingShu\nimport com.github.eprendre.tingshu.utils.*\nimport org.jsoup.Jsoup\nimport java.lang.Exception\nimport java.net.URLEncoder\n\nobject LianTingWang : TingShu() {\n    override fun getSourceId(): String {\n        return "5caf7568d5f64406822e3a41364a016c"\n    }\n\n    override fun getUrl(): String {\n        return "https://m.ting55.com"\n    }\n\n    override fun getName(): String {\n        return "\xe6\x81\x8b\xe5\x90\xac\xe7\xbd\x91"\n    }\n\n    override fun getDesc(): String {\n        return "\xe6\x8e\xa8\xe8\x8d\x90\xe6\x8c\x87\xe6\x95\xb0:5\xe6\x98\x9f \xe2\xad\x90\xe2\xad\x90\xe2\xad\x90\xe2\xad\x90\xe2\xad\x90\\n\xe9\x83\xa8\xe5\x88\x86\xe4\xb9\xa6\xe7\xb1\x8d\xe6\x98\xaf\xe6\x94\xb6\xe8\xb4\xb9\xe5\x86\x85\xe5\xae\xb9\xef\xbc\x8c\xe6\x9c\xac app \xe4\xb8\x8d\xe6\x94\xaf\xe6\x8c\x81\xe6\x92\xad\xe6\x94\xbe\xe3\x80\x82"\n    }\n\n    override fun search(keywords: String, page: Int): Pair<List<Book>, Int> {\n        val encodedKeywords = URLEncoder.encode(keywords, "utf-8")\n        val url = "https://m.ting55.com/search/$encodedKeywords/page/$page"\n        val doc = Jsoup.connect(url).config(false).get()\n\n        val cpage = doc.selectFirst(".cpage")\n        var totalPage = 1\n        if (cpage != null && cpage.childrenSize() > 0) {\n            totalPage = cpage.selectFirst("span").text().replace("\xe9\xa1\xb5\xe6\xac\xa1 ", "").split("/")[1].toInt()\n        }\n\n        val list = ArrayList<Book>()\n        try {\n            val elementList = doc.select(".slist > a")\n            elementList.forEach { element ->\n                val coverUrl = element.selectFirst("dl > dt > img").absUrl("src")\n                val bookUrl = element.absUrl("href")\n                val infos = element.selectFirst("dl > dd").children()\n                val title = infos[0].text()\n                val author = infos[1].text()\n                val artist = infos[2].text()\n                val status = infos[3].text()\n                list.add(Book(coverUrl, bookUrl, title, author, artist).apply {\n                    this.status = status\n                    this.sourceId = getSourceId()\n                })\n            }\n        } catch (e: Exception) {\n            e.printStackTrace()\n        }\n        return Pair(list, totalPage)\n    }\n\n    override fun getBookDetailInfo(bookUrl: String, loadEpisodes: Boolean, loadFullPages: Boolean): BookDetail {\n        val doc = Jsoup.connect(bookUrl).config(false).get()\n\n        val episodes = doc.select(".plist > a").map {\n            Episode(it.text(), it.absUrl("href")).apply {\n                this.isFree = it.hasClass("f")\n            }\n        }\n        val intro = doc.selectFirst(".intro").text()\n        return BookDetail(episodes, intro)\n    }\n\n    override fun getAudioUrlExtractor(): AudioUrlExtractor {\n        AudioUrlWebViewExtractor.setUp(isDeskTop = false) { str ->\n            val doc = Jsoup.parse(str)\n            return@setUp doc.selectFirst("audio")?.attr("src")\n        }\n        return AudioUrlWebViewExtractor\n    }\n\n    override fun getCategoryMenus(): List<CategoryMenu> {\n        val menu1 = CategoryMenu(\n            "\xe6\x9c\x89\xe5\xa3\xb0\xe5\xb0\x8f\xe8\xaf\xb4", listOf(\n                CategoryTab("\xe6\x8e\xa8\xe8\x8d\x90", "https://m.ting55.com/tuijian"),\n                CategoryTab("\xe7\x8e\x84\xe5\xb9\xbb", "https://m.ting55.com/category/1"),\n                CategoryTab("\xe6\xad\xa6\xe4\xbe\xa0", "https://m.ting55.com/category/2"),\n                CategoryTab("\xe9\x83\xbd\xe5\xb8\x82", "https://m.ting55.com/category/3"),\n                CategoryTab("\xe8\xa8\x80\xe6\x83\x85", "https://m.ting55.com/category/4"),\n                CategoryTab("\xe7\xa9\xbf\xe8\xb6\x8a", "https://m.ting55.com/category/5"),\n                CategoryTab("\xe7\xa7\x91\xe5\xb9\xbb", "https://m.ting55.com/category/6"),\n                CategoryTab("\xe6\x8e\xa8\xe7\x90\x86", "https://m.ting55.com/category/7"),\n                CategoryTab("\xe6\x81\x90\xe6\x80\x96", "https://m.ting55.com/category/8"),\n                CategoryTab("\xe6\x83\x8a\xe6\x82\x9a", "https://m.ting55.com/category/9")\n            )\n        )\n        val menu2 = CategoryMenu(\n            "\xe5\x85\xb6\xe5\xae\x83", listOf(\n                CategoryTab("\xe5\x8e\x86\xe5\x8f\xb2", "https://m.ting55.com/category/10"),\n                CategoryTab("\xe7\xbb\x8f\xe5\x85\xb8", "https://m.ting55.com/category/11"),\n                CategoryTab("\xe7\x9b\xb8\xe5\xa3\xb0", "https://m.ting55.com/category/12"),\n                CategoryTab("\xe8\xaf\x84\xe4\xb9\xa6", "https://m.ting55.com/category/14"),\n                CategoryTab("\xe7\x99\xbe\xe5\xae\xb6\xe8\xae\xb2\xe5\x9d\x9b", "https://m.ting55.com/category/13")\n            )\n        )\n        return listOf(menu1, menu2)\n    }\n\n    override fun getCategoryList(url: String): Category {\n        val doc = Jsoup.connect(url).config(false).get()\n        val cpage = doc.selectFirst(".cpage")\n        var totalPage = 1\n        var currentPage = 1\n        var nextUrl = ""\n        if (cpage != null) {\n            val pages = cpage.selectFirst("span").text().replace("\xe9\xa1\xb5\xe6\xac\xa1 ", "").split("/")\n            currentPage = pages[0].toInt()\n            totalPage = pages[1].toInt()\n            cpage.select("a").firstOrNull { it.text() == "\xe4\xb8\x8b\xe4\xb8\x80\xe9\xa1\xb5" }?.let {\n                nextUrl = it.absUrl("href")\n            }\n        }\n\n        val list = ArrayList<Book>()\n        val elementList = doc.select(".clist > a")\n        elementList.forEach { element ->\n            val coverUrl = element.selectFirst("dl > dt > img").absUrl("src")\n            val bookUrl = element.absUrl("href")\n            val infos = element.selectFirst("dl > dd").children()\n            val title = infos[0].text()\n            val author = infos[1].text()\n            val artist = infos[2].text()\n            val status = infos[3].text()\n\n            list.add(Book(coverUrl, bookUrl, title, author, artist).apply {\n                this.status = status\n                this.sourceId = getSourceId()\n            })\n        }\n        return Category(list, currentPage, totalPage, url, nextUrl)\n    }\n\n}'