b'\xef\xbb\xbfusing BaiduPanDownload.Data;\nusing BaiduPanDownload.HttpTool;\nusing BaiduPanDownload.HttpTool.Download;\nusing BaiduPanDownload.Util;\nusing Newtonsoft.Json;\nusing Newtonsoft.Json.Linq;\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Timers;\n\nnamespace BaiduPanDownload.Managers\n{\n    class TaskManager\n    {\n        public static TaskManager GetTastManager { get; } = new TaskManager();\n\n        Timer TaskManagerTimer = new Timer(1000)\n        {\n            AutoReset = true,\n            Enabled = true\n        };\n\n        public TaskManager()\n        {\n            TaskManagerTimer.Elapsed += TaskManagerTimer_Elapsed;\n            TaskManagerTimer.Start();\n        }\n\n        Dictionary<int, HttpDownload> TaskList = new Dictionary<int, HttpDownload>();\n\n        #region \xe4\xba\x8b\xe4\xbb\xb6\n        public delegate void onTaskReloadEvent();\n        /// <summary>\n        /// \xe9\x87\x8d\xe8\xbd\xbd\xe4\xbb\xbb\xe5\x8a\xa1\xe5\x88\x97\xe8\xa1\xa8\xe4\xba\x8b\xe4\xbb\xb6\n        /// </summary>\n        public event onTaskReloadEvent ReloadEvnet;\n        #endregion\n\n        bool Flag = false;\n\n        private void TaskManagerTimer_Elapsed(object sender, ElapsedEventArgs e)\n        {\n            if (Flag)\n            {\n                return;\n            }\n            if (GetDwonloadingTaskNum() < Program.config.TaskNum)\n            {\n                var WaitTask = TaskList.Where(v=> (!v.Value.Completed && !v.Value.Downloading && !v.Value.Stoped));\n                foreach(var task in WaitTask)\n                {\n                    task.Value.Start();\n                    return;\n                }\n            }\n        }\n\n        /// <summary>\n        /// \xe5\x88\x9b\xe5\xbb\xba\xe4\xb8\x80\xe4\xb8\xaa\xe4\xb8\x8b\xe8\xbd\xbd\xe4\xbb\xbb\xe5\x8a\xa1\n        /// </summary>\n        /// <param name="DownloadUrl"></param>\n        /// <param name="DownloadPath"></param>\n        /// <param name="ThreadNum"></param>\n        public void CreateDownloadTask(string DownloadUrl,string DownloadPath,CookiesData Cookies=null,int ThreadNum=0)\n        {\n            if (File.Exists(DownloadPath))\n            {\n                return;\n            }\n            Flag = true;\n            var Task=new HttpDownload\n            {\n                ID=TaskList.Count,\n                Url=DownloadUrl,\n                DownloadPath=DownloadPath,\n                ThreadNum=ThreadNum==0?Program.config.NetSpeed:ThreadNum,\n                Cookies=Cookies\n            };\n            Task.CreateDataFile();\n            Program.config.SetDownloadInfo(DownloadPath+".dcj",false);\n            TaskList.Add(TaskList.Count,Task);\n            Flag = false;\n        }\n\n        /// <summary>\n        /// \xe7\xbb\x93\xe6\x9d\x9f\xe6\x89\x80\xe6\x9c\x89\xe4\xbb\xbb\xe5\x8a\xa1\xe5\xb9\xb6\xe4\xbf\x9d\xe5\xad\x98\n        /// </summary>\n        public void StopAndSave()\n        {\n            TaskManagerTimer.Stop();\n            var DownloadingTask = TaskList.Where(v => v.Value.Downloading);\n            foreach (var task in DownloadingTask)\n            {\n                task.Value.StopAndSave();\n            }\n        }\n\n        /// <summary>\n        /// \xe8\x8e\xb7\xe5\x8f\x96\xe4\xb8\x8b\xe8\xbd\xbd\xe4\xb8\xad\xe7\x9a\x84\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x95\xb0\n        /// </summary>\n        /// <returns></returns>\n        public int GetDwonloadingTaskNum()\n        {\n            return TaskList.Where(v => v.Value.Downloading).Count();\n        }\n\n        /// <summary>\n        /// \xe9\x87\x8d\xe8\xbd\xbd\xe6\x89\x80\xe6\x9c\x89\xe5\xad\x98\xe6\x94\xbe\xe5\x9c\xa8\xe9\x85\x8d\xe7\xbd\xae\xe6\x96\x87\xe4\xbb\xb6\xe4\xb8\xad\xe7\x9a\x84\xe4\xbb\xbb\xe5\x8a\xa1\n        /// </summary>\n        public void ReloadTask()\n        {\n            TaskList.Clear();\n            ReloadEvnet?.Invoke();\n            int id = 0;\n            foreach (var T in Program.config.DownloadList)\n            {\n                DownloadItem Item = T is JObject ? JsonConvert.DeserializeObject<DownloadItem>(T.ToString()) : T as DownloadItem;\n                if (!File.Exists(Item.FilePath))\n                {\n                    continue;\n                }\n                var Info = JsonConvert.DeserializeObject<DownloadInfo>(File.ReadAllText(Item.FilePath));\n                TaskList.Add(id, new HttpDownload\n                {\n                    ID = id,\n                    Url = Info.DownloadUrl,\n                    DownloadPath = Item.FilePath.Replace(".dcj", string.Empty)\n                });\n                id++;\n            }\n        }\n        /// <summary>\n        /// \xe8\x8e\xb7\xe5\x8f\x96\xe4\xbb\xbb\xe5\x8a\xa1\xe5\x88\x97\xe8\xa1\xa8\n        /// </summary>\n        /// <returns></returns>\n        public ArrayList GetTaskList()\n        {\n            ArrayList Temp = new ArrayList();\n            foreach(var Task in TaskList)\n            {\n                Temp.Add(Task.Value);\n            }\n            return Temp;\n        }\n\n        /// <summary>\n        /// \xe9\x80\x9a\xe8\xbf\x87ID\xe8\x8e\xb7\xe5\x8f\x96\xe4\xbb\xbb\xe5\x8a\xa1\n        /// </summary>\n        /// <param name="id"></param>\n        /// <returns></returns>\n        public HttpDownload GetTaskByID(int id)\n        {\n            if (!TaskList.ContainsKey(id))\n            {\n                return null;\n            }\n            return TaskList[id];\n        }\n\n        /// <summary>\n        /// \xe9\x80\x9a\xe8\xbf\x87ID\xe8\x8e\xb7\xe5\x8f\x96\xe4\xbb\xbb\xe5\x8a\xa1\xe9\x80\x9f\xe5\xba\xa6\n        /// </summary>\n        /// <param name="id"></param>\n        /// <returns></returns>\n        public long GetSpeedByID(int id)\n        {\n            return 0L;\n        }\n    }\n}\n'