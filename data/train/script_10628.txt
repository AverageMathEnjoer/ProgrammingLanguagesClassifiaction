b'package effectivejava.chapter5.item33;\nimport java.lang.annotation.*;\nimport java.lang.reflect.*;\n\n// Use of asSubclass to safely cast to a bounded type token (Page 155)\npublic class PrintAnnotation {\n    static Annotation getAnnotation(AnnotatedElement element,\n                                    String annotationTypeName) {\n        Class<?> annotationType = null; // Unbounded type token\n        try {\n            annotationType = Class.forName(annotationTypeName);\n        } catch (Exception ex) {\n            throw new IllegalArgumentException(ex);\n        }\n        return element.getAnnotation(\n                annotationType.asSubclass(Annotation.class));\n    }\n\n    // Test program to print named annotation of named class\n    public static void main(String[] args) throws Exception {\n        if (args.length != 2) {\n            System.out.println(\n                "Usage: java PrintAnnotation <class> <annotation>");\n            System.exit(1);\n        }\n        String className = args[0];\n        String annotationTypeName = args[1]; \n        Class<?> klass = Class.forName(className);\n        System.out.println(getAnnotation(klass, annotationTypeName));\n    }\n}\n'