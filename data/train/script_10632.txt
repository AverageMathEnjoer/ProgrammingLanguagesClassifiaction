b'#I @"..\\..\\..\\packages"\n#r @"FSharp.Data\\lib\\net40\\FSharp.Data.dll"\n\n// Listing 38.1\nopen FSharp.Data\ntype AllAnimalsResponse = JsonProvider<"http://localhost:8080/api/animals">\nlet names =\n    AllAnimalsResponse.GetSamples()\n    |> Seq.map(fun a -> a.Name)\n    |> Seq.toArray\n\n// Listing 38.2\ntype GetAnimalResponse = JsonProvider<"http://localhost:8080/api/animals/Felix">\nlet getAnimal = sprintf "http://localhost:8080/api/animals/%s" >> GetAnimalResponse.Load\ngetAnimal "Felix"\n\n// Listing 38.3\ntype Result<\'TSuccess> = Success of \'TSuccess | Failure of exn\nlet ofFunc code =\n    try code() |> Success\n    with | ex -> Failure ex\nlet getAnimalSafe animal =\n    (fun () -> sprintf "http://localhost:8080/api/animals/%s" animal |> GetAnimalResponse.Load)\n    |> ofFunc\nlet frodo = getAnimalSafe "frodo"\n\n#r @"Http.fs\\lib\\net40\\HttpClient.dll"\nopen HttpClient\n\n// Listing 38.4\n\ncreateRequest Get "http://host/api/animals"\n|> withCookie { name = "Foo"; value = "Bar" }\n|> withHeader (ContentType "test/json")\n|> withKeepAlive true\n|> getResponse\n\n// Listing 38.5\n#r @"Http.fs\\lib\\net40\\HttpClient.dll"\nopen HttpClient\nlet request = createRequest Get "http://localhost:8080/api/animals"\nlet response = request |> getResponse\n\n// Listing 38.6\n#r @"Newtonsoft.Json\\lib\\net45\\Newtonsoft.Json.dll"\nopen Newtonsoft.Json\nlet buildRoute = sprintf "http://localhost:8080/api/%s"\nlet httpGetResponse = buildRoute >> createRequest Get >> getResponse\n\n// Listing 38.7\ntype Animal = { Name : string; Species : string }\nlet tryGetAnimal animal =\n    let response = sprintf "animals/%s" animal |> httpGetResponse\n    response.EntityBody\n    |> Option.map(fun body -> JsonConvert.DeserializeObject<Animal>(body))\n\ntryGetAnimal "Felix"\n\n// Listing 38.9\n#r "YamlDotNet/lib/net35/YamlDotNet.dll"\n#r "SwaggerProvider/lib/net45/SwaggerProvider.dll"\n#r "SwaggerProvider/lib/net45/SwaggerProvider.Runtime.dll"\n\nopen SwaggerProvider\ntype SwaggerAnimals = SwaggerProvider<"http://localhost:8080/swagger/docs/v1">\n\nlet animalsApi = SwaggerAnimals()\n\nlet animal = animalsApi.AnimalsGetByName("Felix")\nanimal\n\n\n\n\n\n\n\nlet tryGetAnimalSmart animal =\n    let resp = sprintf "animals/%s" animal |> httpGetResponse\n    match resp.StatusCode, resp.EntityBody with\n    | 200, Some body -> Some(JsonConvert.DeserializeObject<Animal>(body))\n    | 400, Some error ->\n        printfn "ERROR: %s" error\n        None\n    | 500, Some error ->\n        printfn "CRITICAL ERROR: %s" error\n        None\n    | _ -> None\n\ntryGetAnimalSmart "error"\n'