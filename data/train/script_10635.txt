b'#include <dlfcn.h>\n\n#include <cstdio>\n#include <cstdlib>\n\nint main()\n{\n#ifndef RTLD_DEEPBIND\n    printf("SKIP (RTLD_DEEPBIND undefined)\\n");\n#else\n    fprintf(stderr, "malloc address: %p\\n", dlsym(RTLD_NEXT, "malloc"));\n    fprintf(stderr, "free address: %p\\n", dlsym(RTLD_NEXT, "free"));\n\n    auto p = malloc(10);\n    fprintf(stderr, "p = %p\\n", p);\n    free(p);\n\n    fprintf(stderr, "loading lib: %s\\n", LIB_PATH);\n    auto handle = dlopen(LIB_PATH, RTLD_DEEPBIND | RTLD_NOW | RTLD_GLOBAL);\n    if (!handle) {\n        fprintf(stderr, "dlopen error loading %s: %s\\n", LIB_PATH, dlerror());\n        return 1;\n    }\n\n    auto allocFromLib = reinterpret_cast<void (*)(bool)>(dlsym(RTLD_NEXT, "allocFromLib"));\n    if (!allocFromLib) {\n        fprintf(stderr, "allocFromLib not resolved: %s\\n", dlerror());\n        return 2;\n    }\n\n    allocFromLib(false);\n\n    fprintf(stderr, "malloc address: %p\\n", dlsym(RTLD_NEXT, "malloc"));\n    fprintf(stderr, "free address: %p\\n", dlsym(RTLD_NEXT, "free"));\n#endif\n\n    return 0;\n}\n'