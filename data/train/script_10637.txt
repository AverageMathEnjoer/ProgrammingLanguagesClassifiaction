b'-- -*- haskell -*-\n-- partree\n-- parallel map over a tree \n-----------------------------------------------------------------------------\n\nmodule Main where\n\nimport System.Environment(getArgs)\nimport Control.Parallel\nimport Tree\n\nmain = do args <- getArgs\n          let \n            -- n: size of tree in nodes\n            -- c: work per node\n            (n,c) = case args of \n                      [arg1,arg2] -> (read arg1 :: Int, \n\t\t\t\t      read arg2 :: Int)\n--                      []          -> (256, 10)\n                      []          -> (64, 5)\n\t\t      _           -> error "partree program takes zero or two arguments: <size in nodes> <work per node>"\n            res = partree c n\n          putStrLn ("partree " ++ unwords [show n,show c] ++ " = " ++ show res)\n\n-- worker function to be mapped over the tree; heavily allocating!\nbar :: Int -> Int -> Int\nbar c n = tree_fold (\\x y -> (x+y) `quot` 2) 0 t \n          where forest = [ let \n                             -- l = take n (iterate (+i) i)\n                             l = take c (iterate (+i) i)\n                           in\n                             list2tree l \n                         | i <- [1..c] ]\n                         -- | i <- [1..c + n `mod` 15] ]\n                t = foldl1 (^:) forest\n\n-- generate a tree with n nodes;\n-- then map and fold 2 functions over it\npartree :: Int -> Int -> Int\npartree c n = (force_tree t) `seq` (tree_fold max 0 t)\n              where t = par_tree_map (bar c) (list2tree [1..n])\n\n'