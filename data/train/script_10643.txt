b'package com.github.razir.progressexample\n\nimport android.content.Context\nimport android.content.Intent\nimport android.graphics.Color\nimport android.os.Bundle\nimport android.os.Handler\nimport android.widget.Button\nimport androidx.appcompat.app.AppCompatActivity\nimport com.github.razir.progressbutton.*\nimport kotlinx.android.synthetic.main.activity_progress_buttons.*\n\nclass ProgressButtonsActivity : AppCompatActivity() {\n\n    companion object {\n        fun getStartIntent(context: Context): Intent {\n            return Intent(context, ProgressButtonsActivity::class.java)\n        }\n    }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_progress_buttons)\n\n        bindProgressButton(buttonProgressRightText)\n        bindProgressButton(buttonProgressLeftText)\n        bindProgressButton(buttonProgressCenter)\n        bindProgressButton(buttonProgressCustomStyle)\n\n\n        buttonProgressRightText.attachTextChangeAnimator()\n        buttonProgressLeftText.attachTextChangeAnimator()\n        buttonProgressCustomStyle.attachTextChangeAnimator()\n        buttonProgressCenter.attachTextChangeAnimator {\n            fadeInMills = 300\n            fadeOutMills = 300\n        }\n\n        buttonProgressRightText.setOnClickListener {\n            showProgressRight(buttonProgressRightText)\n        }\n        buttonProgressLeftText.setOnClickListener {\n            showProgressLeft(buttonProgressLeftText)\n        }\n        buttonProgressCenter.setOnClickListener {\n            showProgressCenter(buttonProgressCenter)\n        }\n        buttonProgressCustomStyle.setOnClickListener {\n            showProgressCustom(buttonProgressCustomStyle)\n        }\n\n    }\n\n    private fun showProgressRight(button: Button) {\n        button.showProgress {\n            buttonTextRes = R.string.loading\n            progressColor = Color.WHITE\n        }\n        button.isEnabled = false\n        Handler().postDelayed({\n            button.isEnabled = true\n            button.hideProgress(R.string.progressRight)\n        }, 3000)\n    }\n\n    private fun showProgressLeft(button: Button) {\n        button.showProgress {\n            buttonTextRes = R.string.loading\n            progressColor = Color.WHITE\n            gravity = DrawableButton.GRAVITY_TEXT_START\n        }\n\n        button.isEnabled = false\n        Handler().postDelayed({\n            button.isEnabled = true\n            button.hideProgress(R.string.progressLeft)\n        }, 3000)\n    }\n\n    private fun showProgressCenter(button: Button) {\n        button.showProgress {\n            progressColor = Color.WHITE\n            gravity = DrawableButton.GRAVITY_CENTER\n        }\n\n        button.isEnabled = false\n        Handler().postDelayed({\n            button.isEnabled = true\n            button.hideProgress(R.string.progressCenter)\n        }, 3000)\n    }\n\n    private fun showProgressCustom(button: Button) {\n        button.showProgress {\n            buttonTextRes = R.string.loading\n            progressColors = intArrayOf(Color.WHITE, Color.MAGENTA, Color.GREEN)\n            gravity = DrawableButton.GRAVITY_TEXT_END\n            progressRadiusRes = R.dimen.progressRadius\n            progressStrokeRes = R.dimen.progressStroke\n            textMarginRes = R.dimen.textMarginStyled\n        }\n        button.isEnabled = false\n        Handler().postDelayed({\n            button.isEnabled = true\n            button.hideProgress(R.string.progressCustomStyle)\n        }, 5000)\n    }\n}\n\n'