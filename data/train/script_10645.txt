b'package co.joebirch.composeplayground.material\n\nimport androidx.compose.material.Text\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.rememberScrollState\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.foundation.text.KeyboardOptions\nimport androidx.compose.foundation.verticalScroll\nimport androidx.compose.material.Icon\nimport androidx.compose.material.TextField\nimport androidx.compose.material.TextFieldDefaults\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.Check\nimport androidx.compose.material.icons.filled.Info\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.text.TextStyle\nimport androidx.compose.ui.text.input.ImeAction\nimport androidx.compose.ui.text.input.KeyboardType\nimport androidx.compose.ui.text.input.PasswordVisualTransformation\nimport androidx.compose.ui.text.input.TextFieldValue\nimport androidx.compose.ui.unit.dp\nimport co.joebirch.composeplayground.ComposableLayout\n\nobject FilledTextFieldView : ComposableLayout {\n\n    @Composable\n    override fun build() {\n        Column(\n            modifier = Modifier\n                .fillMaxSize()\n                .verticalScroll(rememberScrollState()),\n            verticalArrangement = Arrangement.SpaceEvenly,\n            horizontalAlignment = Alignment.CenterHorizontally\n        ) {\n            MinimalFilledTextFieldComponent()\n            PlaceholderFilledTextFieldComponent()\n            IconsFilledTextFieldComponent()\n        }\n    }\n\n    @Composable\n    fun MinimalFilledTextFieldComponent() {\n        val state = remember { mutableStateOf(TextFieldValue(text = "Hello")) }\n        TextField(value = state.value, onValueChange = {\n            state.value = it\n        }, label = {\n            Text(text = "This is a label")\n        })\n    }\n\n    @Composable\n    fun PlaceholderFilledTextFieldComponent() {\n        val state = remember { mutableStateOf(TextFieldValue(text = "Hello")) }\n        TextField(value = state.value, onValueChange = {\n            state.value = it\n        }, label = {\n            Text(text = "This is a label")\n        }, placeholder = {\n            Text(text = "This is a placeholder")\n        })\n    }\n\n    @Composable\n    fun IconsFilledTextFieldComponent() {\n        val state = remember { mutableStateOf(TextFieldValue(text = "Hello")) }\n        TextField(value = state.value, onValueChange = {\n            state.value = it\n        }, label = {\n            Text(text = "This is a label")\n        }, leadingIcon = {\n            Icon(Icons.Filled.Info, contentDescription = "Info")\n        }, trailingIcon = {\n            Icon(Icons.Filled.Check, contentDescription = "Checked")\n        })\n    }\n\n    @Composable\n    fun ColoredFilledTextFieldComponent() {\n        val state = remember { mutableStateOf(TextFieldValue(text = "Hello")) }\n        TextField(\n            value = state.value,\n            onValueChange = {\n                state.value = it\n            },\n            label = {\n                Text(text = "This is a label")\n            },\n            colors = TextFieldDefaults.textFieldColors(\n                errorLabelColor = Color.Red,\n                disabledTextColor = Color.Gray,\n                textColor = Color.Black\n            )\n        )\n    }\n\n    @Composable\n    fun VisualTransformationTextFieldComponent() {\n        val state = remember { mutableStateOf(TextFieldValue(text = "Hello")) }\n        TextField(\n            value = state.value,\n            onValueChange = {\n                state.value = it\n            },\n            visualTransformation = PasswordVisualTransformation()\n        )\n    }\n\n    @Composable\n    fun ImeActionsTextFieldComponent() {\n        val state = remember { mutableStateOf(TextFieldValue(text = "Hello")) }\n        TextField(\n            value = state.value,\n            onValueChange = {\n                state.value = it\n            },\n            keyboardOptions = KeyboardOptions(\n                imeAction = ImeAction.Done\n            )\n        )\n    }\n\n    @Composable\n    fun ColoredTextFieldComponent() {\n        val state = remember { mutableStateOf(TextFieldValue(text = "Hello")) }\n        TextField(\n            value = state.value,\n            onValueChange = {\n                state.value = it\n            },\n            colors = TextFieldDefaults.textFieldColors(\n                backgroundColor = Color.White\n            )\n        )\n    }\n\n    @Composable\n    fun ShapeTextFieldComponent() {\n        val state = remember { mutableStateOf(TextFieldValue(text = "Hello")) }\n        TextField(\n            value = state.value,\n            onValueChange = {\n                state.value = it\n            },\n            shape = RoundedCornerShape(8.dp)\n        )\n    }\n\n    @Composable\n    fun KeyboardTypeTextFieldComponent() {\n        val state = remember { mutableStateOf(TextFieldValue(text = "Hello")) }\n        TextField(\n            value = state.value,\n            onValueChange = {\n                state.value = it\n            },\n            keyboardOptions = KeyboardOptions(\n                keyboardType = KeyboardType.Email\n            )\n        )\n    }\n\n    @Composable\n    fun TextStyleTextFieldComponent() {\n        val state = remember { mutableStateOf(TextFieldValue(text = "Hello")) }\n        TextField(\n            value = state.value,\n            onValueChange = {\n                state.value = it\n            },\n            textStyle = TextStyle(color = Color.Red)\n        )\n    }\n}'