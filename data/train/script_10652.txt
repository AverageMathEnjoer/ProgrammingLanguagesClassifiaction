b'\xef\xbb\xbfusing Newtonsoft.Json;\nusing Newtonsoft.Json.Linq;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Net;\nusing System.Text;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace Test.Download\n{\n    class HttpDownload\n    {\n        /// <summary>\n        /// \xe4\xb8\x8b\xe8\xbd\xbd\xe9\x93\xbe\xe6\x8e\xa5\n        /// </summary>\n        public string Url { get; set; }\n        /// <summary>\n        /// \xe4\xb8\x8b\xe8\xbd\xbd\xe8\xb7\xaf\xe5\xbe\x84\n        /// </summary>\n        public string DownloadPath { get; set; }\n        /// <summary>\n        /// \xe7\xba\xbf\xe7\xa8\x8b\xe6\x95\xb0\n        /// </summary>\n        public int ThreadNum { get; set; }\n\n\n        DownloadThread[] Threads;\n        DownloadInfo Info;\n        public void Start()\n        {\n            try\n            {\n                HttpWebRequest Request = WebRequest.Create(Url) as HttpWebRequest;\n                HttpWebResponse Response = Request.GetResponse() as HttpWebResponse;\n                if (!File.Exists(DownloadPath + ".dcj"))\n                {\n                    DownloadInfo info = new DownloadInfo\n                    {\n                        ContentLength=Response.ContentLength,\n                        BlockLength=Response.ContentLength/ThreadNum,\n                    };\n                    info.init(DownloadPath + ".dcj");\n                }\n                Info= JsonConvert.DeserializeObject<DownloadInfo>(File.ReadAllText(DownloadPath + ".dcj"));\n                if (!File.Exists(DownloadPath))\n                {\n                    FileStream Stream = new FileStream(DownloadPath, FileMode.CreateNew);\n                    Stream.SetLength(Response.ContentLength);\n                    Stream.Close();\n                }\n                Console.WriteLine(Info.DownloadBlockList.Count);\n                Threads = new DownloadThread[Info.DownloadBlockList.Count];\n                for(int i = 0; i < Info.DownloadBlockList.Count; i++)\n                {\n                    DownloadBlock Block= JsonConvert.DeserializeObject<DownloadBlock>(Info.DownloadBlockList[i].ToString());\n                    Threads[i]=new DownloadThread\n                    {\n                        ID = i,\n                        DownloadUrl = Url,\n                        Path = DownloadPath,\n                        Block = Block,\n                        Info = Info\n                    };\n                }\n                new Thread(a).Start();\n            }\n            catch(Exception ex)\n            {\n                Console.WriteLine("\xe5\x87\xba\xe7\x8e\xb0\xe9\x94\x99\xe8\xaf\xaf: "+ex.ToString());\n            }\n        }\n        public void a()\n        {\n            long temp = 0L;\n            while (true)\n            {\n                Thread.Sleep(1000);\n                if (temp == 0)\n                {\n                    temp = Info.CompletedLength;\n                }\n                else\n                {\n                    long Speed = Info.CompletedLength - temp;\n                    temp = Info.CompletedLength;\n                    Console.WriteLine("\xe9\x80\x9f\xe5\xba\xa6: " + Speed / 1024 / 1024+"MB/S\\r\\n\xe8\xbf\x9b\xe5\xba\xa6: "+((float)Info.CompletedLength/(float)Info.ContentLength)*100);\n                    if (Speed == 0)\n                    {\n                        Info.Save(DownloadPath + ".dcj");\n                        return;\n                    }\n                }\n            }\n        }\n        /// <summary>\n        /// \xe4\xbf\x9d\xe5\xad\x98\xe5\xb9\xb6\xe7\xbb\x93\xe6\x9d\x9f\n        /// </summary>\n        public void StopAndSave()\n        {\n            if (Threads != null)\n            {\n                foreach(var Thread in Threads)\n                {\n                    Thread.Stop();\n                }\n                Info.Save(DownloadPath + ".dcj");\n            }\n        }\n    }\n}\n'