b'package www.sanju.zoomrecyclerlayout\n\nimport android.content.Context\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport androidx.recyclerview.widget.RecyclerView\nimport kotlin.math.abs\n\nclass ZoomRecyclerLayout: LinearLayoutManager {\n\n    private val mShrinkAmount = 0.15f\n    private val mShrinkDistance = 0.9f\n\n    constructor(context: Context) : super(context)\n\n    constructor(context: Context, orientation: Int, reverseLayout: Boolean) : super(\n        context,\n        orientation,\n        reverseLayout\n    )\n\n\n    override fun scrollVerticallyBy(\n        dy: Int,\n        recycler: RecyclerView.Recycler?,\n        state: RecyclerView.State?\n    ): Int {\n        val orientation = orientation\n        if (orientation ==VERTICAL) {\n            val scrolled = super.scrollVerticallyBy(dy, recycler, state)\n            val midpoint = height / 2f\n            val d0 = 0f\n            val d1 = mShrinkDistance * midpoint\n            val s0 = 1f\n            val s1 = 1f - mShrinkAmount\n            for (i in 0 until childCount) {\n                val child = getChildAt(i)\n                val childMidpoint = (getDecoratedBottom(child!!) + getDecoratedTop(child)) / 2f\n                val d = d1.coerceAtMost(abs(midpoint - childMidpoint))\n                val scale = s0 + (s1 - s0) * (d - d0) / (d1 - d0)\n                child.scaleX = scale\n                child.scaleY = scale\n            }\n            return scrolled\n        } else {\n            return 0\n        }\n    }\n\n    override fun scrollHorizontallyBy(\n        dx: Int,\n        recycler: RecyclerView.Recycler?,\n        state: RecyclerView.State?\n    ): Int {\n        val orientation = orientation\n        if (orientation == HORIZONTAL) {\n            val scrolled = super.scrollHorizontallyBy(dx, recycler, state)\n\n            val midpoint = width / 2f\n            val d0 = 0f\n            val d1 = mShrinkDistance * midpoint\n            val s0 = 1f\n            val s1 = 1f - mShrinkAmount\n            for (i in 0 until childCount) {\n                val child = getChildAt(i)\n                val childMidpoint = (getDecoratedRight(child!!) + getDecoratedLeft(child)) / 2f\n                val d = d1.coerceAtMost(abs(midpoint - childMidpoint))\n                val scale = s0 + (s1 - s0) * (d - d0) / (d1 - d0)\n                child.scaleX = scale\n                child.scaleY = scale\n            }\n            return scrolled\n        } else {\n            return 0\n        }\n\n    }\n}\n'