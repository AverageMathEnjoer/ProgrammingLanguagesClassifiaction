b'{-# OPTIONS_GHC -fno-warn-orphans #-}\n{-# LANGUAGE CPP #-}\n\n-- | DDL syntax instances for \'SqlSyntaxBuilder\'\nmodule Database.Beam.Migrate.SQL.Builder where\n\nimport           Database.Beam.Backend.SQL\nimport           Database.Beam.Backend.SQL.Builder\nimport           Database.Beam.Migrate.SQL\nimport           Database.Beam.Migrate.Serialization\n\nimport           Control.Applicative\n\nimport           Data.ByteString.Builder (Builder, byteString, toLazyByteString)\nimport qualified Data.ByteString.Lazy.Char8 as BCL\n#if !MIN_VERSION_base(4, 11, 0)\nimport           Data.Semigroup\n#endif\n\n\n-- | Options for @CREATE TABLE@. Given as a separate ADT because the options may\n-- go in different places syntactically.\n--\n-- You never really need to use this type directly.\ndata SqlSyntaxBuilderCreateTableOptions\n    = SqlSyntaxBuilderCreateTableOptions\n        SqlSyntaxBuilder\n        SqlSyntaxBuilder\n    deriving Eq\n\ninstance IsSql92DdlCommandSyntax SqlSyntaxBuilder where\n  type Sql92DdlCommandCreateTableSyntax SqlSyntaxBuilder = SqlSyntaxBuilder\n  type Sql92DdlCommandDropTableSyntax SqlSyntaxBuilder = SqlSyntaxBuilder\n  type Sql92DdlCommandAlterTableSyntax SqlSyntaxBuilder = SqlSyntaxBuilder\n  createTableCmd = id\n  alterTableCmd = id\n  dropTableCmd = id\n\ninstance IsSql92DropTableSyntax SqlSyntaxBuilder where\n  type Sql92DropTableTableNameSyntax SqlSyntaxBuilder = SqlSyntaxBuilder\n\n  dropTableSyntax tblNm =\n    SqlSyntaxBuilder $\n    byteString "DROP TABLE " <> buildSql tblNm\n\ninstance IsSql92AlterTableSyntax SqlSyntaxBuilder where\n  type Sql92AlterTableTableNameSyntax SqlSyntaxBuilder = SqlSyntaxBuilder\n  type Sql92AlterTableAlterTableActionSyntax SqlSyntaxBuilder = SqlSyntaxBuilder\n\n  alterTableSyntax tblNm action =\n    SqlSyntaxBuilder $\n    byteString "ALTER TABLE " <> buildSql tblNm <> byteString " " <> buildSql action\n\ninstance IsSql92AlterTableActionSyntax SqlSyntaxBuilder where\n  type Sql92AlterTableAlterColumnActionSyntax SqlSyntaxBuilder = SqlSyntaxBuilder\n  type Sql92AlterTableColumnSchemaSyntax SqlSyntaxBuilder = SqlSyntaxBuilder\n\n  alterColumnSyntax colNm action =\n    SqlSyntaxBuilder $\n    byteString "ALTER COLUMN " <> quoteSql colNm <> byteString " " <> buildSql action\n\n  addColumnSyntax colNm colSchema =\n    SqlSyntaxBuilder $\n    byteString "ADD COLUMN " <> quoteSql colNm <> byteString " " <> buildSql colSchema\n  dropColumnSyntax colNm =\n    SqlSyntaxBuilder $\n    byteString "DROP COLUMN " <> quoteSql colNm\n\n  renameColumnToSyntax oldNm newNm =\n    SqlSyntaxBuilder $\n    byteString "RENAME COLUMN " <> quoteSql oldNm <> " TO " <> quoteSql newNm\n  renameTableToSyntax newNm =\n    SqlSyntaxBuilder $\n    byteString "RENAME TO " <> quoteSql newNm\n\ninstance IsSql92AlterColumnActionSyntax SqlSyntaxBuilder where\n  setNotNullSyntax = SqlSyntaxBuilder (byteString "SET NOT NULL")\n  setNullSyntax = SqlSyntaxBuilder (byteString "DROP NOT NULL")\n\ninstance IsSql92CreateTableSyntax SqlSyntaxBuilder where\n  type Sql92CreateTableTableNameSyntax SqlSyntaxBuilder = SqlSyntaxBuilder\n  type Sql92CreateTableColumnSchemaSyntax SqlSyntaxBuilder = SqlSyntaxBuilder\n  type Sql92CreateTableTableConstraintSyntax SqlSyntaxBuilder = SqlSyntaxBuilder\n  type Sql92CreateTableOptionsSyntax SqlSyntaxBuilder = SqlSyntaxBuilderCreateTableOptions\n\n  createTableSyntax tableOptions tblName fieldSchemas constraints =\n      SqlSyntaxBuilder $\n      byteString "CREATE " <>\n      maybe mempty (\\b -> buildSql b <> byteString " ") beforeOptions <>\n      byteString " TABLE " <>\n\n      buildSql tblName <>\n\n      byteString "(" <>\n      buildSepBy (byteString ", ")\n                 (map (\\(nm, schema) -> quoteSql nm <> byteString " " <> buildSql schema) fieldSchemas <>\n                  map buildSql constraints) <>\n      byteString ")" <>\n\n      maybe mempty (\\a -> buildSql a <> byteString " ") afterOptions\n\n    where\n      (beforeOptions, afterOptions) =\n          case tableOptions of\n            Just (SqlSyntaxBuilderCreateTableOptions b a) -> (Just b, Just a)\n            Nothing -> (Nothing, Nothing)\n\ninstance IsSql92TableConstraintSyntax SqlSyntaxBuilder where\n  primaryKeyConstraintSyntax fs =\n    SqlSyntaxBuilder $\n    byteString "PRIMARY KEY(" <> buildSepBy (byteString ", ") (map quoteSql fs) <> byteString ")"\n\n-- | Some backends use this to represent their constraint attributes. Does not\n-- need to be used in practice.\ndata ConstraintAttributeTiming = InitiallyDeferred | InitiallyImmediate\n  deriving (Show, Eq, Ord, Enum, Bounded)\n\n-- | Valid \'IsSql92ConstraintAttributesSyntax\' shared among some backends.\ndata SqlConstraintAttributesBuilder\n  = SqlConstraintAttributesBuilder\n  { _sqlConstraintAttributeTiming :: Maybe ConstraintAttributeTiming\n  , _sqlConstraintAttributeDeferrable :: Maybe Bool }\n  deriving (Show, Eq)\n\ninstance Semigroup SqlConstraintAttributesBuilder where\n  (<>) = mappend\n\ninstance Monoid SqlConstraintAttributesBuilder where\n  mempty = SqlConstraintAttributesBuilder Nothing Nothing\n  mappend a b =\n    SqlConstraintAttributesBuilder\n      (_sqlConstraintAttributeTiming b <|> _sqlConstraintAttributeTiming a)\n      (_sqlConstraintAttributeDeferrable b <|> _sqlConstraintAttributeDeferrable a)\n\n-- | Convert a \'SqlConstraintAttributesBuilder\' to its @SQL92@ representation in\n-- the returned \'ByteString\' \'Builder\'.\nfromSqlConstraintAttributes :: SqlConstraintAttributesBuilder -> Builder\nfromSqlConstraintAttributes (SqlConstraintAttributesBuilder timing deferrable) =\n  maybe mempty timingBuilder timing <> maybe mempty deferrableBuilder deferrable\n  where timingBuilder InitiallyDeferred = byteString "INITIALLY DEFERRED"\n        timingBuilder InitiallyImmediate = byteString "INITIALLY IMMEDIATE"\n        deferrableBuilder False = byteString "NOT DEFERRABLE"\n        deferrableBuilder True = byteString "DEFERRABLE"\n\n-- | Serialize a \'SqlConstraintAttributesBuilder\'\nsqlConstraintAttributesSerialized :: SqlConstraintAttributesBuilder -> BeamSerializedConstraintAttributes\nsqlConstraintAttributesSerialized (SqlConstraintAttributesBuilder timing deferrable) =\n  mconcat [ maybe mempty serializeTiming timing\n          , maybe mempty serializeDeferrable deferrable ]\n\n  where\n    serializeTiming InitiallyDeferred = initiallyDeferredAttributeSyntax\n    serializeTiming InitiallyImmediate = initiallyImmediateAttributeSyntax\n\n    serializeDeferrable True = deferrableAttributeSyntax\n    serializeDeferrable False = notDeferrableAttributeSyntax\n\ninstance IsSql92ConstraintAttributesSyntax SqlConstraintAttributesBuilder where\n  initiallyDeferredAttributeSyntax = SqlConstraintAttributesBuilder (Just InitiallyDeferred) Nothing\n  initiallyImmediateAttributeSyntax = SqlConstraintAttributesBuilder (Just InitiallyImmediate) Nothing\n  deferrableAttributeSyntax = SqlConstraintAttributesBuilder Nothing (Just True)\n  notDeferrableAttributeSyntax = SqlConstraintAttributesBuilder Nothing (Just False)\n\ninstance IsSql92ColumnSchemaSyntax SqlSyntaxBuilder where\n  type Sql92ColumnSchemaColumnConstraintDefinitionSyntax SqlSyntaxBuilder = SqlSyntaxBuilder\n  type Sql92ColumnSchemaColumnTypeSyntax SqlSyntaxBuilder = SqlSyntaxBuilder\n  type Sql92ColumnSchemaExpressionSyntax SqlSyntaxBuilder = SqlSyntaxBuilder\n\n  columnSchemaSyntax type_ default_ constraints collation =\n    SqlSyntaxBuilder $\n    buildSql type_ <>\n    maybe mempty (\\d -> byteString " DEFAULT " <> buildSql d) default_ <>\n    (case constraints of\n       [] -> mempty\n       _ -> foldMap (\\c -> byteString " " <> buildSql c) constraints) <>\n    maybe mempty (\\nm -> byteString " COLLATE " <> quoteSql nm) collation\n\ninstance IsSql92ColumnConstraintDefinitionSyntax SqlSyntaxBuilder where\n  type Sql92ColumnConstraintDefinitionConstraintSyntax SqlSyntaxBuilder = SqlSyntaxBuilder\n  type Sql92ColumnConstraintDefinitionAttributesSyntax SqlSyntaxBuilder = SqlConstraintAttributesBuilder\n\n  constraintDefinitionSyntax nm c attrs =\n    SqlSyntaxBuilder $\n    maybe mempty (\\nm\' -> byteString "CONSTRAINT " <> quoteSql nm\' <> byteString " ") nm <>\n    buildSql c <>\n    maybe mempty fromSqlConstraintAttributes attrs\n\ninstance IsSql92ColumnConstraintSyntax SqlSyntaxBuilder where\n  type Sql92ColumnConstraintMatchTypeSyntax SqlSyntaxBuilder = SqlSyntaxBuilder\n  type Sql92ColumnConstraintReferentialActionSyntax SqlSyntaxBuilder = SqlSyntaxBuilder\n  type Sql92ColumnConstraintExpressionSyntax SqlSyntaxBuilder = SqlSyntaxBuilder\n\n  notNullConstraintSyntax = SqlSyntaxBuilder (byteString "NOT NULL")\n  uniqueColumnConstraintSyntax = SqlSyntaxBuilder (byteString "UNIQUE")\n  primaryKeyColumnConstraintSyntax = SqlSyntaxBuilder (byteString "PRIMARY KEY")\n  checkColumnConstraintSyntax e = SqlSyntaxBuilder ("CHECK (" <> buildSql e <> ")")\n  referencesConstraintSyntax tbl fields match onUpdate onDelete =\n    SqlSyntaxBuilder $\n    "REFERENCES " <> quoteSql tbl <> "(" <>\n    buildSepBy ", " (map quoteSql fields) <> ")" <>\n    maybe mempty (\\m -> " " <> buildSql m) match <>\n    maybe mempty (\\a -> " ON UPDATE " <> buildSql a) onUpdate <>\n    maybe mempty (\\a -> " ON DELETE " <> buildSql a) onDelete\n\ninstance IsSql92MatchTypeSyntax SqlSyntaxBuilder where\n  fullMatchSyntax = SqlSyntaxBuilder "FULL"\n  partialMatchSyntax = SqlSyntaxBuilder "PARTIAL"\n\ninstance IsSql92ReferentialActionSyntax SqlSyntaxBuilder where\n  referentialActionCascadeSyntax = SqlSyntaxBuilder "CASCADE"\n  referentialActionNoActionSyntax = SqlSyntaxBuilder "NO ACTION"\n  referentialActionSetDefaultSyntax = SqlSyntaxBuilder "SET DEFAULT"\n  referentialActionSetNullSyntax = SqlSyntaxBuilder "SET NULL"\n\ninstance Sql92DisplaySyntax SqlSyntaxBuilder where\n  displaySyntax = BCL.unpack . toLazyByteString . buildSql\n'