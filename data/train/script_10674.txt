b'#include <cstddef>\n#include <dlfcn.h>\n#include <libgen.h>\n#include <cstring>\n#include <logging.h>\n#include <android/dlext.h>\n#include <android_prop.h>\n\n\nextern "C" [[gnu::weak]] struct android_namespace_t *\n//NOLINTNEXTLINE\n__loader_android_create_namespace([[maybe_unused]] const char *name,\n                                  [[maybe_unused]] const char *ld_library_path,\n                                  [[maybe_unused]] const char *default_library_path,\n                                  [[maybe_unused]] uint64_t type,\n                                  [[maybe_unused]] const char *permitted_when_isolated_path,\n                                  [[maybe_unused]] android_namespace_t *parent,\n                                  [[maybe_unused]] const void *caller_addr);\n\nvoid *DlopenExt(const char *path, int flags) {\n    auto info = android_dlextinfo{};\n\n    if (android_prop::GetApiLevel() >= __ANDROID_API_O__) {\n        auto *dir = dirname(path);\n        auto *ns = &__loader_android_create_namespace == nullptr ? nullptr :\n                   __loader_android_create_namespace(path, dir, nullptr,\n                                                     2/*ANDROID_NAMESPACE_TYPE_SHARED*/,\n                                                     nullptr, nullptr,\n                                                     reinterpret_cast<void *>(&DlopenExt));\n        if (ns) {\n            info.flags = ANDROID_DLEXT_USE_NAMESPACE;\n            info.library_namespace = ns;\n\n            LOGD("open %s with namespace %p", path, ns);\n        } else {\n            LOGD("cannot create namespace for %s", path);\n        }\n    }\n\n    auto *handle = android_dlopen_ext(path, flags, &info);\n    if (handle) {\n        LOGD("dlopen %s: %p", path, handle);\n    } else {\n        LOGE("dlopen %s: %s", path, dlerror());\n    }\n    return handle;\n}\n'