b'{-# LANGUAGE CPP #-}\n{-# LANGUAGE OverloadedStrings #-}\n{-# LANGUAGE RecordWildCards #-}\n\nmodule Text.Hoodle.Builder.V0_2_2 where\n\nimport Blaze.ByteString.Builder (Builder, fromByteString, toLazyByteString)\nimport Blaze.ByteString.Builder.Char8 (fromChar, fromString)\nimport qualified Data.ByteString as S\nimport qualified Data.ByteString.Lazy as L\nimport Data.Double.Conversion.ByteString (toFixed)\nimport Data.Hoodle.Simple.V0_2_2\n  ( Background (..),\n    Dimension (..),\n    Hoodle (..),\n    Image (..),\n    Item (..),\n    Layer (..),\n    Link (..),\n    Page (..),\n    Revision (..),\n    SVG (..),\n    Stroke (..),\n    background,\n    dimension,\n    embeddedPdf,\n    hoodleID,\n    items,\n    layers,\n    pages,\n    revisions,\n    title,\n  )\nimport Data.Strict.Tuple (Pair (..))\nimport Lens.Micro.Extras (view)\n\n-- |\nbuilder :: Hoodle -> L.ByteString\nbuilder = toLazyByteString . buildHoodle\n\n-- |\nbuildHoodle :: Hoodle -> Builder\nbuildHoodle hdl =\n  fromByteString "<?xml version=\\"1.0\\" standalone=\\"no\\"?>\\n<hoodle version=\\"0.2.2\\" id=\\""\n    <> fromByteString (view hoodleID hdl)\n    <> fromByteString "\\">\\n"\n    <> (buildTitle . view title) hdl\n    <> (mconcat . map buildRevision . view revisions) hdl\n    <> (maybe mempty buildEmbeddedPdf . view embeddedPdf) hdl\n    <> (mconcat . map buildPage . view pages) hdl\n    <> fromByteString "</hoodle>\\n"\n\n-- |\nbuildTitle :: S.ByteString -> Builder\nbuildTitle ttl =\n  fromByteString "<title>"\n    <> fromByteString ttl\n    <> fromByteString "</title>\\n"\n\n-- |\nbuildRevision :: Revision -> Builder\nbuildRevision Revision {..} =\n  fromByteString "<revision revmd5=\\""\n    <> fromByteString _revmd5\n    <> fromByteString "\\" revtxt=\\""\n    <> fromByteString _revtxt\n    <> fromByteString "\\"/>\\n"\nbuildRevision RevisionInk {..} =\n  fromByteString "<revision revmd5=\\""\n    <> fromByteString _revmd5\n    <> fromByteString "\\" type=\\"ink\\">\\n"\n    <> foldMap buildStroke _revink\n    <> fromByteString "</revision>\\n"\n\n-- |\nbuildEmbeddedPdf :: S.ByteString -> Builder\nbuildEmbeddedPdf pdf =\n  fromByteString "<embeddedpdf src=\\""\n    <> fromByteString pdf\n    <> fromByteString "\\"/>\\n"\n\n-- |\nbuildPage :: Page -> Builder\nbuildPage pg =\n  fromByteString "<page width=\\""\n    <> fromByteString (toFixed 2 w)\n    <> fromByteString "\\" height=\\""\n    <> fromByteString (toFixed 2 h)\n    <> fromByteString "\\">\\n"\n    <> (buildBackground . view background) pg\n    <> (mconcat . map buildLayer . view layers) pg\n    <> fromByteString "</page>\\n"\n  where\n    Dim w h = view dimension pg\n\n-- |\nbuildBackground :: Background -> Builder\nbuildBackground bkg =\n  case bkg of\n    Background typ col sty ->\n      fromByteString "<background type=\\""\n        <> fromByteString typ\n        <> fromByteString "\\" color=\\""\n        <> fromByteString col\n        <> fromByteString "\\" style=\\""\n        <> fromByteString sty\n        <> fromByteString "\\"/>\\n"\n    BackgroundPdf typ mdom mfile pageno ->\n      fromByteString "<background type=\\""\n        <> fromByteString typ\n        <> case mdom of\n          Nothing -> fromByteString S.empty\n          Just dom ->\n            fromByteString "\\" domain=\\""\n              <> fromByteString dom\n        <> case mfile of\n          Nothing -> fromByteString S.empty\n          Just file ->\n            fromByteString "\\" filename=\\""\n              <> fromByteString file\n        <> fromByteString "\\" pageno=\\""\n        <> fromString (show pageno)\n        <> fromByteString "\\"/>\\n"\n    BackgroundEmbedPdf typ pageno ->\n      fromByteString "<background type=\\""\n        <> fromByteString typ\n        <> fromByteString "\\" pageno=\\""\n        <> fromString (show pageno)\n        <> fromByteString "\\"/>\\n"\n\n-- |\nbuildLayer :: Layer -> Builder\nbuildLayer layer =\n  fromByteString "<layer>\\n"\n    <> (mconcat . map buildItem . view items) layer\n    <> fromByteString "</layer>\\n"\n\nbuildItem :: Item -> Builder\nbuildItem (ItemStroke strk) = buildStroke strk\nbuildItem (ItemImage img) = buildImage img\nbuildItem (ItemSVG svg) = buildSVG svg\nbuildItem (ItemLink lnk) = buildLink lnk\n\n-- |\nbuildStroke :: Stroke -> Builder\nbuildStroke stroke@Stroke {} =\n  fromByteString "<stroke tool=\\""\n    <> fromByteString (stroke_tool stroke)\n    <> fromByteString "\\" color=\\""\n    <> fromByteString (stroke_color stroke)\n    <> fromByteString "\\" width=\\""\n    <> fromByteString (toFixed 2 (stroke_width stroke))\n    <> fromByteString "\\">\\n"\n    <> mconcat (map build2D (stroke_data stroke))\n    <> fromByteString "\\n</stroke>\\n"\nbuildStroke stroke@VWStroke {} =\n  fromByteString "<stroke tool=\\""\n    <> fromByteString (stroke_tool stroke)\n    <> fromByteString "\\" color=\\""\n    <> fromByteString (stroke_color stroke)\n    <> fromByteString "\\" width=\\""\n    <> mconcat (map buildZFrm3D (stroke_vwdata stroke))\n    <> fromByteString "\\">\\n"\n    <> mconcat (map buildXYFrm3D (stroke_vwdata stroke))\n    <> fromByteString "\\n</stroke>\\n"\n\nbuildImage :: Image -> Builder\nbuildImage (Image bstr (x, y) (Dim w h)) =\n  fromByteString "<img src=\\""\n    <> fromByteString bstr\n    <> fromByteString "\\" x=\\""\n    <> fromByteString (toFixed 2 x)\n    <> fromByteString "\\" y=\\""\n    <> fromByteString (toFixed 2 y)\n    <> fromByteString "\\" width=\\""\n    <> fromByteString (toFixed 2 w)\n    <> fromByteString "\\" height=\\""\n    <> fromByteString (toFixed 2 h)\n    <> fromByteString "\\" />\\n"\n\nbuildSVG :: SVG -> Builder\nbuildSVG (SVG mtxt mcmd rdr (x, y) (Dim w h)) =\n  fromByteString "<svgobject x=\\""\n    <> fromByteString (toFixed 2 x)\n    <> fromByteString "\\" y=\\""\n    <> fromByteString (toFixed 2 y)\n    <> fromByteString "\\" width=\\""\n    <> fromByteString (toFixed 2 w)\n    <> fromByteString "\\" height=\\""\n    <> fromByteString (toFixed 2 h)\n    <> fromByteString "\\" >\\n"\n    <> maybe mempty (\\txt -> fromByteString "<text><![CDATA[" <> fromByteString txt <> fromByteString "]]></text>") mtxt\n    <> maybe mempty (\\cmd -> fromByteString "<command><![CDATA[" <> fromByteString cmd <> fromByteString "]]></command>") mcmd\n    <> fromByteString "<render><![CDATA["\n    <> fromByteString rdr\n    <> fromByteString "]]></render>"\n    <> fromByteString "</svgobject>\\n"\n\nbuildLink :: Link -> Builder\nbuildLink (Link i typ loc mtxt mcmd rdr (x, y) (Dim w h)) =\n  fromByteString "<link id=\\""\n    <> fromByteString i\n    <> fromByteString "\\" type=\\""\n    <> fromByteString typ\n    <> fromByteString "\\" location=\\""\n    <> fromByteString loc\n    <> fromByteString "\\" x=\\""\n    <> fromByteString (toFixed 2 x)\n    <> fromByteString "\\" y=\\""\n    <> fromByteString (toFixed 2 y)\n    <> fromByteString "\\" width=\\""\n    <> fromByteString (toFixed 2 w)\n    <> fromByteString "\\" height=\\""\n    <> fromByteString (toFixed 2 h)\n    <> fromByteString "\\" >\\n"\n    <> maybe mempty (\\txt -> fromByteString "<text><![CDATA[" <> fromByteString txt <> fromByteString "]]></text>") mtxt\n    <> maybe mempty (\\cmd -> fromByteString "<command><![CDATA[" <> fromByteString cmd <> fromByteString "]]></command>") mcmd\n    <> fromByteString "<render><![CDATA["\n    <> fromByteString rdr\n    <> fromByteString "]]></render>"\n    <> fromByteString "</link>\\n"\nbuildLink (LinkDocID i docid loc mtxt mcmd rdr (x, y) (Dim w h)) =\n  fromByteString "<link id=\\""\n    <> fromByteString i\n    <> fromByteString "\\" type=\\"linkdocid\\" linkedid=\\""\n    <> fromByteString docid\n    <> fromByteString "\\" location=\\""\n    <> fromByteString loc\n    <> fromByteString "\\" x=\\""\n    <> fromByteString (toFixed 2 x)\n    <> fromByteString "\\" y=\\""\n    <> fromByteString (toFixed 2 y)\n    <> fromByteString "\\" width=\\""\n    <> fromByteString (toFixed 2 w)\n    <> fromByteString "\\" height=\\""\n    <> fromByteString (toFixed 2 h)\n    <> fromByteString "\\" >\\n"\n    <> maybe mempty (\\txt -> fromByteString "<text><![CDATA[" <> fromByteString txt <> fromByteString "]]></text>") mtxt\n    <> maybe mempty (\\cmd -> fromByteString "<command><![CDATA[" <> fromByteString cmd <> fromByteString "]]></command>") mcmd\n    <> fromByteString "<render><![CDATA["\n    <> fromByteString rdr\n    <> fromByteString "]]></render>"\n    <> fromByteString "</link>\\n"\n\n-- |\nbuild2D :: Pair Double Double -> Builder\nbuild2D (x :!: y) =\n  fromByteString (toFixed 2 x)\n    <> fromChar \' \'\n    <> fromByteString (toFixed 2 y)\n    <> fromChar \' \'\n\n-- |\nbuildXYFrm3D :: (Double, Double, Double) -> Builder\nbuildXYFrm3D (x, y, _) =\n  fromByteString (toFixed 2 x)\n    <> fromChar \' \'\n    <> fromByteString (toFixed 2 y)\n    <> fromChar \' \'\n\n-- |\nbuildZFrm3D :: (Double, Double, Double) -> Builder\nbuildZFrm3D (_, _, z) =\n  fromByteString (toFixed 2 z)\n    <> fromChar \' \'\n'