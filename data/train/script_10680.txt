b'// Copyright (c) 2023 Manuel Schneider\n\n#include "themefileparser.h"\n\n\nXDG::ThemeFileParser::ThemeFileParser(const QString &iniFilePath)\n        : iniFile_(iniFilePath, QSettings::IniFormat)\n{\n}\n\nQString XDG::ThemeFileParser::path()\n{\n    return iniFile_.fileName();\n}\n\nQString XDG::ThemeFileParser::name()\n{\n    return iniFile_.value("Icon Theme/Name").toString();\n}\n\nQString XDG::ThemeFileParser::comment()\n{\n    return iniFile_.value("Icon Theme/Comment").toString();\n}\n\nQStringList XDG::ThemeFileParser::inherits()\n{\n    QStringList inherits = iniFile_.value("Icon Theme/Inherits").toStringList();\n    if (inherits.isEmpty() && name() != "hicolor")\n        inherits << "hicolor";\n    return iniFile_.value("Icon Theme/Inherits").toStringList();\n}\n\nQStringList XDG::ThemeFileParser::directories()\n{\n    return iniFile_.value("Icon Theme/Directories").toStringList();\n}\n\nbool XDG::ThemeFileParser::hidden()\n{\n    return iniFile_.value("Icon Theme/Hidden").toBool();\n}\n\nint XDG::ThemeFileParser::size(const QString &directory)\n{\n    iniFile_.beginGroup(directory);\n    int result = iniFile_.value("Size").toInt();\n    iniFile_.endGroup();\n    return result;\n}\n\nQString XDG::ThemeFileParser::context(const QString &directory)\n{\n    iniFile_.beginGroup(directory);\n    QString result = iniFile_.value("Context").toString();\n    iniFile_.endGroup();\n    return result;\n}\n\nQString XDG::ThemeFileParser::type(const QString &directory)\n{\n    iniFile_.beginGroup(directory);\n    QString result = iniFile_.contains("Type") ? iniFile_.value("Type").toString()\n                                               : "Threshold";\n    iniFile_.endGroup();\n    return result;\n}\n\nint XDG::ThemeFileParser::maxSize(const QString &directory)\n{\n    iniFile_.beginGroup(directory);\n    int result = iniFile_.contains("MaxSize") ? iniFile_.value("MaxSize").toInt()\n                                              : size(directory);\n    iniFile_.endGroup();\n    return result;\n}\n\nint XDG::ThemeFileParser::minSize(const QString &directory)\n{\n    iniFile_.beginGroup(directory);\n    int result = iniFile_.contains("MinSize") ? iniFile_.value("MinSize").toInt()\n                                              : size(directory);\n    iniFile_.endGroup();\n    return result;\n}\n\nint XDG::ThemeFileParser::threshold(const QString &directory)\n{\n    iniFile_.beginGroup(directory);\n    int result =\n            iniFile_.contains("Threshold") ? iniFile_.value("Threshold").toInt() : 2;\n    iniFile_.endGroup();\n    return result;\n}\n'