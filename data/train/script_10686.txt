b'using System;\nusing System.Collections.Generic;\nusing System.Net.NetworkInformation;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\nusing System.Diagnostics;\nusing System.Net;\nusing System.Threading;\nusing System.Net.Sockets;\nusing System.Linq;\nnamespace TraceRouteTool\n{\n    public partial class qqzengTraceRoute : Form\n    {\n        CancellationTokenSource tokenSource = new CancellationTokenSource();\n       \n        public qqzengTraceRoute()\n        {\n            InitializeComponent();\n        }\n\n        private async void button1_Click(object sender, EventArgs e)\n        {\n           \n            if (!string.IsNullOrEmpty(textBox1.Text))\n            {\n                tokenSource = new CancellationTokenSource();\n                var token = tokenSource.Token;\n                listBox1.Items.Clear();\n                await Task.Run(() => TraceRoute(30, textBox1.Text, token), token);\n            }\n         \n          \n        }\n\n\n        private async void TraceRoute(int hopLimit, string hostNameOrIp, CancellationToken ct)\n        {\n            if (ct.IsCancellationRequested == true)\n            {\n                return;\n                //ct.ThrowIfCancellationRequested();\n            }\n\n\n            for (int hopIndex = 0; hopIndex < hopLimit; hopIndex++)\n            {\n                int ttl = hopIndex + 1;\n                int timeout = 200; \n\n               // string data = Guid.NewGuid().ToString();\n                byte[] dataBytes =new byte[] { 0 };//Encoding.ASCII.GetBytes(data);\n                Ping ping = new Ping();\n\n\n                string ip = " ", local = " ", hostname = " ", reply_time = " ";\n                IPStatus status= IPStatus.Unknown;\n                Stopwatch pingReplyTime = new Stopwatch();\n                List<string> times = new List<string>();\n                List<IPAddress> ips = new List<IPAddress>();\n                for (int i = 0; i < 3; i++)\n                {\n                    pingReplyTime.Start();\n                    PingReply pingReply = await ping.SendPingAsync(hostNameOrIp, timeout, dataBytes, new PingOptions(ttl, true));\n                                 \n                    times.Add(pingReplyTime.ElapsedMilliseconds.ToString());\n                    pingReplyTime.Reset();\n\n                    ips.Add(pingReply.Address);\n                    status = pingReply.Status;\n                     // reply_time = pingReplyTime.ElapsedMilliseconds.ToString() + "ms";\n                }\n\n\n\n               var ipa= ips.FirstOrDefault(t => t != null);\n\n                reply_time = string.Join(" / ", times);// + " ms";\n                if (reply_time.Length <12)\n                {\n                    reply_time = "      "+ reply_time;\n                }\n\n                if (ipa != null)\n                {\n                    ip = ipa.ToString();\n\n\n                    if (ip == "0.0.0.0")\n                    {\n                        ip = "*";\n                        local = "";\n                        hostname = "";\n                    }\n                    else\n                    {\n                        string t = IPSearch3Fast.Instance.Find(ip);\n                        string[] r = t.Split(\'|\');\n                        string pcd = "";\n                        if (r.Length > 3)\n                        {\n                            pcd = r[1] + r[2] + r[3] + r[4] + (r[5] == "" ? "" : "(" + r[5] + ")");\n                        }\n                        local = pcd;\n\n                        if (r[5] != "\xe4\xbf\x9d\xe7\x95\x99")\n                        {\n                            hostname = GetReverseDNS(ip, r[1] == "\xe4\xb8\xad\xe5\x9b\xbd" ? 60 : 200);\n                        }\n\n                    }\n                }\n\n                var entity = new TracertEntry()\n                {\n                    HopIndex = hopIndex + 1,\n                    Ip = ip,\n                    Hostname = hostname,\n                    Local = local,\n                    ReplyTime = reply_time,\n                    ReplyStatus = status\n                };\n                UpdateUI(entity);\n\n\n                if (status == IPStatus.Success)\n                    break;\n\n                if (ct.IsCancellationRequested)\n                {\n                    break;\n\n                }\n            }\n\n           \n        }\n\n\n        private delegate IPHostEntry GetHostEntryHandler(string ip);\n\n        public string GetReverseDNS(string ip, int timeout)\n        {\n            try\n            {\n                Func<IPAddress, IPHostEntry> callback = s => Dns.GetHostEntry(s);\n                var result = callback.BeginInvoke(IPAddress.Parse(ip), null, null);\n                if (!result.AsyncWaitHandle.WaitOne(timeout, false))\n                {\n                    return "";\n                }\n                return callback.EndInvoke(result).HostName;\n            }\n            catch (Exception)\n            {\n\n                return "";\n            }\n                \n          \n             \n        }\n\n        private void UpdateUI(TracertEntry r)\n        {\n            if (this.InvokeRequired)\n                this.Invoke(new Action<TracertEntry>(UpdateUI), r);\n            else\n            {\n\n                listBox1.Items.Add(r.ToString());\n              \n            }\n\n        }\n\n        private void listBox1_MouseDoubleClick(object sender, MouseEventArgs e)\n        {\n            int index = this.listBox1.IndexFromPoint(e.Location);\n            if (index != System.Windows.Forms.ListBox.NoMatches)\n            {\n                string s = listBox1.SelectedItem.ToString();\n                Clipboard.SetText(s.Split(\'\\t\')[3]);\n            }\n        }\n\n        private void textBox1_KeyDown(object sender, KeyEventArgs e)\n        {\n            if (e.KeyCode == Keys.Enter)\n            {\n                button1_Click(this, new EventArgs());\n            }\n        }\n\n        private void btnCancel_Click(object sender, EventArgs e)\n        {\n            tokenSource.Cancel();\n        }\n\n       \n    }\n\n\n\n    public class TracertEntry\n    {\n        /// <summary>\n        /// The hop id. Represents the number of the hop.\n        /// </summary>\n        public int HopIndex { get; set; }\n\n        /// <summary>\n        /// The IP address.\n        /// </summary>\n        public string Ip { get; set; }\n\n        public string Hostname { get; set; }\n        /// <summary>\n        /// The hostname\n        /// </summary>\n        public string Local { get; set; }\n\n        /// <summary>\n        /// The reply time it took for the host to receive and reply to the request in milliseconds.\n        /// </summary>\n        public string ReplyTime { get; set; }\n\n        /// <summary>\n        /// The reply status of the request.\n        /// </summary>\n        public IPStatus ReplyStatus { get; set; }\n\n        public override string ToString()\n        {\n            return string.Format("{0}\\t{1}\\t\\t{2}\\t{3}\\t\\t\\t{4}", HopIndex, ReplyTime, Ip, Local, Hostname);\n        }\n    }\n}\n'