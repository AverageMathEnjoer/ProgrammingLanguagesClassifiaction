b'#\' gammaKpar\n#\'\n#\' Field comparisons: 0 disagreement, 2 total agreement.\n#\'\n#\' @usage gammaKpar(matAp, matBp, gender, n.cores)\n#\' \n#\' @param matAp vector storing the comparison field in data set 1\n#\' @param matBp vector storing the comparison field in data set 2\n#\' @param gender Whether the matching variable is gender. Will override\n#\' standard warnings of missingness/nonvariability. Default is FALSE.\n#\' @param n.cores Number of cores to parallelize over. Default is NULL.\n#\'\n#\' @return \\code{gammaKpar} returns a list with the indices corresponding to each\n#\' matching pattern, which can be fed directly into \\code{tableCounts} and \\code{matchesLink}.\n#\'\n#\' @author Ted Enamorado <ted.enamorado@gmail.com>, Ben Fifield <benfifield@gmail.com>, and Kosuke Imai\n#\'\n#\' @examples\n#\' \\dontrun{\n#\' g1 <- gammaKpar(dfA$birthyear, dfB$birthyear)\n#\' }\n#\' @export\n\n## ------------------------\n## gamma.k.par\n## This function applies gamma.k\n## in parallel\n## ------------------------\n\ngammaKpar <- function(matAp, matBp, gender = FALSE, n.cores = NULL) {\n\n    ## For visible bindings\n    i <- NULL\n\n    if(any(class(matAp) %in% c("tbl_df", "data.table"))){\n        matAp <- as.data.frame(matAp)[,1]\n    }\n    if(any(class(matBp) %in% c("tbl_df", "data.table"))){\n        matBp <- as.data.frame(matBp)[,1]\n    }\n\n    if(is.null(n.cores)) {\n        n.cores <- detectCores() - 1\n    }\n\n    matAp[matAp == ""] <- NA\n    matBp[matBp == ""] <- NA\n\n    if(!gender){\n        if(sum(is.na(matAp)) == length(matAp) | length(unique(matAp)) == 1){\n            cat("WARNING: You have no variation in this variable, or all observations are missing in dataset A.\\n")\n        }\n        if(sum(is.na(matBp)) == length(matBp) | length(unique(matBp)) == 1){\n            cat("WARNING: You have no variation in this variable, or all observations are missing in dataset B.\\n")\n        }\n    }else{\n        if(sum(is.na(matAp)) == length(matAp)){\n            cat("WARNING: You have no variation in this variable, or all observations are missing in dataset A.\\n")\n        }\n        if(sum(is.na(matBp)) == length(matBp)){\n            cat("WARNING: You have no variation in this variable, or all observations are missing in dataset B.\\n")\n        }\n    }\n\n    matrix.1 <- as.matrix(as.character(matAp))\n    matrix.2 <- as.matrix(as.character(matBp))\n\n    matrix.1[is.na(matrix.1)] <- "1234MF"\n    matrix.2[is.na(matrix.2)] <- "9876ES"\n\n    u.values.1 <- unique(matrix.1)\n    u.values.2 <- unique(matrix.2)\n\n    matches <- u.values.1[u.values.1 %in% u.values.2]\n\n    ht1 <- new.env(hash=TRUE)\n    ht2 <- new.env(hash=TRUE)\n    matches.l <- as.list(matches)\n    \n    if(Sys.info()[[\'sysname\']] == "Windows") {\n      if (n.cores == 1) \'%oper%\' <- foreach::\'%do%\'\n      else { \n        \'%oper%\' <- foreach::\'%dopar%\'\n        cl <- makeCluster(n.cores)\n        registerDoParallel(cl)\n        on.exit(stopCluster(cl))\n      }\n      \n      final.list <- foreach(i = 1:length(matches.l)) %oper% {\n        ht1 <- which(matrix.1 == matches.l[[i]]); ht2 <- which(matrix.2 == matches.l[[i]])\n        list(ht1, ht2)\n      }\n      \n    } else {\n      final.list <- mclapply(matches.l, function(s){\n        ht1[[s]] <- which(matrix.1 == s); ht2[[s]] <- which(matrix.2 == s);\n        list(ht1[[s]], ht2[[s]]) }, mc.cores = getOption("mc.cores", n.cores))\n    }\n    \n    na.list <- list()\n    na.list[[1]] <- which(matrix.1 == "1234MF")\n    na.list[[2]] <- which(matrix.2 == "9876ES")\n\n    out <- list()\n    out[["matches2"]] <- final.list\n    out[["nas"]] <- na.list\n    class(out) <- c("fastLink", "gammaKpar")\n\n    return(out)\n}\n\n## ------------------------\n## End of gamma.k.par\n## ------------------------\n'