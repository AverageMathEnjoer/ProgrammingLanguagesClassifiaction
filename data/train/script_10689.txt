b'// Listing 22.5\nlet aNumber : int = 10\nlet maybeANumber : int option = Some 10\n\nlet calculateAnnualPremiumUsd score =\n    match score with\n    | Some 0 -> 250\n    | Some score when score < 0 -> 400\n    | Some score when score > 0 -> 150\n    | None ->\n        printfn "No score supplied! Using temporary premium."\n        300\n\ncalculateAnnualPremiumUsd (Some 250)\ncalculateAnnualPremiumUsd None\n\n// Now you try #1\ntype Driver = { Name : string; SafetyScore : int option; YearPassed : int }\n\nlet drivers =\n    [ { Name = "Fred Smith"; SafetyScore = Some 550; YearPassed = 1980 }\n      { Name = "Jane Dunn"; SafetyScore = None; YearPassed = 1980 } ]\n\nlet calculatePremiumForCustomer customer =\n    match customer.SafetyScore with\n    | Some 0 -> 250\n    | Some score when score < 0 -> 400\n    | Some score when score > 0 -> 150\n    | None ->\n        printfn "No score supplied! Using temporary premium."\n        300\n\n// Listing 22.6\nlet customer = drivers.[0]\nlet describe safetyScore = if safetyScore > 200 then "Safe" else "High Risk"\n\nlet description =\n    match customer.SafetyScore with\n    | Some score -> Some(describe score)\n    | None -> None\n\nlet descriptionTwo =\n    customer.SafetyScore\n    |> Option.map(fun score -> describe score)\n\nlet shorthand = customer.SafetyScore |> Option.map describe\nlet optionalDescribe = Option.map describe\n\n// Listing 22.7\nlet tryFindCustomer cId = if cId = 10 then Some drivers.[0] else None\nlet getSafetyScore customer = customer.SafetyScore\nlet score = tryFindCustomer 10 |> Option.bind getSafetyScore\n\n// Listing 22.8\nlet test1 = Some 5 |> Option.filter(fun x -> x > 5)\nlet test2 = Some 5 |> Option.filter(fun x -> x = 5)\n\n// Now you try #2\nlet tryLoadCustomer id =\n    if id >= 2 && id <= 7 then Some(sprintf "Customer %d" id)\n    else None\n\n[ 1 .. 10 ]\n|> List.choose tryLoadCustomer\n\n'