b'package com.github.eprendre.videosource\n\nimport com.github.eprendre.tingshu.extensions.config\nimport com.github.eprendre.tingshu.sources.AudioUrlExtractor\nimport com.github.eprendre.tingshu.sources.AudioUrlJsoupExtractor\nimport com.github.eprendre.tingshu.sources.TingShu\nimport com.github.eprendre.tingshu.utils.*\nimport org.jsoup.Jsoup\nimport java.net.URLEncoder\n\nobject YingHuaCD : TingShu(){\n    override fun getSourceId(): String {\n        return "815245280b854e0cb5dbdfef020f0fd2"\n    }\n\n    override fun getUrl(): String {\n        return "http://www.yinghuacd.com/"\n    }\n\n    override fun getName(): String {\n        return "\xe6\xa8\xb1\xe8\x8a\xb1\xe5\x8a\xa8\xe6\xbc\xab"\n    }\n\n    override fun getDesc(): String {\n        return "\xe6\xa8\xb1\xe8\x8a\xb1\xe5\x8a\xa8\xe6\xbc\xab\xe6\x8b\xa5\xe6\x9c\x89\xe4\xb8\x8a\xe4\xb8\x87\xe9\x9b\x86\xe9\xab\x98\xe6\xb8\x85\xe6\x99\xb0\xe7\x94\xbb\xe8\xb4\xa8\xe7\x9a\x84\xe5\x9c\xa8\xe7\xba\xbf\xe5\x8a\xa8\xe6\xbc\xab\xef\xbc\x8c\xe8\xa7\x82\xe7\x9c\x8b\xe5\xae\x8c\xe5\x85\xa8\xe5\x85\x8d\xe8\xb4\xb9\xe3\x80\x81\xe6\x97\xa0\xe9\xa1\xbb\xe6\xb3\xa8\xe5\x86\x8c\xe3\x80\x81\xe9\xab\x98\xe9\x80\x9f\xe6\x92\xad\xe6\x94\xbe\xe3\x80\x81\xe6\x9b\xb4\xe6\x96\xb0\xe5\x8f\x8a\xe6\x97\xb6\xe7\x9a\x84\xe4\xb8\x93\xe4\xb8\x9a\xe5\x9c\xa8\xe7\xba\xbf\xe6\xa8\xb1\xe8\x8a\xb1\xe5\x8a\xa8\xe6\xbc\xab\xe7\xab\x99\xef\xbc\x8c\xe6\x88\x91\xe4\xbb\xac\xe8\x87\xb4\xe5\x8a\x9b\xe4\xb8\xba\xe6\x89\x80\xe6\x9c\x89\xe5\x8a\xa8\xe6\xbc\xab\xe8\xbf\xb7\xe4\xbb\xac\xe6\x8f\x90\xe4\xbe\x9b\xe6\x9c\x80\xe5\xa5\xbd\xe7\x9c\x8b\xe7\x9a\x84\xe5\x8a\xa8\xe6\xbc\xab\xe3\x80\x82"\n    }\n\n    override fun isCacheable(): Boolean {\n        return false\n    }\n\n    override fun search(keywords: String, page: Int): Pair<List<Book>, Int> {\n        val encodedKeywords = URLEncoder.encode(keywords, "utf-8")\n        val url = if (page == 1) {\n            "http://www.yinghuacd.com/search/${encodedKeywords}"\n        } else {\n            "http://www.yinghuacd.com/search/${encodedKeywords}/?page=${page}"\n        }\n        val doc = Jsoup.connect(url).config(true).get()\n\n        val currentPage = 1\n        val totalPage = doc.selectFirst("#lastn")?.text()?.toInt() ?: 1\n\n        val list = ArrayList<Book>()\n        val elementList = doc.select(".lpic > ul > li")\n        elementList.forEach { item ->\n            val coverUrl = item.selectFirst("a > img").attr("src")\n            val bookUrl = item.selectFirst("a").absUrl("href")\n            val title = item.selectFirst("h2 > a").text()\n            val status = item.selectFirst("span").text()\n            val desc = item.selectFirst("p").text()\n            val author = ""\n            val artist = ""\n            list.add(Book(coverUrl, bookUrl, title, author, artist).apply {\n                this.sourceId = getSourceId()\n                this.status = status\n                this.intro = desc\n            })\n        }\n        return Pair(list, totalPage)\n    }\n\n    override fun getAudioUrlExtractor(): AudioUrlExtractor {\n        AudioUrlJsoupExtractor.setUp(true) { doc ->\n            return@setUp doc.selectFirst("#playbox").attr("data-vid").split("$")[0]\n        }\n        return AudioUrlJsoupExtractor\n    }\n\n    override fun getCategoryMenus(): List<CategoryMenu> {\n        val menu1 = CategoryMenu(\n            "\xe5\x88\x86\xe7\xb1\xbb", listOf(\n                CategoryTab("\xe6\x96\xb0\xe7\x95\xaa", "http://www.yinghuacd.com/2022/"),\n                CategoryTab("\xe6\x97\xa5\xe6\x9c\xac\xe6\xbc\xab", "http://www.yinghuacd.com/japan/"),\n                CategoryTab("\xe5\x9b\xbd\xe4\xba\xa7\xe5\x8a\xa8\xe6\xbc\xab", "http://www.yinghuacd.com/china/"),\n                CategoryTab("\xe7\xbe\x8e\xe5\x9b\xbd\xe5\x8a\xa8\xe6\xbc\xab", "http://www.yinghuacd.com/american/"),\n                CategoryTab("\xe5\x89\xa7\xe5\x9c\xba\xe7\x89\x88", "http://www.yinghuacd.com/37/")\n            )\n        )\n        return listOf(menu1)\n\n    }\n\n    override fun getCategoryList(url: String): Category {\n        val list = ArrayList<Book>()\n        val doc = Jsoup.connect(url).config(true).get()\n\n        var currentPage = 1\n        val totalPage = doc.selectFirst("#lastn")?.text()?.toInt() ?: 1\n        var nextUrl = ""\n        if (totalPage > 1) {\n            nextUrl = doc.select(".pages > .a1").last()?.absUrl("href") ?: ""\n            currentPage = doc.selectFirst(".pages > span")?.text()?.toInt() ?: 1\n        }\n\n        val elementList = doc.select(".lpic > ul > li")\n        elementList.forEach { item ->\n            val coverUrl = item.selectFirst("a > img").attr("src")\n            val bookUrl = item.selectFirst("a").absUrl("href")\n            val title = item.selectFirst("h2 > a").text()\n            val status = item.selectFirst("span").text()\n            val desc = item.selectFirst("p").text()\n            val author = ""\n            val artist = ""\n            list.add(Book(coverUrl, bookUrl, title, author, artist).apply {\n                this.sourceId = getSourceId()\n                this.status = status\n                this.intro = desc\n            })\n        }\n\n        return Category(list, currentPage, totalPage, url, nextUrl)\n    }\n\n    override fun getBookDetailInfo(bookUrl: String, loadEpisodes: Boolean, loadFullPages: Boolean): BookDetail {\n        val episodes = ArrayList<Episode>()\n        if (loadEpisodes) {\n            val doc = Jsoup.connect(bookUrl).config(true).get()\n            val elements = doc.select(".movurl > ul > li > a")\n            elements.forEach { element ->\n                val title = element.text()\n                val url = element.absUrl("href")\n                episodes.add(Episode(title, url))\n            }\n            episodes.reverse()\n        }\n        return BookDetail(episodes)\n    }\n}'