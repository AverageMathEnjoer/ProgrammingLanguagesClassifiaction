b'package icu.nullptr.twifucker.hook\n\nimport android.os.Bundle\nimport android.view.View\nimport android.widget.TextView\nimport com.github.kyuubiran.ezxhelper.ClassUtils.loadClass\nimport com.github.kyuubiran.ezxhelper.EzXHelper\nimport com.github.kyuubiran.ezxhelper.EzXHelper.addModuleAssetPath\nimport com.github.kyuubiran.ezxhelper.EzXHelper.appContext\nimport com.github.kyuubiran.ezxhelper.HookFactory.`-Static`.createHook\nimport com.github.kyuubiran.ezxhelper.Log\nimport com.github.kyuubiran.ezxhelper.MemberExtensions.isNotFinal\nimport com.github.kyuubiran.ezxhelper.MemberExtensions.isNotStatic\nimport com.github.kyuubiran.ezxhelper.MemberExtensions.isPublic\nimport com.github.kyuubiran.ezxhelper.finders.ConstructorFinder\nimport com.github.kyuubiran.ezxhelper.finders.FieldFinder\nimport com.github.kyuubiran.ezxhelper.finders.MethodFinder\nimport dalvik.bytecode.Opcodes\nimport de.robv.android.xposed.XposedHelpers\nimport icu.nullptr.twifucker.R\nimport icu.nullptr.twifucker.beforeMeasure\nimport icu.nullptr.twifucker.clearUrlQueries\nimport icu.nullptr.twifucker.exceptions.CachedHookNotFound\nimport icu.nullptr.twifucker.genOrigUrl\nimport icu.nullptr.twifucker.getId\nimport icu.nullptr.twifucker.hook.HookEntry.Companion.currentActivity\nimport icu.nullptr.twifucker.hook.HookEntry.Companion.dexKit\nimport icu.nullptr.twifucker.hook.HookEntry.Companion.loadDexKit\nimport icu.nullptr.twifucker.hostAppLastUpdate\nimport icu.nullptr.twifucker.moduleLastModify\nimport icu.nullptr.twifucker.modulePrefs\nimport icu.nullptr.twifucker.ui.DownloadDialog\n\n\nobject DownloadHook : BaseHook() {\n    override val name: String\n        get() = "DownloadHook"\n\n    private var cachedTweetId = 0L\n    private var cachedDownloadUrls: List<String> = listOf()\n\n    // tweet share download button\n    private const val HOOK_TWEET_SHARE_CLASS = "hook_tweet_share_class"\n    private const val HOOK_TWEET_SHARE_SHOW_METHOD = "hook_tweet_share_show_method"\n    private const val HOOK_TWEET_SHARE_LIST_FIELD = "hook_tweet_share_list_field"\n\n    private const val HOOK_ACTION_ENUM_WRAPPED_CLASS = "hook_action_enum_wrapped_class"\n    private const val HOOK_ACTION_ENUM_WRAPPED_INNER_CLASS = "hook_action_enum_wrapped_inner_class"\n    private const val HOOK_ACTION_ENUM_CLASS = "hook_action_enum_class"\n\n    private const val HOOK_ACTION_SHEET_ITEM_CLASS = "hook_action_sheet_item_class"\n    private const val HOOK_ACTION_SHEET_ITEM_FIELD = "hook_action_sheet_item_field"\n\n    // tweet share onClick\n    private const val HOOK_SHARE_TWEET_ON_CLICK_LISTENER_CLASS =\n        "hook_share_tweet_on_click_listener_class"\n    private const val HOOK_SHARE_TWEET_ITEM_ADAPTER_FIELD = "hook_share_tweet_item_adapter_field"\n    private const val HOOK_ACTION_ITEM_VIEW_DATA_FIELD = "hook_action_item_view_data_field"\n\n    // protected tweet share onClick\n    private const val HOOK_PROTECTED_SHARE_ITEM_ADAPTER_CLASS =\n        "hook_protected_share_item_adapter_class"\n    private const val HOOK_PROTECTED_SHARE_TWEET_ITEM_ADAPTER_CLASS_TITLE_FIELD =\n        "hook_protected_share_tweet_item_adapter_class_title_field"\n\n    // share menu\n    private const val HOOK_SHARE_MENU_CLASS = "hook_share_menu_class"\n    private const val HOOK_SHARE_MENU_METHOD = "hook_share_menu_method"\n\n    // tweet object\n    private const val HOOK_TWEET_RESULT_FIELD = "hook_tweet_result_field"\n    private const val HOOK_TWEET_ID_FIELD = "hook_tweet_id_field"\n    private const val HOOK_RESULT_FIELD = "hook_result_field"\n    private const val HOOK_LEGACY_FIELD = "hook_legacy_field"\n    private const val HOOK_EXTENDED_ENTITIES_FIELD = "hook_extended_entities_field"\n    private const val HOOK_MEDIA_FIELD = "hook_media_field"\n    private const val HOOK_MEDIA_TYPE_FIELD = "hook_media_type_field"\n    private const val HOOK_MEDIA_URL_HTTPS_FIELD = "hook_media_url_https_field"\n    private const val HOOK_MEDIA_INFO_FIELD = "hook_media_info_field"\n    private const val HOOK_VARIANTS_FIELD = "hook_variants_field"\n\n    // tweet share download button\n    private lateinit var tweetShareClassName: String\n    private lateinit var tweetShareShowMethodName: String\n    private lateinit var tweetShareShareListFieldName: String\n\n    private lateinit var actionEnumWrappedClassName: String\n    private lateinit var actionEnumWrappedInnerClassName: String\n    private lateinit var actionEnumClassName: String\n\n    private lateinit var actionSheetItemClassName: String\n    private lateinit var actionSheetItemFieldName: String\n\n    // tweet share onClick\n    private lateinit var shareTweetOnClickListenerClassName: String\n    private lateinit var shareTweetItemAdapterFieldName: String\n    private lateinit var actionItemViewDataFieldName: String\n\n    // protected tweet share onClick\n    private lateinit var protectedShareTweetItemAdapterClassName: String\n    private lateinit var protectedShareTweetItemAdapterClassTitleFieldName: String\n\n    // share menu\n    private lateinit var shareMenuClassName: String\n    private lateinit var shareMenuMethodName: String\n\n    // tweet object\n    private lateinit var tweetResultFieldName: String\n    private lateinit var tweetIdFieldName: String\n    private lateinit var resultFieldName: String\n    private lateinit var legacyFieldName: String\n    private lateinit var extendedEntitiesFieldName: String\n    private lateinit var mediaFieldName: String\n    private lateinit var mediaTypeFieldName: String\n    private lateinit var mediaUrlHttpsFieldName: String\n    private lateinit var mediaInfoFieldName: String\n    private lateinit var variantsFieldName: String\n\n    override fun init() {\n        if (!modulePrefs.getBoolean("enable_download_hook", false)) return\n\n        try {\n            loadHookInfo()\n        } catch (t: Throwable) {\n            Log.e(t)\n            return\n        }\n\n        // normal tweet\n        shareTweetOnClickListenerClassName.let { className ->\n            if (className.isEmpty()) return@let\n\n            MethodFinder.fromClass(loadClass(className)).filterByName("onClick").first()\n                .createHook {\n                    beforeMeasure(name) { param ->\n                        if (cachedTweetId == 0L || cachedDownloadUrls.isEmpty()) return@beforeMeasure\n                        val actionItemViewData = XposedHelpers.getObjectField(\n                            XposedHelpers.getObjectField(\n                                param.thisObject, shareTweetItemAdapterFieldName\n                            ), actionItemViewDataFieldName\n                        )\n                        // a - actionType\n                        // b - title\n                        // c - iconRes\n                        addModuleAssetPath(appContext)\n                        if (XposedHelpers.getObjectField(\n                                actionItemViewData, "b"\n                            ) != appContext.getString(R.string.download_or_copy)\n                        ) return@beforeMeasure\n\n                        try {\n                            currentActivity.get()?.let { act ->\n                                DownloadDialog(act, cachedTweetId, cachedDownloadUrls) {\n                                    cachedTweetId = 0L\n                                    cachedDownloadUrls = listOf()\n                                }\n                            }\n                        } catch (t: Throwable) {\n                            Log.e(t)\n                        }\n                    }\n                }\n        }\n\n        // protected tweet\n        MethodFinder.fromClass(loadClass(protectedShareTweetItemAdapterClassName))\n            .filterByName("onClick").first().createHook {\n                beforeMeasure(name) { param ->\n                    if (cachedTweetId == 0L || cachedDownloadUrls.isEmpty()) return@beforeMeasure\n\n                    val protectedShareTweetItemAdapterTitleTextView = XposedHelpers.getObjectField(\n                        param.thisObject, protectedShareTweetItemAdapterClassTitleFieldName\n                    ) as TextView\n                    addModuleAssetPath(appContext)\n                    if (protectedShareTweetItemAdapterTitleTextView.text != appContext.getString(R.string.download_or_copy)) return@beforeMeasure\n\n                    try {\n                        currentActivity.get()?.let { act ->\n                            DownloadDialog(act, cachedTweetId, cachedDownloadUrls) {\n                                cachedTweetId = 0L\n                                cachedDownloadUrls = listOf()\n                            }\n                        }\n                    } catch (t: Throwable) {\n                        Log.e(t)\n                    }\n                }\n            }\n\n        MethodFinder.fromClass(loadClass(tweetShareClassName))\n            .filterByName(tweetShareShowMethodName).first().createHook {\n                beforeMeasure(name) { param ->\n                    val shareList = XposedHelpers.getObjectField(\n                        param.thisObject, tweetShareShareListFieldName\n                    ) as List<*>\n\n                    val mutList = shareList.toMutableList()\n\n                    val actionEnumWrappedClass = loadClass(actionEnumWrappedInnerClassName)\n                    val actionEnumClass = loadClass(actionEnumClassName)\n                    val actionSheetItemClass = loadClass(actionSheetItemClassName)\n\n                    val actionEnumWrapped = XposedHelpers.newInstance(\n                        actionEnumWrappedClass,\n                        XposedHelpers.callStaticMethod(actionEnumClass, "valueOf", "None"),\n                        ""\n                    )\n                    // drawableRes, actionId, title\n                    addModuleAssetPath(appContext)\n                    val buttonConstructor =\n                        ConstructorFinder.fromClass(actionSheetItemClass).filterByParamCount(3)\n                            .filterByParamTypes {\n                                // IILjava/lang/String; or Ljava/lang/String;II\n                                (it[0] == Int::class.java && it[1] == Int::class.java && it[2] == String::class.java) || (it[0] == String::class.java && it[1] == Int::class.java && it[2] == Int::class.java)\n                            }.first()\n                    val dlButton = if (buttonConstructor.parameterTypes[0] == Int::class.java) {\n                        buttonConstructor.newInstance(\n                            getId("ic_vector_incoming", "drawable"),\n                            0,\n                            appContext.getString(R.string.download_or_copy)\n                        )\n                    } else {\n                        buttonConstructor.newInstance(\n                            appContext.getString(R.string.download_or_copy),\n                            getId("ic_vector_incoming", "drawable"),\n                            0\n                        )\n                    }\n\n                    XposedHelpers.setObjectField(\n                        actionEnumWrapped, actionSheetItemFieldName,\n                        dlButton,\n                    )\n\n                    mutList.add(\n                        XposedHelpers.newInstance(\n                            loadClass(actionEnumWrappedClassName), actionEnumWrapped\n                        )\n                    )\n\n                    XposedHelpers.setObjectField(\n                        param.thisObject, tweetShareShareListFieldName, mutList.toList()\n                    )\n                }\n            }\n\n        // share menu\n        MethodFinder.fromClass(loadClass(shareMenuClassName)).filterByName(shareMenuMethodName)\n            .first().createHook {\n                beforeMeasure(name) { param ->\n                    val event = param.args[1]\n                    // share_menu_click\n                    // share_menu_cancel\n                    if (event == "share_menu_cancel") {\n                        cachedTweetId = 0L\n                        cachedDownloadUrls = listOf()\n                        return@beforeMeasure\n                    }\n                    if (event != "share_menu_click") return@beforeMeasure\n                    val tweetResults = param.args[2]\n\n                    val tweetResult =\n                        XposedHelpers.getObjectField(tweetResults, tweetResultFieldName)\n                    val tweetId = XposedHelpers.getLongField(tweetResult, tweetIdFieldName)\n                    val result = XposedHelpers.getObjectField(tweetResult, resultFieldName)\n                    val legacy = XposedHelpers.getObjectField(result, legacyFieldName)\n                    val extendedEntities =\n                        XposedHelpers.getObjectField(legacy, extendedEntitiesFieldName)\n                    val media =\n                        XposedHelpers.getObjectField(extendedEntities, mediaFieldName) as List<*>\n\n                    val urls = arrayListOf<String>()\n                    media.forEach { m ->\n                        val mediaType = XposedHelpers.getObjectField(m, mediaTypeFieldName)\n                        when (mediaType.toString()) {\n                            "IMAGE" -> {\n                                val mediaUrlHttps = XposedHelpers.getObjectField(\n                                    m, mediaUrlHttpsFieldName\n                                ) as String\n                                urls.add(genOrigUrl(mediaUrlHttps))\n                            }\n\n                            "VIDEO", "ANIMATED_GIF" -> {\n                                val mediaInfo = XposedHelpers.getObjectField(m, mediaInfoFieldName)\n                                val variants = XposedHelpers.getObjectField(\n                                    mediaInfo, variantsFieldName\n                                ) as List<*>\n                                // a - bitrate\n                                // b - url\n                                // c - contentType\n                                variants.sortedByDescending { v ->\n                                    XposedHelpers.getObjectField(v, "a") as Int\n                                }[0]?.let {\n                                    val url = XposedHelpers.getObjectField(it, "b") as String\n                                    urls.add(clearUrlQueries(url))\n                                }\n                            }\n                        }\n                    }\n                    cachedTweetId = tweetId\n                    cachedDownloadUrls = urls\n                }\n            }\n    }\n\n    private fun loadCachedHookInfo() {\n        // tweet share download button\n        tweetShareClassName =\n            modulePrefs.getString(HOOK_TWEET_SHARE_CLASS, null) ?: throw CachedHookNotFound()\n        tweetShareShowMethodName =\n            modulePrefs.getString(HOOK_TWEET_SHARE_SHOW_METHOD, null) ?: throw CachedHookNotFound()\n        tweetShareShareListFieldName =\n            modulePrefs.getString(HOOK_TWEET_SHARE_LIST_FIELD, null) ?: throw CachedHookNotFound()\n\n        actionEnumWrappedClassName = modulePrefs.getString(HOOK_ACTION_ENUM_WRAPPED_CLASS, null)\n            ?: throw CachedHookNotFound()\n        actionEnumWrappedInnerClassName =\n            modulePrefs.getString(HOOK_ACTION_ENUM_WRAPPED_INNER_CLASS, null)\n                ?: throw CachedHookNotFound()\n        actionEnumClassName =\n            modulePrefs.getString(HOOK_ACTION_ENUM_CLASS, null) ?: throw CachedHookNotFound()\n\n        actionSheetItemClassName =\n            modulePrefs.getString(HOOK_ACTION_SHEET_ITEM_CLASS, null) ?: throw CachedHookNotFound()\n        actionSheetItemFieldName =\n            modulePrefs.getString(HOOK_ACTION_SHEET_ITEM_FIELD, null) ?: throw CachedHookNotFound()\n\n        // tweet share onClick\n        shareTweetOnClickListenerClassName =\n            modulePrefs.getString(HOOK_SHARE_TWEET_ON_CLICK_LISTENER_CLASS, null)\n                ?: throw CachedHookNotFound()\n        shareTweetItemAdapterFieldName =\n            modulePrefs.getString(HOOK_SHARE_TWEET_ITEM_ADAPTER_FIELD, null)\n                ?: throw CachedHookNotFound()\n        actionItemViewDataFieldName = modulePrefs.getString(HOOK_ACTION_ITEM_VIEW_DATA_FIELD, null)\n            ?: throw CachedHookNotFound()\n\n        // protected tweet share onClick\n        protectedShareTweetItemAdapterClassName =\n            modulePrefs.getString(HOOK_PROTECTED_SHARE_ITEM_ADAPTER_CLASS, null)\n                ?: throw CachedHookNotFound()\n        protectedShareTweetItemAdapterClassTitleFieldName =\n            modulePrefs.getString(HOOK_PROTECTED_SHARE_TWEET_ITEM_ADAPTER_CLASS_TITLE_FIELD, null)\n                ?: throw CachedHookNotFound()\n\n        // share menu\n        shareMenuClassName =\n            modulePrefs.getString(HOOK_SHARE_MENU_CLASS, null) ?: throw CachedHookNotFound()\n        shareMenuMethodName =\n            modulePrefs.getString(HOOK_SHARE_MENU_METHOD, null) ?: throw CachedHookNotFound()\n\n        // tweet object\n        tweetResultFieldName =\n            modulePrefs.getString(HOOK_TWEET_RESULT_FIELD, null) ?: throw CachedHookNotFound()\n        tweetIdFieldName =\n            modulePrefs.getString(HOOK_TWEET_ID_FIELD, null) ?: throw CachedHookNotFound()\n        resultFieldName =\n            modulePrefs.getString(HOOK_RESULT_FIELD, null) ?: throw CachedHookNotFound()\n        legacyFieldName =\n            modulePrefs.getString(HOOK_LEGACY_FIELD, null) ?: throw CachedHookNotFound()\n        extendedEntitiesFieldName =\n            modulePrefs.getString(HOOK_EXTENDED_ENTITIES_FIELD, null) ?: throw CachedHookNotFound()\n        mediaFieldName = modulePrefs.getString(HOOK_MEDIA_FIELD, null) ?: throw CachedHookNotFound()\n        mediaTypeFieldName =\n            modulePrefs.getString(HOOK_MEDIA_TYPE_FIELD, null) ?: throw CachedHookNotFound()\n        mediaUrlHttpsFieldName =\n            modulePrefs.getString(HOOK_MEDIA_URL_HTTPS_FIELD, null) ?: throw CachedHookNotFound()\n        mediaInfoFieldName =\n            modulePrefs.getString(HOOK_MEDIA_INFO_FIELD, null) ?: throw CachedHookNotFound()\n        variantsFieldName =\n            modulePrefs.getString(HOOK_VARIANTS_FIELD, null) ?: throw CachedHookNotFound()\n    }\n\n    private fun saveHookInfo() {\n        modulePrefs.let {\n            // tweet share download button\n            it.putString(HOOK_TWEET_SHARE_CLASS, tweetShareClassName)\n            it.putString(HOOK_TWEET_SHARE_SHOW_METHOD, tweetShareShowMethodName)\n            it.putString(HOOK_TWEET_SHARE_LIST_FIELD, tweetShareShareListFieldName)\n\n            it.putString(HOOK_ACTION_ENUM_WRAPPED_CLASS, actionEnumWrappedClassName)\n            it.putString(HOOK_ACTION_ENUM_WRAPPED_INNER_CLASS, actionEnumWrappedInnerClassName)\n            it.putString(HOOK_ACTION_ENUM_CLASS, actionEnumClassName)\n\n            it.putString(HOOK_ACTION_SHEET_ITEM_CLASS, actionSheetItemClassName)\n            it.putString(HOOK_ACTION_SHEET_ITEM_FIELD, actionSheetItemFieldName)\n\n            // tweet share onClick\n            it.putString(\n                HOOK_SHARE_TWEET_ON_CLICK_LISTENER_CLASS, shareTweetOnClickListenerClassName\n            )\n            it.putString(HOOK_SHARE_TWEET_ITEM_ADAPTER_FIELD, shareTweetItemAdapterFieldName)\n            it.putString(HOOK_ACTION_ITEM_VIEW_DATA_FIELD, actionItemViewDataFieldName)\n\n            // protected tweet share onClick\n            it.putString(\n                HOOK_PROTECTED_SHARE_ITEM_ADAPTER_CLASS, protectedShareTweetItemAdapterClassName\n            )\n            it.putString(\n                HOOK_PROTECTED_SHARE_TWEET_ITEM_ADAPTER_CLASS_TITLE_FIELD,\n                protectedShareTweetItemAdapterClassTitleFieldName\n            )\n\n            // share menu\n            it.putString(HOOK_SHARE_MENU_CLASS, shareMenuClassName)\n            it.putString(HOOK_SHARE_MENU_METHOD, shareMenuMethodName)\n\n            // tweet object\n            it.putString(HOOK_TWEET_RESULT_FIELD, tweetResultFieldName)\n            it.putString(HOOK_TWEET_ID_FIELD, tweetIdFieldName)\n            it.putString(HOOK_RESULT_FIELD, resultFieldName)\n            it.putString(HOOK_LEGACY_FIELD, legacyFieldName)\n            it.putString(HOOK_EXTENDED_ENTITIES_FIELD, extendedEntitiesFieldName)\n            it.putString(HOOK_MEDIA_FIELD, mediaFieldName)\n            it.putString(HOOK_MEDIA_TYPE_FIELD, mediaTypeFieldName)\n            it.putString(HOOK_MEDIA_URL_HTTPS_FIELD, mediaUrlHttpsFieldName)\n            it.putString(HOOK_MEDIA_INFO_FIELD, mediaInfoFieldName)\n            it.putString(HOOK_VARIANTS_FIELD, variantsFieldName)\n        }\n    }\n\n\n    private fun searchHook() {\n        // tweet share download button\n        val tweetShareClass = dexKit.findMethodUsingString {\n            usingString = "^timeline_selected_caret_position$"\n        }.map {\n            it.getMethodInstance(EzXHelper.classLoader)\n        }\n            .firstOrNull { it.parameterTypes.size == 2 && it.parameterTypes[1] == Bundle::class.java }?.declaringClass\n            ?: throw ClassNotFoundException()\n\n\n        val tweetShareShowMethod =\n            MethodFinder.fromClass(tweetShareClass).filterPublic().filterFinal()\n                .filterByParamCount(1).filterByReturnType(Void.TYPE).first()\n        val tweetShareShareListField =\n            FieldFinder.fromClass(tweetShareClass).filterPublic().filterFinal()\n                .filterByType(List::class.java).first()\n        val actionEnumWrappedClassRefMethod =\n            MethodFinder.fromClass(tweetShareClass).filterPublic().filterFinal()\n                .filterByParamTypes { it.size >= 3 && it[1] == String::class.java && it[2] == Boolean::class.java }\n                .first()\n        val actionEnumWrappedClass = actionEnumWrappedClassRefMethod.returnType\n        val actionEnumWrappedInnerClass = actionEnumWrappedClass.constructors[0].parameterTypes[0]\n        val actionEnumClass = actionEnumWrappedClassRefMethod.parameterTypes[0]\n\n        val actionSheetItemClass = dexKit.findMethodUsingString {\n            usingString = "^ActionSheetItem(drawableRes=$"\n            methodName = "toString"\n            methodReturnType = String::class.java.name\n        }.firstOrNull()?.getMethodInstance(EzXHelper.classLoader)?.declaringClass\n            ?: throw ClassNotFoundException()\n        val actionSheetItemField =\n            FieldFinder.fromClass(actionEnumWrappedInnerClass).filterByType(actionSheetItemClass)\n                .first()\n\n        tweetShareClassName = tweetShareClass.name\n        tweetShareShowMethodName = tweetShareShowMethod.name\n        tweetShareShareListFieldName = tweetShareShareListField.name\n\n        actionEnumWrappedClassName = actionEnumWrappedClass.name\n        actionEnumWrappedInnerClassName = actionEnumWrappedInnerClass.name\n        actionEnumClassName = actionEnumClass.name\n\n        actionSheetItemClassName = actionSheetItemClass.name\n        actionSheetItemFieldName = actionSheetItemField.name\n\n        // tweet share onClick\n        val shareTweetOnClickListenerRefMethodsDesc = dexKit.findMethodUsingString {\n            usingString = "itemView.findViewById(R.id.action_sheet_item_icon)"\n        }\n        val shareTweetOnClickListenerConstructorDesc =\n            shareTweetOnClickListenerRefMethodsDesc.firstNotNullOfOrNull { methodDesc ->\n                val result = dexKit.findMethodInvoking {\n                    methodDescriptor = methodDesc.descriptor\n                    beInvokedMethodName = "<init>"\n                    beInvokedMethodReturnType = Void.TYPE.name\n                }\n                result.values.firstNotNullOfOrNull { l ->\n                    l.firstOrNull { desc ->\n                        desc.getConstructorInstance(EzXHelper.classLoader).parameterTypes.size == 3\n                    }\n                }\n            } ?: throw ClassNotFoundException()\n\n        val shareTweetOnClickListenerClass =\n            shareTweetOnClickListenerConstructorDesc.getConstructorInstance(EzXHelper.classLoader).declaringClass\n                ?: throw ClassNotFoundException()\n        val shareTweetItemAdapterField =\n            FieldFinder.fromClass(shareTweetOnClickListenerClass).last()\n\n        val shareTweetItemAdapterClass = dexKit.findMethodUsingString {\n            usingString = "^itemView.findViewById(R.id.action_sheet_item_icon)$"\n            methodName = "<init>"\n            methodReturnType = Void.TYPE.name\n        }.map {\n            it.getConstructorInstance(EzXHelper.classLoader).declaringClass\n        }.firstOrNull {\n            it?.declaredFields?.any { f ->\n                f.isPublic && f.isNotStatic && f.isNotFinal\n            } == true\n        } ?: throw ClassNotFoundException()\n        val actionItemViewDataField =\n            FieldFinder.fromClass(shareTweetItemAdapterClass).filterPublic().filterNonStatic()\n                .filterNonFinal().first()\n\n        shareTweetOnClickListenerClassName = shareTweetOnClickListenerClass.name\n        shareTweetItemAdapterFieldName = shareTweetItemAdapterField.name\n        actionItemViewDataFieldName = actionItemViewDataField.name\n\n        // protected tweet share onClick\n        val protectedShareTweetItemAdapterClass = dexKit.findMethodUsingOpPrefixSeq {\n            opSeq = intArrayOf(\n                Opcodes.OP_IGET_OBJECT,\n                Opcodes.OP_IF_EQZ,\n                Opcodes.OP_INVOKE_VIRTUAL,\n                Opcodes.OP_MOVE_RESULT,\n                Opcodes.OP_INVOKE_INTERFACE,\n                Opcodes.OP_RETURN_VOID\n            )\n            methodName = "onClick"\n            methodParamTypes = arrayOf(View::class.java.name)\n            methodReturnType = Void.TYPE.name\n        }.first().getMethodInstance(EzXHelper.classLoader).declaringClass\n        val protectedShareTweetItemAdapterClassTitleField =\n            FieldFinder.fromClass(protectedShareTweetItemAdapterClass)\n                .filterByType(TextView::class.java).first()\n\n        // protected tweet share onClick\n        protectedShareTweetItemAdapterClassName = protectedShareTweetItemAdapterClass.name\n        protectedShareTweetItemAdapterClassTitleFieldName =\n            protectedShareTweetItemAdapterClassTitleField.name\n\n        // share menu\n        val shareMenuClass = dexKit.findMethodUsingString {\n            usingString = "^sandbox://tweetview?id=$"\n            methodReturnType = Void.TYPE.name\n        }.first().declaringClassName.let {\n            loadClass(it)\n        }\n        val shareMenuMethod = MethodFinder.fromClass(shareMenuClass).filterByReturnType(Void.TYPE)\n            .filterByParamTypes { it.size == 4 && it[0] == String::class.java && it[1] == String::class.java }\n            .first()\n        val tweetResultClass = dexKit.findMethodUsingOpPrefixSeq {\n            methodName = "<init>"\n            methodReturnType = Void.TYPE.name\n            opSeq = intArrayOf(\n                Opcodes.OP_INVOKE_DIRECT,\n                Opcodes.OP_IGET_WIDE,\n                Opcodes.OP_IPUT_WIDE,\n                Opcodes.OP_IGET_OBJECT,\n                Opcodes.OP_IPUT_OBJECT,\n                Opcodes.OP_IGET_WIDE,\n                Opcodes.OP_IPUT_WIDE,\n                Opcodes.OP_IGET_WIDE,\n                Opcodes.OP_IPUT_WIDE,\n                Opcodes.OP_IGET_WIDE,\n                Opcodes.OP_IPUT_WIDE,\n                Opcodes.OP_IGET_OBJECT,\n                Opcodes.OP_IPUT_OBJECT,\n            )\n        }.first().getConstructorInstance(EzXHelper.classLoader).declaringClass\n        val tweetResultField =\n            FieldFinder.fromClass(shareMenuMethod.parameterTypes[2]).filterByType(tweetResultClass)\n                .first()\n        val tweetIdField =\n            tweetResultField.type.declaredFields.first { it.type == Long::class.java }\n        val resultField = tweetResultField.type.declaredFields.groupBy { it.type }\n            .filter { it.value.size == 2 && it.key.declaredFields.size == 3 }.map { it.value[1] }[0]\n            ?: throw NoSuchFieldError()\n        val legacyField =\n            resultField.type.declaredFields.filter { it.isNotStatic }.maxByOrNull { it.name }\n                ?: throw NoSuchFieldError()\n        val extendedEntitiesField =\n            legacyField.type.declaredFields.filter { it.isNotStatic }.maxByOrNull { it.name }\n                ?: throw NoSuchFieldError()\n        val mediaField = FieldFinder.fromClass(extendedEntitiesField.type.superclass)\n            .filterByType(List::class.java).first()\n\n        val mediaTypeEnumClass = dexKit.findMethodUsingString {\n            usingString = "^MODEL3D$"\n            methodName = "<clinit>"\n            methodReturnType = Void.TYPE.name\n        }.firstOrNull()?.let { loadClass(it.declaringClassName) } ?: throw ClassNotFoundException()\n        val perMediaClass = loadClass(mediaTypeEnumClass.name.split("$")[0])\n        val mediaTypeField =\n            perMediaClass.declaredFields.firstOrNull { it.type == mediaTypeEnumClass }\n                ?: throw NoSuchFieldError()\n        val mediaUrlHttpsField =\n            FieldFinder.fromClass(perMediaClass).filterNonStatic().filterByType(String::class.java)\n                .first()\n        val mediaInfoField = FieldFinder.fromClass(perMediaClass).filter {\n            type.declaredFields.size == 4 && type.declaredFields.filter { f2 -> f2.type == Float::class.java }.size == 2 && type.declaredFields.filter { f2 -> f2.type == List::class.java }.size == 1\n        }.first()\n        val variantsField =\n            FieldFinder.fromClass(mediaInfoField.type).filterByType(List::class.java).first()\n\n        shareMenuClassName = shareMenuClass.name\n        shareMenuMethodName = shareMenuMethod.name\n\n        tweetResultFieldName = tweetResultField.name\n        tweetIdFieldName = tweetIdField.name\n        resultFieldName = resultField.name\n        legacyFieldName = legacyField.name\n        extendedEntitiesFieldName = extendedEntitiesField.name\n        mediaFieldName = mediaField.name\n        mediaTypeFieldName = mediaTypeField.name\n        mediaUrlHttpsFieldName = mediaUrlHttpsField.name\n        mediaInfoFieldName = mediaInfoField.name\n        variantsFieldName = variantsField.name\n    }\n\n    private fun loadHookInfo() {\n        val hookDownloadLastUpdate = modulePrefs.getLong("hook_download_last_update", 0)\n\n        Log.d("hookDownloadLastUpdate: $hookDownloadLastUpdate, hostAppLastUpdate: $hostAppLastUpdate, moduleLastModify: $moduleLastModify")\n\n        val timeStart = System.currentTimeMillis()\n\n        if (hookDownloadLastUpdate > hostAppLastUpdate && hookDownloadLastUpdate > moduleLastModify) {\n            loadCachedHookInfo()\n            Log.d("Download Hook load time: ${System.currentTimeMillis() - timeStart} ms")\n        } else {\n            loadDexKit()\n            searchHook()\n            Log.d("Download Hook search time: ${System.currentTimeMillis() - timeStart} ms")\n            saveHookInfo()\n            modulePrefs.putLong("hook_download_last_update", System.currentTimeMillis())\n\n        }\n    }\n}\n'