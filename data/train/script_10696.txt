b'package icu.nullptr.twifucker.hook\n\nimport android.app.Activity\nimport android.content.Intent\nimport android.net.Uri\nimport android.os.Bundle\nimport com.github.kyuubiran.ezxhelper.ClassUtils.loadClass\nimport com.github.kyuubiran.ezxhelper.EzXHelper\nimport com.github.kyuubiran.ezxhelper.HookFactory.`-Static`.createHook\nimport com.github.kyuubiran.ezxhelper.Log\nimport com.github.kyuubiran.ezxhelper.finders.MethodFinder\nimport de.robv.android.xposed.XposedHelpers\nimport icu.nullptr.twifucker.beforeMeasure\nimport icu.nullptr.twifucker.exceptions.CachedHookNotFound\nimport icu.nullptr.twifucker.hook.HookEntry.Companion.dexKit\nimport icu.nullptr.twifucker.hook.HookEntry.Companion.loadDexKit\nimport icu.nullptr.twifucker.hostAppLastUpdate\nimport icu.nullptr.twifucker.hostPrefs\nimport icu.nullptr.twifucker.moduleLastModify\nimport icu.nullptr.twifucker.modulePrefs\n\nobject CustomTabsHook : BaseHook() {\n    override val name: String\n        get() = "CustomTabsHook"\n\n    private const val HOOK_CUSTOM_TABS_CLASS = "hook_custom_tabs_class"\n    private const val HOOK_CUSTOM_TABS_GET_METHOD = "hook_custom_tabs_get_method"\n    private const val HOOK_CUSTOM_TABS_LAUNCH_URL_METHOD = "hook_custom_tabs_launch_url_method"\n\n    private val DOMAIN_WHITELIST_SUFFIX = listOf("pscp.tv", "periscope.tv", "twitter.com", "t.co")\n    private lateinit var customTabsClassName: String\n    private lateinit var customTabsGetMethodName: String\n    private lateinit var customTabsLaunchUrlMethodName: String\n\n    override fun init() {\n        if (!modulePrefs.getBoolean("disable_url_redirect", false)) return\n\n        try {\n            loadHookInfo()\n        } catch (t: Throwable) {\n            Log.e(t)\n            return\n        }\n\n        MethodFinder.fromClass(Activity::class.java).filterByName("startActivity")\n            .filterByParamTypes {\n                it.size == 2 && it[0] == Intent::class.java && it[1] == Bundle::class.java\n            }.first().createHook {\n                beforeMeasure(name) { param ->\n                    val activity = param.thisObject as Activity\n                    val intent = param.args[0] as Intent\n\n                    if (intent.categories == null || (intent.action != Intent.ACTION_VIEW && intent.categories != null && !intent.categories.contains(\n                            Intent.CATEGORY_BROWSABLE\n                        ))\n                    ) {\n                        return@beforeMeasure\n                    }\n\n                    val isInAppBrowserEnabled = hostPrefs.getBoolean("in_app_browser", true)\n                    val data = intent.dataString\n                    val uri = Uri.parse(data)\n                    val host = uri.host\n\n                    if ((host == null) || DOMAIN_WHITELIST_SUFFIX.any { host.endsWith(it) }) {\n                        return@beforeMeasure\n                    }\n\n                    val customTabsClass = loadClass(customTabsClassName)\n                    val customTabsObj =\n                        XposedHelpers.callStaticMethod(customTabsClass, customTabsGetMethodName)\n\n                    // skip original method\n                    param.result = null\n\n                    if (isInAppBrowserEnabled) {\n                        XposedHelpers.callMethod(\n                            customTabsObj,\n                            customTabsLaunchUrlMethodName,\n                            activity,\n                            data,\n                            null,\n                            false,\n                            true,\n                            null\n                        )\n                    } else {\n                        val newIntent = Intent(Intent.ACTION_VIEW, uri)\n                        activity.startActivity(newIntent)\n                    }\n                }\n            }\n    }\n\n    private fun loadCachedHookInfo() {\n        customTabsClassName =\n            modulePrefs.getString(HOOK_CUSTOM_TABS_CLASS, null) ?: throw CachedHookNotFound()\n        customTabsGetMethodName =\n            modulePrefs.getString(HOOK_CUSTOM_TABS_GET_METHOD, null) ?: throw CachedHookNotFound()\n        customTabsLaunchUrlMethodName =\n            modulePrefs.getString(HOOK_CUSTOM_TABS_LAUNCH_URL_METHOD, null)\n                ?: throw CachedHookNotFound()\n    }\n\n    private fun saveHookInfo() {\n        modulePrefs.let {\n            it.putString(HOOK_CUSTOM_TABS_CLASS, customTabsClassName)\n            it.putString(HOOK_CUSTOM_TABS_GET_METHOD, customTabsGetMethodName)\n            it.putString(HOOK_CUSTOM_TABS_LAUNCH_URL_METHOD, customTabsLaunchUrlMethodName)\n        }\n    }\n\n    private fun searchHook() {\n\n        val customTabsClass = dexKit.findMethodUsingString {\n            usingString = "^android.support.customtabs.action.CustomTabsService$"\n            methodReturnType = Void.TYPE.name\n        }.firstOrNull()?.getMemberInstance(EzXHelper.classLoader)?.declaringClass\n            ?: throw ClassNotFoundException()\n\n\n        val customTabsGetMethod =\n            MethodFinder.fromClass(customTabsClass).filterStatic().filterByParamCount(0)\n                .filterByReturnType(customTabsClass).first()\n        val customTabsLaunchUrlMethod =\n            MethodFinder.fromClass(customTabsClass).filterNonStatic().filterPublic().filterFinal()\n                .filterByParamCount(6)\n                .filterByParamTypes { it[0] == Activity::class.java && it[1] == String::class.java && it[3] == Boolean::class.java && it[4] == Boolean::class.java && it[5] == String::class.java }\n                .first()\n\n        customTabsClassName = customTabsClass.name\n        customTabsGetMethodName = customTabsGetMethod.name\n        customTabsLaunchUrlMethodName = customTabsLaunchUrlMethod.name\n    }\n\n    private fun loadHookInfo() {\n        val hookCustomTabsLastUpdate = modulePrefs.getLong("hook_custom_tabs_last_update", 0)\n\n        Log.d("hookCustomTabsLastUpdate: $hookCustomTabsLastUpdate, hostAppLastUpdate: $hostAppLastUpdate, moduleLastModify: $moduleLastModify")\n\n        val timeStart = System.currentTimeMillis()\n\n        if (hookCustomTabsLastUpdate > hostAppLastUpdate && hookCustomTabsLastUpdate > moduleLastModify) {\n            loadCachedHookInfo()\n            Log.d("Custom Tabs Hook load time: ${System.currentTimeMillis() - timeStart} ms")\n        } else {\n            loadDexKit()\n            searchHook()\n            Log.d("Custom Tabs Hook search time: ${System.currentTimeMillis() - timeStart} ms")\n            saveHookInfo()\n            modulePrefs.putLong("hook_custom_tabs_last_update", System.currentTimeMillis())\n\n        }\n    }\n}'