b'{-# LANGUAGE MultiParamTypeClasses #-}\n\n-- ! BUILD_COMMAND: runhaskell --ghc-arg=-fglasgow-exts -XStandaloneDeriving -XTypeSynonymInstances -XDeriveGeneric -XGADTs -XOverloadedStrings -XFlexibleContexts -XFlexibleInstances -XTypeFamilies -XTypeApplications -XAllowAmbiguousTypes -XPartialTypeSignatures -fno-warn-partial-type-signatures\n-- ! BUILD_DIR: beam-sqlite/examples/\n-- ! FORMAT: sql\nmodule Main where\n\nimport Database.Beam hiding (withDatabaseDebug)\nimport qualified Database.Beam as Beam\nimport Database.Beam.Sqlite hiding (runBeamSqliteDebug)\nimport qualified Database.Beam.Sqlite as Sqlite\nimport Database.SQLite.Simple\n\nimport Data.Text (Text)\nimport Data.Int\n\nimport Control.Monad\n\nimport Data.IORef\n\ndata UserT f\n    = User\n    { _userEmail     :: Columnar f Text\n    , _userFirstName :: Columnar f Text\n    , _userLastName  :: Columnar f Text\n    , _userPassword  :: Columnar f Text }\n    deriving Generic\ntype User = UserT Identity\nderiving instance Show User\nderiving instance Eq User\n\ninstance Beamable UserT\ninstance Table UserT where\n    data PrimaryKey UserT f = UserId (Columnar f Text) deriving Generic\n    primaryKey = UserId . _userEmail\ninstance Beamable (PrimaryKey UserT)\n\ndata ShoppingCartDb f = ShoppingCartDb\n                      { _shoppingCartUsers :: f (TableEntity UserT) }\n                        deriving Generic\n\ninstance Database be ShoppingCartDb\n\nshoppingCartDb :: DatabaseSettings Sqlite ShoppingCartDb\nshoppingCartDb = defaultDbSettings\n\nmain :: IO ()\nmain =\n  do conn <- open ":memory:"\n     execute_ conn "CREATE TABLE cart_users (email VARCHAR NOT NULL, first_name VARCHAR NOT NULL, last_name VARCHAR NOT NULL, password VARCHAR NOT NULL, PRIMARY KEY( email ));"\n\n     runBeamSqlite conn $ runInsert $\n       insert (_shoppingCartUsers shoppingCartDb) $\n       insertValues [ User "james@example.com" "James" "Smith" "b4cc344d25a2efe540adbf2678e2304c" {- james -}\n                    , User "betty@example.com" "Betty" "Jones" "82b054bd83ffad9b6cf8bdb98ce3cc2f" {- betty -}\n                    , User "sam@example.com" "Sam" "Taylor" "332532dcfaa1cbf61e2a266bd723612c" {- sam -}\n                    ,  User "james@pallo.com" "James" "Pallo" "b4cc344d25a2efe540adbf2678e2304c" {- james -}\n                    , User "betty@sims.com" "Betty" "Sims" "82b054bd83ffad9b6cf8bdb98ce3cc2f" {- betty -}\n                    , User "james@oreily.com" "James" "O\'Reily" "b4cc344d25a2efe540adbf2678e2304c" {- james -}\n                    , User "sam@sophitz.com" "Sam" "Sophitz" "332532dcfaa1cbf61e2a266bd723612c" {- sam -}\n                    , User "sam@jely.com" "Sam" "Jely" "332532dcfaa1cbf61e2a266bd723612c" {- sam -} ]\n\n     let runBeamSqliteDebug _ = Sqlite.runBeamSqliteDebug putStrLn\n\n     (do let putStrLn :: String -> IO ()\n             putStrLn _ = pure ()\n\n         BEAM_PLACEHOLDER\n       )\n'