b'/*\n * Copyright (C) 2015 Naman Dwivedi\n *\n * Licensed under the GNU General Public License v3\n *\n * This is free software: you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n */\n\npackage com.naman14.timber.fragments;\n\nimport android.os.AsyncTask;\nimport android.os.Bundle;\nimport android.preference.PreferenceManager;\nimport androidx.fragment.app.Fragment;\nimport androidx.appcompat.app.ActionBar;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.recyclerview.widget.LinearLayoutManager;\nimport androidx.appcompat.widget.Toolbar;\nimport android.util.Log;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\n\nimport com.afollestad.appthemeengine.ATE;\nimport com.naman14.timber.MusicPlayer;\nimport com.naman14.timber.R;\nimport com.naman14.timber.activities.BaseActivity;\nimport com.naman14.timber.adapters.PlayingQueueAdapter;\nimport com.naman14.timber.dataloaders.QueueLoader;\nimport com.naman14.timber.listeners.MusicStateListener;\nimport com.naman14.timber.models.Song;\nimport com.naman14.timber.widgets.BaseRecyclerView;\nimport com.naman14.timber.widgets.DragSortRecycler;\n\npublic class QueueFragment extends Fragment implements MusicStateListener {\n\n    private PlayingQueueAdapter mAdapter;\n    private BaseRecyclerView recyclerView;\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        View rootView = inflater.inflate(\n                R.layout.fragment_queue, container, false);\n\n        Toolbar toolbar = rootView.findViewById(R.id.toolbar);\n        ((AppCompatActivity) getActivity()).setSupportActionBar(toolbar);\n\n        final ActionBar ab = ((AppCompatActivity) getActivity()).getSupportActionBar();\n        ab.setHomeAsUpIndicator(R.drawable.ic_menu);\n        ab.setDisplayHomeAsUpEnabled(true);\n        ab.setTitle(R.string.playing_queue);\n\n        recyclerView = rootView.findViewById(R.id.recyclerview);\n        recyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));\n        recyclerView.setItemAnimator(null);\n        recyclerView.setEmptyView(getActivity(), rootView.findViewById(R.id.list_empty), "No songs in queue");\n\n        new loadQueueSongs().execute("");\n        ((BaseActivity) getActivity()).setMusicStateListenerListener(this);\n\n        return rootView;\n    }\n\n    @Override\n    public void onViewCreated(View view, Bundle savedInstanceState) {\n        super.onViewCreated(view, savedInstanceState);\n        if (PreferenceManager.getDefaultSharedPreferences(getActivity()).getBoolean("dark_theme", false)) {\n            ATE.apply(this, "dark_theme");\n        } else {\n            ATE.apply(this, "light_theme");\n        }\n    }\n\n    public void restartLoader() {\n\n    }\n\n    public void onPlaylistChanged() {\n\n    }\n\n    public void onMetaChanged() {\n        if (mAdapter != null)\n            mAdapter.notifyDataSetChanged();\n    }\n\n    private class loadQueueSongs extends AsyncTask<String, Void, String> {\n\n        @Override\n        protected String doInBackground(String... params) {\n            mAdapter = new PlayingQueueAdapter(getActivity(), QueueLoader.getQueueSongs(getActivity()));\n            return "Executed";\n        }\n\n        @Override\n        protected void onPostExecute(String result) {\n            recyclerView.setAdapter(mAdapter);\n            DragSortRecycler dragSortRecycler = new DragSortRecycler();\n            dragSortRecycler.setViewHandleId(R.id.reorder);\n\n            dragSortRecycler.setOnItemMovedListener(new DragSortRecycler.OnItemMovedListener() {\n                @Override\n                public void onItemMoved(int from, int to) {\n                    Log.d("queue", "onItemMoved " + from + " to " + to);\n                    Song song = mAdapter.getSongAt(from);\n                    mAdapter.removeSongAt(from);\n                    mAdapter.addSongTo(to, song);\n                    mAdapter.notifyDataSetChanged();\n                    MusicPlayer.moveQueueItem(from, to);\n                }\n            });\n\n            recyclerView.addItemDecoration(dragSortRecycler);\n            recyclerView.addOnItemTouchListener(dragSortRecycler);\n            recyclerView.addOnScrollListener(dragSortRecycler.getScrollListener());\n\n            recyclerView.getLayoutManager().scrollToPosition(mAdapter.currentlyPlayingPosition);\n\n        }\n\n        @Override\n        protected void onPreExecute() {\n        }\n    }\n\n}\n\n'