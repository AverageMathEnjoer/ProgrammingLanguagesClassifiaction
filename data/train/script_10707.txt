b"-- |\n-- Copyright  : (c) Ivan Perez and Manuel Baerenz, 2016\n-- License    : BSD3\n-- Maintainer : ivan.perez@keera.co.uk\n--\n-- In this module, 'MSF's in a monad supporting random number generation (i.e.\n-- having the 'RandT' layer in its stack) can be run. Running means supplying\n-- an initial random number generator, where the update of the generator at\n-- every random number generation is already taken care of.\n--\n-- Under the hood, 'RandT' is basically just 'StateT', with the current random\n-- number generator as mutable state.\nmodule Control.Monad.Trans.MSF.Random\n    ( runRandS\n    , evalRandS\n    , getRandomS\n    , getRandomsS\n    , getRandomRS\n    , getRandomRS_\n    , getRandomsRS\n    , getRandomsRS_\n    )\n  where\n\n-- External imports\nimport Control.Arrow        (arr, (>>>))\nimport Control.Monad.Random (MonadRandom, RandT, Random, RandomGen, getRandom,\n                             getRandomR, getRandomRs, getRandoms, runRandT)\n\n-- Internal imports\nimport Control.Monad.Trans.MSF.State (StateT (..), runStateS_)\nimport Data.MonadicStreamFunction    (MSF, arrM, constM, morphS)\n\n-- | Run an 'MSF' in the 'RandT' random number monad transformer by supplying\n-- an initial random generator. Updates the generator every step.\nrunRandS :: (RandomGen g, Functor m, Monad m)\n         => MSF (RandT g m) a b\n         -> g -- ^ The initial random number generator.\n         -> MSF m a (g, b)\nrunRandS = runStateS_ . morphS (StateT . runRandT)\n\n-- | Evaluate an 'MSF' in the 'RandT' transformer, i.e. extract possibly random\n-- values by supplying an initial random generator. Updates the generator every\n-- step but discharges the generator.\nevalRandS :: (RandomGen g, Functor m, Monad m)\n          => MSF (RandT g m) a b -> g -> MSF m a b\nevalRandS msf g = runRandS msf g >>> arr snd\n\n-- | Create a stream of random values.\ngetRandomS :: (MonadRandom m, Random b) => MSF m a b\ngetRandomS = constM getRandom\n\n-- | Create a stream of lists of random values.\ngetRandomsS :: (MonadRandom m, Random b) => MSF m a [b]\ngetRandomsS = constM getRandoms\n\n-- | Create a stream of random values in a given fixed range.\ngetRandomRS :: (MonadRandom m, Random b) => (b, b) -> MSF m a b\ngetRandomRS range = constM $ getRandomR range\n\n-- | Create a stream of random values in a given range, where the range is\n-- specified on every tick.\ngetRandomRS_ :: (MonadRandom m, Random b) => MSF m (b, b) b\ngetRandomRS_  = arrM getRandomR\n\n-- | Create a stream of lists of random values in a given fixed range.\ngetRandomsRS :: (MonadRandom m, Random b) => (b, b) -> MSF m a [b]\ngetRandomsRS range = constM $ getRandomRs range\n\n-- | Create a stream of lists of random values in a given range, where the\n-- range is specified on every tick.\ngetRandomsRS_ :: (MonadRandom m, Random b) => MSF m (b, b) [b]\ngetRandomsRS_ = arrM getRandomRs\n"