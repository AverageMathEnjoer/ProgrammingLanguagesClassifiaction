b'// Copyright (c) 2022-2023 Manuel Schneider\n\n#include <QApplication>\n#include <QSettings>\n#include "trayicon.h"\n#include "albert/util/util.h"\n#include "albert/albert.h"\n#include "xdg/iconlookup.h"\n#include "albert/logging.h"\n\nnamespace {\n    const char* CFG_SHOWTRAY = "showTray";\n    const bool  DEF_SHOWTRAY = true;\n}\n\nTrayIcon::TrayIcon() {\n\n    if (!supportsMessages())\n        WARN << "Desktop notifications are not supported on this system";\n\n    // https://bugreports.qt.io/browse/QTBUG-53550\n    QPixmap pm = XDG::IconLookup::iconPath("albert-tray");\n    if (pm.isNull())\n        pm = QPixmap(":app_tray_icon");\n    QIcon icon(pm);\n    icon.setIsMask(true);\n    setIcon(icon);\n\n    setVisible(QSettings(qApp->applicationName()).value(CFG_SHOWTRAY, DEF_SHOWTRAY).toBool());\n\n//    QObject::connect(this, &TrayIcon::activated, [](QSystemTrayIcon::ActivationReason reason){\n//        if( reason == QSystemTrayIcon::ActivationReason::Trigger)\n//            albert::toggle();\n//    });\n\n    auto *action = menu.addAction("Show/Hide");\n    QObject::connect(action, &QAction::triggered, [](){ albert::toggle(); });\n\n    action = menu.addAction("Settings");\n    QObject::connect(action, &QAction::triggered, [](){ albert::showSettings(); });\n\n    action = menu.addAction("Open website");\n    QObject::connect(action, &QAction::triggered, [](){ albert::openWebsite(); });\n\n    menu.addSeparator();\n\n    action = menu.addAction("Restart");\n    QObject::connect(action, &QAction::triggered, [](){ albert::restart(); });\n\n    action = menu.addAction("Quit");\n    QObject::connect(action, &QAction::triggered, [](){ albert::quit(); });\n\n    setContextMenu(&menu);\n}\n\nvoid TrayIcon::setVisible(bool enable) {\n    QSettings(qApp->applicationName()).setValue(CFG_SHOWTRAY, enable);\n    QSystemTrayIcon::setVisible(enable);\n}\n\n'