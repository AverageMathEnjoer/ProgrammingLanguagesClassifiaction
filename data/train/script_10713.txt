b'{-# LANGUAGE DeriveDataTypeable #-}\n\n-- |\n-- Module      : Hoodle.ProgType\n-- Copyright   : (c) 2011-2013 Ian-Woo Kim\n--\n-- License     : BSD3\n-- Maintainer  : Ian-Woo Kim <ianwookim@gmail.com>\n-- Stability   : experimental\n-- Portability : GHC\nmodule Hoodle.ProgType where\n\nimport Data.Version (showVersion)\n--\nimport Paths_hoodle (version)\nimport System.Console.CmdArgs\n  ( Data,\n    Typeable,\n    args,\n    auto,\n    def,\n    explicit,\n    help,\n    helpArg,\n    modes,\n    name,\n    program,\n    summary,\n    typ,\n    versionArg,\n    (&=),\n  )\n\n-- TODO: rename xojfile and Test. use optparse-applicative.\ndata Hoodle = Test\n  { xojfile :: Maybe FilePath\n  }\n  deriving (Show, Data, Typeable)\n\nprogramName :: String\nprogramName = "Hoodle"\n\nprogramVersion :: String\nprogramVersion = showVersion version\n\nprogramInfo :: String\nprogramInfo = programName ++ " version " ++ programVersion\n\nprogramAbout :: String\nprogramAbout = "A pen notetaking program written in haskell"\n\nprogramCopyright :: String\nprogramCopyright = "(C) Ian-Woo Kim 2011-2013"\n\ntest :: Hoodle\ntest =\n  Test\n    { xojfile = def &= typ "FILENAME" &= args\n    }\n    &= auto\n\nmode :: Hoodle\nmode =\n  modes [test]\n    &= versionArg [explicit, name "version", name "V", summary programInfo]\n    &= summary (programInfo ++ ", " ++ programCopyright)\n    &= help programAbout\n    &= helpArg [explicit, name "help", name "h"]\n    &= program programName\n'