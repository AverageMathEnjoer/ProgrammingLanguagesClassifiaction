b'package com.rd.animation.type;\n\nimport android.animation.Animator;\nimport android.animation.AnimatorSet;\nimport android.animation.ValueAnimator;\nimport androidx.annotation.NonNull;\nimport android.view.animation.AccelerateDecelerateInterpolator;\nimport com.rd.animation.controller.ValueController;\nimport com.rd.animation.data.type.DropAnimationValue;\n\npublic class DropAnimation extends BaseAnimation<AnimatorSet> {\n\n    private int widthStart;\n    private int widthEnd;\n    private int heightStart;\n    private int heightEnd;\n    private int radius;\n\n    private enum AnimationType {Width, Height, Radius}\n\n    private DropAnimationValue value;\n\n    public DropAnimation(@NonNull ValueController.UpdateListener listener) {\n        super(listener);\n        value = new DropAnimationValue();\n    }\n\n    @NonNull\n    @Override\n    public AnimatorSet createAnimator() {\n        AnimatorSet animator = new AnimatorSet();\n        animator.setInterpolator(new AccelerateDecelerateInterpolator());\n\n        return animator;\n    }\n\n    @Override\n    public DropAnimation progress(float progress) {\n        if (animator != null) {\n            long playTimeLeft = (long) (progress * animationDuration);\n            boolean isReverse = false;\n\n            for (Animator anim : animator.getChildAnimations()) {\n                ValueAnimator animator = (ValueAnimator) anim;\n                long animDuration = animator.getDuration();\n                long currPlayTime = playTimeLeft;\n\n                if (isReverse) {\n                    currPlayTime -= animDuration;\n                }\n\n                if (currPlayTime < 0) {\n                    continue;\n\n                } else if (currPlayTime >= animDuration) {\n                    currPlayTime = animDuration;\n                }\n\n                if (animator.getValues() != null && animator.getValues().length > 0) {\n                    animator.setCurrentPlayTime(currPlayTime);\n                }\n\n                if (!isReverse && animDuration >= animationDuration) {\n                    isReverse = true;\n                }\n            }\n        }\n\n        return this;\n    }\n\n    @Override\n    public DropAnimation duration(long duration) {\n        super.duration(duration);\n        return this;\n    }\n\n    @SuppressWarnings("UnnecessaryLocalVariable")\n    public DropAnimation with(int widthStart, int widthEnd, int heightStart, int heightEnd, int radius) {\n        if (hasChanges(widthStart, widthEnd, heightStart, heightEnd, radius)) {\n            animator = createAnimator();\n\n            this.widthStart = widthStart;\n            this.widthEnd = widthEnd;\n            this.heightStart = heightStart;\n            this.heightEnd = heightEnd;\n            this.radius = radius;\n\n            int fromRadius = radius;\n            int toRadius = (int) (radius / 1.5);\n            long halfDuration = animationDuration / 2;\n\n            ValueAnimator widthAnimator = createValueAnimation(widthStart, widthEnd, animationDuration, AnimationType.Width);\n            ValueAnimator heightForwardAnimator = createValueAnimation(heightStart, heightEnd, halfDuration, AnimationType.Height);\n            ValueAnimator radiusForwardAnimator = createValueAnimation(fromRadius, toRadius, halfDuration, AnimationType.Radius);\n\n            ValueAnimator heightBackwardAnimator = createValueAnimation(heightEnd, heightStart, halfDuration, AnimationType.Height);\n            ValueAnimator radiusBackwardAnimator = createValueAnimation(toRadius, fromRadius, halfDuration, AnimationType.Radius);\n\n            animator.play(heightForwardAnimator)\n                    .with(radiusForwardAnimator)\n                    .with(widthAnimator)\n                    .before(heightBackwardAnimator)\n                    .before(radiusBackwardAnimator);\n        }\n\n        return this;\n    }\n\n    private ValueAnimator createValueAnimation(int fromValue, int toValue, long duration, final AnimationType type) {\n        ValueAnimator anim = ValueAnimator.ofInt(fromValue, toValue);\n        anim.setInterpolator(new AccelerateDecelerateInterpolator());\n        anim.setDuration(duration);\n        anim.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n            @Override\n            public void onAnimationUpdate(ValueAnimator animation) {\n                onAnimatorUpdate(animation, type);\n            }\n        });\n\n        return anim;\n    }\n\n    private void onAnimatorUpdate(@NonNull ValueAnimator animation, @NonNull AnimationType type) {\n        int frameValue = (int) animation.getAnimatedValue();\n\n        switch (type) {\n            case Width:\n                value.setWidth(frameValue);\n                break;\n\n            case Height:\n                value.setHeight(frameValue);\n                break;\n\n            case Radius:\n                value.setRadius(frameValue);\n                break;\n        }\n\n        if (listener != null) {\n            listener.onValueUpdated(value);\n        }\n    }\n\n    @SuppressWarnings("RedundantIfStatement")\n    private boolean hasChanges(int widthStart, int widthEnd, int heightStart, int heightEnd, int radius) {\n        if (this.widthStart != widthStart) {\n            return true;\n        }\n\n        if (this.widthEnd != widthEnd) {\n            return true;\n        }\n\n        if (this.heightStart != heightStart) {\n            return true;\n        }\n\n        if (this.heightEnd != heightEnd) {\n            return true;\n        }\n\n        if (this.radius != radius) {\n            return true;\n        }\n\n        return false;\n    }\n\n}\n'