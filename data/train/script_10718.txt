b"{-# LANGUAGE\n    DeriveDataTypeable\n  , DeriveGeneric\n  #-}\nmodule Type.User where\n\nimport Data.Aeson\nimport Data.JSON.Schema\nimport Data.Text (Text)\nimport Data.Typeable\nimport GHC.Generics\nimport Generics.Generic.Aeson\nimport Generics.XmlPickler\nimport Text.XML.HXT.Arrow.Pickle\n\ntype Name = Text\ntype Password = Text\n\ndata User = User\n  { name     :: Name\n  , password :: Password\n  } deriving (Eq, Generic, Ord, Show, Typeable)\n\ninstance XmlPickler User where xpickle   = gxpickle\ninstance JSONSchema User where schema    = gSchema\ninstance FromJSON   User where parseJSON = gparseJson\ninstance ToJSON     User where toJSON    = gtoJson\n-- We might want to skip the ToJSON instance so we don't accidentally\n-- serve passwords, but this type is accepted on signup which means a\n-- haskell client needs to be able to serialize it.\n"