b'/*\n * Copyright (C) 2015 Naman Dwivedi\n *\n * Licensed under the GNU General Public License v3\n *\n * This is free software: you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n */\n\npackage com.naman14.timber.activities;\n\nimport android.Manifest;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.preference.PreferenceManager;\nimport com.google.android.material.navigation.NavigationView;\nimport com.google.android.material.snackbar.Snackbar;\nimport androidx.fragment.app.Fragment;\nimport androidx.fragment.app.FragmentManager;\nimport androidx.fragment.app.FragmentTransaction;\nimport androidx.core.view.GravityCompat;\nimport androidx.drawerlayout.widget.DrawerLayout;\nimport android.view.Gravity;\nimport android.view.LayoutInflater;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.widget.FrameLayout;\nimport android.widget.ImageView;\nimport android.widget.TextView;\n\nimport com.afollestad.appthemeengine.customizers.ATEActivityThemeCustomizer;\nimport com.anjlab.android.iab.v3.BillingProcessor;\nimport com.google.android.gms.cast.framework.media.widget.ExpandedControllerActivity;\nimport com.naman14.timber.MusicPlayer;\nimport com.naman14.timber.R;\nimport com.naman14.timber.cast.ExpandedControlsActivity;\nimport com.naman14.timber.fragments.AlbumDetailFragment;\nimport com.naman14.timber.fragments.ArtistDetailFragment;\nimport com.naman14.timber.fragments.FoldersFragment;\nimport com.naman14.timber.fragments.MainFragment;\nimport com.naman14.timber.fragments.PlaylistFragment;\nimport com.naman14.timber.fragments.QueueFragment;\nimport com.naman14.timber.permissions.Nammu;\nimport com.naman14.timber.permissions.PermissionCallback;\nimport com.naman14.timber.slidinguppanel.SlidingUpPanelLayout;\nimport com.naman14.timber.subfragments.LyricsFragment;\nimport com.naman14.timber.utils.Constants;\nimport com.naman14.timber.utils.Helpers;\nimport com.naman14.timber.utils.NavigationUtils;\nimport com.naman14.timber.utils.TimberUtils;\nimport com.nostra13.universalimageloader.core.DisplayImageOptions;\nimport com.nostra13.universalimageloader.core.ImageLoader;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class MainActivity extends BaseActivity implements ATEActivityThemeCustomizer {\n\n    private SlidingUpPanelLayout panelLayout;\n    private NavigationView navigationView;\n    private TextView songtitle, songartist;\n    private ImageView albumart;\n    private String action;\n    private Map<String, Runnable> navigationMap = new HashMap<String, Runnable>();\n    private Handler navDrawerRunnable = new Handler();\n    private Runnable runnable;\n    private DrawerLayout mDrawerLayout;\n    private boolean isDarkTheme;\n\n    private Runnable navigateLibrary = new Runnable() {\n        public void run() {\n            navigationView.getMenu().findItem(R.id.nav_library).setChecked(true);\n            Fragment fragment = new MainFragment();\n            FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\n            transaction.replace(R.id.fragment_container, fragment).commitAllowingStateLoss();\n\n        }\n    };\n\n    private Runnable navigatePlaylist = new Runnable() {\n        public void run() {\n            navigationView.getMenu().findItem(R.id.nav_playlists).setChecked(true);\n            Fragment fragment = new PlaylistFragment();\n            FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\n            transaction.hide(getSupportFragmentManager().findFragmentById(R.id.fragment_container));\n            transaction.replace(R.id.fragment_container, fragment).commit();\n\n        }\n    };\n\n    private Runnable navigateFolder = new Runnable() {\n        public void run() {\n            navigationView.getMenu().findItem(R.id.nav_folders).setChecked(true);\n            Fragment fragment = new FoldersFragment();\n            FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\n            transaction.hide(getSupportFragmentManager().findFragmentById(R.id.fragment_container));\n            transaction.replace(R.id.fragment_container, fragment).commit();\n\n        }\n    };\n\n    private Runnable navigateQueue = new Runnable() {\n        public void run() {\n            navigationView.getMenu().findItem(R.id.nav_queue).setChecked(true);\n            Fragment fragment = new QueueFragment();\n            FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\n            transaction.hide(getSupportFragmentManager().findFragmentById(R.id.fragment_container));\n            transaction.replace(R.id.fragment_container, fragment).commit();\n\n        }\n    };\n\n    private Runnable navigateAlbum = new Runnable() {\n        public void run() {\n            long albumID = getIntent().getExtras().getLong(Constants.ALBUM_ID);\n            Fragment fragment = AlbumDetailFragment.newInstance(albumID, false, null);\n            FragmentManager fragmentManager = getSupportFragmentManager();\n            fragmentManager.beginTransaction()\n                    .replace(R.id.fragment_container, fragment).commit();\n        }\n    };\n\n    private Runnable navigateArtist = new Runnable() {\n        public void run() {\n            long artistID = getIntent().getExtras().getLong(Constants.ARTIST_ID);\n            Fragment fragment = ArtistDetailFragment.newInstance(artistID, false, null);\n            FragmentManager fragmentManager = getSupportFragmentManager();\n            fragmentManager.beginTransaction()\n                    .replace(R.id.fragment_container, fragment).commit();\n        }\n    };\n\n    private Runnable navigateLyrics = new Runnable() {\n        public void run() {\n            Fragment fragment = new LyricsFragment();\n            FragmentManager fragmentManager = getSupportFragmentManager();\n            fragmentManager.beginTransaction()\n                    .replace(R.id.fragment_container, fragment).commit();\n        }\n    };\n\n    private Runnable navigateNowplaying = new Runnable() {\n        public void run() {\n            navigateLibrary.run();\n            startActivity(new Intent(MainActivity.this, NowPlayingActivity.class));\n        }\n    };\n\n    private final PermissionCallback permissionReadstorageCallback = new PermissionCallback() {\n        @Override\n        public void permissionGranted() {\n            loadEverything();\n        }\n\n        @Override\n        public void permissionRefused() {\n            finish();\n        }\n    };\n\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n\n        action = getIntent().getAction();\n\n        isDarkTheme = PreferenceManager.getDefaultSharedPreferences(this).getBoolean("dark_theme", false);\n\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        navigationMap.put(Constants.NAVIGATE_LIBRARY, navigateLibrary);\n        navigationMap.put(Constants.NAVIGATE_PLAYLIST, navigatePlaylist);\n        navigationMap.put(Constants.NAVIGATE_QUEUE, navigateQueue);\n        navigationMap.put(Constants.NAVIGATE_NOWPLAYING, navigateNowplaying);\n        navigationMap.put(Constants.NAVIGATE_ALBUM, navigateAlbum);\n        navigationMap.put(Constants.NAVIGATE_ARTIST, navigateArtist);\n        navigationMap.put(Constants.NAVIGATE_LYRICS, navigateLyrics);\n\n        mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);\n        panelLayout = (SlidingUpPanelLayout) findViewById(R.id.sliding_layout);\n\n        navigationView = (NavigationView) findViewById(R.id.nav_view);\n        View header = navigationView.inflateHeaderView(R.layout.nav_header);\n\n        albumart = (ImageView) header.findViewById(R.id.album_art);\n        songtitle = (TextView) header.findViewById(R.id.song_title);\n        songartist = (TextView) header.findViewById(R.id.song_artist);\n\n        setPanelSlideListeners(panelLayout);\n\n        navDrawerRunnable.postDelayed(new Runnable() {\n            @Override\n            public void run() {\n                setupDrawerContent(navigationView);\n                setupNavigationIcons(navigationView);\n            }\n        }, 700);\n\n\n        if (TimberUtils.isMarshmallow()) {\n            checkPermissionAndThenLoad();\n            //checkWritePermissions();\n        } else {\n            loadEverything();\n        }\n\n        addBackstackListener();\n\n        if(Intent.ACTION_VIEW.equals(action)) {\n            Handler handler = new Handler();\n            handler.postDelayed(new Runnable() {\n                @Override\n                public void run() {\n                    MusicPlayer.clearQueue();\n                    MusicPlayer.openFile(getIntent().getData().getPath());\n                    MusicPlayer.playOrPause();\n                    navigateNowplaying.run();\n                }\n            }, 350);\n        }\n\n        if (!panelLayout.isPanelHidden() && MusicPlayer.getTrackName() == null ) {\n            panelLayout.hidePanel();\n        }\n\n        if (playServicesAvailable) {\n\n            final FrameLayout.LayoutParams params = new FrameLayout.LayoutParams(\n                    FrameLayout.LayoutParams.WRAP_CONTENT,\n                    FrameLayout.LayoutParams.WRAP_CONTENT);\n            params.gravity = Gravity.BOTTOM;\n\n            FrameLayout contentRoot = findViewById(R.id.content_root);\n            contentRoot.addView(LayoutInflater.from(this)\n                    .inflate(R.layout.fragment_cast_mini_controller, null), params);\n\n            findViewById(R.id.castMiniController).setOnClickListener(new View.OnClickListener() {\n                @Override\n                public void onClick(View view) {\n                    startActivity(new Intent(MainActivity.this, ExpandedControllerActivity.class));\n                }\n            });\n        }\n\n    }\n\n    private void loadEverything() {\n        Runnable navigation = navigationMap.get(action);\n        if (navigation != null) {\n            navigation.run();\n        } else {\n            navigateLibrary.run();\n        }\n\n        new initQuickControls().execute("");\n    }\n\n    private void checkPermissionAndThenLoad() {\n        //check for permission\n        if (Nammu.checkPermission(Manifest.permission.READ_EXTERNAL_STORAGE) && Nammu.checkPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE)) {\n            loadEverything();\n        } else {\n            if (Nammu.shouldShowRequestPermissionRationale(this, Manifest.permission.READ_EXTERNAL_STORAGE)) {\n                Snackbar.make(panelLayout, "Timber will need to read external storage to display songs on your device.",\n                        Snackbar.LENGTH_INDEFINITE)\n                        .setAction("OK", new View.OnClickListener() {\n                            @Override\n                            public void onClick(View view) {\n                                Nammu.askForPermission(MainActivity.this, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE}, permissionReadstorageCallback);\n                            }\n                        }).show();\n            } else {\n                Nammu.askForPermission(this, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE}, permissionReadstorageCallback);\n            }\n        }\n    }\n\n\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        super.onCreateOptionsMenu(menu);\n\n        return true;\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        switch (item.getItemId()) {\n            case android.R.id.home: {\n                if (isNavigatingMain()) {\n                    mDrawerLayout.openDrawer(GravityCompat.START);\n                } else super.onBackPressed();\n                return true;\n            }\n        }\n        return super.onOptionsItemSelected(item);\n    }\n\n    @Override\n    public void onBackPressed() {\n        if (panelLayout.isPanelExpanded()) {\n            panelLayout.collapsePanel();\n        } else if (mDrawerLayout.isDrawerOpen(GravityCompat.START)) {\n            mDrawerLayout.closeDrawer(GravityCompat.START);\n        } else {\n            super.onBackPressed();\n        }\n    }\n\n    private void setupDrawerContent(NavigationView navigationView) {\n        navigationView.setNavigationItemSelectedListener(\n                new NavigationView.OnNavigationItemSelectedListener() {\n                    @Override\n                    public boolean onNavigationItemSelected(final MenuItem menuItem) {\n                        updatePosition(menuItem);\n                        return true;\n\n                    }\n                });\n    }\n\n    private void setupNavigationIcons(NavigationView navigationView) {\n\n        //material-icon-lib currently doesn\'t work with navigationview of design support library 22.2.0+\n        //set icons manually for now\n        //https://github.com/code-mc/material-icon-lib/issues/15\n\n        if (!isDarkTheme) {\n            navigationView.getMenu().findItem(R.id.nav_library).setIcon(R.drawable.library_music);\n            navigationView.getMenu().findItem(R.id.nav_playlists).setIcon(R.drawable.playlist_play);\n            navigationView.getMenu().findItem(R.id.nav_queue).setIcon(R.drawable.music_note);\n            navigationView.getMenu().findItem(R.id.nav_folders).setIcon(R.drawable.ic_folder_open_black_24dp);\n            navigationView.getMenu().findItem(R.id.nav_nowplaying).setIcon(R.drawable.bookmark_music);\n            navigationView.getMenu().findItem(R.id.nav_settings).setIcon(R.drawable.settings);\n            navigationView.getMenu().findItem(R.id.nav_about).setIcon(R.drawable.information);\n            navigationView.getMenu().findItem(R.id.nav_donate).setIcon(R.drawable.payment_black);\n        } else {\n            navigationView.getMenu().findItem(R.id.nav_library).setIcon(R.drawable.library_music_white);\n            navigationView.getMenu().findItem(R.id.nav_playlists).setIcon(R.drawable.playlist_play_white);\n            navigationView.getMenu().findItem(R.id.nav_queue).setIcon(R.drawable.music_note_white);\n            navigationView.getMenu().findItem(R.id.nav_folders).setIcon(R.drawable.ic_folder_open_white_24dp);\n            navigationView.getMenu().findItem(R.id.nav_nowplaying).setIcon(R.drawable.bookmark_music_white);\n            navigationView.getMenu().findItem(R.id.nav_settings).setIcon(R.drawable.settings_white);\n            navigationView.getMenu().findItem(R.id.nav_about).setIcon(R.drawable.information_white);\n            navigationView.getMenu().findItem(R.id.nav_donate).setIcon(R.drawable.payment_white);\n        }\n\n        try {\n            if (!BillingProcessor.isIabServiceAvailable(this)) {\n                navigationView.getMenu().removeItem(R.id.nav_donate);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n    }\n\n    private void updatePosition(final MenuItem menuItem) {\n        runnable = null;\n\n        switch (menuItem.getItemId()) {\n            case R.id.nav_library:\n                runnable = navigateLibrary;\n\n                break;\n            case R.id.nav_playlists:\n                runnable = navigatePlaylist;\n\n                break;\n            case R.id.nav_folders:\n                runnable = navigateFolder;\n\n                break;\n            case R.id.nav_nowplaying:\n                if (getCastSession() != null) {\n                    startActivity(new Intent(MainActivity.this, ExpandedControlsActivity.class));\n                } else {\n                    NavigationUtils.navigateToNowplaying(MainActivity.this, false);\n                }\n                break;\n            case R.id.nav_queue:\n                runnable = navigateQueue;\n\n                break;\n            case R.id.nav_settings:\n                NavigationUtils.navigateToSettings(MainActivity.this);\n                break;\n            case R.id.nav_about:\n                mDrawerLayout.closeDrawers();\n                Handler handler = new Handler();\n                handler.postDelayed(new Runnable() {\n                    @Override\n                    public void run() {\n                        Helpers.showAbout(MainActivity.this);\n                    }\n                }, 350);\n\n                break;\n            case R.id.nav_donate:\n                startActivity(new Intent(MainActivity.this, DonateActivity.class));\n                break;\n        }\n\n        if (runnable != null) {\n            menuItem.setChecked(true);\n            mDrawerLayout.closeDrawers();\n            Handler handler = new Handler();\n            handler.postDelayed(new Runnable() {\n                @Override\n                public void run() {\n                    runnable.run();\n                }\n            }, 350);\n        }\n    }\n\n    public void setDetailsToHeader() {\n        String name = MusicPlayer.getTrackName();\n        String artist = MusicPlayer.getArtistName();\n\n        if (name != null && artist != null) {\n            songtitle.setText(name);\n            songartist.setText(artist);\n        }\n        ImageLoader.getInstance().displayImage(TimberUtils.getAlbumArtUri(MusicPlayer.getCurrentAlbumId()).toString(), albumart,\n                new DisplayImageOptions.Builder().cacheInMemory(true)\n                        .showImageOnFail(R.drawable.ic_empty_music2)\n                        .resetViewBeforeLoading(true)\n                        .build());\n    }\n\n    @Override\n    public void onMetaChanged() {\n        super.onMetaChanged();\n        setDetailsToHeader();\n\n        if (panelLayout.isPanelHidden() && MusicPlayer.getTrackName() != null) {\n            panelLayout.showPanel();\n        }\n    }\n\n    @Override\n    public void onRequestPermissionsResult(\n            int requestCode, String[] permissions, int[] grantResults) {\n        Nammu.onRequestPermissionsResult(requestCode, permissions, grantResults);\n    }\n\n    private boolean isNavigatingMain() {\n        Fragment currentFragment = getSupportFragmentManager().findFragmentById(R.id.fragment_container);\n        return (currentFragment instanceof MainFragment || currentFragment instanceof QueueFragment\n                || currentFragment instanceof PlaylistFragment || currentFragment instanceof FoldersFragment);\n    }\n\n    private void addBackstackListener() {\n        getSupportFragmentManager().addOnBackStackChangedListener(new FragmentManager.OnBackStackChangedListener() {\n            @Override\n            public void onBackStackChanged() {\n                getSupportFragmentManager().findFragmentById(R.id.fragment_container).onResume();\n            }\n        });\n    }\n\n\n    @Override\n    public int getActivityTheme() {\n        return isDarkTheme ? R.style.AppThemeNormalDark : R.style.AppThemeNormalLight;\n    }\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n        getSupportFragmentManager().findFragmentById(R.id.fragment_container).onActivityResult(requestCode, resultCode, data);\n    }\n\n\n    @Override\n    public void showCastMiniController() {\n        findViewById(R.id.castMiniController).setVisibility(View.VISIBLE);\n        findViewById(R.id.quickcontrols_container).setVisibility(View.GONE);\n        panelLayout.hidePanel();\n    }\n\n    @Override\n    public void hideCastMiniController() {\n\n        findViewById(R.id.castMiniController).setVisibility(View.GONE);\n        findViewById(R.id.quickcontrols_container).setVisibility(View.VISIBLE);\n\n        panelLayout.showPanel();\n    }\n}\n\n\n'