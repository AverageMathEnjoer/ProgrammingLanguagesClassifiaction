b'/*\n * Copyright (C) 2015 Naman Dwivedi\n *\n * Licensed under the GNU General Public License v3\n *\n * This is free software: you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n */\n\npackage com.naman14.timber.nowplaying;\n\nimport android.graphics.Bitmap;\nimport android.graphics.Color;\nimport android.graphics.drawable.Drawable;\nimport android.graphics.drawable.TransitionDrawable;\nimport android.os.AsyncTask;\nimport android.os.Bundle;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.ImageView;\n\nimport com.afollestad.appthemeengine.Config;\nimport com.naman14.timber.MusicPlayer;\nimport com.naman14.timber.MusicService;\nimport com.naman14.timber.R;\nimport com.naman14.timber.utils.ImageUtils;\n\nimport net.steamcrafted.materialiconlib.MaterialDrawableBuilder;\n\npublic class Timber2 extends BaseNowplayingFragment {\n\n    ImageView mBlurredArt;\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        View rootView = inflater.inflate(\n                R.layout.fragment_timber2, container, false);\n\n        setMusicStateListener();\n        setSongDetails(rootView);\n        mBlurredArt = (ImageView) rootView.findViewById(R.id.album_art_blurred);\n\n        initGestures(mBlurredArt);\n\n        return rootView;\n    }\n\n    @Override\n    public void updateShuffleState() {\n        if (shuffle != null && getActivity() != null) {\n            MaterialDrawableBuilder builder = MaterialDrawableBuilder.with(getActivity())\n                    .setIcon(MaterialDrawableBuilder.IconValue.SHUFFLE)\n                    .setSizeDp(30);\n\n            if (MusicPlayer.getShuffleMode() == 0) {\n                builder.setColor(Color.WHITE);\n            } else builder.setColor(accentColor);\n\n            shuffle.setImageDrawable(builder.build());\n            shuffle.setOnClickListener(new View.OnClickListener() {\n                @Override\n                public void onClick(View view) {\n                    MusicPlayer.cycleShuffle();\n                    updateShuffleState();\n                    updateRepeatState();\n                }\n            });\n        }\n    }\n\n    @Override\n    public void updateRepeatState() {\n        if (repeat != null && getActivity() != null) {\n            MaterialDrawableBuilder builder = MaterialDrawableBuilder.with(getActivity())\n                    .setSizeDp(30);\n\n            if (MusicPlayer.getRepeatMode() == 0) {\n                builder.setColor(Color.WHITE);\n            } else builder.setColor(accentColor);\n\n            if (MusicPlayer.getRepeatMode() == MusicService.REPEAT_NONE) {\n                builder.setIcon(MaterialDrawableBuilder.IconValue.REPEAT);\n                builder.setColor(Color.WHITE);\n            } else if (MusicPlayer.getRepeatMode() == MusicService.REPEAT_CURRENT) {\n                builder.setIcon(MaterialDrawableBuilder.IconValue.REPEAT_ONCE);\n                builder.setColor(accentColor);\n            } else if (MusicPlayer.getRepeatMode() == MusicService.REPEAT_ALL) {\n                builder.setColor(accentColor);\n                builder.setIcon(MaterialDrawableBuilder.IconValue.REPEAT);\n            }\n\n            repeat.setImageDrawable(builder.build());\n            repeat.setOnClickListener(new View.OnClickListener() {\n                @Override\n                public void onClick(View view) {\n                    MusicPlayer.cycleRepeat();\n                    updateRepeatState();\n                    updateShuffleState();\n                }\n            });\n        }\n    }\n\n    @Override\n    public void doAlbumArtStuff(Bitmap loadedImage) {\n        setBlurredAlbumArt blurredAlbumArt = new setBlurredAlbumArt();\n        blurredAlbumArt.execute(loadedImage);\n    }\n\n    private class setBlurredAlbumArt extends AsyncTask<Bitmap, Void, Drawable> {\n\n        @Override\n        protected Drawable doInBackground(Bitmap... loadedImage) {\n            Drawable drawable = null;\n            try {\n                drawable = ImageUtils.createBlurredImageFromBitmap(loadedImage[0], getActivity(), 6);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n            return drawable;\n        }\n\n        @Override\n        protected void onPostExecute(Drawable result) {\n            if (result != null) {\n                if (mBlurredArt.getDrawable() != null) {\n                    final TransitionDrawable td =\n                            new TransitionDrawable(new Drawable[]{\n                                    mBlurredArt.getDrawable(),\n                                    result\n                            });\n                    mBlurredArt.setImageDrawable(td);\n                    td.startTransition(200);\n\n                } else {\n                    mBlurredArt.setImageDrawable(result);\n                }\n            }\n        }\n\n        @Override\n        protected void onPreExecute() {\n        }\n    }\n}'