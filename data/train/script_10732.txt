b'{-# LANGUAGE FlexibleContexts      #-}\n{-# LANGUAGE FlexibleInstances     #-}\n{-# LANGUAGE MultiParamTypeClasses #-}\n{-# LANGUAGE UndecidableInstances  #-}\n{-# OPTIONS_GHC -fno-warn-orphans #-}\n-- |\n-- Copyright  : (c) Ivan Perez and Manuel Baerenz, 2016\n-- License    : BSD3\n-- Maintainer : ivan.perez@keera.co.uk\n--\n-- \'VectorSpace\' instances for \'MSF\'s that produce vector spaces. This allows\n-- you to use vector operators with \'MSF\'s that output vectors, for example,\n-- you can write:\n--\n-- @\n-- msf1 :: MSF Input (Double, Double) -- defined however you want\n-- msf2 :: MSF Input (Double, Double) -- defined however you want\n-- msf3 :: MSF Input (Double, Double)\n-- msf3 = msf1 ^+^ msf2\n-- @\n--\n-- instead of\n--\n-- @\n-- msf3 = (msf1 &&& msf2) >>> arr (uncurry (^+^))\n-- @\n--\n--\n-- Instances are provided for the type class \'VectorSpace\'.\n\n-- Note: This module uses undecidable instances, because GHC does not know\n-- enough to assert that it will be able to determine the type of \'s\' from the\n-- type of \'v\', because \'v\' only appears under \'MSF\' in the instance head and\n-- it cannot determine what \'MSF\' will do to \'v\' and whether the type can be\n-- resolved.\nmodule Data.MonadicStreamFunction.Instances.VectorSpace where\n\n-- External imports\nimport Control.Arrow    ((>>^))\nimport Data.VectorSpace (VectorSpace (..))\n\n-- Internal imports\nimport Control.Arrow.Util              (constantly, elementwise2)\nimport Data.MonadicStreamFunction.Core (MSF)\n\n-- | Vector-space instance for \'MSF\'s.\ninstance (Monad m, Eq s, Num s, VectorSpace v s, Floating (MSF m a s))\n      => VectorSpace (MSF m a v) (MSF m a s)\n  where\n    zeroVector   = constantly zeroVector\n    (*^)         = elementwise2 (*^)\n    (^/)         = elementwise2 (^/)\n    (^+^)        = elementwise2 (^+^)\n    (^-^)        = elementwise2 (^-^)\n    negateVector = (>>^ negateVector)\n    dot          = elementwise2 dot\n    normalize v  = elementwise2 f v (norm v)\n      where\n        f v\' nv\'\n          | nv\' /= 0  = v\' ^/ nv\'\n          | otherwise = error "normalize: zero vector"\n'