b'{-# LANGUAGE ImpredicativeTypes #-}\n{-# LANGUAGE MultiParamTypeClasses #-}\n{-# LANGUAGE NoMonomorphismRestriction #-}\n{-# LANGUAGE UndecidableInstances #-}\n{-# LANGUAGE CPP #-}\n\n-- ! BUILD_COMMAND: runhaskell --ghc-arg=-fglasgow-exts -XStandaloneDeriving -XTypeSynonymInstances -XDeriveGeneric -XGADTs -XOverloadedStrings -XFlexibleContexts -XFlexibleInstances -XTypeFamilies -XTypeApplications -XAllowAmbiguousTypes -XPartialTypeSignatures  -I../../docs/beam-templates\n-- ! BUILD_DIR: beam-sqlite/examples/\n-- ! EXTRA_DEPS: employee3common.hs employee3commonsql.hs\n-- ! FORMAT: sql\nmodule Main where\n\n#include "employee3common.hs"\n\n     [ jamesOrder1, bettyOrder1, jamesOrder2 ] <-\n       runBeamSqlite conn $ do\n         runInsertReturningList $\n           insertReturning (shoppingCartDb ^. shoppingCartOrders) $\n           insertExpressions $\n           [ Order default_ currentTimestamp_ (val_ (pk james)) (val_ (pk jamesAddress1)) nothing_\n           , Order default_ currentTimestamp_ (val_ (pk betty)) (val_ (pk bettyAddress1)) (just_ (val_ (pk bettyShippingInfo)))\n           , Order default_ currentTimestamp_ (val_ (pk james)) (val_ (pk jamesAddress1)) nothing_ ]\n\n     let lineItems = [ LineItem (pk jamesOrder1) (pk redBall) 10\n                     , LineItem (pk jamesOrder1) (pk mathTextbook) 1\n                     , LineItem (pk jamesOrder1) (pk introToHaskell) 4\n\n                     , LineItem (pk bettyOrder1) (pk mathTextbook) 3\n                     , LineItem (pk bettyOrder1) (pk introToHaskell) 3\n\n                     , LineItem (pk jamesOrder2) (pk mathTextbook) 1 ]\n\n     runBeamSqlite conn $ do\n       runInsert $ insert (shoppingCartDb ^. shoppingCartLineItems) $\n         insertValues lineItems\n#include "employee3commonsql.hs"\n\n\n     (do let putStrLn :: String -> IO ()\n             putStrLn _ = pure ()\n\n             print _ = pure ()\n\n         BEAM_PLACEHOLDER\n       )\n'