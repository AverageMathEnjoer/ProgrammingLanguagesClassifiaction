b'{-# OPTIONS_GHC -fno-warn-type-defaults #-}\n{-# LANGUAGE NoImplicitPrelude #-}\n\nmodule Course.OptionalSpec where\n\nimport           Test.Hspec               (Spec, describe, it, shouldBe)\n\nimport           Course.Core\nimport           Course.Optional  (Optional (..), bindOptional, mapOptional,\n                                   (<+>), (??))\nspec :: Spec\nspec = do\n  describe "mapOptional" $ do\n    it "Empty" $\n      mapOptional (+1) Empty `shouldBe` Empty\n    it "Full" $\n      mapOptional (+1) (Full 8) `shouldBe` Full 9\n\n  let\n    evenDecOddInc n =\n      if even n\n      then Full (n - 1)\n      else Full (n + 1)\n\n  describe "bindOptional" $ do\n    it "Empty" $\n      bindOptional Full Empty `shouldBe` (Empty :: Optional Integer)\n    it "even dec, odd inc, even input" $\n      bindOptional evenDecOddInc (Full 8) `shouldBe` Full 7\n    it "even dec, odd inc, odd input" $\n      bindOptional evenDecOddInc (Full 9) `shouldBe` Full 10\n\n  describe "??" $ do\n    it "Full" $\n      Full 8 ?? 99 `shouldBe` 8\n    it "Empty" $\n      Empty ?? 99 `shouldBe` 99\n\n  describe "<+>" $ do\n    it "first Full" $\n      Full 8 <+> Empty `shouldBe` Full 8\n    it "both Full" $\n      Full 8 <+> Full 9 `shouldBe` Full 8\n    it "first Empty" $\n      Empty <+> Full 9 `shouldBe` Full 9\n    it "both empty" $\n      Empty <+> Empty `shouldBe` (Empty :: Optional Integer)\n'