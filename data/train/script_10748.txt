b'{-# LANGUAGE DataKinds #-}\n{-# LANGUAGE GADTs #-}\n{-# LANGUAGE GeneralizedNewtypeDeriving #-}\n{-# LANGUAGE PolyKinds #-}\n\n-- {-# LANGUAGE NoMonoPatBinds #-}\n\nmodule Hoodle.Type.PageArrangement where\n\nimport Control.Lens (Lens, Simple, lens, view)\nimport Data.Foldable (toList)\nimport Data.Hoodle.BBox (BBox (..))\nimport Data.Hoodle.Generic\n  ( gdimension,\n    gpages,\n  )\nimport Data.Hoodle.Simple (Dimension (..))\nimport Data.Maybe (fromMaybe)\nimport Hoodle.Type.Alias (EditMode, Hoodle)\nimport Hoodle.Type.Predefined (predefinedPageSpacing)\nimport Hoodle.Util (maybeError\')\n\n-- | supported zoom modes\ndata ZoomMode = Original | FitWidth | FitHeight | Zoom Double\n  deriving (Show, Eq)\n\n-- | supported view modes\ndata ViewMode = SinglePage | ContinuousPage\n\n-- |\nnewtype PageNum = PageNum {unPageNum :: Int}\n  deriving (Eq, Show, Ord, Num)\n\n-- |\nnewtype ScreenCoordinate = ScrCoord {unScrCoord :: (Double, Double)}\n  deriving (Show)\n\n-- |\nnewtype CanvasCoordinate = CvsCoord {unCvsCoord :: (Double, Double)}\n  deriving (Show)\n\n-- |\nnewtype DesktopCoordinate = DeskCoord {unDeskCoord :: (Double, Double)}\n  deriving (Show)\n\n-- |\nnewtype PageCoordinate = PageCoord {unPageCoord :: (Double, Double)}\n  deriving (Show)\n\n-- |\nnewtype ScreenDimension = ScreenDimension {unScreenDimension :: Dimension}\n  deriving (Show)\n\n-- |\nnewtype CanvasDimension = CanvasDimension {unCanvasDimension :: Dimension}\n  deriving (Show)\n\n-- |\nnewtype CanvasOrigin = CanvasOrigin {unCanvasOrigin :: (Double, Double)}\n  deriving (Show)\n\n-- |\nnewtype PageOrigin = PageOrigin {unPageOrigin :: (Double, Double)}\n  deriving (Show)\n\n-- |\nnewtype PageDimension = PageDimension {unPageDimension :: Dimension}\n  deriving (Show)\n\n-- |\nnewtype DesktopDimension = DesktopDimension {unDesktopDimension :: Dimension}\n  deriving (Show)\n\n-- |\nnewtype ViewPortBBox = ViewPortBBox {unViewPortBBox :: BBox}\n  deriving (Show)\n\n-- |\napply :: (BBox -> BBox) -> ViewPortBBox -> ViewPortBBox\napply f (ViewPortBBox bbox1) = ViewPortBBox (f bbox1)\n{-# INLINE apply #-}\n\n-- |\nxformViewPortFitInSize :: Dimension -> (BBox -> BBox) -> ViewPortBBox -> ViewPortBBox\nxformViewPortFitInSize (Dim w h) f (ViewPortBBox bbx) =\n  let BBox (x1, y1) (x2, y2) = f bbx\n      xmargin = if 0.5 * ((x2 - x1) - w) > 0 then 0.5 * ((x2 - x1) - w) else 0\n      ymargin = if 0.5 * ((y2 - y1) - h) > 0 then 0.5 * ((y2 - y1) - h) else 0\n      (x1\', x2\')\n        | x2 > w && w - (x2 - x1) > 0 = (w - (x2 - x1), w)\n        | x2 > w && w - (x2 - x1) <= 0 = (-xmargin, -xmargin + x2 - x1)\n        | x1 < (-xmargin) = (-xmargin, -xmargin + x2 - x1)\n        | otherwise = (x1, x2)\n      (y1\', y2\')\n        | y2 > h && h - (y2 - y1) > 0 = (h - (y2 - y1), h)\n        | y2 > h && h - (y2 - y1) <= 0 = (-ymargin, -ymargin + y2 - y1)\n        | y1 < (-ymargin) = (-ymargin, -ymargin + y2 - y1)\n        | otherwise = (y1, y2)\n   in ViewPortBBox (BBox (x1\', y1\') (x2\', y2\'))\n\n-- | data structure for coordinate arrangement of pages in desktop coordinate\ndata PageArrangement (a :: ViewMode) where\n  SingleArrangement ::\n    CanvasDimension ->\n    PageDimension ->\n    ViewPortBBox ->\n    PageArrangement \'SinglePage\n  ContinuousArrangement ::\n    CanvasDimension ->\n    DesktopDimension ->\n    (PageNum -> Maybe (PageOrigin, PageDimension)) ->\n    ViewPortBBox ->\n    PageArrangement \'ContinuousPage\n\n-- |\ngetRatioPageCanvas :: ZoomMode -> PageDimension -> CanvasDimension -> (Double, Double)\ngetRatioPageCanvas zmode (PageDimension (Dim w h)) (CanvasDimension (Dim w\' h\')) =\n  case zmode of\n    Original -> (1.0, 1.0)\n    FitWidth -> (w\' / w, w\' / w)\n    FitHeight -> (h\' / h, h\' / h)\n    Zoom s -> (s, s)\n\n-- |\nmakeSingleArrangement ::\n  ZoomMode ->\n  PageDimension ->\n  CanvasDimension ->\n  (Double, Double) ->\n  PageArrangement \'SinglePage\nmakeSingleArrangement zmode pdim cdim@(CanvasDimension (Dim w\' h\')) (x, y) =\n  let (sinvx, sinvy) = getRatioPageCanvas zmode pdim cdim\n      bbox = BBox (x, y) (x + w\' / sinvx, y + h\' / sinvy)\n   in SingleArrangement cdim pdim (ViewPortBBox bbox)\n\n-- |\nnewtype DesktopConstraint = DesktopWidthConstrained Double\n\n-- |\nmakeContinuousArrangement ::\n  ZoomMode ->\n  CanvasDimension ->\n  Hoodle EditMode ->\n  (PageNum, PageCoordinate) ->\n  PageArrangement \'ContinuousPage\nmakeContinuousArrangement\n  zmode\n  cdim@(CanvasDimension (Dim cw ch))\n  hdl\n  (pnum, PageCoord (xpos, ypos)) =\n    let dim = view gdimension . head . toList . view gpages $ hdl\n        (sinvx, sinvy) = getRatioPageCanvas zmode (PageDimension dim) cdim\n        cnstrnt = DesktopWidthConstrained (cw / sinvx)\n        -- default to zero if error\n        (PageOrigin (x0, y0), _) =\n          fromMaybe\n            (PageOrigin (0, 0), PageDimension (Dim cw ch))\n            (pageArrFuncCont cnstrnt hdl pnum)\n        ddim@(DesktopDimension iddim) = deskDimCont cnstrnt hdl\n        (x1, y1) = (xpos + x0, ypos + y0)\n        (x2, y2) = (xpos + x0 + cw / sinvx, ypos + y0 + ch / sinvy)\n        ovport = ViewPortBBox (BBox (x1, y1) (x2, y2))\n        vport = xformViewPortFitInSize iddim id ovport\n     in ContinuousArrangement cdim ddim (pageArrFuncCont cnstrnt hdl) vport\n\n-- |\npageArrFuncCont ::\n  DesktopConstraint ->\n  Hoodle EditMode ->\n  PageNum ->\n  Maybe (PageOrigin, PageDimension)\npageArrFuncCont (DesktopWidthConstrained w\') hdl (PageNum n)\n  | n < 0 = Nothing\n  | n >= len = Nothing\n  | otherwise = Just (PageOrigin (xys !! n), PageDimension (pdims !! n))\n  where\n    addf (x, y) (w, h) =\n      if x + 2 * w + predefinedPageSpacing < w\'\n        then (x + w + predefinedPageSpacing, y)\n        else (0, y + h + predefinedPageSpacing)\n    pgs = toList . view gpages $ hdl\n    len = length pgs\n    pdims = map (view gdimension) pgs\n    wh2xyFrmPg = ((,) <$> dim_width <*> dim_height) . view gdimension\n    xys = scanl addf (0, 0) . map wh2xyFrmPg $ pgs\n\n-- |\ndeskDimCont :: DesktopConstraint -> Hoodle EditMode -> DesktopDimension\ndeskDimCont cnstrnt hdl =\n  let pgs = toList . view gpages $ hdl\n      len = length pgs\n      olst =\n        maybeError\' "deskDimCont" $\n          mapM (pageArrFuncCont cnstrnt hdl . PageNum) [0 .. len - 1]\n      f (PageOrigin (x, y), PageDimension (Dim w h)) (Dim w\' h\') =\n        let w\'\' = if w\' < x + w then x + w else w\'\n            h\'\' = if h\' < y + h then y + h else h\'\n         in Dim w\'\' h\'\'\n   in DesktopDimension $ foldr f (Dim 0 0) olst\n\n------------\n-- lenses\n------------\n\n-- |\npageDimension :: Simple Lens (PageArrangement a) PageDimension\npageDimension = lens getter setter\n  where\n    getter :: PageArrangement a -> PageDimension\n    getter (SingleArrangement _ pdim _) = pdim\n    getter ContinuousArrangement {} = error "in pageDimension " -- partial\n    setter :: PageArrangement a -> PageDimension -> PageArrangement a\n    setter (SingleArrangement cdim _ vbbox) pdim = SingleArrangement cdim pdim vbbox\n    setter ContinuousArrangement {} _pdim = error "in pageDimension " -- partial\n\n-- |\ncanvasDimension :: Simple Lens (PageArrangement a) CanvasDimension\ncanvasDimension = lens getter setter\n  where\n    getter :: PageArrangement a -> CanvasDimension\n    getter (SingleArrangement cdim _ _) = cdim\n    getter (ContinuousArrangement cdim _ _ _) = cdim\n    setter :: PageArrangement a -> CanvasDimension -> PageArrangement a\n    setter (SingleArrangement _ pdim vbbox) cdim = SingleArrangement cdim pdim vbbox\n    setter (ContinuousArrangement _ ddim pfunc vbbox) cdim =\n      ContinuousArrangement cdim ddim pfunc vbbox\n\n-- |\nviewPortBBox :: Simple Lens (PageArrangement a) ViewPortBBox\nviewPortBBox = lens getter setter\n  where\n    getter :: PageArrangement a -> ViewPortBBox\n    getter (SingleArrangement _ _ vbbox) = vbbox\n    getter (ContinuousArrangement _ _ _ vbbox) = vbbox\n    setter :: PageArrangement a -> ViewPortBBox -> PageArrangement a\n    setter (SingleArrangement cdim pdim _) vbbox = SingleArrangement cdim pdim vbbox\n    setter (ContinuousArrangement cdim ddim pfunc _) vbbox =\n      ContinuousArrangement cdim ddim pfunc vbbox\n\n-- |\ndesktopDimension :: Simple Lens (PageArrangement a) DesktopDimension\ndesktopDimension = lens getter (error "setter for desktopDimension is not defined")\n  where\n    getter :: PageArrangement a -> DesktopDimension\n    getter (SingleArrangement _ (PageDimension dim) _) = DesktopDimension dim\n    getter (ContinuousArrangement _ ddim _ _) = ddim\n'