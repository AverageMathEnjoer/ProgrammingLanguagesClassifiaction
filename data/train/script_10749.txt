b'package effectivejava.chapter5.item30;\n\nimport java.util.function.UnaryOperator;\n\n// Generic singleton factory pattern (Page 136-7)\npublic class GenericSingletonFactory {\n    // Generic singleton factory pattern\n    private static UnaryOperator<Object> IDENTITY_FN = (t) -> t;\n\n    @SuppressWarnings("unchecked")\n    public static <T> UnaryOperator<T> identityFunction() {\n        return (UnaryOperator<T>) IDENTITY_FN;\n    }\n\n    // Sample program to exercise generic singleton\n    public static void main(String[] args) {\n        String[] strings = { "jute", "hemp", "nylon" };\n        UnaryOperator<String> sameString = identityFunction();\n        for (String s : strings)\n            System.out.println(sameString.apply(s));\n\n        Number[] numbers = { 1, 2.0, 3L };\n        UnaryOperator<Number> sameNumber = identityFunction();\n        for (Number n : numbers)\n            System.out.println(sameNumber.apply(n));\n    }\n}'