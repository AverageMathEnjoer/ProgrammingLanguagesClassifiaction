b'{-# LANGUAGE NoImplicitPrelude #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n{-# LANGUAGE OverloadedStrings #-}\n\nmodule Course.Anagrams where\n\nimport Course.Core\nimport Course.List\nimport Course.Functor\n\n{-\n\nFunctions you will need\n--\n* fmap :: (a -> b) -> IO a -> IO b\n* readFile :: FilePath -> IO Str\n* lines :: Str -> [Str]\n* permutations :: [a] -> [[a]]\n* intersectBy :: (a -> a -> Bool) -> [a] -> [a] -> [a]\n* toLower :: Char -> Char\n\nFunctions that might help\n-\n* on :: (b -> b -> c) -> (a -> b) -> a -> a -> c\n\n-}\n\n\n-- Return all anagrams of the given string\n-- that appear in the given dictionary file.\nanagrams ::\n  Chars\n  -> FilePath\n  -> IO (List Chars)\nanagrams =\n  error "todo: Course.Anagrams#anagrams"\n\n-- Compare two strings for equality, ignoring case\nequalIgnoringCase ::\n  Chars\n  -> Chars\n  -> Bool\nequalIgnoringCase =\n  error "todo: Course.Anagrams#equalIgnoringCase"\n'