b'package com.codeest.geeknews.model.prefs;\n\nimport android.content.Context;\nimport android.content.SharedPreferences;\n\nimport com.codeest.geeknews.app.App;\nimport com.codeest.geeknews.app.Constants;\n\nimport javax.inject.Inject;\n\n/**\n * @author: Est <codeest.dev@gmail.com>\n * @date: 2017/4/21\n * @description:\n */\n\npublic class ImplPreferencesHelper implements PreferencesHelper {\n\n    private static final boolean DEFAULT_NIGHT_MODE = false;\n    private static final boolean DEFAULT_NO_IMAGE = false;\n    private static final boolean DEFAULT_AUTO_SAVE = true;\n\n    private static final boolean DEFAULT_LIKE_POINT = false;\n    private static final boolean DEFAULT_VERSION_POINT = false;\n    private static final boolean DEFAULT_MANAGER_POINT = false;\n\n    private static final int DEFAULT_CURRENT_ITEM = Constants.TYPE_ZHIHU;\n\n    private static final String SHAREDPREFERENCES_NAME = "my_sp";\n\n    private final SharedPreferences mSPrefs;\n\n    @Inject\n    public ImplPreferencesHelper() {\n        mSPrefs = App.getInstance().getSharedPreferences(SHAREDPREFERENCES_NAME, Context.MODE_PRIVATE);\n    }\n\n    @Override\n    public boolean getNightModeState() {\n        return mSPrefs.getBoolean(Constants.SP_NIGHT_MODE, DEFAULT_NIGHT_MODE);\n    }\n\n    @Override\n    public void setNightModeState(boolean state) {\n        mSPrefs.edit().putBoolean(Constants.SP_NIGHT_MODE, state).apply();\n    }\n\n    @Override\n    public boolean getNoImageState() {\n        return mSPrefs.getBoolean(Constants.SP_NO_IMAGE, DEFAULT_NO_IMAGE);\n    }\n\n    @Override\n    public void setNoImageState(boolean state) {\n        mSPrefs.edit().putBoolean(Constants.SP_NO_IMAGE, state).apply();\n    }\n\n    @Override\n    public boolean getAutoCacheState() {\n        return mSPrefs.getBoolean(Constants.SP_AUTO_CACHE, DEFAULT_AUTO_SAVE);\n    }\n\n    @Override\n    public void setAutoCacheState(boolean state) {\n        mSPrefs.edit().putBoolean(Constants.SP_AUTO_CACHE, state).apply();\n    }\n\n    @Override\n    public int getCurrentItem() {\n        return mSPrefs.getInt(Constants.SP_CURRENT_ITEM, DEFAULT_CURRENT_ITEM);\n    }\n\n    @Override\n    public void setCurrentItem(int item) {\n        mSPrefs.edit().putInt(Constants.SP_CURRENT_ITEM, item).apply();\n    }\n\n    @Override\n    public boolean getLikePoint() {\n        return mSPrefs.getBoolean(Constants.SP_LIKE_POINT, DEFAULT_LIKE_POINT);\n    }\n\n    @Override\n    public void setLikePoint(boolean isFirst) {\n        mSPrefs.edit().putBoolean(Constants.SP_LIKE_POINT, isFirst).apply();\n    }\n\n    @Override\n    public boolean getVersionPoint() {\n        return mSPrefs.getBoolean(Constants.SP_VERSION_POINT, DEFAULT_VERSION_POINT);\n    }\n\n    @Override\n    public void setVersionPoint(boolean isFirst) {\n        mSPrefs.edit().putBoolean(Constants.SP_VERSION_POINT, isFirst).apply();\n    }\n\n    @Override\n    public boolean getManagerPoint() {\n        return mSPrefs.getBoolean(Constants.SP_MANAGER_POINT, DEFAULT_MANAGER_POINT);\n    }\n\n    @Override\n    public void setManagerPoint(boolean isFirst) {\n        mSPrefs.edit().putBoolean(Constants.SP_MANAGER_POINT, isFirst).apply();\n    }\n}\n'