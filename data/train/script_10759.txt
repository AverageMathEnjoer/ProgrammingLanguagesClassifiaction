b'import assertk.assertThat\nimport assertk.assertions.isGreaterThan\nimport com.github.eprendre.tingshu.utils.Book\nimport com.github.eprendre.tingshu.utils.Episode\nimport org.jsoup.Jsoup\nimport org.junit.Test\nimport java.net.URLEncoder\n\nclass M456Test {\n    @Test\n    fun search() {\n        val keywords = "\xe4\xbf\xae\xe4\xbb\x99"\n        val encodedKeywords = URLEncoder.encode(keywords, "utf-8")\n        val page = 1\n        val url = "http://m.ting456.com/search.php?searchword=${encodedKeywords}&Submit="\n        val doc = Jsoup.connect(url).testConfig(false).get()\n        val totalPage = 1\n\n        val list = ArrayList<Book>()\n        val elementList = doc.select("#cateList_wap > .bookbox")\n        elementList.forEach { element ->\n            val bookid = element.attr("bookid")\n            var coverUrl = element.selectFirst(".bookimg > img").attr("orgsrc")\n            if (coverUrl.startsWith("/")) {\n                coverUrl = "https://ting456.com${coverUrl}"\n            }\n            val bookUrl = "http://m.ting456.com/book/d${bookid}.html"\n            val title = element.selectFirst(".bookname").text()\n            val author = element.selectFirst(".author > a").text()\n            val artist = ""\n            val status = element.selectFirst(".update").text()\n            val intro = element.selectFirst(".intro_line").text()\n            list.add(Book(coverUrl, bookUrl, title, author, artist).apply {\n                this.intro = intro\n                this.status = status\n            })\n        }\n        list.forEach { println(it) }\n        assertThat(list.size).isGreaterThan(0)\n    }\n\n    @Test\n    fun bookDetail() {\n        val doc = Jsoup.connect("http://m.ting456.com/book/d5384.html").testConfig(false).get()\n\n        var episodes = emptyList<Episode>()\n        doc.select("#playlist").forEach { element ->\n            val e = element.select("li > a").map {\n                Episode(it.text(), it.absUrl("href"))\n            }.toList()\n            if (e.size > episodes.size) {\n                episodes = e\n            }\n        }\n        println(episodes.size)\n\n        episodes.take(20).forEach { println(it) }\n        assertThat(episodes.size).isGreaterThan(0)\n    }\n\n    @Test\n    fun category() {\n        val doc = Jsoup.connect("http://m.ting456.com/fenlei/c2.html").testConfig(false).get()\n        var totalPage = 1\n        var currentPage = 1\n\n        val page = doc.selectFirst(".page")\n        page.ownText().replace("\xe9\xa1\xb5\xe6\xac\xa1 ", "").split("/").let {\n            currentPage = it[0].toInt()\n            totalPage = it[1].toInt()\n        }\n        val nextUrl = page.selectFirst("a")?.absUrl("href") ?: ""\n        println("$currentPage/$totalPage")\n        println("nextUrl: $nextUrl")\n\n        val list = ArrayList<Book>()\n        val elementList = doc.select("#cateList_wap > .bookbox")\n        elementList.forEach { element ->\n            val bookid = element.attr("bookid")\n            var coverUrl = element.selectFirst(".bookimg > img").attr("orgsrc")\n            if (coverUrl.startsWith("/")) {\n                coverUrl = "http://m.ting456.com${coverUrl}"\n            }\n            val bookUrl = "http://m.ting456.com/book/d${bookid}.html"\n            val title = element.selectFirst(".bookname").text()\n            val author = element.selectFirst(".author > a")?.text() ?: ""\n            val artist = ""\n            val status = element.selectFirst(".update").text()\n            val intro = element.selectFirst(".intro_line").text()\n            list.add(Book(coverUrl, bookUrl, title, author, artist).apply {\n                this.intro = intro\n                this.status = status\n            })\n        }\n\n        list.forEach { println(it) }\n        assertThat(list.size).isGreaterThan(0)\n    }\n\n    @Test\n    fun getMenus() {\n        val doc = Jsoup.connect("http://m.ting456.com/category.php").testConfig(false).get()\n        doc.select(".cat_list > li > a").forEach {\n            val title = it.text()\n            val url = it.absUrl("href")\n            println("CategoryTab(\\"${title}\\", \\"${url}\\"),")\n        }\n    }\n\n}'