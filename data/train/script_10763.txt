b'#\' Make and evaluate calls.\n#\'\n#\' @param f Function to call. For \\code{make_call}, either a string, a symbol\n#\'   or a quoted call. For \\code{do_call}, a bare function name or call.\n#\' @param ...,.args Arguments to the call either in or out of a list\n#\' @param .env Environment in which to evaluate call. Defaults to parent frame.\n#\' @export\n#\' @examples\n#\' # f can either be a string, a symbol or a call\n#\' make_call("f", a = 1)\n#\' make_call(quote(f), a = 1)\n#\' make_call(quote(f()), a = 1)\n#\'\n#\' #\' Can supply arguments individual or in a list\n#\' make_call(quote(f), a = 1, b = 2)\n#\' make_call(quote(f), list(a = 1, b = 2))\nmake_call <- function(f, ..., .args = list()) {\n  if (is.character(f)) f <- as.name(f)\n  as.call(c(f, ..., .args))\n}\n\n#\' @rdname make_call\n#\' @export\ndo_call <- function(f, ..., .args = list(), .env = parent.frame()) {\n  f <- substitute(f)\n\n  call <- make_call(f, ..., .args)\n  eval(call, .env)\n}\n'