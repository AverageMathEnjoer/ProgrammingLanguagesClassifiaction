b'\xef\xbb\xbfusing System.Diagnostics;\nusing System.IO.Compression;\nusing System.Reflection;\nusing System.Text;\nusing System.Text.RegularExpressions;\n\nnamespace XboxDownload\n{\n    internal class UpdateFile\n    {\n        public const string homePage = "https://xbox.skydevil.xyz";\n        public const string updateUrl = "https://github.com/skydevil88/XboxDownload/releases/";\n        public const string filePath = "download/v1/";\n        private const string testFile = "XboxDownload.exe.md5";\n        public const string dataFile = "XboxGame.json";\n        private static readonly string[,] proxys = {\n            { "proxy", "https://ghproxy.com/" },\n            { "proxy", "https://ghps.cc/" },\n            { "proxy", "https://proxy.zyun.vip/" },\n            { "proxy", "https://gh.api.99988866.xyz/" },  //\xe6\x85\xa2\n            //{ "proxy", "https://github.91chi.fun/" },   //\xe5\xa4\xb1\xe6\x95\x88\n            //{ "mirror", "https://cdn.githubjs.cf/" },   //\xe5\xa4\xb1\xe6\x95\x88\n            //{ "mirror", "https://hub.fastgit.xyz/" },   //\xe5\xa4\xb1\xe6\x95\x88\n            { "direct", "" }\n        };\n\n        public static void Start(bool autoupdate, Form1 parentForm)\n        {\n            Properties.Settings.Default.NextUpdate = DateTime.Now.AddDays(7).Ticks;\n            Properties.Settings.Default.Save();\n\n            string updateUrl = string.Empty, md5 = string.Empty;\n            Task[] tasks = new Task[proxys.GetLongLength(0)];\n            for (int i = 0; i <= tasks.Length - 1; i++)\n            {\n                string testUrl = proxys[i, 0] switch\n                {\n                    "proxy" => proxys[i, 1] + UpdateFile.updateUrl,\n                    "mirror" => proxys[i, 1] + Regex.Replace(UpdateFile.updateUrl, @"^https?://[^/]+/", ""),\n                    _ => UpdateFile.updateUrl\n                };\n                tasks[i] = new Task(() =>\n                {\n                    string html = ClassWeb.HttpResponseContent(testUrl + UpdateFile.filePath + UpdateFile.testFile, "GET", null, null, null, 6000);\n                    if (string.IsNullOrEmpty(md5) && Regex.IsMatch(html, @"^[A-Z0-9]{32}$"))\n                    {\n                        md5 = html;\n                        updateUrl = testUrl;\n                    }\n                    else Thread.Sleep(6000);\n                });\n            }\n            Array.ForEach(tasks, x => x.Start());\n            Task.WaitAny(tasks);\n            if (!string.IsNullOrEmpty(md5))\n            {\n                Update(autoupdate, updateUrl, parentForm);\n            }\n            if (string.IsNullOrEmpty(md5) && !autoupdate)\n            {\n                parentForm.Invoke(new Action(() =>\n                {\n                    MessageBox.Show("\xe6\xa3\x80\xe6\x9f\xa5\xe6\x9b\xb4\xe6\x96\xb0\xe5\x87\xba\xe9\x94\x99\xef\xbc\x8c\xe8\xaf\xb7\xe7\xa8\x8d\xe5\x80\x99\xe5\x86\x8d\xe8\xaf\x95\xe3\x80\x82", "\xe8\xbd\xaf\xe4\xbb\xb6\xe6\x9b\xb4\xe6\x96\xb0", MessageBoxButtons.OK, MessageBoxIcon.Error);\n                    parentForm.tsmUpdate.Enabled = true;\n                }));\n            }\n        }\n\n        private static void Update(bool autoupdate, string updateUrl, Form1 parentForm)\n        {\n            string? url = null;\n            using HttpResponseMessage? response = ClassWeb.HttpResponseMessage(updateUrl+ "latest", "HEAD");\n            if (response != null && response.IsSuccessStatusCode)\n            {\n                url = response.RequestMessage?.RequestUri?.ToString();\n            }\n            if (url != null)\n            {\n                bool isUpdate = false;\n                Match result = Regex.Match(url, @"(?<version>\\d+(\\.\\d+){2,3})$");\n                if (result.Success)\n                {\n                    Version version1 = new(result.Groups["version"].Value);\n                    Version version2 = new((Assembly.GetEntryAssembly()?.GetCustomAttribute<AssemblyFileVersionAttribute>()?.Version) ?? string.Empty);\n                    if (version1 > version2 && version1.Major == 2)\n                    {\n                        parentForm.Invoke(new Action(() =>\n                        {\n                            isUpdate = MessageBox.Show("\xe5\xb7\xb2\xe6\xa3\x80\xe6\xb5\x8b\xe5\x88\xb0\xe6\x96\xb0\xe7\x89\x88\xe6\x9c\xac\xef\xbc\x8c\xe6\x98\xaf\xe5\x90\xa6\xe7\xab\x8b\xe5\x8d\xb3\xe6\x9b\xb4\xe6\x96\xb0\xef\xbc\x9f", "\xe8\xbd\xaf\xe4\xbb\xb6\xe6\x9b\xb4\xe6\x96\xb0", MessageBoxButtons.YesNo, MessageBoxIcon.Asterisk) == DialogResult.Yes;\n                            if (!isUpdate) parentForm.tsmUpdate.Enabled = true;\n                        }));\n                        if (!isUpdate) return;\n                    }\n                    else\n                    {\n                        parentForm.Invoke(new Action(() =>\n                        {\n                            if (!autoupdate) MessageBox.Show("\xe8\xbd\xaf\xe4\xbb\xb6\xe5\xb7\xb2\xe7\xbb\x8f\xe6\x98\xaf\xe6\x9c\x80\xe6\x96\xb0\xe7\x89\x88\xe6\x9c\xac\xe3\x80\x82", "\xe8\xbd\xaf\xe4\xbb\xb6\xe6\x9b\xb4\xe6\x96\xb0", MessageBoxButtons.OK, MessageBoxIcon.None);\n                            parentForm.tsmUpdate.Enabled = true;\n                        }));\n                        return;\n                    }\n                }\n                if (isUpdate)\n                {\n                    string download = (url.Replace("tag", "download") + "/XboxDownload.zip");\n                    using HttpResponseMessage? response2 = ClassWeb.HttpResponseMessage(download, "GET", null, null, null, 180000);\n                    if (response2 != null && response2.IsSuccessStatusCode)\n                    {\n                        if (!Directory.Exists(Form1.resourcePath))\n                            Directory.CreateDirectory(Form1.resourcePath);\n                        byte[] buffer = response2.Content.ReadAsByteArrayAsync().Result;\n                        if (buffer.Length > 0)\n                        {\n                            using FileStream fs = new(Form1.resourcePath + "\\\\" + "XboxDownload.zip", FileMode.Create, FileAccess.Write, FileShare.ReadWrite);\n                            fs.Write(buffer, 0, buffer.Length);\n                            fs.Flush();\n                            fs.Close();\n                            string tempDir = Form1.resourcePath + @"\\Temp";\n                            if (Directory.Exists(tempDir))\n                                Directory.Delete(tempDir, true);\n                            ZipFile.ExtractToDirectory(Form1.resourcePath + @"\\XboxDownload.zip", tempDir, Encoding.GetEncoding("GBK"), true);\n                            foreach (DirectoryInfo di in new DirectoryInfo(tempDir).GetDirectories())\n                            {\n                                if (File.Exists(di.FullName + @"\\XboxDownload.exe"))\n                                {\n                                    parentForm.Invoke(new Action(() =>\n                                    {\n                                        if (Form1.bServiceFlag) parentForm.ButStart_Click(null, null);\n                                        parentForm.notifyIcon1.Visible = false;\n                                    }));\n                                    string cmd = "chcp 65001\\r\\nchoice /t 3 /d y /n >nul\\r\\nxcopy \\"" + di.FullName + "\\" \\"" + Path.GetDirectoryName(Application.ExecutablePath) + "\\" /s /e /y\\r\\ndel /a/f/q " + Form1.resourcePath + "\\\\XboxDownload.zip\\r\\n\\"" + Application.ExecutablePath + "\\"\\r\\nrd /s/q " + tempDir;\n                                    File.WriteAllText(tempDir + "\\\\" + ".update.cmd", cmd);\n                                    using (Process p = new())\n                                    {\n                                        p.StartInfo.FileName = "cmd.exe";\n                                        p.StartInfo.UseShellExecute = false;\n                                        p.StartInfo.CreateNoWindow = true;\n                                        p.StartInfo.Arguments = "/c \\"" + tempDir + "\\\\.update.cmd\\"";\n                                        p.Start();\n                                    }\n                                    Process.GetCurrentProcess().Kill();\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            parentForm.Invoke(new Action(() =>\n            {\n                if (!autoupdate) MessageBox.Show("\xe4\xb8\x8b\xe8\xbd\xbd\xe6\x96\x87\xe4\xbb\xb6\xe5\x87\xba\xe9\x94\x99\xef\xbc\x8c\xe8\xaf\xb7\xe7\xa8\x8d\xe5\x80\x99\xe5\x86\x8d\xe8\xaf\x95\xe3\x80\x82", "\xe8\xbd\xaf\xe4\xbb\xb6\xe6\x9b\xb4\xe6\x96\xb0", MessageBoxButtons.OK, MessageBoxIcon.Error);\n                parentForm.tsmUpdate.Enabled = true;\n            }));\n        }\n\n        public static async Task Download(FileInfo fi)\n        {\n            string updateUrl = string.Empty;\n            Task[] tasks = new Task[proxys.GetLongLength(0)];\n            for (int i = 0; i <= tasks.Length - 1; i++)\n            {\n                string testUrl = proxys[i, 0] switch\n                {\n                    "proxy" => proxys[i, 1] + UpdateFile.updateUrl,\n                    "mirror" => proxys[i, 1] + Regex.Replace(UpdateFile.updateUrl, @"^https?://[^/]+/", ""),\n                    _ => UpdateFile.updateUrl\n                };\n                tasks[i] = new Task(() =>\n                {\n                    string html = ClassWeb.HttpResponseContent(testUrl + UpdateFile.filePath + UpdateFile.testFile, "GET", null, null, null, 6000);\n                    if (string.IsNullOrEmpty(updateUrl) && Regex.IsMatch(html, @"^[A-Z0-9]{32}$"))\n                        updateUrl = testUrl;\n                    else\n                        Thread.Sleep(6000);\n                });\n            }\n            Array.ForEach(tasks, x => x.Start());\n            await Task.WhenAny(tasks);\n            if (!string.IsNullOrEmpty(updateUrl))\n            {\n                using HttpResponseMessage? response = ClassWeb.HttpResponseMessage(updateUrl + UpdateFile.filePath + fi.Name, "GET", null, null, null, 60000);\n                if (response != null && response.IsSuccessStatusCode)\n                {\n                    byte[] buffer = response.Content.ReadAsByteArrayAsync().Result;\n                    if (buffer.Length > 0)\n                    {\n                        if (fi.DirectoryName != null && !Directory.Exists(fi.DirectoryName))\n                            Directory.CreateDirectory(fi.DirectoryName);\n                        using FileStream fs = new(fi.FullName, FileMode.Create, FileAccess.Write, FileShare.ReadWrite);\n                        fs.Write(buffer, 0, buffer.Length);\n                        fs.Flush();\n                        fs.Close();\n                        fi.Refresh();\n                    }\n                }\n            }\n        }\n    }\n}\n'