b'class Solution {\npublic:\n    int jump(vector<int>& nums) {\n        int n = nums.size();\n        vector<int> dp(n, INT_MAX - 1); \n        // dp[i] = min steps to reach the end of array if we are at ith index\n        dp[n-1] = 0; \n        for(int i = n-2; i >= 0; i--) {\n            for(int j = i+1; j <= i+nums[i]; j++) {\n                if(j >= n) break;\n                dp[i] = min(dp[i], 1 + dp[j]);\n            }\n        }\n        \n        return dp[0];\n    }\n};\n\n/*\nFind: min steps to reach the end of array\n\nGiven: i -> we can jump a length of nums[i]\n0 index\n\n_ _ _ _ 7 _ _ _ _ _ _ _ _ _\n        i x x x x x x x\n        \ndp[i] = min steps to reach the end of array if we are at ith index\n\nfor(j=i+1; j<=i+7; j++) {\n    dp[i] = min(dp[i], 1 + dp[j]);\n}\n\nreturn dp[0]\n*/\n'