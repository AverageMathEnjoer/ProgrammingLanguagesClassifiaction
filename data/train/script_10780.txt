b'package com.zzg.mybatis.generator.bridge;\n\nimport com.jcraft.jsch.Session;\nimport com.zzg.mybatis.generator.controller.PictureProcessStateController;\nimport com.zzg.mybatis.generator.model.DatabaseConfig;\nimport com.zzg.mybatis.generator.model.DbType;\nimport com.zzg.mybatis.generator.model.GeneratorConfig;\nimport com.zzg.mybatis.generator.plugins.DbRemarksCommentGenerator;\nimport com.zzg.mybatis.generator.util.ConfigHelper;\nimport com.zzg.mybatis.generator.util.DbUtil;\nimport org.apache.commons.lang3.StringUtils;\nimport org.mybatis.generator.api.MyBatisGenerator;\nimport org.mybatis.generator.api.ProgressCallback;\nimport org.mybatis.generator.api.ShellCallback;\nimport org.mybatis.generator.config.*;\nimport org.mybatis.generator.internal.DefaultShellCallback;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\n/**\n * The bridge between GUI and the mybatis generator. All the operation to  mybatis generator should proceed through this\n * class\n * <p>\n * Created by Owen on 6/30/16.\n */\npublic class MybatisGeneratorBridge {\n\n\tprivate static final Logger _LOG = LoggerFactory.getLogger(MybatisGeneratorBridge.class);\n\n    private GeneratorConfig generatorConfig;\n\n    private DatabaseConfig selectedDatabaseConfig;\n\n    private ProgressCallback progressCallback;\n\n    private List<IgnoredColumn> ignoredColumns;\n\n    private List<ColumnOverride> columnOverrides;\n\n    public MybatisGeneratorBridge() {\n    }\n\n    public void setGeneratorConfig(GeneratorConfig generatorConfig) {\n        this.generatorConfig = generatorConfig;\n    }\n\n    public void setDatabaseConfig(DatabaseConfig databaseConfig) {\n        this.selectedDatabaseConfig = databaseConfig;\n    }\n\n    public void generate() throws Exception {\n        Configuration configuration = new Configuration();\n        Context context = new Context(ModelType.CONDITIONAL);\n        configuration.addContext(context);\n\t\t\n        context.addProperty("javaFileEncoding", "UTF-8");\n        \n\t\tString dbType = selectedDatabaseConfig.getDbType();\n\t\tString connectorLibPath = ConfigHelper.findConnectorLibPath(dbType);\n\t    _LOG.info("connectorLibPath: {}", connectorLibPath);\n\t    configuration.addClasspathEntry(connectorLibPath);\n        // Table configuration\n        TableConfiguration tableConfig = new TableConfiguration(context);\n        tableConfig.setTableName(generatorConfig.getTableName());\n        tableConfig.setDomainObjectName(generatorConfig.getDomainObjectName());\n        if(!generatorConfig.isUseExample()) {\n            tableConfig.setUpdateByExampleStatementEnabled(false);\n            tableConfig.setCountByExampleStatementEnabled(false);\n            tableConfig.setDeleteByExampleStatementEnabled(false);\n            tableConfig.setSelectByExampleStatementEnabled(false);\n        }\n\n\t\tcontext.addProperty("autoDelimitKeywords", "true");\n\t\tif (DbType.MySQL.name().equals(dbType) || DbType.MySQL_8.name().equals(dbType)) {\n\t\t\ttableConfig.setSchema(selectedDatabaseConfig.getSchema());\n\t\t\t// \xe7\x94\xb1\xe4\xba\x8ebeginningDelimiter\xe5\x92\x8cendingDelimiter\xe7\x9a\x84\xe9\xbb\x98\xe8\xae\xa4\xe5\x80\xbc\xe4\xb8\xba\xe5\x8f\x8c\xe5\xbc\x95\xe5\x8f\xb7(")\xef\xbc\x8c\xe5\x9c\xa8Mysql\xe4\xb8\xad\xe4\xb8\x8d\xe8\x83\xbd\xe8\xbf\x99\xe4\xb9\x88\xe5\x86\x99\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe8\xbf\x98\xe8\xa6\x81\xe5\xb0\x86\xe8\xbf\x99\xe4\xb8\xa4\xe4\xb8\xaa\xe9\xbb\x98\xe8\xae\xa4\xe5\x80\xbc\xe6\x94\xb9\xe4\xb8\xba`\n\t\t\tcontext.addProperty("beginningDelimiter", "`");\n\t\t\tcontext.addProperty("endingDelimiter", "`");\n\t\t} else {\n            tableConfig.setCatalog(selectedDatabaseConfig.getSchema());\n\t    }\n        if (generatorConfig.isUseSchemaPrefix()) {\n            if (DbType.MySQL.name().equals(dbType) || DbType.MySQL_8.name().equals(dbType)) {\n                tableConfig.setSchema(selectedDatabaseConfig.getSchema());\n            } else if (DbType.Oracle.name().equals(dbType)) {\n                //Oracle\xe7\x9a\x84schema\xe4\xb8\xba\xe7\x94\xa8\xe6\x88\xb7\xe5\x90\x8d\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe8\xbf\x9e\xe6\x8e\xa5\xe7\x94\xa8\xe6\x88\xb7\xe6\x8b\xa5\xe6\x9c\x89dba\xe7\xad\x89\xe9\xab\x98\xe7\xba\xa7\xe6\x9d\x83\xe9\x99\x90\xef\xbc\x8c\xe8\x8b\xa5\xe4\xb8\x8d\xe8\xae\xbeschema\xef\xbc\x8c\xe4\xbc\x9a\xe5\xaf\xbc\xe8\x87\xb4\xe6\x8a\x8a\xe5\x85\xb6\xe4\xbb\x96\xe7\x94\xa8\xe6\x88\xb7\xe4\xb8\x8b\xe5\x90\x8c\xe5\x90\x8d\xe7\x9a\x84\xe8\xa1\xa8\xe4\xb9\x9f\xe7\x94\x9f\xe6\x88\x90\xe4\xb8\x80\xe9\x81\x8d\xe5\xaf\xbc\xe8\x87\xb4mapper\xe4\xb8\xad\xe4\xbb\xa3\xe7\xa0\x81\xe9\x87\x8d\xe5\xa4\x8d\n                tableConfig.setSchema(selectedDatabaseConfig.getUsername());\n            } else {\n                tableConfig.setCatalog(selectedDatabaseConfig.getSchema());\n            }\n        }\n        // \xe9\x92\x88\xe5\xaf\xb9 postgresql \xe5\x8d\x95\xe7\x8b\xac\xe9\x85\x8d\xe7\xbd\xae\n\t\tif (DbType.PostgreSQL.name().equals(dbType)) {\n            tableConfig.setDelimitIdentifiers(true);\n        }\n\n        //\xe6\xb7\xbb\xe5\x8a\xa0GeneratedKey\xe4\xb8\xbb\xe9\x94\xae\xe7\x94\x9f\xe6\x88\x90\n\t\tif (StringUtils.isNotEmpty(generatorConfig.getGenerateKeys())) {\n            String dbType2 = dbType;\n            if (DbType.MySQL.name().equals(dbType2) || DbType.MySQL_8.name().equals(dbType)) {\n                dbType2 = "JDBC";\n                //dbType\xe4\xb8\xbaJDBC\xef\xbc\x8c\xe4\xb8\x94\xe9\x85\x8d\xe7\xbd\xae\xe4\xb8\xad\xe5\xbc\x80\xe5\x90\xafuseGeneratedKeys\xe6\x97\xb6\xef\xbc\x8cMybatis\xe4\xbc\x9a\xe4\xbd\xbf\xe7\x94\xa8Jdbc3KeyGenerator,\n                //\xe4\xbd\xbf\xe7\x94\xa8\xe8\xaf\xa5KeyGenerator\xe7\x9a\x84\xe5\xa5\xbd\xe5\xa4\x84\xe5\xb0\xb1\xe6\x98\xaf\xe7\x9b\xb4\xe6\x8e\xa5\xe5\x9c\xa8\xe4\xb8\x80\xe6\xac\xa1INSERT \xe8\xaf\xad\xe5\x8f\xa5\xe5\x86\x85\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87resultSet\xe8\x8e\xb7\xe5\x8f\x96\xe5\xbe\x97\xe5\x88\xb0 \xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe4\xb8\xbb\xe9\x94\xae\xe5\x80\xbc\xef\xbc\x8c\n                //\xe5\xb9\xb6\xe5\xbe\x88\xe5\xa5\xbd\xe7\x9a\x84\xe6\x94\xaf\xe6\x8c\x81\xe8\xae\xbe\xe7\xbd\xae\xe4\xba\x86\xe8\xaf\xbb\xe5\x86\x99\xe5\x88\x86\xe7\xa6\xbb\xe4\xbb\xa3\xe7\x90\x86\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x93\n                //\xe4\xbe\x8b\xe5\xa6\x82\xe9\x98\xbf\xe9\x87\x8c\xe4\xba\x91RDS + \xe8\xaf\xbb\xe5\x86\x99\xe5\x88\x86\xe7\xa6\xbb\xe4\xbb\xa3\xe7\x90\x86\n                //\xe6\x97\xa0\xe9\x9c\x80\xe6\x8c\x87\xe5\xae\x9a\xe4\xb8\xbb\xe5\xba\x93\n                //\xe5\xbd\x93\xe4\xbd\xbf\xe7\x94\xa8SelectKey\xe6\x97\xb6\xef\xbc\x8cMybatis\xe4\xbc\x9a\xe4\xbd\xbf\xe7\x94\xa8SelectKeyGenerator\xef\xbc\x8cINSERT\xe4\xb9\x8b\xe5\x90\x8e\xef\xbc\x8c\xe5\xa4\x9a\xe5\x8f\x91\xe9\x80\x81\xe4\xb8\x80\xe6\xac\xa1\xe6\x9f\xa5\xe8\xaf\xa2\xe8\xaf\xad\xe5\x8f\xa5\xef\xbc\x8c\xe8\x8e\xb7\xe5\xbe\x97\xe4\xb8\xbb\xe9\x94\xae\xe5\x80\xbc\n                //\xe5\x9c\xa8\xe4\xb8\x8a\xe8\xbf\xb0\xe8\xaf\xbb\xe5\x86\x99\xe5\x88\x86\xe7\xa6\xbb\xe8\xa2\xab\xe4\xbb\xa3\xe7\x90\x86\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xef\xbc\x8c\xe4\xbc\x9a\xe5\xbe\x97\xe4\xb8\x8d\xe5\x88\xb0\xe6\xad\xa3\xe7\xa1\xae\xe7\x9a\x84\xe4\xb8\xbb\xe9\x94\xae\n            }\n\t\t\ttableConfig.setGeneratedKey(new GeneratedKey(generatorConfig.getGenerateKeys(), dbType2, true, null));\n\t\t}\n\n        if (generatorConfig.getMapperName() != null) {\n            tableConfig.setMapperName(generatorConfig.getMapperName());\n        }\n        // add ignore columns\n        if (ignoredColumns != null) {\n            ignoredColumns.forEach(tableConfig::addIgnoredColumn);\n        }\n        if (columnOverrides != null) {\n            columnOverrides.forEach(tableConfig::addColumnOverride);\n        }\n        if (generatorConfig.isUseActualColumnNames()) {\n\t\t\ttableConfig.addProperty("useActualColumnNames", "true");\n        }\n\n\t\tif(generatorConfig.isUseTableNameAlias()){\n            tableConfig.setAlias(generatorConfig.getTableName());\n        }\n\n        JDBCConnectionConfiguration jdbcConfig = new JDBCConnectionConfiguration();\n        if (DbType.MySQL.name().equals(dbType) || DbType.MySQL_8.name().equals(dbType)) {\n\t        jdbcConfig.addProperty("nullCatalogMeansCurrent", "true");\n\t        // useInformationSchema\xe5\x8f\xaf\xe4\xbb\xa5\xe6\x8b\xbf\xe5\x88\xb0\xe8\xa1\xa8\xe6\xb3\xa8\xe9\x87\x8a\xef\xbc\x8c\xe4\xbb\x8e\xe8\x80\x8c\xe7\x94\x9f\xe6\x88\x90\xe7\xb1\xbb\xe6\xb3\xa8\xe9\x87\x8a\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbd\xbf\xe7\x94\xa8\xe8\xa1\xa8\xe7\x9a\x84\xe6\xb3\xa8\xe9\x87\x8a\n\t        jdbcConfig.addProperty("useInformationSchema", "true");\n        }\n        jdbcConfig.setDriverClass(DbType.valueOf(dbType).getDriverClass());\n        jdbcConfig.setConnectionURL(DbUtil.getConnectionUrlWithSchema(selectedDatabaseConfig));\n        jdbcConfig.setUserId(selectedDatabaseConfig.getUsername());\n        jdbcConfig.setPassword(selectedDatabaseConfig.getPassword());\n        if(DbType.Oracle.name().equals(dbType)){\n            jdbcConfig.getProperties().setProperty("remarksReporting", "true");\n        }\n        // java model\n        JavaModelGeneratorConfiguration modelConfig = new JavaModelGeneratorConfiguration();\n        modelConfig.setTargetPackage(generatorConfig.getModelPackage());\n        modelConfig.setTargetProject(generatorConfig.getProjectFolder() + "/" + generatorConfig.getModelPackageTargetFolder());\n        // Mapper configuration\n        SqlMapGeneratorConfiguration mapperConfig = new SqlMapGeneratorConfiguration();\n        mapperConfig.setTargetPackage(generatorConfig.getMappingXMLPackage());\n        mapperConfig.setTargetProject(generatorConfig.getProjectFolder() + "/" + generatorConfig.getMappingXMLTargetFolder());\n        // DAO\n        JavaClientGeneratorConfiguration daoConfig = new JavaClientGeneratorConfiguration();\n        daoConfig.setConfigurationType("XMLMAPPER");\n        daoConfig.setTargetPackage(generatorConfig.getDaoPackage());\n        daoConfig.setTargetProject(generatorConfig.getProjectFolder() + "/" + generatorConfig.getDaoTargetFolder());\n\n\n        context.setId("myid");\n        context.addTableConfiguration(tableConfig);\n        context.setJdbcConnectionConfiguration(jdbcConfig);\n        context.setJavaModelGeneratorConfiguration(modelConfig);\n        context.setSqlMapGeneratorConfiguration(mapperConfig);\n        context.setJavaClientGeneratorConfiguration(daoConfig);\n        // Comment\n        CommentGeneratorConfiguration commentConfig = new CommentGeneratorConfiguration();\n        commentConfig.setConfigurationType(DbRemarksCommentGenerator.class.getName());\n        if (generatorConfig.isComment()) {\n            commentConfig.addProperty("columnRemarks", "true");\n        }\n        if (generatorConfig.isAnnotation()) {\n            commentConfig.addProperty("annotations", "true");\n        }\n        context.setCommentGeneratorConfiguration(commentConfig);\n        // set java file encoding\n        context.addProperty(PropertyRegistry.CONTEXT_JAVA_FILE_ENCODING, generatorConfig.getEncoding());\n\n        //\xe5\xae\x9e\xe4\xbd\x93\xe6\xb7\xbb\xe5\x8a\xa0\xe5\xba\x8f\xe5\x88\x97\xe5\x8c\x96\n        PluginConfiguration serializablePluginConfiguration = new PluginConfiguration();\n        serializablePluginConfiguration.addProperty("type", "org.mybatis.generator.plugins.SerializablePlugin");\n        serializablePluginConfiguration.setConfigurationType("org.mybatis.generator.plugins.SerializablePlugin");\n        context.addPluginConfiguration(serializablePluginConfiguration);\n\n        // Lombok \xe6\x8f\x92\xe4\xbb\xb6\n        if (generatorConfig.isUseLombokPlugin()) {\n            PluginConfiguration pluginConfiguration = new PluginConfiguration();\n            pluginConfiguration.addProperty("type", "com.softwareloop.mybatis.generator.plugins.LombokPlugin");\n            pluginConfiguration.setConfigurationType("com.softwareloop.mybatis.generator.plugins.LombokPlugin");\n            context.addPluginConfiguration(pluginConfiguration);\n        }\n        // toString, hashCode, equals\xe6\x8f\x92\xe4\xbb\xb6\n        else if (generatorConfig.isNeedToStringHashcodeEquals()) {\n            PluginConfiguration pluginConfiguration1 = new PluginConfiguration();\n            pluginConfiguration1.addProperty("type", "org.mybatis.generator.plugins.EqualsHashCodePlugin");\n            pluginConfiguration1.setConfigurationType("org.mybatis.generator.plugins.EqualsHashCodePlugin");\n            context.addPluginConfiguration(pluginConfiguration1);\n            PluginConfiguration pluginConfiguration2 = new PluginConfiguration();\n            pluginConfiguration2.addProperty("type", "org.mybatis.generator.plugins.ToStringPlugin");\n            pluginConfiguration2.setConfigurationType("org.mybatis.generator.plugins.ToStringPlugin");\n            context.addPluginConfiguration(pluginConfiguration2);\n        }\n        // limit/offset\xe6\x8f\x92\xe4\xbb\xb6\n        if (generatorConfig.isOffsetLimit()) {\n            if (DbType.MySQL.name().equals(dbType) || DbType.MySQL_8.name().equals(dbType)\n\t\t            || DbType.PostgreSQL.name().equals(dbType)) {\n                PluginConfiguration pluginConfiguration = new PluginConfiguration();\n                pluginConfiguration.addProperty("type", "com.zzg.mybatis.generator.plugins.MySQLLimitPlugin");\n                pluginConfiguration.setConfigurationType("com.zzg.mybatis.generator.plugins.MySQLLimitPlugin");\n                context.addPluginConfiguration(pluginConfiguration);\n            }\n        }\n        //for JSR310\n        if (generatorConfig.isJsr310Support()) {\n            JavaTypeResolverConfiguration javaTypeResolverConfiguration = new JavaTypeResolverConfiguration();\n            javaTypeResolverConfiguration.setConfigurationType("com.zzg.mybatis.generator.plugins.JavaTypeResolverJsr310Impl");\n            context.setJavaTypeResolverConfiguration(javaTypeResolverConfiguration);\n        }\n        //forUpdate \xe6\x8f\x92\xe4\xbb\xb6\n        if(generatorConfig.isNeedForUpdate()) {\n            if (DbType.MySQL.name().equals(dbType)\n                    || DbType.PostgreSQL.name().equals(dbType)) {\n                PluginConfiguration pluginConfiguration = new PluginConfiguration();\n                pluginConfiguration.addProperty("type", "com.zzg.mybatis.generator.plugins.MySQLForUpdatePlugin");\n                pluginConfiguration.setConfigurationType("com.zzg.mybatis.generator.plugins.MySQLForUpdatePlugin");\n                context.addPluginConfiguration(pluginConfiguration);\n            }\n        }\n        //repository \xe6\x8f\x92\xe4\xbb\xb6\n        if(generatorConfig.isAnnotationDAO()) {\n            if (DbType.MySQL.name().equals(dbType) || DbType.MySQL_8.name().equals(dbType)\n                    || DbType.PostgreSQL.name().equals(dbType)) {\n                PluginConfiguration pluginConfiguration = new PluginConfiguration();\n                pluginConfiguration.addProperty("type", "com.zzg.mybatis.generator.plugins.RepositoryPlugin");\n                pluginConfiguration.setConfigurationType("com.zzg.mybatis.generator.plugins.RepositoryPlugin");\n                context.addPluginConfiguration(pluginConfiguration);\n            }\n        }\n        if (generatorConfig.isUseDAOExtendStyle()) {\n            if (DbType.MySQL.name().equals(dbType) || DbType.MySQL_8.name().equals(dbType)\n                    || DbType.PostgreSQL.name().equals(dbType)) {\n                PluginConfiguration pluginConfiguration = new PluginConfiguration();\n\t\t\t\tpluginConfiguration.addProperty("useExample", String.valueOf(generatorConfig.isUseExample()));\n\t\t\t\tpluginConfiguration.addProperty("type", "com.zzg.mybatis.generator.plugins.CommonDAOInterfacePlugin");\n                pluginConfiguration.setConfigurationType("com.zzg.mybatis.generator.plugins.CommonDAOInterfacePlugin");\n                context.addPluginConfiguration(pluginConfiguration);\n            }\n        }\n\n        context.setTargetRuntime("MyBatis3");\n\n        List<String> warnings = new ArrayList<>();\n        Set<String> fullyqualifiedTables = new HashSet<>();\n        Set<String> contexts = new HashSet<>();\n        ShellCallback shellCallback = new DefaultShellCallback(true); // override=true\n        MyBatisGenerator myBatisGenerator = new MyBatisGenerator(configuration, shellCallback, warnings);\n        // if overrideXML selected, delete oldXML ang generate new one\n\t\tif (generatorConfig.isOverrideXML()) {\n\t\t\tString mappingXMLFilePath = getMappingXMLFilePath(generatorConfig);\n\t\t\tFile mappingXMLFile = new File(mappingXMLFilePath);\n\t\t\tif (mappingXMLFile.exists()) {\n\t\t\t\tmappingXMLFile.delete();\n\t\t\t}\n\t\t}\n        myBatisGenerator.generate(progressCallback, contexts, fullyqualifiedTables);\n    }\n\n    private String getMappingXMLFilePath(GeneratorConfig generatorConfig) {\n\t\tStringBuilder sb = new StringBuilder();\n\t\tsb.append(generatorConfig.getProjectFolder()).append("/");\n\t\tsb.append(generatorConfig.getMappingXMLTargetFolder()).append("/");\n\t\tString mappingXMLPackage = generatorConfig.getMappingXMLPackage();\n\t\tif (StringUtils.isNotEmpty(mappingXMLPackage)) {\n\t\t\tsb.append(mappingXMLPackage.replace(".", "/")).append("/");\n\t\t}\n\t\tif (StringUtils.isNotEmpty(generatorConfig.getMapperName())) {\n\t\t\tsb.append(generatorConfig.getMapperName()).append(".xml");\n\t\t} else {\n\t\t\tsb.append(generatorConfig.getDomainObjectName()).append("Mapper.xml");\n\t\t}\n\n\t\treturn sb.toString();\n\t}\n\n\tpublic void setProgressCallback(ProgressCallback progressCallback) {\n        this.progressCallback = progressCallback;\n    }\n\n    public void setIgnoredColumns(List<IgnoredColumn> ignoredColumns) {\n        this.ignoredColumns = ignoredColumns;\n    }\n\n    public void setColumnOverrides(List<ColumnOverride> columnOverrides) {\n        this.columnOverrides = columnOverrides;\n    }\n}\n'