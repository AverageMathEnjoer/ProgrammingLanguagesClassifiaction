b"{-# LANGUAGE GADTs #-}\n{-# LANGUAGE RankNTypes #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n\nmodule Control.Monad.Trans.Crtn.Object where\n\nimport Control.Monad.State\nimport Control.Monad.Trans.Crtn\nimport Control.Monad.Trans.Except\n\n-- | input of method of an object with signature s\ndata Arg s = forall i o. Arg (s i o) i\n\n-- | output of methdo of an object with signature s\ndata Res s\n  = forall i o. Res (s i o) o\n  | Ign\n\n-- | Server object\ntype SObjT s m = SrvT (Arg s) (Res s) m\n\n-- | Client object\ntype CObjT s = CliT (Arg s) (Res s)\n\n-- | Server object base coroutine\ntype SObjBT s m = CrtnT (Res s) (Arg s) m\n\n-- | convenient error state monad for object\ntype EStT s m = ExceptT CrtnErr (StateT s m)\n\n-- |\nquery :: forall m s r. (Monad m) => CObjT s m r -> EStT (SObjT s m ()) m r\nquery cli = do\n  qserv <- lift get\n  let result :: m (Either CrtnErr (SrvT (Arg s) (Res s) m (), r))\n      result = qserv <==| cli\n      r2 :: StateT (SObjT s m ()) m (Either CrtnErr (SrvT (Arg s) (Res s) m (), r))\n      r2 = lift result\n  (qserv', r) <- ExceptT r2\n  lift (put qserv')\n  return r\n"