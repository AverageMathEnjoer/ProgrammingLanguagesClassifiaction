b'import Data.Array\nimport Debug.Trace\n\nsmallest :: Ord a => Int -> (Array Int a, Array Int a) -> a\nsmallest k (xa, ya) = search k (0, m + 1) (0, n + 1)\n    where (0, m) = bounds xa\n          (0, n) = bounds ya\n          search k (lx, rx) (ly,  ry)\n            | lx == rx  = trace ("lx == rx" ++ dump_vars k lx rx ly ry mx my) ya!k\n            | ly == ry  = trace ("ly == ry" ++ dump_vars k lx rx ly ry mx my) xa!k\n            | otherwise = case (xa!mx < ya!my, k <= mx + my) of\n                    (True, True)   -> trace ("TT: " ++ dump_vars k lx rx ly ry mx my) search k (lx, rx) (ly, my)\n                    (True, False)  -> trace ("TF: " ++ dump_vars k lx rx ly ry mx my) search (k - mx - 1) (mx, rx) (ly, ry)\n                    (False, True)  -> trace ("FT: " ++ dump_vars k lx rx ly ry mx my) search k (lx, mx) (ly, ry)\n                    (False, False) -> trace ("FF: " ++ dump_vars k lx rx ly ry mx my) search (k - my - 1) (lx, rx) (my, ry)\n            where mx = (lx + rx) `div` 2\n                  my = (ly + ry) `div` 2\n\ndump_vars k lx rx ly ry mx my =\n    " k = " ++ show k ++ "\\t" ++\n    "lx = " ++ show lx ++ "\\t" ++\n    "rx = " ++ show rx ++ "\\t" ++\n    "ly = " ++ show ly ++ "\\t" ++\n    "ry = " ++ show ry ++ "\\t" ++\n    "a = " ++ (if (0, mx) <= bounds xa then show(xa!mx) else "-") ++ "\\t" ++\n    "b = " ++ (if (0, my) <= bounds ya then show(ya!my) else "-") ++ "\\t" ++\n    "mx = " ++ show mx ++ "\\t" ++\n    "my = " ++ show my ++ "\\t" ++\n    "kd = " ++ show (mx + my - lx - ly)\n\nxs = [1, 2, 3, 9]\nys = [4, 10, 13, 33, 67]\n\nxa = listArray(0, length xs - 1) xs\nya = listArray(0, length ys - 1) ys\n\n\n'