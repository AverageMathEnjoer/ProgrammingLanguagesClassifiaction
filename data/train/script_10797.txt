b'\xef\xbb\xbf// UVa1349 Optimal Bus Route Design\n// Rujia Liu\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#include<vector>\n#include<algorithm>\n#include<cassert>\nusing namespace std;\n\nconst int maxn = 200 + 10;\nconst int INF = 1000000000;\n\nstruct Edge {\n  int from, to, cap, flow, cost;\n  Edge(int u, int v, int c, int f, int w):from(u),to(v),cap(c),flow(f),cost(w) {}\n};\n\nstruct MCMF {\n  int n, m;\n  vector<Edge> edges;\n  vector<int> G[maxn];\n  int inq[maxn];         // \xe6\x98\xaf\xe5\x90\xa6\xe5\x9c\xa8\xe9\x98\x9f\xe5\x88\x97\xe4\xb8\xad\n  int d[maxn];           // Bellman-Ford\n  int p[maxn];           // \xe4\xb8\x8a\xe4\xb8\x80\xe6\x9d\xa1\xe5\xbc\xa7\n  int a[maxn];           // \xe5\x8f\xaf\xe6\x94\xb9\xe8\xbf\x9b\xe9\x87\x8f\n\n  void init(int n) {\n    this->n = n;\n    for(int i = 0; i < n; i++) G[i].clear();\n    edges.clear();\n  }\n\n  void AddEdge(int from, int to, int cap, int cost) {\n    edges.push_back(Edge(from, to, cap, 0, cost));\n    edges.push_back(Edge(to, from, 0, 0, -cost));\n    m = edges.size();\n    G[from].push_back(m-2);\n    G[to].push_back(m-1);\n  }\n\n  bool BellmanFord(int s, int t, int& flow, int& cost) {\n    for(int i = 0; i < n; i++) d[i] = INF;\n    memset(inq, 0, sizeof(inq));\n    d[s] = 0; inq[s] = 1; p[s] = 0; a[s] = INF;\n\n    queue<int> Q;\n    Q.push(s);\n    while(!Q.empty()) {\n      int u = Q.front(); Q.pop();\n      inq[u] = 0;\n      for(int i = 0; i < G[u].size(); i++) {\n        Edge& e = edges[G[u][i]];\n        if(e.cap > e.flow && d[e.to] > d[u] + e.cost) {\n          d[e.to] = d[u] + e.cost;\n          p[e.to] = G[u][i];\n          a[e.to] = min(a[u], e.cap - e.flow);\n          if(!inq[e.to]) { Q.push(e.to); inq[e.to] = 1; }\n        }\n      }\n    }\n    if(d[t] == INF) return false;\n    flow += a[t];\n    cost += d[t] * a[t];\n    for(int u = t; u != s; u = edges[p[u]].from) {\n      edges[p[u]].flow += a[t];\n      edges[p[u]^1].flow -= a[t];\n    }\n    return true;\n  }\n\n  // \xe9\x9c\x80\xe8\xa6\x81\xe4\xbf\x9d\xe8\xaf\x81\xe5\x88\x9d\xe5\xa7\x8b\xe7\xbd\x91\xe7\xbb\x9c\xe4\xb8\xad\xe6\xb2\xa1\xe6\x9c\x89\xe8\xb4\x9f\xe6\x9d\x83\xe5\x9c\x88\n  int MincostMaxflow(int s, int t, int& cost) {\n    int flow = 0; cost = 0;\n    while(BellmanFord(s, t, flow, cost));\n    return flow;\n  }\n\n};\n\nMCMF g;\n\nint main() {\n  int n, m, d, k;\n  while(scanf("%d", &n) == 1 && n) {\n    g.init(n*2+2);\n    for(int u = 1; u <= n; u++) {\n      g.AddEdge(0, u, 1, 0);\n      g.AddEdge(n+u, n*2+1, 1, 0);\n    }\n    for(int i = 1; i <= n; i++) {\n      for(;;) {\n        int j;\n        scanf("%d", &j); if(j == 0) break;\n        scanf("%d", &d);\n        g.AddEdge(i, j+n, 1, d);\n      }\n    }\n\n    int cost;\n    int flow = g.MincostMaxflow(0, n*2+1, cost);\n    if(flow < n) printf("N\\n");\n    else printf("%d\\n", cost);\n  }\n  return 0;\n}\n'