b'#\' Export statistical output to a table in spreadsheet compatible format (.xlsx or .csv)\n#\' \n#\' Export currently showing R stats object or stats object obj to a Microsoft Excel / \n#\' LibreOffice Calc or comma-separated value file\n#\' \n#\' @importFrom utils methods write.csv write.csv2\n#\' @import stats  \n#\' @import openxlsx\n#\' @importFrom xtable xtable\n#\' @aliases table2spreadsheet table2excel table2csv table2csv2\n#\' @param x given R stats object to export; if set to \\code{NULL} the output of the \n#\' previous R command will be exported.\n#\' @param file name of output file. The .xlsx or .csv extension is added automatically.\n#\' @param type desired output type - \\code{"XLS"} for Excel and \\code{"CSV"}/\\code{"CSV2"} for CSV file. Note that \n#\' \\code{type="CSV2"} will generate a CSV file where the value separator is a semi-colon (";") and the decimal\n#\' separator is a comma (",")\n#\' @param append logical value - if \\code{TRUE} and \\code{type="XLS"} it will add a new woorksheet to the given \n#\' file, where file can also be a given corporate.\n#\' \\code{append=FALSE} any existing file will be overwritten. \n#\' @param sheetName a string giving the name of the new sheet that is created (only for \\code{type=="XLS"}). \n#\' It must be unique (case insensitive) from any existing sheet name in the file. \n#\' @param digits number of significant digits to show for all columns except\n#\' for the column with p values.\n#\' @param digitspvals number of significant digits to show for columns with p\n#\' values.\n#\' @param trim.pval a threshold below which the p-values are trimmed as \n#\' "< \\code{trim.pval}".\n#\' @param add.rownames logical specifying whether or not to add row names.\n#\' @param \\dots extra options are passed on to \\code{\\link[openxlsx]{createStyle}} for the formatting of the woorksheet.\n#\' This is only applicable for \\code{type=="XLS"}.\n# #\' @return \\code{\\link[flextable]{flextable}} object\n#\' @return A data frame \n#\' @details Columns corresponding to degrees of freedom (with header "Df" or "df")\n#\' are always given as integers. Objects that can be exported with \\code{\\link{table2office}} are \n#\' all those supported by \\code{\\link[xtable]{xtable}} and \\code{\\link{tidy}}. The function will\n#\' first use \\code{\\link[xtable]{xtable}} to format the data. If the data class is not supported by \n#\' \\code{\\link[xtable]{xtable}} the function will then use \\code{\\link{tidy}}. \n#\' The data classes suported by \\code{\\link[xtable]{xtable}} are: \n#\' \\itemize{\n#\'    \\item \\code{anova} \n#\'    \\item \\code{aov} \n#\'    \\item \\code{aovlist} \n#\'    \\item \\code{data.frame} \n#\'    \\item \\code{glm} \n#\'    \\item \\code{gmsar} \n#\'    \\item \\code{lagImpact} \n#\'    \\item \\code{lm} \n#\'    \\item \\code{matrix} \n#\'    \\item \\code{prcomp} \n#\'    \\item \\code{sarlm} \n#\'    \\item \\code{sarlm.pred} \n#\'    \\item \\code{spautolm} \n#\'    \\item \\code{sphet} \n#\'    \\item \\code{splm} \n#\'    \\item \\code{stsls} \n#\'    \\item \\code{summary.aov} \n#\'    \\item \\code{summary.aovlist} \n#\'    \\item \\code{summary.glm} \n#\'    \\item \\code{summary.gmsar} \n#\'    \\item \\code{summary.lm} \n#\'    \\item \\code{summary.prcomp} \n#\'    \\item \\code{summary.sarlm} \n#\'    \\item \\code{summary.spautolm} \n#\'    \\item \\code{summary.sphet} \n#\'    \\item \\code{summary.splm} \n#\'    \\item \\code{summary.stsls} \n#\'    \\item \\code{table} \n#\'    \\item \\code{ts} \n#\'    \\item \\code{zoo}\n#\'    } \n#\' The data classes suported by \\code{\\link{tidy}} are: \n#\' \\itemize{\n#\'    \\item \\code{aareg} \n#\'    \\item \\code{acf} \n#\'    \\item \\code{Arima} \n#\'    \\item \\code{betareg} \n#\'    \\item \\code{biglm} \n#\'    \\item \\code{binDesign} \n#\'    \\item \\code{binWidth} \n#\'    \\item \\code{brmsfit} \n#\'    \\item \\code{btergm} \n#\'    \\item \\code{cch} \n#\'    \\item \\code{character} \n#\'    \\item \\code{cld} \n#\'    \\item \\code{coeftest} \n#\'    \\item \\code{confint.glht} \n#\'    \\item \\code{cv.glmnet} \n#\'    \\item \\code{default} \n#\'    \\item \\code{density} \n#\'    \\item \\code{dgCMatrix} \n#\'    \\item \\code{dgTMatrix} \n#\'    \\item \\code{dist} \n#\'    \\item \\code{emmGrid} \n#\'    \\item \\code{ergm} \n#\'    \\item \\code{felm} \n#\'    \\item \\code{fitdistr} \n#\'    \\item \\code{ftable} \n#\'    \\item \\code{gam} \n#\'    \\item \\code{Gam} \n#\'    \\item \\code{gamlss} \n#\'    \\item \\code{geeglm} \n#\'    \\item \\code{glht} \n#\'    \\item \\code{glmnet} \n#\'    \\item \\code{glmRob} \n#\'    \\item \\code{gmm} \n#\'    \\item \\code{htest} \n#\'    \\item \\code{ivreg} \n#\'    \\item \\code{kappa} \n#\'    \\item \\code{kde} \n#\'    \\item \\code{kmeans} \n#\'    \\item \\code{Line} \n#\'    \\item \\code{Lines} \n#\'    \\item \\code{list} \n#\'    \\item \\code{lme} \n#\'    \\item \\code{lmodel2} \n#\'    \\item \\code{lmRob} \n#\'    \\item \\code{logical} \n#\'    \\item \\code{lsmobj} \n#\'    \\item \\code{manova} \n#\'    \\item \\code{map} \n#\'    \\item \\code{Mclust} \n#\'    \\item \\code{merMod} \n#\'    \\item \\code{mle2} \n#\'    \\item \\code{muhaz} \n#\'    \\item \\code{multinom} \n#\'    \\item \\code{nlrq} \n#\'    \\item \\code{nls} \n#\'    \\item \\code{NULL} \n#\'    \\item \\code{numeric} \n#\'    \\item \\code{orcutt} \n#\'    \\item \\code{pairwise.htest} \n#\'    \\item \\code{plm} \n#\'    \\item \\code{poLCA} \n#\'    \\item \\code{Polygon} \n#\'    \\item \\code{Polygons} \n#\'    \\item \\code{power.htest} \n#\'    \\item \\code{pyears} \n#\'    \\item \\code{rcorr} \n#\'    \\item \\code{ref.grid}\n#\'    \\item \\code{ridgelm} \n#\'    \\item \\code{rjags} \n#\'    \\item \\code{roc} \n#\'    \\item \\code{rowwise_df} \n#\'    \\item \\code{rq} \n#\'    \\item \\code{rqs} \n#\'    \\item \\code{sparseMatrix} \n#\'    \\item \\code{SpatialLinesDataFrame} \n#\'    \\item \\code{SpatialPolygons} \n#\'    \\item \\code{SpatialPolygonsDataFrame} \n#\'    \\item \\code{spec} \n#\'    \\item \\code{speedlm} \n#\'    \\item \\code{stanfit} \n#\'    \\item \\code{stanreg} \n#\'    \\item \\code{summary.glht} \n#\'    \\item \\code{summaryDefault} \n#\'    \\item \\code{survdiff} \n#\'    \\item \\code{survexp} \n#\'    \\item \\code{survfit} \n#\'    \\item \\code{survreg} \n#\'    \\item \\code{tbl_df} \n#\'    \\item \\code{TukeyHSD}\n#\'    }\n#\' @author Tom Wenseleers, Christophe Vanderaa\n#\' @example examples/table2spreadsheet.R\n#\' @seealso \\code{\\link{table2tex}}, \\code{\\link{table2html}}, \\code{\\link{table2office}}\n#\' @export\n#\' \ntable2spreadsheet = function(x = NULL, file = "Rtable", type = c("XLS","CSV","CSV2"), append = FALSE, sheetName="new sheet",\n                        digits = 2, digitspvals = 2, trim.pval = 1E-16, add.rownames = FALSE, ...) {\n \n  obj=x\n  if (is.null(obj)) {\n    outp = .Last.value # capture previously shown output or use passed object\n  } else {\n    outp = obj\n  }\n  if (is.null(outp)) stop("no R stats object available to export")\n  supobjects = unique(c(as.character(gsub("xtable.", "", methods(xtable))), \n                        as.character(gsub("tidy.", "", methods(tidy))),\n                        "xtabs"))\n  if (length(intersect(class(outp), supobjects)) == 0) stop(paste0(class(outp), " is currently not supported by table2office"))\n  \n  \n  type=toupper(type)\n  type=match.arg(type,c("XLS","CSV"))\n  \n  ext <- if(type=="XLS"){ \n    ".xlsx"\n  } else if(type == "CSV" || type == "CSV2"){\n    ".csv"\n  } \n  file = sub("^(.*)[.].*", "\\\\1", file)  # remove extension if given\n  file = paste0(file, ext)  # add extension\n  \n  # deal with specific classes of objects \n  if (inherits(outp, "summary.merMod")) {\n    outp <- data.frame(coef(summary(outp)), check.names = F)\n  } else if(inherits(outp, "Matrix")) {\n    outp <- as.data.frame(as.matrix(x))\n  } else if (inherits(outp, c("xtabs", "ftable"))) {\n    outp <- ftable(outp)\n  } \n  \n  # Depending on the data class, call xtable or tidy\n  if (length(intersect(class(outp), as.character(gsub("xtable.", "", methods(xtable))))) >= 1) {\n    tab <- xtable2(x=outp, ndigits = digits, ndigitspvals = digitspvals, trim.pval=trim.pval)\n  } else if (length(intersect(class(outp), as.character(gsub("tidy.", "", methods(tidy))))) >= 1) {\n    tab <- tidy2(x=outp, ndigits = digits, ndigitspvals = digitspvals, trim.pval=trim.pval)\n  } else { # should not occur\n    tab <- data.frame2(x=outp, ndigits = digits, ndigitspvals = digitspvals, trim.pval=trim.pval)\n  }\n  \n  if(type=="XLS"){\n    if (append & file.exists(file)){\n      doc <- loadWorkbook(file=file)\n    } else {\n      doc <- createWorkbook()\n    }\n    addWorksheet(doc, sheetName = sheetName)\n    writeData(doc, sheet = sheetName, x = tab, colNames = TRUE, rowNames = add.rownames, \n              headerStyle = createStyle(textDecoration="bold"), withFilter = FALSE)\n    sheetStyle <- createStyle(...)\n    addStyle(doc, sheet = sheetName, style = sheetStyle, \n             rows = rep(2:(nrow(tab)+1), ncol(tab)), \n             cols = rep((1+add.rownames):(ncol(tab)+add.rownames), each=nrow(tab)))\n    saveWorkbook(doc, file, overwrite = TRUE) \n  } else if(type == "CSV"){\n    write.csv(x=tab, file=file, quote=F, row.names = add.rownames)\n  } else if(type == "CSV2"){\n    write.csv2(x=tab, file=file, quote=F, row.names = add.rownames)\n  }\n  message(paste0("Exported table as ",file))\n  return(as.data.frame(tab))\n}\n\n#\' @describeIn table2spreadsheet\n#\' Export statistical output to a table in a Microsoft Office Excel/ LibreOffice Calc spreadsheet\n#\' @export\ntable2excel <- function(...) table2spreadsheet(..., type = "XLS")\n  \n#\' @describeIn table2spreadsheet\n#\' Export statistical output to a table in a CSV format ("," for value separation and "." for decimal)\n#\' @export\ntable2csv <- function(...) table2spreadsheet(..., type = "CSV")\n    \n#\' @describeIn table2spreadsheet\n#\' Export statistical output to a table in a CSV format (";" for value separation and "," for decimal)\n#\' @export\ntable2csv2 <- function(...) table2spreadsheet(..., type = "CSV2")\n  '