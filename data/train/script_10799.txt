b'package com.github.eprendre.sources_by_eprendre\n\nimport com.github.eprendre.tingshu.extensions.config\nimport com.github.eprendre.tingshu.sources.AudioUrlCustomExtractor\nimport com.github.eprendre.tingshu.sources.AudioUrlExtractor\nimport com.github.eprendre.tingshu.sources.TingShu\nimport com.github.eprendre.tingshu.utils.*\nimport org.jsoup.Jsoup\nimport java.net.URLEncoder\nimport java.security.MessageDigest\nimport java.security.NoSuchAlgorithmException\nimport java.util.*\nimport kotlin.collections.ArrayList\n\nobject XinMo : TingShu() {\n    override fun getSourceId(): String {\n        return "1c835d8272a74716b82758dd2422594c"\n    }\n\n    override fun getDesc(): String {\n        return "\xe6\x8e\xa8\xe8\x8d\x90\xe6\x8c\x87\xe6\x95\xb0:4\xe6\x98\x9f \xe2\xad\x90\xe2\xad\x90\xe2\xad\x90\xe2\xad\x90\\n" +\n                "\xe8\xb5\x84\xe6\xba\x90\xe6\x95\xb0\xe9\x87\x8f\xe5\xb0\x9a\xe5\x8f\xaf\xef\xbc\x8c\xe4\xbd\x86\xe5\x88\xab\xe8\xae\xbf\xe9\x97\xae\xe7\x9a\x84\xe5\xa4\xaa\xe9\xa2\x91\xe7\xb9\x81\xef\xbc\x8c\xe4\xbc\x9a\xe5\xb0\x81IP\xe7\x9a\x84"\n    }\n\n    override fun getUrl(): String {\n        return "http://m.ixinmoo.com/"\n    }\n\n    override fun getName(): String {\n        return "\xe5\xbf\x83\xe9\xad\x94\xe5\x90\xac\xe4\xb9\xa6"\n    }\n\n    override fun isWebViewNotRequired(): Boolean {//\xe5\xbd\x93\xe6\xba\x90\xe6\xb2\xa1\xe6\xb6\x89\xe5\x8f\x8a\xe5\x88\xb0webview\xe5\x88\x99\xe8\xbf\x94\xe5\x9b\x9etrue\xef\xbc\x8c\xe4\xbb\xa3\xe8\xa1\xa8\xe5\x9c\xa8\xe6\xb2\xa1\xe6\x9c\x89webview\xe7\x9a\x84\xe8\xae\xbe\xe5\xa4\x87\xe4\xb8\x8a\xe4\xb9\x9f\xe5\x8f\xaf\xe4\xbb\xa5\xe6\xad\xa3\xe5\xb8\xb8\xe4\xbd\xbf\xe7\x94\xa8\xe8\xbf\x99\xe4\xb8\xaa\xe6\xba\x90\n        return true\n    }\n\n    override fun search(keywords: String, page: Int): Pair<List<Book>, Int> {\n        val url = "http://m.ixinmoo.com/search.html"\n        val length = "searchword:${URLEncoder.encode(keywords, "utf8")}".length //\xe7\xbc\x96\xe7\xa0\x81\n        val conn = Jsoup.connect(url).config()\n        conn.referrer(url)\n        conn.data("searchword", keywords)\n        conn.cookie("ooo", getCookie())\n        conn.header("Content-Length", length.toString())\n        conn.header("Content-Type", "application/x-www-form-urlencoded")\n        conn.header(\n            "Accept",\n            "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"\n        )\n        conn.header("Accept-Encoding", "gzip, deflate")\n        conn.header("Accept-Language", "zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6")\n        conn.header("Cache-Control", "max-age=0")\n        conn.header("Connection", "keep-alive")\n        conn.header("Host", "m.ixinmoo.com")\n        conn.header("Origin", "http://m.ixinmoo.com")\n        conn.header("Upgrade-Insecure-Requests", "1")\n        val doc = conn.post()\n        val list = ArrayList<Book>()\n        doc.select(".xxzx > .list-ov-tw").forEach {\n            val coverUrl = it.selectFirst(".list-ov-t > a > img").absUrl("src")\n            val bookUrl = it.selectFirst(".list-ov-w > a").absUrl("href")\n            val title = it.select(".list-ov-w > a > .bt").text()\n            var author = it.select(".list-ov-w > a > .zz")[0].text()\n            var artist = it.select(".list-ov-w > a > .zz")[1].text()\n            list.add(Book(coverUrl, bookUrl, title, author, artist).apply {\n                this.status = getStatus(bookUrl)\n                this.sourceId = getSourceId()\n            })\n        }\n        return Pair(list, 1)\n    }\n\n    override fun getAudioUrlExtractor(): AudioUrlExtractor {\n        AudioUrlCustomExtractor.setUp { url ->\n            val ref = url.replaceAfterLast("/", "").removeSuffix("/") + ".html"\n            val date = Date().time.toString()\n            val str = "1234" + date + "115599"\n            val md5 = str.md5()\n            val ooo = "$date|$md5"\n            val doc = Jsoup.connect(url).config()\n                .referrer(ref)\n                .header(\n                    "Accept",\n                    "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"\n                )\n                .header("Accept-Encoding", "gzip,deflate")\n                .header("Accept-Language", "zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6")\n                .header("Connection", "keep-alive")\n                .header("Host", "m.ixinmoo.com")\n                .header("Referer", ref)\n                .header("Upgrade-Insecure-Requests", "1")\n                .cookie("ooo", ooo)\n                .get()\n            return@setUp doc.getElementsByTag("source")?.first()?.attr("src") ?: ""\n        }\n        return AudioUrlCustomExtractor\n    }\n\n    override fun getCategoryMenus(): List<CategoryMenu> {\n        val url = "http://m.ixinmoo.com/"\n        val doc = getUrl(url, url)\n        val list = ArrayList<CategoryMenu>()\n        val subMenu = doc.select(".dh > a").map {\n            CategoryTab(it.text(), it.absUrl("href"))\n        }\n        list.add(CategoryMenu("\xe5\x88\x97\xe8\xa1\xa8", subMenu))\n        return list\n    }\n\n    override fun getCategoryList(url: String): Category {\n        val doc = getUrl(url, "http://m.ixinmoo.com/")\n        val uiPage = doc.select(".pages.cate-pages.clearfix > ul > li")\n        val pageNum = uiPage.select("li")[1].text()\n        val nextUrl = uiPage.select("li")[2].selectFirst("a").absUrl("href")\n        val totalPage = pageNum.split("/")[1].toInt()\n        val currentPage = pageNum.split("/")[0].toInt()\n        val list = ArrayList<Book>()\n        doc.select(".xsdz > .list-ov-tw").forEach {\n            val coverUrl = it.selectFirst(".list-ov-t > a > img").absUrl("src")\n            val bookUrl = it.selectFirst(".list-ov-w > a").absUrl("href")\n            val title = it.select(".list-ov-w > a > .bt").text()\n            var author = it.select(".list-ov-w > a > .zz")[0].text()\n            var artist = it.select(".list-ov-w > a > .zz")[1].text()\n            list.add(Book(coverUrl, bookUrl, title, author, artist).apply {\n                this.status = getStatus(bookUrl)\n                this.sourceId = getSourceId()\n            })\n        }\n        return Category(list, currentPage, totalPage, url, nextUrl)\n    }\n\n    override fun getBookDetailInfo(bookUrl: String, loadEpisodes: Boolean, loadFullPages: Boolean): BookDetail {\n        val episodes = ArrayList<Episode>()\n        var info = ""\n        if (loadEpisodes) {\n            val doc = getUrl(bookUrl, bookUrl)\n            doc.select(".compress > ul > li").forEach {\n                episodes.add(Episode(it.text(), it.select("a").first().absUrl("href")))\n            }\n            info = doc.selectFirst(".book_intro").text()\n        }\n        return BookDetail(episodes, info)\n    }\n\n    private fun getUrl(url: String, ref: String): org.jsoup.nodes.Document {\n        val conn = Jsoup.connect(url).config()\n        conn.header("Connection", "keep-alive")\n        conn.header("Host", "m.ixinmoo.com")\n        conn.header("Upgrade-Insecure-Requests", "1")\n        conn.referrer(ref)\n        conn.cookie("ooo", getCookie())\n        return conn.get()\n    }\n\n    private fun String?.md5(): String {\n        try {\n            //\xe8\x8e\xb7\xe5\x8f\x96md5\xe5\x8a\xa0\xe5\xaf\x86\xe5\xaf\xb9\xe8\xb1\xa1\n            val instance: MessageDigest = MessageDigest.getInstance("MD5")\n            //\xe5\xaf\xb9\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe5\x8a\xa0\xe5\xaf\x86\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe5\xad\x97\xe8\x8a\x82\xe6\x95\xb0\xe7\xbb\x84\n            val digest: ByteArray = instance.digest(this?.toByteArray())\n            var sb: StringBuffer = StringBuffer()\n            for (b in digest) {\n                //\xe8\x8e\xb7\xe5\x8f\x96\xe4\xbd\x8e\xe5\x85\xab\xe4\xbd\x8d\xe6\x9c\x89\xe6\x95\x88\xe5\x80\xbc\n                var i: Int = b.toInt() and 0xff\n                //\xe5\xb0\x86\xe6\x95\xb4\xe6\x95\xb0\xe8\xbd\xac\xe5\x8c\x96\xe4\xb8\xba16\xe8\xbf\x9b\xe5\x88\xb6\n                var hexString = Integer.toHexString(i)\n                if (hexString.length < 2) {\n                    //\xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe4\xb8\x80\xe4\xbd\x8d\xe7\x9a\x84\xe8\xaf\x9d\xef\xbc\x8c\xe8\xa1\xa50\n                    hexString = "0" + hexString\n                }\n                sb.append(hexString)\n            }\n            return sb.toString()\n\n        } catch (e: NoSuchAlgorithmException) {\n            e.printStackTrace()\n        }\n        return ""\n    }\n\n    private fun getCookie(): String {\n        val date = Date().time.toString()\n        val str = "1234" + date + "115599"\n        return "$date|${str.md5()}"\n    }\n\n    private fun getStatus(bookUrl: String): String {\n        return "\xe5\xae\x8c\xe7\xbb\x93"\n    }\n\n}'