b'#include "stdafx.h"\n#include "AddAssetDialog.h"\n#include "resource.h"\n#include "../libStringConverter/convert.h"\n#include "MonoBehaviourManager.h"\n#include "CreateEmptyValueField.h"\n#include <WindowsX.h>\n#include <unordered_map>\n\nvoid AddAssetDialog::open()\n{\n\tDialogBoxParam(appContext.getMainWindow().getHInstance(),\n\t\tMAKEINTRESOURCE(IDD_ADDASSET),\n\t\tappContext.getMainWindow().getWindow(),\n\t\tDlgProc, (LPARAM)this);\n}\n\nvoid AddAssetDialog::EnumScriptIndices_HandleMonoScript(AssetsFileContextInfo *pSourceFile, unsigned int scriptFileRefIdx,\n\tlong long int scriptPathID, std::vector<ScriptIdxDescriptor> &descriptors)\n{\n\tbool exists = false;\n\tfor (size_t i = 0; i < descriptors.size(); i++)\n\t{\n\t\tif (descriptors[i].monoScriptFileIDRel == scriptFileRefIdx\n\t\t\t&& descriptors[i].monoScriptPathID == scriptPathID)\n\t\t{\n\t\t\texists = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (!exists)\n\t{\n\t\tScriptIdxDescriptor descriptor = {};\n\t\tdescriptor.monoClassID = 0xFFFF;\n\t\tdescriptor.isNewClassID = false;\n\t\tdescriptor.monoScriptFileIDRel = scriptFileRefIdx;\n\t\tdescriptor.monoScriptPathID = scriptPathID;\n\t\tdescriptors.push_back(descriptor);\n\t}\n}\n\nunsigned int AddAssetDialog::findRelFileID(AssetsFileContextInfo *pSourceFile, unsigned int targetFileID)\n{\n\tif (targetFileID == pSourceFile->getFileID())\n\t\treturn 0;\n\n\tunsigned int targetFileIDRel = (unsigned int)-1;\n\tauto refLock = pSourceFile->lockReferencesRead();\n\tconst std::vector<unsigned int> &sourceReferences = pSourceFile->getReferencesRead(refLock);\n\n\tauto targetFileIDRefIt = std::find(sourceReferences.begin(), sourceReferences.end(), targetFileID);\n\tif (targetFileIDRefIt != sourceReferences.end())\n\t\ttargetFileIDRel = (unsigned int)(std::distance(sourceReferences.begin(), targetFileIDRefIt) + 1);\n\n\treturn targetFileIDRel;\n}\n\nvoid AddAssetDialog::EnumScriptIndices_HandleMonoBehaviour(AssetsFileContextInfo *pSourceFile,\n\tAssetIdentifier &behaviourAsset,\n\tAssetTypeTemplateField *pBehaviourBase, std::vector<ScriptIdxDescriptor> &descriptors)\n{\n\tif (!behaviourAsset.resolve(appContext))\n\t\treturn;\n\tIAssetsReader_ptr pReader = behaviourAsset.makeReader();\n\tif (pReader == nullptr)\n\t\treturn;\n\t\n\tAssetTypeInstance instance(1, &pBehaviourBase, behaviourAsset.getDataSize(), pReader.get(), behaviourAsset.isBigEndian());\n\tAssetTypeValueField *pBaseField = instance.GetBaseField();\n\tif (pBaseField == nullptr)\n\t\treturn;\n\n\tAssetTypeValue *pFileIDValue = pBaseField->Get("m_Script")->Get("m_FileID")->GetValue();\n\tAssetTypeValue *pPathIDValue = pBaseField->Get("m_Script")->Get("m_PathID")->GetValue();\n\tif (pFileIDValue == nullptr || pPathIDValue == nullptr)\n\t\treturn;\n\n\tunsigned int scriptFileID_RelBehaviour = pFileIDValue->AsUInt();\n\tunsigned int scriptFileID = behaviourAsset.pFile->resolveRelativeFileID(pFileIDValue->AsUInt());\n\tlong long int scriptPathID = pPathIDValue->AsInt64();\n\tif (scriptFileID == 0 || scriptPathID == 0)\n\t\treturn;\n\n\tunsigned int scriptFileIDRel = findRelFileID(pSourceFile, scriptFileID);\n\tif (scriptFileIDRel == (unsigned int)-1)\n\t\treturn;\n\n\tstruct {\n\t\tbool operator()(AssetsFileContextInfo *pSourceFile, AppContext &appContext,\n\t\t\tAssetIdentifier &behaviourAsset, AssetTypeTemplateField *pPureBehaviourBase)\n\t\t{\n\t\t\tAssetTypeTemplateField fullBehaviourBase;\n\t\t\tif (pSourceFile->MakeTemplateField(&fullBehaviourBase, appContext,\n\t\t\t\t\tbehaviourAsset.getClassID(appContext), behaviourAsset.getMonoScriptID(appContext), &behaviourAsset)\n\t\t\t\t&& fullBehaviourBase.children.size() > pPureBehaviourBase->children.size())\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t} getExtendedTypeInfoPresent;\n\n\tbool exists = false;\n\tfor (size_t i = 0; i < descriptors.size(); i++)\n\t{\n\t\tif (descriptors[i].monoScriptFileIDRel == scriptFileIDRel\n\t\t\t&& descriptors[i].monoScriptPathID == scriptPathID)\n\t\t{\n\t\t\tif (behaviourAsset.fileID == pSourceFile->getFileID())\n\t\t\t{\n\t\t\t\tif (descriptors[i].monoClassID == (decltype(descriptors[i].monoClassID))-1)\n\t\t\t\t\tdescriptors[i].extendedTypeInfoPresent = getExtendedTypeInfoPresent(pSourceFile, appContext, behaviourAsset, pBehaviourBase);\n\t\t\t\tdescriptors[i].monoClassID = behaviourAsset.getMonoScriptID(appContext);\n\t\t\t}\n\t\t\texists = true;\n\t\t\tbreak;\n\t\t}\n\t\telse if (descriptors[i].monoClassID == behaviourAsset.getMonoScriptID(appContext))\n\t\t{\n\t\t\texists = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (!exists)\n\t{\n\t\tScriptIdxDescriptor descriptor = {};\n\t\tdescriptor.monoClassID = behaviourAsset.getMonoScriptID(appContext);\n\t\tdescriptor.isNewClassID = false;\n\t\tdescriptor.monoScriptFileIDRel = scriptFileIDRel;\n\t\tdescriptor.monoScriptPathID = scriptPathID;\ndescriptor.extendedTypeInfoPresent = getExtendedTypeInfoPresent(pSourceFile, appContext, behaviourAsset, pBehaviourBase);\n\n\t\tdescriptors.push_back(descriptor);\n\t}\n}\n\nint AddAssetDialog::GetTextExtent(HWND hComboBox, const TCHAR *text)\n{\n\tHDC hListDC = GetDC(hComboBox);\n\tHGDIOBJ hOrigObject = SelectObject(hListDC, GetWindowFont(hComboBox));\n\tRECT textRect = {};\n\tDrawText(hListDC, text, -1, &textRect, DT_SINGLELINE | DT_CALCRECT);\n\tSelectObject(hListDC, hOrigObject);\n\tReleaseDC(hComboBox, hListDC);\n\n\treturn textRect.right-textRect.left + 4;\n}\n\nbool AddAssetDialog::EnumScriptIndices(AssetsFileContextInfo *pFile, std::vector<ScriptIdxDescriptor> &descriptors)\n{\n\tdescriptors.clear();\n\n\tuint16_t maxScriptIndex = 0xFFFF; //max script index of fileID\n\tconst std::vector<unsigned int> references = pFile->getReferences();\n\t\n\t//Enumerate the MonoScript assets reachable from pFile (i.e. inside pFile or in a referenced file).\n\t// -> Store the relative file ID and path ID.\n\t// -> Retrieve the script index inside pFile, if a MonoBehavior asset exists for that script (otherwise 0xFFFF).\n\t//Store the result in descriptors.\n\tbool useLongPathID = false;\n\t{\n\t\tfor (unsigned int i = 0; i <= references.size(); i++)\n\t\t{\n\t\t\tunsigned int targetFileID = 0;\n\t\t\tif (i == 0) targetFileID = pFile->getFileID();\n\t\t\telse targetFileID = references[i-1];\n\t\t\tFileContextInfo_ptr pTargetFileAny; \n\t\t\tif (targetFileID == 0\n\t\t\t\t|| !(pTargetFileAny = appContext.getContextInfo(targetFileID))\n\t\t\t\t|| pTargetFileAny->getFileContext() == nullptr\n\t\t\t\t|| pTargetFileAny->getFileContext()->getType() != FileContext_Assets)\n\t\t\t\tcontinue;\n\t\t\tAssetsFileContextInfo *pTargetFile = reinterpret_cast<AssetsFileContextInfo*>(pTargetFileAny.get());\n\n\t\t\tint scriptClassId = pTargetFile->GetClassByName("MonoScript");\n\t\t\tint behaviourClassId = pTargetFile->GetClassByName("MonoBehaviour");\n\n\t\t\tAssetTypeTemplateField behaviourBase;\n\t\t\tif (behaviourClassId >= 0)\n\t\t\t\tpTargetFile->MakeTemplateField(&behaviourBase, appContext, behaviourClassId);\n\n\t\t\tfor (AssetIterator iter(pTargetFile); !iter.isEnd(); ++iter)\n\t\t\t{\n\t\t\t\tAssetIdentifier curAsset;\n\t\t\t\titer.get(curAsset);\n\t\t\t\tcurAsset.resolve(appContext);\n\t\t\t\tif (curAsset.getClassID() == scriptClassId)\n\t\t\t\t{\n\t\t\t\t\tEnumScriptIndices_HandleMonoScript(pFile, i, (long long)curAsset.pathID, descriptors);\n\t\t\t\t}\n\t\t\t\telse if (targetFileID == pFile->getFileID() && curAsset.getMonoScriptID() != 0xFFFF)\n\t\t\t\t{\n\t\t\t\t\t//MonoBehaviours are used to retrieve the expected script index, which is different for each .assets file.\n\t\t\t\t\tEnumScriptIndices_HandleMonoBehaviour(pFile, curAsset, &behaviourBase, descriptors);\n\t\t\t\t\tif (curAsset.getMonoScriptID() > maxScriptIndex || maxScriptIndex == 0xFFFF)\n\t\t\t\t\t\tmaxScriptIndex = curAsset.getMonoScriptID();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t//Cache the temporarily (but \'randomly\') needed MonoScript deserialization templates.\n\t//-> Retrievable through getScriptTemplate below.\n\tstd::unordered_map<unsigned int, std::unique_ptr<AssetTypeTemplateField>> scriptTemplatesByFileID;\n\t//Ancient pre-C++11 lambda equivalent (TODO: modernize this).\n\tstruct _Lambda_GetScriptTemplate {\n\t\tstd::unordered_map<unsigned int, std::unique_ptr<AssetTypeTemplateField>> &scriptTemplatesByFileID;\n\t\tAppContext &appContext;\n\t\t_Lambda_GetScriptTemplate(decltype(scriptTemplatesByFileID) &scriptTemplatesByFileID, AppContext &appContext)\n\t\t\t: scriptTemplatesByFileID(scriptTemplatesByFileID), appContext(appContext)\n\t\t{}\n\t\tAssetTypeTemplateField *operator()(unsigned int fileID)\n\t\t{\n\t\t\tauto entryIt = scriptTemplatesByFileID.find(fileID);\n\t\t\tif (entryIt != scriptTemplatesByFileID.end())\n\t\t\t\treturn entryIt->second.get();\n\t\t\tFileContextInfo_ptr pContextInfo = appContext.getContextInfo(fileID);\n\t\t\tif (pContextInfo == nullptr\n\t\t\t\t|| pContextInfo->getFileContext() == nullptr\n\t\t\t\t|| pContextInfo->getFileContext()->getType() != FileContext_Assets)\n\t\t\t\treturn nullptr;\n\t\t\tAssetsFileContextInfo *pFile = reinterpret_cast<AssetsFileContextInfo*>(pContextInfo.get());\n\t\t\tint32_t scriptClassID = pFile->GetClassByName("MonoScript");\n\t\t\tif (scriptClassID < 0)\n\t\t\t\treturn nullptr;\n\t\t\tstd::unique_ptr<AssetTypeTemplateField> pTemplate(new AssetTypeTemplateField());\n\t\t\tif (pFile->MakeTemplateField(pTemplate.get(), appContext, scriptClassID) && pTemplate->children.size() > 0)\n\t\t\t{\n\t\t\t\treturn (scriptTemplatesByFileID[fileID] = std::move(pTemplate)).get();\n\t\t\t}\n\t\t\treturn nullptr;\n\t\t}\n\t} getScriptTemplate(scriptTemplatesByFileID, appContext);\n\n\t//For each enumerated MonoScript:\n\t// -> Retrieve the hash for the script properties\n\t// -> Generate a human-facing identifier from the strings inside the MonoScript.\n\tfor (size_t i = 0; i < descriptors.size(); i++)\n\t{\n\t\tScriptIdxDescriptor &descriptor = descriptors[i];\n\t\tdescriptor.propertiesHash.qValue[0] = descriptor.propertiesHash.qValue[1] = 0;\n\t\tif (descriptor.monoClassID == 0xFFFF)\n\t\t{\n\t\t\t//Assign the new script index.\n\t\t\t//-> The user will only select one from the descriptor vector,\n\t\t\t//   i.e. the potential future script index is the same across all new ones.\n\t\t\tdescriptor.monoClassID = maxScriptIndex + 1;\n\t\t\tdescriptor.isNewClassID = true;\n\t\t}\n\t\t\n\t\tunsigned int scriptFileID = 0;\n\t\tif (descriptor.monoScriptFileIDRel == 0) scriptFileID = pFile->getFileID();\n\t\telse scriptFileID = references[descriptor.monoScriptFileIDRel-1];\n\t\tFileContextInfo_ptr pScriptFileAny; \n\t\tif (scriptFileID == 0\n\t\t\t|| !(pScriptFileAny = appContext.getContextInfo(scriptFileID))\n\t\t\t|| pScriptFileAny->getFileContext() == nullptr\n\t\t\t|| pScriptFileAny->getFileContext()->getType() != FileContext_Assets)\n\t\t\tcontinue;\n\t\tAssetsFileContextInfo *pScriptFile = reinterpret_cast<AssetsFileContextInfo*>(pScriptFileAny.get());\n\n\t\tint scriptClassId = pScriptFile->GetClassByName("MonoScript");\n\t\tAssetTypeTemplateField *pScriptTemplate = getScriptTemplate(scriptFileID);\n\t\tif (pScriptTemplate == nullptr)\n\t\t\tcontinue;\n\t\tAssetIdentifier scriptAsset(std::shared_ptr<AssetsFileContextInfo>(pScriptFileAny, pScriptFile), (pathid_t)descriptor.monoScriptPathID);\n\t\tif (!scriptAsset.resolve(appContext))\n\t\t{\n\t\t\tassert(false);\n\t\t\tcontinue;\n\t\t}\n\t\tIAssetsReader_ptr pReader = scriptAsset.makeReader(appContext);\n\t\tif (pReader == nullptr)\n\t\t{\n\t\t\tassert(false);\n\t\t\tcontinue;\n\t\t}\n\t\tAssetTypeInstance scriptInstance = AssetTypeInstance(1, &pScriptTemplate, scriptAsset.getDataSize(),\n\t\t\tpReader.get(), scriptAsset.isBigEndian());\n\n\t\tAssetTypeValueField *pScriptBase = scriptInstance.GetBaseField();\n\t\tAssetTypeValueField *pScriptClassNameField; const char *scriptClassName;\n\t\tAssetTypeValueField *pScriptNamespaceField; const char *scriptNamespace;\n\t\tAssetTypeValueField *pScriptAssemblyNameField; const char *scriptAssemblyName;\n\t\tif ((pScriptBase != NULL) && \n\t\t\t(pScriptClassNameField = pScriptBase->Get("m_ClassName"))->GetValue()\n\t\t\t\t&& (scriptClassName = pScriptClassNameField->GetValue()->AsString()) &&\n\t\t\t(pScriptNamespaceField = pScriptBase->Get("m_Namespace"))->GetValue()\n\t\t\t\t&& (scriptNamespace = pScriptNamespaceField->GetValue()->AsString()))\n\t\t{\n\t\t\tAssetTypeValueField *pScriptPropertiesHashField = pScriptBase->Get("m_PropertiesHash");\n\t\t\tif (!pScriptPropertiesHashField->IsDummy() && pScriptPropertiesHashField->GetChildrenCount() == 16)\n\t\t\t{\n\t\t\t\tfor (int j = 0; j < 16; j++)\n\t\t\t\t{\n\t\t\t\t\tAssetTypeValueField *pCurField = pScriptPropertiesHashField->Get(j);\n\t\t\t\t\tAssetTypeValue *pCurByte = pCurField->GetValue();\n\t\t\t\t\tif (!pCurByte || pCurByte->GetType() != ValueType_UInt8)\n\t\t\t\t\t{\n\t\t\t\t\t\tassert(false); //Class database invalid / unsupported here? Not critical.\n\t\t\t\t\t\tdescriptor.propertiesHash.qValue[0] = descriptor.propertiesHash.qValue[1] = 0;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tdescriptor.propertiesHash.bValue[j] = (uint8_t)pCurByte->AsUInt();\n\t\t\t\t}\n\t\t\t}\n\t\t\tstd::string scriptDesc(scriptNamespace);\n\t\t\tif (scriptDesc.size() > 0)\n\t\t\t\tscriptDesc += ".";\n\t\t\tscriptDesc += scriptClassName;\n\t\t\tif ((pScriptAssemblyNameField = pScriptBase->Get("m_AssemblyName"))->GetValue()\n\t\t\t\t&& (scriptAssemblyName = pScriptAssemblyNameField->GetValue()->AsString()))\n\t\t\t{\n\t\t\t\tscriptDesc += " (";\n\t\t\t\tscriptDesc += scriptAssemblyName;\n\t\t\t\tscriptDesc += ")";\n\t\t\t}\n\t\t\telse\n\t\t\t\tscriptAssemblyName = "";\n\t\t\tdescriptor.scriptDescText = std::move(scriptDesc);\n\t\t}\n\t}\n\t\n\treturn true;\n}\n\npathid_t AddAssetDialog::getFreePathID(AssetsFileContextInfo *pFile)\n{\n\tpathid_t pathID = 1;\n\tsize_t numAssets = 0;\n\tfor (AssetIterator iter(pFile); !iter.isEnd(); ++iter)\n\t{\n\t\tAssetIdentifier asset;\n\t\titer.get(asset);\n\t\t++numAssets;\n\t\tif (asset.pathID >= pathID)\n\t\t\tpathID = asset.pathID + 1;\n\t}\n\tif (pathID == 0 || pathID == (unsigned long long)UINT_MAX+1)\n\t{\n\t\tstd::vector<pathid_t> allPathIDs;\n\t\tallPathIDs.reserve(numAssets);\n\t\tfor (AssetIterator iter(pFile); !iter.isEnd(); ++iter)\n\t\t{\n\t\t\tAssetIdentifier asset;\n\t\t\titer.get(asset);\n\t\t\tallPathIDs.push_back(asset.pathID);\n\t\t\tassert(asset.pathID > 0);\n\t\t}\n\t\tstd::sort(allPathIDs.begin(), allPathIDs.end());\n\t\tif (!allPathIDs.empty() && allPathIDs[0] > 1)\n\t\t\treturn 1; //Path ID 1 is empty.\n\t\tfor (size_t i = 1; i < allPathIDs.size(); ++i)\n\t\t\tif (allPathIDs[i] - allPathIDs[i-1] > 1)\n\t\t\t\treturn allPathIDs[i-1] + 1;\n\t}\n\telse\n\t\treturn pathID;\n\treturn 0;\n}\n\nINT_PTR CALLBACK AddAssetDialog::DlgProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)\n{\n\tAddAssetDialog *pThis = (AddAssetDialog*)GetWindowLongPtr(hDlg, GWLP_USERDATA);\n\tstatic const char *addAsset_MonoBehavMessage \n\t\t= "Additional MonoBehaviour type information can possibly be retrieved in order to generate valid assets.\\n"\n\t\t"Do you want to do that now? Otherwise, the new asset may be invalid.";\n\tint wmId, wmEvent;\n\tUNREFERENCED_PARAMETER(lParam);\n\tINT_PTR ret = (INT_PTR)FALSE;\n\tswitch (message)\n\t{\n\tcase WM_CLOSE:\n\tcase WM_DESTROY:\n\t\t//OnPluginListCancel(pMainWindow, hDlg);\n\t\tbreak;\n\tcase WM_INITDIALOG:\n\t\t{\n\t\t\tSetWindowLongPtr(hDlg, GWLP_USERDATA, lParam);\n\t\t\tpThis = (AddAssetDialog*)lParam;\n\t\t\tpThis->scriptDescriptors.clear();\n\n\t\t\tHWND hWndOptions = GetDlgItem(hDlg, IDC_COMBOOPTIONLIST);\n\t\t\tHWND hWndFileId = GetDlgItem(hDlg, IDC_COMBOFILEID);\n\t\t\tHWND hWndPathId = GetDlgItem(hDlg, IDC_EDITPATHID);\n\t\t\tHWND hWndClassId = GetDlgItem(hDlg, IDC_EDITCLASSID);\n\t\t\tHWND hWndMonoClassId = GetDlgItem(hDlg, IDC_EDITMONOCLASSID);\n\t\t\tHWND hWndValidAsset = GetDlgItem(hDlg, IDC_CKVALIDASSET);\n\t\t\tHWND hWndStaticScriptClass = GetDlgItem(hDlg, IDC_STATICSCRIPTCLASS);\n\t\t\tHWND hWndScriptClass = GetDlgItem(hDlg, IDC_COMBOSCRIPTCLASS);\n\n\t\t\tCOMBOBOXINFO scriptClassInfo = {};\n\t\t\tscriptClassInfo.cbSize = sizeof(COMBOBOXINFO);\n\t\t\tif (GetComboBoxInfo(hWndScriptClass, &scriptClassInfo))\n\t\t\t{\n\t\t\t\t//Allow horizontal scroll in the script combo box.\n\t\t\t\tSetWindowLong(scriptClassInfo.hwndList, GWL_STYLE, GetWindowLong(scriptClassInfo.hwndList, GWL_STYLE) | WS_HSCROLL);\n\t\t\t}\n\n\t\t\tComboBox_AddString(hWndOptions, _T("Custom"));\n\t\t\tComboBox_AddString(hWndOptions, _T("MonoBehaviour"));\n\t\t\t//Initialize the plugin list using an empty asset interface list (gather the supported plugins).\n\t\t\t//InitPluginList(pMainWindow, hDlg, std::vector<CAssetInterface>(), PluginAction_CREATE);\n\t\t\tComboBox_SetCurSel(hWndOptions, 0);\n\t\t\t\n\t\t\tComboBox_ResetContent(hWndFileId);\n\t\t\tint cbFileIdIdx = 0;\n\t\t\tlong long int pathId = 1;\n\t\t\tauto &fileEntries = pThis->appContext.getMainWindow().getFileEntries();\n\t\t\tfor (auto fileIt = fileEntries.begin(); fileIt != fileEntries.end(); ++fileIt)\n\t\t\t{\n\t\t\t\tif (fileIt->pContextInfo && \n\t\t\t\t\tfileIt->pContextInfo->getFileContext() && \n\t\t\t\t\tfileIt->pContextInfo->getFileContext()->getType() == FileContext_Assets)\n\t\t\t\t{\n\t\t\t\t\tchar referenceFileIDTmp[32];\n\t\t\t\t\tsprintf_s(referenceFileIDTmp, "%u - ", fileIt->pContextInfo->getFileID());\n\t\t\t\t\tstd::string targetName8 = std::string(referenceFileIDTmp) + fileIt->pContextInfo->getFileName();\n\t\t\t\t\tauto upTargetNameT = unique_MultiByteToTCHAR(targetName8.c_str());\n\t\t\t\t\tComboBox_AddString(hWndFileId, upTargetNameT.get());\n\t\t\t\t\tComboBox_SetItemData(hWndFileId, cbFileIdIdx, fileIt->pContextInfo->getFileID());\n\t\t\t\t\tif (cbFileIdIdx == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tAssetsFileContextInfo *pAssetsInfo = reinterpret_cast<AssetsFileContextInfo*>(fileIt->pContextInfo.get());\n\t\t\t\t\t\tpThis->EnumScriptIndices(pAssetsInfo, pThis->scriptDescriptors);\n\t\t\t\t\t\tpathId = (long long int)pThis->getFreePathID(pAssetsInfo);\n\t\t\t\t\t}\n\t\t\t\t\t++cbFileIdIdx;\n\t\t\t\t\tif (cbFileIdIdx == INT_MAX)\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tComboBox_ResetContent(hWndScriptClass);\n\t\t\tint cbHorizExtent = 0;\n\t\t\tfor (size_t i = 0; i < pThis->scriptDescriptors.size(); ++i)\n\t\t\t{\n\t\t\t\tsize_t descLenT = 0;\n\t\t\t\tTCHAR *classDescT = _MultiByteToTCHAR(pThis->scriptDescriptors[i].scriptDescText.c_str(), descLenT);\n\t\t\t\tint idx = ComboBox_AddString(hWndScriptClass, classDescT);\n\t\t\t\tcbHorizExtent = std::max<int>(cbHorizExtent, GetTextExtent(hWndScriptClass, classDescT));\n\t\t\t\tif (idx != CB_ERR)\n\t\t\t\t\tComboBox_SetItemData(hWndScriptClass, idx, i);\n\t\t\t\t_FreeTCHAR(classDescT);\n\t\t\t}\n\t\t\tCOMBOBOXINFO comboBoxInfo = {};\n\t\t\tcomboBoxInfo.cbSize = sizeof(COMBOBOXINFO);\n\t\t\tif (GetComboBoxInfo(hWndScriptClass, &comboBoxInfo))\n\t\t\t\tListBox_SetHorizontalExtent(comboBoxInfo.hwndList, cbHorizExtent);\n\t\t\tComboBox_SetCurSel(hWndScriptClass, 0);\n\n\t\t\tComboBox_SetCurSel(hWndFileId, 0);\n\n\t\t\tEdit_SetText(hWndClassId, TEXT("0"));\n\t\t\tEdit_SetText(hWndMonoClassId, TEXT("-1"));\n\t\t\tButton_SetCheck(hWndValidAsset, TRUE);\n\t\t\tShowWindow(hWndStaticScriptClass, SW_HIDE);\n\t\t\tShowWindow(hWndScriptClass, SW_HIDE);\n\n\t\t\tTCHAR numTmp[22];\n\t\t\t_stprintf_s(numTmp, TEXT("%lld"), pathId);\n\t\t\tEdit_SetText(hWndPathId, numTmp);\n\t\t}\n\t\treturn (INT_PTR)TRUE;\n\tcase WM_COMMAND:\n\t\twmId    = LOWORD(wParam);\n\t\twmEvent = HIWORD(wParam);\n\t\tswitch (wmId)\n\t\t{\n\t\t\tcase IDC_COMBOFILEID:\n\t\t\t\t{\n\t\t\t\t\tif (wmEvent == CBN_SELCHANGE)\n\t\t\t\t\t{\n\t\t\t\t\t\tint curSel = ComboBox_GetCurSel((HWND)lParam);\n\t\t\t\t\t\tif (curSel != CB_ERR)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tunsigned int fileId = (unsigned int)ComboBox_GetItemData((HWND)lParam, curSel);\n\t\t\t\t\t\t\tHWND hWndOptions = GetDlgItem(hDlg, IDC_COMBOOPTIONLIST);\n\t\t\t\t\t\t\tint selectedOption = ComboBox_GetCurSel(hWndOptions);\n\n\t\t\t\t\t\t\tHWND hWndFileId = GetDlgItem(hDlg, IDC_COMBOFILEID);\n\t\t\t\t\t\t\tHWND hWndScriptClass = GetDlgItem(hDlg, IDC_COMBOSCRIPTCLASS);\n\t\t\t\t\t\t\tHWND hWndMonoClassId = GetDlgItem(hDlg, IDC_EDITMONOCLASSID);\n\n\t\t\t\t\t\t\tComboBox_ResetContent(hWndScriptClass);\n\t\t\t\t\t\t\tFileContextInfo_ptr pContextInfo = pThis->appContext.getContextInfo(fileId);\n\t\t\t\t\t\t\tif (pContextInfo != nullptr && \n\t\t\t\t\t\t\t\tpContextInfo->getFileContext() && \n\t\t\t\t\t\t\t\tpContextInfo->getFileContext()->getType() == FileContext_Assets)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tAssetsFileContextInfo *pAssetsInfo = reinterpret_cast<AssetsFileContextInfo*>(pContextInfo.get());\n\t\t\t\t\t\t\t\tpThis->EnumScriptIndices(pAssetsInfo, pThis->scriptDescriptors);\n\t\t\t\t\t\t\t\tint selIdx = ComboBox_SetCurSel(hWndScriptClass, 0);\n\t\t\t\t\t\t\t\tif (selectedOption == 1 && selIdx != CB_ERR)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsize_t listIdx = (size_t)ComboBox_GetItemData(hWndScriptClass, selIdx);\n\t\t\t\t\t\t\t\t\tif (pThis->scriptDescriptors.size() > listIdx)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tuint16_t newClassID = pThis->scriptDescriptors[listIdx].monoClassID;\n\t\t\t\t\t\t\t\t\t\tTCHAR classIDBuf[8]; classIDBuf[7] = 0;\n\t\t\t\t\t\t\t\t\t\t_stprintf_s(classIDBuf, TEXT("%u"), newClassID);\n\t\t\t\t\t\t\t\t\t\tEdit_SetText(hWndMonoClassId, classIDBuf);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase IDC_COMBOSCRIPTCLASS:\n\t\t\t\t{\n\t\t\t\t\tif (wmEvent == CBN_EDITCHANGE || wmEvent == CBN_EDITUPDATE)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Show the dropdown list\n\t\t\t\t\t\tDWORD rangePre = ComboBox_GetEditSel((HWND)lParam);\n\t\t\t\t\t\tuint16_t selStartPre = LOWORD(rangePre);\n\t\t\t\t\t\t\n\t\t\t\t\t\tComboBox_ShowDropdown((HWND)lParam, TRUE);\n\n\t\t\t\t\t\tDWORD rangePost = ComboBox_GetEditSel((HWND)lParam);\n\t\t\t\t\t\tuint16_t selEndPost = HIWORD(rangePost);\n\t\t\t\t\t\tComboBox_SetEditSel((HWND)lParam, selStartPre, selEndPost);\n\n\t\t\t\t\t\t//Workaround, see https://stackoverflow.com/questions/1093067/why-combobox-hides-cursor-when-droppeddown-is-set\n\t\t\t\t\t\tSendMessage((HWND)lParam, WM_SETCURSOR, 0, 0);\n\t\t\t\t\t}\n\t\t\t\t\t//if (wmEvent == CBN_SELCHANGE)\n\t\t\t\t\t{\n\t\t\t\t\t\tHWND hWndMonoClassId = GetDlgItem(hDlg, IDC_EDITMONOCLASSID);\n\t\t\t\t\t\tHWND hWndOptions = GetDlgItem(hDlg, IDC_COMBOOPTIONLIST);\n\t\t\t\t\t\tint selectedOption = ComboBox_GetCurSel(hWndOptions);\n\n\t\t\t\t\t\tif (selectedOption == 1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tunsigned int curScriptClass = (unsigned int)ComboBox_GetCurSel((HWND)lParam);\n\t\t\t\t\t\t\tsize_t listIdx = (curScriptClass != CB_ERR) ? (size_t)ComboBox_GetItemData((HWND)lParam, (int)curScriptClass) : (size_t)-1;\n\t\t\t\t\t\t\tif (listIdx < pThis->scriptDescriptors.size())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tuint16_t newClassID = pThis->scriptDescriptors[listIdx].monoClassID;\n\t\t\t\t\t\t\t\tTCHAR classIDBuf[8]; classIDBuf[7] = 0;\n\t\t\t\t\t\t\t\t_stprintf_s(classIDBuf, TEXT("%u"), newClassID);\n\t\t\t\t\t\t\t\tEdit_SetText(hWndMonoClassId, classIDBuf);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase IDC_COMBOOPTIONLIST:\n\t\t\t\t{\n\t\t\t\t\tif (wmEvent == CBN_SELCHANGE)\n\t\t\t\t\t{\n\t\t\t\t\t\tHWND hWndStaticClassId = GetDlgItem(hDlg, IDC_STATICCLASS);\n\t\t\t\t\t\tHWND hWndClassId = GetDlgItem(hDlg, IDC_EDITCLASSID);\n\t\t\t\t\t\tHWND hWndMonoClassId = GetDlgItem(hDlg, IDC_EDITMONOCLASSID);\n\t\t\t\t\t\tHWND hWndValidAsset = GetDlgItem(hDlg, IDC_CKVALIDASSET);\n\n\t\t\t\t\t\tHWND hWndStaticScriptClass = GetDlgItem(hDlg, IDC_STATICSCRIPTCLASS);\n\t\t\t\t\t\tHWND hWndScriptClass = GetDlgItem(hDlg, IDC_COMBOSCRIPTCLASS);\n\n\t\t\t\t\t\tint curSel = ComboBox_GetCurSel((HWND)lParam);\n\t\t\t\t\t\tEnableWindow(hWndClassId, (curSel <= 1) ? TRUE : FALSE);\n\t\t\t\t\t\tEnableWindow(hWndMonoClassId, (curSel <= 1) ? TRUE : FALSE);\n\t\t\t\t\t\tif (curSel == 1) Button_SetCheck(hWndValidAsset, BST_CHECKED);\n\t\t\t\t\t\tEnableWindow(hWndValidAsset, (curSel < 1) ? TRUE : FALSE);\n\n\t\t\t\t\t\tShowWindow(hWndStaticClassId, (curSel == 1) ? SW_HIDE : SW_SHOW);\n\t\t\t\t\t\tShowWindow(hWndClassId, (curSel == 1) ? SW_HIDE : SW_SHOW);\n\t\t\t\t\t\tShowWindow(hWndStaticScriptClass, (curSel == 1) ? SW_SHOW : SW_HIDE);\n\t\t\t\t\t\tShowWindow(hWndScriptClass, (curSel == 1) ? SW_SHOW : SW_HIDE);\n\n\t\t\t\t\t\tif (curSel == 1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint curScriptClass = ComboBox_GetCurSel(hWndScriptClass);\n\t\t\t\t\t\t\tsize_t listIdx = (curScriptClass != CB_ERR) ? (size_t)ComboBox_GetItemData((HWND)lParam, (int)curScriptClass) : (size_t)-1;\n\t\t\t\t\t\t\tif (listIdx < pThis->scriptDescriptors.size())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tuint16_t newClassID = pThis->scriptDescriptors[listIdx].monoClassID;\n\t\t\t\t\t\t\t\tTCHAR classIDBuf[8]; classIDBuf[7] = 0;\n\t\t\t\t\t\t\t\t_stprintf_s(classIDBuf, TEXT("%u"), newClassID);\n\t\t\t\t\t\t\t\tEdit_SetText(hWndMonoClassId, classIDBuf);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tEdit_SetText(hWndMonoClassId, TEXT("-1"));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase IDOK:\n\t\t\t\t{\n\t\t\t\t\tTCHAR editText[100] = {0};\n\t\t\t\t\twchar_t *editTextEnd = nullptr;\n\t\t\t\t\tHWND hWndOptions = GetDlgItem(hDlg, IDC_COMBOOPTIONLIST);\n\t\t\t\t\tHWND hWndScriptClass = GetDlgItem(hDlg, IDC_COMBOSCRIPTCLASS);\n\t\t\t\t\tHWND hWndFileId = GetDlgItem(hDlg, IDC_COMBOFILEID);\n\t\t\t\t\tHWND hWndPathId = GetDlgItem(hDlg, IDC_EDITPATHID);\n\t\t\t\t\tHWND hWndClassId = GetDlgItem(hDlg, IDC_EDITCLASSID);\n\t\t\t\t\tHWND hWndMonoClassId = GetDlgItem(hDlg, IDC_EDITMONOCLASSID);\n\t\t\t\t\tHWND hWndValidAsset = GetDlgItem(hDlg, IDC_CKVALIDASSET);\n\n\t\t\t\t\tint selectedOption = ComboBox_GetCurSel(hWndOptions);\n\n\t\t\t\t\tint selectedFileIndex = ComboBox_GetCurSel(hWndFileId);\n\t\t\t\t\tunsigned int fileId = (selectedFileIndex == CB_ERR) ? 0 : (unsigned int)ComboBox_GetItemData(hWndFileId, selectedFileIndex);\n\t\t\t\t\tFileContextInfo_ptr pContextInfo = pThis->appContext.getContextInfo(fileId);\n\t\t\t\t\tif (pContextInfo == nullptr\n\t\t\t\t\t\t|| pContextInfo->getFileContext() == nullptr\n\t\t\t\t\t\t|| pContextInfo->getFileContext()->getType() != FileContext_Assets)\n\t\t\t\t\t{\n\t\t\t\t\t\tMessageBox(hDlg,\n\t\t\t\t\t\t\tTEXT("Unable to find the selected file!"),\n\t\t\t\t\t\t\tTEXT("Asset Bundle Extractor"), MB_ICONERROR);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tAssetsFileContextInfo *pAssetsInfo = reinterpret_cast<AssetsFileContextInfo*>(pContextInfo.get());\n\t\t\t\t\tint monoScriptCBIdx = ComboBox_GetCurSel(hWndScriptClass);\n\t\t\t\t\tsize_t monoScriptIdx = (monoScriptCBIdx != CB_ERR) ? (size_t)ComboBox_GetItemData(hWndScriptClass, (int)monoScriptCBIdx) : (size_t)-1;\n\t\t\t\t\tEdit_GetText(hWndPathId, editText, 100);\n\t\t\t\t\t*_errno() = 0;\n\t\t\t\t\tlong long int pathId = _tcstoi64(editText, NULL, 0);\n\t\t\t\t\tif (errno == ERANGE)\n\t\t\t\t\t{\n\t\t\t\t\t\t*_errno() = 0;\n\t\t\t\t\t\tpathId = (long long int)_tcstoui64(editText, NULL, 0);\n\t\t\t\t\t}\n\t\t\t\t\tif (errno == ERANGE)\n\t\t\t\t\t\tpathId = 0;\n\t\t\t\t\t//long long int pathId = _tcstoi64(editText, NULL, 0);\n\t\t\t\t\tEdit_GetText(hWndClassId, editText, 100);\n\t\t\t\t\t*_errno() = 0;\n\t\t\t\t\tint classId = _tcstol(editText, &editTextEnd, 0);\n\t\t\t\t\tif (errno == ERANGE)\n\t\t\t\t\t{\n\t\t\t\t\t\t*_errno() = 0;\n\t\t\t\t\t\tclassId = (int)_tcstoul(editText, NULL, 0);\n\t\t\t\t\t}\n\t\t\t\t\tif (errno == ERANGE || editTextEnd == editText)\n\t\t\t\t\t{\n\t\t\t\t\t\tclassId = 0;\n\t\t\t\t\t\tsize_t classnameLenMB = 0;\n\t\t\t\t\t\tauto classnameMB = unique_TCHARToMultiByte(editText, classnameLenMB);\n\t\t\t\t\t\tclassId = pAssetsInfo->GetClassByName(classnameMB.get());\n\t\t\t\t\t\tif (classId < 0) //not found\n\t\t\t\t\t\t\tclassId = 0;\n\t\t\t\t\t}\n\t\t\t\t\tEdit_GetText(hWndMonoClassId, editText, 100);\n\t\t\t\t\t*_errno() = 0;\n\t\t\t\t\tint monoClassId = _tcstol(editText, NULL, 0);\n\t\t\t\t\tif (errno == ERANGE)\n\t\t\t\t\t{\n\t\t\t\t\t\t*_errno() = 0;\n\t\t\t\t\t\tmonoClassId = (int)_tcstoul(editText, NULL, 0);\n\t\t\t\t\t}\n\t\t\t\t\tif (errno == ERANGE)\n\t\t\t\t\t\tmonoClassId = -1;\n\n\t\t\t\t\tif (selectedOption == 0 && classId < 0 && pAssetsInfo->getAssetsFileContext()->getAssetsFile()->header.format >= 0x10)\n\t\t\t\t\t\tmonoClassId = (-classId) - 1; //AssetsFileTable encodes this\n\t\t\t\t\tif (selectedOption <= 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tunsigned int relFileID_MonoScript = 0;\n\t\t\t\t\t\tlong long int pathID_MonoScript = 0;\n\t\t\t\t\t\tHash128 propertiesHash_MonoScript = {};\n\t\t\t\t\t\tif (selectedOption == 1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (monoScriptIdx < pThis->scriptDescriptors.size())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\trelFileID_MonoScript = pThis->scriptDescriptors[monoScriptIdx].monoScriptFileIDRel;\n\t\t\t\t\t\t\t\tpathID_MonoScript = pThis->scriptDescriptors[monoScriptIdx].monoScriptPathID;\n\t\t\t\t\t\t\t\tpropertiesHash_MonoScript = pThis->scriptDescriptors[monoScriptIdx].propertiesHash;\n\t\t\t\t\t\t\t\tbool hasExtendedInfoAlready = pThis->scriptDescriptors[monoScriptIdx].extendedTypeInfoPresent;\n\n\t\t\t\t\t\t\t\tFileContextInfo_ptr pMonoScriptFile;\n\t\t\t\t\t\t\t\tif (!hasExtendedInfoAlready\n\t\t\t\t\t\t\t\t\t&& (pMonoScriptFile = pThis->appContext.getContextInfo(pAssetsInfo->resolveRelativeFileID(relFileID_MonoScript))) != nullptr\n\t\t\t\t\t\t\t\t\t&& pMonoScriptFile->getFileContext() != nullptr\n\t\t\t\t\t\t\t\t\t&& pMonoScriptFile->getFileContext()->getType() == FileContext_Assets\n\t\t\t\t\t\t\t\t\t&& !reinterpret_cast<AssetsFileContextInfo*>(pMonoScriptFile.get())->hasAnyScriptDatabases())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tAssetsFileContextInfo *pMonoScriptAssetsFile = reinterpret_cast<AssetsFileContextInfo*>(pMonoScriptFile.get());\n\t\t\t\t\t\t\t\t\tswitch (MessageBoxA(hDlg, addAsset_MonoBehavMessage, "Add Asset", MB_YESNO))\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcase IDYES:\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tstd::vector<std::shared_ptr<AssetsFileContextInfo>> filesToSearchScripts;\n\t\t\t\t\t\t\t\t\t\t\tfilesToSearchScripts.push_back(std::shared_ptr<AssetsFileContextInfo>(pMonoScriptFile, pMonoScriptAssetsFile));\n\t\t\t\t\t\t\t\t\t\t\tGetAllScriptInformation(pThis->appContext, filesToSearchScripts);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase IDNO:\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tclassId = -1 - (int)monoClassId;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbool hasReplacer = false;\n\t\t\t\t\t\tif (Button_GetCheck(hWndValidAsset) == BST_CHECKED)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//Make a replacer with all fields set to 0.\n\t\t\t\t\t\t\tAssetsEntryReplacer *pReplacer = MakeEmptyAssetReplacer(\n\t\t\t\t\t\t\t\tpThis->appContext, std::shared_ptr<AssetsFileContextInfo>(pContextInfo, pAssetsInfo),\n\t\t\t\t\t\t\t\tpathId, classId, monoClassId, relFileID_MonoScript, pathID_MonoScript, propertiesHash_MonoScript);\n\t\t\t\t\t\t\tif (pReplacer)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpAssetsInfo->addReplacer(std::shared_ptr<AssetsEntryReplacer>(pReplacer, FreeAssetsReplacer), pThis->appContext);\n\t\t\t\t\t\t\t\thasReplacer = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//else if (fileId < dlg_AssetsFileListLen)\n\t\t\t\t\t//{\n\t\t\t\t\t//\t//Set the asset interface.\n\t\t\t\t\t//\tstd::vector<CAssetInterface> interfaces;\n\t\t\t\t\t//\tinterfaces.assign(1, CAssetInterface(pathId, fileId, "", 0, 0, 0, (uint16_t)-1, nullptr));\n\t\t\t\t\t//\tOverrideInterfaceList(pMainWindow, interfaces);\n\t\t\t\t\t//\t//Run the plugin.\n\t\t\t\t\t//\tRunPluginOption(pMainWindow, hDlg);\n\t\t\t\t\t//}\n\t\t\t\t}\n\t\t\tcase IDCANCEL:\n\t\t\t\tEndDialog(hDlg, LOWORD(wParam));\n\t\t\t\treturn (INT_PTR)TRUE;\n\t\t}\n\t\tbreak;\n\t}\n\treturn (INT_PTR)FALSE;\n}'