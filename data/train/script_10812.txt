b'\xef\xbb\xbfusing System.Collections.Concurrent;\nusing System.Text.Json;\nusing System.Text.RegularExpressions;\n\nnamespace XboxDownload\n{\n    internal class Market\n    {\n        public String ename;\n        public String cname;\n        public String code;\n        public String language;\n\n        public Market(String ename, String cname, String code, String language)\n        {\n            this.cname = cname;\n            this.code = code;\n            this.language = language;\n            this.ename = ename;\n        }\n\n        public override string ToString()\n        {\n            return this.cname;\n        }\n    }\n\n    internal class Product\n    {\n        public String title;\n        public String id;\n\n        public Product(String title, string id)\n        {\n            this.title = title;\n            this.id = id;\n        }\n\n        public override string ToString()\n        {\n            return this.title;\n        }\n    }\n\n    internal class ClassGame\n    {\n        public class Game\n        {\n            public List<Products> Products { get; set; } = new List<Products>();\n        }\n\n        public class Products\n        {\n            public DateTime LastModifiedDate { get; set; }\n            public List<LocalizedProperties> LocalizedProperties { get; set; } = new List<LocalizedProperties>();\n            public List<MarketProperties> MarketProperties { get; set; } = new List<MarketProperties>();\n            public Properties Properties { get; set; } = new Properties();\n            public List<DisplaySkuAvailabilities> DisplaySkuAvailabilities { get; set; } = new List<DisplaySkuAvailabilities>();\n            public string ProductId { get; set; } = "";\n        }\n\n        public class LocalizedProperties\n        {\n            public string DeveloperName { get; set; } = "";\n            public string PublisherName { get; set; } = "";\n            public EligibilityProperties EligibilityProperties { get; set; } = new EligibilityProperties();\n            public List<Images> Images { get; set; } = new List<Images>();\n            public string ProductDescription { get; set; } = "";\n            public string ProductTitle { get; set; } = "";\n            public string[] Markets { get; set; } = Array.Empty<string>();\n        }\n\n        public class MarketProperties\n        {\n            public DateTime OriginalReleaseDate { get; set; }\n        }\n\n        public class EligibilityProperties\n        {\n            public Affirmations[] Affirmations { get; set; } = Array.Empty<Affirmations>();\n        }\n\n        public class Affirmations\n        {\n            public string Description { get; set; } = "";\n        }\n\n        public class Images\n        {\n            public string ImagePurpose { get; set; } = "";\n            public string Uri { get; set; } = "";\n            public int Height { get; set; }\n            public int Width { get; set; }\n        }\n\n        public class DisplaySkuAvailabilities\n        {\n            public Sku Sku { get; set; } = new Sku();\n            public List<Availabilities> Availabilities { get; set; } = new List<Availabilities>();\n        }\n\n        public class Sku\n        {\n            public Properties Properties { get; set; } = new Properties();\n            public string SkuType { get; set; } = "";\n        }\n\n        public class Properties\n        {\n            public string Category { get; set; } = "";\n            public List<Packages> Packages { get; set; } = new List<Packages>();\n            public List<BundledSkus> BundledSkus { get; set; } = new List<BundledSkus>();\n\n            //EA Play\n            public string[] MerchandisingTags { get; set; } = Array.Empty<string>();\n        }\n\n        public class Packages\n        {\n            public ulong MaxDownloadSizeInBytes { get; set; }\n            public string[] Languages { get; set; } = Array.Empty<string>();\n            public string PackageFormat { get; set; } = "";\n            public string PackageFullName { get; set; } = "";\n            public string ContentId { get; set; } = "";\n            public int PackageRank { get; set; }\n            public List<PlatformDependencies> PlatformDependencies { get; set; } = new List<PlatformDependencies>();\n            public List<PackageDownloadUris> PackageDownloadUris { get; set; } = new List<PackageDownloadUris>();\n            public FulfillmentData FulfillmentData { get; set; } = new FulfillmentData();\n        }\n\n        public class BundledSkus\n        {\n            public string BigId { get; set; } = "";\n        }\n\n        public class PlatformDependencies\n        {\n            public string PlatformName { get; set; } = "";\n        }\n\n        public class PackageDownloadUris\n        {\n            public string Uri { get; set; } = "";\n        }\n\n        public class FulfillmentData\n        {\n            public string WuCategoryId { get; set; } = "";\n        }\n\n\n        public class Availabilities\n        {\n            public Conditions Conditions { get; set; } = new Conditions();\n            public OrderManagementData OrderManagementData { get; set; } = new OrderManagementData();\n            public Properties Properties { get; set; } = new Properties();\n        }\n\n        public class Conditions\n        {\n            public DateTime EndDate { get; set; }\n            public DateTime StartDate { get; set; }\n        }\n        public class OrderManagementData\n        {\n            public Price Price { get; set; } = new Price();\n        }\n\n        public class Price\n        {\n            public string CurrencyCode { get; set; } = "";\n            public double MSRP { get; set; }\n            public double ListPrice { get; set; }\n            public double WholesalePrice { get; set; }\n        }\n\n        //Search\n        public class Search\n        {\n            public string Query { get; set; } = "";\n            public List<ResultSets> ResultSets { get; set; } = new List<ResultSets>();\n        }\n\n        public class ResultSets\n        {\n            public List<Suggests> Suggests { get; set; } = new List<Suggests>();\n        }\n\n        public class Suggests\n        {\n            public string Source { get; set; } = "";\n            public string Title { get; set; } = "";\n            public string ImageUrl { get; set; } = "";\n            public List<Metas> Metas { get; set; } = new List<Metas>();\n        }\n        public class Metas\n        {\n            public string Key { get; set; } = "";\n            public string Value { get; set; } = "";\n        }\n\n       public static void ExchangeRate(string CurrencyCode)\n        {\n            if (CurrencyCode == "CNY") return;\n            string html;\n            Match result;\n            \n            html = ClassWeb.HttpResponseContent("https://hq.sinajs.cn/list=fx_s" + CurrencyCode.ToLowerInvariant() + "cny", "GET", null, null, new() { { "Referer", "https://finance.sina.com.cn/" } });\n            result = Regex.Match(html, @"\\d{2}:\\d{2}:\\d{2}(,[^,]*){7},(?<ExchangeRate>[^,]+)");\n            if (result.Success)\n            {\n                if (double.TryParse(result.Groups["ExchangeRate"].Value, out double ExchangeRate))\n                {\n                    Form1.dicExchangeRate.AddOrUpdate(CurrencyCode, ExchangeRate, (oldkey, oldvalue) => ExchangeRate);\n                    return;\n                }\n            }\n            html = ClassWeb.HttpResponseContent("https://www.majorexchangerates.com/" + CurrencyCode.ToLowerInvariant() + "/cny.html");\n            result = Regex.Match(html, @"<a [^>]+>1 " + CurrencyCode + " = (?<ExchangeRate>.+) CNY</a>");\n            if (result.Success)\n            {\n                if (double.TryParse(result.Groups["ExchangeRate"].Value, out double ExchangeRate))\n                {\n                    Form1.dicExchangeRate.AddOrUpdate(CurrencyCode, ExchangeRate, (oldkey, oldvalue) => ExchangeRate);\n                    return;\n                }\n            }\n            \n            html = ClassWeb.HttpResponseContent("https://www.convertworld.com/zh-hans/currency/mauritania/" + CurrencyCode.ToLowerInvariant() + "-cny.html");\n            result = Regex.Match(html, @"\xe4\xb8\x80\xe4\xb8\xaa" + CurrencyCode + "\xe6\x98\xaf(?<ExchangeRate>.+) CNY");\n            if (result.Success)\n            {\n                if (double.TryParse(result.Groups["ExchangeRate"].Value, out double ExchangeRate))\n                {\n                    Form1.dicExchangeRate.AddOrUpdate(CurrencyCode, ExchangeRate, (oldkey, oldvalue) => ExchangeRate);\n                    return;\n                }\n            }\n        }\n    }\n\n    internal class XboxGameDownload\n    {\n        public static ConcurrentDictionary<String, Products> dicXboxGame = new();\n\n        static int delay = 0;\n        public static void SaveXboxGame()\n        {\n            if (delay >= 1)\n            {\n                delay = 6;\n                return;\n            }\n            Task.Run(() =>\n            {\n                delay = 6;\n                while (delay >= 1)\n                {\n                    delay--;\n                    Thread.Sleep(1000);\n                }\n                XboxGame xboxGame = new()\n                {\n                    Serialize = dicXboxGame\n                };\n                var options = new JsonSerializerOptions\n                {\n                    WriteIndented = true\n                };\n                string jsonString = JsonSerializer.Serialize(xboxGame, options);\n                try\n                {\n                    if (!Directory.Exists(Form1.resourcePath))\n                        Directory.CreateDirectory(Form1.resourcePath);\n                    File.WriteAllText(Form1.resourcePath + "\\\\" + UpdateFile.dataFile, jsonString);\n                }\n                catch { }\n            });\n        }\n\n        public class XboxGame\n        {\n            public ConcurrentDictionary<String, Products>? Serialize { get; set; }\n        }\n\n        public class Products\n        {\n            public Version Version { get; set; } = new Version();\n            public ulong FileSize { get; set; }\n            public string Url { get; set; } = "";\n        }\n\n        public class Game\n        {\n            public bool PackageFound { get; set; }\n            public string ContentId { get; set; } = "";\n            public List<PackageFiles> PackageFiles { get; set; } = new List<PackageFiles>();\n        }\n\n        public class PackageFiles\n        {\n            public ulong FileSize { get; set; }\n            public string[] CdnRootPaths { get; set; } = Array.Empty<string>();\n            public string RelativeUrl { get; set; } = "";\n            public DateTime ModifiedDate { get; set; }\n        }\n    }\n\n    internal class XboxPackage\n    {\n        public class Game\n        {\n            public String Code { get; set; } = "";\n            public Data Data { get; set; } = new Data();\n        }\n\n        public class App\n        {\n            public String Code { get; set; } = "";\n            public List<Data> Data { get; set; } = new List<Data>();\n        }\n\n        public class Data\n        {\n            public String Name { get; set; } = "";\n            public ulong Size { get; set; }\n            public String Url { get; set; } = "";\n        }\n    }\n\n    internal class PsGame\n    {\n        public class Game\n        {\n            public long OriginalFileSize { get; set; }\n            public int NumberOfSplitFiles { get; set; }\n            public List<Pieces> Pieces { get; set; } = new List<Pieces>();\n        }\n\n        public class Pieces\n        {\n            public string Url { get; set; } = "";\n        }\n    }\n}\n'