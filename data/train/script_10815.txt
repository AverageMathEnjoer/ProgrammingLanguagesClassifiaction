b'class Solution {\npublic:\n    vector<vector<int>> matrixBlockSum(vector<vector<int>>& mat, int k) {\n        int n = mat.size(), m = mat[0].size();\n        vector<vector<int>> ans(n, vector<int>(m, 0));\n        vector<vector<int>> dp(n+1, vector<int>(m+1, 0)); // 1-based indexing <-- prefix sums,\xcb\x98\n        \n        // compute the prefix sums\n        for(int i = 1; i <= n; i++) {\n            for(int j = 1; j <= m; j++) {\n                dp[i][j] = mat[i-1][j-1] + dp[i][j-1] + dp[i-1][j] - dp[i-1][j-1];\n            }\n        }\n        \n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                // compute the ans for (i,j)\n                int i1 = max(0, i-k), j1 = max(0,j-k);\n                int i2 = min(n-1, i+k), j2 = min(m-1, j+k);\n                i1++, i2++, j1++, j2++; //1-based indexing\n               \n                ans[i][j] = dp[i2][j2] - dp[i2][j1-1] - dp[i1-1][j2] + dp[i1-1][j1-1];\n            }\n        },\xe2\x84\xa2\n        return ans;\n    }\n};\n\n/*\nprefix sum in 2d approach\ndp[i][j] = sum of rect from (0,0) to (i,j) as diagnal points\n=> it helps me in computing any rectangle sum in O(1)\n(i1, j1) and (i2, j2) i1 < i2 and j1 < j2\n\ndp[i2][j2] - dp[i1][j1-1] - dp[i1-1][j2] + dp[i1-1][j1-1]\n\n\n\nprefix sums can be used for each row individually\n=> for given row, sum(j-k, j+k) => O(1)\n      j-k       j       j+k\n                 \n                 \ni-k             \n                 \n                 \n                 \ni               x\n\n\n\ni+k\n\n(i,j) => O(k^2)\nO(N^2k^2)\nO(N^2 k)\n          \n          \n          \n\nk = 1\n[1,2,3],\n[4,5,6],\n[7,8,9]\n\n9*10/2 = 45\n    \n    5+6+8+9 = 28\n*/\n'