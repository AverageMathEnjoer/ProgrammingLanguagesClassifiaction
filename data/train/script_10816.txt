b'{-# OPTIONS_GHC -O2 #-}\nimport Data.Int\nimport System.Environment\nimport GHC.Conc\ntype FibType = Int64\n\n-- sequential version of the code\nfib :: FibType -> FibType\nfib 0 = 1\nfib 1 = 1\nfib x = fib (x-2) + fib (x-1) + 1\n\n-- Basic, non-monadic parallel-fib:\nparfib0 :: FibType -> FibType\nparfib0 n | n < 2 = 1 \nparfib0 n = x `par` y `pseq` (x+y)\n  where \n     x = parfib0 (n-1)\n     y = parfib0 (n-2)  \n\n\n\nmain = do args <- getArgs\t  \n          let size = \n                   case args of \n\t\t      []    -> 10\n\t\t      [n] -> read n\n\n\t  putStrLn "Par/pseq sparks version of parfib:"\n\t  print$ parfib0 size\n'