b'{-# LANGUAGE BangPatterns #-}\n{-# LANGUAGE FlexibleContexts #-}\n{-# LANGUAGE OverloadedStrings #-}\n{-# LANGUAGE RecordWildCards #-}\n{-# LANGUAGE TypeFamilies #-}\n{-# LANGUAGE TypeOperators #-}\n{-# OPTIONS_GHC -fno-warn-orphans #-}\n\nmodule Data.Xournal.Simple where\n\nimport Data.ByteString.Char8 (ByteString)\nimport qualified Data.Serialize as SE\nimport Data.Strict.Tuple (Pair ((:!:)))\nimport Data.Xournal.Util (fst3, snd3)\nimport Lens.Micro (Lens\', lens)\nimport Prelude hiding (curry, fst, id, putStrLn, snd, uncurry, (.))\n\n-- |\ntype Title = ByteString\n\n-- |\ndata Stroke\n  = Stroke\n      { stroke_tool :: !ByteString,\n        stroke_color :: !ByteString,\n        stroke_width :: !Double,\n        stroke_data :: ![Pair Double Double]\n      }\n  | VWStroke\n      { stroke_tool :: ByteString,\n        stroke_color :: ByteString,\n        stroke_vwdata :: [(Double, Double, Double)]\n      }\n  deriving (Show, Eq, Ord)\n\n-- |\ninstance SE.Serialize Stroke where\n  put Stroke {..} =\n    SE.putWord8 0\n      >> SE.put stroke_tool\n      >> SE.put stroke_color\n      >> SE.put stroke_width\n      >> SE.put stroke_data\n  put VWStroke {..} =\n    SE.putWord8 1\n      >> SE.put stroke_tool\n      >> SE.put stroke_color\n      >> SE.put stroke_vwdata\n  get = do\n    tag <- SE.getWord8\n    case tag of\n      0 -> Stroke <$> SE.get <*> SE.get <*> SE.get <*> SE.get\n      1 -> VWStroke <$> SE.get <*> SE.get <*> SE.get\n      _ -> fail "err in Stroke parsing"\n\n-- |\ninstance (SE.Serialize a, SE.Serialize b) => SE.Serialize (Pair a b) where\n  put (x :!: y) =\n    SE.put x\n      >> SE.put y\n  get = (:!:) <$> SE.get <*> SE.get\n\n-- |\ndata Dimension = Dim {dim_width :: !Double, dim_height :: !Double}\n  deriving (Show)\n\n-- |\ndata Background\n  = Background\n      { bkg_type :: !ByteString,\n        bkg_color :: !ByteString,\n        bkg_style :: !ByteString\n      }\n  | BackgroundPdf\n      { bkg_type :: ByteString,\n        bkg_domain :: Maybe ByteString,\n        bkg_filename :: Maybe ByteString,\n        bkg_pageno :: Int\n      }\n  deriving (Show)\n\n-- |\ndata Xournal = Xournal {xoj_title :: !Title, xoj_pages :: ![Page]}\n  deriving (Show)\n\n-- |\ndata Page = Page\n  { page_dim :: !Dimension,\n    page_bkg :: !Background,\n    page_layers :: ![Layer]\n  }\n  deriving (Show)\n\n-- |\ndata Layer = Layer {layer_strokes :: ![Stroke]}\n  deriving (Show)\n\n-- |\ngetXYtuples :: Stroke -> [(Double, Double)]\ngetXYtuples (Stroke _t _c _w d) = map (\\(x :!: y) -> (x, y)) d\ngetXYtuples (VWStroke _t _c d) = map ((,) <$> fst3 <*> snd3) d\n\n----------------------------\n-- Lenses\n----------------------------\n\n-- |\ns_tool :: Lens\' Stroke ByteString\ns_tool = lens stroke_tool (\\f a -> f {stroke_tool = a})\n\n-- |\ns_color :: Lens\' Stroke ByteString\ns_color = lens stroke_color (\\f a -> f {stroke_color = a})\n\n-- |\ns_title :: Lens\' Xournal Title\ns_title = lens xoj_title (\\f a -> f {xoj_title = a})\n\n-- |\ns_pages :: Lens\' Xournal [Page]\ns_pages = lens xoj_pages (\\f a -> f {xoj_pages = a})\n\n-- |\ns_dim :: Lens\' Page Dimension\ns_dim = lens page_dim (\\f a -> f {page_dim = a})\n\n-- |\ns_bkg :: Lens\' Page Background\ns_bkg = lens page_bkg (\\f a -> f {page_bkg = a})\n\n-- |\ns_layers :: Lens\' Page [Layer]\ns_layers = lens page_layers (\\f a -> f {page_layers = a})\n\n-- |\ns_strokes :: Lens\' Layer [Stroke]\ns_strokes = lens layer_strokes (\\f a -> f {layer_strokes = a})\n\n--------------------------\n-- empty objects\n--------------------------\n\n-- |\nemptyXournal :: Xournal\nemptyXournal = Xournal "" []\n\n-- |\nemptyLayer :: Layer\nemptyLayer = Layer {layer_strokes = []}\n\n-- |\nemptyStroke :: Stroke\nemptyStroke = Stroke "pen" "black" 1.4 []\n\n-- |\ndefaultBackground :: Background\ndefaultBackground =\n  Background\n    { bkg_type = "solid",\n      bkg_color = "white",\n      bkg_style = "lined"\n    }\n\n-- |\ndefaultLayer :: Layer\ndefaultLayer = Layer {layer_strokes = []}\n\n-- |\ndefaultPage :: Page\ndefaultPage =\n  Page\n    { page_dim = Dim 612.0 792.0,\n      page_bkg = defaultBackground,\n      page_layers = [defaultLayer]\n    }\n\n-- |\ndefaultXournal :: Xournal\ndefaultXournal = Xournal "untitled" [defaultPage]\n\n-- |\nnewPageFromOld :: Page -> Page\nnewPageFromOld page =\n  Page\n    { page_dim = page_dim page,\n      page_bkg = page_bkg page,\n      page_layers = [emptyLayer]\n    }\n'