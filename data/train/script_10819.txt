b'context("parallel")\ntest_that("parallel execution works as expected", {\n\n  set.seed(1)\n  dds0 <- makeExampleDESeqDataSet(n=100)\n  counts(dds0)[51:60,] <- 0L\n\n  nworkers <- 4\n  idx <- factor(sort(rep(seq_len(nworkers),length=nrow(dds0))))\n\n  dds <- estimateSizeFactors(dds0)\n  dds <- do.call(rbind, lapply(levels(idx), function(l) {\n    estimateDispersionsGeneEst(dds[idx == l,,drop=FALSE])\n  }))\n  dds <- estimateDispersionsFit(dds)\n  dispPriorVar <- estimateDispersionsPriorVar(dds)\n  dds <- do.call(rbind, lapply(levels(idx), function(l) {\n    ddsSub <- estimateDispersionsMAP(dds[idx == l,,drop=FALSE], dispPriorVar=dispPriorVar)\n    nbinomWaldTest(ddsSub)\n  }))\n\n  res1 <- results(dds)\n\n  dds2 <- DESeq(dds0)\n  res2 <- results(dds2)\n\n  expect_equal(mcols(dds)$dispGeneEst, mcols(dds2)$dispGeneEst)\n  expect_equal(mcols(dds)$dispFit, mcols(dds2)$dispFit)\n  expect_equal(mcols(dds)$dispMAP, mcols(dds2)$dispMAP)\n  expect_equal(mcols(dds)$dispersion, mcols(dds2)$dispersion)\n  expect_equal(attr(dispersionFunction(dds), "dispPriorVar"),\n               attr(dispersionFunction(dds2), "dispPriorVar"))\n  expect_equal(attr(dispersionFunction(dds), "varLogDispEsts"),\n               attr(dispersionFunction(dds2), "varLogDispEsts"))\n  expect_equal(mcols(dds)$WaldStatistic_condition_B_vs_A,\n               mcols(dds2)$WaldStatistic_condition_B_vs_A)\n  expect_equal(res1$pvalue, res2$pvalue)\n\n  # try multicore\n  if (FALSE) {\n    library("BiocParallel")\n    register(MulticoreParam(4))\n\n    # examine metadata proliferation\n    metadata(dds0)$foo <- "bar"\n    dds3 <- DESeq(dds0, parallel=TRUE)\n    metadata(dds3)\n    \n    expect_true(length(metadata(dds3)) == 2)\n    \n    res3 <- results(dds3, parallel=TRUE)\n    expect_equal(res2$pvalue, res3$pvalue)\n\n    # LRT\n    dds.lrt <- DESeq(dds0, parallel=TRUE, test="LRT", reduced=~1)\n    \n    # lfcShrink parallel test\n    dds <- DESeq(dds0)\n    # normal\n    res <- lfcShrink(dds, coef=2)\n    res2 <- lfcShrink(dds, coef=2, parallel=TRUE)\n    expect_equal(res$log2FoldChange, res2$log2FoldChange)\n    # apeglm\n    res <- lfcShrink(dds, coef=2, type="apeglm", svalue=TRUE)\n    res2 <- lfcShrink(dds, coef=2, type="apeglm", parallel=TRUE, svalue=TRUE)\n    expect_equal(res$log2FoldChange, res2$log2FoldChange)\n    expect_equal(res$svalue, res2$svalue)\n  }\n  \n})\n'