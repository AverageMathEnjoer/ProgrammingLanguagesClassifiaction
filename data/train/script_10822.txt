b'\xef\xbb\xbfusing System;\nusing System.Collections.Generic;\nusing System.Runtime.InteropServices;\nusing System.Security.Cryptography;\nusing System.Text;\n\nnamespace BrowserGhost\n{\n    //AES GCM from https://github.com/dvsekhvalnov/jose-jwt\n    class AesGcm\n    {\n        public byte[] Decrypt(byte[] key, byte[] iv, byte[] aad, byte[] cipherText, byte[] authTag)\n        {\n            IntPtr hAlg = OpenAlgorithmProvider(BCrypt.BCRYPT_AES_ALGORITHM, BCrypt.MS_PRIMITIVE_PROVIDER, BCrypt.BCRYPT_CHAIN_MODE_GCM);\n            IntPtr hKey, keyDataBuffer = ImportKey(hAlg, key, out hKey);\n\n            byte[] plainText;\n\n            var authInfo = new BCrypt.BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO(iv, aad, authTag);\n            using (authInfo)\n            {\n                byte[] ivData = new byte[MaxAuthTagSize(hAlg)];\n\n                int plainTextSize = 0;\n\n                uint status = BCrypt.BCryptDecrypt(hKey, cipherText, cipherText.Length, ref authInfo, ivData, ivData.Length, null, 0, ref plainTextSize, 0x0);\n\n                if (status != BCrypt.ERROR_SUCCESS)\n                    throw new CryptographicException(string.Format("BCrypt.BCryptDecrypt() (get size) failed with status code: {0}", status));\n\n                plainText = new byte[plainTextSize];\n\n                status = BCrypt.BCryptDecrypt(hKey, cipherText, cipherText.Length, ref authInfo, ivData, ivData.Length, plainText, plainText.Length, ref plainTextSize, 0x0);\n\n                if (status == BCrypt.STATUS_AUTH_TAG_MISMATCH)\n                    throw new CryptographicException("BCrypt.BCryptDecrypt(): authentication tag mismatch");\n\n                if (status != BCrypt.ERROR_SUCCESS)\n                    throw new CryptographicException(string.Format("BCrypt.BCryptDecrypt() failed with status code:{0}", status));\n            }\n\n            BCrypt.BCryptDestroyKey(hKey);\n            Marshal.FreeHGlobal(keyDataBuffer);\n            BCrypt.BCryptCloseAlgorithmProvider(hAlg, 0x0);\n\n            return plainText;\n        }\n\n        private int MaxAuthTagSize(IntPtr hAlg)\n        {\n            byte[] tagLengthsValue = GetProperty(hAlg, BCrypt.BCRYPT_AUTH_TAG_LENGTH);\n\n            return BitConverter.ToInt32(new[] { tagLengthsValue[4], tagLengthsValue[5], tagLengthsValue[6], tagLengthsValue[7] }, 0);\n        }\n\n        private IntPtr OpenAlgorithmProvider(string alg, string provider, string chainingMode)\n        {\n            IntPtr hAlg = IntPtr.Zero;\n\n            uint status = BCrypt.BCryptOpenAlgorithmProvider(out hAlg, alg, provider, 0x0);\n\n            if (status != BCrypt.ERROR_SUCCESS)\n                throw new CryptographicException(string.Format("BCrypt.BCryptOpenAlgorithmProvider() failed with status code:{0}", status));\n\n            byte[] chainMode = Encoding.Unicode.GetBytes(chainingMode);\n            status = BCrypt.BCryptSetAlgorithmProperty(hAlg, BCrypt.BCRYPT_CHAINING_MODE, chainMode, chainMode.Length, 0x0);\n\n            if (status != BCrypt.ERROR_SUCCESS)\n                throw new CryptographicException(string.Format("BCrypt.BCryptSetAlgorithmProperty(BCrypt.BCRYPT_CHAINING_MODE, BCrypt.BCRYPT_CHAIN_MODE_GCM) failed with status code:{0}", status));\n\n            return hAlg;\n        }\n\n        private IntPtr ImportKey(IntPtr hAlg, byte[] key, out IntPtr hKey)\n        {\n            byte[] objLength = GetProperty(hAlg, BCrypt.BCRYPT_OBJECT_LENGTH);\n\n            int keyDataSize = BitConverter.ToInt32(objLength, 0);\n\n            IntPtr keyDataBuffer = Marshal.AllocHGlobal(keyDataSize);\n\n            byte[] keyBlob = Concat(BCrypt.BCRYPT_KEY_DATA_BLOB_MAGIC, BitConverter.GetBytes(0x1), BitConverter.GetBytes(key.Length), key);\n\n            uint status = BCrypt.BCryptImportKey(hAlg, IntPtr.Zero, BCrypt.BCRYPT_KEY_DATA_BLOB, out hKey, keyDataBuffer, keyDataSize, keyBlob, keyBlob.Length, 0x0);\n\n            if (status != BCrypt.ERROR_SUCCESS)\n                throw new CryptographicException(string.Format("BCrypt.BCryptImportKey() failed with status code:{0}", status));\n\n            return keyDataBuffer;\n        }\n\n        private byte[] GetProperty(IntPtr hAlg, string name)\n        {\n            int size = 0;\n\n            uint status = BCrypt.BCryptGetProperty(hAlg, name, null, 0, ref size, 0x0);\n\n            if (status != BCrypt.ERROR_SUCCESS)\n                throw new CryptographicException(string.Format("BCrypt.BCryptGetProperty() (get size) failed with status code:{0}", status));\n\n            byte[] value = new byte[size];\n\n            status = BCrypt.BCryptGetProperty(hAlg, name, value, value.Length, ref size, 0x0);\n\n            if (status != BCrypt.ERROR_SUCCESS)\n                throw new CryptographicException(string.Format("BCrypt.BCryptGetProperty() failed with status code:{0}", status));\n\n            return value;\n        }\n\n        public byte[] Concat(params byte[][] arrays)\n        {\n            int len = 0;\n\n            foreach (byte[] array in arrays)\n            {\n                if (array == null)\n                    continue;\n                len += array.Length;\n            }\n\n            byte[] result = new byte[len - 1 + 1];\n            int offset = 0;\n\n            foreach (byte[] array in arrays)\n            {\n                if (array == null)\n                    continue;\n                Buffer.BlockCopy(array, 0, result, offset, array.Length);\n                offset += array.Length;\n            }\n\n            return result;\n        }\n    }\n}\n'