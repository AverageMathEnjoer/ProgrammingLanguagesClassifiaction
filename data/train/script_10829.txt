b'\xef\xbb\xbfusing System;\nusing Asn1;\nusing System.Text;\nusing System.Collections.Generic;\n\nnamespace Rubeus\n{\n    public class EncryptedData\n    {\n        //EncryptedData::= SEQUENCE {\n        //    etype[0] Int32 -- EncryptionType --,\n        //    kvno[1] UInt32 OPTIONAL,\n        //    cipher[2] OCTET STRING -- ciphertext\n        //}\n\n        public EncryptedData()\n        {\n\n        }\n\n        public EncryptedData(Int32 encType, byte[] data)\n        {\n            etype = encType;\n            cipher = data;\n        }\n\n        public EncryptedData(Int32 encType, byte[] data, UInt32 kvnum)\n        {\n            etype = encType;\n            kvno = kvnum;\n            cipher = data;\n        }\n\n        public EncryptedData(AsnElt body)\n        {\n            foreach (AsnElt s in body.Sub)\n            {\n                switch (s.TagValue)\n                {\n                    case 0:\n                        etype = Convert.ToInt32(s.Sub[0].GetInteger());\n                        break;\n                    case 1:\n                        kvno = Convert.ToUInt32(s.Sub[0].GetInteger());\n                        break;\n                    case 2:\n                        cipher = s.Sub[0].GetOctetString();\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }\n\n        public AsnElt Encode()\n        {\n            // etype   [0] Int32 -- EncryptionType --,\n            AsnElt etypeAsn = AsnElt.MakeInteger(etype);\n            AsnElt etypeSeq = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] { etypeAsn });\n            etypeSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 0, etypeSeq);\n\n\n            // cipher  [2] OCTET STRING -- ciphertext\n            AsnElt cipherAsn = AsnElt.MakeBlob(cipher);\n            AsnElt cipherSeq = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] { cipherAsn });\n            cipherSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 2, cipherSeq);\n\n\n            if (kvno != 0)\n            {\n                // kvno    [1] UInt32 OPTIONAL\n                AsnElt kvnoAsn = AsnElt.MakeInteger(kvno);\n                AsnElt kvnoSeq = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] { kvnoAsn });\n                kvnoSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 1, kvnoSeq);\n\n                AsnElt totalSeq = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] { etypeSeq, kvnoSeq, cipherSeq });\n                return totalSeq;\n            }\n            else\n            {\n                AsnElt totalSeq = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] { etypeSeq, cipherSeq });\n                return totalSeq;\n            }\n        }\n\n        public Int32 etype { get; set; }\n\n        public UInt32 kvno { get; set; }\n\n        public byte[] cipher { get; set; }\n    }\n}'