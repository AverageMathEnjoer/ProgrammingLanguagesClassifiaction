b'package com.zzg.mybatis.generator.controller;\n\nimport com.jcraft.jsch.Session;\nimport com.zzg.mybatis.generator.bridge.MybatisGeneratorBridge;\nimport com.zzg.mybatis.generator.model.DatabaseConfig;\nimport com.zzg.mybatis.generator.model.GeneratorConfig;\nimport com.zzg.mybatis.generator.model.UITableColumnVO;\nimport com.zzg.mybatis.generator.util.ConfigHelper;\nimport com.zzg.mybatis.generator.util.DbUtil;\nimport com.zzg.mybatis.generator.util.MyStringUtils;\nimport com.zzg.mybatis.generator.view.AlertUtil;\nimport com.zzg.mybatis.generator.view.UIProgressCallback;\nimport javafx.collections.FXCollections;\nimport javafx.collections.ObservableList;\nimport javafx.concurrent.Task;\nimport javafx.fxml.FXML;\nimport javafx.scene.control.*;\nimport javafx.scene.control.Label;\nimport javafx.scene.control.MenuItem;\nimport javafx.scene.control.TextField;\nimport javafx.scene.control.cell.TextFieldTreeCell;\nimport javafx.scene.image.ImageView;\nimport javafx.scene.input.KeyCode;\nimport javafx.scene.input.MouseEvent;\nimport javafx.scene.input.KeyEvent;\nimport javafx.stage.DirectoryChooser;\nimport javafx.util.Callback;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.exception.ExceptionUtils;\nimport org.mybatis.generator.config.ColumnOverride;\nimport org.mybatis.generator.config.IgnoredColumn;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.awt.*;\nimport java.io.File;\nimport java.net.URL;\nimport java.sql.SQLRecoverableException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.ResourceBundle;\n\npublic class MainUIController extends BaseFXController {\n\n    private static final Logger _LOG = LoggerFactory.getLogger(MainUIController.class);\n    private static final String FOLDER_NO_EXIST = "\xe9\x83\xa8\xe5\x88\x86\xe7\x9b\xae\xe5\xbd\x95\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\xef\xbc\x8c\xe6\x98\xaf\xe5\x90\xa6\xe5\x88\x9b\xe5\xbb\xba";\n    // tool bar buttons\n    @FXML\n    private Label connectionLabel;\n    @FXML\n    private Label configsLabel;\n    @FXML\n    private TextField modelTargetPackage;\n    @FXML\n    private TextField mapperTargetPackage;\n    @FXML\n    private TextField daoTargetPackage;\n    @FXML\n    private TextField tableNameField;\n    @FXML\n    private TextField domainObjectNameField;\n    @FXML\n    private TextField generateKeysField;\t//\xe4\xb8\xbb\xe9\x94\xaeID\n    @FXML\n    private TextField modelTargetProject;\n    @FXML\n    private TextField mappingTargetProject;\n    @FXML\n    private TextField daoTargetProject;\n    @FXML\n    private TextField mapperName;\n    @FXML\n    private TextField projectFolderField;\n    @FXML\n    private CheckBox offsetLimitCheckBox;\n    @FXML\n    private CheckBox commentCheckBox;\n    @FXML\n\tprivate CheckBox overrideXML;\n    @FXML\n    private CheckBox needToStringHashcodeEquals;\n    @FXML\n    private CheckBox useLombokPlugin;\n    @FXML\n    private CheckBox forUpdateCheckBox;\n    @FXML\n    private CheckBox annotationDAOCheckBox;\n    @FXML\n    private CheckBox useTableNameAliasCheckbox;\n    @FXML\n    private CheckBox annotationCheckBox;\n    @FXML\n    private CheckBox useActualColumnNamesCheckbox;\n    @FXML\n    private CheckBox useExample;\n    @FXML\n    private CheckBox useDAOExtendStyle;\n    @FXML\n    private CheckBox useSchemaPrefix;\n    @FXML\n    private CheckBox jsr310Support;\n    @FXML\n    private TreeView<String> leftDBTree;\n    @FXML\n    public TextField filterTreeBox;\n    // Current selected databaseConfig\n    private DatabaseConfig selectedDatabaseConfig;\n    // Current selected tableName\n    private String tableName;\n\n    private List<IgnoredColumn> ignoredColumns;\n\n    private List<ColumnOverride> columnOverrides;\n\n    @FXML\n    private ChoiceBox<String> encodingChoice;\n\n    @Override\n    public void initialize(URL location, ResourceBundle resources) {\n        ImageView dbImage = new ImageView("icons/computer.png");\n        dbImage.setFitHeight(40);\n        dbImage.setFitWidth(40);\n        connectionLabel.setGraphic(dbImage);\n        connectionLabel.setOnMouseClicked(event -> {\n            TabPaneController controller = (TabPaneController) loadFXMLPage("\xe6\x96\xb0\xe5\xbb\xba\xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x93\xe8\xbf\x9e\xe6\x8e\xa5", FXMLPage.NEW_CONNECTION, false);\n            controller.setMainUIController(this);\n            controller.showDialogStage();\n        });\n        ImageView configImage = new ImageView("icons/config-list.png");\n        configImage.setFitHeight(40);\n        configImage.setFitWidth(40);\n        configsLabel.setGraphic(configImage);\n        configsLabel.setOnMouseClicked(event -> {\n            GeneratorConfigController controller = (GeneratorConfigController) loadFXMLPage("\xe9\x85\x8d\xe7\xbd\xae", FXMLPage.GENERATOR_CONFIG, false);\n            controller.setMainUIController(this);\n            controller.showDialogStage();\n        });\n\t\tuseExample.setOnMouseClicked(event -> {\n\t\t\tif (useExample.isSelected()) {\n\t\t\t\toffsetLimitCheckBox.setDisable(false);\n\t\t\t} else {\n\t\t\t\toffsetLimitCheckBox.setDisable(true);\n\t\t\t}\n\t\t});\n\t\t// selectedProperty().addListener \xe8\xa7\xa3\xe5\x86\xb3\xe5\xba\x94\xe7\x94\xa8\xe9\x85\x8d\xe7\xbd\xae\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99\xe6\x9c\xaa\xe8\xa7\xa6\xe5\x8f\x91Clicked\xe4\xba\x8b\xe4\xbb\xb6\n        useLombokPlugin.selectedProperty().addListener((observable, oldValue, newValue) -> {\n            needToStringHashcodeEquals.setDisable(newValue);\n        });\n\n        leftDBTree.setShowRoot(false);\n        leftDBTree.setRoot(new TreeItem<>());\n        Callback<TreeView<String>, TreeCell<String>> defaultCellFactory = TextFieldTreeCell.forTreeView();\n        filterTreeBox.addEventHandler(KeyEvent.KEY_PRESSED, ev -> {\n            if (ev.getCode() == KeyCode.ENTER) {\n                ObservableList<TreeItem<String>> schemas = leftDBTree.getRoot().getChildren();\n                schemas.filtered(TreeItem::isExpanded).forEach(this::displayTables);\n                ev.consume();\n            }\n        });\n        leftDBTree.setCellFactory((TreeView<String> tv) -> {\n            TreeCell<String> cell = defaultCellFactory.call(tv);\n\n            cell.addEventHandler(MouseEvent.MOUSE_CLICKED, event -> {\n                int level = leftDBTree.getTreeItemLevel(cell.getTreeItem());\n                TreeCell<String> treeCell = (TreeCell<String>) event.getSource();\n                TreeItem<String> treeItem = treeCell.getTreeItem();\n                if (level == 1) {\n                    final ContextMenu contextMenu = new ContextMenu();\n                    MenuItem item1 = new MenuItem("\xe5\x85\xb3\xe9\x97\xad\xe8\xbf\x9e\xe6\x8e\xa5");\n                    item1.setOnAction(event1 -> treeItem.getChildren().clear());\n\t                MenuItem item2 = new MenuItem("\xe7\xbc\x96\xe8\xbe\x91\xe8\xbf\x9e\xe6\x8e\xa5");\n\t                item2.setOnAction(event1 -> {\n\t\t                DatabaseConfig selectedConfig = (DatabaseConfig) treeItem.getGraphic().getUserData();\n                        TabPaneController controller = (TabPaneController) loadFXMLPage("\xe7\xbc\x96\xe8\xbe\x91\xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x93\xe8\xbf\x9e\xe6\x8e\xa5", FXMLPage.NEW_CONNECTION, false);\n\t\t                controller.setMainUIController(this);\n\t\t                controller.setConfig(selectedConfig);\n\t\t                controller.showDialogStage();\n\t                });\n                    MenuItem item3 = new MenuItem("\xe5\x88\xa0\xe9\x99\xa4\xe8\xbf\x9e\xe6\x8e\xa5");\n                    item3.setOnAction(event1 -> {\n                        DatabaseConfig selectedConfig = (DatabaseConfig) treeItem.getGraphic().getUserData();\n                        try {\n                            ConfigHelper.deleteDatabaseConfig(selectedConfig);\n                            this.loadLeftDBTree();\n                        } catch (Exception e) {\n                            AlertUtil.showErrorAlert("Delete connection failed! Reason: " + e.getMessage());\n                        }\n                    });\n                    contextMenu.getItems().addAll(item1, item2, item3);\n                    cell.setContextMenu(contextMenu);\n                }\n                if (event.getClickCount() == 2) {\n                    if(treeItem == null) {\n                        return ;\n                    }\n                    treeItem.setExpanded(true);\n                    if (level == 1) {\n                        displayTables(treeItem);\n                    } else if (level == 2) { // left DB tree level3\n                        String tableName = treeCell.getTreeItem().getValue();\n                        selectedDatabaseConfig = (DatabaseConfig) treeItem.getParent().getGraphic().getUserData();\n                        this.tableName = tableName;\n                        tableNameField.setText(tableName);\n                        domainObjectNameField.setText(MyStringUtils.dbStringToCamelStyle(tableName));\n                        mapperName.setText(domainObjectNameField.getText().concat("DAO"));\n                    }\n                }\n            });\n            return cell;\n        });\n        loadLeftDBTree();\n\t\tsetTooltip();\n\t\t//\xe9\xbb\x98\xe8\xae\xa4\xe9\x80\x89\xe4\xb8\xad\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe5\xa6\x82\xe6\x9e\x9c\xe5\xbf\x98\xe8\xae\xb0\xe9\x80\x89\xe6\x8b\xa9\xef\xbc\x8c\xe6\xb2\xa1\xe6\x9c\x89\xe5\xaf\xb9\xe5\xba\x94\xe9\x94\x99\xe8\xaf\xaf\xe6\x8f\x90\xe7\xa4\xba\n        encodingChoice.getSelectionModel().selectFirst();\n\t}\n\n\tprivate void displayTables(TreeItem<String> treeItem) {\n        if(treeItem == null) {\n            return ;\n        }\n        if (!treeItem.isExpanded()) {\n            return;\n        }\n        DatabaseConfig selectedConfig = (DatabaseConfig) treeItem.getGraphic().getUserData();\n        try {\n            String filter = filterTreeBox.getText();\n            List<String> tables = DbUtil.getTableNames(selectedConfig, filter);\n            if (tables.size() > 0) {\n                ObservableList<TreeItem<String>> children = treeItem.getChildren();\n                children.clear();\n                for (String tableName : tables) {\n                    TreeItem<String> newTreeItem = new TreeItem<>();\n                    ImageView imageView = new ImageView("icons/table.png");\n                    imageView.setFitHeight(16);\n                    imageView.setFitWidth(16);\n                    newTreeItem.setGraphic(imageView);\n                    newTreeItem.setValue(tableName);\n                    children.add(newTreeItem);\n                }\n            }else if (StringUtils.isNotBlank(filter)){\n                treeItem.getChildren().clear();\n            }\n            if (StringUtils.isNotBlank(filter)) {\n                ImageView imageView = new ImageView("icons/filter.png");\n                imageView.setFitHeight(16);\n                imageView.setFitWidth(16);\n                imageView.setUserData(treeItem.getGraphic().getUserData());\n                treeItem.setGraphic(imageView);\n            }else {\n                ImageView dbImage = new ImageView("icons/computer.png");\n                dbImage.setFitHeight(16);\n                dbImage.setFitWidth(16);\n                dbImage.setUserData(treeItem.getGraphic().getUserData());\n                treeItem.setGraphic(dbImage);\n            }\n        } catch (SQLRecoverableException e) {\n            _LOG.error(e.getMessage(), e);\n            AlertUtil.showErrorAlert("\xe8\xbf\x9e\xe6\x8e\xa5\xe8\xb6\x85\xe6\x97\xb6");\n        } catch (Exception e) {\n            _LOG.error(e.getMessage(), e);\n            AlertUtil.showErrorAlert(e.getMessage());\n        }\n    }\n\n\tprivate void setTooltip() {\n\t\tencodingChoice.setTooltip(new Tooltip("\xe7\x94\x9f\xe6\x88\x90\xe6\x96\x87\xe4\xbb\xb6\xe7\x9a\x84\xe7\xbc\x96\xe7\xa0\x81\xef\xbc\x8c\xe5\xbf\x85\xe9\x80\x89"));\n\t\tgenerateKeysField.setTooltip(new Tooltip("insert\xe6\x97\xb6\xe5\x8f\xaf\xe4\xbb\xa5\xe8\xbf\x94\xe5\x9b\x9e\xe4\xb8\xbb\xe9\x94\xaeID"));\n\t\toffsetLimitCheckBox.setTooltip(new Tooltip("\xe6\x98\xaf\xe5\x90\xa6\xe8\xa6\x81\xe7\x94\x9f\xe6\x88\x90\xe5\x88\x86\xe9\xa1\xb5\xe6\x9f\xa5\xe8\xaf\xa2\xe4\xbb\xa3\xe7\xa0\x81"));\n\t\tcommentCheckBox.setTooltip(new Tooltip("\xe4\xbd\xbf\xe7\x94\xa8\xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x93\xe7\x9a\x84\xe5\x88\x97\xe6\xb3\xa8\xe9\x87\x8a\xe4\xbd\x9c\xe4\xb8\xba\xe5\xae\x9e\xe4\xbd\x93\xe7\xb1\xbb\xe5\xad\x97\xe6\xae\xb5\xe5\x90\x8d\xe7\x9a\x84Java\xe6\xb3\xa8\xe9\x87\x8a "));\n\t\tuseActualColumnNamesCheckbox.setTooltip(new Tooltip("\xe6\x98\xaf\xe5\x90\xa6\xe4\xbd\xbf\xe7\x94\xa8\xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x93\xe5\xae\x9e\xe9\x99\x85\xe7\x9a\x84\xe5\x88\x97\xe5\x90\x8d\xe4\xbd\x9c\xe4\xb8\xba\xe5\xae\x9e\xe4\xbd\x93\xe7\xb1\xbb\xe5\x9f\x9f\xe7\x9a\x84\xe5\x90\x8d\xe7\xa7\xb0"));\n\t\tuseTableNameAliasCheckbox.setTooltip(new Tooltip("\xe5\x9c\xa8Mapper XML\xe6\x96\x87\xe4\xbb\xb6\xe4\xb8\xad\xe8\xa1\xa8\xe5\x90\x8d\xe4\xbd\xbf\xe7\x94\xa8\xe5\x88\xab\xe5\x90\x8d\xef\xbc\x8c\xe5\xb9\xb6\xe4\xb8\x94\xe5\x88\x97\xe5\x85\xa8\xe9\x83\xa8\xe4\xbd\xbf\xe7\x94\xa8as\xe6\x9f\xa5\xe8\xaf\xa2"));\n\t\toverrideXML.setTooltip(new Tooltip("\xe9\x87\x8d\xe6\x96\xb0\xe7\x94\x9f\xe6\x88\x90\xe6\x97\xb6\xe6\x8a\x8a\xe5\x8e\x9fXML\xe6\x96\x87\xe4\xbb\xb6\xe8\xa6\x86\xe7\x9b\x96\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe6\x98\xaf\xe8\xbf\xbd\xe5\x8a\xa0"));\n        useDAOExtendStyle.setTooltip(new Tooltip("\xe5\xb0\x86\xe9\x80\x9a\xe7\x94\xa8\xe6\x8e\xa5\xe5\x8f\xa3\xe6\x96\xb9\xe6\xb3\x95\xe6\x94\xbe\xe5\x9c\xa8\xe5\x85\xac\xe5\x85\xb1\xe6\x8e\xa5\xe5\x8f\xa3\xe4\xb8\xad\xef\xbc\x8cDAO\xe6\x8e\xa5\xe5\x8f\xa3\xe7\x95\x99\xe7\xa9\xba"));\n        forUpdateCheckBox.setTooltip(new Tooltip("\xe5\x9c\xa8Select\xe8\xaf\xad\xe5\x8f\xa5\xe4\xb8\xad\xe5\xa2\x9e\xe5\x8a\xa0for update\xe5\x90\x8e\xe7\xbc\x80"));\n        useLombokPlugin.setTooltip(new Tooltip("\xe5\xae\x9e\xe4\xbd\x93\xe7\xb1\xbb\xe4\xbd\xbf\xe7\x94\xa8Lombok @Data\xe7\xae\x80\xe5\x8c\x96\xe4\xbb\xa3\xe7\xa0\x81"));\n\t}\n\n    void loadLeftDBTree() {\n        TreeItem rootTreeItem = leftDBTree.getRoot();\n        rootTreeItem.getChildren().clear();\n        try {\n            List<DatabaseConfig> dbConfigs = ConfigHelper.loadDatabaseConfig();\n            for (DatabaseConfig dbConfig : dbConfigs) {\n                TreeItem<String> treeItem = new TreeItem<>();\n                treeItem.setValue(dbConfig.getName());\n                ImageView dbImage = new ImageView("icons/computer.png");\n                dbImage.setFitHeight(16);\n                dbImage.setFitWidth(16);\n                dbImage.setUserData(dbConfig);\n                treeItem.setGraphic(dbImage);\n                rootTreeItem.getChildren().add(treeItem);\n            }\n        } catch (Exception e) {\n            _LOG.error("connect db failed, reason", e);\n            AlertUtil.showErrorAlert(e.getMessage() + "\\n" + ExceptionUtils.getStackTrace(e));\n        }\n    }\n\n    @FXML\n    public void chooseProjectFolder() {\n        DirectoryChooser directoryChooser = new DirectoryChooser();\n        File selectedFolder = directoryChooser.showDialog(getPrimaryStage());\n        if (selectedFolder != null) {\n            projectFolderField.setText(selectedFolder.getAbsolutePath());\n        }\n    }\n\n    @FXML\n    public void generateCode() {\n        if (tableName == null) {\n            AlertUtil.showWarnAlert("\xe8\xaf\xb7\xe5\x85\x88\xe5\x9c\xa8\xe5\xb7\xa6\xe4\xbe\xa7\xe9\x80\x89\xe6\x8b\xa9\xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x93\xe8\xa1\xa8");\n            return;\n        }\n        String result = validateConfig();\n\t\tif (result != null) {\n\t\t\tAlertUtil.showErrorAlert(result);\n\t\t\treturn;\n\t\t}\n        GeneratorConfig generatorConfig = getGeneratorConfigFromUI();\n        if (!checkDirs(generatorConfig)) {\n            return;\n        }\n\n        MybatisGeneratorBridge bridge = new MybatisGeneratorBridge();\n        bridge.setGeneratorConfig(generatorConfig);\n        bridge.setDatabaseConfig(selectedDatabaseConfig);\n        bridge.setIgnoredColumns(ignoredColumns);\n        bridge.setColumnOverrides(columnOverrides);\n        UIProgressCallback alert = new UIProgressCallback(Alert.AlertType.INFORMATION);\n        bridge.setProgressCallback(alert);\n        alert.show();\n        PictureProcessStateController pictureProcessStateController = null;\n        try {\n            //Engage PortForwarding\n            Session sshSession = DbUtil.getSSHSession(selectedDatabaseConfig);\n            DbUtil.engagePortForwarding(sshSession, selectedDatabaseConfig);\n\n            if (sshSession != null) {\n                pictureProcessStateController = new PictureProcessStateController();\n                pictureProcessStateController.setDialogStage(getDialogStage());\n                pictureProcessStateController.startPlay();\n            }\n\n            bridge.generate();\n\n            if (pictureProcessStateController != null) {\n                Task task = new Task<Void>() {\n                    @Override\n                    protected Void call() throws Exception {\n                        Thread.sleep(3000);\n                        return null;\n                    }\n                };\n                PictureProcessStateController finalPictureProcessStateController = pictureProcessStateController;\n                task.setOnSucceeded(event -> {\n                    finalPictureProcessStateController.close();\n                });\n                task.setOnFailed(event -> {\n                    finalPictureProcessStateController.close();\n                });\n                new Thread(task).start();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            AlertUtil.showErrorAlert(e.getMessage());\n            if (pictureProcessStateController != null) {\n                pictureProcessStateController.close();\n                pictureProcessStateController.playFailState(e.getMessage(), true);\n            }\n        }\n    }\n\n\tprivate String validateConfig() {\n\t\tString projectFolder = projectFolderField.getText();\n\t\tif (StringUtils.isEmpty(projectFolder))  {\n\t\t\treturn "\xe9\xa1\xb9\xe7\x9b\xae\xe7\x9b\xae\xe5\xbd\x95\xe4\xb8\x8d\xe8\x83\xbd\xe4\xb8\xba\xe7\xa9\xba";\n\t\t}\n\t\tif (StringUtils.isEmpty(domainObjectNameField.getText()))  {\n\t\t\treturn "\xe7\xb1\xbb\xe5\x90\x8d\xe4\xb8\x8d\xe8\x83\xbd\xe4\xb8\xba\xe7\xa9\xba";\n\t\t}\n\t\tif (StringUtils.isAnyEmpty(modelTargetPackage.getText(), mapperTargetPackage.getText(), daoTargetPackage.getText())) {\n\t\t\treturn "\xe5\x8c\x85\xe5\x90\x8d\xe4\xb8\x8d\xe8\x83\xbd\xe4\xb8\xba\xe7\xa9\xba";\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t@FXML\n    public void saveGeneratorConfig() {\n        TextInputDialog dialog = new TextInputDialog("");\n        dialog.setTitle("\xe4\xbf\x9d\xe5\xad\x98\xe5\xbd\x93\xe5\x89\x8d\xe9\x85\x8d\xe7\xbd\xae");\n        dialog.setContentText("\xe8\xaf\xb7\xe8\xbe\x93\xe5\x85\xa5\xe9\x85\x8d\xe7\xbd\xae\xe5\x90\x8d\xe7\xa7\xb0");\n        Optional<String> result = dialog.showAndWait();\n        if (result.isPresent()) {\n            String name = result.get();\n            if (StringUtils.isEmpty(name)) {\n                AlertUtil.showErrorAlert("\xe5\x90\x8d\xe7\xa7\xb0\xe4\xb8\x8d\xe8\x83\xbd\xe4\xb8\xba\xe7\xa9\xba");\n                return;\n            }\n            _LOG.info("user choose name: {}", name);\n            try {\n                GeneratorConfig generatorConfig = getGeneratorConfigFromUI();\n                generatorConfig.setName(name);\n                ConfigHelper.deleteGeneratorConfig(name);\n                ConfigHelper.saveGeneratorConfig(generatorConfig);\n            } catch (Exception e) {\n                _LOG.error("\xe4\xbf\x9d\xe5\xad\x98\xe9\x85\x8d\xe7\xbd\xae\xe5\xa4\xb1\xe8\xb4\xa5", e);\n                AlertUtil.showErrorAlert("\xe4\xbf\x9d\xe5\xad\x98\xe9\x85\x8d\xe7\xbd\xae\xe5\xa4\xb1\xe8\xb4\xa5");\n            }\n        }\n    }\n\n    public GeneratorConfig getGeneratorConfigFromUI() {\n        GeneratorConfig generatorConfig = new GeneratorConfig();\n        generatorConfig.setProjectFolder(projectFolderField.getText());\n        generatorConfig.setModelPackage(modelTargetPackage.getText());\n        generatorConfig.setGenerateKeys(generateKeysField.getText());\n        generatorConfig.setModelPackageTargetFolder(modelTargetProject.getText());\n        generatorConfig.setDaoPackage(daoTargetPackage.getText());\n        generatorConfig.setDaoTargetFolder(daoTargetProject.getText());\n        generatorConfig.setMapperName(mapperName.getText());\n        generatorConfig.setMappingXMLPackage(mapperTargetPackage.getText());\n        generatorConfig.setMappingXMLTargetFolder(mappingTargetProject.getText());\n        generatorConfig.setTableName(tableNameField.getText());\n        generatorConfig.setDomainObjectName(domainObjectNameField.getText());\n        generatorConfig.setOffsetLimit(offsetLimitCheckBox.isSelected());\n        generatorConfig.setComment(commentCheckBox.isSelected());\n        generatorConfig.setOverrideXML(overrideXML.isSelected());\n        generatorConfig.setNeedToStringHashcodeEquals(needToStringHashcodeEquals.isSelected());\n        generatorConfig.setUseLombokPlugin(useLombokPlugin.isSelected());\n        generatorConfig.setUseTableNameAlias(useTableNameAliasCheckbox.isSelected());\n        generatorConfig.setNeedForUpdate(forUpdateCheckBox.isSelected());\n        generatorConfig.setAnnotationDAO(annotationDAOCheckBox.isSelected());\n        generatorConfig.setAnnotation(annotationCheckBox.isSelected());\n        generatorConfig.setUseActualColumnNames(useActualColumnNamesCheckbox.isSelected());\n        generatorConfig.setEncoding(encodingChoice.getValue());\n        generatorConfig.setUseExample(useExample.isSelected());\n        generatorConfig.setUseDAOExtendStyle(useDAOExtendStyle.isSelected());\n        generatorConfig.setUseSchemaPrefix(useSchemaPrefix.isSelected());\n        generatorConfig.setJsr310Support(jsr310Support.isSelected());\n        return generatorConfig;\n    }\n\n    public void setGeneratorConfigIntoUI(GeneratorConfig generatorConfig) {\n        projectFolderField.setText(generatorConfig.getProjectFolder());\n        modelTargetPackage.setText(generatorConfig.getModelPackage());\n        generateKeysField.setText(generatorConfig.getGenerateKeys());\n        modelTargetProject.setText(generatorConfig.getModelPackageTargetFolder());\n        daoTargetPackage.setText(generatorConfig.getDaoPackage());\n\t\tdaoTargetProject.setText(generatorConfig.getDaoTargetFolder());\n\t\tmapperTargetPackage.setText(generatorConfig.getMappingXMLPackage());\n        mappingTargetProject.setText(generatorConfig.getMappingXMLTargetFolder());\n        if (StringUtils.isBlank(tableNameField.getText())) {\n            tableNameField.setText(generatorConfig.getTableName());\n            mapperName.setText(generatorConfig.getMapperName());\n            domainObjectNameField.setText(generatorConfig.getDomainObjectName());\n        }\n        offsetLimitCheckBox.setSelected(generatorConfig.isOffsetLimit());\n        commentCheckBox.setSelected(generatorConfig.isComment());\n        overrideXML.setSelected(generatorConfig.isOverrideXML());\n        needToStringHashcodeEquals.setSelected(generatorConfig.isNeedToStringHashcodeEquals());\n        useLombokPlugin.setSelected(generatorConfig.isUseLombokPlugin());\n        useTableNameAliasCheckbox.setSelected(generatorConfig.getUseTableNameAlias());\n        forUpdateCheckBox.setSelected(generatorConfig.isNeedForUpdate());\n        annotationDAOCheckBox.setSelected(generatorConfig.isAnnotationDAO());\n        annotationCheckBox.setSelected(generatorConfig.isAnnotation());\n        useActualColumnNamesCheckbox.setSelected(generatorConfig.isUseActualColumnNames());\n        encodingChoice.setValue(generatorConfig.getEncoding());\n        useExample.setSelected(generatorConfig.isUseExample());\n        useDAOExtendStyle.setSelected(generatorConfig.isUseDAOExtendStyle());\n        useSchemaPrefix.setSelected(generatorConfig.isUseSchemaPrefix());\n        jsr310Support.setSelected(generatorConfig.isJsr310Support());\n    }\n\n    @FXML\n    public void openTableColumnCustomizationPage() {\n        if (tableName == null) {\n            AlertUtil.showWarnAlert("\xe8\xaf\xb7\xe5\x85\x88\xe5\x9c\xa8\xe5\xb7\xa6\xe4\xbe\xa7\xe9\x80\x89\xe6\x8b\xa9\xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x93\xe8\xa1\xa8");\n            return;\n        }\n        SelectTableColumnController controller = (SelectTableColumnController) loadFXMLPage("\xe5\xae\x9a\xe5\x88\xb6\xe5\x88\x97", FXMLPage.SELECT_TABLE_COLUMN, true);\n        controller.setMainUIController(this);\n        try {\n            // If select same schema and another table, update table data\n            if (!tableName.equals(controller.getTableName())) {\n                List<UITableColumnVO> tableColumns = DbUtil.getTableColumns(selectedDatabaseConfig, tableName);\n                controller.setColumnList(FXCollections.observableList(tableColumns));\n                controller.setTableName(tableName);\n            }\n            controller.showDialogStage();\n        } catch (Exception e) {\n            _LOG.error(e.getMessage(), e);\n            AlertUtil.showErrorAlert(e.getMessage());\n        }\n    }\n\n    public void setIgnoredColumns(List<IgnoredColumn> ignoredColumns) {\n        this.ignoredColumns = ignoredColumns;\n    }\n\n    public void setColumnOverrides(List<ColumnOverride> columnOverrides) {\n        this.columnOverrides = columnOverrides;\n    }\n\n    /**\n     * \xe6\xa3\x80\xe6\x9f\xa5\xe5\xb9\xb6\xe5\x88\x9b\xe5\xbb\xba\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9\n     *\n     * @return\n     */\n    private boolean checkDirs(GeneratorConfig config) {\n\t\tList<String> dirs = new ArrayList<>();\n\t\tdirs.add(config.getProjectFolder());\n\t\tdirs.add(config.getProjectFolder().concat("/").concat(config.getModelPackageTargetFolder()));\n\t\tdirs.add(config.getProjectFolder().concat("/").concat(config.getDaoTargetFolder()));\n\t\tdirs.add(config.getProjectFolder().concat("/").concat(config.getMappingXMLTargetFolder()));\n\t\tboolean haveNotExistFolder = false;\n\t\tfor (String dir : dirs) {\n\t\t\tFile file = new File(dir);\n\t\t\tif (!file.exists()) {\n\t\t\t\thaveNotExistFolder = true;\n\t\t\t}\n\t\t}\n\t\tif (haveNotExistFolder) {\n\t\t\tAlert alert = new Alert(Alert.AlertType.CONFIRMATION);\n\t\t\talert.setContentText(FOLDER_NO_EXIST);\n\t\t\tOptional<ButtonType> optional = alert.showAndWait();\n\t\t\tif (optional.isPresent()) {\n\t\t\t\tif (ButtonType.OK == optional.get()) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tfor (String dir : dirs) {\n\t\t\t\t\t\t\tFileUtils.forceMkdir(new File(dir));\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\tAlertUtil.showErrorAlert("\xe5\x88\x9b\xe5\xbb\xba\xe7\x9b\xae\xe5\xbd\x95\xe5\xa4\xb1\xe8\xb4\xa5\xef\xbc\x8c\xe8\xaf\xb7\xe6\xa3\x80\xe6\x9f\xa5\xe7\x9b\xae\xe5\xbd\x95\xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xaf\xe6\x96\x87\xe4\xbb\xb6\xe8\x80\x8c\xe9\x9d\x9e\xe7\x9b\xae\xe5\xbd\x95");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n        return true;\n    }\n\n    @FXML\n    public void openTargetFolder() {\n        GeneratorConfig generatorConfig = getGeneratorConfigFromUI();\n        String projectFolder = generatorConfig.getProjectFolder();\n        try {\n            Desktop.getDesktop().browse(new File(projectFolder).toURI());\n        }catch (Exception e) {\n            AlertUtil.showErrorAlert("\xe6\x89\x93\xe5\xbc\x80\xe7\x9b\xae\xe5\xbd\x95\xe5\xa4\xb1\xe8\xb4\xa5\xef\xbc\x8c\xe8\xaf\xb7\xe6\xa3\x80\xe6\x9f\xa5\xe7\x9b\xae\xe5\xbd\x95\xe6\x98\xaf\xe5\x90\xa6\xe5\xa1\xab\xe5\x86\x99\xe6\xad\xa3\xe7\xa1\xae" + e.getMessage());\n        }\n\n    }\n}\n'