b'package io.github.javiewer.view;\n\nimport android.animation.Animator;\nimport android.animation.AnimatorListenerAdapter;\nimport android.annotation.TargetApi;\nimport android.app.Activity;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.pm.PackageManager;\nimport android.content.pm.ResolveInfo;\nimport android.content.res.TypedArray;\nimport android.graphics.Rect;\nimport android.graphics.drawable.Drawable;\nimport android.os.Build;\nimport android.os.Parcel;\nimport android.os.Parcelable;\nimport android.speech.RecognizerIntent;\nimport android.text.Editable;\nimport android.text.TextUtils;\nimport android.text.TextWatcher;\nimport android.util.AttributeSet;\nimport android.util.Log;\nimport android.util.TypedValue;\nimport android.view.KeyEvent;\nimport android.view.LayoutInflater;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.view.ViewAnimationUtils;\nimport android.view.inputmethod.InputMethodManager;\nimport android.widget.AdapterView;\nimport android.widget.EditText;\nimport android.widget.Filter;\nimport android.widget.Filterable;\nimport android.widget.FrameLayout;\nimport android.widget.ImageButton;\nimport android.widget.ListAdapter;\nimport android.widget.ListView;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\n\nimport com.miguelcatalan.materialsearchview.SearchAdapter;\nimport com.miguelcatalan.materialsearchview.utils.AnimationUtil;\n\nimport java.lang.reflect.Field;\nimport java.util.List;\n\nimport io.github.javiewer.R;\n\n/**\n * @author Miguel Catalan Ba\xc3\xb1uls\n */\npublic class SimpleSearchView extends FrameLayout implements Filter.FilterListener {\n    public static final int REQUEST_VOICE = 9999;\n\n    private MenuItem mMenuItem;\n    private boolean mIsSearchOpen = false;\n    private int mAnimationDuration;\n    private boolean mClearingFocus;\n\n    //Views\n    private View mSearchLayout;\n    private View mTintView;\n    private ListView mSuggestionsListView;\n    private EditText mSearchSrcTextView;\n    private ImageButton mBackBtn;\n    private ImageButton mVoiceBtn;\n    private ImageButton mEmptyBtn;\n    private RelativeLayout mSearchTopBar;\n\n    private CharSequence mOldQueryText;\n    private CharSequence mUserQuery;\n\n    private OnQueryTextListener mOnQueryChangeListener;\n    private SearchViewListener mSearchViewListener;\n\n    private ListAdapter mAdapter;\n\n    private SavedState mSavedState;\n    private boolean submit = false;\n\n    private boolean ellipsize = false;\n\n    private boolean allowVoiceSearch;\n    private Drawable suggestionIcon;\n\n    private Context mContext;\n    private final OnClickListener mOnClickListener = new OnClickListener() {\n\n        public void onClick(View v) {\n            if (v == mBackBtn) {\n                closeSearch();\n            } else if (v == mVoiceBtn) {\n                onVoiceClicked();\n            } else if (v == mEmptyBtn) {\n                mSearchSrcTextView.setText(null);\n            } else if (v == mSearchSrcTextView) {\n                showSuggestions();\n            } else if (v == mTintView) {\n                closeSearch();\n            }\n        }\n    };\n\n    public SimpleSearchView(Context context) {\n        this(context, null);\n    }\n\n    public SimpleSearchView(Context context, AttributeSet attrs) {\n        this(context, attrs, 0);\n    }\n\n    public SimpleSearchView(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs);\n\n        mContext = context;\n\n        initiateView();\n\n        initStyle(attrs, defStyleAttr);\n    }\n\n    @TargetApi(Build.VERSION_CODES.LOLLIPOP)\n    public static void hide(final View view, final AnimationUtil.AnimationListener listener) {\n        int cx = view.getWidth() - (int) TypedValue.applyDimension(\n                TypedValue.COMPLEX_UNIT_DIP, 24, view.getResources().getDisplayMetrics());\n        int cy = view.getHeight() / 2;\n        int finalRadius = Math.max(view.getWidth(), view.getHeight());\n\n        Animator anim = ViewAnimationUtils.createCircularReveal(view, cx, cy, finalRadius, 0);\n        view.setVisibility(View.VISIBLE);\n        anim.addListener(new AnimatorListenerAdapter() {\n            @Override\n            public void onAnimationStart(Animator animation) {\n                listener.onAnimationStart(view);\n            }\n\n            @Override\n            public void onAnimationEnd(Animator animation) {\n                listener.onAnimationEnd(view);\n            }\n\n            @Override\n            public void onAnimationCancel(Animator animation) {\n                listener.onAnimationCancel(view);\n            }\n\n            @Override\n            public void onAnimationRepeat(Animator animation) {\n\n            }\n        });\n        anim.start();\n    }\n\n    private void initStyle(AttributeSet attrs, int defStyleAttr) {\n        TypedArray a = mContext.obtainStyledAttributes(attrs, R.styleable.MaterialSearchView, defStyleAttr, 0);\n\n        if (a != null) {\n            if (a.hasValue(R.styleable.MaterialSearchView_searchBackground)) {\n                setBackground(a.getDrawable(R.styleable.MaterialSearchView_searchBackground));\n            }\n\n            if (a.hasValue(R.styleable.MaterialSearchView_android_textColor)) {\n                setTextColor(a.getColor(R.styleable.MaterialSearchView_android_textColor, 0));\n            }\n\n            if (a.hasValue(R.styleable.MaterialSearchView_android_textColorHint)) {\n                setHintTextColor(a.getColor(R.styleable.MaterialSearchView_android_textColorHint, 0));\n            }\n\n            if (a.hasValue(R.styleable.MaterialSearchView_android_hint)) {\n                setHint(a.getString(R.styleable.MaterialSearchView_android_hint));\n            }\n\n            if (a.hasValue(R.styleable.MaterialSearchView_searchVoiceIcon)) {\n                setVoiceIcon(a.getDrawable(R.styleable.MaterialSearchView_searchVoiceIcon));\n            }\n\n            if (a.hasValue(R.styleable.MaterialSearchView_searchCloseIcon)) {\n                setCloseIcon(a.getDrawable(R.styleable.MaterialSearchView_searchCloseIcon));\n            }\n\n            if (a.hasValue(R.styleable.MaterialSearchView_searchBackIcon)) {\n                setBackIcon(a.getDrawable(R.styleable.MaterialSearchView_searchBackIcon));\n            }\n\n            if (a.hasValue(R.styleable.MaterialSearchView_searchSuggestionBackground)) {\n                setSuggestionBackground(a.getDrawable(R.styleable.MaterialSearchView_searchSuggestionBackground));\n            }\n\n            if (a.hasValue(R.styleable.MaterialSearchView_searchSuggestionIcon)) {\n                setSuggestionIcon(a.getDrawable(R.styleable.MaterialSearchView_searchSuggestionIcon));\n            }\n\n            a.recycle();\n        }\n    }\n\n    private void initiateView() {\n        LayoutInflater.from(mContext).inflate(R.layout.search_view, this, true);\n        mSearchLayout = findViewById(R.id.search_layout);\n\n        mSearchTopBar = (RelativeLayout) mSearchLayout.findViewById(R.id.search_top_bar);\n        mSuggestionsListView = (ListView) mSearchLayout.findViewById(R.id.suggestion_list);\n        mSearchSrcTextView = (EditText) mSearchLayout.findViewById(R.id.searchTextView);\n        mBackBtn = (ImageButton) mSearchLayout.findViewById(R.id.action_up_btn);\n        mVoiceBtn = (ImageButton) mSearchLayout.findViewById(R.id.action_voice_btn);\n        mEmptyBtn = (ImageButton) mSearchLayout.findViewById(R.id.action_empty_btn);\n        mTintView = mSearchLayout.findViewById(R.id.transparent_view);\n\n        mSearchSrcTextView.setOnClickListener(mOnClickListener);\n        mBackBtn.setOnClickListener(mOnClickListener);\n        mVoiceBtn.setOnClickListener(mOnClickListener);\n        mEmptyBtn.setOnClickListener(mOnClickListener);\n        mTintView.setOnClickListener(mOnClickListener);\n\n        allowVoiceSearch = false;\n\n        showVoice(true);\n\n        initSearchView();\n\n        mSuggestionsListView.setVisibility(GONE);\n        setAnimationDuration(AnimationUtil.ANIMATION_DURATION_MEDIUM);\n    }\n\n    private void initSearchView() {\n        mSearchSrcTextView.setOnEditorActionListener(new TextView.OnEditorActionListener() {\n            @Override\n            public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {\n                onSubmitQuery();\n                return true;\n            }\n        });\n\n        mSearchSrcTextView.addTextChangedListener(new TextWatcher() {\n            @Override\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {\n\n            }\n\n            @Override\n            public void onTextChanged(CharSequence s, int start, int before, int count) {\n                mUserQuery = s;\n                startFilter(s);\n                SimpleSearchView.this.onTextChanged(s);\n            }\n\n            @Override\n            public void afterTextChanged(Editable s) {\n\n            }\n        });\n\n        mSearchSrcTextView.setOnFocusChangeListener(new OnFocusChangeListener() {\n            @Override\n            public void onFocusChange(View v, boolean hasFocus) {\n                if (hasFocus) {\n                    showKeyboard(mSearchSrcTextView);\n                    showSuggestions();\n                }\n            }\n        });\n    }\n\n    private void startFilter(CharSequence s) {\n        if (mAdapter != null && mAdapter instanceof Filterable) {\n            ((Filterable) mAdapter).getFilter().filter(s, SimpleSearchView.this);\n        }\n    }\n\n    private void onVoiceClicked() {\n        Intent intent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);\n        //intent.putExtra(RecognizerIntent.EXTRA_PROMPT, "Speak an item name or number");    // user hint\n        intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_WEB_SEARCH);    // setting recognition model, optimized for short phrases \xe2\x80\x93 search queries\n        intent.putExtra(RecognizerIntent.EXTRA_MAX_RESULTS, 1);    // quantity of results we want to receive\n        if (mContext instanceof Activity) {\n            ((Activity) mContext).startActivityForResult(intent, REQUEST_VOICE);\n        }\n    }\n\n    private void onTextChanged(CharSequence newText) {\n        CharSequence text = mSearchSrcTextView.getText();\n        mUserQuery = text;\n        boolean hasText = !TextUtils.isEmpty(text);\n        if (hasText) {\n            mEmptyBtn.setVisibility(VISIBLE);\n            showVoice(false);\n        } else {\n            mEmptyBtn.setVisibility(GONE);\n            showVoice(true);\n        }\n\n        if (mOnQueryChangeListener != null && !TextUtils.equals(newText, mOldQueryText)) {\n            mOnQueryChangeListener.onQueryTextChange(newText.toString());\n        }\n        mOldQueryText = newText.toString();\n    }\n\n    private void onSubmitQuery() {\n        CharSequence query = mSearchSrcTextView.getText();\n        if (query != null && TextUtils.getTrimmedLength(query) > 0) {\n            if (mOnQueryChangeListener == null || !mOnQueryChangeListener.onQueryTextSubmit(query.toString())) {\n                closeSearch();\n                mSearchSrcTextView.setText(null);\n            }\n        }\n    }\n\n    private boolean isVoiceAvailable() {\n        if (isInEditMode()) {\n            return true;\n        }\n        PackageManager pm = getContext().getPackageManager();\n        List<ResolveInfo> activities = pm.queryIntentActivities(\n                new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH), 0);\n        return activities.size() == 0;\n    }\n\n    public void hideKeyboard(View view) {\n        InputMethodManager imm = (InputMethodManager) view.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);\n        imm.hideSoftInputFromWindow(view.getWindowToken(), 0);\n    }\n\n    //Public Attributes\n\n    public void showKeyboard(View view) {\n        if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.GINGERBREAD_MR1 && view.hasFocus()) {\n            view.clearFocus();\n        }\n        view.requestFocus();\n        InputMethodManager imm = (InputMethodManager) view.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);\n        imm.showSoftInput(view, 0);\n    }\n\n    @Override\n    public void setBackground(Drawable background) {\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {\n            mSearchTopBar.setBackground(background);\n        } else {\n            mSearchTopBar.setBackgroundDrawable(background);\n        }\n    }\n\n    @Override\n    public void setBackgroundColor(int color) {\n        mSearchTopBar.setBackgroundColor(color);\n    }\n\n    public void setTextColor(int color) {\n        mSearchSrcTextView.setTextColor(color);\n    }\n\n    public void setHintTextColor(int color) {\n        mSearchSrcTextView.setHintTextColor(color);\n    }\n\n    public void setHint(CharSequence hint) {\n        mSearchSrcTextView.setHint(hint);\n    }\n\n    public void setVoiceIcon(Drawable drawable) {\n        mVoiceBtn.setImageDrawable(drawable);\n    }\n\n    public void setCloseIcon(Drawable drawable) {\n        mEmptyBtn.setImageDrawable(drawable);\n    }\n\n    public void setBackIcon(Drawable drawable) {\n        mBackBtn.setImageDrawable(drawable);\n    }\n\n    public void setSuggestionIcon(Drawable drawable) {\n        suggestionIcon = drawable;\n    }\n\n    public void setSuggestionBackground(Drawable background) {\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {\n            mSuggestionsListView.setBackground(background);\n        } else {\n            mSuggestionsListView.setBackgroundDrawable(background);\n        }\n    }\n\n    public void setCursorDrawable(int drawable) {\n        try {\n            // https://github.com/android/platform_frameworks_base/blob/kitkat-release/core/java/android/widget/TextView.java#L562-564\n            Field f = TextView.class.getDeclaredField("mCursorDrawableRes");\n            f.setAccessible(true);\n            f.set(mSearchSrcTextView, drawable);\n        } catch (Exception ignored) {\n            Log.e("MaterialSearchView", ignored.toString());\n        }\n    }\n\n    //Public Methods\n\n    public void setVoiceSearch(boolean voiceSearch) {\n        allowVoiceSearch = voiceSearch;\n    }\n\n    /**\n     * Call this method to show suggestions list. This shows up when adapter is set. Call {@link #setAdapter(ListAdapter)} before calling this.\n     */\n    public void showSuggestions() {\n        if (mAdapter != null && mAdapter.getCount() > 0 && mSuggestionsListView.getVisibility() == GONE) {\n            mSuggestionsListView.setVisibility(VISIBLE);\n        }\n    }\n\n    /**\n     * Submit the query as soon as the user clicks the item.\n     *\n     * @param submit submit state\n     */\n    public void setSubmitOnClick(boolean submit) {\n        this.submit = submit;\n    }\n\n    /**\n     * Set Suggest List OnItemClickListener\n     *\n     * @param listener\n     */\n    public void setOnItemClickListener(AdapterView.OnItemClickListener listener) {\n        mSuggestionsListView.setOnItemClickListener(listener);\n    }\n\n    /**\n     * Set Adapter for suggestions list. Should implement Filterable.\n     *\n     * @param adapter\n     */\n    public void setAdapter(ListAdapter adapter) {\n        mAdapter = adapter;\n        mSuggestionsListView.setAdapter(adapter);\n        startFilter(mSearchSrcTextView.getText());\n    }\n\n    /**\n     * Set Adapter for suggestions list with the given suggestion array\n     *\n     * @param suggestions array of suggestions\n     */\n    public void setSuggestions(String[] suggestions) {\n        if (suggestions != null && suggestions.length > 0) {\n            mTintView.setVisibility(VISIBLE);\n            final SearchAdapter adapter = new SearchAdapter(mContext, suggestions, suggestionIcon, ellipsize);\n            setAdapter(adapter);\n\n            setOnItemClickListener(new AdapterView.OnItemClickListener() {\n                @Override\n                public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\n                    setQuery((String) adapter.getItem(position), submit);\n                }\n            });\n        } else {\n            mTintView.setVisibility(GONE);\n        }\n    }\n\n    /**\n     * Dismiss the suggestions list.\n     */\n    public void dismissSuggestions() {\n        if (mSuggestionsListView.getVisibility() == VISIBLE) {\n            mSuggestionsListView.setVisibility(GONE);\n        }\n    }\n\n    /**\n     * Calling this will set the query to search text box. if submit is true, it\'ll submit the query.\n     *\n     * @param query\n     * @param submit\n     */\n    public void setQuery(CharSequence query, boolean submit) {\n        mSearchSrcTextView.setText(query);\n        if (query != null) {\n            mSearchSrcTextView.setSelection(mSearchSrcTextView.length());\n            mUserQuery = query;\n        }\n        if (submit && !TextUtils.isEmpty(query)) {\n            onSubmitQuery();\n        }\n    }\n\n    /**\n     * if show is true, this will enable voice search. If voice is not available on the device, this method call has not effect.\n     *\n     * @param show\n     */\n    public void showVoice(boolean show) {\n        if (show && isVoiceAvailable() && allowVoiceSearch) {\n            mVoiceBtn.setVisibility(VISIBLE);\n        } else {\n            mVoiceBtn.setVisibility(GONE);\n        }\n    }\n\n    /**\n     * Call this method and pass the menu item so this class can handle click events for the Menu Item.\n     *\n     * @param menuItem\n     */\n    public void setMenuItem(MenuItem menuItem) {\n        this.mMenuItem = menuItem;\n        mMenuItem.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener() {\n            @Override\n            public boolean onMenuItemClick(MenuItem item) {\n                showSearch();\n                return true;\n            }\n        });\n    }\n\n    /**\n     * Return true if search is open\n     *\n     * @return\n     */\n    public boolean isSearchOpen() {\n        return mIsSearchOpen;\n    }\n\n    /**\n     * Sets animation duration. ONLY FOR PRE-LOLLIPOP!!\n     *\n     * @param duration duration of the animation\n     */\n    public void setAnimationDuration(int duration) {\n        mAnimationDuration = duration;\n    }\n\n    /**\n     * Open Search View. This will animate the showing of the view.\n     */\n    public void showSearch() {\n        showSearch(true);\n    }\n\n    /**\n     * Open Search View. If animate is true, Animate the showing of the view.\n     *\n     * @param animate true for animate\n     */\n    public void showSearch(boolean animate) {\n        if (isSearchOpen()) {\n            return;\n        }\n\n        //Request Focus\n        mSearchSrcTextView.setText(null);\n        mSearchSrcTextView.requestFocus();\n\n        if (animate) {\n            setVisibleWithAnimation();\n\n        } else {\n            mSearchLayout.setVisibility(VISIBLE);\n            if (mSearchViewListener != null) {\n                mSearchViewListener.onSearchViewShown();\n            }\n        }\n        mIsSearchOpen = true;\n    }\n\n    private void setVisibleWithAnimation() {\n        AnimationUtil.AnimationListener animationListener = new AnimationUtil.AnimationListener() {\n            @Override\n            public boolean onAnimationStart(View view) {\n                return false;\n            }\n\n            @Override\n            public boolean onAnimationEnd(View view) {\n                if (mSearchViewListener != null) {\n                    mSearchViewListener.onSearchViewShown();\n                }\n                return false;\n            }\n\n            @Override\n            public boolean onAnimationCancel(View view) {\n                return false;\n            }\n        };\n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n            mSearchLayout.setVisibility(View.VISIBLE);\n            AnimationUtil.reveal(mSearchTopBar, animationListener);\n\n        } else {\n            AnimationUtil.fadeInView(mSearchLayout, mAnimationDuration, animationListener);\n        }\n    }\n\n    /**\n     * Close search view.\n     */\n    public void closeSearch() {\n        if (!isSearchOpen()) {\n            return;\n        }\n\n        AnimationUtil.AnimationListener animationListener = new AnimationUtil.AnimationListener() {\n\n            @Override\n            public boolean onAnimationStart(View view) {\n                return false;\n            }\n\n            @Override\n            public boolean onAnimationEnd(View view) {\n                mSearchSrcTextView.setText(null);\n                dismissSuggestions();\n                clearFocus();\n\n                mSearchLayout.setVisibility(GONE);\n                if (mSearchViewListener != null) {\n                    mSearchViewListener.onSearchViewClosed();\n                }\n                mIsSearchOpen = false;\n\n                return false;\n            }\n\n            @Override\n            public boolean onAnimationCancel(View view) {\n                return false;\n            }\n        };\n\n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n            mSearchLayout.setVisibility(View.VISIBLE);\n            hide(mSearchTopBar, animationListener);\n\n        } else {\n            mSearchLayout.setVisibility(VISIBLE);\n            AnimationUtil.fadeOutView(mSearchLayout, AnimationUtil.ANIMATION_DURATION_MEDIUM, animationListener);\n        }\n    }\n\n    /**\n     * Set this listener to listen to Query Change events.\n     *\n     * @param listener\n     */\n    public void setOnQueryTextListener(OnQueryTextListener listener) {\n        mOnQueryChangeListener = listener;\n    }\n\n    /**\n     * Set this listener to listen to Search View open and close events\n     *\n     * @param listener\n     */\n    public void setOnSearchViewListener(SearchViewListener listener) {\n        mSearchViewListener = listener;\n    }\n\n    /**\n     * Ellipsize suggestions longer than one line.\n     *\n     * @param ellipsize\n     */\n    public void setEllipsize(boolean ellipsize) {\n        this.ellipsize = ellipsize;\n    }\n\n    @Override\n    public void onFilterComplete(int count) {\n        if (count > 0) {\n            showSuggestions();\n        } else {\n            dismissSuggestions();\n        }\n    }\n\n    @Override\n    public boolean requestFocus(int direction, Rect previouslyFocusedRect) {\n        // Don\'t accept focus if in the middle of clearing focus\n        if (mClearingFocus) return false;\n        // Check if SearchView is focusable.\n        if (!isFocusable()) return false;\n        return mSearchSrcTextView.requestFocus(direction, previouslyFocusedRect);\n    }\n\n    @Override\n    public void clearFocus() {\n        mClearingFocus = true;\n        hideKeyboard(this);\n        super.clearFocus();\n        mSearchSrcTextView.clearFocus();\n        mClearingFocus = false;\n    }\n\n    @Override\n    public Parcelable onSaveInstanceState() {\n        Parcelable superState = super.onSaveInstanceState();\n\n        mSavedState = new SavedState(superState);\n        mSavedState.query = mUserQuery != null ? mUserQuery.toString() : null;\n        mSavedState.isSearchOpen = this.mIsSearchOpen;\n\n        return mSavedState;\n    }\n\n    @Override\n    public void onRestoreInstanceState(Parcelable state) {\n        if (!(state instanceof SavedState)) {\n            super.onRestoreInstanceState(state);\n            return;\n        }\n\n        mSavedState = (SavedState) state;\n\n        if (mSavedState.isSearchOpen) {\n            showSearch(false);\n            setQuery(mSavedState.query, false);\n        }\n\n        super.onRestoreInstanceState(mSavedState.getSuperState());\n    }\n\n    public interface OnQueryTextListener {\n\n        /**\n         * Called when the user submits the query. This could be due to a key press on the\n         * keyboard or due to pressing a submit button.\n         * The listener can override the standard behavior by returning true\n         * to indicate that it has handled the submit request. Otherwise return false to\n         * let the SearchView handle the submission by launching any associated intent.\n         *\n         * @param query the query text that is to be submitted\n         * @return true if the query has been handled by the listener, false to let the\n         * SearchView perform the default action.\n         */\n        boolean onQueryTextSubmit(String query);\n\n        /**\n         * Called when the query text is changed by the user.\n         *\n         * @param newText the new content of the query text field.\n         * @return false if the SearchView should perform the default action of showing any\n         * suggestions if available, true if the action was handled by the listener.\n         */\n        boolean onQueryTextChange(String newText);\n    }\n\n    public interface SearchViewListener {\n        void onSearchViewShown();\n\n        void onSearchViewClosed();\n    }\n\n    static class SavedState extends BaseSavedState {\n        //required field that makes Parcelables from a Parcel\n        public static final Creator<SavedState> CREATOR =\n                new Creator<SavedState>() {\n                    public SavedState createFromParcel(Parcel in) {\n                        return new SavedState(in);\n                    }\n\n                    public SavedState[] newArray(int size) {\n                        return new SavedState[size];\n                    }\n                };\n        String query;\n        boolean isSearchOpen;\n\n        SavedState(Parcelable superState) {\n            super(superState);\n        }\n\n        private SavedState(Parcel in) {\n            super(in);\n            this.query = in.readString();\n            this.isSearchOpen = in.readInt() == 1;\n        }\n\n        @Override\n        public void writeToParcel(Parcel out, int flags) {\n            super.writeToParcel(out, flags);\n            out.writeString(query);\n            out.writeInt(isSearchOpen ? 1 : 0);\n        }\n    }\n\n\n}'