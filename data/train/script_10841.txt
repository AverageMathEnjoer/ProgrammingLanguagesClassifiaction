b'import qualified Control.Lens                 as L\nimport           Data.Colour\nimport           Data.Colour.Names\nimport           Data.Default.Class\nimport           Data.IORef\nimport qualified Graphics.Rendering.Chart     as C\nimport           Graphics.Rendering.Chart.Gtk\nimport           Graphics.UI.Gtk\nimport           System.Environment           (getArgs)\n\nmain :: IO ()\nmain= do\n    initGUI\n    window <- windowNew\n    set window [windowTitle          := "Simple Iteration",\n                windowDefaultWidth   := 300,\n                windowDefaultHeight  := 200,\n                containerBorderWidth := 30 ]\n\n    vb <- vBoxNew False 0\n    containerAdd window vb\n\n    hb <- hBoxNew False 0\n    boxPackStart vb hb PackNatural 0\n\n    rvalue <- entryNew\n    boxPackStart hb rvalue PackNatural 5\n    entrySetText rvalue "R value"\n\n    x0value <- entryNew\n    boxPackStart hb x0value PackNatural 5\n    entrySetText x0value "x0 value"\n\n    button <- buttonNewWithLabel "Plot"\n    boxPackStart hb button PackNatural 0\n\n    buttonPlus <- buttonNewWithLabel "+"\n    boxPackStart hb buttonPlus PackNatural 0\n\n    buttonMinus <- buttonNewWithLabel " - "\n    boxPackStart hb buttonMinus PackNatural 0\n\n    txtstack <- statusbarNew\n    boxPackStart vb txtstack PackNatural 0\n\n    id <- statusbarGetContextId txtstack "Line"\n\n    frame <- frameNew\n    boxPackStart vb frame PackGrow 0\n    containerAdd window frame\n\n    canvas <- drawingAreaNew\n    containerAdd frame canvas\n    widgetModifyBg canvas StateNormal (Color 65535 65535 65535)\n\n    widgetShowAll window\n\n    iterations <- newIORef [1..400]\n\n    onPressed button (drawer canvas rvalue x0value iterations >> return ())\n    onPressed buttonPlus (modifyIORef iterations (\\ arr -> arr ++ [last arr + 1..last arr * 2]) >> drawer canvas rvalue x0value iterations >> return ())\n    onPressed buttonMinus (modifyIORef iterations (\\ arr -> take ((length arr) `div` 2) arr) >> drawer canvas rvalue x0value iterations >> return ())\n    onDestroy window mainQuit\n\n    mainGUI\n\n\ndrawer canvas rvalue x0value iterations = do\n    it <- readIORef iterations\n    rx <- entryGetText rvalue\n    x0 <- entryGetText x0value\n    updateCanvas (chart (read rx :: Double) (read x0 :: Double) it) canvas\n\n\nsetLinesBlue :: C.PlotLines a b -> C.PlotLines a b\nsetLinesBlue = C.plot_lines_style  . C.line_color L..~ opaque blue\n\nchart :: Double -> Double -> [Double] -> C.Renderable()\nchart rx x0 iterations = C.toRenderable (layout x0)\n  where\n    phi :: Double -> Double\n    phi x = rx * x * (1 - x)\n\n    plotFunction x0 = C.plot_lines_values L..~ ([ zip iterations (foldl (\\acc _ -> acc ++ [(phi $ last acc)]) [phi x0] iterations)] :: [[(Double, Double)]])\n            $ C.plot_lines_style  . C.line_color L..~ opaque blue\n            $ C.plot_lines_title L..~ "phi (x)"\n            $ def\n\n    layout x0 = C.layout_title L..~ "Simple Iteration"\n            $ C.layout_plots L..~ [C.toPlot $ plotFunction x0]\n            $ def\n'