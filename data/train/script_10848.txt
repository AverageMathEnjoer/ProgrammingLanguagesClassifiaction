b'namespace CS_SQLite3\n{\n  public partial class CSSQLite\n  {\n    /*\n    ** 2007 May 7\n    **\n    ** The author disclaims copyright to this source code.  In place of\n    ** a legal notice, here is a blessing:\n    **\n    **    May you do good and not evil.\n    **    May you find forgiveness for yourself and forgive others.\n    **    May you share freely, never taking more than you give.\n    **\n    *************************************************************************\n    **\n    ** This file defines various limits of what SQLite can process.\n    **\n    ** @(#) $Id: sqliteLimit.h,v 1.10 2009/01/10 16:15:09 danielk1977 Exp $\n    **\n    *************************************************************************\n    **  Included in SQLite3 port to C#-SQLite;  2008 Noah B Hart\n    **  C#-SQLite is an independent reimplementation of the SQLite software library\n    **\n    **  $Header$\n    *************************************************************************\n    */\n\n    /*\n    ** The maximum length of a TEXT or BLOB in bytes.   This also\n    ** limits the size of a row in a table or index.\n    **\n    ** The hard limit is the ability of a 32-bit signed integer\n    ** to count the size: 2^31-1 or 2147483647.\n    */\n#if !SQLITE_MAX_LENGTH\n    const int SQLITE_MAX_LENGTH = 1000000000;\n#endif\n\n    /*\n** This is the maximum number of\n**\n**    * Columns in a table\n**    * Columns in an index\n**    * Columns in a view\n**    * Terms in the SET clause of an UPDATE statement\n**    * Terms in the result set of a SELECT statement\n**    * Terms in the GROUP BY or ORDER BY clauses of a SELECT statement.\n**    * Terms in the VALUES clause of an INSERT statement\n**\n** The hard upper limit here is 32676.  Most database people will\n** tell you that in a well-normalized database, you usually should\n** not have more than a dozen or so columns in any table.  And if\n** that is the case, there is no point in having more than a few\n** dozen values in any of the other situations described above.\n*/\n#if !SQLITE_MAX_COLUMN\n    const int SQLITE_MAX_COLUMN = 2000;\n#endif\n\n    /*\n** The maximum length of a single SQL statement in bytes.\n**\n** It used to be the case that setting this value to zero would\n** turn the limit off.  That is no longer true.  It is not possible\n** to turn this limit off.\n*/\n#if !SQLITE_MAX_SQL_LENGTH\n    const int SQLITE_MAX_SQL_LENGTH = 1000000000;\n#endif\n\n    /*\n** The maximum depth of an expression tree. This is limited to\n** some extent by SQLITE_MAX_SQL_LENGTH. But sometime you might\n** want to place more severe limits on the complexity of an\n** expression.\n**\n** A value of 0 used to mean that the limit was not enforced.\n** But that is no longer true.  The limit is now strictly enforced\n** at all times.\n*/\n#if !SQLITE_MAX_EXPR_DEPTH\n    const int SQLITE_MAX_EXPR_DEPTH = 1000;\n#endif\n\n    /*\n** The maximum number of terms in a compound SELECT statement.\n** The code generator for compound SELECT statements does one\n** level of recursion for each term.  A stack overflow can result\n** if the number of terms is too large.  In practice, most SQL\n** never has more than 3 or 4 terms.  Use a value of 0 to disable\n** any limit on the number of terms in a compount SELECT.\n*/\n#if !SQLITE_MAX_COMPOUND_SELECT\n    const int SQLITE_MAX_COMPOUND_SELECT = 250;\n#endif\n\n    /*\n** The maximum number of opcodes in a VDBE program.\n** Not currently enforced.\n*/\n#if !SQLITE_MAX_VDBE_OP\n    const int SQLITE_MAX_VDBE_OP = 25000;\n#endif\n\n    /*\n** The maximum number of arguments to an SQL function.\n*/\n#if !SQLITE_MAX_FUNCTION_ARG\n    const int SQLITE_MAX_FUNCTION_ARG = 127;//# define SQLITE_MAX_FUNCTION_ARG 127\n#endif\n\n    /*\n** The maximum number of in-memory pages to use for the main database\n** table and for temporary tables.  The SQLITE_DEFAULT_CACHE_SIZE\n*/\n#if !SQLITE_DEFAULT_CACHE_SIZE\n    const int SQLITE_DEFAULT_CACHE_SIZE = 2000;\n#endif\n#if !SQLITE_DEFAULT_TEMP_CACHE_SIZE\n    const int SQLITE_DEFAULT_TEMP_CACHE_SIZE = 500;\n#endif\n\n    /*\n** The maximum number of attached databases.  This must be between 0\n** and 30.  The upper bound on 30 is because a 32-bit integer bitmap\n** is used internally to track attached databases.\n*/\n#if !SQLITE_MAX_ATTACHED\n    const int SQLITE_MAX_ATTACHED = 10;\n#endif\n\n\n    /*\n** The maximum value of a ?nnn wildcard that the parser will accept.\n*/\n#if !SQLITE_MAX_VARIABLE_NUMBER\n    const int SQLITE_MAX_VARIABLE_NUMBER = 999;\n#endif\n\n    /* Maximum page size.  The upper bound on this value is 32768.  This a limit\n** imposed by the necessity of storing the value in a 2-byte unsigned integer\n** and the fact that the page size must be a power of 2.\n**\n** If this limit is changed, then the compiled library is technically\n** incompatible with an SQLite library compiled with a different limit. If\n** a process operating on a database with a page-size of 65536 bytes\n** crashes, then an instance of SQLite compiled with the default page-size\n** limit will not be able to rollback the aborted transaction. This could\n** lead to database corruption.\n*/\n#if !SQLITE_MAX_PAGE_SIZE\n    const int SQLITE_MAX_PAGE_SIZE = 32768;\n#endif\n\n\n    /*\n** The default size of a database page.\n*/\n#if !SQLITE_DEFAULT_PAGE_SIZE\n    const int SQLITE_DEFAULT_PAGE_SIZE = 1024;\n#endif\n#if SQLITE_DEFAULT_PAGE_SIZE //SQLITE_DEFAULT_PAGE_SIZE>SQLITE_MAX_PAGE_SIZE\n# undef SQLITE_DEFAULT_PAGE_SIZE\nconst int SQLITE_DEFAULT_PAGE_SIZE SQLITE_MAX_PAGE_SIZE\n#endif\n\n    /*\n** Ordinarily, if no value is explicitly provided, SQLite creates databases\n** with page size SQLITE_DEFAULT_PAGE_SIZE. However, based on certain\n** device characteristics (sector-size and atomic write() support),\n** SQLite may choose a larger value. This constant is the maximum value\n** SQLite will choose on its own.\n*/\n#if !SQLITE_MAX_DEFAULT_PAGE_SIZE\n    const int SQLITE_MAX_DEFAULT_PAGE_SIZE = 8192;\n#endif\n#if SQLITE_MAX_DEFAULT_PAGE_SIZE //SQLITE_MAX_DEFAULT_PAGE_SIZE>SQLITE_MAX_PAGE_SIZE\n# undef SQLITE_MAX_DEFAULT_PAGE_SIZE\nconst int SQLITE_MAX_DEFAULT_PAGE_SIZE SQLITE_MAX_PAGE_SIZE\n#endif\n\n\n    /*\n** Maximum number of pages in one database file.\n**\n** This is really just the default value for the max_page_count pragma.\n** This value can be lowered (or raised) at run-time using that the\n** max_page_count macro.\n*/\n#if !SQLITE_MAX_PAGE_COUNT\n    const int SQLITE_MAX_PAGE_COUNT = 1073741823;\n#endif\n\n    /*\n** Maximum length (in bytes) of the pattern in a LIKE or GLOB\n** operator.\n*/\n#if !SQLITE_MAX_LIKE_PATTERN_LENGTH\n    const int SQLITE_MAX_LIKE_PATTERN_LENGTH = 50000;\n#endif\n  }\n}\n'