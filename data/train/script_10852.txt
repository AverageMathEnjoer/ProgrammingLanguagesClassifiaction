b'\xef\xbb\xbfusing System;\nusing System.IO;\nusing System.Text;\n\nnamespace SweetPotato {\n\n    public enum TowerProtocol : ushort {\n        EPM_PROTOCOL_DNET_NSP = 0x04,\n        EPM_PROTOCOL_OSI_TP4 = 0x05,\n        EPM_PROTOCOL_OSI_CLNS = 0x06,\n        EPM_PROTOCOL_TCP = 0x07,\n        EPM_PROTOCOL_UDP = 0x08,\n        EPM_PROTOCOL_IP = 0x09,\n        EPM_PROTOCOL_NCADG = 0x0a, /* Connectionless RPC */\n        EPM_PROTOCOL_NCACN = 0x0b,\n        EPM_PROTOCOL_NCALRPC = 0x0c, /* Local RPC */\n        EPM_PROTOCOL_UUID = 0x0d,\n        EPM_PROTOCOL_IPX = 0x0e,\n        EPM_PROTOCOL_SMB = 0x0f,\n        EPM_PROTOCOL_NAMED_PIPE = 0x10,\n        EPM_PROTOCOL_NETBIOS = 0x11,\n        EPM_PROTOCOL_NETBEUI = 0x12,\n        EPM_PROTOCOL_SPX = 0x13,\n        EPM_PROTOCOL_NB_IPX = 0x14, /* NetBIOS over IPX */\n        EPM_PROTOCOL_DSP = 0x16, /* AppleTalk Data Stream Protocol */\n        EPM_PROTOCOL_DDP = 0x17, /* AppleTalk Data Datagram Protocol */\n        EPM_PROTOCOL_APPLETALK = 0x18, /* AppleTalk */\n        EPM_PROTOCOL_VINES_SPP = 0x1a,\n        EPM_PROTOCOL_VINES_IPC = 0x1b, /* Inter Process Communication */\n        EPM_PROTOCOL_STREETTALK = 0x1c, /* Vines Streettalk */\n        EPM_PROTOCOL_HTTP = 0x1f,\n        EPM_PROTOCOL_UNIX_DS = 0x20, /* Unix domain socket */\n        EPM_PROTOCOL_NULL = 0x21\n    }\n\n    internal class ObjRef {\n\n        [Flags]\n        enum Type : uint {\n            Standard = 0x1,\n            Handler = 0x2,\n            Custom = 0x4\n        }\n\n        const uint Signature = 0x574f454d;\n        public readonly Guid Guid;\n        public readonly Standard StandardObjRef;\n\n        public ObjRef(Guid guid, Standard standardObjRef) {\n            Guid = guid;\n            StandardObjRef = standardObjRef;\n        }\n\n        public ObjRef(byte[] objRefBytes) {\n\n            BinaryReader br = new BinaryReader(new MemoryStream(objRefBytes), Encoding.Unicode);\n\n            if (br.ReadUInt32() != Signature) {\n                throw new InvalidDataException("Does not look like an OBJREF stream");\n            }\n\n            uint flags = br.ReadUInt32();\n            Guid = new Guid(br.ReadBytes(16));\n\n            if ((Type)flags == Type.Standard) {\n                StandardObjRef = new Standard(br);\n            }\n        }\n\n        public byte[] GetBytes() {\n            BinaryWriter bw = new BinaryWriter(new MemoryStream());\n\n            bw.Write(Signature);\n            bw.Write((uint)1);\n            bw.Write(Guid.ToByteArray());\n\n            StandardObjRef.Save(bw);\n\n            return ((MemoryStream)bw.BaseStream).ToArray();\n        }\n\n        internal class SecurityBinding {\n\n            public readonly ushort AuthnSvc;\n            public readonly ushort AuthzSvc;\n            public readonly string PrincipalName;\n\n            public SecurityBinding(ushort authnSvc, ushort authzSnc, string principalName) {\n                AuthnSvc = authnSvc;\n                AuthzSvc = authzSnc;\n                PrincipalName = principalName;\n            }\n\n            public SecurityBinding(BinaryReader br) {\n\n                AuthnSvc = br.ReadUInt16();\n                AuthzSvc = br.ReadUInt16();\n                char character;\n                string principalName = "";\n\n                while ((character = br.ReadChar()) != 0) {\n                    principalName += character;\n                }\n\n                br.ReadChar();\n            }\n\n\n            public byte[] GetBytes() {\n                BinaryWriter bw = new BinaryWriter(new MemoryStream(), Encoding.Unicode);\n\n                bw.Write(AuthnSvc);\n                bw.Write(AuthzSvc);\n\n                if (PrincipalName != null && PrincipalName.Length > 0)\n                    bw.Write(Encoding.Unicode.GetBytes(PrincipalName));\n\n                bw.Write((char)0);\n                bw.Write((char)0);\n\n                return ((MemoryStream)bw.BaseStream).ToArray();\n            }\n        }\n\n        internal class StringBinding {\n            public readonly TowerProtocol TowerID;\n            public readonly string NetworkAddress;\n\n            public StringBinding(TowerProtocol towerID, string networkAddress) {\n                TowerID = towerID;\n                NetworkAddress = networkAddress;\n            }\n\n            public StringBinding(BinaryReader br) {\n                TowerID = (TowerProtocol)br.ReadUInt16();\n                char character;\n                string networkAddress = "";\n\n                while ((character = br.ReadChar()) != 0) {\n                    networkAddress += character;\n                }\n\n                br.ReadChar();\n                NetworkAddress = networkAddress;\n            }\n\n            internal byte[] GetBytes() {\n                BinaryWriter bw = new BinaryWriter(new MemoryStream(), Encoding.Unicode);\n\n                bw.Write((ushort)TowerID);\n                bw.Write(Encoding.Unicode.GetBytes(NetworkAddress));\n                bw.Write((char)0);\n                bw.Write((char)0);\n\n                return ((MemoryStream)bw.BaseStream).ToArray();\n            }\n        }\n\n        internal class DualStringArray {\n            private readonly ushort NumEntries;\n            private readonly ushort SecurityOffset;\n            public readonly StringBinding StringBinding;\n            public readonly SecurityBinding SecurityBinding;\n\n            public DualStringArray(StringBinding stringBinding, SecurityBinding securityBinding) {\n                NumEntries = (ushort)((stringBinding.GetBytes().Length + securityBinding.GetBytes().Length) / 2);\n                SecurityOffset = (ushort)(stringBinding.GetBytes().Length / 2);\n\n                StringBinding = stringBinding;\n                SecurityBinding = securityBinding;\n            }\n\n            public DualStringArray(BinaryReader br) {\n                NumEntries = br.ReadUInt16();\n                SecurityOffset = br.ReadUInt16();\n\n                StringBinding = new StringBinding(br);\n                SecurityBinding = new SecurityBinding(br);\n            }\n\n            internal void Save(BinaryWriter bw) {\n\n                byte[] stringBinding = StringBinding.GetBytes();\n                byte[] securityBinding = SecurityBinding.GetBytes();\n\n                bw.Write((ushort)((stringBinding.Length + securityBinding.Length) / 2));\n                bw.Write((ushort)(stringBinding.Length / 2));\n                bw.Write(stringBinding);\n                bw.Write(securityBinding);\n            }\n        }\n\n        internal class Standard {\n\n            const ulong Oxid = 0x0703d84a06ec96cc;\n            const ulong Oid = 0x539d029cce31ac;\n\n            public readonly uint Flags;\n            public readonly uint PublicRefs;\n            public readonly ulong OXID;\n            public readonly ulong OID;\n            public readonly Guid IPID;\n            public readonly DualStringArray DualStringArray;\n\n            public Standard(uint flags, uint publicRefs, ulong oxid, ulong oid, Guid ipid, DualStringArray dualStringArray) {\n                Flags = flags;\n                PublicRefs = publicRefs;\n                OXID = oxid;\n                OID = oid;\n                IPID = ipid;\n                DualStringArray = dualStringArray;\n            }\n\n            public Standard(BinaryReader br) {\n                Flags = br.ReadUInt32();\n                PublicRefs = br.ReadUInt32();\n                OXID = br.ReadUInt64();\n                OID = br.ReadUInt64();\n                IPID = new Guid(br.ReadBytes(16));\n\n                DualStringArray = new DualStringArray(br);\n            }\n\n            internal void Save(BinaryWriter bw) {\n                bw.Write(Flags);\n                bw.Write(PublicRefs);\n                bw.Write(OXID);\n                bw.Write(OID);\n                bw.Write(IPID.ToByteArray());\n                DualStringArray.Save(bw);\n            }\n        }\n    }\n}\n'