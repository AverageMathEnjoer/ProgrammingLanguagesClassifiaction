b'-- A converter between a custom graph format and GDF\n\nmodule Main where\n\n\ncommas = foldr f [[]] \n  where f c l@(x:xs) | c == \',\'  = []:l\n                     | otherwise = (c:x):xs\n\nnodeify [] = []\nnodeify (line:rest) =\n  (node !! 0, node !! 1, node !! 2) : nodeify rest\n  where\n    node = map (\\s -> if head s == \' \' then tail s else s) $ commas line\n\nedgeify [] = []\nedgeify (line:rest) =\n  [(node, conn) | conn <- conns] ++ edgeify nodes rest\n  where\n    node  = head $ commas line\n    conns = map (\\s -> if head s == \' \' then tail s else s) . drop 3 $ commas line\n\nundirect [] = []\nundirect ((a, b):rest) =\n  if (b, a) `elem` rest\n     then undirect rest\n     else (a, b) : undirect rest\n\nmain :: IO ()\nmain = do\n  contents <- readFile "stationlist.txt"\n  let nodes = nodeify $ lines contents\n      edges = undirect . edgeify nodes $ lines contents\n      nodesout = unlines [name ++ "," ++ weight ++ "," ++ label | (name, weight, label) <- nodes]\n      edgesout = unlines [name1 ++ "," ++ name2 | (name1, name2) <- edges]\n\n  writeFile "stationlist.gdf" $ nodesout ++ edgesout\n  putStrLn "Done"\n\n\n'