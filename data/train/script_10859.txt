b'{-# LANGUAGE OverloadedStrings #-}\n\n-- | Document info dictionary\n\nmodule Pdf.Document.Info\n(\n  Info,\n  infoTitle,\n  infoAuthor,\n  infoSubject,\n  infoKeywords,\n  infoCreator,\n  infoProducer,\n)\nwhere\n\nimport Pdf.Core.Exception\nimport Pdf.Core.Util\nimport Pdf.Core.Object.Util\n\nimport Pdf.Document.Pdf\nimport Pdf.Document.Internal.Types\nimport Pdf.Document.Internal.Util\n\nimport Data.Text (Text)\nimport qualified Data.HashMap.Strict as HashMap\n\n-- | Document title\ninfoTitle :: Info -> IO (Maybe Text)\ninfoTitle (Info pdf _ dict) =\n  case HashMap.lookup "Title" dict of\n    Nothing -> return Nothing\n    Just o -> do\n      o\' <- deref pdf o\n      mstr <- sure $ fmap Just (stringValue o\') `notice` "Title should be a string"\n      case mstr of\n        Nothing -> return Nothing\n        Just str -> Just <$> decodeTextStringThrow str\n\n-- | The name of the person who created the document\ninfoAuthor :: Info -> IO (Maybe Text)\ninfoAuthor (Info pdf _ dict) =\n  case HashMap.lookup "Author" dict of\n    Nothing -> return Nothing\n    Just o -> do\n      o\' <- deref pdf o\n      mstr <- sure $ fmap Just (stringValue o\') `notice` "Author should be a string"\n      case mstr of\n        Nothing -> return Nothing\n        Just str -> Just <$> decodeTextStringThrow str\n\n-- | The subject of the document\ninfoSubject :: Info -> IO (Maybe Text)\ninfoSubject (Info pdf _ dict) =\n  case HashMap.lookup "Subject" dict of\n    Nothing -> return Nothing\n    Just o -> do\n      o\' <- deref pdf o\n      mstr <- sure $ fmap Just (stringValue o\') `notice` "Subject should be a string"\n      case mstr of\n        Nothing -> return Nothing\n        Just str -> Just <$> decodeTextStringThrow str\n\n-- | Keywords associated with the document\ninfoKeywords :: Info -> IO (Maybe Text)\ninfoKeywords (Info pdf _ dict) =\n  case HashMap.lookup "Keywords" dict of\n    Nothing -> return Nothing\n    Just o -> do\n      o\' <- deref pdf o\n      mstr <- sure $ fmap Just (stringValue o\') `notice` "Keywords should be a string"\n      case mstr of\n        Nothing -> return Nothing\n        Just str -> Just <$> decodeTextStringThrow str\n\n-- | The name of the application that created the original document\ninfoCreator :: Info -> IO (Maybe Text)\ninfoCreator (Info pdf _ dict) =\n  case HashMap.lookup "Creator" dict of\n    Nothing -> return Nothing\n    Just o -> do\n      o\' <- deref pdf o\n      mstr <- sure $ fmap Just (stringValue o\') `notice` "Creator should be a string"\n      case mstr of\n        Nothing -> return Nothing\n        Just str -> Just <$> decodeTextStringThrow str\n\n-- | The name of the application that converted the document to PDF format\ninfoProducer :: Info -> IO (Maybe Text)\ninfoProducer (Info pdf _ dict) =\n  case HashMap.lookup "Producer" dict of\n    Nothing -> return Nothing\n    Just o -> do\n      o\' <- deref pdf o\n      mstr <- sure $ fmap Just (stringValue o\') `notice` "Producer should be a string"\n      case mstr of\n        Nothing -> return Nothing\n        Just str -> Just <$> decodeTextStringThrow str\n'