b'package com.iammert.library\n\nimport android.content.Context\nimport android.content.res.XmlResourceParser\nimport android.graphics.drawable.Drawable\nimport androidx.core.content.ContextCompat\nimport org.xmlpull.v1.XmlPullParserException\n\nclass AnimatedTabResourceParser(private val context: Context?, xmlRes: Int) {\n\n    private val parser = context?.resources?.getXml(xmlRes)\n\n    private var itemSize: Float = 0.0f\n    var space: Float = 0.0f\n\n    fun parse(): List<AnimatedTabItemContainer> {\n        val tabs: ArrayList<AnimatedTabItemContainer> = arrayListOf()\n        try {\n            var eventType: Int?\n            do {\n                eventType = parser?.next()\n                if (eventType == XmlResourceParser.START_TAG && KEY_TABS == parser?.name) {\n                    parseTabsConfig(parser)\n                } else if (eventType == XmlResourceParser.START_TAG && KEY_TAB == parser?.name) {\n                    val tab: AnimatedTabItemContainer = parseSingleTab(parser)\n                    tabs.add(tab)\n                }\n            } while (eventType != XmlResourceParser.END_DOCUMENT)\n        } catch (e: XmlPullParserException) {\n            e.printStackTrace()\n            throw Exception()\n        }\n        return tabs\n    }\n\n    private fun parseTabsConfig(parser: XmlResourceParser) {\n        val attributeCount = parser.attributeCount\n        for (i in 0 until attributeCount) {\n            when (parser.getAttributeName(i)) {\n                KEY_SIZE -> itemSize = getDimen(parser, i)\n                KEY_SPACE -> space = getDimen(parser, i)\n            }\n        }\n    }\n\n    private fun parseSingleTab(parser: XmlResourceParser): AnimatedTabItemContainer {\n        val attributeCount = parser.attributeCount\n        val singleTab = AnimatedTabItemContainer(context!!)\n        val singleTabConfig = AnimatedTabItemConfig()\n        singleTabConfig.size = itemSize\n        singleTabConfig.space = space.toInt()\n\n        for (i in 0 until attributeCount) {\n            when (parser.getAttributeName(i)) {\n                KEY_INACTIVE_COLOR -> singleTabConfig.inactiveColor = getColor(parser, i)\n                KEY_ACTIVE_COLOR -> singleTabConfig.activeColor = getColor(parser, i)\n                KEY_DRAWABLE -> singleTabConfig.drawable = getDrawable(parser, i)\n            }\n        }\n        singleTab.setItemConfig(singleTabConfig)\n        return singleTab\n    }\n\n    private fun getColor(parser: XmlResourceParser, i: Int): Int {\n        return ContextCompat.getColor(context!!, parser.getAttributeResourceValue(i, 0))\n    }\n\n    private fun getDrawable(parser: XmlResourceParser, i: Int): Drawable? {\n        return ContextCompat.getDrawable(context!!, parser.getAttributeResourceValue(i, 0))\n    }\n\n    private fun getDimen(parser: XmlResourceParser, i: Int): Float {\n        return context!!.resources.getDimension(parser.getAttributeResourceValue(i, 0))\n    }\n\n    companion object {\n        const val KEY_INACTIVE_COLOR: String = "inactiveColor"\n        const val KEY_ACTIVE_COLOR: String = "activeColor"\n        const val KEY_DRAWABLE: String = "drawable"\n        const val KEY_SIZE: String = "size"\n        const val KEY_SPACE: String = "space"\n\n        const val KEY_TAB: String = "tab"\n        const val KEY_TABS: String = "tabs"\n    }\n}'