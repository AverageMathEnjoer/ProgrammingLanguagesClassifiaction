b'    /*\n    *************************************************************************\n    **  Included in SQLite3 port to C#-SQLite;  2008 Noah B Hart\n    **  C#-SQLite is an independent reimplementation of the SQLite software library\n    **\n    **  Repository path : $HeadURL: https://sqlitecs.googlecode.com/svn/trunk/C%23SQLite/src/Delagates.cs $\n    **  Revision        : $Revision$\n    **  Last Change Date: $LastChangedDate: 2009-08-04 13:34:52 -0700 (Tue, 04 Aug 2009) $\n    **  Last Changed By : $LastChangedBy: noah.hart $\n    *************************************************************************\n    */\n\nusing System.Text;\n\nusing HANDLE = System.IntPtr;\n\nusing i32 = System.Int32;\nusing u32 = System.UInt32;\nusing u64 = System.UInt64;\n\nusing sqlite3_int64 = System.Int64;\n\nusing Pgno = System.UInt32;\n\nnamespace CS_SQLite3\n{\n  using DbPage = CSSQLite.PgHdr;\n  using sqlite3_stmt = CSSQLite.Vdbe;\n  using sqlite3_value = CSSQLite.Mem;\n  using sqlite3_pcache = CSSQLite.PCache1;\n\n  public partial class CSSQLite\n  {\n    public delegate void dxAuth( object pAuthArg, int b, string c, string d, string e, string f );\n    public delegate int dxBusy( object pBtShared, int iValue );\n    public delegate void dxFreeAux( object pAuxArg );\n    public delegate int dxCallback( object pCallbackArg, sqlite3_int64 argc, object p2, object p3 );\n    public delegate void dxCollNeeded( object pCollNeededArg, sqlite3 db, int eTextRep, string collationName );\n    public delegate int dxCommitCallback( object pCommitArg );\n    public delegate int dxCompare( object pCompareArg, int size1, string Key1, int size2, string Key2 );\n    public delegate bool dxCompare4( string Key1, int size1, string Key2, int size2 );\n    public delegate void dxDel ( ref string pDelArg ); // needs ref\n    public delegate void dxDelCollSeq( ref object pDelArg ); // needs ref\n    public delegate void dxProfile( object pProfileArg, string msg, u64 time );\n    public delegate int dxProgress( object pProgressArg );\n    public delegate void dxRollbackCallback( object pRollbackArg );\n    public delegate void dxTrace( object pTraceArg, string msg );\n    public delegate void dxUpdateCallback( object pUpdateArg, int b, string c, string d, sqlite3_int64 e );\n\n    /*\n     * FUNCTIONS\n     *\n     */\n    public delegate void dxFunc( sqlite3_context ctx, int intValue, sqlite3_value[] value );\n    public delegate void dxStep( sqlite3_context ctx, int intValue, sqlite3_value[] value );\n    public delegate void dxFinal( sqlite3_context ctx );\n    //\n    public delegate string dxColname( sqlite3_value pVal );\n    public delegate int dxFuncBtree( Btree p );\n    public delegate int dxExprTreeFunction( ref int pArg, Expr pExpr );\n    public delegate int dxExprTreeFunction_NC( NameContext pArg, ref Expr pExpr );\n    public delegate int dxExprTreeFunction_OBJ( object pArg, Expr pExpr );\n    /*\n       VFS Delegates\n    */\n    public delegate int dxClose( sqlite3_file File_ID );\n    public delegate int dxCheckReservedLock( sqlite3_file File_ID, ref int pRes);\n    public delegate int dxDeviceCharacteristics( sqlite3_file File_ID );\n    public delegate int dxFileControl( sqlite3_file File_ID, int op, ref int pArgs );\n    public delegate int dxFileSize( sqlite3_file File_ID, ref int size );\n    public delegate int dxLock( sqlite3_file File_ID, int locktype );\n    public delegate int dxRead( sqlite3_file File_ID, byte[] buffer, int amount, sqlite3_int64 offset );\n    public delegate int dxSectorSize( sqlite3_file File_ID );\n    public delegate int dxSync( sqlite3_file File_ID, int flags );\n    public delegate int dxTruncate( sqlite3_file File_ID, sqlite3_int64 size );\n    public delegate int dxUnlock( sqlite3_file File_ID, int locktype );\n    public delegate int dxWrite( sqlite3_file File_ID, byte[] buffer, int amount, sqlite3_int64 offset );\n\n    /*\n         sqlite_vfs Delegates\n     */\n    public delegate int dxOpen( sqlite3_vfs vfs, string zName, sqlite3_file db, int flags, ref int pOutFlags );\n    public delegate int dxDelete( sqlite3_vfs vfs, string zName, int syncDir );\n    public delegate int dxAccess( sqlite3_vfs vfs, string zName, int flags, ref int pResOut );\n    public delegate int dxFullPathname( sqlite3_vfs vfs, string zName, int nOut, StringBuilder zOut );\n    public delegate HANDLE dxDlOpen( sqlite3_vfs vfs, string zFilename );\n    public delegate int dxDlError( sqlite3_vfs vfs, int nByte, ref string zErrMsg );\n    public delegate HANDLE dxDlSym( sqlite3_vfs vfs, HANDLE data, string zSymbol );\n    public delegate int dxDlClose( sqlite3_vfs vfs, HANDLE data );\n    public delegate int dxRandomness( sqlite3_vfs vfs, int nByte, ref byte[] buffer );\n    public delegate int dxSleep( sqlite3_vfs vfs, int microseconds );\n    public delegate int dxCurrentTime( sqlite3_vfs vfs, ref double currenttime );\n    public delegate int dxGetLastError( sqlite3_vfs pVfs, int nBuf, ref string zBuf );\n\n    /*\n     * Pager Delegates\n     */\n\n    public delegate void dxDestructor( DbPage dbPage); /* Call this routine when freeing pages */\n    public delegate int dxBusyHandler( object pBusyHandlerArg );\n    public delegate void dxReiniter( DbPage dbPage );   /* Call this routine when reloading pages */\n\n    public delegate void dxFreeSchema( Schema schema );\n\n    //Module\n    public delegate void dxDestroy( ref PgHdr pDestroyArg );\n    public delegate int dxStress (object obj,PgHdr pPhHdr);\n\n    //sqlite3_module\n    public delegate int smdxCreate( sqlite3 db, object pAux, int argc, string constargv, ref sqlite3_vtab ppVTab, ref string pError );\n    public delegate int smdxConnect( sqlite3 db, object pAux, int argc, string constargv, ref sqlite3_vtab ppVTab, ref string pError );\n    public delegate int smdxBestIndex( sqlite3_vtab pVTab, ref sqlite3_index_info pIndex );\n    public delegate int smdxDisconnect( sqlite3_vtab pVTab );\n    public delegate int smdxDestroy( sqlite3_vtab pVTab );\n    public delegate int smdxOpen( sqlite3_vtab pVTab, ref sqlite3_vtab_cursor ppCursor );\n    public delegate int smdxClose( sqlite3_vtab_cursor pCursor );\n    public delegate int smdxFilter( sqlite3_vtab_cursor pCursor, int idxNum, string idxStr, int argc, sqlite3_value[] argv );\n    public delegate int smdxNext( sqlite3_vtab_cursor pCursor );\n    public delegate int smdxEof( sqlite3_vtab_cursor pCursor );\n    public delegate int smdxColumn( sqlite3_vtab_cursor pCursor, sqlite3_context p2, int p3 );\n    public delegate int smdxRowid( sqlite3_vtab_cursor pCursor, sqlite3_int64 pRowid );\n    public delegate int smdxUpdate( sqlite3_vtab pVTab, int p1, sqlite3_value[] p2, sqlite3_int64 p3 );\n    public delegate int smdxBegin( sqlite3_vtab pVTab );\n    public delegate int smdxSync( sqlite3_vtab pVTab );\n    public delegate int smdxCommit( sqlite3_vtab pVTab );\n    public delegate int smdxRollback( sqlite3_vtab pVTab );\n    public delegate int smdxFindFunction( sqlite3_vtab pVtab, int nArg, string zName, object pxFunc, ref sqlite3_value[] ppArg );\n    public delegate int smdxRename( sqlite3_vtab pVtab, string zNew );\n\n    //AutoExtention\n    public delegate int dxInit( sqlite3 db, ref string zMessage, sqlite3_api_routines sar );\n#if !SQLITE_OMIT_VIRTUALTABLE\n    public delegate int dmxCreate(sqlite3 db, object pAux, int argc, string p4, object argv, sqlite3_vtab ppVTab, char p7);\n    public delegate int dmxConnect(sqlite3 db, object pAux, int argc, string p4, object argv, sqlite3_vtab ppVTab, char p7);\n    public delegate int dmxBestIndex(sqlite3_vtab pVTab, sqlite3_index_info pIndexInfo);\n    public delegate int dmxDisconnect(sqlite3_vtab pVTab);\n    public delegate int dmxDestroy(sqlite3_vtab pVTab);\n    public delegate int dmxOpen(sqlite3_vtab pVTab, sqlite3_vtab_cursor ppCursor);\n    public delegate int dmxClose(sqlite3_vtab_cursor pCursor);\n    public delegate int dmxFilter(sqlite3_vtab_cursor pCursor, int idmxNum, string idmxStr, int argc, sqlite3_value argv);\n    public delegate int dmxNext(sqlite3_vtab_cursor pCursor);\n    public delegate int dmxEof(sqlite3_vtab_cursor pCursor);\n    public delegate int dmxColumn(sqlite3_vtab_cursor pCursor, sqlite3_context ctx, int i3);\n    public delegate int dmxRowid(sqlite3_vtab_cursor pCursor, sqlite3_int64 pRowid);\n    public delegate int dmxUpdate(sqlite3_vtab pVTab, int i2, sqlite3_value sv3, sqlite3_int64 v4);\n    public delegate int dmxBegin(sqlite3_vtab pVTab);\n    public delegate int dmxSync(sqlite3_vtab pVTab);\n    public delegate int dmxCommit(sqlite3_vtab pVTab);\n    public delegate int dmxRollback(sqlite3_vtab pVTab);\n    public delegate int dmxFindFunction(sqlite3_vtab pVtab, int nArg, string zName);\n    public delegate int dmxRename(sqlite3_vtab pVtab, string zNew);\n#endif\n    //Faults\n    public delegate void void_function();\n\n//Alarms\n    public delegate void dxalarmCallback (object pData, sqlite3_int64 p1, int p2);\n\n    //Mem Methods\n    public delegate int dxMemInit (object o);\n    public delegate void dxMemShutdown( object o );\n    public delegate byte[] dxMalloc (int nSize);\n    public delegate void dxFree( ref byte[]  pOld);\n    public delegate byte[] dxRealloc( ref byte[] pOld, int nSize );\n    public delegate int  dxSize (byte[] pArray);\n    public delegate int dxRoundup( int nSize );\n\n    //Mutex Methods\n  public delegate int dxMutexInit();\n  public delegate int dxMutexEnd( );\n  public delegate   sqlite3_mutex dxMutexAlloc(int iNumber);\n  public delegate  void dxMutexFree(sqlite3_mutex sm);\n  public delegate   void dxMutexEnter(sqlite3_mutex sm);\n  public delegate   int dxMutexTry(sqlite3_mutex sm);\n  public delegate   void dxMutexLeave(sqlite3_mutex sm);\n  public delegate   int dxMutexHeld(sqlite3_mutex sm);\n  public delegate   int dxMutexNotheld(sqlite3_mutex sm);\n\n    public delegate object dxColumn( sqlite3_stmt pStmt, int i );\n    public delegate int dxColumn_I( sqlite3_stmt pStmt, int i );\n\n  // Walker Methods\n    public delegate int dxExprCallback (Walker W, ref Expr E);     /* Callback for expressions */\n    public delegate int dxSelectCallback (Walker W, Select S);  /* Callback for SELECTs */\n\n\n  // pcache Methods\n    public delegate int dxPC_Init( object NotUsed );\n    public delegate void dxPC_Shutdown( object NotUsed );\n    public delegate  sqlite3_pcache dxPC_Create (int szPage, int bPurgeable);\n    public delegate  void dxPC_Cachesize (sqlite3_pcache pCache, int nCachesize);\n    public delegate  int dxPC_Pagecount (sqlite3_pcache pCache);\n    public delegate PgHdr dxPC_Fetch( sqlite3_pcache pCache, u32 key, int createFlag );\n    public delegate void dxPC_Unpin( sqlite3_pcache pCache, PgHdr p2, int discard );\n    public delegate void dxPC_Rekey( sqlite3_pcache pCache, PgHdr p2, u32 oldKey, u32 newKey );\n    public delegate void dxPC_Truncate( sqlite3_pcache pCache, u32 iLimit );\n    public delegate  void dxPC_Destroy(ref sqlite3_pcache pCache);\n\n    public delegate void dxIter(PgHdr p);\n  }\n}\n'