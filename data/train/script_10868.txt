b'package icu.nullptr.twifucker.ui\n\nimport android.content.Context\nimport android.text.InputType\nimport android.view.ViewGroup.LayoutParams.MATCH_PARENT\nimport android.view.ViewGroup.LayoutParams.WRAP_CONTENT\nimport android.view.inputmethod.InputMethodManager\nimport android.widget.EditText\nimport android.widget.Switch\nimport icu.nullptr.twifucker.R\n\nclass KeyValueView(context: Context) : CustomLayout(context) {\n    var isBoolean: Boolean = true\n\n    val typeSwitch = Switch(context).apply {\n        setTextAppearance(android.R.style.TextAppearance_DeviceDefault_Medium)\n        layoutParams = LayoutParams(MATCH_PARENT, WRAP_CONTENT).apply {\n            marginStart = 32.dp\n            marginEnd = 32.dp\n            setPadding(8.dp, 0, 0, 0)\n        }\n        text = context.getString(R.string.feature_switch_value_boolean)\n        setOnClickListener {\n            isBoolean = !isBoolean\n            if (isBoolean) {\n                text = context.getString(R.string.feature_switch_value_boolean)\n                inputDecimal.visibility = GONE\n                switch.visibility = VISIBLE\n            } else {\n                text = context.getString(R.string.feature_switch_value_decimal)\n                inputDecimal.visibility = VISIBLE\n                switch.visibility = GONE\n            }\n        }\n        addView(this)\n    }\n\n    val editText = EditText(context).apply {\n        setTextAppearance(android.R.style.TextAppearance_DeviceDefault_Medium)\n        layoutParams = LayoutParams(MATCH_PARENT, WRAP_CONTENT).apply {\n            marginStart = 32.dp\n            marginEnd = 32.dp\n        }\n        hint = context.getString(R.string.feature_switch_key_hint)\n        addView(this)\n    }\n\n    val switch = Switch(context).apply {\n        setTextAppearance(android.R.style.TextAppearance_DeviceDefault_Medium)\n        layoutParams = LayoutParams(MATCH_PARENT, WRAP_CONTENT).apply {\n            height = 64.dp\n            marginStart = 32.dp\n            marginEnd = 32.dp\n            setPadding(8.dp, 0, 0, 0)\n        }\n        text = context.getString(R.string.feature_switch_bool_label)\n        addView(this)\n    }\n\n    val inputDecimal = EditText(context).apply {\n        setTextAppearance(android.R.style.TextAppearance_DeviceDefault_Medium)\n        layoutParams = LayoutParams(MATCH_PARENT, WRAP_CONTENT).apply {\n            height = 64.dp\n            marginStart = 32.dp\n            marginEnd = 32.dp\n            setPadding(8.dp, 0, 0, 0)\n        }\n        hint = context.getString(R.string.feature_switch_value_decimal_hint)\n        inputType = InputType.TYPE_NUMBER_FLAG_DECIMAL\n        visibility = GONE\n        addView(this)\n    }\n\n    fun focus() {\n        editText.requestFocus()\n        (context.getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager).showSoftInput(\n            editText, InputMethodManager.SHOW_IMPLICIT\n        )\n    }\n\n    override fun onMeasure(widthMeasureSpec: Int, heightMeasureSpec: Int) {\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec)\n        val maxWidth = measuredWidth - editText.marginStart - editText.marginEnd\n        typeSwitch.measure(\n            (maxWidth - typeSwitch.paddingLeft).toExactlyMeasureSpec(),\n            typeSwitch.defaultHeightMeasureSpec(this)\n        )\n        editText.measure(\n            maxWidth.toExactlyMeasureSpec(), editText.defaultHeightMeasureSpec(this)\n        )\n        switch.measure(\n            (maxWidth - switch.paddingLeft).toExactlyMeasureSpec(),\n            switch.defaultHeightMeasureSpec(this)\n        )\n        inputDecimal.measure(\n            (maxWidth - switch.paddingLeft).toExactlyMeasureSpec(),\n            inputDecimal.defaultHeightMeasureSpec(this)\n        )\n        setMeasuredDimension(\n            maxWidth.coerceAtLeast(measuredWidth),\n            typeSwitch.measuredHeightWithMargins + editText.measuredHeightWithMargins + switch.measuredHeightWithMargins\n        )\n    }\n\n    override fun onLayout(changed: Boolean, l: Int, t: Int, r: Int, b: Int) {\n        if (!isRTL) {\n            typeSwitch.let {\n                it.layout(x = it.marginStart, y = 0)\n            }\n            editText.let { it.layout(x = it.marginStart, y = typeSwitch.bottom + it.marginTop) }\n            switch.let { it.layout(x = it.marginStart, y = editText.bottom + it.marginTop) }\n            inputDecimal.let { it.layout(x = it.marginStart, y = editText.bottom + it.marginTop) }\n        } else {\n            typeSwitch.let {\n                it.layout(x = it.marginEnd, y = 0, fromRight = true)\n            }\n            editText.let {\n                it.layout(\n                    x = it.marginEnd, y = typeSwitch.bottom + it.marginTop, fromRight = true\n                )\n            }\n            switch.let {\n                it.layout(\n                    x = it.marginEnd, y = editText.bottom + it.marginTop, fromRight = true\n                )\n            }\n            inputDecimal.let {\n                it.layout(\n                    x = it.marginEnd, y = editText.bottom + it.marginTop, fromRight = true\n                )\n            }\n        }\n    }\n}'