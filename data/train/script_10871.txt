b'package com.bennyhuo.kotlin.scheduledtask\n\nimport com.bennyhuo.kotlin.api.updateApi\nimport io.reactivex.rxjava3.core.Observable\nimport io.reactivex.rxjava3.disposables.Disposable\nimport io.reactivex.rxjava3.schedulers.Schedulers\nimport java.util.concurrent.TimeUnit\n\nclass RxJavaUpdateTask : UpdateTask {\n\n    private var disposable: Disposable? = null\n\n    override fun scheduleUpdate(interval: Long) {\n        cancel()\n\n        disposable = Observable.interval(interval, TimeUnit.MILLISECONDS)\n            .observeOn(Schedulers.io())\n            .flatMap {\n                updateApi.getConfigObservable()\n            }.onErrorResumeNext {\n                Observable.just(emptyList())\n            }.subscribe {\n                println(it)\n            }\n    }\n\n    override fun cancel() {\n        disposable?.dispose()\n        disposable = null\n    }\n}'