b'package effectivejava.chapter8.item56;\n\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\nimport java.lang.annotation.ElementType;\n\n// Documentation comment examples (Pages 255-9)\npublic class DocExamples<E> {\n    // Method comment (Page 255)\n    /**\n     * Returns the element at the specified position in this list.\n     *\n     * <p>This method is <i>not</i> guaranteed to run in constant\n     * time. In some implementations it may run in time proportional\n     * to the element position.\n     *\n     * @param  index index of element to return; must be\n     *         non-negative and less than the size of this list\n     * @return the element at the specified position in this list\n     * @throws IndexOutOfBoundsException if the index is out of range\n     *         ({@code index < 0 || index >= this.size()})\n     */\n    E get(int index) {\n        return null;\n    }\n\n    // Use of @implSpec to describe self-use patterns & other visible implementation details. (Page 256)\n    /**\n     * Returns true if this collection is empty.\n     *\n     * @implSpec This implementation returns {@code this.size() == 0}.\n     *\n     * @return true if this collection is empty\n     */\n    public boolean isEmpty() {\n        return false;\n    }\n\n    // Use of the @literal tag to include HTML and javadoc metacharacters in javadoc comments. (Page 256)\n    /**\n     * A geometric series converges if {@literal |r| < 1}.\n     */\n    public void fragment() {\n    }\n\n    // Controlling summary description when there is a period in the first "sentence" of doc comment. (Page 257)\n    /**\n     * A suspect, such as Colonel Mustard or {@literal Mrs. Peacock}.\n     */\n    public enum FixedSuspect {\n        MISS_SCARLETT, PROFESSOR_PLUM, MRS_PEACOCK, MR_GREEN, COLONEL_MUSTARD, MRS_WHITE\n    }\n\n\n    // Generating a javadoc index entry in Java 9 and later releases. (Page 258)\n    /**\n     * This method complies with the {@index IEEE 754} standard.\n     */\n    public void fragment2() {\n    }\n\n    // Documenting enum constants (Page 258)\n    /**\n     * An instrument section of a symphony orchestra.\n     */\n    public enum OrchestraSection {\n        /** Woodwinds, such as flute, clarinet, and oboe. */\n        WOODWIND,\n\n        /** Brass instruments, such as french horn and trumpet. */\n        BRASS,\n\n        /** Percussion instruments, such as timpani and cymbals. */\n        PERCUSSION,\n\n        /** Stringed instruments, such as violin and cello. */\n        STRING;\n    }\n\n    // Documenting an annotation type (Page 259)\n    /**\n     * Indicates that the annotated method is a test method that\n     * must throw the designated exception to pass.\n     */\n    @Retention(RetentionPolicy.RUNTIME)\n    @Target(ElementType.METHOD)\n    public @interface ExceptionTest {\n        /**\n         * The exception that the annotated test method must throw\n         * in order to pass. (The test is permitted to throw any\n         * subtype of the type described by this class object.)\n         */\n        Class<? extends Throwable> value();\n    }\n}\n\n'