b'module Cachix.Deploy.Lock\n  ( defaultLockDirectory,\n    getLockDirectory,\n    readPidFile,\n    withTryLock,\n    withTryLockAndPid,\n  )\nwhere\n\nimport qualified Lukko as Lock\nimport Protolude hiding ((<.>))\nimport qualified System.Directory as Directory\nimport System.FilePath ((<.>), (</>))\nimport System.Posix (getProcessID)\nimport System.Posix.Types (CPid (..))\n\nlockExtension :: FilePath\nlockExtension = "lock"\n\npidExtension :: FilePath\npidExtension = "pid"\n\ndefaultLockDirectory :: FilePath\ndefaultLockDirectory = "cachix" </> "deploy" </> "locks"\n\ngetLockDirectory :: IO FilePath\ngetLockDirectory = do\n  lockDirectory <- Directory.getXdgDirectory Directory.XdgCache defaultLockDirectory\n\n  Directory.createDirectoryIfMissing True lockDirectory\n  Directory.setPermissions lockDirectory $\n    Directory.emptyPermissions\n      & Directory.setOwnerReadable True\n      & Directory.setOwnerWritable True\n      & Directory.setOwnerExecutable True\n      & Directory.setOwnerSearchable True\n\n  pure lockDirectory\n\nreadPidFile :: FilePath -> IO (Maybe CPid)\nreadPidFile pidFilename = do\n  lockDirectory <- getLockDirectory\n  pidContents <- readFile (lockDirectory </> pidFilename <.> pidExtension)\n  pure (readMaybe pidContents)\n\n-- | Run an IO action with an acquired profile lock. Returns immediately if the profile is already locked.\n--\n-- Lock files are not deleted after use.\n--\n-- macOS: if using sudo, make sure to use `-H` to reset the home directory.\nwithTryLock :: FilePath -> IO a -> IO (Maybe a)\nwithTryLock lockFilename action = do\n  lockDirectory <- getLockDirectory\n\n  let lockFile = lockDirectory </> lockFilename <.> lockExtension\n\n  bracket\n    (Lock.fdOpen lockFile)\n    (Lock.fdUnlock *> Lock.fdClose)\n    $ \\fd -> do\n      isLocked <- Lock.fdTryLock fd Lock.ExclusiveLock\n      if isLocked\n        then fmap Just action\n        else pure Nothing\n\nwithTryLockAndPid :: FilePath -> IO a -> IO (Maybe a)\nwithTryLockAndPid lockFilename action = do\n  lockDirectory <- getLockDirectory\n\n  let pidFile = lockDirectory </> lockFilename <.> pidExtension\n\n  withTryLock lockFilename $ do\n    CPid pid <- getProcessID\n    writeFile pidFile (show pid)\n    action\n'