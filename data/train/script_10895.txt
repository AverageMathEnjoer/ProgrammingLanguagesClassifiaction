b'// I2Cdev library collection - AK8975 I2C device class header file\n// Based on AKM AK8975/B datasheet, 12/2009\n// 8/27/2011 by Jeff Rowberg <jeff@rowberg.net>\n// Updates should (hopefully) always be available at https://github.com/jrowberg/i2cdevlib\n//\n// Changelog:\n//     2011-08-27 - initial release\n\n/* ============================================\nI2Cdev device library code is placed under the MIT license\nCopyright (c) 2011 Jeff Rowberg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n===============================================\n*/\n\n#include "AK8975.h"\n\n/** Default constructor, uses default I2C address.\n * @see AK8975_DEFAULT_ADDRESS\n */\nAK8975::AK8975() {\n    devAddr = AK8975_DEFAULT_ADDRESS;\n}\n\n/** Specific address constructor.\n * @param address I2C address\n * @see AK8975_DEFAULT_ADDRESS\n * @see AK8975_ADDRESS_00\n */\nAK8975::AK8975(uint8_t address) {\n    devAddr = address;\n}\n\n/** Power on and prepare for general usage.\n * No specific pre-configuration is necessary for this device.\n */\nvoid AK8975::initialize() {\n}\n\n/** Verify the I2C connection.\n * Make sure the device is connected and responds as expected.\n * @return True if connection is valid, false otherwise\n */\nbool AK8975::testConnection() {\n    if (I2Cdev::readByte(devAddr, AK8975_RA_WIA, buffer) == 1) {\n        return (buffer[0] == 0x48);\n    }\n    return false;\n}\n\n// WIA register\n\nuint8_t AK8975::getDeviceID() {\n    I2Cdev::readByte(devAddr, AK8975_RA_WIA, buffer);\n    return buffer[0];\n}\n\n// INFO register\n\nuint8_t AK8975::getInfo() {\n    I2Cdev::readByte(devAddr, AK8975_RA_INFO, buffer);\n    return buffer[0];\n}\n\n// ST1 register\n\nbool AK8975::getDataReady() {\n    I2Cdev::readBit(devAddr, AK8975_RA_ST1, AK8975_ST1_DRDY_BIT, buffer);\n    return buffer[0];\n}\n\n// H* registers\nvoid AK8975::getHeading(int16_t *x, int16_t *y, int16_t *z) {\n    I2Cdev::writeByte(devAddr, AK8975_RA_CNTL, AK8975_MODE_SINGLE);\n    delay(10);\n    I2Cdev::readBytes(devAddr, AK8975_RA_HXL, 6, buffer);\n    *x = (((int16_t)buffer[1]) << 8) | buffer[0];\n    *y = (((int16_t)buffer[3]) << 8) | buffer[2];\n    *z = (((int16_t)buffer[5]) << 8) | buffer[4];\n}\nint16_t AK8975::getHeadingX() {\n    I2Cdev::writeByte(devAddr, AK8975_RA_CNTL, AK8975_MODE_SINGLE);\n    delay(10);\n    I2Cdev::readBytes(devAddr, AK8975_RA_HXL, 2, buffer);\n    return (((int16_t)buffer[1]) << 8) | buffer[0];\n}\nint16_t AK8975::getHeadingY() {\n    I2Cdev::writeByte(devAddr, AK8975_RA_CNTL, AK8975_MODE_SINGLE);\n    delay(10);\n    I2Cdev::readBytes(devAddr, AK8975_RA_HYL, 2, buffer);\n    return (((int16_t)buffer[1]) << 8) | buffer[0];\n}\nint16_t AK8975::getHeadingZ() {\n    I2Cdev::writeByte(devAddr, AK8975_RA_CNTL, AK8975_MODE_SINGLE);\n    delay(10);\n    I2Cdev::readBytes(devAddr, AK8975_RA_HZL, 2, buffer);\n    return (((int16_t)buffer[1]) << 8) | buffer[0];\n}\n\n// ST2 register\nbool AK8975::getOverflowStatus() {\n    I2Cdev::readBit(devAddr, AK8975_RA_ST2, AK8975_ST2_HOFL_BIT, buffer);\n    return buffer[0];\n}\nbool AK8975::getDataError() {\n    I2Cdev::readBit(devAddr, AK8975_RA_ST2, AK8975_ST2_DERR_BIT, buffer);\n    return buffer[0];\n}\n\n// CNTL register\nuint8_t AK8975::getMode() {\n    I2Cdev::readBits(devAddr, AK8975_RA_CNTL, AK8975_CNTL_MODE_BIT, AK8975_CNTL_MODE_LENGTH, buffer);\n    return buffer[0];\n}\nvoid AK8975::setMode(uint8_t mode) {\n    I2Cdev::writeBits(devAddr, AK8975_RA_CNTL, AK8975_CNTL_MODE_BIT, AK8975_CNTL_MODE_LENGTH, mode);\n}\nvoid AK8975::reset() {\n    I2Cdev::writeBits(devAddr, AK8975_RA_CNTL, AK8975_CNTL_MODE_BIT, AK8975_CNTL_MODE_LENGTH, AK8975_MODE_POWERDOWN);\n}\n\n// ASTC register\nvoid AK8975::setSelfTest(bool enabled) {\n    I2Cdev::writeBit(devAddr, AK8975_RA_ASTC, AK8975_ASTC_SELF_BIT, enabled);\n}\n\n// I2CDIS\nvoid AK8975::disableI2C() {\n    I2Cdev::writeBit(devAddr, AK8975_RA_I2CDIS, AK8975_I2CDIS_BIT, true);\n}\n\n// ASA* registers\nvoid AK8975::getAdjustment(int8_t *x, int8_t *y, int8_t *z) {\n    I2Cdev::writeByte(devAddr, AK8975_RA_CNTL, 0x0F); // Enter Fuse ROM access mode\n    delay(10);\n    I2Cdev::readBytes(devAddr, AK8975_RA_ASAX, 3, buffer);\n    *x = buffer[0];\n    *y = buffer[1];\n    *z = buffer[2];\n}\nvoid AK8975::setAdjustment(int8_t x, int8_t y, int8_t z) {\n    I2Cdev::writeByte(devAddr, AK8975_RA_CNTL, 0x0F); // Enter Fuse ROM access mode\n    delay(10);\n    buffer[0] = x;\n    buffer[1] = y;\n    buffer[2] = z;\n    I2Cdev::writeBytes(devAddr, AK8975_RA_ASAX, 3, buffer);\n}\nuint8_t AK8975::getAdjustmentX() {\n    I2Cdev::writeByte(devAddr, AK8975_RA_CNTL, 0x0F); // Enter Fuse ROM access mode\n    delay(10);\n    I2Cdev::readByte(devAddr, AK8975_RA_ASAX, buffer);\n    return buffer[0];\n}\nvoid AK8975::setAdjustmentX(uint8_t x) {\n    I2Cdev::writeByte(devAddr, AK8975_RA_CNTL, 0x0F); // Enter Fuse ROM access mode\n    delay(10);\n    I2Cdev::writeByte(devAddr, AK8975_RA_ASAX, x);\n}\nuint8_t AK8975::getAdjustmentY() {\n    I2Cdev::writeByte(devAddr, AK8975_RA_CNTL, 0x0F); // Enter Fuse ROM access mode\n    delay(10);\n    I2Cdev::readByte(devAddr, AK8975_RA_ASAY, buffer);\n    return buffer[0];\n}\nvoid AK8975::setAdjustmentY(uint8_t y) {\n    I2Cdev::writeByte(devAddr, AK8975_RA_CNTL, 0x0F); // Enter Fuse ROM access mode\n    delay(10);\n    I2Cdev::writeByte(devAddr, AK8975_RA_ASAY, y);\n}\nuint8_t AK8975::getAdjustmentZ() {\n    I2Cdev::writeByte(devAddr, AK8975_RA_CNTL, 0x0F); // Enter Fuse ROM access mode\n    delay(10);\n    I2Cdev::readByte(devAddr, AK8975_RA_ASAZ, buffer);\n    return buffer[0];\n}\nvoid AK8975::setAdjustmentZ(uint8_t z) {\n    I2Cdev::writeByte(devAddr, AK8975_RA_CNTL, 0x0F); // Enter Fuse ROM access mode\n    delay(10);\n    I2Cdev::writeByte(devAddr, AK8975_RA_ASAZ, z);\n}\n'