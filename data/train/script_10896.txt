b'#\' Save currently active R graph to Microsoft Office / LibreOffice format\n#\' \n#\' Save the currently active R graph or a graph passed as an object or function \n#\' to Microsoft Office / LibreOffice format with sensible defaults\n#\' \n#\' @import datasets\n#\' @importFrom grDevices dev.size png\n#\' @importFrom devEMF emf\n#\' @importFrom utils head tail\n#\' @import officer \n#\' @import rvg\n#\' \n#\' @aliases graph2office graph2doc graph2ppt\n#\' \n#\' @param x given \\code{ggplot2} plot or \\code{lattice} plot object to export; if\n#\' set to \\code{NULL} the currently active R graph will be exported; not\n#\' supported for base R plots.\n#\' @param file name of output file. Any extension is ignored and added\n#\' according to the requested output type.\n#\' @param fun plot passed on as a function used to create it; useful especially\n#\' for base R plots.\n#\' @param type desired output type - \\code{DOC} for Word document, \\code{PPT} for Powerpoint.\n#\' @param append logical value - if \\code{TRUE} and \\code{type=PPT} it will append the graph\n#\' to the given file, where file can also be a given corporate template. If\n#\' \\code{append=FALSE} any existing file will be overwritten. Currently ignored in\n#\' Word export.\n#\' @param aspectr desired width to height aspect ratio. If set to \\code{NULL}, the\n#\' aspect ratio of the active graphics device is used.\n#\' @param width desired width in inches; can be combined with a desired\n#\' aspect ratio aspectr.\n#\' @param height desired height in inches; can be combined with a desired\n#\' aspect ratio aspectr.\n#\' @param scaling scale width & height by a certain percentage.\n#\' @param paper desired paper size to use - "A5" to "A1" for Powerpoint export,\n#\' or "A5" to "A3" for Word output; default "auto" automatically selects the\n#\' paper size that fits your graph. Graphs that are too large to fit on a given\n#\' paper size are scaled down.\n#\' @param orient desired paper orientation - "auto", "portrait" or "landscape";\n#\' default to "auto" for Word output and to "landscape" for Powerpoint.\n#\' @param margins vector with the desired margins that should be left blank in\n#\' @param center logical specifying whether or not to center the graph\n#\' in the exported Powerpoint.\n#\' @param offx if center is set to \\code{FALSE}, the desired x offset at which to\n#\' place one\'s graph in Powerpoint output.\n#\' @param offy if center is set to \\code{FALSE}, the desired y offset at which to\n#\' place one\'s graph in Powerpoint output.\n#\' @param upscale logical specifying whether or not to upscale one\'s graph to\n#\' make it page-filling (excluding the margins). Note that scaling may result\n#\' in a different look of one\'s graph relative to how it looks on the screen\n#\' due to the change in size.\n#\' @param vector.graphic logical specifying whether or not to output in\n#\' vectorized format. This avoids pixelated images in the document. Note that \n#\' for PowerPoint, the image can be edited after first ungrouping the plot \n#\' elements. If set to \\code{FALSE}, the plot is rasterized to \\code{PNG} bitmap\n#\' format at a resolution of 300 dpi.\n#\' @param \\dots any other options are passed on to \\code{rvg}\'s \n#\' \\code{\\link[rvg]{dml_pptx}} function if \\code{type == "DOC"} or to \n#\' \\code{devEMF}\'s \\code{\\link{emf}} function if \\code{type == "PPT"} (only \n#\' when \\code{vector.graphics == TRUE}).\n#\' \n#\' @return No return value\n#\' \n#\' @author Tom Wenseleers, Christophe Vanderaa\n#\' \n#\' @example examples/graph2office.R\n#\' \n#\' @seealso \\code{\\link{graph2vector}}, \\code{\\link{graph2svg}}, \\code{\\link{graph2pdf}}, \\code{\\link{graph2eps}},\n#\' \\code{\\link{graph2bitmap}}, \\code{\\link{graph2png}}, \\code{\\link{graph2tif}}, \\code{\\link{graph2jpg}}\n#\' \n#\' @export\n#\' \ngraph2office = function(x = NULL, file = "Rplot", fun = NULL, type = c("PPT","DOC"), \n                        append = FALSE,  aspectr = NULL, width = NULL, height = NULL, scaling=100, \n                        paper = "auto", orient = ifelse(type[1]=="PPT","landscape","auto"),\n                        margins = c(top=0.5,right=0.5,bottom=0.5,left=0.5), \n                        center = TRUE, offx = 1, offy = 1, upscale = FALSE, \n                        vector.graphic = TRUE, \n                        ...) {\n  \n  ### 1. Check and format arguments\n  margins=rep_len(margins,4)\n  names(margins)=c("top","right","bottom","left")\n  type = toupper(type)\n  type = match.arg(type, c("PPT", "DOC"))\n  if (type == "PPT" | type == "PPTX") {\n    ext = ".pptx"\n    type = "PPT"\n  }\n  if (type == "DOC" | type == "DOCX") {\n    ext = ".docx"\n    type = "DOC"\n  }\n  file = sub("^(.*)[.].*", "\\\\1", file)  # remove extension if given\n  file = paste0(file, ext)  # add extension\n  # Format the function call for plotting the graph\n  obj = x\n  if (is.null(obj) & is.null(fun)) { \n    p = captureplot() \n  } else { \n    p = obj \n  }\n  if (inherits(p,"list")) { stop("base R plots cannot be passed as objects, use ggplot2 or lattice plots instead") }\n  myplot = if (is.null(fun)){\n    function(pl = p) print(pl) \n  } else {\n    fun\n  } \n  \n  ### 2. Prepare the plotting region and the plot apsect\n  if(!identical(options()$device, FALSE)){\n    plotsize = dev.size()\n  } else {\n    plotsize = c(7,5) # default device size: 10 inch x 10 inch\n  }\n  \n  w = plotsize[[1]]\n  h = plotsize[[2]]\n  plotaspectr = plotsize[[1]]/plotsize[[2]]\n  if ((!is.null(aspectr))&is.null(height)&is.null(width)) { \n    plotaspectr = aspectr\n    if (plotaspectr >= 1) { \n      h = w/plotaspectr \n    } else { \n      w = h*plotaspectr \n    } \n  }\n  if ((is.null(height))&(!is.null(width))) { plotaspectr = aspectr; w = width; h = w / plotaspectr }\n  if ((is.null(width))&(!is.null(height))) { plotaspectr = aspectr; h = height; w = h / plotaspectr } \n  # if width and height is given override other scaling params\n  if ((!is.null(width))&(!is.null(height))) { w = width; h = height; plotaspectr = w/h }  \n  w = w*scaling/100; h = h*scaling/100;\n  \n  ### 3. Find the best template (docx or pptx) to contain the plot\n  # if paper="auto" choose template with best fitting size\n  if (append & file.exists(file)) { \n    templ=file \n  } else { \n    if(paper=="auto") {\n      templ=besttemplate(w=w,h=h,margins=margins,orient=orient,type=type)\n      #templ=paste0(paste( find.package("export"), "inst", "templates",templ, sep = "/" ),ext) \n      templ=paste0(paste( find.package("export"), "templates",templ, sep = "/" ),ext) \n    } else {\n      templ=paste( find.package("export"), "templates",paste0(toupper(paper),"_",orient,ext), sep = "/" )\n      if (!file.exists(templ)) stop(paste0("template ",templ," not available"))\n    }\n  }\n  \n  ### 4. Initialize the slide (ppt) or page (doc) that will contain the plot\n  if (type == "PPT") {\n    if (append & file.exists(file)){\n      doc <- read_pptx(path = file)\n    } else {\n      doc <- read_pptx(path = templ)\n    }\n    doc = add_slide(doc, layout = "Blank", master = "Office Theme")\n    pagesize = get.slide.size(doc) \n    pagesize["width"]=pagesize["width"]-(margins["left"]+margins["right"])\n    pagesize["height"]=pagesize["height"]-(margins["top"]+margins["bottom"])\n  }\n  if (type == "DOC") {\n    if (append & file.exists(file)){\n      doc <- read_docx(path = file)\n      doc <- body_add_break(doc, pos = "after")\n    } else {\n      doc <- read_docx(path = templ)\n    }\n    pagesize <- (doc$sect_dim$page - doc$sect_dim$margins[c(3,2)])/1440 # 1440 is a factor to convert to inches\n  }\n  \n  ### 5. Scale the plot according to the new slide or page\n  # should graph still be shrinked to fit or upscaled?\n  if ((w>pagesize["width"])|(h>pagesize["height"])) shrink=TRUE else shrink=FALSE \n  if (shrink|upscale) {    \n    pageaspectr = pagesize["width"]/pagesize["height"]\n    if (pageaspectr >= plotaspectr) {\n      xf = plotaspectr/pageaspectr\n      yf = 1\n    } else {\n      xf = 1\n      yf = pageaspectr/plotaspectr\n    }\n    w = pagesize["width"] * xf\n    h = pagesize["height"] * yf\n  }\n  \n  ### 6. Print the plot on the slide or page\n  if(type=="PPT"){\n    if (center) { \n      offx = (pagesize["width"] + margins["left"]+margins["right"] - w)/2\n      offy = (pagesize["height"] + margins["top"]+margins["bottom"] - h)/2\n    }\n    if(vector.graphic){\n      doc = ph_with(doc, dml(code = myplot()), \n                    location = ph_location(left = offx, top = offy, width = w, \n                                           height = h), ...)\n    } else {\n      temp.file <- paste0(tempfile(), ".png")\n      grDevices::png(filename = temp.file, height = h, width = w, units = "in", res = 300)\n      myplot()\n      dev.off()\n      doc <- ph_with(doc, external_img(src = temp.file), location = ph_location(left = offx, top = offy, width = w, height = h))\n      unlink(temp.file)\n    }\n  } else {\n    temp.file <- tempfile()\n    if(vector.graphic){\n      temp.file <- paste0(temp.file, ".emf")\n      emf(file = temp.file, height = h, width = w, emfPlus = TRUE, ...)\n      myplot()\n    } else {\n      temp.file <- paste0(temp.file, ".png")\n      grDevices::png(filename = temp.file, height = h, width = w, units = "in", res = 300)\n      myplot()\n    }\n    dev.off()\n    doc <- body_add_img(doc, src = temp.file, width = w, height = h)\n    unlink(temp.file)\n  }\n  \n  ### 7. End of function, save the file and print message\n  print(doc, target = file)\n  message(paste0("Exported graph as ",file))\n}\n\n\n#\' @describeIn graph2office\n#\' Save currently active R graph to a Microsoft Office PowerPoint/LibreOffice Impress presentation\n#\' @export\ngraph2ppt = function(...) graph2office(type = "PPT", ...)\n\n#\' @describeIn graph2office\n#\' Save currently active R graph to a Microsoft Office Word/LibreOffice Writer document\n#\' @export\ngraph2doc = function(...) graph2office(type = "DOC", ...)\n\n\n'