b'\xef\xbb\xbf//  Copyright 2019 Google Inc. All Rights Reserved.\n//\n//  Licensed under the Apache License, Version 2.0 (the "License");\n//  you may not use this file except in compliance with the License.\n//  You may obtain a copy of the License at\n//\n//  http://www.apache.org/licenses/LICENSE-2.0\n//\n//  Unless required by applicable law or agreed to in writing, software\n//  distributed under the License is distributed on an "AS IS" BASIS,\n//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n//  See the License for the specific language governing permissions and\n//  limitations under the License.\n\nusing System.Text;\n\nnamespace Rubeus.Utilities.Text\n{\n    /// <summary>\n    /// Encoding object which converts 1 to 1 with bytes.\n    /// </summary>\n    public sealed class BinaryEncoding : Encoding\n    {\n        /// <summary>\n        /// Default instance of the encoding.\n        /// </summary>\n        public static readonly BinaryEncoding Instance = new BinaryEncoding();\n\n        /// <summary>\n        /// Get the encoding name.\n        /// </summary>\n        public override string EncodingName => "Binary";\n\n        /// <summary>\n        /// Get byte count for characters.\n        /// </summary>\n        /// <param name="chars">The character array.</param>\n        /// <param name="index">Index into the array.</param>\n        /// <param name="count">Number of characters in the array to use.</param>\n        /// <returns>The number of bytes this character array requires.</returns>\n        public override int GetByteCount(char[] chars, int index, int count) => count;\n\n        /// <summary>\n        /// Get bytes for characters.\n        /// </summary>\n        /// <param name="chars">The character array.</param>\n        /// <param name="charIndex">Index into the array.</param>\n        /// <param name="charCount">Number of characters in the array to use.</param>\n        /// <param name="byteIndex">The index into the byte array.</param>\n        /// <param name="bytes">The byte array to copy into.</param>\n        /// <returns>The number of bytes generated.</returns>\n        public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex)\n        {\n            for (int i = 0; i < charCount; ++i)\n            {\n                bytes[byteIndex + i] = (byte)chars[charIndex + i];\n            }\n\n            return charCount;\n        }\n\n        /// <summary>\n        /// Get the character count for bytes.\n        /// </summary>\n        /// <param name="bytes">The byte array.</param>\n        /// <param name="index">Index into the array.</param>\n        /// <param name="count">Number of bytes in the array to use.</param>\n        /// <returns>The number of characters this byte array requires.</returns>\n        public override int GetCharCount(byte[] bytes, int index, int count) => count;\n\n        /// <summary>\n        /// Get byte count for characters.\n        /// </summary>\n        /// <param name="chars">The character array.</param>\n        /// <param name="charIndex">Index into the array.</param>\n        /// <param name="byteCount">Number of bytes in the array to use.</param>\n        /// <param name="byteIndex">The index into the byte array.</param>\n        /// <param name="bytes">The byte array to copy into.</param>\n        /// <returns>The number of characters generated.</returns>\n        public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex)\n        {\n            for (int i = 0; i < byteCount; ++i)\n            {\n                chars[charIndex + i] = (char)bytes[byteIndex + i];\n            }\n\n            return byteCount;\n        }\n\n        /// <summary>\n        /// Get maximum bytes for a number of characters.\n        /// </summary>\n        /// <param name="charCount"></param>\n        /// <returns></returns>\n        public override int GetMaxByteCount(int charCount) => charCount;\n\n        /// <summary>\n        /// Get maximum characters for a number of bytes.\n        /// </summary>\n        /// <param name="byteCount"></param>\n        /// <returns></returns>\n        public override int GetMaxCharCount(int byteCount) => byteCount;\n\n        /// <summary>\n        /// Indicates if the encoding is a single byte.\n        /// </summary>\n        public override bool IsSingleByte => true;\n    }\n}\n'