b'\xef\xbb\xbfusing System;\nusing Asn1;\nusing System.Text;\nusing System.Collections.Generic;\n\nnamespace Rubeus\n{\n    public class TransitedEncoding\n    {\n        //TransitedEncoding       ::= SEQUENCE {\n        //  tr-type[0] Int32 -- must be registered --,\n        //  contents[1] OCTET STRING\n        //}\n        public TransitedEncoding()\n        {\n            tr_type = Interop.TransitedEncodingType.NULL;\n            contents = new byte[0];\n        }\n\n        public TransitedEncoding(AsnElt body)\n        {\n            foreach (AsnElt s in body.Sub)\n            {\n                switch (s.TagValue)\n                {\n                    case 0:\n                        tr_type = (Interop.TransitedEncodingType)s.Sub[0].GetInteger();\n                        break;\n                    case 1:\n                        // just decode for now\n                        contents = s.Sub[0].GetOctetString();\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }\n\n        public AsnElt Encode()\n        {\n            // tr-type            [0] Int32\n            AsnElt trTypeElt = AsnElt.MakeInteger((long)tr_type);\n            AsnElt trTypeSeq = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] { trTypeElt });\n            trTypeSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 0, trTypeSeq);\n\n            AsnElt seq;\n\n            // contents            [1] OCTET STRING\n            if (contents != null)\n            {\n                AsnElt contentsElt = AsnElt.MakeBlob(contents);\n                AsnElt contentsSeq = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] { contentsElt });\n                contentsSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 1, contentsSeq);\n                seq = AsnElt.Make(AsnElt.SEQUENCE, new[] { trTypeSeq, contentsSeq });\n            }\n            else\n            {\n                seq = AsnElt.Make(AsnElt.SEQUENCE, new[] { trTypeSeq });\n            }\n\n            seq = AsnElt.Make(AsnElt.SEQUENCE, seq);\n\n            return seq;\n        }\n\n        public Interop.TransitedEncodingType tr_type { get; set; }\n\n        public byte[] contents { get; set; }\n    }\n}\n'