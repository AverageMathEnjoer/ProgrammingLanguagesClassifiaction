b'package com.db.williamchart.renderer.executor\n\nimport com.db.williamchart.Painter\nimport com.db.williamchart.data.AxisType\nimport com.db.williamchart.data.Frame\nimport com.db.williamchart.data.Label\nimport com.db.williamchart.data.shouldDisplayAxisX\nimport com.db.williamchart.data.shouldDisplayAxisY\n\nclass DebugWithLabelsFrame {\n\n    operator fun invoke(\n        painter: Painter,\n        axisType: AxisType,\n        xLabels: List<Label>,\n        yLabels: List<Label>,\n        labelsSize: Float\n    ): List<Frame> {\n        val ascent = painter.measureLabelAscent(labelsSize)\n        val descent = painter.measureLabelDescent(labelsSize)\n\n        val labelsFrames = mutableListOf<Frame>()\n\n        if (axisType.shouldDisplayAxisX())\n            labelsFrames += xLabels.map {\n                val labelHalfWidth = painter.measureLabelWidth(it.label, labelsSize) / 2\n                Frame(\n                    left = it.screenPositionX - labelHalfWidth,\n                    top = it.screenPositionY + ascent,\n                    right = it.screenPositionX + labelHalfWidth,\n                    bottom = it.screenPositionY + descent\n                )\n            }\n\n        if (axisType.shouldDisplayAxisY())\n            labelsFrames += yLabels.map {\n                val labelHalfWidth = painter.measureLabelWidth(it.label, labelsSize) / 2\n                Frame(\n                    left = it.screenPositionX - labelHalfWidth,\n                    top = it.screenPositionY + ascent,\n                    right = it.screenPositionX + labelHalfWidth,\n                    bottom = it.screenPositionY + descent\n                )\n            }\n        return labelsFrames.toList()\n    }\n}\n'