b'/* \n * QR Code generator library (Java)\n * \n * Copyright (c) Project Nayuki. (MIT License)\n * https://www.nayuki.io/page/qr-code-generator-library\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy of\n * this software and associated documentation files (the "Software"), to deal in\n * the Software without restriction, including without limitation the rights to\n * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n * the Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n * - The above copyright notice and this permission notice shall be included in\n *   all copies or substantial portions of the Software.\n * - The Software is provided "as is", without warranty of any kind, express or\n *   implied, including but not limited to the warranties of merchantability,\n *   fitness for a particular purpose and noninfringement. In no event shall the\n *   authors or copyright holders be liable for any claim, damages or other\n *   liability, whether in an action of contract, tort or otherwise, arising from,\n *   out of or in connection with the Software or the use or other dealings in the\n *   Software.\n */\n\npackage io.nayuki.qrcodegen;\n\nimport java.util.BitSet;\nimport java.util.Objects;\n\n\n/**\n * An appendable sequence of bits (0s and 1s). Mainly used by {@link QrSegment}.\n */\npublic final class BitBuffer implements Cloneable {\n\t\n\t/*---- Fields ----*/\n\t\n\tprivate BitSet data;\n\t\n\tprivate int bitLength;  // Non-negative\n\t\n\t\n\t\n\t/*---- Constructor ----*/\n\t\n\t/**\n\t * Constructs an empty bit buffer (length 0).\n\t */\n\tpublic BitBuffer() {\n\t\tdata = new BitSet();\n\t\tbitLength = 0;\n\t}\n\t\n\t\n\t\n\t/*---- Methods ----*/\n\t\n\t/**\n\t * Returns the length of this sequence, which is a non-negative value.\n\t * @return the length of this sequence\n\t */\n\tpublic int bitLength() {\n\t\tassert bitLength >= 0;\n\t\treturn bitLength;\n\t}\n\t\n\t\n\t/**\n\t * Returns the bit at the specified index, yielding 0 or 1.\n\t * @param index the index to get the bit at\n\t * @return the bit at the specified index\n\t * @throws IndexOutOfBoundsException if index &lt; 0 or index &#x2265; bitLength\n\t */\n\tpublic int getBit(int index) {\n\t\tif (index < 0 || index >= bitLength)\n\t\t\tthrow new IndexOutOfBoundsException();\n\t\treturn data.get(index) ? 1 : 0;\n\t}\n\t\n\t\n\t/**\n\t * Appends the specified number of low-order bits of the specified value to this\n\t * buffer. Requires 0 &#x2264; len &#x2264; 31 and 0 &#x2264; val &lt; 2<sup>len</sup>.\n\t * @param val the value to append\n\t * @param len the number of low-order bits in the value to take\n\t * @throws IllegalArgumentException if the value or number of bits is out of range\n\t * @throws IllegalStateException if appending the data\n\t * would make bitLength exceed Integer.MAX_VALUE\n\t */\n\tpublic void appendBits(int val, int len) {\n\t\tif (len < 0 || len > 31 || val >>> len != 0)\n\t\t\tthrow new IllegalArgumentException("Value out of range");\n\t\tif (Integer.MAX_VALUE - bitLength < len)\n\t\t\tthrow new IllegalStateException("Maximum length reached");\n\t\tfor (int i = len - 1; i >= 0; i--, bitLength++)  // Append bit by bit\n\t\t\tdata.set(bitLength, QrCode.getBit(val, i));\n\t}\n\t\n\t\n\t/**\n\t * Appends the content of the specified bit buffer to this buffer.\n\t * @param bb the bit buffer whose data to append (not {@code null})\n\t * @throws NullPointerException if the bit buffer is {@code null}\n\t * @throws IllegalStateException if appending the data\n\t * would make bitLength exceed Integer.MAX_VALUE\n\t */\n\tpublic void appendData(BitBuffer bb) {\n\t\tObjects.requireNonNull(bb);\n\t\tif (Integer.MAX_VALUE - bitLength < bb.bitLength)\n\t\t\tthrow new IllegalStateException("Maximum length reached");\n\t\tfor (int i = 0; i < bb.bitLength; i++, bitLength++)  // Append bit by bit\n\t\t\tdata.set(bitLength, bb.data.get(i));\n\t}\n\t\n\t\n\t/**\n\t * Returns a new copy of this buffer.\n\t * @return a new copy of this buffer (not {@code null})\n\t */\n\tpublic BitBuffer clone() {\n\t\ttry {\n\t\t\tBitBuffer result = (BitBuffer)super.clone();\n\t\t\tresult.data = (BitSet)result.data.clone();\n\t\t\treturn result;\n\t\t} catch (CloneNotSupportedException e) {\n\t\t\tthrow new AssertionError(e);\n\t\t}\n\t}\n\t\n}\n'