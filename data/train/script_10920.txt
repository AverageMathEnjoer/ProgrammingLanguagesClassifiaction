b'package com.bennyhuo.kotlin.kclassvalue\n\nimport kotlin.concurrent.thread\n\n/**\n * Created by benny.\n */\nfun main() {\n//    val anyClass = Any::class\n//    val anyClass2 = Any::class\n//    println(anyClass == anyClass2)\n//    println(anyClass === anyClass2)\n\n    testConcurrentIssue()\n}\n\n//region concurrent issue.\nvar concurrentValue = 0\n\nfun safeIncrement() {\n    synchronized(Any::class) {\n        concurrentValue++\n    }\n}\n\nfun testConcurrentIssue() {\n    List(100) {\n        thread(start = false) {\n            for (i in 0 until 1000) {\n                safeIncrement()\n            }\n        }\n    }.onEach(Thread::start)\n        .forEach(Thread::join)\n\n    println(concurrentValue)\n}\n//endregion'