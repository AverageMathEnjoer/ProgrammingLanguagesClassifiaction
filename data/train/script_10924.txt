b'\xef\xbb\xbfusing System;\nusing System.Text;\nusing System.IO;\nusing System.Net;\nusing System.Collections.Generic;\nnamespace qqzeng_ip_dat\n{\n\n    /*\n\n    \xe9\xab\x98\xe6\x80\xa7\xe8\x83\xbdIP\xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x93\xe6\xa0\xbc\xe5\xbc\x8f\xe8\xaf\xa6\xe8\xa7\xa3 qqzeng-ip.dat\n    \n    \xe7\xbc\x96\xe7\xa0\x81\xef\xbc\x9aUTF8  \xe5\xad\x97\xe8\x8a\x82\xe5\xba\x8f\xef\xbc\x9aLittle-Endian  \n\n    \xe8\xbf\x94\xe5\x9b\x9e\xe5\xa4\x9a\xe4\xb8\xaa\xe5\xad\x97\xe6\xae\xb5\xe4\xbf\xa1\xe6\x81\xaf\xef\xbc\x88\xe5\xa6\x82\xef\xbc\x9a\xe4\xba\x9a\xe6\xb4\xb2|\xe4\xb8\xad\xe5\x9b\xbd|\xe9\xa6\x99\xe6\xb8\xaf|\xe4\xb9\x9d\xe9\xbe\x99|\xe6\xb2\xb9\xe5\xb0\x96\xe6\x97\xba|\xe6\x96\xb0\xe4\xb8\x96\xe7\x95\x8c\xe7\x94\xb5\xe8\xae\xaf|810200|Hong Kong|HK|114.17495|22.327115\xef\xbc\x89\n    \n    ------------------------ \xe6\x96\x87\xe4\xbb\xb6\xe7\xbb\x93\xe6\x9e\x84 ---------------------------\n\n    //\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb4    16\xe5\xad\x97\xe8\x8a\x82(4-4-4-4)\n    [\xe7\xb4\xa2\xe5\xbc\x95\xe5\x8c\xba\xe7\xac\xac\xe4\xb8\x80\xe6\x9d\xa1\xe6\xb5\x81\xe4\xbd\x8d\xe7\xbd\xae][\xe7\xb4\xa2\xe5\xbc\x95\xe5\x8c\xba\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe6\x9d\xa1\xe6\xb5\x81\xe4\xbd\x8d\xe7\xbd\xae][\xe5\x89\x8d\xe7\xbc\x80\xe5\x8c\xba\xe7\xac\xac\xe4\xb8\x80\xe6\x9d\xa1\xe7\x9a\x84\xe6\xb5\x81\xe4\xbd\x8d\xe7\xbd\xae][\xe5\x89\x8d\xe7\xbc\x80\xe5\x8c\xba\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe6\x9d\xa1\xe7\x9a\x84\xe6\xb5\x81\xe4\xbd\x8d\xe7\xbd\xae] \n\n    //\xe5\x86\x85\xe5\xae\xb9\xe5\x8c\xba    \xe9\x95\xbf\xe5\xba\xa6\xe6\x97\xa0\xe9\x99\x90\xe5\x88\xb6\n    [\xe5\x9c\xb0\xe5\x8c\xba\xe4\xbf\xa1\xe6\x81\xaf][\xe5\x9c\xb0\xe5\x8c\xba\xe4\xbf\xa1\xe6\x81\xaf]\xe2\x80\xa6\xe2\x80\xa6\xe5\x94\xaf\xe4\xb8\x80\xe4\xb8\x8d\xe9\x87\x8d\xe5\xa4\x8d\n\n\n    //\xe7\xb4\xa2\xe5\xbc\x95\xe5\x8c\xba    12\xe5\xad\x97\xe8\x8a\x82(4-4-3-1)\n    [\xe8\xb5\xb7\xe5\xa7\x8bIP][\xe7\xbb\x93\xe6\x9d\x9fIP][\xe5\x9c\xb0\xe5\x8c\xba\xe6\xb5\x81\xe4\xbd\x8d\xe7\xbd\xae][\xe6\xb5\x81\xe9\x95\xbf\xe5\xba\xa6]\n\n\n    //\xe5\x89\x8d\xe7\xbc\x80\xe5\x8c\xba   9\xe5\xad\x97\xe8\x8a\x82(1-4-4)\n    [0-255][\xe7\xb4\xa2\xe5\xbc\x95\xe5\x8c\xbastart\xe7\xb4\xa2\xe5\xbc\x95][\xe7\xb4\xa2\xe5\xbc\x95\xe5\x8c\xbaend\xe7\xb4\xa2\xe5\xbc\x95]\n\n    ------------------------ \xe6\x96\x87\xe4\xbb\xb6\xe7\xbb\x93\xe6\x9e\x84 ---------------------------\n\n    \xe4\xbc\x98\xe5\x8a\xbf\xef\xbc\x9a\xe7\xb4\xa2\xe5\xbc\x95\xe5\x8c\xba\xe5\x88\x86\xe4\xb8\xba[\xe8\xb5\xb7\xe5\xa7\x8bIP][\xe7\xbb\x93\xe6\x9d\x9fIP][\xe5\x9c\xb0\xe5\x8c\xba\xe5\x81\x8f\xe7\xa7\xbb][\xe9\x95\xbf\xe5\xba\xa6],\xe5\x87\x8f\xe5\xb0\x91\xe5\xa4\x9a\xe7\xba\xa7\xe5\x81\x8f\xe7\xa7\xbb\xe8\xb7\xb3\xe8\xbd\xac\xe6\xad\xa5\xe9\xaa\xa4\xe5\x92\x8c\xe9\x95\xbf\xe5\xba\xa6\xe7\x9a\x84\xe8\xa7\xa3\xe6\x9e\x90,\xe6\x8f\x90\xe9\xab\x98\xe6\x95\x88\xe7\x8e\x87;\n         \xe6\xa0\xb9\xe6\x8d\xaeip\xe7\xac\xac\xe4\xb8\x80\xe4\xbd\x8d\xe6\x95\xb0\xe5\xad\x97\xe4\xbd\x9c\xe4\xb8\xba\xe5\x89\x8d\xe7\xbc\x80,\xe8\xa7\xa3\xe6\x9e\x90\xe5\x87\xba\xe4\xbb\xa5\xe8\xbf\x99\xe4\xb8\xaa\xe6\x95\xb0\xe5\xad\x97\xe4\xb8\xba\xe5\x89\x8d\xe7\xbc\x80\xe7\x9a\x84\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe7\xb4\xa2\xe5\xbc\x95\xe5\x92\x8c\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaa\xe7\xb4\xa2\xe5\xbc\x95,\xe7\xbc\xa9\xe5\xb0\x8f\xe6\x9f\xa5\xe8\xaf\xa2\xe5\x8c\xba\xe9\x97\xb4,\n         \xe7\x84\xb6\xe5\x90\x8e\xe5\x9c\xa8\xe8\xbf\x99\xe5\x8c\xba\xe9\x97\xb4\xe5\x86\x8d\xe7\x94\xa8\xe4\xba\x8c\xe5\x88\x86\xe6\x9f\xa5\xe6\x89\xbe\xe5\xbf\xab\xe9\x80\x9f\xe6\x9f\xa5\xe6\x89\xbe\xe5\x88\xb0\xe5\xaf\xb9\xe5\xba\x94\xe5\x8c\xba\xe9\x97\xb4,\xe6\x95\x88\xe7\x8e\x87\xe6\x8f\x90\xe9\xab\x98\xe5\x87\xa0\xe4\xb8\xaa\xe7\xad\x89\xe7\xba\xa7    \n\n    \xe5\x8e\x8b\xe7\xbc\xa9\xef\xbc\x9a\xe5\x8e\x9f\xe7\x89\x88txt\xe4\xb8\xba15M,\xe7\x94\x9f\xe6\x88\x90\xe8\xbf\x99\xe7\xa7\x8ddat\xe7\xbb\x93\xe6\x9e\x84\xe4\xb8\xba2.45M \n\n    \xe6\x80\xa7\xe8\x83\xbd\xef\xbc\x9a\xe8\xa7\xa3\xe6\x9e\x90300\xe4\xb8\x87ip\xe8\x80\x97\xe6\x97\xb61\xe7\xa7\x92\n\n    \xe5\xaf\xb9\xe6\xaf\x94\xef\xbc\x9a\xe7\x9b\xb8\xe6\xaf\x94\xe5\x85\xb6\xe4\xbb\x96dat\xe6\x9b\xb4\xe7\xae\x80\xe6\xb4\x81\xe6\x9b\xb4\xe9\xab\x98\xe6\x95\x88\n\n    \xe5\x88\x9b\xe5\xbb\xba\xef\xbc\x9aqqzeng-ip \xe4\xba\x8e 2015-08-05\n\n    */\n\n    public class IPSearch\n    {\n        private Dictionary<uint, PrefixIndex> prefixDict;\n        private byte[] indexBuffer;\n        private byte[] data;\n        long firstStartIpOffset;//\xe7\xb4\xa2\xe5\xbc\x95\xe5\x8c\xba\xe7\xac\xac\xe4\xb8\x80\xe6\x9d\xa1\xe6\xb5\x81\xe4\xbd\x8d\xe7\xbd\xae\n        long lastStartIpOffset;//\xe7\xb4\xa2\xe5\xbc\x95\xe5\x8c\xba\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe6\x9d\xa1\xe6\xb5\x81\xe4\xbd\x8d\xe7\xbd\xae\n        long prefixStartOffset;//\xe5\x89\x8d\xe7\xbc\x80\xe5\x8c\xba\xe7\xac\xac\xe4\xb8\x80\xe6\x9d\xa1\xe7\x9a\x84\xe6\xb5\x81\xe4\xbd\x8d\xe7\xbd\xae\n        long prefixEndOffset;//\xe5\x89\x8d\xe7\xbc\x80\xe5\x8c\xba\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe6\x9d\xa1\xe7\x9a\x84\xe6\xb5\x81\xe4\xbd\x8d\xe7\xbd\xae\n        long ipCount;       //ip\xe6\xae\xb5\xe6\x95\xb0\xe9\x87\x8f\n        long prefixCount;  //\xe5\x89\x8d\xe7\xbc\x80\xe6\x95\xb0\xe9\x87\x8f\n\n        /// <summary>\n        /// \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe4\xba\x8c\xe8\xbf\x9b\xe5\x88\xb6dat\xe6\x95\xb0\xe6\x8d\xae\n        /// </summary>\n        /// <param name="dataPath"></param>\n        public IPSearch(string dataPath)\n        {\n            using (FileStream fs = new FileStream(dataPath, FileMode.Open, FileAccess.Read, FileShare.Read))\n            {\n                data = new byte[fs.Length];\n                fs.Read(data, 0, data.Length);\n            }\n\n            firstStartIpOffset = BytesToLong(data[0], data[1], data[2], data[3]);\n            lastStartIpOffset = BytesToLong(data[4], data[5], data[6], data[7]);\n            prefixStartOffset = BytesToLong(data[8], data[9], data[10], data[11]);\n            prefixEndOffset = BytesToLong(data[12], data[13], data[14], data[15]);\n\n            //prefixCount \xe4\xb8\x8d\xe5\x9b\xba\xe5\xae\x9a\xe4\xb8\xba256 \xe6\x96\xb9\xe4\xbe\xbf\xe4\xbb\xa5\xe5\x90\x8e\xe8\x87\xaa\xe7\x94\xb1\xe5\xae\x9a\xe5\x88\xb6 \xe5\x9b\xbd\xe5\x86\x85\xe7\x89\x88  \xe5\x9b\xbd\xe5\xa4\x96\xe7\x89\x88 \xe5\x85\xa8\xe7\x90\x83\xe7\x89\x88 \xe6\x88\x96\xe8\x80\x85\xe6\x9f\x90\xe9\x83\xa8\xe5\x88\x86 \xe9\x83\xbd\xe5\x8f\xaf\xe4\xbb\xa5\n\n            ipCount = (lastStartIpOffset - firstStartIpOffset) / 12 + 1; //\xe7\xb4\xa2\xe5\xbc\x95\xe5\x8c\xba\xe5\x9d\x97\xe6\xaf\x8f\xe7\xbb\x84 12\xe5\xad\x97\xe8\x8a\x82          \n            prefixCount = (prefixEndOffset - prefixStartOffset) / 9 + 1; //\xe5\x89\x8d\xe7\xbc\x80\xe5\x8c\xba\xe5\x9d\x97\xe6\xaf\x8f\xe7\xbb\x84 9\xe5\xad\x97\xe8\x8a\x82\n\n            //\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe5\x89\x8d\xe7\xbc\x80\xe5\xaf\xb9\xe5\xba\x94\xe7\xb4\xa2\xe5\xbc\x95\xe5\x8c\xba\xe5\x8c\xba\xe9\x97\xb4\n            indexBuffer = new byte[prefixCount * 9];\n            Array.Copy(data, prefixStartOffset, indexBuffer, 0, prefixCount * 9);\n            prefixDict = new Dictionary<uint, PrefixIndex>();\n            for (var k = 0; k < prefixCount; k++)\n            {\n                int i = k * 9;\n                uint prefix = (uint)indexBuffer[i];\n                long start_index = BytesToLong(indexBuffer[i + 1], indexBuffer[i + 2], indexBuffer[i + 3], indexBuffer[i + 4]);\n                long end_index = BytesToLong(indexBuffer[i + 5], indexBuffer[i + 6], indexBuffer[i + 7], indexBuffer[i + 8]);\n                prefixDict.Add(prefix, new PrefixIndex() { prefix = prefix, start_index = start_index, end_index = end_index });\n            }\n\n        }\n\n        public static uint IpToInt(string ip,out uint prefix)\n        {\n            byte[] bytes = IPAddress.Parse(ip).GetAddressBytes();\n            prefix = (uint)bytes[0];\n            return (uint)bytes[3] + (((uint)bytes[2]) << 8) + (((uint)bytes[1]) << 16) + (((uint)bytes[0]) << 24);\n        }\n\n        public static string IntToIP(uint ip_Int)\n        {\n            return new IPAddress(ip_Int).ToString();\n        }\n\n        /// <summary>\n        /// \xe6\xa0\xb9\xe6\x8d\xaeip\xe6\x9f\xa5\xe8\xaf\xa2\xe5\xa4\x9a\xe7\xbb\xb4\xe5\xad\x97\xe6\xae\xb5\xe4\xbf\xa1\xe6\x81\xaf\n        /// </summary>\n        /// <param name="ip">ip\xe5\x9c\xb0\xe5\x9d\x80\xef\xbc\x88123.4.5.6\xef\xbc\x89</param>\n        /// <returns>\xe4\xba\x9a\xe6\xb4\xb2|\xe4\xb8\xad\xe5\x9b\xbd|\xe9\xa6\x99\xe6\xb8\xaf|\xe4\xb9\x9d\xe9\xbe\x99|\xe6\xb2\xb9\xe5\xb0\x96\xe6\x97\xba|\xe6\x96\xb0\xe4\xb8\x96\xe7\x95\x8c\xe7\x94\xb5\xe8\xae\xaf|810200|Hong Kong|HK|114.17495|22.327115</returns>\n        public string Query(string ip)\n        {\n            uint ip_prefix_value;\n            uint intIP = IpToInt(ip,out ip_prefix_value);\n            uint high = 0;\n            uint low = 0;\n            uint startIp = 0;\n            uint endIp = 0;\n            uint local_offset = 0;\n            uint local_length = 0;\n\n           \n            if (prefixDict.ContainsKey(ip_prefix_value))\n            {\n                low = (uint)prefixDict[ip_prefix_value].start_index;\n                high = (uint)prefixDict[ip_prefix_value].end_index;\n            }\n            else\n            {\n                return "";\n            }\n\n            uint my_index = low == high? low : BinarySearch(low, high, intIP);          \n\n            GetIndex(my_index, out startIp, out endIp, out local_offset, out local_length);\n\n            if ((startIp <= intIP) && (endIp >= intIP))\n            {\n                return GetLocal(local_offset, local_length);\n            }\n            else\n            {\n                return "";\n            }\n\n        }\n        /// <summary>\n        /// \xe4\xba\x8c\xe5\x88\x86\xe9\x80\xbc\xe8\xbf\x91\xe7\xae\x97\xe6\xb3\x95\n        /// </summary>\n        public uint BinarySearch(uint low, uint high, uint k)\n        {\n            uint M = 0;\n            while (low <= high )\n            {\n                uint mid = (low + high) / 2;\n\n                uint endipNum = GetEndIp(mid);\n                if (endipNum >= k)\n                {\n                   \n                    M = mid; \n                    if (mid == 0)\n                    {\n                        break;   //\xe9\x98\xb2\xe6\xad\xa2\xe6\xba\xa2\xe5\x87\xba\n                    }\n                    high = mid - 1;\n                }\n                else\n                    low = mid + 1;\n            }\n            return M;\n        }\n        /// <summary>\n        /// \xe5\x9c\xa8\xe7\xb4\xa2\xe5\xbc\x95\xe5\x8c\xba\xe8\xa7\xa3\xe6\x9e\x90\n        /// </summary>\n        /// <param name="left">ip\xe7\xac\xacleft\xe4\xb8\xaa\xe7\xb4\xa2\xe5\xbc\x95</param>\n        /// <param name="startip">\xe8\xbf\x94\xe5\x9b\x9e\xe5\xbc\x80\xe5\xa7\x8bip\xe7\x9a\x84\xe6\x95\xb0\xe5\x80\xbc</param>\n        /// <param name="endip">\xe8\xbf\x94\xe5\x9b\x9e\xe7\xbb\x93\xe6\x9d\x9fip\xe7\x9a\x84\xe6\x95\xb0\xe5\x80\xbc</param>\n        /// <param name="local_offset">\xe8\xbf\x94\xe5\x9b\x9e\xe5\x9c\xb0\xe5\x9d\x80\xe4\xbf\xa1\xe6\x81\xaf\xe7\x9a\x84\xe6\xb5\x81\xe4\xbd\x8d\xe7\xbd\xae</param>\n        /// <param name="local_length">\xe8\xbf\x94\xe5\x9b\x9e\xe5\x9c\xb0\xe5\x9d\x80\xe4\xbf\xa1\xe6\x81\xaf\xe7\x9a\x84\xe6\xb5\x81\xe9\x95\xbf\xe5\xba\xa6</param>\n        private void GetIndex(uint left, out uint startip, out uint endip, out uint local_offset, out uint local_length)\n        {\n            long left_offset = firstStartIpOffset + (left * 12);\n            startip = BytesToLong(data[left_offset], data[1 + left_offset], data[2 + left_offset],data[3 + left_offset]);\n            endip = BytesToLong(data[4+left_offset], data[5 + left_offset], data[6 + left_offset], data[7 + left_offset]);\n            local_offset = (uint)data[8 + left_offset] + (((uint)data[9 + left_offset]) << 8) + (((uint)data[10 + left_offset]) << 16);\n            local_length = (uint)data[11 + left_offset];\n        }\n        /// <summary>\n        /// \xe5\x8f\xaa\xe8\x8e\xb7\xe5\x8f\x96\xe7\xbb\x93\xe6\x9d\x9fip\xe7\x9a\x84\xe6\x95\xb0\xe5\x80\xbc\n        /// </summary>\n        /// <param name="left">\xe7\xb4\xa2\xe5\xbc\x95\xe5\x8c\xba\xe7\xac\xacleft\xe4\xb8\xaa\xe7\xb4\xa2\xe5\xbc\x95</param>\n        /// <returns>\xe8\xbf\x94\xe5\x9b\x9e\xe7\xbb\x93\xe6\x9d\x9fip\xe7\x9a\x84\xe6\x95\xb0\xe5\x80\xbc</returns>\n        private uint GetEndIp(uint left)\n        {\n            long left_offset = firstStartIpOffset + (left * 12);\n            return BytesToLong(data[4 + left_offset], data[5 + left_offset], data[6 + left_offset], data[7 + left_offset]);\n\n        }\n\n        /// <summary>\n        /// \xe8\xbf\x94\xe5\x9b\x9e\xe5\x9c\xb0\xe5\x9d\x80\xe4\xbf\xa1\xe6\x81\xaf\n        /// </summary>\n        /// <param name="local_offset">\xe5\x9c\xb0\xe5\x9d\x80\xe4\xbf\xa1\xe6\x81\xaf\xe7\x9a\x84\xe6\xb5\x81\xe4\xbd\x8d\xe7\xbd\xae</param>\n        /// <param name="local_length">\xe5\x9c\xb0\xe5\x9d\x80\xe4\xbf\xa1\xe6\x81\xaf\xe7\x9a\x84\xe6\xb5\x81\xe9\x95\xbf\xe5\xba\xa6</param>\n        /// <returns></returns>\n        private string GetLocal(uint local_offset, uint local_length)\n        {\n            byte[] buf = new byte[local_length];\n            Array.Copy(data, local_offset, buf, 0, local_length);\n            return Encoding.UTF8.GetString(buf, 0, (int)local_length);\n\n        }\n\n        /// <summary>\n        /// \xe5\xad\x97\xe8\x8a\x82\xe8\xbd\xac\xe6\x95\xb4\xe5\xbd\xa2 \xe5\xb0\x8f\xe8\x8a\x82\xe5\xba\x8f \n        /// </summary>\n        private uint BytesToLong(byte a, byte b, byte c, byte d)\n        {\n            return ((uint)a << 0) | ((uint)b << 8) | ((uint)c << 16) | ((uint)d << 24);\n        }\n    }\n\n    /*\n    \xef\xbc\x88\xe8\xb0\x83\xe7\x94\xa8\xe4\xbe\x8b\xe5\xad\x90\xef\xbc\x89\xef\xbc\x9a\n    IPSearch finder = new IPSearch("qqzeng-ip.dat");\n    string result = finder.Query("1.2.3.4");\n   --> result="\xe4\xba\x9a\xe6\xb4\xb2|\xe4\xb8\xad\xe5\x9b\xbd|\xe9\xa6\x99\xe6\xb8\xaf|\xe4\xb9\x9d\xe9\xbe\x99|\xe6\xb2\xb9\xe5\xb0\x96\xe6\x97\xba|\xe6\x96\xb0\xe4\xb8\x96\xe7\x95\x8c\xe7\x94\xb5\xe8\xae\xaf|810200|Hong Kong|HK|114.17495|22.327115"\n    */\n}\n\n   public class PrefixIndex\n    {\n        public uint prefix { get; set; }\n        public long start_index { get; set; }\n        public long end_index { get; set; }\n    }\n'