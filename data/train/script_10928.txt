b'package co.joebirch.composeplayground.material\n\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.material.*\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.Call\nimport androidx.compose.material.icons.filled.Email\nimport androidx.compose.material.icons.filled.Face\nimport androidx.compose.material.BottomNavigationItem\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.vector.ImageVector\nimport androidx.compose.ui.unit.dp\nimport co.joebirch.composeplayground.ComposableLayout\n\nobject BottomNavigationView : ComposableLayout {\n\n    @Composable\n    override fun build() {\n        val selectedLayout = remember { mutableStateOf(0) }\n\n        Column(\n            modifier = Modifier.fillMaxSize(),\n            verticalArrangement = Arrangement.Bottom,\n            horizontalAlignment = Alignment.CenterHorizontally\n        ) {\n            when (selectedLayout.value) {\n                0 -> StandardBottomNavigation {\n                    Button(onClick = {\n                        selectedLayout.value = 1\n                    }, modifier = Modifier.align(Alignment.CenterHorizontally)) {\n                        Text(text = "Switch to no labels")\n                    }\n                }\n                1 -> BottomNavigationOnlySelectedLabels {\n                    Button(onClick = {\n                        selectedLayout.value = 2\n                    }, modifier = Modifier.align(Alignment.CenterHorizontally)) {\n                        Text(text = "Switch to styled")\n                    }\n                }\n            }\n        }\n    }\n\n}\n\nclass NavigationItem(val label: String, val icon: ImageVector)\n\n@Composable\nfun StandardBottomNavigation(bodyContent: @Composable() () -> Unit) {\n    val selectedItem = remember { mutableStateOf(0) }\n    val items = listOf(\n        NavigationItem("Call", Icons.Filled.Call),\n        NavigationItem("People", Icons.Filled.Face),\n        NavigationItem("Email", Icons.Filled.Email)\n    )\n    Column {\n        bodyContent()\n        Spacer(modifier = Modifier.height(64.dp))\n        BottomNavigation {\n            items.forEachIndexed { index, item ->\n                BottomNavigationItem(\n                    icon = {\n                        Icon(\n                            imageVector = item.icon,\n                            contentDescription = null\n                        )\n                    },\n                    label = { Text(text = item.label) },\n                    selected = selectedItem.value == index,\n                    onClick = { selectedItem.value = index }\n                )\n            }\n        }\n    }\n}\n\n@Composable\nfun RowScope.StandardBottomNavigationItem(bodyContent: @Composable() () -> Unit) {\n    val selectedItem = remember { mutableStateOf(0) }\n    BottomNavigationItem(\n        icon = { Icon(Icons.Filled.Call, contentDescription = "Call") },\n        selected = selectedItem.value == 0,\n        onClick = { selectedItem.value = 0 }\n    )\n}\n\n@Composable\nfun RowScope.LabelBottomNavigationItem(bodyContent: @Composable() () -> Unit) {\n    val selectedItem = remember { mutableStateOf(0) }\n    BottomNavigationItem(\n        icon = { Icon(Icons.Filled.Call, contentDescription = "Call") },\n        label = { Text(text = "Call") },\n        selected = selectedItem.value == 0,\n        onClick = { selectedItem.value = 0 }\n    )\n}\n\n@Composable\nfun RowScope.AlwaysVisibleLabelBottomNavigationItem(bodyContent: @Composable() () -> Unit) {\n    val selectedItem = remember { mutableStateOf(0) }\n    BottomNavigationItem(\n        icon = { Icon(Icons.Filled.Call, contentDescription = "Call") },\n        label = { Text(text = "Call") },\n        alwaysShowLabel = true,\n        selected = selectedItem.value == 0,\n        onClick = { selectedItem.value = 0 }\n    )\n}\n\n@Composable\nfun RowScope.SelectedColorBottomNavigationItem(bodyContent: @Composable() () -> Unit) {\n    val selectedItem = remember { mutableStateOf(0) }\n    BottomNavigationItem(\n        icon = { Icon(Icons.Filled.Call, contentDescription = "Call") },\n        selectedContentColor = Color.Red,\n        selected = selectedItem.value == 0,\n        onClick = { selectedItem.value = 0 }\n    )\n}\n\n@Composable\nfun RowScope.UnselectedColorBottomNavigationItem(bodyContent: @Composable() () -> Unit) {\n    val selectedItem = remember { mutableStateOf(0) }\n    BottomNavigationItem(\n        icon = { Icon(Icons.Filled.Call, contentDescription = "Call") },\n        unselectedContentColor = Color.LightGray,\n        selected = selectedItem.value == 0,\n        onClick = { selectedItem.value = 0 }\n    )\n}\n\n@Composable\nfun InteractionState(bodyContent: @Composable() () -> Unit) {\n    val selectedItem = remember { mutableStateOf(0) }\n    val items = listOf(\n        NavigationItem("Call", Icons.Filled.Call),\n        NavigationItem("People", Icons.Filled.Face),\n        NavigationItem("Email", Icons.Filled.Email)\n    )\n    Column {\n        bodyContent()\n        Spacer(modifier = Modifier.height(64.dp))\n        BottomNavigation {\n            items.forEachIndexed { index, item ->\n                BottomNavigationItem(\n                    icon = {\n                        Icon(\n                            imageVector = item.icon,\n                            contentDescription = null\n                        )\n                    },\n                    label = { Text(text = item.label) },\n                    selected = selectedItem.value == index,\n                    onClick = { selectedItem.value = index }\n                )\n            }\n        }\n    }\n}\n\n@Composable\nfun BottomNavigationOnlySelectedLabels(bodyContent: @Composable() () -> Unit) {\n    val selectedItem = remember { mutableStateOf(0) }\n    val items = listOf(\n        NavigationItem("Call", Icons.Filled.Call),\n        NavigationItem("People", Icons.Filled.Face),\n        NavigationItem("Email", Icons.Filled.Email)\n    )\n    Column {\n        bodyContent()\n        Spacer(modifier = Modifier.height(64.dp))\n        BottomNavigation {\n            items.forEachIndexed { index, item ->\n                BottomNavigationItem(\n                    icon = {\n                        Icon(\n                            imageVector = item.icon,\n                            contentDescription = null\n                        )\n                    },\n                    label = { Text(text = item.label) },\n                    selected = selectedItem.value == index,\n                    onClick = { selectedItem.value = index },\n                    alwaysShowLabel = false\n                )\n            }\n        }\n    }\n}\n\n@Composable\nfun BackgroundColorBottomNavigation(bodyContent: @Composable() () -> Unit) {\n    val selectedItem = remember { mutableStateOf(0) }\n    val items = listOf(\n        NavigationItem("Call", Icons.Filled.Call),\n        NavigationItem("People", Icons.Filled.Face),\n        NavigationItem("Email", Icons.Filled.Email)\n    )\n    BottomNavigation(\n        backgroundColor = Color.Red\n    ) {\n        items.forEachIndexed { index, item ->\n            BottomNavigationItem(\n                icon = {\n                    Icon(\n                        imageVector = item.icon,\n                        contentDescription = null\n                    )\n                },\n                label = { Text(text = item.label) },\n                selected = selectedItem.value == index,\n                onClick = { selectedItem.value = index },\n                selectedContentColor = Color.Green,\n                unselectedContentColor = Color.Red\n            )\n        }\n    }\n}\n\n@Composable\nfun ContentColorBottomNavigation(bodyContent: @Composable() () -> Unit) {\n    val selectedItem = remember { mutableStateOf(0) }\n    val items = listOf(\n        NavigationItem("Call", Icons.Filled.Call),\n        NavigationItem("People", Icons.Filled.Face),\n        NavigationItem("Email", Icons.Filled.Email)\n    )\n    BottomNavigation(\n        contentColor = Color.Blue\n    ) {\n        items.forEachIndexed { index, item ->\n            BottomNavigationItem(\n                icon = {\n                    Icon(\n                        imageVector = item.icon,\n                        contentDescription = null\n                    )\n                },\n                label = { Text(text = item.label) },\n                selected = selectedItem.value == index,\n                onClick = { selectedItem.value = index },\n                selectedContentColor = Color.Green,\n                unselectedContentColor = Color.Red\n            )\n        }\n    }\n}\n\n\n@Composable\nfun ElevationBottomNavigation(bodyContent: @Composable() () -> Unit) {\n    val selectedItem = remember { mutableStateOf(0) }\n    val items = listOf(\n        NavigationItem("Call", Icons.Filled.Call),\n        NavigationItem("People", Icons.Filled.Face),\n        NavigationItem("Email", Icons.Filled.Email)\n    )\n    BottomNavigation(\n        elevation = 12.dp\n    ) {\n        items.forEachIndexed { index, item ->\n            BottomNavigationItem(\n                icon = {\n                    Icon(\n                        imageVector = item.icon,\n                        contentDescription = null\n                    )\n                },\n                label = { Text(text = item.label) },\n                selected = selectedItem.value == index,\n                onClick = { selectedItem.value = index },\n                selectedContentColor = Color.Green,\n                unselectedContentColor = Color.Red\n            )\n        }\n    }\n}\n'