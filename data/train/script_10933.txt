b'package effectivejava.chapter6.item38;\nimport java.util.*;\n\n// Emulated extensible enum (Pages 176-9)\npublic enum ExtendedOperation implements Operation {\n    EXP("^") {\n        public double apply(double x, double y) {\n            return Math.pow(x, y);\n        }\n    },\n    REMAINDER("%") {\n        public double apply(double x, double y) {\n            return x % y;\n        }\n    };\n    private final String symbol;\n    ExtendedOperation(String symbol) {\n        this.symbol = symbol;\n    }\n    @Override public String toString() {\n        return symbol;\n    }\n\n//    // Using an enum class object to represent a collection of extended enums (page 178)\n//    public static void main(String[] args) {\n//        double x = Double.parseDouble(args[0]);\n//        double y = Double.parseDouble(args[1]);\n//        test(ExtendedOperation.class, x, y);\n//    }\n//    private static <T extends Enum<T> & Operation> void test(\n//            Class<T> opEnumType, double x, double y) {\n//        for (Operation op : opEnumType.getEnumConstants())\n//            System.out.printf("%f %s %f = %f%n",\n//                    x, op, y, op.apply(x, y));\n//    }\n\n    // Using a collection instance to represent a collection of extended enums (page 178)\n    public static void main(String[] args) {\n        double x = Double.parseDouble(args[0]);\n        double y = Double.parseDouble(args[1]);\n        test(Arrays.asList(ExtendedOperation.values()), x, y);\n    }\n    private static void test(Collection<? extends Operation> opSet,\n                             double x, double y) {\n        for (Operation op : opSet)\n            System.out.printf("%f %s %f = %f%n",\n                    x, op, y, op.apply(x, y));\n    }\n}\n'