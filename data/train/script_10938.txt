b'-- |\n-- Module      : FRP.BearRiver.Arrow\n-- Copyright   : (c) Ivan Perez, 2014-2023\n--               (c) George Giorgidze, 2007-2012\n--               (c) Henrik Nilsson, 2005-2006\n--               (c) Antony Courtney and Henrik Nilsson, Yale University, 2003-2004\n-- License     : BSD3\n--\n-- Maintainer  : ivan.perez@keera.co.uk\n-- Stability   : provisional\n-- Portability : portable\n--\n-- Arrow helper functions.\nmodule FRP.BearRiver.Arrow\n    (\n      -- * Arrow plumbing aids\n      dup\n\n      -- * Liftings\n    , arr2\n    , arr3\n    , arr4\n    , arr5\n    )\n  where\n\n-- External imports\nimport Control.Arrow (Arrow, arr)\n\n-- * Arrow plumbing aids\n\n-- | Duplicate an input.\ndup :: a -> (a, a)\ndup x = (x, x)\n\n-- * Liftings\n\n-- | Lift a binary function onto an arrow.\narr2 :: Arrow a => (b -> c -> d) -> a (b, c) d\narr2 = arr . uncurry\n\n-- | Lift a 3-ary function onto an arrow.\narr3 :: Arrow a => (b -> c -> d -> e) -> a (b, c, d) e\narr3 = arr . \\h (b, c, d) -> h b c d\n\n-- | Lift a 4-ary function onto an arrow.\narr4 :: Arrow a => (b -> c -> d -> e -> f) -> a (b, c, d, e) f\narr4 = arr . \\h (b, c, d, e) -> h b c d e\n\n-- | Lift a 5-ary function onto an arrow.\narr5 :: Arrow a => (b -> c -> d -> e -> f -> g) -> a (b, c, d, e, f) g\narr5 = arr . \\h (b, c, d, e, f) -> h b c d e f\n'