b'{-# LANGUAGE OverloadedStrings #-}\n{-# LANGUAGE RecordWildCards #-}\n\nmodule Text.Hoodle.Migrate.V0_1_1_to_V0_2_2 where\n\nimport Control.Error.Util (hoistEither)\nimport Control.Monad.Trans (lift)\nimport Control.Monad.Trans.Except (runExceptT)\nimport Data.Attoparsec.ByteString (parseOnly)\nimport qualified Data.ByteString.Char8 as B\nimport qualified Data.Hoodle.Simple.V0_1_1 as OH\nimport qualified Data.Hoodle.Simple.V0_2_2 as NH\nimport Lens.Micro (set)\nimport Lens.Micro.Extras (view)\nimport qualified Text.Hoodle.Parse.Attoparsec.V0_1_1 as OP\nimport qualified Text.Hoodle.Parse.Attoparsec.V0_2_2 as NP\n\npage2Page :: OH.Page -> NH.Page\npage2Page OH.Page {..} =\n  NH.Page\n    { NH.page_dim = dim2Dim page_dim,\n      NH.page_bkg = bkg2Bkg page_bkg,\n      NH.page_layers = fmap layer2Layer page_layers\n    }\n\ndim2Dim :: OH.Dimension -> NH.Dimension\ndim2Dim (OH.Dim w h) = NH.Dim w h\n\nbkg2Bkg :: OH.Background -> NH.Background\nbkg2Bkg OH.Background {..} =\n  NH.Background\n    { NH.bkg_type = bkg_type,\n      NH.bkg_color = bkg_color,\n      NH.bkg_style = bkg_style\n    }\nbkg2Bkg OH.BackgroundPdf {..} =\n  NH.BackgroundPdf\n    { NH.bkg_type = bkg_type,\n      NH.bkg_domain = bkg_domain,\n      NH.bkg_filename = bkg_filename,\n      NH.bkg_pageno = bkg_pageno\n    }\n\nitem2Item :: OH.Item -> NH.Item\nitem2Item (OH.ItemStroke strk) = NH.ItemStroke (stroke2Stroke strk)\nitem2Item (OH.ItemImage image) = NH.ItemImage (image2Image image)\nitem2Item (OH.ItemSVG svg) = NH.ItemSVG (svg2SVG svg)\n\nstroke2Stroke :: OH.Stroke -> NH.Stroke\nstroke2Stroke OH.Stroke {..} =\n  NH.Stroke\n    { NH.stroke_tool = stroke_tool,\n      NH.stroke_color = stroke_color,\n      NH.stroke_width = stroke_width,\n      NH.stroke_data = stroke_data\n    }\nstroke2Stroke OH.VWStroke {..} =\n  NH.VWStroke\n    { NH.stroke_tool = stroke_tool,\n      NH.stroke_color = stroke_color,\n      NH.stroke_vwdata = stroke_vwdata\n    }\n\nimage2Image :: OH.Image -> NH.Image\nimage2Image OH.Image {..} =\n  NH.Image\n    { NH.img_src = img_src,\n      NH.img_pos = img_pos,\n      NH.img_dim = dim2Dim img_dim\n    }\n\nsvg2SVG :: OH.SVG -> NH.SVG\nsvg2SVG OH.SVG {..} =\n  NH.SVG\n    { NH.svg_text = svg_text,\n      NH.svg_command = svg_command,\n      NH.svg_render = svg_render,\n      NH.svg_pos = svg_pos,\n      NH.svg_dim = dim2Dim svg_dim\n    }\n\n{-\nlink2Link :: OH.Link -> NH.Link\nlink2Link OH.Link {..} = NH.Link { NH.link_id = link_id\n                                 , NH.link_type = link_type\n                                 , NH.link_location = link_location\n                                 , NH.link_text = link_text\n                                 , NH.link_command = link_command\n                                 , NH.link_render = link_render\n                                 , NH.link_pos = link_pos\n                                 , NH.link_dim = dim2Dim link_dim }\n-}\n\nlayer2Layer :: OH.Layer -> NH.Layer\nlayer2Layer OH.Layer {..} = NH.Layer {NH.layer_items = fmap item2Item layer_items}\n\nmigrate :: B.ByteString -> IO (Either String NH.Hoodle)\nmigrate bstr = do\n  runExceptT $ do\n    v <- hoistEither (parseOnly NP.checkHoodleVersion bstr)\n    if v <= "0.1.1"\n      then do\n        oh <- hoistEither (parseOnly OP.hoodle bstr)\n        let ttl = view OH.title oh\n            pgs = (fmap page2Page . view OH.pages) oh\n        set NH.title ttl . set NH.pages pgs <$> lift NH.emptyHoodle\n      else hoistEither (parseOnly NP.hoodle bstr)\n\n-- pdf = view OH.embeddedPdf oh\n{- . set NH.embeddedPdf pdf -}\n'