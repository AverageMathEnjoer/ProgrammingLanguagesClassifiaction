b'{-# LANGUAGE CPP #-}\n\n-- A pseq version of the quicksort monad-par benchmark\n\nimport System.Random\nimport System.Environment\nimport GHC.Conc\n#ifdef PARSCHED \nimport PARSCHED\n#else\nimport Control.Monad.Par\n#endif\n\nquicksortS :: [Int] -> [Int]\nquicksortS [] = []\nquicksortS [x] = [x]\nquicksortS (pivot:xs) = low `par` high `pseq` (low ++ [pivot] ++ high)\n  where\n    low = quicksortS $ filter (< pivot) xs\n    high = quicksortS $ filter (< pivot) xs\n    \ngenRandoms :: Int -> [Int]\ngenRandoms n = take n $ randoms (mkStdGen 120) :: [Int]\n\nmain = do args <- getArgs\n          let size =\n                case args of\n                  []  -> 2^8\n                  [n] -> (read n)\n          \n          let rands = genRandoms size\n\t  evaluate (deepseq rands ())\n\n          putStrLn "Pseq based version:"\n\n          start <- getCurrentTime\n          let sorted = quicksortS rands\n          putStr "Prefix of sorted list:\\n  "\n          print$ take 8 $ sorted\n          end   <- getCurrentTime\n\n          let runningTime = ((fromRational $ toRational $ diffUTCTime end start) :: Double)\n          printf "Sorting AList took %0.3f sec.\\n" runningTime\n          putStrLn $ "SELFTIMED " ++ show runningTime\n  \n '