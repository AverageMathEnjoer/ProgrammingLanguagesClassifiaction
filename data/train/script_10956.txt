b"{-# LANGUAGE TemplateHaskell #-}\nmodule TreeSitter.Strings.Example (tests) where\n\nimport           Control.Monad\nimport           Data.Char\nimport           Data.Foldable\nimport           Hedgehog\nimport qualified Hedgehog.Gen as Gen\nimport qualified Hedgehog.Range as Range\nimport           TreeSitter.Symbol\n\ntests :: IO Bool\ntests = checkParallel $$(discover)\n\n-- | Generate permutations of alphabet and underscore combinations\nsnakeChar :: MonadGen m => m Char\nsnakeChar = Gen.choice\n  [ pure '_'\n  , Gen.alpha\n  ]\n\n-- | Generator for snake_case JSON input\ngenSnake :: Gen String\ngenSnake = Gen.string (Range.constant 1 10) snakeChar\n\nprop_camelCase :: Property\nprop_camelCase = property $ do\n  xs <- forAll $ Gen.string (Range.constant 1 5) snakeChar\n  assert ('_' `notElem` camelCase xs)\n\ninitialCaps :: MonadGen m => m Char\ninitialCaps = Gen.frequency\n  [ (10, Gen.upper)\n  , (5, pure '_')\n  , (1, Gen.lower)\n  ]\n\nprop_capitalize :: Property\nprop_capitalize = property $ do\n  x:xs <- forAll (Gen.string (Range.constant 1 5) initialCaps)\n  y:_  <- pure $ capitalize (x:xs)\n  when (isLower x) (assert (isUpper y))\n\nprop_escapePunct :: Property\nprop_escapePunct = property $ do\n  xs <- forAll $ Gen.string (Range.constant 1 5) (Gen.filter p Gen.ascii)\n  traverse_ (assert . isAlphaNum) (escapeOperatorPunctuation xs)\n  where p = not . (\\c -> isSpace c || c == '_' )\n"