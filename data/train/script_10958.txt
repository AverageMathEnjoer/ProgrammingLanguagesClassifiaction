b'{-|\nA dictionary (`Dict`) describes how to convert Haskell values to and from a web\nrepresentation. Rest resources internally use plain Haskell datatypes, while\ncommunication to the outside world mostly happens using XML, JSON, plain text,\nquery parameters, etc. The `Dict` datatype describes how to convert resource\n/indentifiers, input, request parameters, request headers, output, and errors/\nto and from a Haskell representation.\n\nThe `Dict` datatype and most functions working on it take a type parameters for\nevery aspect of its communication, which can grow quickly. This module and\nmost code that depend on it uses the implicit convention of using the type\nvariable `id` for the resource identifier, the `h` for the request headers, the\n`p` for the request parameters, the `i` for the request body, the `o` for the\nresponse body, and the `e` for a possible error.\n-}\n\nmodule Rest.Dictionary\n  ( module Rest.Dictionary.Types\n  , module Rest.Dictionary.Combinators\n  ) where\n\nimport Rest.Dictionary.Types\nimport Rest.Dictionary.Combinators\n'