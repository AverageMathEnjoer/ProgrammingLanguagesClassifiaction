b'package com.codeest.geeknews.presenter.vtex;\n\nimport com.codeest.geeknews.base.RxPresenter;\nimport com.codeest.geeknews.model.DataManager;\nimport com.codeest.geeknews.model.bean.NodeListBean;\nimport com.codeest.geeknews.model.bean.RealmLikeBean;\nimport com.codeest.geeknews.model.bean.RepliesListBean;\nimport com.codeest.geeknews.base.contract.vtex.RepliesContract;\nimport com.codeest.geeknews.util.RxUtil;\nimport com.codeest.geeknews.widget.CommonSubscriber;\n\nimport java.util.List;\n\nimport javax.inject.Inject;\n\nimport io.reactivex.annotations.NonNull;\nimport io.reactivex.functions.Function;\nimport io.reactivex.functions.Predicate;\n\n/**\n * Created by codeest on 16/12/23.\n */\n\npublic class RepliesPresenter extends RxPresenter<RepliesContract.View> implements RepliesContract.Presenter{\n\n    private DataManager mDataManager;\n\n    @Inject\n    public RepliesPresenter(DataManager mDataManager) {\n        this.mDataManager = mDataManager;\n    }\n\n    @Override\n    public void getContent(String topic_id) {\n        addSubscribe(mDataManager.fetchRepliesList(topic_id)\n                .compose(RxUtil.<List<RepliesListBean>>rxSchedulerHelper())\n                .subscribeWith(new CommonSubscriber<List<RepliesListBean>>(mView) {\n                    @Override\n                    public void onNext(List<RepliesListBean> repliesListBeen) {\n                        mView.showContent(repliesListBeen);\n                    }\n                })\n        );\n    }\n\n    @Override\n    public void getTopInfo(String topic_id) {\n        addSubscribe(mDataManager.fetchTopicInfo(topic_id)\n                .compose(RxUtil.<List<NodeListBean>>rxSchedulerHelper())\n                .filter(new Predicate<List<NodeListBean>>() {\n                    @Override\n                    public boolean test(@NonNull List<NodeListBean> nodeListBeen) throws Exception {\n                        return nodeListBeen.size() > 0;\n                    }\n                })\n                .map(new Function<List<NodeListBean>, NodeListBean>() {\n                    @Override\n                    public NodeListBean apply(List<NodeListBean> nodeListBeen) {\n                        return nodeListBeen.get(0);\n                    }\n                })\n                .subscribeWith(new CommonSubscriber<NodeListBean>(mView) {\n                    @Override\n                    public void onNext(NodeListBean nodeListBean) {\n                        mView.showTopInfo(nodeListBean);\n                    }\n                })\n        );\n    }\n\n    @Override\n    public void insert(RealmLikeBean bean) {\n        mDataManager.insertLikeBean(bean);\n    }\n\n    @Override\n    public void delete(String id) {\n        mDataManager.deleteLikeBean(id);\n    }\n\n    @Override\n    public boolean query(String id) {\n        return mDataManager.queryLikeId(id);\n    }\n}\n'