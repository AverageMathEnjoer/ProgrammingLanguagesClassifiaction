b'package com.db.williamchart.view\n\nimport android.content.Context\nimport android.content.res.TypedArray\nimport android.graphics.Canvas\nimport android.graphics.Color\nimport android.graphics.Paint\nimport android.util.AttributeSet\nimport android.widget.FrameLayout\nimport androidx.core.graphics.toRectF\nimport androidx.core.view.doOnPreDraw\nimport com.db.williamchart.ChartContract\nimport com.db.williamchart.R\nimport com.db.williamchart.animation.ChartAnimation\nimport com.db.williamchart.animation.DefaultDonutAnimation\nimport com.db.williamchart.animation.DonutNoAnimation\nimport com.db.williamchart.data.configuration.DonutChartConfiguration\nimport com.db.williamchart.data.DonutDataPoint\nimport com.db.williamchart.data.Frame\nimport com.db.williamchart.data.Paddings\nimport com.db.williamchart.data.toRect\nimport com.db.williamchart.extensions.obtainStyledAttributes\nimport com.db.williamchart.renderer.DonutChartRenderer\n\nclass DonutChartView @JvmOverloads constructor(\n    context: Context,\n    attrs: AttributeSet? = null,\n    defStyleAttr: Int = 0\n) : FrameLayout(context, attrs, defStyleAttr), ChartContract.DonutView {\n\n    @Suppress("MemberVisibilityCanBePrivate")\n    var donutThickness = defaultThickness\n\n    @Suppress("MemberVisibilityCanBePrivate")\n    var donutColors = intArrayOf(defaultColor)\n\n    @Suppress("MemberVisibilityCanBePrivate")\n    var donutBackgroundColor = defaultBackgroundColor\n\n    @Suppress("MemberVisibilityCanBePrivate")\n    var donutRoundCorners = false\n\n    @Suppress("MemberVisibilityCanBePrivate")\n    var donutTotal = defaultDonutTotal\n\n    var animation: ChartAnimation<DonutDataPoint> = DefaultDonutAnimation()\n\n    private lateinit var canvas: Canvas\n\n    private var renderer: ChartContract.DonutRenderer =\n        DonutChartRenderer(this, DonutNoAnimation())\n\n    private val paint: Paint = Paint()\n\n    private val configuration: DonutChartConfiguration\n        get() =\n            DonutChartConfiguration(\n                width = measuredWidth,\n                height = measuredHeight,\n                paddings = Paddings(\n                    paddingLeft.toFloat(),\n                    paddingTop.toFloat(),\n                    paddingRight.toFloat(),\n                    paddingBottom.toFloat()\n                ),\n                thickness = donutThickness,\n                total = donutTotal,\n                colorsSize = donutColors.size,\n                barBackgroundColor = donutBackgroundColor\n            )\n\n    init {\n        setBackgroundColor(Color.TRANSPARENT)\n        handleAttributes(obtainStyledAttributes(attrs, R.styleable.DonutChartAttrs))\n        handleEditMode()\n    }\n\n    override fun drawArc(degrees: List<Float>, innerFrame: Frame) {\n\n        if (donutRoundCorners)\n            paint.strokeCap = Paint.Cap.ROUND\n\n        paint.style = Paint.Style.STROKE\n        paint.strokeWidth = donutThickness\n        paint.isAntiAlias = true\n\n        val invertedColors = donutColors.reversed() // Degrees list come inverted\n\n        degrees.forEachIndexed { index, degree ->\n            paint.color = invertedColors[index]\n            canvas.drawArc(\n                innerFrame.toRect().toRectF(),\n                defaultStartAngle,\n                degree,\n                false,\n                paint\n            )\n        }\n    }\n\n    override fun drawBackground(innerFrame: Frame) {\n        paint.style = Paint.Style.STROKE\n        paint.strokeWidth = donutThickness\n        paint.color = donutBackgroundColor\n        paint.isAntiAlias = true\n\n        val radius = (innerFrame.bottom - innerFrame.top) / 2\n        canvas.drawCircle(\n            innerFrame.left + radius,\n            innerFrame.top + radius,\n            radius,\n            paint\n        )\n    }\n\n    override fun drawDebugFrame(innerFrame: Frame) {\n        canvas.drawRect(innerFrame.toRect(), paint)\n    }\n\n    override fun onDraw(canvas: Canvas) {\n        super.onDraw(canvas)\n        this.canvas = canvas\n        renderer.draw()\n    }\n\n    fun show(values: List<Float>) {\n        doOnPreDraw { renderer.preDraw(configuration) }\n        renderer.render(values)\n    }\n\n    fun animate(values: List<Float>) {\n        doOnPreDraw { renderer.preDraw(configuration) }\n        renderer.anim(values, animation)\n    }\n\n    private fun handleEditMode() {\n        if (isInEditMode) {\n            show(editModeSampleData)\n        }\n    }\n\n    private fun handleAttributes(typedArray: TypedArray) {\n        typedArray.apply {\n            donutThickness =\n                getDimension(R.styleable.DonutChartAttrs_chart_donutThickness, donutThickness)\n            donutBackgroundColor = getColor(\n                R.styleable.DonutChartAttrs_chart_donutBackgroundColor,\n                donutBackgroundColor\n            )\n            donutRoundCorners =\n                getBoolean(R.styleable.DonutChartAttrs_chart_donutRoundCorners, donutRoundCorners)\n            donutTotal = getFloat(R.styleable.DonutChartAttrs_chart_donutTotal, donutTotal)\n            recycle()\n        }\n    }\n\n    companion object {\n        private const val defaultThickness = 50f\n        private const val defaultColor = Color.BLACK\n        private const val defaultBackgroundColor = Color.TRANSPARENT\n        private const val defaultStartAngle = 90f\n        private const val defaultDonutTotal = 100f\n        private val editModeSampleData = listOf(70f)\n    }\n}\n'