b'{-# LANGUAGE CPP #-}\n#if !defined(TESTING) && defined(__GLASGOW_HASKELL__)\n{-# LANGUAGE Safe #-}\n#endif\n\n#include "containers.h"\n\n-----------------------------------------------------------------------------\n-- |\n-- Module      :  Data.IntSet\n-- Copyright   :  (c) Daan Leijen 2002\n--                (c) Joachim Breitner 2011\n-- License     :  BSD-style\n-- Maintainer  :  libraries@haskell.org\n-- Portability :  portable\n--\n--\n-- = Finite Int Sets\n--\n-- The @\'IntSet\'@ type represents a set of elements of type @Int@.\n--\n-- For a walkthrough of the most commonly used functions see their\n-- <https://haskell-containers.readthedocs.io/en/latest/set.html sets introduction>.\n--\n-- These modules are intended to be imported qualified, to avoid name\n-- clashes with Prelude functions, e.g.\n--\n-- >  import Data.IntSet (IntSet)\n-- >  import qualified Data.IntSet as IntSet\n--\n--\n-- == Performance information\n--\n-- Many operations have a worst-case complexity of \\(O(\\min(n,W))\\).\n-- This means that the operation can become linear in the number of\n-- elements with a maximum of \\(W\\) -- the number of bits in an \'Int\'\n-- (32 or 64).\n--\n--\n-- == Implementation\n--\n-- The implementation is based on /big-endian patricia trees/.  This data\n-- structure performs especially well on binary operations like \'union\'\n-- and \'intersection\'.  However, my benchmarks show that it is also\n-- (much) faster on insertions and deletions when compared to a generic\n-- size-balanced set implementation (see "Data.Set").\n--\n--    * Chris Okasaki and Andy Gill,  \\"/Fast Mergeable Integer Maps/\\",\n--      Workshop on ML, September 1998, pages 77-86,\n--      <http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.37.5452>\n--\n--    * D.R. Morrison, \\"/PATRICIA -- Practical Algorithm To Retrieve Information Coded In Alphanumeric/\\",\n--      Journal of the ACM, 15(4), October 1968, pages 514-534.\n--\n-- Additionally, this implementation places bitmaps in the leaves of the tree.\n-- Their size is the natural size of a machine word (32 or 64 bits) and greatly\n-- reduces the memory footprint and execution times for dense sets, e.g. sets\n-- where it is likely that many values lie close to each other. The asymptotics\n-- are not affected by this optimization.\n--\n-----------------------------------------------------------------------------\n\nmodule Data.IntSet (\n            -- * Strictness properties\n            -- $strictness\n\n            -- * Set type\n#if !defined(TESTING)\n              IntSet          -- instance Eq,Show\n#else\n              IntSet(..)      -- instance Eq,Show\n#endif\n            , Key\n\n            -- * Construction\n            , empty\n            , singleton\n            , fromList\n            , fromAscList\n            , fromDistinctAscList\n\n            -- * Insertion\n            , insert\n\n            -- * Deletion\n            , delete\n\n            -- * Generalized insertion/deletion\n            , alterF\n\n            -- * Query\n            , member\n            , notMember\n            , lookupLT\n            , lookupGT\n            , lookupLE\n            , lookupGE\n            , IS.null\n            , size\n            , isSubsetOf\n            , isProperSubsetOf\n            , disjoint\n\n            -- * Combine\n            , union\n            , unions\n            , difference\n            , (\\\\)\n            , intersection\n\n            -- * Filter\n            , IS.filter\n            , partition\n\n            , takeWhileAntitone\n            , dropWhileAntitone\n            , spanAntitone\n\n            , split\n            , splitMember\n            , splitRoot\n\n            -- * Map\n            , IS.map\n            , mapMonotonic\n\n            -- * Folds\n            , IS.foldr\n            , IS.foldl\n            -- ** Strict folds\n            , foldr\'\n            , foldl\'\n            -- ** Legacy folds\n            , fold\n\n            -- * Min\\/Max\n            , findMin\n            , findMax\n            , deleteMin\n            , deleteMax\n            , deleteFindMin\n            , deleteFindMax\n            , maxView\n            , minView\n\n            -- * Conversion\n\n            -- ** List\n            , elems\n            , toList\n            , toAscList\n            , toDescList\n\n            -- * Debugging\n            , showTree\n            , showTreeWith\n\n#if defined(TESTING)\n            -- * Internals\n            , match\n#endif\n            ) where\n\nimport Data.IntSet.Internal as IS\n\n-- $strictness\n--\n-- This module satisfies the following strictness property:\n--\n-- * Key arguments are evaluated to WHNF\n--\n-- Here are some examples that illustrate the property:\n--\n-- > delete undefined s  ==  undefined\n'