b'-- | This module contains the core definitions related to ingredients.\n--\n-- Ingredients themselves are provided by other modules (usually under\n-- the @Test.Tasty.Ingredients.*@ hierarchy).\n--\n-- @since 0.8\nmodule Test.Tasty.Ingredients\n  ( Ingredient(..)\n  , tryIngredients\n  , ingredientOptions\n  , ingredientsOptions\n  , suiteOptions\n  , composeReporters\n  ) where\n\nimport Control.Monad\nimport Data.Proxy\nimport qualified Data.Foldable as F\n\nimport Test.Tasty.Core\nimport Test.Tasty.Run\nimport Test.Tasty.Options\nimport Test.Tasty.Options.Core\nimport Control.Concurrent.Async (concurrently)\n\n-- | \'Ingredient\'s make your test suite tasty.\n--\n-- Ingredients represent different actions that you can perform on your\n-- test suite. One obvious ingredient that you want to include is\n-- one that runs tests and reports the progress and results.\n--\n-- Another standard ingredient is one that simply prints the names of all\n-- tests.\n--\n-- Similar to test providers (see \'IsTest\'), every ingredient may specify\n-- which options it cares about, so that those options are presented to\n-- the user if the ingredient is included in the test suite.\n--\n-- An ingredient can choose, typically based on the \'OptionSet\', whether to\n-- run. That\'s what the \'Maybe\' is for. The first ingredient that agreed to\n-- run does its work, and the remaining ingredients are ignored. Thus, the\n-- order in which you arrange the ingredients may matter.\n--\n-- Usually, the ingredient which runs the tests is unconditional and thus\n-- should be placed last in the list. Other ingredients usually run only\n-- if explicitly requested via an option. Their relative order thus doesn\'t\n-- matter.\n--\n-- That\'s all you need to know from an (advanced) user perspective. Read\n-- on if you want to create a new ingredient.\n--\n-- There are two kinds of ingredients.\n--\n-- The first kind is \'TestReporter\'. If the ingredient that agrees to run\n-- is a \'TestReporter\', then tasty will automatically launch the tests and\n-- pass a \'StatusMap\' to the ingredient. All the ingredient needs to do\n-- then is to process the test results and probably report them to the user\n-- in some way (hence the name).\n--\n-- \'TestManager\' is the second kind of ingredient. It is typically used for\n-- test management purposes (such as listing the test names), although it\n-- can also be used for running tests (but, unlike \'TestReporter\', it has\n-- to launch the tests manually if it wants them to be run).  It is\n-- therefore more general than \'TestReporter\'. \'TestReporter\' is provided\n-- just for convenience.\n--\n-- The function\'s result should indicate whether all the tests passed.\n--\n-- In the \'TestManager\' case, it\'s up to the ingredient author to decide\n-- what the result should be. When no tests are run, the result should\n-- probably be \'True\'. Sometimes, even if some tests run and fail, it still\n-- makes sense to return \'True\'.\n--\n-- @since 0.4\ndata Ingredient\n  = TestReporter\n      [OptionDescription]\n      (OptionSet -> TestTree -> Maybe (StatusMap -> IO (Time -> IO Bool)))\n   -- ^ For the explanation on how the callback works, see the\n   -- documentation for \'launchTestTree\'.\n   --\n   -- @since 0.10\n  | TestManager\n      [OptionDescription]\n      (OptionSet -> TestTree -> Maybe (IO Bool))\n   -- ^ @since 0.4\n\n-- | Try to run an \'Ingredient\'.\n--\n-- If the ingredient refuses to run (usually based on the \'OptionSet\'),\n-- the function returns \'Nothing\'.\n--\n-- For a \'TestReporter\', this function automatically starts running the\n-- tests in the background.\ntryIngredient :: Ingredient -> OptionSet -> TestTree -> Maybe (IO Bool)\ntryIngredient (TestReporter _ report) opts testTree = do -- Maybe monad\n  reportFn <- report opts testTree\n  return $ launchTestTree opts testTree $ \\smap -> reportFn smap\ntryIngredient (TestManager _ manage) opts testTree =\n  manage opts testTree\n\n-- | Run the first \'Ingredient\' that agrees to be run.\n--\n-- If no one accepts the task, return \'Nothing\'. This is usually a sign of\n-- misconfiguration.\n--\n-- @since 0.4\ntryIngredients :: [Ingredient] -> OptionSet -> TestTree -> Maybe (IO Bool)\ntryIngredients ins opts tree =\n  msum $ map (\\i -> tryIngredient i opts tree) ins\n\n-- | Return the options which are relevant for the given ingredient.\n--\n-- Note that this isn\'t the same as simply pattern-matching on\n-- \'Ingredient\'. E.g. options for a \'TestReporter\' automatically include\n-- \'NumThreads\'.\n--\n-- @since 0.4\ningredientOptions :: Ingredient -> [OptionDescription]\ningredientOptions (TestReporter opts _) =\n  Option (Proxy :: Proxy NumThreads) : opts\ningredientOptions (TestManager opts _) = opts\n\n-- | Like \'ingredientOptions\', but folds over multiple ingredients.\n--\n-- @since 0.4\ningredientsOptions :: [Ingredient] -> [OptionDescription]\ningredientsOptions = uniqueOptionDescriptions . F.foldMap ingredientOptions\n\n-- | All the options relevant for this test suite. This includes the\n-- options for the test tree and ingredients, and the core options.\n--\n-- @since 0.4\nsuiteOptions :: [Ingredient] -> TestTree -> [OptionDescription]\nsuiteOptions ins tree = uniqueOptionDescriptions $\n  coreOptions ++\n  ingredientsOptions ins ++\n  treeOptions tree\n\n-- | Compose two \'TestReporter\' ingredients which are then executed\n-- in parallel. This can be useful if you want to have two reporters\n-- active at the same time, e.g., one which prints to the console and\n-- one which writes the test results to a file.\n--\n-- Be aware that it is not possible to use \'composeReporters\' with a \'TestManager\',\n-- it only works for \'TestReporter\' ingredients.\n--\n-- @since 0.11.2\ncomposeReporters :: Ingredient -> Ingredient -> Ingredient\ncomposeReporters (TestReporter o1 f1) (TestReporter o2 f2) =\n  TestReporter (o1 ++ o2) $ \\o t ->\n  case (f1 o t, f2 o t) of\n    (g, Nothing) -> g\n    (Nothing, g) -> g\n    (Just g1, Just g2) -> Just $ \\s -> do\n      (h1, h2) <- concurrently (g1 s) (g2 s)\n      return $ \\x -> fmap (uncurry (&&)) $ concurrently (h1 x) (h2 x)\ncomposeReporters _ _ = error "Only TestReporters can be composed"\n'