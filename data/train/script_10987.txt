b'\xef\xbb\xbf// UVa210 Concurrency Simulator\n// Rujia Liu\n#include<cstdio>\n#include<queue>\n#include<cstring>\n#include<cstdlib>\n#include<cctype>\nusing namespace std;\n\nconst int maxn = 1000;\n\ndeque<int> readyQ;\nqueue<int> blockQ;\nint n, quantum, c[5], var[26], ip[maxn]; // ip[pid]\xe6\x98\xaf\xe7\xa8\x8b\xe5\xba\x8fpid\xe7\x9a\x84\xe5\xbd\x93\xe5\x89\x8d\xe8\xa1\x8c\xe5\x8f\xb7\xe3\x80\x82\xe6\x89\x80\xe6\x9c\x89\xe7\xa8\x8b\xe5\xba\x8f\xe9\x83\xbd\xe5\xad\x98\xe5\x9c\xa8prog\xe6\x95\xb0\xe7\xbb\x84\xef\xbc\x8c\xe6\x9b\xb4\xe7\xb1\xbb\xe4\xbc\xbc\xe7\x9c\x9f\xe5\xae\x9e\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xef\xbc\x8c\xe4\xbb\xa3\xe7\xa0\x81\xe4\xb9\x9f\xe6\x9b\xb4\xe7\x9f\xad\nbool locked;\nchar prog[maxn][10];\n\nvoid run(int pid) {\n  int q = quantum;\n  while(q > 0) {\n    char *p = prog[ip[pid]];\n    switch(p[2]) {\n      case \'=\':\n        var[p[0] - \'a\'] = isdigit(p[5]) ? (p[4] - \'0\') * 10 + p[5] - \'0\' : p[4] - \'0\';\n        q -= c[0];\n        break;\n      case \'i\': // print\n        printf("%d: %d\\n", pid+1, var[p[6] - \'a\']);\n        q -= c[1];\n        break;\n      case \'c\': // lock\n        if(locked) { blockQ.push(pid); return; }\n        locked = true;\n        q -= c[2];\n        break;\n      case \'l\': // unlock\n        locked = false;\n        if(!blockQ.empty()) {\n          int pid2 = blockQ.front(); blockQ.pop();\n          readyQ.push_front(pid2);\n        }\n        q -= c[3];\n        break;\n      case \'d\': // end\n        return;\n    }\n    ip[pid]++;\n  }\n  readyQ.push_back(pid);\n}\n\nint main() {\n  int T;\n  scanf("%d", &T);\n  while(T--) {\n    scanf("%d %d %d %d %d %d %d\\n", &n, &c[0], &c[1], &c[2], &c[3], &c[4], &quantum);\n    memset(var, 0, sizeof(var));\n\n    int line = 0;\n    for(int i = 0; i < n; i++) {\n      fgets(prog[line++], maxn, stdin);\n      ip[i] = line - 1;\n      while(prog[line - 1][2] != \'d\')\n        fgets(prog[line++], maxn, stdin);\n      readyQ.push_back(i);\n    }\n\n    locked = false;\n    while(!readyQ.empty()) {\n      int pid = readyQ.front(); readyQ.pop_front();\n      run(pid);\n    }\n    if(T) printf("\\n");\n  }\n  return 0;\n}\n'