b'package com.rd.draw.controller;\n\nimport android.graphics.Canvas;\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\nimport android.view.MotionEvent;\nimport com.rd.animation.data.Value;\nimport com.rd.animation.type.AnimationType;\nimport com.rd.draw.data.Indicator;\nimport com.rd.draw.drawer.Drawer;\nimport com.rd.utils.CoordinatesUtils;\n\npublic class DrawController {\n\n\tprivate Value value;\n\tprivate Drawer drawer;\n\tprivate Indicator indicator;\n\tprivate ClickListener listener;\n\n\tpublic interface ClickListener {\n\n\t\tvoid onIndicatorClicked(int position);\n\t}\n\n\tpublic DrawController(@NonNull Indicator indicator) {\n\t\tthis.indicator = indicator;\n\t\tthis.drawer = new Drawer(indicator);\n\t}\n\n\tpublic void updateValue(@Nullable Value value) {\n        this.value = value;\n    }\n\n\tpublic void setClickListener(@Nullable ClickListener listener) {\n\t\tthis.listener = listener;\n\t}\n\n\tpublic void touch(@Nullable MotionEvent event) {\n\t\tif (event == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tswitch (event.getAction()) {\n\t\t\tcase MotionEvent.ACTION_UP:\n\t\t\t\tonIndicatorTouched(event.getX(), event.getY());\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\t}\n\n\tprivate void onIndicatorTouched(float x, float y) {\n\t\tif (listener != null) {\n\t\t\tint position = CoordinatesUtils.getPosition(indicator, x, y);\n\t\t\tif (position >= 0) {\n\t\t\t\tlistener.onIndicatorClicked(position);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic void draw(@NonNull Canvas canvas) {\n        int count = indicator.getCount();\n\n        for (int position = 0; position < count; position++) {\n            int coordinateX = CoordinatesUtils.getXCoordinate(indicator, position);\n            int coordinateY = CoordinatesUtils.getYCoordinate(indicator, position);\n            drawIndicator(canvas, position, coordinateX, coordinateY);\n        }\n    }\n\n    private void drawIndicator(\n            @NonNull Canvas canvas,\n            int position,\n            int coordinateX,\n            int coordinateY) {\n\n        boolean interactiveAnimation = indicator.isInteractiveAnimation();\n        int selectedPosition = indicator.getSelectedPosition();\n        int selectingPosition = indicator.getSelectingPosition();\n        int lastSelectedPosition = indicator.getLastSelectedPosition();\n\n        boolean selectedItem = !interactiveAnimation && (position == selectedPosition || position == lastSelectedPosition);\n        boolean selectingItem = interactiveAnimation && (position == selectedPosition || position == selectingPosition);\n        boolean isSelectedItem = selectedItem | selectingItem;\n        drawer.setup(position, coordinateX, coordinateY);\n\n        if (value != null && isSelectedItem) {\n            drawWithAnimation(canvas);\n        } else {\n            drawer.drawBasic(canvas, isSelectedItem);\n        }\n    }\n\n    private void drawWithAnimation(@NonNull Canvas canvas) {\n        AnimationType animationType = indicator.getAnimationType();\n        switch (animationType) {\n            case NONE:\n                drawer.drawBasic(canvas, true);\n                break;\n\n            case COLOR:\n                drawer.drawColor(canvas, value);\n                break;\n\n            case SCALE:\n                drawer.drawScale(canvas, value);\n                break;\n\n            case WORM:\n                drawer.drawWorm(canvas, value);\n                break;\n\n            case SLIDE:\n                drawer.drawSlide(canvas, value);\n                break;\n\n            case FILL:\n                drawer.drawFill(canvas, value);\n                break;\n\n            case THIN_WORM:\n                drawer.drawThinWorm(canvas, value);\n                break;\n\n            case DROP:\n                drawer.drawDrop(canvas, value);\n                break;\n\n            case SWAP:\n                drawer.drawSwap(canvas, value);\n                break;\n\n            case SCALE_DOWN:\n                drawer.drawScaleDown(canvas, value);\n                break;\n        }\n    }\n}\n'