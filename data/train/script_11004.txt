b'{-# LANGUAGE OverloadedStrings #-}\n\n-- | Document datalog\n\nmodule Pdf.Document.Catalog\n(\n  Catalog,\n  catalogPageNode\n)\nwhere\n\nimport Pdf.Core.Object.Util\nimport Pdf.Core.Exception\nimport Pdf.Core.Util\n\nimport Pdf.Document.Pdf\nimport Pdf.Document.Internal.Types\nimport Pdf.Document.Internal.Util\n\nimport qualified Data.HashMap.Strict as HashMap\n\n-- | Get root node of page tree\ncatalogPageNode :: Catalog -> IO PageNode\ncatalogPageNode (Catalog pdf _ dict) = do\n  ref <- sure $\n    (HashMap.lookup "Pages" dict >>= refValue)\n    `notice` "Pages should be an indirect reference"\n  obj <- lookupObject pdf ref >>= deref pdf\n  node <- sure $ dictValue obj `notice` "Pages should be a dictionary"\n  ensureType "Pages" node\n  return (PageNode pdf ref node)\n'