b'{-# LANGUAGE\n    DeriveDataTypeable\n  , DeriveGeneric\n  #-}\nmodule Type.UserSignupError where\n\nimport Data.Aeson\nimport Data.JSON.Schema\nimport Data.Typeable\nimport GHC.Generics\nimport Generics.Generic.Aeson\nimport Generics.XmlPickler\nimport Rest.Error\nimport Text.XML.HXT.Arrow.Pickle\n\ndata UserSignupError = InvalidPassword | InvalidUserName\n  deriving (Eq, Generic, Ord, Show, Typeable)\n\ninstance XmlPickler UserSignupError where xpickle   = gxpickle\ninstance JSONSchema UserSignupError where schema    = gSchema\ninstance FromJSON   UserSignupError where parseJSON = gparseJson\ninstance ToJSON     UserSignupError where toJSON    = gtoJson\n\ninstance ToResponseCode UserSignupError where\n  toResponseCode _ = 400\n'