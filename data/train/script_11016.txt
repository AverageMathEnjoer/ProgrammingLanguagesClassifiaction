b'# simulation of simple ptolemaic epicycles model to show retrograde motion\n\nlibrary(rethinking)\nlibrary(animation)\n\n# two body version\n# earth at center\n# mars orbits an orbit around earth\n\nmy_circle <- function(x=0,y=0,r=1,angle=0,...) {\n    a <- seq(angle, angle + 2 * pi, length = 360)\n    lines( r*cos(a)+x , r*sin(a)+y , ... )\n}\n# plot(NULL,xlim=c(-1,1),ylim=c(-1,1)); my_circle(0,0,0.5,lty=2)\np2c <- function(a) c(cos(a) , sin(a))\n\n# need updating for radial position of (1) mars epicycle center (2) mars itself\n\n\nblank()\n\npar(bg = \'black\')\nplot(NULL,xlim=c(-1,1),ylim=c(-1,1),bty="n",xaxt="n",yaxt="n",xlab="",ylab="")\n\ndraw_ptolemy <- function(tx,history=FALSE,r1=1,r2=0.2) {\n\n    if ( history==TRUE ) {\n        xs <- rep(NA,tx)\n        ys <- rep(NA,tx)\n        for ( ttx in 1:tx ) {\n            xy <- p2c( k1[ttx] )*r1\n            xy2 <- xy + p2c( k2[ttx] )*r2\n            xs[ttx] <- xy2[1]\n            ys[ttx] <- xy2[2]\n        }\n        lines( xs , ys , lty=1 , lwd=2 , col=2 )\n    }\n\n    my_circle(0,0,r=r1,lty=2,lwd=0.5,col="white")\n\n    xy <- p2c( k1[tx] )*r1\n    my_circle( xy[1] , xy[2] , angle=k1[tx] , r=r2 , lty=2 , lwd=0.5 , col="white" )\n\n    xy2 <- xy + p2c( k2[tx] )*r2\n    points( xy2[1] , xy2[2] , pch=16 , col=2 , cex=2 ) # mars\n    points( 0 , 0 , pch=16 , col=4 , cex=4 ) # earth\n}\n\nmpts <- 300\nk1 <- seq( 0 , 2 * pi , length = mpts)\nmu <- 2\nk2 <- seq( 0 , mu * 2 * pi , length = mpts )\n\nani.record(reset = TRUE)  # clear history before recording\nfor ( i in 1:length(k1) ) {\n    par(bg = \'black\')\n    par(xpd=NA)\n    plot(c(-1, 1), c(-1, 1), type = "n", asp = 1, axes = FALSE, \n            xlab = "", ylab = "")\n    draw_ptolemy( i , history=TRUE , r1=0.77 , r2=0.5 )\n    ani.record()  # record the current frame\n    par(bg = \'white\')\n}\n\noopts = ani.options(interval = 0.01)\nani.replay()\n\n# ani.saveqz(dpi=150)\n\n# convert -alpha remove -background white -delay 5 -loop 0 frame*.png geocentric.gif\n\n# convert -delay 5 geocentric.gif geocentric.gif\n\n############################################\n# now kopernican with earth and mars\n\nblank(w=3)\n\npar(bg = \'black\')\nplot(NULL,xlim=c(-3,1),ylim=c(-1,1),bty="n",xaxt="n",yaxt="n",xlab="",ylab="")\n\n\nkop_drawtime <- function(tx,history=FALSE,r1=0.5,r2=1,r3=7) {\n\n    my_circle(0,0,r=r1,lty=2,lwd=0.5,col="white")\n    my_circle(0,0,r=r2,lty=2,lwd=0.5,col="white")\n\n    # earth\n    xy <- p2c( k1[tx] )*r1\n    \n    # mars\n    xy2 <- p2c( k2[tx] )*r2\n    \n    # line between earth-mars\n    lines( c(xy[1],xy2[1]) , c(xy[2],xy2[2]) , lwd=2 , col="white" )\n\n    points( xy2[1] , xy2[2] , pch=16 , col=2 , cex=2 ) # mars\n    points( xy[1] , xy[2] , pch=16 , col=4 , cex=4 ) # earth\n\n    # sky\n    my_circle(0,0,r=r3,lty=2,lwd=0.5,col="white")\n\n    # now need line projecting out to sky "orbit" with same slope as line btw earth-mars\n    # equation for the sky is x^2 + y^2 = r3^2\n    # line has slope m = (xy2[2]-xy[2])/(xy2[1]-xy[1])\n    # y1 - y2 = m*(x1 - x2)\n    # let (X,Y) be our solution points, then:\n    # Y - xy[2] = m*(X - xy[1]) , X^2 + Y^2 = r^2\n    # will have quadratic form\n    # X = -((m (-m x + y) + Sqrt[(1 + m^2) r^2 - (-m x + y)^2])/(1 + m^2))\n    # Y = (y - m (x + Sqrt[(1 + m^2) r^2 - (-m x + y)^2]))/(1 + m^2)\n    m <- (xy2[2]-xy[2])/(xy2[1]-xy[1])\n    x <- xy2[1]\n    y <- xy2[2]\n    X <- -((m*(-m*x + y) + sqrt((1 + m^2)*r3^2 - (-m*x + y)^2))/(1 + m^2))\n    Y <- (y - m*(x + sqrt((1 + m^2)*r3^2 - (-m*x + y)^2)))/(1 + m^2)\n    if ( x < 0 ) lines( c(X,x) , c(Y,y) , lty=2 , col="white" )\n\n    # ghost mars on sky\n    if ( x < 0 ) points( X , Y , pch=1 , lwd=3 , col=2 , cex=2 ) # mars\n\n}\n\nmpts <- 300\nk2 <- seq( pi/2 , 2 * pi + pi/2 , length = mpts)\nmu <- 2\nk1 <- seq( 0 , mu * 2 * pi , length = mpts )\n\nani.record(reset = TRUE)  # clear history before recording\nfor ( i in 1:length(k1) ) {\n    par(bg = \'black\')\n    par(xpd=NA)\n    plot(c(-7, 2), c(-2, 2), type = "n", asp = 1, axes = FALSE, \n            xlab = "", ylab = "")\n    kop_drawtime( i , history=TRUE , r1=0.8 , r2=1.2 , r3=7.5 )\n    ani.record()  # record the current frame\n    par(bg = \'white\')\n}\n\noopts = ani.options(interval = 0.03)\nani.replay()\n\n# ani.saveqz(dpi=120)\n\n# convert -alpha remove -background white -delay 5 -loop 0 frame*.png kopernicus.gif\n'