b'{-# LANGUAGE OverloadedStrings #-}\nmodule Devices.Yeelight where\n\nimport System.IO (hPutStr, hClose)\nimport System.Process.Typed\nimport Data.Int\nimport qualified Data.ByteString.Lazy.Char8 as L8\n\ntype Bulb = String\n\nbulbs :: [Bulb]\nbulbs = [ "/home/rasiel/Projects/yeelight-shell-scripts/yeelight-brightness.sh 0 "\n        , "/home/rasiel/Projects/yeelight-shell-scripts/2/yeelight-brightness.sh 0 " ]\n\n\nsetBrightness :: Int16 -> Bulb -> IO ()\nsetBrightness brightness bulb = do\n    let bulbCommand = shell . mappend bulb . show $ brightness\n    (_, _, err) <- readProcess bulbCommand\n    -- print err\n    return ()\n\nbrightnessStep = 10\n\nincreaseBrightness :: Int16 -> IO Int16\nincreaseBrightness prev = do\n    let newBrightness = min 100 (max 1 (prev + brightnessStep))\n    print newBrightness\n    mapM_ (setBrightness newBrightness) bulbs\n    return newBrightness\n\n\ndecreaseBrightness :: Int16 -> IO Int16\ndecreaseBrightness prev = do\n    let newBrightness = min 100 (max 1 (prev - brightnessStep))\n    print newBrightness\n    mapM_ (setBrightness newBrightness) bulbs\n    return newBrightness\n\n'