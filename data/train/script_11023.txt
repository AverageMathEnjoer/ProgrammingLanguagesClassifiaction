b'package co.joebirch.composeplayground.animation\n\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.dp\nimport co.joebirch.composeplayground.ComposableLayout\n\nobject TransitionDemoView : ComposableLayout {\n\n    @Composable\n    override fun build() {\n        Column(\n            modifier = Modifier.fillMaxSize().padding(32.dp),\n            verticalArrangement = Arrangement.SpaceEvenly,\n            horizontalAlignment = Alignment.CenterHorizontally\n        ) {\n\n        }\n    }\n    /*\n    val sizeState = FloatPropKey()\n\n    enum class AnimationType {\n        SNAP, TWEEN, PHYSICS, REPEATABLE, KEYFRAME\n    }\n\n    @Composable\n    override fun build() {\n        Column(\n            modifier = Modifier.fillMaxSize().padding(32.dp),\n            verticalArrangement = Arrangement.SpaceEvenly,\n            horizontalAlignment = Alignment.CenterHorizontally\n        ) {\n            val animationType = remember { mutableStateOf(AnimationType.SNAP) }\n            val toState = remember { mutableStateOf(CircleStatus.Shrinking) }\n            val transitionDef = sizeTransitionDefinition(animationType.value)\n\n            Column {\n                Row(\n                    modifier = Modifier.selectable(selected =\n                    animationType.value == AnimationType.SNAP, onClick = {\n                        animationType.value = AnimationType.SNAP\n                    })\n                ) {\n                    RadioButton(selected = animationType.value == AnimationType.SNAP, onClick = {\n                        animationType.value = AnimationType.SNAP\n                    })\n                    Text(text = "Snap")\n                }\n\n                Row(\n                    modifier = Modifier.selectable(selected =\n                    animationType.value == AnimationType.TWEEN, onClick = {\n                        animationType.value = AnimationType.TWEEN\n                    })\n                ) {\n                    RadioButton(selected = animationType.value == AnimationType.TWEEN, onClick = {\n                        animationType.value = AnimationType.TWEEN\n                    })\n                    Text(text = "Tween")\n                }\n\n                Row(\n                    modifier = Modifier.selectable(selected =\n                    animationType.value == AnimationType.PHYSICS, onClick = {\n                        animationType.value = AnimationType.PHYSICS\n                    })\n                ) {\n                    RadioButton(selected = animationType.value == AnimationType.PHYSICS, onClick = {\n                        animationType.value = AnimationType.PHYSICS\n                    })\n                    Text(text = "Physics")\n                }\n\n                Row(\n                    modifier = Modifier.selectable(selected =\n                    animationType.value == AnimationType.REPEATABLE, onClick = {\n                        animationType.value = AnimationType.REPEATABLE\n                    })\n                ) {\n                    RadioButton(\n                        selected = animationType.value == AnimationType.REPEATABLE,\n                        onClick = {\n                            animationType.value = AnimationType.REPEATABLE\n                        })\n                    Text(text = "Repeatable")\n                }\n\n                Row(\n                    modifier = Modifier.selectable(selected =\n                    animationType.value == AnimationType.KEYFRAME, onClick = {\n                        animationType.value = AnimationType.KEYFRAME\n                    })\n                ) {\n                    RadioButton(\n                        selected = animationType.value == AnimationType.KEYFRAME,\n                        onClick = {\n                            animationType.value = AnimationType.KEYFRAME\n                        })\n                    Text(text = "Keyframe")\n                }\n            }\n\n            Button(onClick = {\n                if (toState.value == CircleStatus.Shrinking) {\n                    toState.value = CircleStatus.Growing\n                } else {\n                    toState.value = CircleStatus.Shrinking\n                }\n            }, modifier = Modifier.padding(16.dp)) {\n                Text("Animate!")\n            }\n            Box(\n                modifier = Modifier.fillMaxSize()\n                    .align(Alignment.CenterHorizontally)\n            ) {\n                val state = transition(\n                    definition = transitionDef,\n                    toState = toState.value\n                )\n                Canvas(modifier = Modifier.preferredSize(80.dp)) {\n                    drawCircle(Color.Red, state[sizeState])\n                }\n            }\n        }\n    }\n\n    enum class CircleStatus {\n        Growing,\n        Shrinking\n    }\n\n    private fun sizeTransitionDefinition(animationType: AnimationType): TransitionDefinition<CircleStatus> {\n        return transitionDefinition {\n            state(CircleStatus.Shrinking) { this[sizeState] = 50f }\n            state(CircleStatus.Growing) { this[sizeState] = 175f }\n\n            when (animationType) {\n                AnimationType.SNAP -> {\n                    snapTransition(CircleStatus.Shrinking to CircleStatus.Growing)\n                    snapTransition(CircleStatus.Growing to CircleStatus.Shrinking)\n                }\n                AnimationType.REPEATABLE -> {\n                    transition(fromState = CircleStatus.Shrinking, toState = CircleStatus.Growing) {\n                        sizeState using repeatable(\n                            iterations = Infinite,\n                            animation = tween(\n                                easing = LinearEasing,\n                                durationMillis = 1000\n                            )\n                        )\n                    }\n                    transition(fromState = CircleStatus.Growing, toState = CircleStatus.Shrinking) {\n                        sizeState using repeatable(\n                            iterations = Infinite,\n                            animation = tween(\n                                easing = LinearEasing,\n                                durationMillis = 1000\n                            ),\n                        )\n                    }\n                }\n                AnimationType.PHYSICS -> {\n                    transition(fromState = CircleStatus.Shrinking, toState = CircleStatus.Growing) {\n                        sizeState using spring(\n                            stiffness = 5f,\n                            dampingRatio = 5f\n                        )\n                    }\n                    transition(fromState = CircleStatus.Growing, toState = CircleStatus.Shrinking) {\n                        sizeState using spring(\n                            stiffness = 5f,\n                            dampingRatio = 5f\n                        )\n                    }\n                }\n                AnimationType.TWEEN -> {\n                    transition(fromState = CircleStatus.Shrinking, toState = CircleStatus.Growing) {\n                        sizeState using tween(\n                            durationMillis = 2000,\n                            easing = FastOutLinearInEasing\n                        )\n                    }\n                    transition(fromState = CircleStatus.Growing, toState = CircleStatus.Shrinking) {\n                        sizeState using tween(\n                            durationMillis = 2000,\n                            easing = LinearOutSlowInEasing,\n                            delayMillis = 200\n                        )\n                    }\n                }\n                AnimationType.KEYFRAME -> {\n                    transition(fromState = CircleStatus.Shrinking, toState = CircleStatus.Growing) {\n                        sizeState using keyframes {\n                            50f at 200\n                            60f at 2200\n                            175f at 2500\n                        }\n                    }\n                    transition(fromState = CircleStatus.Growing, toState = CircleStatus.Shrinking) {\n                        sizeState using keyframes {\n                            175f at 200\n                            160f at 300\n                            100f at 750\n                            80f at 700\n                            50f at 500\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n     */\n}'