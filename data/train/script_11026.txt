b'#include "stdafx.h"\n#include "Win32ModTreeDialogBase.h"\n#include "../libStringConverter/convert.h"\n#include <InternalBundleReplacer.h>\n#include <WindowsX.h>\n\nstatic std::string MakeAssetsReplacerDescription(AssetsReplacer *pReplacer)\n{\n\tswitch (pReplacer->GetType())\n\t{\n\tcase AssetsReplacement_AddOrModify:\n\t\treturn std::string("Add/Replace PathID ") + std::to_string((int64_t)reinterpret_cast<AssetsEntryReplacer*>(pReplacer)->GetPathID());\n\tcase AssetsReplacement_Remove:\n\t\treturn std::string("Remove PathID ") + std::to_string((int64_t)reinterpret_cast<AssetsEntryReplacer*>(pReplacer)->GetPathID());\n\tcase AssetsReplacement_Dependencies:\n\t\treturn std::string("Modify dependencies");\n\tdefault:\n\t\tassert(false);\n\t\treturn std::string("(??)");\n\t}\n}\nvoid Win32ModTreeDialogBase::addTreeViewNode_AssetsReplacer(HTREEITEM hParent, VisibleReplacerEntry &entry)\n{\n\tTVINSERTSTRUCT insert = {};\n\tinsert.hParent = hParent;\n\tinsert.itemex.state = 0;\n\tinsert.itemex.stateMask = 0xFF;\n\tinsert.itemex.hwnd = NULL;\n\tinsert.itemex.hItem = NULL;\n\tinsert.itemex.mask = TVIF_CHILDREN | TVIF_STATE | TVIF_TEXT;\n\tinsert.hInsertAfter = TVI_FIRST;\n\tstd::string replacerDesc = MakeAssetsReplacerDescription(reinterpret_cast<AssetsReplacer*>(entry.pReplacer.get()));\n\tauto replacerDescT = unique_MultiByteToTCHAR(replacerDesc.c_str());\n\tinsert.itemex.pszText = replacerDescT.get();\n\tinsert.itemex.cchTextMax = 0;\n\tinsert.itemex.cChildren = 0;\n\tentry.treeItem = (uintptr_t)TreeView_InsertItem(hTreeModifications, &insert);\n}\nstatic std::string MakeBundleReplacerDescription(BundleReplacer *pReplacer)\n{\n\tconst char *_origName = pReplacer->GetOriginalEntryName();\n\tconst char *_newName = pReplacer->GetEntryName();\n\tstd::string origName(_origName ? _origName : "");\n\tstd::string newName(_newName ? _newName : "");\n\tswitch (pReplacer->GetType())\n\t{\n\tcase BundleReplacement_Rename:\n\t\treturn std::string("Rename ") + origName + " to " + newName;\n\tcase BundleReplacement_AddOrModify:\n\t\tif (newName.empty())\n\t\t\treturn std::string("Modify and rename ") + origName;\n\t\tif (origName.empty())\n\t\t\treturn std::string("Modify/create ") + newName;\n\t\treturn std::string("Modify and rename ") + origName + " to " + newName;\n\tcase BundleReplacement_Remove:\n\t\treturn std::string("Remove ") + origName;\n\tdefault:\n\t\tassert(false);\n\t\treturn std::string("(??) ") + origName;\n\t}\n}\nvoid Win32ModTreeDialogBase::addTreeViewNode_BundleReplacer(HTREEITEM hParent, VisibleReplacerEntry &entry)\n{\n\tTVINSERTSTRUCT insert = {};\n\tinsert.hParent = hParent;\n\tinsert.itemex.state = 0;\n\tinsert.itemex.stateMask = 0xFF;\n\tinsert.itemex.hwnd = NULL;\n\tinsert.itemex.hItem = NULL;\n\tinsert.itemex.mask = TVIF_CHILDREN | TVIF_STATE | TVIF_TEXT;\n\tinsert.hInsertAfter = TVI_FIRST;\n\tstd::string replacerDesc = MakeBundleReplacerDescription(reinterpret_cast<BundleReplacer*>(entry.pReplacer.get()));\n\tauto replacerDescT = unique_MultiByteToTCHAR(replacerDesc.c_str());\n\tinsert.itemex.pszText = replacerDescT.get();\n\tinsert.itemex.cchTextMax = 0;\n\tinsert.itemex.cChildren = 0;\n\tentry.treeItem = (uintptr_t)TreeView_InsertItem(hTreeModifications, &insert);\n}\nvoid Win32ModTreeDialogBase::addTreeViewNode_ResourcesReplacer(HTREEITEM hParent, VisibleReplacerEntry& entry)\n{\n\tBundleReplacer* pReplacer = reinterpret_cast<BundleReplacer*>(entry.pReplacer.get());\n\tauto* pResourcesReplacer = dynamic_cast<BundleEntryModifierByResources*>(pReplacer);\n\tif (pResourcesReplacer == nullptr)\n\t{\n\t\tassert(false);\n\t\treturn;\n\t}\n\tTVINSERTSTRUCT insert = {};\n\tinsert.hParent = hParent;\n\tinsert.itemex.state = 0;\n\tinsert.itemex.stateMask = 0xFF;\n\tinsert.itemex.hwnd = NULL;\n\tinsert.itemex.hItem = NULL;\n\tinsert.itemex.mask = TVIF_CHILDREN | TVIF_STATE | TVIF_TEXT;\n\tinsert.hInsertAfter = TVI_FIRST;\n\tinsert.itemex.pszText = const_cast<TCHAR*>(\n\t\tpResourcesReplacer->RequiresEntryReader() ? TEXT("Modify") : TEXT("Add or replace")\n\t\t);\n\tinsert.itemex.cchTextMax = 0;\n\tinsert.itemex.cChildren = 0;\n\tentry.treeItem = (uintptr_t)TreeView_InsertItem(hTreeModifications, &insert);\n}\nvoid Win32ModTreeDialogBase::updateTreeViewNode_File(HTREEITEM hParent, VisibleFileEntry &file, bool showReplacers)\n{\n\tif (file.treeViewEntry == NULL)\n\t{\n\t\tsize_t pathLen;\n\t\tauto tcPath = unique_MultiByteToTCHAR(file.pathNull ? file.newName.c_str() : file.pathOrName.c_str(), pathLen);\n\t\tTVINSERTSTRUCT insert = {};\n\t\tinsert.hParent = NULL;\n\t\tinsert.itemex.state = 0;\n\t\tinsert.itemex.stateMask = 0xFF;\n\t\tinsert.itemex.hwnd = NULL;\n\t\tinsert.itemex.hItem = NULL;\n\t\tinsert.itemex.mask = TVIF_CHILDREN | TVIF_STATE | TVIF_TEXT;\n\t\tinsert.itemex.pszText = tcPath.get();\n\t\tinsert.itemex.cchTextMax = (int)((pathLen + 1) & 0x7FFFFFFF);\n\t\tinsert.hInsertAfter = TVI_FIRST;\n\t\tinsert.hParent = hParent;\n\t\tinsert.itemex.cChildren = ((showReplacers && file.replacers.size() > 0) || (file.fileType == FileContext_Bundle && file.subFiles.size() > 0))\n\t\t\t                                   ? 1\n\t\t\t                                   : 0;\n\t\tfile.treeViewEntry = (uintptr_t)TreeView_InsertItem(hTreeModifications, &insert);\n\t}\n\tswitch (file.fileType)\n\t{\n\tcase FileContext_Bundle:\n\t\tfor (size_t _i = file.subFiles.size(); _i > 0; --_i)\n\t\t{\n\t\t\tsize_t i = _i - 1;\n\t\t\tupdateTreeViewNode_File((HTREEITEM)file.treeViewEntry, file.subFiles[i], showReplacers);\n\t\t}\n\t\tif (showReplacers)\n\t\t\tfor (size_t _i = file.replacers.size(); _i > 0; --_i)\n\t\t\t{\n\t\t\t\tsize_t i = _i - 1;\n\t\t\t\tif (file.replacers[i].treeItem == NULL)\n\t\t\t\t\taddTreeViewNode_BundleReplacer((HTREEITEM)file.treeViewEntry, file.replacers[i]);\n\t\t\t}\n\t\tbreak;\n\tcase FileContext_Assets:\n\t\tif (showReplacers)\n\t\t\tfor (size_t _i = file.replacers.size(); _i > 0; --_i)\n\t\t\t{\n\t\t\t\tsize_t i = _i - 1;\n\t\t\t\tif (file.replacers[i].treeItem == NULL)\n\t\t\t\t\taddTreeViewNode_AssetsReplacer((HTREEITEM)file.treeViewEntry, file.replacers[i]);\n\t\t\t}\n\t\tbreak;\n\tcase FileContext_Resources:\n\t\tif (showReplacers && file.replacers.size() == 1 && file.replacers[0].treeItem == NULL)\n\t\t{\n\t\t\taddTreeViewNode_ResourcesReplacer((HTREEITEM)file.treeViewEntry, file.replacers[0]);\n\t\t}\n\t\tbreak;\n\tdefault:\n\t\tassert(false);\n\t\tbreak;\n\t}\n}\n\nvoid Win32ModTreeDialogBase::UpdateModsTree(bool showReplacers)\n{\n\tsize_t numBundle = 0, numAssets = 0, numResources = 0;\n\tfor (size_t i = 0; i < this->visibleFiles.size(); i++)\n\t{\n\t\tswitch (this->visibleFiles[i].fileType)\n\t\t{\n\t\tcase FileContext_Bundle:\n\t\t\tnumBundle++;\n\t\t\tbreak;\n\t\tcase FileContext_Assets:\n\t\t\tnumAssets++;\n\t\t\tbreak;\n\t\tcase FileContext_Resources:\n\t\t\tnumResources++;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tassert(false);\n\t\t}\n\t}\n\n\tTVINSERTSTRUCT insert = {};\n\tinsert.hParent = NULL;\n\tinsert.itemex.state = 0;\n\tinsert.itemex.stateMask = 0xFF;\n\tinsert.itemex.hwnd = NULL;\n\tif (this->bundleBaseEntry == NULL)\n\t{\n\t\tinsert.itemex.hItem = NULL;\n\t\tinsert.itemex.mask = TVIF_CHILDREN | TVIF_STATE | TVIF_TEXT;\n\t\tinsert.itemex.pszText = const_cast<TCHAR*>(TEXT("Affected bundles"));\n\t\tinsert.hInsertAfter = TVI_FIRST;\n\t\tinsert.itemex.cchTextMax = (int)_tcslen(insert.itemex.pszText);\n\t\tinsert.itemex.cChildren = numBundle ? 1 : 0;\n\t\tthis->bundleBaseEntry = TreeView_InsertItem(hTreeModifications, &insert);\n\t}\n\telse\n\t{\n\t\tinsert.itemex.hItem = this->bundleBaseEntry;\n\t\tinsert.itemex.mask = TVIF_CHILDREN;\n\t\tinsert.itemex.cChildren = numBundle ? 1 : 0;\n\t\tTreeView_SetItem(hTreeModifications, &insert.itemex);\n\t}\n\t\n\tif (this->assetsBaseEntry == NULL)\n\t{\n\t\tinsert.itemex.hItem = NULL;\n\t\tinsert.itemex.mask = TVIF_CHILDREN | TVIF_STATE | TVIF_TEXT;\n\t\tinsert.itemex.pszText = const_cast<TCHAR*>(TEXT("Affected assets files"));\n\t\tinsert.hInsertAfter = TVI_LAST;\n\t\tinsert.itemex.cchTextMax = (int)_tcslen(insert.itemex.pszText);\n\t\tinsert.itemex.cChildren = numAssets ? 1 : 0;\n\t\tthis->assetsBaseEntry = TreeView_InsertItem(hTreeModifications, &insert);\n\t}\n\telse\n\t{\n\t\tinsert.itemex.hItem = this->assetsBaseEntry;\n\t\tinsert.itemex.mask = TVIF_CHILDREN;\n\t\tinsert.itemex.cChildren = numAssets ? 1 : 0;\n\t\tTreeView_SetItem(hTreeModifications, &insert.itemex);\n\t}\n\n\tif (this->resourcesBaseEntry == NULL)\n\t{\n\t\tinsert.itemex.hItem = NULL;\n\t\tinsert.itemex.mask = TVIF_CHILDREN | TVIF_STATE | TVIF_TEXT;\n\t\tinsert.itemex.pszText = const_cast<TCHAR*>(TEXT("Affected resource files"));\n\t\tinsert.hInsertAfter = TVI_LAST;\n\t\tinsert.itemex.cchTextMax = (int)_tcslen(insert.itemex.pszText);\n\t\tinsert.itemex.cChildren = numResources ? 1 : 0;\n\t\tthis->resourcesBaseEntry = TreeView_InsertItem(hTreeModifications, &insert);\n\t}\n\telse\n\t{\n\t\tinsert.itemex.hItem = this->resourcesBaseEntry;\n\t\tinsert.itemex.mask = TVIF_CHILDREN;\n\t\tinsert.itemex.cChildren = numResources ? 1 : 0;\n\t\tTreeView_SetItem(hTreeModifications, &insert.itemex);\n\t}\n\n\t\n\tfor (size_t _i = this->visibleFiles.size(); _i > 0; --_i)\n\t{\n\t\tsize_t i = _i - 1;\n\t\tswitch (this->visibleFiles[i].fileType)\n\t\t{\n\t\tcase FileContext_Bundle:\n\t\t\tupdateTreeViewNode_File(this->bundleBaseEntry, this->visibleFiles[i], showReplacers);\n\t\t\tbreak;\n\t\tcase FileContext_Assets:\n\t\t\tupdateTreeViewNode_File(this->assetsBaseEntry, this->visibleFiles[i], showReplacers);\n\t\t\tbreak;\n\t\tcase FileContext_Resources:\n\t\t\tupdateTreeViewNode_File(this->resourcesBaseEntry, this->visibleFiles[i], showReplacers);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tassert(false);\n\t\t}\n\t}\n}\n'