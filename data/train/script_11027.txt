b'{-# LANGUAGE DataKinds #-}\n{-# LANGUAGE DeriveGeneric #-}\n{-# LANGUAGE OverloadedStrings #-}\n{-# LANGUAGE QuasiQuotes #-}\n{-# LANGUAGE RecordWildCards #-}\n{-# LANGUAGE TypeFamilies #-}\n\n-- | [Okta OIDC & OAuth2 API](https://developer.okta.com/docs/reference/api/oidc/)\nmodule Network.OAuth2.Provider.Okta where\n\nimport Control.Monad.IO.Class\nimport Control.Monad.Trans.Except\nimport Data.Aeson\nimport Data.Aeson qualified as Aeson\nimport Data.Bifunctor\nimport Data.ByteString.Contrib\nimport Data.Map.Strict qualified as Map\nimport Data.Set qualified as Set\nimport Data.Text.Lazy (Text)\nimport Data.Time\nimport GHC.Generics\nimport Jose.Jwa\nimport Jose.Jwk\nimport Jose.Jws\nimport Jose.Jwt\nimport Network.OAuth.OAuth2\nimport Network.OAuth2.Experiment\nimport Network.OIDC.WellKnown\nimport URI.ByteString.QQ\n\ndata Okta = Okta deriving (Eq, Show)\n\ntype instance IdpUserInfo Okta = OktaUser\n\ndefaultOktaApp :: Idp Okta -> IdpApplication \'AuthorizationCode Okta\ndefaultOktaApp i =\n  AuthorizationCodeIdpApplication\n    { idpAppClientId = ""\n    , idpAppClientSecret = ""\n    , idpAppScope = Set.fromList ["openid", "profile", "email"]\n    , idpAppAuthorizeState = "CHANGE_ME"\n    , idpAppAuthorizeExtraParams = Map.empty\n    , idpAppRedirectUri = [uri|http://localhost|]\n    , idpAppName = "default-okta-App"\n    , idpAppTokenRequestAuthenticationMethod = ClientSecretBasic\n    , idp = i\n    }\n\ndefaultOktaIdp :: Idp Okta\ndefaultOktaIdp =\n  Idp\n    { idpFetchUserInfo = authGetJSON @(IdpUserInfo Okta)\n    , idpUserInfoEndpoint = [uri|https://foo.okta.com/oauth2/v1/userinfo|]\n    , idpAuthorizeEndpoint =\n        [uri|https://foo.okta.com/oauth2/v1/authorize|]\n    , idpTokenEndpoint =\n        [uri|https://foo.okta.com/oauth2/v1/token|]\n    }\n\nmkOktaIdp ::\n  MonadIO m =>\n  -- | Full domain with no http protocol. e.g. @foo.okta.com@\n  Text ->\n  ExceptT Text m (Idp Okta)\nmkOktaIdp domain = do\n  OpenIDConfigurationUris {..} <- fetchWellKnownUris domain\n  pure\n    ( defaultOktaIdp\n        { idpUserInfoEndpoint = userinfoUri\n        , idpAuthorizeEndpoint = authorizationUri\n        , idpTokenEndpoint = tokenUri\n        }\n    )\n\nmkOktaClientCredentialAppJwt ::\n  Jwk ->\n  ClientId ->\n  Idp Okta ->\n  IO (Either String Jwt)\nmkOktaClientCredentialAppJwt jwk cid idp = do\n  now <- getCurrentTime\n  let cidStr = unClientId cid\n  let payload =\n        bsToStrict $\n          Aeson.encode $\n            Aeson.object\n              [ "iss" .= cidStr\n              , "sub" .= cidStr\n              , "aud" .= idpTokenEndpoint idp\n              , "exp" .= tToSeconds (addUTCTime (secondsToNominalDiffTime 300) now) -- 5 minutes expiration time\n              , "iat" .= tToSeconds now\n              ]\n  first show <$> jwkEncode RS256 jwk (Claims payload)\n  where\n    tToSeconds = formatTime defaultTimeLocale "%s"\n\n-- https://developer.okta.com/docs/reference/api/oidc/#request-parameters\n-- Okta Org AS doesn\'t support consent\n-- Okta Custom AS does support consent via config (what scope shall prompt consent)\ndata OktaUser = OktaUser\n  { name :: Text\n  , preferredUsername :: Text\n  }\n  deriving (Show, Generic)\n\ninstance FromJSON OktaUser where\n  parseJSON =\n    genericParseJSON defaultOptions {fieldLabelModifier = camelTo2 \'_\'}\n'