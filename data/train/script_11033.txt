b'package id.zelory.compressor.constraint\n\nimport com.natpryce.hamkrest.assertion.assertThat\nimport com.natpryce.hamkrest.equalTo\nimport com.natpryce.hamkrest.isA\nimport id.zelory.compressor.loadBitmap\nimport id.zelory.compressor.overWrite\nimport io.mockk.every\nimport io.mockk.mockk\nimport io.mockk.mockkStatic\nimport io.mockk.unmockkAll\nimport io.mockk.verify\nimport org.junit.After\nimport org.junit.Test\nimport java.io.File\n\n/**\n * Created on : January 25, 2020\n * Author     : zetbaitsu\n * Name       : Zetra\n * GitHub     : https://github.com/zetbaitsu\n */\nclass SizeConstraintTest {\n\n    @After\n    fun teardown() {\n        unmockkAll()\n    }\n\n    @Test\n    fun `when file size greater than max file size, constraint should not satisfied`() {\n        // Given\n        val imageFile = mockk<File>(relaxed = true)\n        every { imageFile.length() } returns 2000\n        val constraint = SizeConstraint(1000)\n\n        // When + Then\n        assertThat(constraint.isSatisfied(imageFile), equalTo(false))\n    }\n\n    @Test\n    fun `when file size equal to max file size, constraint should satisfied`() {\n        // Given\n        val imageFile = mockk<File>(relaxed = true)\n        every { imageFile.length() } returns 1000\n        val constraint = SizeConstraint(1000)\n\n        // When + Then\n        assertThat(constraint.isSatisfied(imageFile), equalTo(true))\n    }\n\n    @Test\n    fun `when file size less than max file size, constraint should satisfied`() {\n        // Given\n        val imageFile = mockk<File>(relaxed = true)\n        every { imageFile.length() } returns 900\n        val constraint = SizeConstraint(1000)\n\n        // When + Then\n        assertThat(constraint.isSatisfied(imageFile), equalTo(true))\n    }\n\n    @Test\n    fun `when iteration less than max iteration, constraint should not satisfied`() {\n        // Given\n        val imageFile = mockk<File>(relaxed = true)\n        every { imageFile.length() } returns 2000\n\n        mockkStatic("id.zelory.compressor.UtilKt")\n        every { loadBitmap(any()) } returns mockk()\n        every { overWrite(any(), any(), any(), any()) } returns mockk()\n\n        val constraint = SizeConstraint(1000, maxIteration = 5)\n\n        // When\n        constraint.satisfy(imageFile)\n\n        // Then\n        assertThat(constraint.isSatisfied(imageFile), equalTo(false))\n    }\n\n    @Test\n    fun `when iteration equal to max iteration, constraint should satisfied`() {\n        // Given\n        val imageFile = mockk<File>(relaxed = true)\n        every { imageFile.length() } returns 2000\n\n        mockkStatic("id.zelory.compressor.UtilKt")\n        every { loadBitmap(any()) } returns mockk()\n        every { overWrite(any(), any(), any(), any()) } returns mockk()\n\n        val constraint = SizeConstraint(1000, maxIteration = 5)\n\n        // When\n        repeat(5) {\n            constraint.satisfy(imageFile)\n        }\n\n        // Then\n        assertThat(constraint.isSatisfied(imageFile), equalTo(true))\n    }\n\n    @Test\n    fun `when trying satisfy constraint, it should save image with calculated quality`() {\n        // Given\n        mockkStatic("id.zelory.compressor.UtilKt")\n        every { loadBitmap(any()) } returns mockk()\n        every { overWrite(any(), any(), any(), any()) } returns mockk()\n\n        val imageFile = mockk<File>(relaxed = true)\n        val stepSize = 10\n        val quality = 100 - stepSize\n        val constraint = SizeConstraint(200, stepSize = stepSize)\n\n        // When\n        constraint.satisfy(imageFile)\n\n        // Then\n        verify { overWrite(imageFile, any(), any(), quality) }\n    }\n\n    @Test\n    fun `when trying satisfy constraint but calculated quality less than min quality, it should use min quality`() {\n        // Given\n        mockkStatic("id.zelory.compressor.UtilKt")\n        every { loadBitmap(any()) } returns mockk()\n        every { overWrite(any(), any(), any(), any()) } returns mockk()\n\n        val imageFile = mockk<File>(relaxed = true)\n        val stepSize = 50\n        val minQuality = 80\n        val constraint = SizeConstraint(200, stepSize, minQuality = minQuality)\n\n        // When\n        constraint.satisfy(imageFile)\n\n        // Then\n        verify { overWrite(imageFile, any(), any(), minQuality) }\n    }\n\n    @Test\n    fun `verify extension`() {\n        // Given\n        val compression = Compression()\n\n        // When\n        compression.size(9000)\n\n        // Then\n        assertThat(compression.constraints.first(), isA<SizeConstraint>())\n    }\n}'