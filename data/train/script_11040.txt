b'{-# LANGUAGE DataKinds #-}\n{-# LANGUAGE DeriveGeneric #-}\n{-# LANGUAGE TypeOperators #-}\n\nmodule Cachix.API\n  ( BinaryCacheAPI (..),\n    API,\n    CachixAuth,\n  )\nwhere\n\nimport qualified Cachix.Types.BinaryCache as BinaryCache\nimport qualified Cachix.Types.ByteStringStreaming as ByteStringStreaming\nimport Cachix.Types.ContentTypes\nimport qualified Cachix.Types.MultipartUpload as Multipart\nimport Cachix.Types.NarFileName (NarFileName (..))\nimport qualified Cachix.Types.NarInfo as NarInfo\nimport qualified Cachix.Types.NarInfoCreate as NarInfoCreate\nimport qualified Cachix.Types.NarInfoHash as NarInfoHash\nimport qualified Cachix.Types.NixCacheInfo as NixCacheInfo\nimport qualified Cachix.Types.PinCreate as PinCreate\nimport Cachix.Types.Servant (Get302, Head)\nimport Cachix.Types.Session (Session)\nimport qualified Cachix.Types.SigningKeyCreate as SigningKeyCreate\nimport Control.Monad.Trans.Resource\nimport Data.Conduit (ConduitT)\nimport Data.UUID (UUID)\nimport Protolude\nimport Servant.API hiding (BasicAuth)\nimport Servant.API.Generic\nimport Servant.Auth\n\ntype CachixAuth = Auth \'[Cookie, JWT, BasicAuth] Session\n\n-- Nix CLI + Cachix CLI\ndata BinaryCacheAPI route = BinaryCacheAPI\n  { -- https://cache.nixos.org/nix-cache-info\n    nixCacheInfo ::\n      route\n        :- CachixAuth\n          :> "cache"\n          :> Capture "name" Text\n          :> "nix-cache-info"\n          :> Get \'[XNixCacheInfo, JSON] NixCacheInfo.NixCacheInfo,\n    -- Hydra: src/lib/Hydra/View/NARInfo.pm\n    narinfo ::\n      route\n        :- CachixAuth\n          :> "cache"\n          :> Capture "name" Text\n          :> Capture "narinfohash" NarInfoHash.NarInfoHash\n          :> Get \'[XNixNarInfo, JSON] (Headers \'[Header "Cache-Control" Text] NarInfo.CachixNarInfo),\n    narinfoHead ::\n      route\n        :- CachixAuth\n          :> "cache"\n          :> Capture "name" Text\n          :> Capture "narinfohash" NarInfoHash.NarInfoHash\n          :> Head,\n    -- Hydra: src/lib/Hydra/View/NixNAR.pm\n    nar ::\n      route\n        :- CachixAuth\n          :> "cache"\n          :> Capture "name" Text\n          :> "nar"\n          :> Capture "nar" NarFileName\n          :> Get302 \'[XNixNar] \'[],\n    -- cachix specific\n    getCache ::\n      route\n        :- CachixAuth\n          :> "cache"\n          :> Capture "name" Text\n          :> Get \'[JSON] BinaryCache.BinaryCache,\n    narinfoBulk ::\n      route\n        :- CachixAuth\n          :> "cache"\n          :> Capture "name" Text\n          :> "narinfo"\n          :> Summary "Given a list of store hashes, return a list of those that are missing"\n          :> ReqBody \'[JSON] [Text]\n          :> Post \'[JSON] [Text],\n    narURL ::\n      route\n        :- CachixAuth\n          :> "cache"\n          :> Capture "name" Text\n          :> "narurl"\n          :> Capture "nar" NarFileName\n          :> Get \'[JSON] Text,\n    createAndUploadNar ::\n      route\n        :- Summary "Upload a NAR directly to the Cachix Server"\n          :> Description "This is a legacy API for older Cachix clients. Prefer \'createNar\' instead."\n          :> CachixAuth\n          :> "cache"\n          :> Capture "name" Text\n          :> "nar"\n          :> QueryParam "compression" BinaryCache.CompressionMethod\n          :> StreamBody NoFraming XNixNar (ConduitT () ByteStringStreaming.ByteStringStreaming (ResourceT IO) ())\n          :> Post \'[JSON] NoContent,\n    createNar ::\n      route\n        :- Summary "Create an empty NAR and initiate a multipart upload"\n          :> CachixAuth\n          :> "cache"\n          :> Capture "name" Text\n          :> "multipart-nar"\n          :> QueryParam "compression" BinaryCache.CompressionMethod\n          :> Post \'[JSON] Multipart.CreateMultipartUploadResponse,\n    uploadNarPart ::\n      route\n        :- Summary "Retrieve a presigned URL to upload a part of a multipart NAR"\n          :> CachixAuth\n          :> "cache"\n          :> Capture "name" Text\n          :> "multipart-nar"\n          :> Capture "narUuid" UUID\n          :> QueryParam\' \'[Required] "uploadId" Text\n          :> QueryParam\' \'[Required] "partNumber" Int\n          :> ReqBody \'[JSON] Multipart.SigningData\n          :> Post \'[JSON] Multipart.UploadPartResponse,\n    completeNarUpload ::\n      route\n        :- Summary "Complete a multipart upload"\n          :> Description "Verify the etags for each part and create the narinfo"\n          :> CachixAuth\n          :> "cache"\n          :> Capture "name" Text\n          :> "multipart-nar"\n          :> Capture "narUuid" UUID\n          :> "complete"\n          :> QueryParam\' \'[Required] "uploadId" Text\n          :> ReqBody \'[JSON] Multipart.CompletedMultipartUpload\n          :> Post \'[JSON] NoContent,\n    abortMultipartUpload ::\n      route\n        :- Summary "Abort a multipart upload"\n          :> CachixAuth\n          :> "cache"\n          :> Capture "name" Text\n          :> "multipart-nar"\n          :> Capture "narUuid" UUID\n          :> "abort"\n          :> QueryParam\' \'[Required] "uploadId" Text\n          :> Post \'[JSON] NoContent,\n    createNarinfo ::\n      route\n        :- CachixAuth\n          :> "cache"\n          :> Capture "name" Text\n          :> Capture "narinfohash" NarInfoHash.NarInfoHash\n          :> ReqBody \'[JSON] NarInfoCreate.NarInfoCreate\n          :> Post \'[JSON] NoContent,\n    serveNarContent ::\n      route\n        :- CachixAuth\n          :> "cache"\n          :> Capture "name" Text\n          :> "serve"\n          :> Capture "storehash" Text\n          :> CaptureAll "filepath" Text\n          :> Summary "Serve a file from a given store path"\n          :> Get \'[XNixNar] (Headers \'[Header "X-Content-Type-Options" Text, Header "Cache-Control" Text] ByteStringStreaming.LazyByteStringStreaming),\n    createKey ::\n      route\n        :- CachixAuth\n          :> "cache"\n          :> Capture "name" Text\n          :> "key"\n          :> ReqBody \'[JSON] SigningKeyCreate.SigningKeyCreate\n          :> Post \'[JSON] NoContent,\n    createPin ::\n      route\n        :- CachixAuth\n          :> "cache"\n          :> Capture "name" Text\n          :> "pin"\n          :> ReqBody \'[JSON] PinCreate.PinCreate\n          :> Post \'[JSON] NoContent\n  }\n  deriving (Generic)\n\ntype API = "api" :> "v1" :> ToServantApi BinaryCacheAPI\n'