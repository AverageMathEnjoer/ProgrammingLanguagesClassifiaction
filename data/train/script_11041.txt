b'package com.loper7.date_time_picker.ext\n\nimport android.util.Log\nimport java.lang.RuntimeException\nimport java.time.Year\nimport java.util.*\n\n/**\n * \xe8\x8e\xb7\xe5\x8f\x96\xe4\xb8\x80\xe5\xb9\xb4\xe4\xb8\xad\xe6\x89\x80\xe6\x9c\x89\xe7\x9a\x84\xe5\x91\xa8\n * @param year 1900-9999 default:now\n * @return MutableList<MutableList<Long>>\n */\ninternal fun Calendar.getWeeksOfYear(\n    year: Int = Calendar.getInstance().get(Calendar.YEAR)\n): MutableList<MutableList<Long>> {\n    if (year < 1900 || year > 9999)\n        throw NullPointerException("The year must be within 1900-9999")\n\n    firstDayOfWeek = Calendar.MONDAY\n    set(Calendar.DAY_OF_WEEK, Calendar.MONDAY)\n    minimalDaysInFirstWeek = 7\n    set(Calendar.YEAR, year)\n\n    var weeksData = mutableListOf<MutableList<Long>>()\n    for (i in 1..getMaxWeekOfYear(year)) {\n        var daysData = getDaysOfWeek(year, i)\n        weeksData.add(daysData)\n    }\n    return weeksData\n}\n\n/**\n * \xe8\x8e\xb7\xe5\x8f\x96\xe6\x8c\x87\xe5\xae\x9a\xe6\x97\xb6\xe9\x97\xb4\xe6\xae\xb5\xe5\x86\x85\xe7\x9a\x84\xe6\x89\x80\xe6\x9c\x89\xe5\x91\xa8\xef\xbc\x88\xe5\x91\xa8\xe5\x8c\x85\xe5\x90\xab\xe6\x8c\x87\xe5\xae\x9a\xe6\x97\xb6\xe9\x97\xb4\xef\xbc\x89\n * @param startDate \xe5\xbc\x80\xe5\xa7\x8b\xe6\x97\xb6\xe9\x97\xb4\n * @param endDate \xe7\xbb\x93\xe6\x9d\x9f\xe6\x97\xb6\xe9\x97\xb4\n * @param startContain \xe6\x98\xaf\xe5\x90\xa6\xe5\x8c\x85\xe5\x90\xab\xe5\xbc\x80\xe5\xa7\x8b\xe6\x97\xb6\xe9\x97\xb4\xe6\x89\x80\xe5\x9c\xa8\xe5\x91\xa8\n * @param endContain \xe6\x98\xaf\xe5\x90\xa6\xe5\x8c\x85\xe5\x90\xab\xe7\xbb\x93\xe6\x9d\x9f\xe6\x97\xb6\xe9\x97\xb4\xe6\x89\x80\xe5\x9c\xa8\xe5\x91\xa8\n */\ninternal fun Calendar.getWeeks(\n    startDate: Long = 0L,\n    endDate: Long = 0L,\n    startContain: Boolean = true,\n    endContain: Boolean = true\n): MutableList<MutableList<Long>> {\n    if ((startDate != 0L && endDate != 0L) && (startDate > endDate))\n        throw Exception("startDate > endDate")\n\n    val startYear by lazy {\n        if (startDate <= 0)\n            Calendar.getInstance().get(Calendar.YEAR)\n        else {\n            timeInMillis = startDate\n            get(Calendar.YEAR)\n        }\n    }\n\n    val endYear by lazy {\n        if (endDate <= 0)\n            Calendar.getInstance().get(Calendar.YEAR)\n        else {\n            timeInMillis = endDate\n            get(Calendar.YEAR)\n        }\n    }\n\n    //\xe8\x8e\xb7\xe5\x8f\x96\xe6\x97\xb6\xe9\x97\xb4\xe6\xae\xb5\xe5\x86\x85\xe6\x89\x80\xe6\x9c\x89\xe5\xb9\xb4\xe7\x9a\x84\xe5\x91\xa8\xe6\x95\xb0\xe6\x8d\xae\n    var weeksData = mutableListOf<MutableList<Long>>()\n    for (year in startYear..endYear) {\n        weeksData.addAll(getWeeksOfYear(year))\n    }\n\n    //\xe7\xa7\xbb\xe9\x99\xa4\xe4\xb8\x8d\xe5\x9c\xa8\xe6\x97\xb6\xe9\x97\xb4\xe6\xae\xb5\xe5\x86\x85\xe7\x9a\x84\xe5\x91\xa8\xe6\x95\xb0\xe6\x8d\xae\n    val weekIterator = weeksData.iterator()\n    while (weekIterator.hasNext()) {\n        val week = weekIterator.next()\n        if ((startDate > 0 && week[week.size - 1] < startDate) || (endDate > 0 && week[0] > endDate))\n            weekIterator.remove()\n        if (!startContain && week.contain(startDate))\n            weekIterator.remove()\n        if (!endContain && week.contain(endDate))\n            weekIterator.remove()\n    }\n    return weeksData\n}\n\n/**\n * \xe8\x8e\xb7\xe5\x8f\x96\xe4\xb8\x80\xe5\xb9\xb4\xe4\xb8\xad\xe7\x9a\x84\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe5\x91\xa8\xe6\x95\xb0\xe5\xad\x97\n * @param year 1900-9999\n * @return week 52 or 53\n */\ninternal fun Calendar.getMaxWeekOfYear(year: Int = Calendar.getInstance().get(Calendar.YEAR)): Int {\n    set(year, Calendar.DECEMBER, 31, 0, 0, 0)\n    return getWeekOfYear(time)\n}\n\n/**\n * \xe8\x8e\xb7\xe5\x8f\x96 date \xe6\x89\x80\xe5\x9c\xa8\xe5\xb9\xb4\xe7\x9a\x84\xe5\x91\xa8\xe6\x95\xb0\n * @param date \xe6\x97\xb6\xe9\x97\xb4\n * @return int\n */\ninternal fun Calendar.getWeekOfYear(date: Date): Int {\n    firstDayOfWeek = Calendar.MONDAY\n    minimalDaysInFirstWeek = 7\n    time = date\n\n    return get(Calendar.WEEK_OF_YEAR)\n}\n\n/**\n * \xe8\x8e\xb7\xe5\x8f\x96\xe6\x9f\x90\xe5\xb9\xb4\xe6\x9f\x90\xe5\x91\xa8\xe7\x9a\x84\xe6\x97\xa5\xe6\x9c\x9f\xe6\x97\xb6\xe9\x97\xb4\xe6\x88\xb3\xe9\x9b\x86\xe5\x90\x88[\xe7\xac\xac\xe4\xb8\x80\xe5\xa4\xa9-\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe5\xa4\xa9]\n * @param year 1900-9999\n * @param week 1-52/53\n * @return MutableList<Long>\n */\ninternal fun Calendar.getDaysOfWeek(\n    year: Int = Calendar.getInstance().get(Calendar.YEAR),\n    week: Int\n): MutableList<Long> {\n    if (year < 1900 || year > 9999)\n        throw NullPointerException("The year must be within 1900-9999")\n\n    firstDayOfWeek = Calendar.MONDAY\n    set(Calendar.DAY_OF_WEEK, Calendar.MONDAY)\n    minimalDaysInFirstWeek = 7\n    set(Calendar.YEAR, year)\n    set(Calendar.WEEK_OF_YEAR, week)\n\n    var weekData = mutableListOf<Long>()\n    for (i in 0 until 7) {\n        weekData.add(timeInMillis + (86400000 * i))\n    }\n    return weekData\n}\n\n/**\n * \xe8\x8e\xb7\xe5\x8f\x96\xe4\xb8\x80\xe5\xb9\xb4\xe6\x9c\x80\xe5\xa4\x9a\xe6\x9c\x89\xe5\xa4\x9a\xe5\xb0\x91\xe5\xa4\xa9\n *\n * @param year\n * @return\n */\ninternal fun GregorianCalendar.getMaxDayAtYear(year: Int): Int {\n    set(Calendar.YEAR, year)\n    return (if (isLeapYear(year)) 1 else 0) + 365\n}\n\n/**\n * \xe8\x8e\xb7\xe5\x8f\x96\xe4\xb8\x80\xe6\x9c\x88\xe4\xb8\xad\xe6\x9c\x80\xe5\xa4\xa7\xe7\x9a\x84\xe4\xb8\x80\xe5\xa4\xa9\n */\ninternal fun Calendar.getMaxDayInMonth(): Int {\n    return this.getActualMaximum(Calendar.DAY_OF_MONTH)\n}\n\n/**\n *  \xe4\xb8\x8e\xe4\xbc\xa0\xe5\x85\xa5\xe6\x97\xa5\xe5\x8e\x86\xe6\x98\xaf\xe5\x90\xa6\xe4\xb8\xba\xe5\x90\x8c\xe4\xb8\x80\xe5\xb9\xb4\n *  @param calendar\n */\ninternal fun Calendar.isSameYear(calendar: Calendar): Boolean {\n    return get(Calendar.YEAR) == calendar.get(Calendar.YEAR)\n}\n\n/**\n *  \xe4\xb8\x8e\xe4\xbc\xa0\xe5\x85\xa5\xe6\x97\xa5\xe5\x8e\x86\xe6\x98\xaf\xe5\x90\xa6\xe4\xb8\xba\xe5\x90\x8c\xe4\xb8\x80\xe6\x9c\x88\n *  @param calendar\n */\ninternal fun Calendar.isSameMonth(calendar: Calendar): Boolean {\n    return isSameYear(calendar) && get(Calendar.MONTH) == calendar.get(Calendar.MONTH)\n}\n\n/**\n *  \xe4\xb8\x8e\xe4\xbc\xa0\xe5\x85\xa5\xe6\x97\xa5\xe5\x8e\x86\xe6\x98\xaf\xe5\x90\xa6\xe4\xb8\xba\xe5\x90\x8c\xe4\xb8\x80\xe5\xa4\xa9\n *  @param calendar\n */\ninternal fun Calendar.isSameDay(calendar: Calendar): Boolean {\n    return isSameYear(calendar) && get(Calendar.DAY_OF_YEAR) == calendar.get(Calendar.DAY_OF_YEAR)\n}\n\n/**\n *  \xe4\xb8\x8e\xe4\xbc\xa0\xe5\x85\xa5\xe6\x97\xa5\xe5\x8e\x86\xe6\x98\xaf\xe5\x90\xa6\xe4\xb8\xba\xe5\x90\x8c\xe4\xb8\x80\xe6\x97\xb6\n *  @param calendar\n */\ninternal fun Calendar.isSameHour(calendar: Calendar): Boolean {\n    return isSameDay(calendar) && get(Calendar.HOUR_OF_DAY) == calendar.get(Calendar.HOUR_OF_DAY)\n}\n\n/**\n *  \xe4\xb8\x8e\xe4\xbc\xa0\xe5\x85\xa5\xe6\x97\xa5\xe5\x8e\x86\xe6\x98\xaf\xe5\x90\xa6\xe4\xb8\xba\xe5\x90\x8c\xe4\xb8\x80\xe5\x88\x86\n *  @param calendar\n */\ninternal fun Calendar.isSameMinute(calendar: Calendar): Boolean {\n    return isSameHour(calendar) && get(Calendar.MINUTE) == calendar.get(Calendar.MINUTE)\n}\n\n/**\n *  \xe4\xb8\x8e\xe4\xbc\xa0\xe5\x85\xa5\xe6\x97\xa5\xe5\x8e\x86\xe6\x98\xaf\xe5\x90\xa6\xe4\xb8\xba\xe5\x90\x8c\xe4\xb8\x80\xe7\xa7\x92\n *  @param calendar\n */\ninternal fun Calendar.isSameSecond(calendar: Calendar): Boolean {\n    return isSameMinute(calendar) && get(Calendar.SECOND) == calendar.get(Calendar.SECOND)\n}\n\n'