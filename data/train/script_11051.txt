b'/*\n * Copyright 2013 - 2016 Mario Arias\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.funktionale.either\n\nimport org.funktionale.either.Either.Left\nimport org.funktionale.either.Either.Right\nimport org.funktionale.option.Option\nimport org.funktionale.option.Option.None\nimport org.funktionale.option.Option.Some\nimport java.util.*\n\nclass RightProjection<out L, out R>(val e: Either<L, R>) {\n\n    fun get(): R = when (e) {\n        is Right -> e.r\n        is Left -> throw NoSuchElementException("Either.right.value on Left")\n    }\n\n    fun forEach(f: (R) -> Unit) {\n        when (e) {\n            is Right -> f(e.r)\n        }\n    }\n\n\n    fun exists(predicate: (R) -> Boolean): Boolean = when (e) {\n        is Right -> predicate(e.r)\n        is Left -> false\n    }\n\n    fun <X> map(f: (R) -> X): Either<L, X> = flatMap { Right<L, X>(f(it)) }\n\n    fun filter(predicate: (R) -> Boolean): Option<Either<L, R>> = when (e) {\n        is Right -> {\n            if (predicate(e.r)) {\n                Some(e)\n            } else {\n                None\n            }\n        }\n        is Left -> None\n    }\n\n    fun toList(): List<R> = when (e) {\n        is Right -> listOf(e.r)\n        is Left -> listOf()\n    }\n\n    fun toOption(): Option<R> = when (e) {\n        is Right -> Some(e.r)\n        is Left -> None\n    }\n\n}\n\nfun <L, R> RightProjection<L, R>.getOrElse(default: () -> R): R = when (e) {\n    is Right -> e.r\n    is Left -> default()\n}\n\nfun <X, L, R> RightProjection<L, R>.flatMap(f: (R) -> Either<L, X>): Either<L, X> = when (e) {\n    is Left -> Left(e.l)\n    is Right -> f(e.r)\n}\n\n\nfun <L, R, X, Y> RightProjection<L, R>.map(x: Either<L, X>, f: (R, X) -> Y): Either<L, Y> = flatMap { r -> x.right().map { xx -> f(r, xx) } }\n'