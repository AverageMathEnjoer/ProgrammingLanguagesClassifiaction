b'{-# LANGUAGE\n    NoImplicitPrelude\n  , TemplateHaskell\n  , TypeOperators\n  #-}\nmodule Rest.Gen.Config\n  ( Action (..)\n  , Location (..)\n\n  , Config\n  , action\n  , source\n  , target\n  , apiVersion\n  , apiPrivate\n\n  , defaultConfig\n  , parseLocation\n  , options\n  , configFromArgs\n  ) where\n\nimport Prelude.Compat hiding (id, (.))\n\nimport Control.Category\nimport Data.Label\nimport System.Console.GetOpt\nimport System.Environment (getArgs)\n\ndata Action   = MakeDocs String | MakeJS | MakeRb | MakeHS\ndata Location = Default | Stream | Location String\n\ndata Config = Config\n  { _action     :: Maybe Action\n  , _source     :: Location\n  , _target     :: Location\n  , _apiVersion :: String\n  , _apiPrivate :: Bool\n  }\n\nmkLabels [\'\'Config]\n\ndefaultConfig :: Config\ndefaultConfig = Config\n  { _action     = Nothing\n  , _source     = Default\n  , _target     = Default\n  , _apiVersion = "latest"\n  , _apiPrivate = True\n  }\n\nparseLocation :: String -> Location\nparseLocation "-" = Stream\nparseLocation s   = Location s\n\noptions :: (a :-> Config) -> [OptDescr (a -> a)]\noptions parent =\n  [ Option [\'d\'] ["documentation"] (ReqArg (set (action     . parent) . Just . MakeDocs) "URLROOT") "Generate API documentation, available under the provided URL root."\n  , Option [\'j\'] ["javascript"]    (NoArg  (set (action     . parent) (Just MakeJS))) "Generate Javascript bindings."\n  , Option [\'r\'] ["ruby"]          (NoArg  (set (action     . parent) (Just MakeRb))) "Generate Ruby bindings."\n  , Option [\'h\'] ["haskell"]       (NoArg  (set (action     . parent) (Just MakeHS))) "Generate Haskell bindings."\n  , Option [\'s\'] ["source"]        (ReqArg (set (source     . parent) . parseLocation) "LOCATION") "The location of additional sources."\n  , Option [\'t\'] ["target"]        (ReqArg (set (target     . parent) . parseLocation) "LOCATION") "The target location for generation."\n  , Option [\'v\'] ["version"]       (ReqArg (set (apiVersion . parent)) "VERSION") "The version of the API under generation. Default latest."\n  , Option [\'p\'] ["hide-private"]  (NoArg  (set (apiPrivate . parent) False)) "Generate API for the public, hiding private resources. Not default."\n  ]\n\nconfigFromArgs :: String -> IO Config\nconfigFromArgs name = do\n  let header = "Usage: " ++ name ++ " [OPTIONS...], with the following options:"\n  args <- getArgs\n  fst <$> processArgs defaultConfig (options id) header args\n\nprocessArgs :: a -> [OptDescr (a -> a)] -> String -> [String] -> IO (a, [String])\nprocessArgs defConfig opts header args =\n    case getOpt Permute opts args of\n        (oargs, nonopts, []    ) -> return (foldl (flip ($)) defConfig oargs, nonopts)\n        (_    , _      , errors) -> ioError $ userError $ concat errors ++ usageInfo header opts\n'