b'{-# LANGUAGE CPP #-}\n{-# LANGUAGE GADTs #-}\n{-# LANGUAGE OverloadedStrings #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n{-# OPTIONS_GHC -fno-warn-unused-imports -fno-warn-incomplete-record-updates #-}\n\nmodule Hoodle.Coroutine.Default.Menu where\n\nimport Control.Lens (set, view, (.~), _1)\nimport Control.Monad (void)\nimport Control.Monad.IO.Class (liftIO)\nimport Control.Monad.State (get, gets, modify)\nimport Data.Foldable (mapM_)\nimport Data.Hoodle.Generic (gbackground, gpages)\nimport Data.Hoodle.Select (gselAll)\nimport qualified Data.IntMap as M\nimport Data.Monoid ()\nimport Graphics.Hoodle.Render.Type\n  ( RBackground (..),\n    isRBkgSmpl,\n  )\nimport qualified Graphics.UI.Gtk as Gtk\nimport Hoodle.Accessor (pureUpdateUhdl)\nimport Hoodle.Coroutine.Commit (redo, undo)\nimport Hoodle.Coroutine.Draw\n  ( invalidateAll,\n    invalidateInBBox,\n    nextevent,\n    updateFlagFromToggleUI,\n  )\nimport Hoodle.Coroutine.File\n  ( askIfSave,\n    askQuitProgram,\n    embedAllPDFBackground,\n    embedHoodlet,\n    embedPredefinedImage,\n    embedPredefinedImage2,\n    embedPredefinedImage3,\n    exportCurrentPageAsSVG,\n    fileAnnotatePDF,\n    fileExport,\n    fileLoadImageBackground,\n    fileLoadPNGorJPG,\n    fileLoadSVG,\n    fileOpen,\n    fileReload,\n    fileSave,\n    fileSaveAs,\n    fileShowRevisions,\n    fileShowUUID,\n    fileVersionSave,\n  )\nimport Hoodle.Coroutine.LaTeX (laTeXFooter, laTeXHeader)\nimport Hoodle.Coroutine.Layer\n  ( deleteCurrentLayer,\n    gotoNextLayer,\n    gotoPrevLayer,\n    makeNewLayer,\n    startGotoLayerAt,\n  )\nimport Hoodle.Coroutine.Link (addLink, listAnchors)\nimport Hoodle.Coroutine.Mode (modeChange)\nimport Hoodle.Coroutine.Page\n  ( changePage,\n    deleteCurrentPage,\n    newPage,\n    pageZoomChange,\n    pageZoomChangeRel,\n  )\nimport Hoodle.Coroutine.Select.Clipboard\n  ( copySelection,\n    cutSelection,\n    deleteSelection,\n    pasteToSelection,\n  )\nimport Hoodle.Coroutine.TextInput\n  ( addAnchor,\n    combineLaTeXText,\n    editEmbeddedTextSource,\n    editNetEmbeddedTextSource,\n    embedTextSource,\n    laTeXInput,\n    laTeXInputFromSource,\n    laTeXInputNetwork,\n    textInput,\n    textInputFromSource,\n    toggleNetworkEditSource,\n  )\nimport Hoodle.Coroutine.Window\n  ( addTab,\n    closeTab,\n    deleteCanvas,\n    eitherSplit,\n    fullScreen,\n  )\nimport Hoodle.GUI.Reflect (reflectCursor)\nimport Hoodle.Script (relaunchApplication)\nimport Hoodle.Type.Canvas\n  ( currentTool,\n    penColor,\n    variableWidthPen,\n  )\nimport Hoodle.Type.Coroutine (MainCoroutine, doIOaction)\nimport Hoodle.Type.Enum\n  ( AddDirection (PageAfter, PageBefore),\n    DrawFlag (Efficient),\n    PenColor (ColorRGBA),\n    ZoomModeRel (..),\n    convertBackgroundStyleToByteString,\n    convertPenColorToRGBA,\n  )\nimport Hoodle.Type.Event (AllEvent (..), MenuEvent (..), UserEvent (..))\nimport Hoodle.Type.HoodleState\n  ( FileStore (LocalDir),\n    HoodleModeState (ViewAppendState),\n    backgroundStyle,\n    currentCanvas,\n    currentUnit,\n    doesEmbedImage,\n    doesEmbedPDF,\n    doesFollowLinks,\n    doesKeepAspectRatio,\n    doesUsePopUpMenu,\n    doesUseVariableCursor,\n    doesUseXInput,\n    getHoodle,\n    hoodleModeState,\n    hoodleModeStateEither,\n    isSaved,\n    penInfo,\n    settings,\n    unitHoodles,\n  )\nimport Hoodle.Type.PageArrangement (ZoomMode (..))\nimport Hoodle.Type.Window (SplitType (..))\nimport Hoodle.Widget.Clock (toggleClock)\nimport Hoodle.Widget.Layer (toggleLayer)\nimport Hoodle.Widget.PanZoom (togglePanZoom, toggleTouch)\nimport Hoodle.Widget.Scroll (toggleScroll)\n--\nimport Prelude hiding (mapM_)\n\n-- |\nmenuEventProcess :: MenuEvent -> MainCoroutine ()\nmenuEventProcess MenuQuit = do\n  xstate <- get\n  if view (unitHoodles . currentUnit . isSaved) xstate\n    then liftIO Gtk.mainQuit\n    else askQuitProgram\nmenuEventProcess MenuPreviousPage = changePage (\\x -> x - 1)\nmenuEventProcess MenuNextPage = changePage (+ 1)\nmenuEventProcess MenuFirstPage = changePage (const 0)\nmenuEventProcess MenuLastPage = do\n  totalnumofpages <-\n    gets\n      ( either (M.size . view gpages) (M.size . view gselAll)\n          . hoodleModeStateEither\n          . view (unitHoodles . currentUnit . hoodleModeState)\n      )\n  changePage (const (totalnumofpages - 1))\nmenuEventProcess MenuNewPageBefore = newPage Nothing PageBefore\nmenuEventProcess MenuNewPageAfter = newPage Nothing PageAfter\nmenuEventProcess MenuDeletePage = deleteCurrentPage\nmenuEventProcess MenuExportPageSVG = exportCurrentPageAsSVG\nmenuEventProcess MenuNew = addTab (LocalDir Nothing) -- askIfSave fileNew\nmenuEventProcess MenuAnnotatePDF = askIfSave fileAnnotatePDF\nmenuEventProcess MenuLoadPNGorJPG = fileLoadPNGorJPG\nmenuEventProcess MenuLoadSVG = fileLoadSVG\nmenuEventProcess MenuLoadImageBackground = fileLoadImageBackground\nmenuEventProcess MenuText = textInput (Just (100, 100)) ""\nmenuEventProcess MenuEmbedTextSource = embedTextSource\nmenuEventProcess MenuEditEmbedTextSource = editEmbeddedTextSource\nmenuEventProcess MenuTextFromSource = textInputFromSource (100, 100)\nmenuEventProcess MenuLaTeX =\n  laTeXInput Nothing (laTeXHeader <> "\\n\\n" <> laTeXFooter)\nmenuEventProcess MenuCombineLaTeX = combineLaTeXText\nmenuEventProcess MenuLaTeXFromSource = laTeXInputFromSource (100, 100)\nmenuEventProcess MenuUndo = undo\nmenuEventProcess MenuRedo = redo\nmenuEventProcess MenuOpen = askIfSave fileOpen\nmenuEventProcess MenuSave = fileSave\nmenuEventProcess MenuSaveAs = fileSaveAs\nmenuEventProcess MenuReload = fileReload\nmenuEventProcess MenuExport = fileExport\nmenuEventProcess MenuVersionSave = fileVersionSave\nmenuEventProcess MenuShowRevisions = fileShowRevisions\nmenuEventProcess MenuShowUUID = fileShowUUID\nmenuEventProcess MenuCut = cutSelection\nmenuEventProcess MenuCopy = copySelection\nmenuEventProcess MenuPaste = pasteToSelection\nmenuEventProcess MenuDelete = deleteSelection\nmenuEventProcess MenuZoomIn = pageZoomChangeRel ZoomIn\nmenuEventProcess MenuZoomOut = pageZoomChangeRel ZoomOut\nmenuEventProcess MenuNormalSize = pageZoomChange Original\nmenuEventProcess MenuPageWidth = pageZoomChange FitWidth\nmenuEventProcess MenuPageHeight = pageZoomChange FitHeight\nmenuEventProcess MenuHSplit = eitherSplit SplitHorizontal\nmenuEventProcess MenuVSplit = eitherSplit SplitVertical\nmenuEventProcess MenuDelCanvas = deleteCanvas\nmenuEventProcess MenuNewLayer = makeNewLayer\nmenuEventProcess MenuNextLayer = gotoNextLayer\nmenuEventProcess MenuPrevLayer = gotoPrevLayer\nmenuEventProcess MenuGotoLayer = startGotoLayerAt\nmenuEventProcess MenuDeleteLayer = deleteCurrentLayer\nmenuEventProcess MenuUseXInput = do\n  _ <- updateFlagFromToggleUI "UXINPUTA" (settings . doesUseXInput)\n  return ()\nmenuEventProcess MenuUseTouch = toggleTouch\nmenuEventProcess MenuUsePopUpMenu = void $ updateFlagFromToggleUI "POPMENUA" (settings . doesUsePopUpMenu)\nmenuEventProcess MenuEmbedImage = void $ updateFlagFromToggleUI "EBDIMGA" (settings . doesEmbedImage)\nmenuEventProcess MenuEmbedPDF = void $ updateFlagFromToggleUI "EBDPDFA" (settings . doesEmbedPDF)\nmenuEventProcess MenuFollowLinks = void $ updateFlagFromToggleUI "FLWLNKA" (settings . doesFollowLinks)\nmenuEventProcess MenuKeepAspectRatio = void $ updateFlagFromToggleUI "KEEPRATIOA" (settings . doesKeepAspectRatio)\nmenuEventProcess MenuUseVariableCursor =\n  void $\n    updateFlagFromToggleUI "VCURSORA" (settings . doesUseVariableCursor) >> reflectCursor True\nmenuEventProcess MenuPressureSensitivity = void $ updateFlagFromToggleUI "PRESSRSENSA" (penInfo . variableWidthPen)\nmenuEventProcess MenuRelaunch = liftIO relaunchApplication\nmenuEventProcess MenuColorPicker = colorPick\nmenuEventProcess MenuFullScreen = fullScreen\nmenuEventProcess MenuAddLink = addLink\nmenuEventProcess MenuAddAnchor = addAnchor\nmenuEventProcess MenuListAnchors = listAnchors\nmenuEventProcess MenuEmbedPredefinedImage = embedPredefinedImage\nmenuEventProcess MenuEmbedPredefinedImage2 = embedPredefinedImage2\nmenuEventProcess MenuEmbedPredefinedImage3 = embedPredefinedImage3\nmenuEventProcess MenuApplyToAllPages = do\n  xst <- get\n  let bsty = view backgroundStyle xst\n      uhdl = view (unitHoodles . currentUnit) xst\n      hdl = getHoodle uhdl\n      pgs = view gpages hdl\n      changeBkg cpage =\n        let cbkg = view gbackground cpage\n            nbkg\n              | isRBkgSmpl cbkg = cbkg {rbkg_style = convertBackgroundStyleToByteString bsty}\n              | otherwise = cbkg\n         in set gbackground nbkg cpage\n      npgs = fmap changeBkg pgs\n      nhdl = set gpages npgs hdl\n  modeChange ToViewAppendMode\n  pureUpdateUhdl (const ((hoodleModeState .~ ViewAppendState nhdl) uhdl))\n  invalidateAll\nmenuEventProcess MenuEmbedAllPDFBkg = embedAllPDFBackground\nmenuEventProcess MenuTogglePanZoomWidget = togglePanZoom . view (unitHoodles . currentUnit . currentCanvas . _1) =<< get\nmenuEventProcess MenuToggleLayerWidget = toggleLayer . view (unitHoodles . currentUnit . currentCanvas . _1) =<< get\nmenuEventProcess MenuToggleClockWidget = toggleClock . view (unitHoodles . currentUnit . currentCanvas . _1) =<< get\nmenuEventProcess MenuToggleScrollWidget = toggleScroll . view (unitHoodles . currentUnit . currentCanvas . _1) =<< get\nmenuEventProcess MenuAddTab = addTab (LocalDir Nothing)\nmenuEventProcess MenuCloseTab = closeTab\nmenuEventProcess MenuEditNetEmbedTextSource = editNetEmbeddedTextSource\nmenuEventProcess MenuToggleNetworkEditSource = toggleNetworkEditSource\nmenuEventProcess MenuLaTeXNetwork =\n  laTeXInputNetwork Nothing (laTeXHeader <> "\\n\\n" <> laTeXFooter)\nmenuEventProcess m = liftIO $ putStrLn $ "not implemented " ++ show m\n\n-- |\ncolorPick :: MainCoroutine ()\ncolorPick = colorPickerBox "Pen Color" >>= mapM_ (\\c -> modify (penInfo . currentTool . penColor .~ c))\n\n-- |\ncolorConvert :: Gtk.Color -> PenColor\ncolorConvert (Gtk.Color r g b) = ColorRGBA (realToFrac r / 65536.0) (realToFrac g / 65536.0) (realToFrac b / 65536.0) 1.0\n\n-- |\ncolorPickerBox :: String -> MainCoroutine (Maybe PenColor)\ncolorPickerBox _msg = do\n  xst <- get\n  let pcolor = view (penInfo . currentTool . penColor) xst\n  doIOaction (action pcolor) >> go\n  where\n    action pcolor _evhandler = do\n      dialog <- Gtk.dialogNew -- Gtk.colorSelectionDialogNew msg\n      upper <- fmap Gtk.castToContainer (Gtk.dialogGetContentArea dialog)\n      vbox <- Gtk.vBoxNew False 0\n      Gtk.containerAdd upper vbox\n      csel <- Gtk.colorSelectionNew\n      let (r, g, b, _a) = convertPenColorToRGBA pcolor\n          color = Gtk.Color (floor (r * 65535.0)) (floor (g * 65535.0)) (floor (b * 65535.0))\n      Gtk.colorSelectionSetCurrentColor csel color\n      Gtk.boxPackStart vbox csel Gtk.PackGrow 0\n      _btnOk <- Gtk.dialogAddButton dialog ("Ok" :: String) Gtk.ResponseOk\n      Gtk.widgetShowAll dialog\n      res <- Gtk.dialogRun dialog\n      mc <- case res of\n        Gtk.ResponseOk -> do\n          clr <- Gtk.colorSelectionGetCurrentColor csel\n          return (Just (colorConvert clr))\n        _ -> return Nothing\n      Gtk.widgetDestroy dialog\n      return (UsrEv (ColorChosen mc))\n    go = do\n      r <- nextevent\n      case r of\n        ColorChosen mc -> return mc\n        UpdateCanvas cid ->\n          -- this is temporary\n          invalidateInBBox Nothing Efficient cid >> go\n        _ -> go\n'