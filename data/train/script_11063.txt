b'package com.loper7.date_time_picker\n\nimport android.content.Context\nimport android.util.AttributeSet\nimport android.view.View\nimport android.widget.FrameLayout\nimport androidx.annotation.ColorInt\nimport androidx.annotation.Dimension\nimport androidx.core.content.ContextCompat\nimport com.loper7.date_time_picker.DateTimeConfig.DAY\nimport com.loper7.date_time_picker.DateTimeConfig.GLOBAL_LOCAL\nimport com.loper7.date_time_picker.DateTimeConfig.HOUR\nimport com.loper7.date_time_picker.DateTimeConfig.MIN\nimport com.loper7.date_time_picker.DateTimeConfig.MONTH\nimport com.loper7.date_time_picker.DateTimeConfig.SECOND\nimport com.loper7.date_time_picker.DateTimeConfig.YEAR\nimport com.loper7.date_time_picker.controller.BaseDateTimeController\nimport com.loper7.date_time_picker.controller.DateTimeInterface\nimport com.loper7.date_time_picker.controller.DateTimeController\nimport com.loper7.date_time_picker.number_picker.NumberPicker\nimport com.loper7.tab_expand.ext.dip2px\nimport com.loper7.tab_expand.ext.px2dip\nimport org.jetbrains.annotations.NotNull\nimport java.lang.Exception\n\nopen class DateTimePicker : FrameLayout, DateTimeInterface {\n\n    private var mYearSpinner: NumberPicker? = null\n    private var mMonthSpinner: NumberPicker? = null\n    private var mDaySpinner: NumberPicker? = null\n    private var mHourSpinner: NumberPicker? = null\n    private var mMinuteSpinner: NumberPicker? = null\n    private var mSecondSpinner: NumberPicker? = null\n\n    private var displayType = intArrayOf(YEAR, MONTH, DAY, HOUR, MIN, SECOND)\n\n    private var showLabel = true\n    private var themeColor = 0\n    private var textColor = 0\n    private var dividerColor = 0\n    private var selectTextSize = 0\n    private var normalTextSize = 0\n\n    private var yearLabel = "\xe5\xb9\xb4"\n    private var monthLabel = "\xe6\x9c\x88"\n    private var dayLabel = "\xe6\x97\xa5"\n    private var hourLabel = "\xe6\x97\xb6"\n    private var minLabel = "\xe5\x88\x86"\n    private var secondLabel = "\xe7\xa7\x92"\n\n    private var global = GLOBAL_LOCAL\n\n    private var layoutResId = R.layout.dt_layout_date_picker\n\n    private var controller: BaseDateTimeController? = null\n\n    private var textBold = true\n    private var selectedTextBold = true\n\n\n    constructor(context: Context, attrs: AttributeSet?, defStyle: Int) : this(context, attrs)\n\n    constructor(context: Context, attrs: AttributeSet?) : super(context, attrs) {\n        val attributesArray = context.obtainStyledAttributes(attrs, R.styleable.DateTimePicker)\n        showLabel = attributesArray.getBoolean(R.styleable.DateTimePicker_dt_showLabel, true)\n        themeColor = attributesArray.getColor(\n            R.styleable.DateTimePicker_dt_themeColor,\n            ContextCompat.getColor(context, R.color.colorAccent)\n        )\n        textColor = attributesArray.getColor(\n            R.styleable.DateTimePicker_dt_textColor,\n            ContextCompat.getColor(context, R.color.colorTextGray)\n        )\n        dividerColor= attributesArray.getColor(\n            R.styleable.DateTimePicker_dt_dividerColor,\n            ContextCompat.getColor(context, R.color.colorDivider)\n        )\n        selectTextSize =\n            context.px2dip(\n                attributesArray.getDimensionPixelSize(\n                    R.styleable.DateTimePicker_dt_selectTextSize,\n                    context.dip2px(0f)\n                ).toFloat()\n            )\n        normalTextSize =\n            context.px2dip(\n                attributesArray.getDimensionPixelSize(\n                    R.styleable.DateTimePicker_dt_normalTextSize,\n                    context.dip2px(0f)\n                ).toFloat()\n            )\n\n        layoutResId = attributesArray.getResourceId(\n            R.styleable.DateTimePicker_dt_layout,\n            R.layout.dt_layout_date_picker\n        )\n        textBold = attributesArray.getBoolean(\n            R.styleable.DateTimePicker_dt_textBold, textBold\n        )\n        selectedTextBold = attributesArray.getBoolean(\n            R.styleable.DateTimePicker_dt_selectedTextBold, selectedTextBold\n        )\n\n        attributesArray.recycle()\n        init()\n    }\n\n    constructor(context: Context) : super(context) {\n        init()\n    }\n\n    private fun init() {\n        removeAllViews()\n        try {\n            if (!DateTimeConfig.showChina(global) && layoutResId == R.layout.dt_layout_date_picker)\n                View.inflate(context, R.layout.dt_layout_date_picker_globalization, this)\n            else\n                View.inflate(context, layoutResId, this)\n        } catch (e: Exception) {\n            throw Exception("layoutResId is it right or not?")\n        }\n\n        mYearSpinner = findViewById(R.id.np_datetime_year)\n        if (mYearSpinner == null)\n            mYearSpinner = findViewWithTag("np_datetime_year")\n        mMonthSpinner = findViewById(R.id.np_datetime_month)\n        if (mMonthSpinner == null)\n            mMonthSpinner = findViewWithTag("np_datetime_month")\n        mDaySpinner = findViewById(R.id.np_datetime_day)\n        if (mDaySpinner == null)\n            mDaySpinner = findViewWithTag("np_datetime_day")\n        mHourSpinner = findViewById(R.id.np_datetime_hour)\n        if (mHourSpinner == null)\n            mHourSpinner = findViewWithTag("np_datetime_hour")\n        mMinuteSpinner = findViewById(R.id.np_datetime_minute)\n        if (mMinuteSpinner == null)\n            mMinuteSpinner = findViewWithTag("np_datetime_minute")\n        mSecondSpinner = findViewById(R.id.np_datetime_second)\n        if (mSecondSpinner == null)\n            mSecondSpinner = findViewWithTag("np_datetime_second")\n\n        setThemeColor(themeColor)\n        setTextSize(normalTextSize, selectTextSize)\n        showLabel(showLabel)\n        setDisplayType(displayType)\n        setSelectedTextBold(selectedTextBold)\n        setTextBold(textBold)\n        setTextColor(textColor)\n        setDividerColor(dividerColor)\n\n\n        //\xe7\xbb\x91\xe5\xae\x9a\xe6\x8e\xa7\xe5\x88\xb6\xe5\x99\xa8\n        bindController(controller ?: DateTimeController())\n\n    }\n\n\n    /**\n     * \xe7\xbb\x91\xe5\xae\x9a\xe6\x8e\xa7\xe5\x88\xb6\xe5\x99\xa8\n     */\n    fun bindController(controller: BaseDateTimeController?) {\n        this.controller = controller\n        if (this.controller == null)\n            this.controller = DateTimeController().bindPicker(YEAR, mYearSpinner)\n                .bindPicker(MONTH, mMonthSpinner)\n                .bindPicker(DAY, mDaySpinner).bindPicker(HOUR, mHourSpinner)\n                .bindPicker(MIN, mMinuteSpinner).bindPicker(SECOND, mSecondSpinner)\n                .bindGlobal(global)?.build()\n        else\n            this.controller?.bindPicker(YEAR, mYearSpinner)\n                ?.bindPicker(MONTH, mMonthSpinner)\n                ?.bindPicker(DAY, mDaySpinner)?.bindPicker(HOUR, mHourSpinner)\n                ?.bindPicker(MIN, mMinuteSpinner)?.bindPicker(SECOND, mSecondSpinner)\n                ?.bindGlobal(global)?.build()\n    }\n\n\n    /**\n     * \xe8\xae\xbe\xe7\xbd\xae\xe5\x9b\xbd\xe9\x99\x85\xe5\x8c\x96\xe6\x97\xa5\xe6\x9c\x9f\xe6\xa0\xbc\xe5\xbc\x8f\xe6\x98\xbe\xe7\xa4\xba\n     * @param global : DateTimeConfig.GLOBAL_LOCAL\n     *                 DateTimeConfig.GLOBAL_CHINA\n     *                 DateTimeConfig.GLOBAL_US\n     */\n    fun setGlobal(global: Int) {\n        this.global = global\n        init()\n    }\n\n    /**\n     * \xe8\xae\xbe\xe7\xbd\xae\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89layout\n     */\n    fun setLayout(@NotNull layout: Int) {\n        if (layout == 0)\n            return\n        layoutResId = layout\n        init()\n    }\n\n    /**\n     * \xe8\xae\xbe\xe7\xbd\xae\xe6\x98\xbe\xe7\xa4\xba\xe7\xb1\xbb\xe5\x9e\x8b\n     *\n     * @param types\n     */\n    fun setDisplayType(types: IntArray?) {\n        if (types == null || types.isEmpty()) return\n        displayType = types\n\n        if (!displayType.contains(YEAR)) {\n            mYearSpinner?.visibility = View.GONE\n        }\n\n        if (!displayType.contains(MONTH)) {\n            mMonthSpinner?.visibility = View.GONE\n        }\n\n        if (!displayType.contains(DAY)) {\n            mDaySpinner?.visibility = View.GONE\n        }\n\n        if (!displayType.contains(HOUR)) {\n            mHourSpinner?.visibility = View.GONE\n        }\n\n        if (!displayType.contains(MIN)) {\n            mMinuteSpinner?.visibility = View.GONE\n        }\n\n        if (!displayType.contains(SECOND)) {\n            mSecondSpinner?.visibility = View.GONE\n        }\n    }\n\n    /**\n     * \xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xbe\xe7\xa4\xbalabel\n     *\n     * @param b\n     */\n    fun showLabel(b: Boolean) {\n        showLabel = b\n        if (b) {\n            mYearSpinner?.label = yearLabel\n            mMonthSpinner?.label = monthLabel\n            mDaySpinner?.label = dayLabel\n            mHourSpinner?.label = hourLabel\n            mMinuteSpinner?.label = minLabel\n            mSecondSpinner?.label = secondLabel\n        } else {\n            mYearSpinner?.label = ""\n            mMonthSpinner?.label = ""\n            mDaySpinner?.label = ""\n            mHourSpinner?.label = ""\n            mMinuteSpinner?.label = ""\n            mSecondSpinner?.label = ""\n        }\n    }\n\n    /**\n     * \xe4\xb8\xbb\xe9\xa2\x98\xe9\xa2\x9c\xe8\x89\xb2\n     *\n     * @param color\n     */\n    fun setThemeColor(@ColorInt color: Int) {\n        if (color == 0) return\n        themeColor = color\n        mYearSpinner?.selectedTextColor = themeColor\n        mMonthSpinner?.selectedTextColor = themeColor\n        mDaySpinner?.selectedTextColor = themeColor\n        mHourSpinner?.selectedTextColor = themeColor\n        mMinuteSpinner?.selectedTextColor = themeColor\n        mSecondSpinner?.selectedTextColor = themeColor\n\n    }\n\n    /**\n     * \xe8\xae\xbe\xe7\xbd\xae\xe9\x80\x89\xe6\x8b\xa9\xe5\x99\xa8\xe5\xad\x97\xe4\xbd\x93\xe9\xa2\x9c\xe8\x89\xb2\n     */\n    fun setTextColor(@ColorInt color: Int) {\n        if (color == 0) return\n        textColor = color\n        mYearSpinner?.textColor = textColor\n        mMonthSpinner?.textColor = textColor\n        mDaySpinner?.textColor = textColor\n        mHourSpinner?.textColor = textColor\n        mMinuteSpinner?.textColor = textColor\n        mSecondSpinner?.textColor = textColor\n    }\n\n    /**\n     * \xe8\xae\xbe\xe7\xbd\xae\xe9\x80\x89\xe6\x8b\xa9\xe5\x99\xa8\xe5\x88\x86\xe5\x89\xb2\xe7\xba\xbf\xe9\xa2\x9c\xe8\x89\xb2\n     */\n    fun setDividerColor(@ColorInt color: Int) {\n        if (color == 0) return\n        dividerColor = color\n        mYearSpinner?.dividerColor = color\n        mMonthSpinner?.dividerColor = color\n        mDaySpinner?.dividerColor = color\n        mHourSpinner?.dividerColor = color\n        mMinuteSpinner?.dividerColor = color\n        mSecondSpinner?.dividerColor = color\n    }\n\n    /**\n     * \xe5\xad\x97\xe4\xbd\x93\xe5\xa4\xa7\xe5\xb0\x8f\n     *\n     * @param normal\n     * @param select\n     */\n    fun setTextSize(@Dimension normal: Int, @Dimension select: Int) {\n        if (normal == 0) return\n        if (select == 0) return\n        var textSize = context!!.dip2px(select.toFloat())\n        var normalTextSize = context!!.dip2px(normal.toFloat())\n        mYearSpinner?.textSize = normalTextSize.toFloat()\n        mMonthSpinner?.textSize = normalTextSize.toFloat()\n        mDaySpinner?.textSize = normalTextSize.toFloat()\n        mHourSpinner?.textSize = normalTextSize.toFloat()\n        mMinuteSpinner?.textSize = normalTextSize.toFloat()\n        mSecondSpinner?.textSize = normalTextSize.toFloat()\n\n        mYearSpinner?.selectedTextSize = textSize.toFloat()\n        mMonthSpinner?.selectedTextSize = textSize.toFloat()\n        mDaySpinner?.selectedTextSize = textSize.toFloat()\n        mHourSpinner?.selectedTextSize = textSize.toFloat()\n        mMinuteSpinner?.selectedTextSize = textSize.toFloat()\n        mSecondSpinner?.selectedTextSize = textSize.toFloat()\n\n    }\n\n    /**\n     * \xe8\xae\xbe\xe7\xbd\xae\xe6\xa0\x87\xe7\xad\xbe\xe6\x96\x87\xe5\xad\x97\n     * @param year \xe5\xb9\xb4\xe6\xa0\x87\xe7\xad\xbe\n     * @param month \xe6\x9c\x88\xe6\xa0\x87\xe7\xad\xbe\n     * @param day \xe6\x97\xa5\xe6\xa0\x87\xe7\xad\xbe\n     * @param hour \xe6\x97\xb6\xe6\xa0\x87\xe7\xad\xbe\n     * @param min \xe5\x88\x86\xe6\xa0\x87\xe7\xad\xbe\n     *  @param min \xe7\xa7\x92\xe6\xa0\x87\xe7\xad\xbe\n     */\n    fun setLabelText(\n        year: String = yearLabel,\n        month: String = monthLabel,\n        day: String = dayLabel,\n        hour: String = hourLabel,\n        min: String = minLabel,\n        second: String = secondLabel\n    ) {\n        this.yearLabel = year\n        this.monthLabel = month\n        this.dayLabel = day\n        this.hourLabel = hour\n        this.minLabel = min\n        this.secondLabel = second\n        showLabel(showLabel)\n    }\n\n\n    /**\n     * \xe8\xae\xbe\xe7\xbd\xae\xe6\x98\xaf\xe5\x90\xa6Picker\xe5\xbe\xaa\xe7\x8e\xaf\xe6\xbb\x9a\xe5\x8a\xa8\n     * @param types \xe9\x9c\x80\xe8\xa6\x81\xe8\xae\xbe\xe7\xbd\xae\xe7\x9a\x84Picker\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x88DateTimeConfig-> YEAR,MONTH,DAY,HOUR,MIN,SECOND\xef\xbc\x89\n     * @param wrapSelector \xe6\x98\xaf\xe5\x90\xa6\xe5\xbe\xaa\xe7\x8e\xaf\xe6\xbb\x9a\xe5\x8a\xa8\n     */\n    fun setWrapSelectorWheel(vararg types: Int, wrapSelector: Boolean) {\n        setWrapSelectorWheel(types.toMutableList(), wrapSelector)\n    }\n\n    /**\n     * \xe8\xae\xbe\xe7\xbd\xae\xe6\x98\xaf\xe5\x90\xa6Picker\xe5\xbe\xaa\xe7\x8e\xaf\xe6\xbb\x9a\xe5\x8a\xa8\n     * @param wrapSelector \xe6\x98\xaf\xe5\x90\xa6\xe5\xbe\xaa\xe7\x8e\xaf\xe6\xbb\x9a\xe5\x8a\xa8\n     */\n    fun setWrapSelectorWheel(wrapSelector: Boolean) {\n        setWrapSelectorWheel(null, wrapSelector)\n    }\n\n    /**\n     * \xe8\x8e\xb7\xe5\x8f\x96\xe7\xb1\xbb\xe5\x9e\x8b\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84NumberPicker\n     * @param displayType \xe7\xb1\xbb\xe5\x9e\x8b\n     */\n    fun getPicker(displayType: Int): NumberPicker? {\n        return when (displayType) {\n            YEAR -> mYearSpinner\n            MONTH -> mMonthSpinner\n            DAY -> mDaySpinner\n            HOUR -> mHourSpinner\n            MIN -> mMinuteSpinner\n            SECOND -> mSecondSpinner\n            else -> null\n        }\n    }\n\n\n    /**\n     * \xe8\xae\xbe\xe7\xbd\xae\xe9\x80\x89\xe6\x8b\xa9\xe5\x99\xa8\xe5\xad\x97\xe4\xbd\x93\xe6\x98\xaf\xe5\x90\xa6\xe5\x8a\xa0\xe7\xb2\x97\n     */\n    fun setTextBold(textBold: Boolean) {\n        this.textBold = textBold\n        mYearSpinner?.isTextBold = textBold\n        mMonthSpinner?.isTextBold = textBold\n        mDaySpinner?.isTextBold = textBold\n        mHourSpinner?.isTextBold = textBold\n        mMinuteSpinner?.isTextBold = textBold\n        mSecondSpinner?.isTextBold = textBold\n    }\n\n\n    /**\n     * \xe8\xae\xbe\xe7\xbd\xae\xe9\x80\x89\xe6\x8b\xa9\xe5\x99\xa8\xe9\x80\x89\xe4\xb8\xad\xe5\xad\x97\xe4\xbd\x93\xe6\x98\xaf\xe5\x90\xa6\xe5\x8a\xa0\xe7\xb2\x97\n     */\n    fun setSelectedTextBold(selectedTextBold: Boolean) {\n        this.selectedTextBold = selectedTextBold\n        mYearSpinner?.isSelectedTextBold = selectedTextBold\n        mMonthSpinner?.isSelectedTextBold = selectedTextBold\n        mDaySpinner?.isSelectedTextBold = selectedTextBold\n        mHourSpinner?.isSelectedTextBold = selectedTextBold\n        mMinuteSpinner?.isSelectedTextBold = selectedTextBold\n        mSecondSpinner?.isSelectedTextBold = selectedTextBold\n    }\n\n\n    override fun setDefaultMillisecond(time: Long) {\n        controller?.setDefaultMillisecond(time)\n    }\n\n    override fun setMinMillisecond(time: Long) {\n        controller?.setMinMillisecond(time)\n    }\n\n    override fun setMaxMillisecond(time: Long) {\n        controller?.setMaxMillisecond(time)\n    }\n\n    override fun setWrapSelectorWheel(types: MutableList<Int>?, wrapSelector: Boolean) {\n        controller?.setWrapSelectorWheel(types, wrapSelector)\n    }\n\n    override fun setOnDateTimeChangedListener(callback: ((Long) -> Unit)?) {\n        controller?.setOnDateTimeChangedListener(callback)\n    }\n\n    override fun getMillisecond(): Long {\n        return controller?.getMillisecond() ?: 0L\n    }\n\n\n}'