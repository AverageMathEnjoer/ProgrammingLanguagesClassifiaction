b'package co.joebirch.composeplayground.material\n\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.material.Switch\nimport androidx.compose.material.SwitchDefaults.colors\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.dp\nimport co.joebirch.composeplayground.ComposableLayout\n\nobject SwitchView : ComposableLayout {\n\n    @Composable\n    override fun build() {\n        Box(\n            modifier = Modifier.fillMaxSize()\n                .background(Color.LightGray)\n        ) {\n            Column(\n                modifier = Modifier.fillMaxSize(),\n                verticalArrangement = Arrangement.SpaceEvenly,\n                horizontalAlignment = Alignment.CenterHorizontally\n            ) {\n                MinimalSwitchComponent()\n            }\n        }\n    }\n\n    @Composable\n    fun MinimalSwitchComponent() {\n        val isChecked = remember { mutableStateOf(false) }\n        Switch(\n            checked = isChecked.value,\n            onCheckedChange = { checked ->\n                isChecked.value = checked\n            }\n        )\n    }\n\n\n\n\n}\n\n@Preview(showBackground = true)\n@Composable\nfun DisabledSwitchComponent() {\n    val isChecked = remember { mutableStateOf(false) }\n    Switch(\n        modifier = Modifier.padding(16.dp),\n        checked = isChecked.value,\n        onCheckedChange = { checked ->\n            isChecked.value = checked\n        },\n        enabled = false\n    )\n}\n\n@Preview(showBackground = true)\n@Composable\nfun CheckedThumbColorSwitchComponent() {\n    val isChecked = remember { mutableStateOf(true) }\n    Switch(\n        modifier = Modifier.padding(16.dp),\n        checked = isChecked.value,\n        onCheckedChange = { checked ->\n            isChecked.value = checked\n        },\n        colors = colors(\n            checkedThumbColor = Color.Red\n        )\n    )\n}\n\n@Preview(showBackground = true)\n@Composable\nfun CheckedTrackColorSwitchComponent() {\n    val isChecked = remember { mutableStateOf(true) }\n    Switch(\n        modifier = Modifier.padding(16.dp),\n        checked = isChecked.value,\n        onCheckedChange = { checked ->\n            isChecked.value = checked\n        },\n        colors = colors(\n            checkedTrackColor = Color.Red\n        )\n    )\n}\n\n@Preview(showBackground = true)\n@Composable\nfun CheckedTrackAlphaSwitchComponent() {\n    val isChecked = remember { mutableStateOf(true) }\n    Switch(\n        modifier = Modifier.padding(16.dp),\n        checked = isChecked.value,\n        onCheckedChange = { checked ->\n            isChecked.value = checked\n        },\n        colors = colors(\n            checkedTrackColor = Color.Red,\n            checkedTrackAlpha = 0.1f\n        )\n    )\n}\n\n@Preview(showBackground = true)\n@Composable\nfun UncheckedThumbColorSwitchComponent() {\n    val isChecked = remember { mutableStateOf(true) }\n    Switch(\n        modifier = Modifier.padding(16.dp),\n        checked = isChecked.value,\n        onCheckedChange = { checked ->\n            isChecked.value = checked\n        },\n        colors = colors(\n            uncheckedThumbColor = Color.Gray\n        )\n    )\n}\n\n@Preview(showBackground = true)\n@Composable\nfun UncheckedTrackColorSwitchComponent() {\n    val isChecked = remember { mutableStateOf(true) }\n    Switch(\n        modifier = Modifier.padding(16.dp),\n        checked = isChecked.value,\n        onCheckedChange = { checked ->\n            isChecked.value = checked\n        },\n        colors = colors(\n            uncheckedTrackColor = Color.LightGray\n        )\n    )\n}\n\n@Preview(showBackground = true)\n@Composable\nfun UncheckedTrackAlphaSwitchComponent() {\n    val isChecked = remember { mutableStateOf(true) }\n    Switch(\n        modifier = Modifier.padding(16.dp),\n        checked = isChecked.value,\n        onCheckedChange = { checked ->\n            isChecked.value = checked\n        },\n        colors = colors(\n            uncheckedTrackColor = Color.LightGray,\n            uncheckedTrackAlpha = 0.1f\n        )\n    )\n}\n\n@Preview(showBackground = true)\n@Composable\nfun DisabledCheckedThumbColorSwitchComponent() {\n    val isChecked = remember { mutableStateOf(true) }\n    Switch(\n        modifier = Modifier.padding(16.dp),\n        checked = isChecked.value,\n        onCheckedChange = { checked ->\n            isChecked.value = checked\n        },\n        colors = colors(\n            disabledCheckedThumbColor = Color.Green\n        )\n    )\n}\n\n@Preview(showBackground = true)\n@Composable\nfun DisabledCheckedTrackColorSwitchComponent() {\n    val isChecked = remember { mutableStateOf(true) }\n    Switch(\n        modifier = Modifier.padding(16.dp),\n        checked = isChecked.value,\n        onCheckedChange = { checked ->\n            isChecked.value = checked\n        },\n        colors = colors(\n            disabledCheckedTrackColor = Color.DarkGray\n        )\n    )\n}\n\n@Preview(showBackground = true)\n@Composable\nfun DisabledUncheckedThumbColorSwitchComponent() {\n    val isChecked = remember { mutableStateOf(false) }\n    Switch(\n        modifier = Modifier.padding(16.dp),\n        checked = isChecked.value,\n        onCheckedChange = { checked ->\n            isChecked.value = checked\n        },\n        colors = colors(\n            disabledUncheckedThumbColor = Color.Gray\n        )\n    )\n}\n\n@Preview(showBackground = true)\n@Composable\nfun DisabledUncheckedTrackColorSwitchComponent() {\n    val isChecked = remember { mutableStateOf(false) }\n    Switch(\n        modifier = Modifier.padding(16.dp),\n        checked = isChecked.value,\n        onCheckedChange = { checked ->\n            isChecked.value = checked\n        },\n        colors = colors(\n            disabledUncheckedTrackColor = Color.LightGray\n        )\n    )\n}'