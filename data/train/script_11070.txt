b'\xef\xbb\xbfusing System;\nusing Asn1;\nusing System.Collections.Generic;\nusing System.Text;\nusing System.IO;\n\nnamespace Rubeus\n{\n    //EncKrbPrivPart  ::= [APPLICATION 28] SEQUENCE {\n    //        user-data       [0] OCTET STRING,\n    //        timestamp       [1] KerberosTime OPTIONAL,\n    //        usec            [2] Microseconds OPTIONAL,\n    //        seq-number      [3] UInt32 OPTIONAL,\n    //        s-address       [4] HostAddress -- sender\'s addr --,\n    //        r-address       [5] HostAddress OPTIONAL -- recip\'s addr\n    //}\n\n    // NOTE: we only use:\n    //  user-data       [0] OCTET STRING\n    //  seq-number      [3] UInt32 OPTIONAL\n    //  s-address       [4] HostAddress\n\n    // only used by the changepw command\n\n    public class EncKrbPrivPart\n    {\n        public EncKrbPrivPart() : this("", ""){}\n\n        public EncKrbPrivPart(string newPassword, string hostName) : this(null, null, newPassword, hostName){}\n\n        public EncKrbPrivPart(string username, string realm, string newPassword, string hostName) {\n\n            this.username = username;\n            this.realm = realm;\n            new_password = newPassword;\n\n            var rand = new Random();\n            seq_number = (UInt32)rand.Next(1, Int32.MaxValue);\n\n            host_name = hostName;\n        }\n\n        public AsnElt Encode()\n        {\n            // user-data       [0] OCTET STRING\n            byte[] pwBytes = Encoding.ASCII.GetBytes(new_password);\n            AsnElt new_passwordAsn = AsnElt.MakeBlob(pwBytes);\n \n            AsnElt new_passwordSeq;\n            if (username == null)\n                new_passwordSeq = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] {\n                     AsnElt.MakeExplicit(AsnElt.CONTEXT, 0, new_passwordAsn),\n                });\n            else {\n              \n                PrincipalName principal = new PrincipalName(username);\n       \n                new_passwordSeq = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] { \n                    AsnElt.MakeExplicit(AsnElt.CONTEXT, 0, new_passwordAsn), \n                    AsnElt.MakeImplicit(AsnElt.CONTEXT, 1, principal.Encode()),\n                    AsnElt.MakeExplicit(AsnElt.CONTEXT, 2, AsnElt.MakeString(AsnElt.GeneralString, realm)),\n                });\n            }\n\n            new_passwordSeq = AsnElt.MakeExplicit(AsnElt.CONTEXT, 0, AsnElt.MakeBlob(new_passwordSeq.Encode()));\n\n            // seq-number      [3] UInt32 OPTIONAL\n            AsnElt seq_numberAsn = AsnElt.MakeInteger(seq_number);\n            AsnElt seq_numberSeq = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] { seq_numberAsn });\n            seq_numberSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 3, seq_numberSeq);\n\n            //  s-address       [4] HostAddress\n            AsnElt hostAddressTypeAsn = AsnElt.MakeInteger(20);\n            AsnElt hostAddressTypeSeq = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] { hostAddressTypeAsn });\n            hostAddressTypeSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 0, hostAddressTypeSeq);\n\n            byte[] hostAddressAddressBytes = Encoding.ASCII.GetBytes(host_name);\n            AsnElt hostAddressAddressAsn = AsnElt.MakeBlob(hostAddressAddressBytes);\n            AsnElt hostAddressAddressSeq = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] { hostAddressAddressAsn });\n            hostAddressAddressSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 1, hostAddressAddressSeq);\n\n            AsnElt hostAddressSeq = AsnElt.Make(AsnElt.SEQUENCE, new[] { hostAddressTypeSeq, hostAddressAddressSeq });\n            AsnElt hostAddressSeq2 = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] { hostAddressSeq });\n            hostAddressSeq2 = AsnElt.MakeImplicit(AsnElt.CONTEXT, 4, hostAddressSeq2);\n\n            AsnElt seq = AsnElt.Make(AsnElt.SEQUENCE, new[] { new_passwordSeq , seq_numberSeq, hostAddressSeq2 });         \n            AsnElt seq2 = AsnElt.Make(AsnElt.SEQUENCE, new[] { seq });\n\n            seq2 = AsnElt.MakeImplicit(AsnElt.APPLICATION, 28, seq2);\n\n            return seq2;\n        }\n\n        public string new_password { get; set; }\n\n        public UInt32 seq_number { get; set; }\n\n        public string host_name { get; set; }\n\n        public string username { get; set; }\n\n        public string realm { get; set; }\n    }\n}'