b'package droidninja.filepicker.fragments\n\nimport android.content.Context\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.ProgressBar\nimport androidx.lifecycle.Observer\nimport androidx.lifecycle.ViewModelProvider\nimport androidx.viewpager.widget.ViewPager\nimport com.google.android.material.tabs.TabLayout\nimport droidninja.filepicker.PickerManager\nimport droidninja.filepicker.R\nimport droidninja.filepicker.adapters.SectionsPagerAdapter\nimport droidninja.filepicker.models.Document\nimport droidninja.filepicker.models.FileType\nimport droidninja.filepicker.utils.TabLayoutHelper\nimport droidninja.filepicker.viewmodels.VMDocPicker\n\nclass DocPickerFragment : BaseFragment() {\n\n    lateinit var tabLayout: TabLayout\n    lateinit var viewModel: VMDocPicker\n    lateinit var viewPager: ViewPager\n    private var progressBar: ProgressBar? = null\n    private var mListener: DocPickerFragmentListener? = null\n\n    interface DocPickerFragmentListener\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setHasOptionsMenu(true)\n        viewModel = ViewModelProvider(this, ViewModelProvider.AndroidViewModelFactory(requireActivity().application)).get(VMDocPicker::class.java)\n    }\n\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n                              savedInstanceState: Bundle?): View? {\n        // Inflate the layout for this fragment\n        return inflater.inflate(R.layout.fragment_doc_picker, container, false)\n    }\n\n    override fun onAttach(context: Context) {\n        super.onAttach(context)\n        if (context is DocPickerFragmentListener) {\n            mListener = context\n        } else {\n            throw RuntimeException("$context must implement DocPickerFragmentListener")\n        }\n    }\n\n    override fun onDetach() {\n        super.onDetach()\n        mListener = null\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        setViews(view)\n        initView()\n    }\n\n    private fun initView() {\n        setUpViewPager()\n        viewModel.lvDocData.observe(viewLifecycleOwner, Observer { files ->\n            progressBar?.visibility = View.GONE\n            setDataOnFragments(files)\n        })\n        viewModel.getDocs(PickerManager.getFileTypes(), PickerManager.sortingType.comparator)\n    }\n\n    private fun setViews(view: View) {\n        tabLayout = view.findViewById(R.id.tabs)\n        viewPager = view.findViewById(R.id.viewPager)\n        progressBar = view.findViewById(R.id.progress_bar)\n\n        tabLayout.tabGravity = TabLayout.GRAVITY_FILL\n        tabLayout.tabMode = TabLayout.MODE_SCROLLABLE\n    }\n\n    private fun setDataOnFragments(filesMap: Map<FileType, List<Document>>) {\n        view.let {\n            val sectionsPagerAdapter = viewPager.adapter as SectionsPagerAdapter?\n            if (sectionsPagerAdapter != null) {\n                for (index in 0 until sectionsPagerAdapter.count) {\n                    val docFragment = sectionsPagerAdapter.getItem(index)\n                    if (docFragment is DocFragment) {\n                        val fileType = docFragment.fileType\n                        if (fileType != null) {\n                            val filesFilteredByType = filesMap[fileType]\n                            if (filesFilteredByType != null)\n                                docFragment.updateList(filesFilteredByType)\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    private fun setUpViewPager() {\n        val adapter = SectionsPagerAdapter(childFragmentManager)\n        val supportedTypes = PickerManager.getFileTypes()\n        for (index in supportedTypes.indices) {\n            adapter.addFragment(DocFragment.newInstance(supportedTypes[index]), supportedTypes[index].title)\n        }\n\n        viewPager.offscreenPageLimit = supportedTypes.size\n        viewPager.adapter = adapter\n        tabLayout.setupWithViewPager(viewPager)\n\n        val mTabLayoutHelper = TabLayoutHelper(tabLayout, viewPager)\n        mTabLayoutHelper.isAutoAdjustTabModeEnabled = true\n    }\n\n    companion object {\n\n        private const val TAG = "DocPickerFragment"\n        fun newInstance(): DocPickerFragment {\n            return DocPickerFragment()\n        }\n    }\n}\n'