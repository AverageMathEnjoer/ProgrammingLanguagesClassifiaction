b'package effectivejava.chapter7.item48;\n\nimport java.math.BigInteger;\nimport java.util.stream.Stream;\n\nimport static java.math.BigInteger.*;\n\n// Parallel stream-based program to generate the first 20 Mersenne primes - HANGS!!! (Page 222)\npublic class ParallelMersennePrimes {\n    public static void main(String[] args) {\n        primes().map(p -> TWO.pow(p.intValueExact()).subtract(ONE))\n                .parallel()\n                .filter(mersenne -> mersenne.isProbablePrime(50))\n                .limit(20)\n                .forEach(System.out::println);\n    }\n\n    static Stream<BigInteger> primes() {\n        return Stream.iterate(TWO, BigInteger::nextProbablePrime);\n    }\n}\n'