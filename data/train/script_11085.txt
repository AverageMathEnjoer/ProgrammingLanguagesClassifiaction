b'package com.zzg.mybatis.generator.controller;\n\nimport com.jcraft.jsch.JSchException;\nimport com.jcraft.jsch.Session;\nimport com.zzg.mybatis.generator.model.DatabaseConfig;\nimport com.zzg.mybatis.generator.util.ConfigHelper;\nimport com.zzg.mybatis.generator.util.DbUtil;\nimport com.zzg.mybatis.generator.view.AlertUtil;\nimport javafx.event.ActionEvent;\nimport javafx.fxml.FXML;\nimport javafx.scene.control.ChoiceBox;\nimport javafx.scene.control.Label;\nimport javafx.scene.control.PasswordField;\nimport javafx.scene.control.TextField;\nimport javafx.scene.layout.HBox;\nimport javafx.scene.paint.Paint;\nimport javafx.stage.FileChooser;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.File;\nimport java.net.URL;\nimport java.util.ResourceBundle;\nimport java.util.concurrent.*;\n\n/**\n * Project: mybatis-generator-gui\n *\n * @author slankka on 2018/12/30.\n */\npublic class OverSshController extends DbConnectionController {\n\n    private Logger logger = LoggerFactory.getLogger(OverSshController.class);\n\n    @FXML\n    public HBox pubkeyBox;\n    @FXML\n    public Label lPortLabel;\n    @FXML\n    public TextField sshUserField;\n    @FXML\n    public ChoiceBox<String> authTypeChoice;\n    @FXML\n    public Label sshPasswordLabel;\n    @FXML\n    public PasswordField sshPasswordField;\n    @FXML\n    private TextField sshHostField;\n    @FXML\n    private TextField sshdPortField;\n    @FXML\n    private TextField lportField;\n    @FXML\n    private TextField rportField;\n    @FXML\n    private Label note;\n    @FXML\n    private Label pubkeyBoxLabel;\n    @FXML\n    private TextField sshPubKeyField;\n    @FXML\n    public PasswordField sshPubkeyPasswordField;\n    @FXML\n    public Label sshPubkeyPasswordLabel;\n    @FXML\n    public Label sshPubkeyPasswordNote;\n\n    private FileChooser fileChooser = new FileChooser();\n\n    private File privateKey;\n    @Override\n    public void initialize(URL location, ResourceBundle resources) {\n        fileChooser.setTitle("\xe9\x80\x89\xe6\x8b\xa9SSH\xe7\xa7\x98\xe9\x92\xa5\xe6\x96\x87\xe4\xbb\xb6");\n        fileChooser.setInitialDirectory(new File(System.getProperty("user.home")));\n        authTypeChoice.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> {\n            if ("PubKey".equals(newValue)) {\n                //\xe5\x85\xac\xe9\x92\xa5\xe8\xae\xa4\xe8\xaf\x81\n                sshPasswordField.setVisible(false);\n                sshPasswordLabel.setVisible(false);\n                pubkeyBox.setVisible(true);\n                pubkeyBoxLabel.setVisible(true);\n                sshPubkeyPasswordField.setVisible(true);\n                sshPubkeyPasswordLabel.setVisible(true);\n                sshPubkeyPasswordNote.setVisible(true);\n            }else {\n                //\xe5\xaf\x86\xe7\xa0\x81\xe8\xae\xa4\xe8\xaf\x81\n                pubkeyBox.setVisible(false);\n                pubkeyBoxLabel.setVisible(false);\n                sshPubkeyPasswordField.setVisible(false);\n                sshPubkeyPasswordLabel.setVisible(false);\n                sshPubkeyPasswordNote.setVisible(false);\n                sshPasswordLabel.setVisible(true);\n                sshPasswordField.setVisible(true);\n            }\n        });\n    }\n\n    public void setDbConnectionConfig(DatabaseConfig databaseConfig) {\n        if (databaseConfig == null) {\n            return;\n        }\n        isUpdate = true;\n        super.setConfig(databaseConfig);\n        this.sshdPortField.setText(databaseConfig.getSshPort());\n        this.sshHostField.setText(databaseConfig.getSshHost());\n        this.lportField.setText(databaseConfig.getLport());\n        this.rportField.setText(databaseConfig.getRport());\n        this.sshUserField.setText(databaseConfig.getSshUser());\n        this.sshPasswordField.setText(databaseConfig.getSshPassword());\n        //\xe4\xbe\x8b\xe5\xa6\x82\xef\xbc\x9a\xe9\xbb\x98\xe8\xae\xa4\xe4\xbb\x8e\xe6\x9c\xac\xe6\x9c\xba\xe7\x9a\x84 3306 -> \xe8\xbd\xac\xe5\x8f\x91\xe5\x88\xb0 3306\n        if (StringUtils.isBlank(this.lportField.getText())) {\n            this.lportField.setText(databaseConfig.getPort());\n        }\n        if (StringUtils.isBlank(this.rportField.getText())) {\n            this.rportField.setText(databaseConfig.getPort());\n        }\n        if (StringUtils.isNotBlank(databaseConfig.getPrivateKey())) {\n            this.sshPubKeyField.setText(databaseConfig.getPrivateKey());\n            this.sshPubkeyPasswordField.setText(databaseConfig.getPrivateKeyPassword());\n            authTypeChoice.getSelectionModel().select("PubKey");\n        }\n        checkInput();\n    }\n\n    @FXML\n    public void checkInput() {\n        DatabaseConfig databaseConfig = extractConfigFromUi();\n        if (authTypeChoice.getValue().equals("Password") && (\n            StringUtils.isBlank(databaseConfig.getSshHost())\n                || StringUtils.isBlank(databaseConfig.getSshPort())\n                || StringUtils.isBlank(databaseConfig.getSshUser())\n                || StringUtils.isBlank(databaseConfig.getSshPassword())\n        )\n            || authTypeChoice.getValue().equals("PubKey") && (\n            StringUtils.isBlank(databaseConfig.getSshHost())\n                || StringUtils.isBlank(databaseConfig.getSshPort())\n                || StringUtils.isBlank(databaseConfig.getSshUser())\n                || StringUtils.isBlank(databaseConfig.getPrivateKey())\n        )\n        ) {\n            note.setText("\xe5\xbd\x93\xe5\x89\x8dSSH\xe9\x85\x8d\xe7\xbd\xae\xe8\xbe\x93\xe5\x85\xa5\xe4\xb8\x8d\xe5\xae\x8c\xe6\x95\xb4\xef\xbc\x8cOVER SSH\xe4\xb8\x8d\xe7\x94\x9f\xe6\x95\x88");\n            note.setTextFill(Paint.valueOf("#ff666f"));\n        } else {\n            note.setText("\xe5\xbd\x93\xe5\x89\x8dSSH\xe9\x85\x8d\xe7\xbd\xae\xe7\x94\x9f\xe6\x95\x88");\n            note.setTextFill(Paint.valueOf("#5da355"));\n        }\n    }\n\n    public void setLPortLabelText(String text) {\n        lPortLabel.setText(text);\n    }\n\n    public void recoverNotice() {\n        this.lPortLabel.setText("\xe6\xb3\xa8\xe6\x84\x8f\xe4\xb8\x8d\xe8\xa6\x81\xe5\xa1\xab\xe5\x86\x99\xe8\xa2\xab\xe5\x85\xb6\xe4\xbb\x96\xe7\xa8\x8b\xe5\xba\x8f\xe5\x8d\xa0\xe7\x94\xa8\xe7\x9a\x84\xe7\xab\xaf\xe5\x8f\xa3");\n    }\n\n    public DatabaseConfig extractConfigFromUi() {\n        String name = nameField.getText();\n        String host = hostField.getText();\n        String port = portField.getText();\n        String userName = userNameField.getText();\n        String password = passwordField.getText();\n        String encoding = encodingChoice.getValue();\n        String dbType = dbTypeChoice.getValue();\n        String schema = schemaField.getText();\n        String authType = authTypeChoice.getValue();\n        DatabaseConfig config = new DatabaseConfig();\n        config.setName(name);\n        config.setDbType(dbType);\n        config.setHost(host);\n        config.setPort(port);\n        config.setUsername(userName);\n        config.setPassword(password);\n        config.setSchema(schema);\n        config.setEncoding(encoding);\n        config.setSshHost(this.sshHostField.getText());\n        config.setSshPort(this.sshdPortField.getText());\n        config.setLport(this.lportField.getText());\n        config.setRport(this.rportField.getText());\n        config.setSshUser(this.sshUserField.getText());\n        config.setSshPassword(this.sshPasswordField.getText());\n        if ("PubKey".equals(authType)) {\n            config.setPrivateKey(this.privateKey.getAbsolutePath());\n            config.setPrivateKeyPassword(this.sshPubkeyPasswordField.getText());\n        }\n        return config;\n    }\n\n    public void saveConfig() {\n        DatabaseConfig databaseConfig = extractConfigFromUi();\n        if (StringUtils.isAnyEmpty(\n                databaseConfig.getName(),\n                databaseConfig.getHost(),\n                databaseConfig.getPort(),\n                databaseConfig.getUsername(),\n                databaseConfig.getEncoding(),\n                databaseConfig.getDbType(),\n                databaseConfig.getSchema())) {\n            AlertUtil.showWarnAlert("\xe5\xaf\x86\xe7\xa0\x81\xe4\xbb\xa5\xe5\xa4\x96\xe5\x85\xb6\xe4\xbb\x96\xe5\xad\x97\xe6\xae\xb5\xe5\xbf\x85\xe5\xa1\xab");\n            return;\n        }\n        try {\n            ConfigHelper.saveDatabaseConfig(this.isUpdate, primayKey, databaseConfig);\n            this.tabPaneController.getDialogStage().close();\n            mainUIController.loadLeftDBTree();\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n            AlertUtil.showErrorAlert(e.getMessage());\n        }\n    }\n\n    @FXML\n    public void testSSH() {\n        Session session = DbUtil.getSSHSession(extractConfigFromUi());\n        if (session == null) {\n            AlertUtil.showErrorAlert("\xe8\xaf\xb7\xe6\xa3\x80\xe6\x9f\xa5\xe4\xb8\xbb\xe6\x9c\xba\xef\xbc\x8c\xe7\xab\xaf\xe5\x8f\xa3\xef\xbc\x8c\xe7\x94\xa8\xe6\x88\xb7\xe5\x90\x8d\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a\xe5\xaf\x86\xe7\xa0\x81/\xe7\xa7\x98\xe9\x92\xa5\xe6\x98\xaf\xe5\x90\xa6\xe5\xa1\xab\xe5\x86\x99\xe6\xad\xa3\xe7\xa1\xae");\n            return;\n        }\n        ExecutorService executorService = Executors.newSingleThreadExecutor();\n        Future<?> result = executorService.submit(() -> {\n            try {\n                session.connect();\n            } catch (JSchException e) {\n                logger.error("Connect Over SSH failed", e);\n                throw new RuntimeException(e.getMessage());\n            }\n        });\n        executorService.shutdown();\n        try {\n            boolean b = executorService.awaitTermination(5, TimeUnit.SECONDS);\n            if (!b) {\n                throw new TimeoutException("\xe8\xbf\x9e\xe6\x8e\xa5\xe8\xb6\x85\xe6\x97\xb6");\n            }\n            result.get();\n            AlertUtil.showInfoAlert("\xe8\xbf\x9e\xe6\x8e\xa5SSH\xe6\x9c\x8d\xe5\x8a\xa1\xe5\x99\xa8\xe6\x88\x90\xe5\x8a\x9f\xef\xbc\x8c\xe6\x81\xad\xe5\x96\x9c\xe4\xbd\xa0\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbd\xbf\xe7\x94\xa8OverSSH\xe5\x8a\x9f\xe8\x83\xbd");\n            recoverNotice();\n        } catch (Exception e) {\n            AlertUtil.showErrorAlert("\xe8\xaf\xb7\xe6\xa3\x80\xe6\x9f\xa5\xe4\xb8\xbb\xe6\x9c\xba\xef\xbc\x8c\xe7\xab\xaf\xe5\x8f\xa3\xef\xbc\x8c\xe7\x94\xa8\xe6\x88\xb7\xe5\x90\x8d\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a\xe5\xaf\x86\xe7\xa0\x81/\xe7\xa7\x98\xe9\x92\xa5\xe6\x98\xaf\xe5\x90\xa6\xe5\xa1\xab\xe5\x86\x99\xe6\xad\xa3\xe7\xa1\xae: " + e.getMessage());\n        } finally {\n            DbUtil.shutdownPortForwarding(session);\n        }\n    }\n\n    @FXML\n    public void reset(ActionEvent actionEvent) {\n        this.sshUserField.clear();\n        this.sshPasswordField.clear();\n        this.sshdPortField.clear();\n        this.sshHostField.clear();\n        this.lportField.clear();\n        this.rportField.clear();\n        this.sshPubKeyField.clear();\n        recoverNotice();\n    }\n\n    public void choosePubKey(ActionEvent actionEvent) {\n        this.privateKey = fileChooser.showOpenDialog(getDialogStage());\n        sshPubKeyField.setText(this.privateKey.getAbsolutePath());\n    }\n}\n'