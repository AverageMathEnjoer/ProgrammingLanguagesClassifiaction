b'package droidninja.filepicker.viewmodels\n\nimport android.app.Application\nimport android.content.ContentUris\nimport android.database.Cursor\nimport android.provider.BaseColumns\nimport android.provider.MediaStore\nimport android.text.TextUtils\nimport androidx.annotation.WorkerThread\nimport androidx.lifecycle.LiveData\nimport androidx.lifecycle.MutableLiveData\nimport droidninja.filepicker.FilePickerConst\nimport droidninja.filepicker.PickerManager\nimport droidninja.filepicker.models.Document\nimport droidninja.filepicker.models.FileType\nimport droidninja.filepicker.utils.FilePickerUtils\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext\nimport java.io.File\nimport java.util.*\n\nclass VMDocPicker(application: Application) : BaseViewModel(application) {\n    private val _lvDocData = MutableLiveData<HashMap<FileType, List<Document>>>()\n    val lvDocData: LiveData<HashMap<FileType, List<Document>>>\n        get() = _lvDocData\n\n\n    fun getDocs(fileTypes: List<FileType>, comparator: Comparator<Document>?) {\n        launchDataLoad {\n            val dirs = queryDocs(fileTypes, comparator)\n            _lvDocData.postValue(dirs)\n        }\n    }\n\n    @WorkerThread\n    suspend fun queryDocs(fileTypes: List<FileType>, comparator: Comparator<Document>?): HashMap<FileType, List<Document>> {\n        var data = HashMap<FileType, List<Document>>()\n        withContext(Dispatchers.IO) {\n\n            val selection = ("${MediaStore.Files.FileColumns.MEDIA_TYPE}!=${MediaStore.Files.FileColumns.MEDIA_TYPE_IMAGE}" +\n                    " AND ${MediaStore.Files.FileColumns.MEDIA_TYPE}!=${MediaStore.Files.FileColumns.MEDIA_TYPE_VIDEO}")\n\n            val DOC_PROJECTION = arrayOf(MediaStore.Files.FileColumns._ID,\n                    MediaStore.Files.FileColumns.DATA,\n                    MediaStore.Files.FileColumns.MIME_TYPE,\n                    MediaStore.Files.FileColumns.SIZE,\n                    MediaStore.Files.FileColumns.DATE_ADDED,\n                    MediaStore.Files.FileColumns.TITLE)\n\n            val cursor = getApplication<Application>().contentResolver.query(MediaStore.Files.getContentUri("external"), DOC_PROJECTION, selection, null, MediaStore.Files.FileColumns.DATE_ADDED + " DESC")\n\n            if (cursor != null) {\n                data = createDocumentType(fileTypes, comparator, getDocumentFromCursor(cursor))\n                cursor.close()\n            }\n        }\n        return data\n    }\n\n    @WorkerThread\n    private fun createDocumentType(fileTypes: List<FileType>, comparator: Comparator<Document>?, documents: MutableList<Document>): HashMap<FileType, List<Document>> {\n        val documentMap = HashMap<FileType, List<Document>>()\n\n        for (fileType in fileTypes) {\n            val documentListFilteredByType = documents.filter { document -> FilePickerUtils.contains(fileType.extensions, document.mimeType) }\n\n            comparator?.let {\n                documentListFilteredByType.sortedWith(comparator)\n            }\n\n            documentMap[fileType] = documentListFilteredByType\n        }\n\n        return documentMap\n    }\n\n    @WorkerThread\n    private fun getDocumentFromCursor(data: Cursor): MutableList<Document> {\n        val documents = mutableListOf<Document>()\n        while (data.moveToNext()) {\n\n            val imageId = data.getLong(data.getColumnIndexOrThrow(BaseColumns._ID))\n            val path = data.getString(data.getColumnIndexOrThrow(MediaStore.MediaColumns.DATA))\n            val title = data.getString(data.getColumnIndexOrThrow(MediaStore.Files.FileColumns.TITLE))\n\n            if (path != null) {\n\n                val fileType = getFileType(PickerManager.getFileTypes(), path)\n                val file = File(path)\n                val contentUri = ContentUris.withAppendedId(\n                        MediaStore.Files.getContentUri(MediaStore.VOLUME_EXTERNAL),\n                        imageId\n                )\n                if (fileType != null && !file.isDirectory && file.exists()) {\n\n                    val document = Document(imageId, title, contentUri)\n                    document.fileType = fileType\n\n                    val mimeType = data.getString(data.getColumnIndexOrThrow(MediaStore.Files.FileColumns.MIME_TYPE))\n                    if (mimeType != null && !TextUtils.isEmpty(mimeType)) {\n                        document.mimeType = mimeType\n                    } else {\n                        document.mimeType = ""\n                    }\n\n                    document.size = data.getString(data.getColumnIndexOrThrow(MediaStore.Files.FileColumns.SIZE))\n\n                    if (!documents.contains(document)) documents.add(document)\n                }\n            }\n        }\n\n        return documents\n    }\n\n    private fun getFileType(types: ArrayList<FileType>, path: String): FileType? {\n        for (index in types.indices) {\n            for (string in types[index].extensions) {\n                if (path.endsWith(string)) return types[index]\n            }\n        }\n        return null\n    }\n}'