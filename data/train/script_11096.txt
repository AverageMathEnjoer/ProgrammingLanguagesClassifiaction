b'/*\n *  Copyright 2008 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the "License");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an "AS IS" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\npackage com.zzg.mybatis.generator.plugins;\n\nimport org.mybatis.generator.api.CommentGenerator;\nimport org.mybatis.generator.api.IntrospectedColumn;\nimport org.mybatis.generator.api.IntrospectedTable;\nimport org.mybatis.generator.api.dom.java.*;\nimport org.mybatis.generator.api.dom.xml.XmlElement;\nimport org.mybatis.generator.internal.util.StringUtility;\n\nimport java.util.Properties;\nimport java.util.Set;\n\nimport static org.mybatis.generator.internal.util.StringUtility.isTrue;\n\n/**\n * \xe6\xad\xa4\xe6\x8f\x92\xe4\xbb\xb6\xe4\xbd\xbf\xe7\x94\xa8\xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x93\xe8\xa1\xa8\xe4\xb8\xad\xe5\x88\x97\xe7\x9a\x84\xe6\xb3\xa8\xe9\x87\x8a\xe6\x9d\xa5\xe7\x94\x9f\xe6\x88\x90Java Model\xe4\xb8\xad\xe5\xb1\x9e\xe6\x80\xa7\xe7\x9a\x84\xe6\xb3\xa8\xe9\x87\x8a\n *\n * @author Owen Zou\n * \n */\npublic class DbRemarksCommentGenerator implements CommentGenerator {\n\n\n    private Properties properties;\n    private boolean columnRemarks;\n    private boolean isAnnotations;\n\n    public DbRemarksCommentGenerator() {\n        super();\n        properties = new Properties();\n    }\n\n\n    public void addJavaFileComment(CompilationUnit compilationUnit) {\n        // add no file level comments by default\n        if (isAnnotations) {\n            compilationUnit.addImportedType(new FullyQualifiedJavaType("javax.persistence.Table"));\n            compilationUnit.addImportedType(new FullyQualifiedJavaType("javax.persistence.Id"));\n            compilationUnit.addImportedType(new FullyQualifiedJavaType("javax.persistence.Column"));\n            compilationUnit.addImportedType(new FullyQualifiedJavaType("javax.persistence.GeneratedValue"));\n            compilationUnit.addImportedType(new FullyQualifiedJavaType("org.hibernate.validator.constraints.NotEmpty"));\n        }\n    }\n\n    /**\n     * Adds a suitable comment to warn users that the element was generated, and\n     * when it was generated.\n     */\n    public void addComment(XmlElement xmlElement) {\n    }\n\n    public void addRootComment(XmlElement rootElement) {\n        // add no document level comments by default\n        return;\n    }\n\n\t@Override\n\tpublic void addGeneralMethodAnnotation(Method method, IntrospectedTable introspectedTable, Set<FullyQualifiedJavaType> set) {\n\n\n\t}\n\n\t@Override\n\tpublic void addGeneralMethodAnnotation(Method method, IntrospectedTable introspectedTable, IntrospectedColumn introspectedColumn, Set<FullyQualifiedJavaType> set) {\n\n\t}\n\n\t@Override\n\tpublic void addFieldAnnotation(Field field, IntrospectedTable introspectedTable, Set<FullyQualifiedJavaType> set) {\n\n\t}\n\n\t@Override\n\tpublic void addFieldAnnotation(Field field, IntrospectedTable introspectedTable, IntrospectedColumn introspectedColumn, Set<FullyQualifiedJavaType> set) {\n\n\t}\n\n\t@Override\n\tpublic void addClassAnnotation(InnerClass innerClass, IntrospectedTable introspectedTable, Set<FullyQualifiedJavaType> set) {\n\t}\n\n\tpublic void addConfigurationProperties(Properties properties) {\n        this.properties.putAll(properties);\n        columnRemarks = isTrue(properties\n                .getProperty("columnRemarks"));\n        isAnnotations = isTrue(properties\n                .getProperty("annotations"));\n    }\n\n    public void addClassComment(InnerClass innerClass,\n            IntrospectedTable introspectedTable) {\n    }\n\n    public void addModelClassComment(TopLevelClass topLevelClass,\n                                IntrospectedTable introspectedTable) {\n        topLevelClass.addJavaDocLine("/**");\n        topLevelClass.addJavaDocLine(" * @author ");\n        topLevelClass.addJavaDocLine(" * " + introspectedTable.getRemarks());\n        topLevelClass.addJavaDocLine(" */");\n        if(isAnnotations) {\n            topLevelClass.addAnnotation("@Table(name=\\"" + introspectedTable.getFullyQualifiedTableNameAtRuntime() + "\\")");\n        }\n    }\n\n    public void addEnumComment(InnerEnum innerEnum,\n            IntrospectedTable introspectedTable) {\n    }\n\n    public void addFieldComment(Field field,\n            IntrospectedTable introspectedTable,\n            IntrospectedColumn introspectedColumn) {\n        if (StringUtility.stringHasValue(introspectedColumn.getRemarks())) {\n            field.addJavaDocLine("/**");\n            StringBuilder sb = new StringBuilder();\n            sb.append(" * ");\n            sb.append(introspectedColumn.getRemarks());\n            field.addJavaDocLine(sb.toString());\n            field.addJavaDocLine(" */");\n        }\n\n        if (isAnnotations) {\n            boolean isId = false;\n            for (IntrospectedColumn column : introspectedTable.getPrimaryKeyColumns()) {\n                if (introspectedColumn == column) {\n                    isId = true;\n                    field.addAnnotation("@Id");\n                    field.addAnnotation("@GeneratedValue");\n                    break;\n                }\n            }\n            if (!introspectedColumn.isNullable() && !isId){\n                field.addAnnotation("@NotEmpty");\n            }\n            if (introspectedColumn.isIdentity()) {\n                if (introspectedTable.getTableConfiguration().getGeneratedKey().getRuntimeSqlStatement().equals("JDBC")) {\n                    field.addAnnotation("@GeneratedValue(generator = \\"JDBC\\")");\n                } else {\n                    field.addAnnotation("@GeneratedValue(strategy = GenerationType.IDENTITY)");\n                }\n            } else if (introspectedColumn.isSequenceColumn()) {\n                field.addAnnotation("@SequenceGenerator(name=\\"\\",sequenceName=\\"" + introspectedTable.getTableConfiguration().getGeneratedKey().getRuntimeSqlStatement() + "\\")");\n            }\n        }\n    }\n\n    public void addFieldComment(Field field, IntrospectedTable introspectedTable) {\n    }\n\n    public void addGeneralMethodComment(Method method,\n            IntrospectedTable introspectedTable) {\n    }\n\n    public void addGetterComment(Method method,\n            IntrospectedTable introspectedTable,\n            IntrospectedColumn introspectedColumn) {\n    }\n\n    public void addSetterComment(Method method,\n            IntrospectedTable introspectedTable,\n            IntrospectedColumn introspectedColumn) {\n    }\n\n    public void addClassComment(InnerClass innerClass,\n            IntrospectedTable introspectedTable, boolean markAsDoNotDelete) {\n        innerClass.addJavaDocLine("/**"); //$NON-NLS-1$\n        innerClass.addJavaDocLine(" */"); //$NON-NLS-1$\n    }\n}\n'