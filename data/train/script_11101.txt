b'package com.codeest.geeknews.presenter.gank;\n\nimport com.codeest.geeknews.app.Constants;\nimport com.codeest.geeknews.base.RxPresenter;\nimport com.codeest.geeknews.component.RxBus;\nimport com.codeest.geeknews.model.DataManager;\nimport com.codeest.geeknews.model.bean.GankItemBean;\nimport com.codeest.geeknews.model.bean.GankSearchItemBean;\nimport com.codeest.geeknews.model.event.SearchEvent;\nimport com.codeest.geeknews.model.http.response.GankHttpResponse;\nimport com.codeest.geeknews.base.contract.gank.TechContract;\nimport com.codeest.geeknews.ui.gank.fragment.GankMainFragment;\nimport com.codeest.geeknews.util.RxUtil;\nimport com.codeest.geeknews.widget.CommonSubscriber;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport javax.inject.Inject;\n\nimport io.reactivex.annotations.NonNull;\nimport io.reactivex.functions.Function;\nimport io.reactivex.functions.Predicate;\n\n/**\n * Created by codeest on 16/8/20.\n */\n\npublic class TechPresenter extends RxPresenter<TechContract.View> implements TechContract.Presenter{\n\n    private DataManager mDataManager;\n    private static final int NUM_OF_PAGE = 20;\n\n    private int currentPage = 1;\n    private String queryStr = null;\n    private String currentTech = GankMainFragment.tabTitle[0];\n    private int currentType = Constants.TYPE_ANDROID;\n\n    @Inject\n    public TechPresenter(DataManager mDataManager) {\n        this.mDataManager = mDataManager;\n    }\n\n    @Override\n    public void attachView(TechContract.View view) {\n        super.attachView(view);\n        registerEvent();\n    }\n\n    private void registerEvent() {\n        addSubscribe(RxBus.getDefault().toFlowable(SearchEvent.class)\n                .compose(RxUtil.<SearchEvent>rxSchedulerHelper())\n                .filter(new Predicate<SearchEvent>() {\n                    @Override\n                    public boolean test(@NonNull SearchEvent searchEvent) throws Exception {\n                        return searchEvent.getType() == currentType;\n                    }\n                })\n                .map(new Function<SearchEvent, String>() {\n                    @Override\n                    public String apply(SearchEvent searchEvent) {\n                        return searchEvent.getQuery();\n                    }\n                })\n                .subscribeWith(new CommonSubscriber<String>(mView, "\xe6\x90\x9c\xe7\xb4\xa2\xe5\xa4\xb1\xe8\xb4\xa5") {\n                    @Override\n                    public void onNext(String s) {\n                        queryStr = s;\n                        getSearchTechData();\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                        super.onError(e);\n                        registerEvent();\n                    }\n                })\n        );\n    }\n\n    private void getSearchTechData() {\n        currentPage = 1;\n        addSubscribe(mDataManager.fetchGankSearchList(queryStr, currentTech, NUM_OF_PAGE, currentPage)\n                .compose(RxUtil.<GankHttpResponse<List<GankSearchItemBean>>>rxSchedulerHelper())\n                .compose(RxUtil.<List<GankSearchItemBean>>handleResult())\n                .map(new Function<List<GankSearchItemBean>, List<GankItemBean>>() {\n                    @Override\n                    public List<GankItemBean> apply(List<GankSearchItemBean> gankSearchItemBeen) {\n                        List<GankItemBean> newList = new ArrayList<>();\n                        for (GankSearchItemBean item : gankSearchItemBeen) {\n                            GankItemBean bean = new GankItemBean();\n                            bean.set_id(item.getGanhuo_id());\n                            bean.setDesc(item.getDesc());\n                            bean.setPublishedAt(item.getPublishedAt());\n                            bean.setWho(item.getWho());\n                            bean.setUrl(item.getUrl());\n                            newList.add(bean);\n                        }\n                        return newList;\n                    }\n                })\n                .subscribeWith(new CommonSubscriber<List<GankItemBean>>(mView) {\n                    @Override\n                    public void onNext(List<GankItemBean> gankItemBeen) {\n                        mView.showContent(gankItemBeen);\n                    }\n                })\n        );\n    }\n\n    @Override\n    public void getGankData(String tech, int type) {\n        queryStr = null;\n        currentPage = 1;\n        currentTech = tech;\n        currentType = type;\n        addSubscribe(mDataManager.fetchTechList(tech,NUM_OF_PAGE,currentPage)\n                .compose(RxUtil.<GankHttpResponse<List<GankItemBean>>>rxSchedulerHelper())\n                .compose(RxUtil.<List<GankItemBean>>handleResult())\n                .subscribeWith(new CommonSubscriber<List<GankItemBean>>(mView) {\n                    @Override\n                    public void onNext(List<GankItemBean> gankItemBeen) {\n                        mView.showContent(gankItemBeen);\n                    }\n                })\n        );\n    }\n\n    @Override\n    public void getMoreGankData(String tech) {\n        if(queryStr != null) {\n            getMoreSearchGankData();\n            return;\n        }\n        addSubscribe(mDataManager.fetchTechList(tech,NUM_OF_PAGE,++currentPage)\n                .compose(RxUtil.<GankHttpResponse<List<GankItemBean>>>rxSchedulerHelper())\n                .compose(RxUtil.<List<GankItemBean>>handleResult())\n                .subscribeWith(new CommonSubscriber<List<GankItemBean>>(mView, "\xe5\x8a\xa0\xe8\xbd\xbd\xe6\x9b\xb4\xe5\xa4\x9a\xe6\x95\xb0\xe6\x8d\xae\xe5\xa4\xb1\xe8\xb4\xa5\xe3\x83\xbd(\xe2\x89\xa7\xd0\x94\xe2\x89\xa6)\xe3\x83\x8e", false) {\n                    @Override\n                    public void onNext(List<GankItemBean> gankItemBeen) {\n                        mView.showMoreContent(gankItemBeen);\n                    }\n                })\n        );\n    }\n\n    private void getMoreSearchGankData() {\n        addSubscribe(mDataManager.fetchGankSearchList(queryStr, currentTech, NUM_OF_PAGE, ++currentPage)\n                .compose(RxUtil.<GankHttpResponse<List<GankSearchItemBean>>>rxSchedulerHelper())\n                .compose(RxUtil.<List<GankSearchItemBean>>handleResult())\n                .map(new Function<List<GankSearchItemBean>, List<GankItemBean>>() {\n                    @Override\n                    public List<GankItemBean> apply(List<GankSearchItemBean> gankSearchItemBeen) {\n                        List<GankItemBean> newList = new ArrayList<>();\n                        for (GankSearchItemBean item : gankSearchItemBeen) {\n                            GankItemBean bean = new GankItemBean();\n                            bean.set_id(item.getGanhuo_id());\n                            bean.setDesc(item.getDesc());\n                            bean.setPublishedAt(item.getPublishedAt());\n                            bean.setWho(item.getWho());\n                            bean.setUrl(item.getUrl());\n                            newList.add(bean);\n                        }\n                        return newList;\n                    }\n                })\n                .subscribeWith(new CommonSubscriber<List<GankItemBean>>(mView, false) {\n                    @Override\n                    public void onNext(List<GankItemBean> gankItemBeen) {\n                        mView.showMoreContent(gankItemBeen);\n                    }\n                })\n        );\n    }\n\n    @Override\n    public void getGirlImage() {\n        addSubscribe(mDataManager.fetchRandomGirl(1)\n                .compose(RxUtil.<GankHttpResponse<List<GankItemBean>>>rxSchedulerHelper())\n                .compose(RxUtil.<List<GankItemBean>>handleResult())\n                .subscribeWith(new CommonSubscriber<List<GankItemBean>>(mView, "\xe5\x8a\xa0\xe8\xbd\xbd\xe5\xb0\x81\xe9\x9d\xa2\xe5\xa4\xb1\xe8\xb4\xa5", false) {\n                    @Override\n                    public void onNext(List<GankItemBean> gankItemBean) {\n                        mView.showGirlImage(gankItemBean.get(0).getUrl(), gankItemBean.get(0).getWho());\n                    }\n                })\n        );\n    }\n}\n'