b'/*\r\n * Copyright (C) 2015 Naman Dwivedi\r\n *\r\n * Licensed under the GNU General Public License v3\r\n *\r\n * This is free software: you can redistribute it and/or modify it\r\n * under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\r\n *\r\n * This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n * See the GNU General Public License for more details.\r\n */\r\n\r\npackage com.naman14.timber.lastfmapi;\r\n\r\nimport android.content.Context;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\n\r\nimport com.naman14.timber.lastfmapi.callbacks.AlbumInfoListener;\r\nimport com.naman14.timber.lastfmapi.callbacks.ArtistInfoListener;\r\nimport com.naman14.timber.lastfmapi.callbacks.UserListener;\r\nimport com.naman14.timber.lastfmapi.models.AlbumInfo;\r\nimport com.naman14.timber.lastfmapi.models.AlbumQuery;\r\nimport com.naman14.timber.lastfmapi.models.ArtistInfo;\r\nimport com.naman14.timber.lastfmapi.models.ArtistQuery;\r\nimport com.naman14.timber.lastfmapi.models.LastfmUserSession;\r\nimport com.naman14.timber.lastfmapi.models.ScrobbleInfo;\r\nimport com.naman14.timber.lastfmapi.models.ScrobbleQuery;\r\nimport com.naman14.timber.lastfmapi.models.UserLoginInfo;\r\nimport com.naman14.timber.lastfmapi.models.UserLoginQuery;\r\nimport com.naman14.timber.utils.PreferencesUtility;\r\n\r\nimport java.io.UnsupportedEncodingException;\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\nimport java.util.HashSet;\r\nimport java.util.Map;\r\nimport java.util.TreeMap;\r\n\r\nimport retrofit.Callback;\r\nimport retrofit.RetrofitError;\r\nimport retrofit.client.Response;\r\n\r\npublic class LastFmClient {\r\n\r\n    //TODO update the api keys\r\n    public static final String API_KEY = "62ac1851456e4558bef1c41747b1aec2";\r\n    public static final String API_SECRET = "b4ae8965723d67fb18e35d207014d6f3";\r\n\r\n    public static final String JSON = "json";\r\n\r\n    public static final String BASE_API_URL = "http://ws.audioscrobbler.com/2.0";\r\n    public static final String BASE_SECURE_API_URL = "https://ws.audioscrobbler.com/2.0";\r\n\r\n    public static final String PREFERENCES_NAME = "Lastfm";\r\n    static final String PREFERENCE_CACHE_NAME = "Cache";\r\n\r\n    private static LastFmClient sInstance;\r\n    private LastFmRestService mRestService;\r\n    private LastFmUserRestService mUserRestService;\r\n\r\n    private HashSet<String> queries;\r\n    private boolean isUploading = false;\r\n\r\n    private Context context;\r\n\r\n    private LastfmUserSession mUserSession;\r\n    private static final Object sLock = new Object();\r\n\r\n    public static LastFmClient getInstance(Context context) {\r\n        synchronized (sLock) {\r\n            if (sInstance == null) {\r\n                sInstance = new LastFmClient();\r\n                sInstance.context = context;\r\n                sInstance.mRestService = RestServiceFactory.createStatic(context, BASE_API_URL, LastFmRestService.class);\r\n                sInstance.mUserRestService = RestServiceFactory.create(context, BASE_SECURE_API_URL, LastFmUserRestService.class);\r\n                sInstance.mUserSession = LastfmUserSession.getSession(context);\r\n\r\n            }\r\n            return sInstance;\r\n        }\r\n    }\r\n\r\n    private static String generateMD5(String in) {\r\n        try {\r\n            byte[] bytesOfMessage = in.getBytes("UTF-8");\r\n            MessageDigest md = MessageDigest.getInstance("MD5");\r\n            byte[] digest = md.digest(bytesOfMessage);\r\n            String out = "";\r\n            for (byte symbol : digest) {\r\n                out += String.format("%02X", symbol);\r\n            }\r\n            return out;\r\n        } catch (UnsupportedEncodingException | NoSuchAlgorithmException ignored) {\r\n            return null;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    public void getAlbumInfo(AlbumQuery albumQuery, final AlbumInfoListener listener) {\r\n        mRestService.getAlbumInfo(albumQuery.mArtist, albumQuery.mALbum, new Callback<AlbumInfo>() {\r\n            @Override\r\n            public void success(AlbumInfo albumInfo, Response response) {\r\n                listener.albumInfoSuccess(albumInfo.mAlbum);\r\n            }\r\n\r\n            @Override\r\n            public void failure(RetrofitError error) {\r\n                listener.albumInfoFailed();\r\n                error.printStackTrace();\r\n            }\r\n        });\r\n    }\r\n\r\n    public void getArtistInfo(ArtistQuery artistQuery, final ArtistInfoListener listener) {\r\n        mRestService.getArtistInfo(artistQuery.mArtist, new Callback<ArtistInfo>() {\r\n            @Override\r\n            public void success(ArtistInfo artistInfo, Response response) {\r\n                listener.artistInfoSucess(artistInfo.mArtist);\r\n            }\r\n\r\n            @Override\r\n            public void failure(RetrofitError error) {\r\n                listener.artistInfoFailed();\r\n                error.printStackTrace();\r\n            }\r\n        });\r\n    }\r\n\r\n    public void getUserLoginInfo(UserLoginQuery userLoginQuery, final UserListener listener) {\r\n        mUserRestService.getUserLoginInfo(UserLoginQuery.Method, JSON, API_KEY, generateMD5(userLoginQuery.getSignature()), userLoginQuery.mUsername, userLoginQuery.mPassword, new Callback<UserLoginInfo>() {\r\n            @Override\r\n            public void success(UserLoginInfo userLoginInfo, Response response) {\r\n                Log.d("Logedin", userLoginInfo.mSession.mToken + " " + userLoginInfo.mSession.mUsername);\r\n                Bundle extras = new Bundle();\r\n                extras.putString("lf_token",userLoginInfo.mSession.mToken);\r\n                extras.putString("lf_user",userLoginInfo.mSession.mUsername);\r\n                PreferencesUtility.getInstance(context).updateService(extras);\r\n                mUserSession = userLoginInfo.mSession;\r\n                mUserSession.update(context);\r\n                listener.userSuccess();\r\n            }\r\n\r\n            @Override\r\n            public void failure(RetrofitError error) {\r\n                listener.userInfoFailed();\r\n            }\r\n        });\r\n    }\r\n\r\n    public void Scrobble(final ScrobbleQuery scrobbleQuery) {\r\n        if (mUserSession.isLogedin())\r\n            new ScrobbleUploader(scrobbleQuery);\r\n    }\r\n\r\n    private class ScrobbleUploader {\r\n        boolean cachedirty = false;\r\n        ScrobbleQuery newquery;\r\n        SharedPreferences preferences = context.getSharedPreferences(PREFERENCES_NAME, Context.MODE_PRIVATE);\r\n\r\n        ScrobbleUploader(ScrobbleQuery query) {\r\n            if (queries == null) {\r\n                queries = new HashSet<>();\r\n                queries.addAll(preferences.getStringSet(PREFERENCE_CACHE_NAME, new HashSet<String>()));\r\n            }\r\n            if (query != null) {\r\n                synchronized (sLock) {\r\n                    if (isUploading) {\r\n                        cachedirty = true;\r\n                        queries.add(query.toString());\r\n                        save();\r\n                        return;\r\n                    }\r\n                }\r\n                newquery = query;\r\n            }\r\n            upload();\r\n        }\r\n\r\n        void upload() {\r\n            synchronized (sLock) {\r\n                isUploading = true;\r\n            }\r\n            int size = queries.size();\r\n            if (size == 0 && newquery == null) return;\r\n            //Max 50 Scrobbles per Request (restriction by LastFM)\r\n            if (size > 50) size = 50;\r\n            if (newquery != null && size > 49) size = 49;\r\n            final String currentqueries[] = new String[size];\r\n            int n = 0;\r\n            for (String t : queries) {\r\n                currentqueries[n++] = t;\r\n                if (n >= size) break;\r\n            }\r\n\r\n            TreeMap<String, String> fields = new TreeMap<>();\r\n            fields.put("method", ScrobbleQuery.Method);\r\n            fields.put("api_key", API_KEY);\r\n            fields.put("sk", mUserSession.mToken);\r\n\r\n            int i = 0;\r\n            for (String squery : currentqueries) {\r\n                ScrobbleQuery query = new ScrobbleQuery(squery);\r\n                fields.put("artist[" + i + \']\', query.mArtist);\r\n                fields.put("track[" + i + \']\', query.mTrack);\r\n                fields.put("timestamp[" + i + \']\', Long.toString(query.mTimestamp));\r\n                i++;\r\n            }\r\n            if (newquery != null) {\r\n                fields.put("artist[" + i + \']\', newquery.mArtist);\r\n                fields.put("track[" + i + \']\', newquery.mTrack);\r\n                fields.put("timestamp[" + i + \']\', Long.toString(newquery.mTimestamp));\r\n            }\r\n            String sig = "";\r\n            for (Map.Entry<String, String> ent : fields.entrySet()) {\r\n                sig += ent.getKey() + ent.getValue();\r\n            }\r\n            sig += API_SECRET;\r\n            mUserRestService.getScrobbleInfo(generateMD5(sig), JSON, fields, new Callback<ScrobbleInfo>() {\r\n                @Override\r\n                public void success(ScrobbleInfo scrobbleInfo, Response response) {\r\n                    synchronized (sLock) {\r\n                        isUploading = false;\r\n                        cachedirty = true;\r\n                        if (newquery != null) newquery = null;\r\n\r\n                        for (String squery : currentqueries) {\r\n                            queries.remove(squery);\r\n                        }\r\n                        if (queries.size() > 0)\r\n                            upload();\r\n                        else\r\n                            save();\r\n\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void failure(RetrofitError error) {\r\n                    synchronized (sLock) {\r\n                        isUploading = false;\r\n                        //Max 500 scrobbles in Cache\r\n                        if (newquery != null && queries.size() <= 500)\r\n                            queries.add(newquery.toString());\r\n\r\n                        if (cachedirty)\r\n                            save();\r\n                    }\r\n                }\r\n            });\r\n\r\n\r\n        }\r\n\r\n        void save() {\r\n            if (!cachedirty) return;\r\n            SharedPreferences.Editor editor = preferences.edit();\r\n            editor.putStringSet(PREFERENCE_CACHE_NAME, queries);\r\n            editor.apply();\r\n        }\r\n\r\n    }\r\n\r\n    public void logout() {\r\n        this.mUserSession.mToken = null;\r\n        this.mUserSession.mUsername = null;\r\n        SharedPreferences preferences = context.getSharedPreferences(PREFERENCES_NAME, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = preferences.edit();\r\n        editor.clear();\r\n        editor.apply();\r\n    }\r\n\r\n    public String getUsername() {\r\n        if (mUserSession != null) return mUserSession.mUsername;\r\n        return null;\r\n    }\r\n}\r\n'