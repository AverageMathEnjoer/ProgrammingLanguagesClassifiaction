b'// I2Cdev library collection - MPU6050 I2C device class, 6-axis MotionApps 2.0 implementation\n// Based on InvenSense MPU-6050 register map document rev. 2.0, 5/19/2011 (RM-MPU-6000A-00)\n// 5/20/2013 by Jeff Rowberg <jeff@rowberg.net>\n// Updates should (hopefully) always be available at https://github.com/jrowberg/i2cdevlib\n//\n// Changelog:\n//  2021/09/27 - split implementations out of header files, finally\n//  2019/07/08 - merged all DMP Firmware configuration items into the dmpMemory array\n//             - Simplified dmpInitialize() to accomidate the dmpmemory array alterations\n\n/* ============================================\nI2Cdev device library code is placed under the MIT license\nCopyright (c) 2021 Jeff Rowberg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n===============================================\n*/\n\n// MotionApps 2.0 DMP implementation, built using the MPU-6050EVB evaluation board\n#define MPU6050_INCLUDE_DMP_MOTIONAPPS20\n\n#include "MPU6050_6Axis_MotionApps20.h"\n\n// Tom Carpenter\'s conditional PROGMEM code\n// http://forum.arduino.cc/index.php?topic=129407.0\n#ifdef __AVR__\n    #include <avr/pgmspace.h>\n#elif defined(ESP32)\n    #include <pgmspace.h>\n#else\n    // Teensy 3.0 library conditional PROGMEM code from Paul Stoffregen\n    #ifndef __PGMSPACE_H_\n        #define __PGMSPACE_H_ 1\n        #include <inttypes.h>\n\n        #define PROGMEM\n        #define PGM_P  const char *\n        #define PSTR(str) (str)\n        #define F(x) x\n\n        typedef void prog_void;\n        typedef char prog_char;\n        typedef unsigned char prog_uchar;\n        typedef int8_t prog_int8_t;\n        typedef uint8_t prog_uint8_t;\n        typedef int16_t prog_int16_t;\n        typedef uint16_t prog_uint16_t;\n        typedef int32_t prog_int32_t;\n        typedef uint32_t prog_uint32_t;\n        \n        #define strcpy_P(dest, src) strcpy((dest), (src))\n        #define strcat_P(dest, src) strcat((dest), (src))\n        #define strcmp_P(a, b) strcmp((a), (b))\n        \n        #define pgm_read_byte(addr) (*(const unsigned char *)(addr))\n        #define pgm_read_word(addr) (*(const unsigned short *)(addr))\n        #define pgm_read_dword(addr) (*(const unsigned long *)(addr))\n        #define pgm_read_float(addr) (*(const float *)(addr))\n        \n        #define pgm_read_byte_near(addr) pgm_read_byte(addr)\n        #define pgm_read_word_near(addr) pgm_read_word(addr)\n        #define pgm_read_dword_near(addr) pgm_read_dword(addr)\n        #define pgm_read_float_near(addr) pgm_read_float(addr)\n        #define pgm_read_byte_far(addr) pgm_read_byte(addr)\n        #define pgm_read_word_far(addr) pgm_read_word(addr)\n        #define pgm_read_dword_far(addr) pgm_read_dword(addr)\n        #define pgm_read_float_far(addr) pgm_read_float(addr)\n    #endif\n#endif\n\n/* Source is from the InvenSense MotionApps v2 demo code. Original source is\n * unavailable, unless you happen to be amazing as decompiling binary by\n * hand (in which case, please contact me, and I\'m totally serious).\n *\n * Also, I\'d like to offer many, many thanks to Noah Zerkin for all of the\n * DMP reverse-engineering he did to help make this bit of wizardry\n * possible.\n */\n\n// NOTE! Enabling DEBUG adds about 3.3kB to the flash program size.\n// Debug output is now working even on ATMega328P MCUs (e.g. Arduino Uno)\n// after moving string constants to flash memory storage using the F()\n// compiler macro (Arduino IDE 1.0+ required).\n\n//#define DEBUG\n#ifdef DEBUG\n    #define DEBUG_PRINT(x) Serial.print(x)\n    #define DEBUG_PRINTF(x, y) Serial.print(x, y)\n    #define DEBUG_PRINTLN(x) Serial.println(x)\n    #define DEBUG_PRINTLNF(x, y) Serial.println(x, y)\n#else\n    #define DEBUG_PRINT(x)\n    #define DEBUG_PRINTF(x, y)\n    #define DEBUG_PRINTLN(x)\n    #define DEBUG_PRINTLNF(x, y)\n#endif\n\n#define MPU6050_DMP_CODE_SIZE       1929    // dmpMemory[]\n#define MPU6050_DMP_CONFIG_SIZE     192     // dmpConfig[]\n#define MPU6050_DMP_UPDATES_SIZE    47      // dmpUpdates[]\n\n/* ================================================================================================ *\n | Default MotionApps v2.0 42-byte FIFO packet structure:                                           |\n |                                                                                                  |\n | [QUAT W][      ][QUAT X][      ][QUAT Y][      ][QUAT Z][      ][GYRO X][      ][GYRO Y][      ] |\n |   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  |\n |                                                                                                  |\n | [GYRO Z][      ][ACC X ][      ][ACC Y ][      ][ACC Z ][      ][      ]                         |\n |  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41                          |\n * ================================================================================================ */\n\n// this block of memory gets written to the MPU on start-up, and it seems\n// to be volatile memory, so it has to be done each time (it only takes ~1\n// second though)\n\n// I Only Changed this by applying all the configuration data and capturing it before startup:\n// *** this is a capture of the DMP Firmware after all the messy changes were made so we can just load it\nstatic const unsigned char dmpMemory[MPU6050_DMP_CODE_SIZE] PROGMEM = {\n\t/* bank # 0 */\n\t0xFB, 0x00, 0x00, 0x3E, 0x00, 0x0B, 0x00, 0x36, 0x00, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00, 0x00,\n\t0x00, 0x65, 0x00, 0x54, 0xFF, 0xEF, 0x00, 0x00, 0xFA, 0x80, 0x00, 0x0B, 0x12, 0x82, 0x00, 0x01,\n\t0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x28, 0x00, 0x00, 0xFF, 0xFF, 0x45, 0x81, 0xFF, 0xFF, 0xFA, 0x72, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x7F, 0xFF, 0xFF, 0xFE, 0x80, 0x01,\n\t0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x40, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x02, 0xCB, 0x47, 0xA2, 0x20, 0x00, 0x00, 0x00,\n\t0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,\n\t0x41, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x2A, 0x00, 0x00, 0x16, 0x55, 0x00, 0x00, 0x21, 0x82,\n\t0xFD, 0x87, 0x26, 0x50, 0xFD, 0x80, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x05, 0x80, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,\n\t0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x6F, 0x00, 0x02, 0x65, 0x32, 0x00, 0x00, 0x5E, 0xC0,\n\t0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0xFB, 0x8C, 0x6F, 0x5D, 0xFD, 0x5D, 0x08, 0xD9, 0x00, 0x7C, 0x73, 0x3B, 0x00, 0x6C, 0x12, 0xCC,\n\t0x32, 0x00, 0x13, 0x9D, 0x32, 0x00, 0xD0, 0xD6, 0x32, 0x00, 0x08, 0x00, 0x40, 0x00, 0x01, 0xF4,\n\t0xFF, 0xE6, 0x80, 0x79, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD0, 0xD6, 0x00, 0x00, 0x27, 0x10,\n\t/* bank # 1 */\n\t0xFB, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0xFA, 0x36, 0xFF, 0xBC, 0x30, 0x8E, 0x00, 0x05, 0xFB, 0xF0, 0xFF, 0xD9, 0x5B, 0xC8,\n\t0xFF, 0xD0, 0x9A, 0xBE, 0x00, 0x00, 0x10, 0xA9, 0xFF, 0xF4, 0x1E, 0xB2, 0x00, 0xCE, 0xBB, 0xF7,\n\t0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x02, 0x00, 0x02, 0x02, 0x00, 0x00, 0x0C,\n\t0xFF, 0xC2, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0xCF, 0x80, 0x00, 0x40, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x14,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x09, 0x23, 0xA1, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x03, 0x3F, 0x68, 0xB6, 0x79, 0x35, 0x28, 0xBC, 0xC6, 0x7E, 0xD1, 0x6C,\n\t0x80, 0x00, 0xFF, 0xFF, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB2, 0x6A, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xF0, 0x00, 0x00, 0x00, 0x30,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,\n\t0x00, 0x00, 0x25, 0x4D, 0x00, 0x2F, 0x70, 0x6D, 0x00, 0x00, 0x05, 0xAE, 0x00, 0x0C, 0x02, 0xD0,\n\t/* bank # 2 */\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x65, 0x00, 0x54, 0xFF, 0xEF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x01, 0x00, 0x00, 0x44, 0x00, 0x01, 0x00, 0x05, 0x8B, 0xC1, 0x00, 0x00, 0x01, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0xFF, 0xEF, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t/* bank # 3 */\n\t0xD8, 0xDC, 0xBA, 0xA2, 0xF1, 0xDE, 0xB2, 0xB8, 0xB4, 0xA8, 0x81, 0x91, 0xF7, 0x4A, 0x90, 0x7F,\n\t0x91, 0x6A, 0xF3, 0xF9, 0xDB, 0xA8, 0xF9, 0xB0, 0xBA, 0xA0, 0x80, 0xF2, 0xCE, 0x81, 0xF3, 0xC2,\n\t0xF1, 0xC1, 0xF2, 0xC3, 0xF3, 0xCC, 0xA2, 0xB2, 0x80, 0xF1, 0xC6, 0xD8, 0x80, 0xBA, 0xA7, 0xDF,\n\t0xDF, 0xDF, 0xF2, 0xA7, 0xC3, 0xCB, 0xC5, 0xB6, 0xF0, 0x87, 0xA2, 0x94, 0x24, 0x48, 0x70, 0x3C,\n\t0x95, 0x40, 0x68, 0x34, 0x58, 0x9B, 0x78, 0xA2, 0xF1, 0x83, 0x92, 0x2D, 0x55, 0x7D, 0xD8, 0xB1,\n\t0xB4, 0xB8, 0xA1, 0xD0, 0x91, 0x80, 0xF2, 0x70, 0xF3, 0x70, 0xF2, 0x7C, 0x80, 0xA8, 0xF1, 0x01,\n\t0xB0, 0x98, 0x87, 0xD9, 0x43, 0xD8, 0x86, 0xC9, 0x88, 0xBA, 0xA1, 0xF2, 0x0E, 0xB8, 0x97, 0x80,\n\t0xF1, 0xA9, 0xDF, 0xDF, 0xDF, 0xAA, 0xDF, 0xDF, 0xDF, 0xF2, 0xAA, 0x4C, 0xCD, 0x6C, 0xA9, 0x0C,\n\t0xC9, 0x2C, 0x97, 0x97, 0x97, 0x97, 0xF1, 0xA9, 0x89, 0x26, 0x46, 0x66, 0xB0, 0xB4, 0xBA, 0x80,\n\t0xAC, 0xDE, 0xF2, 0xCA, 0xF1, 0xB2, 0x8C, 0x02, 0xA9, 0xB6, 0x98, 0x00, 0x89, 0x0E, 0x16, 0x1E,\n\t0xB8, 0xA9, 0xB4, 0x99, 0x2C, 0x54, 0x7C, 0xB0, 0x8A, 0xA8, 0x96, 0x36, 0x56, 0x76, 0xF1, 0xB9,\n\t0xAF, 0xB4, 0xB0, 0x83, 0xC0, 0xB8, 0xA8, 0x97, 0x11, 0xB1, 0x8F, 0x98, 0xB9, 0xAF, 0xF0, 0x24,\n\t0x08, 0x44, 0x10, 0x64, 0x18, 0xF1, 0xA3, 0x29, 0x55, 0x7D, 0xAF, 0x83, 0xB5, 0x93, 0xAF, 0xF0,\n\t0x00, 0x28, 0x50, 0xF1, 0xA3, 0x86, 0x9F, 0x61, 0xA6, 0xDA, 0xDE, 0xDF, 0xD9, 0xFA, 0xA3, 0x86,\n\t0x96, 0xDB, 0x31, 0xA6, 0xD9, 0xF8, 0xDF, 0xBA, 0xA6, 0x8F, 0xC2, 0xC5, 0xC7, 0xB2, 0x8C, 0xC1,\n\t0xB8, 0xA2, 0xDF, 0xDF, 0xDF, 0xA3, 0xDF, 0xDF, 0xDF, 0xD8, 0xD8, 0xF1, 0xB8, 0xA8, 0xB2, 0x86,\n\t/* bank # 4 */\n\t0xB4, 0x98, 0x0D, 0x35, 0x5D, 0xB8, 0xAA, 0x98, 0xB0, 0x87, 0x2D, 0x35, 0x3D, 0xB2, 0xB6, 0xBA,\n\t0xAF, 0x8C, 0x96, 0x19, 0x8F, 0x9F, 0xA7, 0x0E, 0x16, 0x1E, 0xB4, 0x9A, 0xB8, 0xAA, 0x87, 0x2C,\n\t0x54, 0x7C, 0xB9, 0xA3, 0xDE, 0xDF, 0xDF, 0xA3, 0xB1, 0x80, 0xF2, 0xC4, 0xCD, 0xC9, 0xF1, 0xB8,\n\t0xA9, 0xB4, 0x99, 0x83, 0x0D, 0x35, 0x5D, 0x89, 0xB9, 0xA3, 0x2D, 0x55, 0x7D, 0xB5, 0x93, 0xA3,\n\t0x0E, 0x16, 0x1E, 0xA9, 0x2C, 0x54, 0x7C, 0xB8, 0xB4, 0xB0, 0xF1, 0x97, 0x83, 0xA8, 0x11, 0x84,\n\t0xA5, 0x09, 0x98, 0xA3, 0x83, 0xF0, 0xDA, 0x24, 0x08, 0x44, 0x10, 0x64, 0x18, 0xD8, 0xF1, 0xA5,\n\t0x29, 0x55, 0x7D, 0xA5, 0x85, 0x95, 0x02, 0x1A, 0x2E, 0x3A, 0x56, 0x5A, 0x40, 0x48, 0xF9, 0xF3,\n\t0xA3, 0xD9, 0xF8, 0xF0, 0x98, 0x83, 0x24, 0x08, 0x44, 0x10, 0x64, 0x18, 0x97, 0x82, 0xA8, 0xF1,\n\t0x11, 0xF0, 0x98, 0xA2, 0x24, 0x08, 0x44, 0x10, 0x64, 0x18, 0xDA, 0xF3, 0xDE, 0xD8, 0x83, 0xA5,\n\t0x94, 0x01, 0xD9, 0xA3, 0x02, 0xF1, 0xA2, 0xC3, 0xC5, 0xC7, 0xD8, 0xF1, 0x84, 0x92, 0xA2, 0x4D,\n\t0xDA, 0x2A, 0xD8, 0x48, 0x69, 0xD9, 0x2A, 0xD8, 0x68, 0x55, 0xDA, 0x32, 0xD8, 0x50, 0x71, 0xD9,\n\t0x32, 0xD8, 0x70, 0x5D, 0xDA, 0x3A, 0xD8, 0x58, 0x79, 0xD9, 0x3A, 0xD8, 0x78, 0x93, 0xA3, 0x4D,\n\t0xDA, 0x2A, 0xD8, 0x48, 0x69, 0xD9, 0x2A, 0xD8, 0x68, 0x55, 0xDA, 0x32, 0xD8, 0x50, 0x71, 0xD9,\n\t0x32, 0xD8, 0x70, 0x5D, 0xDA, 0x3A, 0xD8, 0x58, 0x79, 0xD9, 0x3A, 0xD8, 0x78, 0xA8, 0x8A, 0x9A,\n\t0xF0, 0x28, 0x50, 0x78, 0x9E, 0xF3, 0x88, 0x18, 0xF1, 0x9F, 0x1D, 0x98, 0xA8, 0xD9, 0x08, 0xD8,\n\t0xC8, 0x9F, 0x12, 0x9E, 0xF3, 0x15, 0xA8, 0xDA, 0x12, 0x10, 0xD8, 0xF1, 0xAF, 0xC8, 0x97, 0x87,\n\t/* bank # 5 */\n\t0x34, 0xB5, 0xB9, 0x94, 0xA4, 0x21, 0xF3, 0xD9, 0x22, 0xD8, 0xF2, 0x2D, 0xF3, 0xD9, 0x2A, 0xD8,\n\t0xF2, 0x35, 0xF3, 0xD9, 0x32, 0xD8, 0x81, 0xA4, 0x60, 0x60, 0x61, 0xD9, 0x61, 0xD8, 0x6C, 0x68,\n\t0x69, 0xD9, 0x69, 0xD8, 0x74, 0x70, 0x71, 0xD9, 0x71, 0xD8, 0xB1, 0xA3, 0x84, 0x19, 0x3D, 0x5D,\n\t0xA3, 0x83, 0x1A, 0x3E, 0x5E, 0x93, 0x10, 0x30, 0x81, 0x10, 0x11, 0xB8, 0xB0, 0xAF, 0x8F, 0x94,\n\t0xF2, 0xDA, 0x3E, 0xD8, 0xB4, 0x9A, 0xA8, 0x87, 0x29, 0xDA, 0xF8, 0xD8, 0x87, 0x9A, 0x35, 0xDA,\n\t0xF8, 0xD8, 0x87, 0x9A, 0x3D, 0xDA, 0xF8, 0xD8, 0xB1, 0xB9, 0xA4, 0x98, 0x85, 0x02, 0x2E, 0x56,\n\t0xA5, 0x81, 0x00, 0x0C, 0x14, 0xA3, 0x97, 0xB0, 0x8A, 0xF1, 0x2D, 0xD9, 0x28, 0xD8, 0x4D, 0xD9,\n\t0x48, 0xD8, 0x6D, 0xD9, 0x68, 0xD8, 0xB1, 0x84, 0x0D, 0xDA, 0x0E, 0xD8, 0xA3, 0x29, 0x83, 0xDA,\n\t0x2C, 0x0E, 0xD8, 0xA3, 0x84, 0x49, 0x83, 0xDA, 0x2C, 0x4C, 0x0E, 0xD8, 0xB8, 0xB0, 0xA8, 0x8A,\n\t0x9A, 0xF5, 0x20, 0xAA, 0xDA, 0xDF, 0xD8, 0xA8, 0x40, 0xAA, 0xD0, 0xDA, 0xDE, 0xD8, 0xA8, 0x60,\n\t0xAA, 0xDA, 0xD0, 0xDF, 0xD8, 0xF1, 0x97, 0x86, 0xA8, 0x31, 0x9B, 0x06, 0x99, 0x07, 0xAB, 0x97,\n\t0x28, 0x88, 0x9B, 0xF0, 0x0C, 0x20, 0x14, 0x40, 0xB8, 0xB0, 0xB4, 0xA8, 0x8C, 0x9C, 0xF0, 0x04,\n\t0x28, 0x51, 0x79, 0x1D, 0x30, 0x14, 0x38, 0xB2, 0x82, 0xAB, 0xD0, 0x98, 0x2C, 0x50, 0x50, 0x78,\n\t0x78, 0x9B, 0xF1, 0x1A, 0xB0, 0xF0, 0x8A, 0x9C, 0xA8, 0x29, 0x51, 0x79, 0x8B, 0x29, 0x51, 0x79,\n\t0x8A, 0x24, 0x70, 0x59, 0x8B, 0x20, 0x58, 0x71, 0x8A, 0x44, 0x69, 0x38, 0x8B, 0x39, 0x40, 0x68,\n\t0x8A, 0x64, 0x48, 0x31, 0x8B, 0x30, 0x49, 0x60, 0xA5, 0x88, 0x20, 0x09, 0x71, 0x58, 0x44, 0x68,\n\t/* bank # 6 */\n\t0x11, 0x39, 0x64, 0x49, 0x30, 0x19, 0xF1, 0xAC, 0x00, 0x2C, 0x54, 0x7C, 0xF0, 0x8C, 0xA8, 0x04,\n\t0x28, 0x50, 0x78, 0xF1, 0x88, 0x97, 0x26, 0xA8, 0x59, 0x98, 0xAC, 0x8C, 0x02, 0x26, 0x46, 0x66,\n\t0xF0, 0x89, 0x9C, 0xA8, 0x29, 0x51, 0x79, 0x24, 0x70, 0x59, 0x44, 0x69, 0x38, 0x64, 0x48, 0x31,\n\t0xA9, 0x88, 0x09, 0x20, 0x59, 0x70, 0xAB, 0x11, 0x38, 0x40, 0x69, 0xA8, 0x19, 0x31, 0x48, 0x60,\n\t0x8C, 0xA8, 0x3C, 0x41, 0x5C, 0x20, 0x7C, 0x00, 0xF1, 0x87, 0x98, 0x19, 0x86, 0xA8, 0x6E, 0x76,\n\t0x7E, 0xA9, 0x99, 0x88, 0x2D, 0x55, 0x7D, 0x9E, 0xB9, 0xA3, 0x8A, 0x22, 0x8A, 0x6E, 0x8A, 0x56,\n\t0x8A, 0x5E, 0x9F, 0xB1, 0x83, 0x06, 0x26, 0x46, 0x66, 0x0E, 0x2E, 0x4E, 0x6E, 0x9D, 0xB8, 0xAD,\n\t0x00, 0x2C, 0x54, 0x7C, 0xF2, 0xB1, 0x8C, 0xB4, 0x99, 0xB9, 0xA3, 0x2D, 0x55, 0x7D, 0x81, 0x91,\n\t0xAC, 0x38, 0xAD, 0x3A, 0xB5, 0x83, 0x91, 0xAC, 0x2D, 0xD9, 0x28, 0xD8, 0x4D, 0xD9, 0x48, 0xD8,\n\t0x6D, 0xD9, 0x68, 0xD8, 0x8C, 0x9D, 0xAE, 0x29, 0xD9, 0x04, 0xAE, 0xD8, 0x51, 0xD9, 0x04, 0xAE,\n\t0xD8, 0x79, 0xD9, 0x04, 0xD8, 0x81, 0xF3, 0x9D, 0xAD, 0x00, 0x8D, 0xAE, 0x19, 0x81, 0xAD, 0xD9,\n\t0x01, 0xD8, 0xF2, 0xAE, 0xDA, 0x26, 0xD8, 0x8E, 0x91, 0x29, 0x83, 0xA7, 0xD9, 0xAD, 0xAD, 0xAD,\n\t0xAD, 0xF3, 0x2A, 0xD8, 0xD8, 0xF1, 0xB0, 0xAC, 0x89, 0x91, 0x3E, 0x5E, 0x76, 0xF3, 0xAC, 0x2E,\n\t0x2E, 0xF1, 0xB1, 0x8C, 0x5A, 0x9C, 0xAC, 0x2C, 0x28, 0x28, 0x28, 0x9C, 0xAC, 0x30, 0x18, 0xA8,\n\t0x98, 0x81, 0x28, 0x34, 0x3C, 0x97, 0x24, 0xA7, 0x28, 0x34, 0x3C, 0x9C, 0x24, 0xF2, 0xB0, 0x89,\n\t0xAC, 0x91, 0x2C, 0x4C, 0x6C, 0x8A, 0x9B, 0x2D, 0xD9, 0xD8, 0xD8, 0x51, 0xD9, 0xD8, 0xD8, 0x79,\n\t/* bank # 7 */\n\t0xD9, 0xD8, 0xD8, 0xF1, 0x9E, 0x88, 0xA3, 0x31, 0xDA, 0xD8, 0xD8, 0x91, 0x2D, 0xD9, 0x28, 0xD8,\n\t0x4D, 0xD9, 0x48, 0xD8, 0x6D, 0xD9, 0x68, 0xD8, 0xB1, 0x83, 0x93, 0x35, 0x3D, 0x80, 0x25, 0xDA,\n\t0xD8, 0xD8, 0x85, 0x69, 0xDA, 0xD8, 0xD8, 0xB4, 0x93, 0x81, 0xA3, 0x28, 0x34, 0x3C, 0xF3, 0xAB,\n\t0x8B, 0xF8, 0xA3, 0x91, 0xB6, 0x09, 0xB4, 0xD9, 0xAB, 0xDE, 0xFA, 0xB0, 0x87, 0x9C, 0xB9, 0xA3,\n\t0xDD, 0xF1, 0x20, 0x28, 0x30, 0x38, 0x9A, 0xF1, 0x28, 0x30, 0x38, 0x9D, 0xF1, 0xA3, 0xA3, 0xA3,\n\t0xA3, 0xF2, 0xA3, 0xB4, 0x90, 0x80, 0xF2, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,\n\t0xA3, 0xB2, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xB0, 0x87, 0xB5, 0x99, 0xF1, 0x28, 0x30, 0x38,\n\t0x98, 0xF1, 0xA3, 0xA3, 0xA3, 0xA3, 0x97, 0xA3, 0xA3, 0xA3, 0xA3, 0xF3, 0x9B, 0xA3, 0x30, 0xDC,\n\t0xB9, 0xA7, 0xF1, 0x26, 0x26, 0x26, 0xFE, 0xD8, 0xFF,\n\n};\n\n#ifndef MPU6050_DMP_FIFO_RATE_DIVISOR \n#define MPU6050_DMP_FIFO_RATE_DIVISOR 0x01 // The New instance of the Firmware has this as the default\n#endif\n\n// I Simplified this:\nuint8_t MPU6050_6Axis_MotionApps20::dmpInitialize() {\n\t// reset device\n\tDEBUG_PRINTLN(F("\\n\\nResetting MPU6050..."));\n\treset();\n\tdelay(30); // wait after reset\n\n\t// enable sleep mode and wake cycle\n\t/*Serial.println(F("Enabling sleep mode..."));\n\tsetSleepEnabled(true);\n\tSerial.println(F("Enabling wake cycle..."));\n\tsetWakeCycleEnabled(true);*/\n\n\t// disable sleep mode\n\tsetSleepEnabled(false);\n\n\t// get MPU hardware revision\n\tsetMemoryBank(0x10, true, true);\n\tsetMemoryStartAddress(0x06);\n\tDEBUG_PRINTLN(F("Checking hardware revision..."));\n\tDEBUG_PRINT(F("Revision @ user[16][6] = "));\n\tDEBUG_PRINTLN(readMemoryByte());\n\tDEBUG_PRINTLN(F("Resetting memory bank selection to 0..."));\n\tsetMemoryBank(0, false, false);\n\n\t// check OTP bank valid\n\tDEBUG_PRINTLN(F("Reading OTP bank valid flag..."));\n\tDEBUG_PRINT(F("OTP bank is "));\n\tDEBUG_PRINTLN(getOTPBankValid() ? F("valid!") : F("invalid!"));\n\n\t// setup weird slave stuff (?)\n\tDEBUG_PRINTLN(F("Setting slave 0 address to 0x7F..."));\n\tsetSlaveAddress(0, 0x7F);\n\tDEBUG_PRINTLN(F("Disabling I2C Master mode..."));\n\tsetI2CMasterModeEnabled(false);\n\tDEBUG_PRINTLN(F("Setting slave 0 address to 0x68 (self)..."));\n\tsetSlaveAddress(0, 0x68);\n\tDEBUG_PRINTLN(F("Resetting I2C Master control..."));\n\tresetI2CMaster();\n\tdelay(20);\n\tDEBUG_PRINTLN(F("Setting clock source to Z Gyro..."));\n\tsetClockSource(MPU6050_CLOCK_PLL_ZGYRO);\n\n\tDEBUG_PRINTLN(F("Setting DMP and FIFO_OFLOW interrupts enabled..."));\n\tsetIntEnabled(1<<MPU6050_INTERRUPT_FIFO_OFLOW_BIT|1<<MPU6050_INTERRUPT_DMP_INT_BIT);\n\n\tDEBUG_PRINTLN(F("Setting sample rate to 200Hz..."));\n\tsetRate(4); // 1khz / (1 + 4) = 200 Hz\n\n\tDEBUG_PRINTLN(F("Setting external frame sync to TEMP_OUT_L[0]..."));\n\tsetExternalFrameSync(MPU6050_EXT_SYNC_TEMP_OUT_L);\n\n\tDEBUG_PRINTLN(F("Setting DLPF bandwidth to 42Hz..."));\n\tsetDLPFMode(MPU6050_DLPF_BW_42);\n\n\tDEBUG_PRINTLN(F("Setting gyro sensitivity to +/- 2000 deg/sec..."));\n\tsetFullScaleGyroRange(MPU6050_GYRO_FS_2000);\n\n\t// load DMP code into memory banks\n\tDEBUG_PRINT(F("Writing DMP code to MPU memory banks ("));\n\tDEBUG_PRINT(MPU6050_DMP_CODE_SIZE);\n\tDEBUG_PRINTLN(F(" bytes)"));\n\tif (!writeProgMemoryBlock(dmpMemory, MPU6050_DMP_CODE_SIZE)) return 1; // Failed\n\tDEBUG_PRINTLN(F("Success! DMP code written and verified."));\n\n\t// Set the FIFO Rate Divisor int the DMP Firmware Memory\n\tunsigned char dmpUpdate[] = {0x00, MPU6050_DMP_FIFO_RATE_DIVISOR};\n\twriteMemoryBlock(dmpUpdate, 0x02, 0x02, 0x16); // Lets write the dmpUpdate data to the Firmware image, we have 2 bytes to write in bank 0x02 with the Offset 0x16\n\n\t//write start address MSB into register\n\tsetDMPConfig1(0x03);\n\t//write start address LSB into register\n\tsetDMPConfig2(0x00);\n\n\tDEBUG_PRINTLN(F("Clearing OTP Bank flag..."));\n\tsetOTPBankValid(false);\n\n\tDEBUG_PRINTLN(F("Setting motion detection threshold to 2..."));\n\tsetMotionDetectionThreshold(2);\n\n\tDEBUG_PRINTLN(F("Setting zero-motion detection threshold to 156..."));\n\tsetZeroMotionDetectionThreshold(156);\n\n\tDEBUG_PRINTLN(F("Setting motion detection duration to 80..."));\n\tsetMotionDetectionDuration(80);\n\n\tDEBUG_PRINTLN(F("Setting zero-motion detection duration to 0..."));\n\tsetZeroMotionDetectionDuration(0);\n\tDEBUG_PRINTLN(F("Enabling FIFO..."));\n\tsetFIFOEnabled(true);\n\n\tDEBUG_PRINTLN(F("Resetting DMP..."));\n\tresetDMP();\n\n\tDEBUG_PRINTLN(F("DMP is good to go! Finally."));\n\n\tDEBUG_PRINTLN(F("Disabling DMP (you turn it on later)..."));\n\tsetDMPEnabled(false);\n\n\tDEBUG_PRINTLN(F("Setting up internal 42-byte (default) DMP packet buffer..."));\n\tdmpPacketSize = 42;\n\n\tDEBUG_PRINTLN(F("Resetting FIFO and clearing INT status one last time..."));\n\tresetFIFO();\n\tgetIntStatus();\n\n\treturn 0; // success\n}\n// Nothing else changed\n\nbool MPU6050_6Axis_MotionApps20::dmpPacketAvailable() {\n    return getFIFOCount() >= dmpGetFIFOPacketSize();\n}\n\n// uint8_t MPU6050_6Axis_MotionApps20::dmpSetFIFORate(uint8_t fifoRate);\n// uint8_t MPU6050_6Axis_MotionApps20::dmpGetFIFORate();\n// uint8_t MPU6050_6Axis_MotionApps20::dmpGetSampleStepSizeMS();\n// uint8_t MPU6050_6Axis_MotionApps20::dmpGetSampleFrequency();\n// int32_t MPU6050_6Axis_MotionApps20::dmpDecodeTemperature(int8_t tempReg);\n\n//uint8_t MPU6050_6Axis_MotionApps20::dmpRegisterFIFORateProcess(inv_obj_func func, int16_t priority);\n//uint8_t MPU6050_6Axis_MotionApps20::dmpUnregisterFIFORateProcess(inv_obj_func func);\n//uint8_t MPU6050_6Axis_MotionApps20::dmpRunFIFORateProcesses();\n\n// uint8_t MPU6050_6Axis_MotionApps20::dmpSendQuaternion(uint_fast16_t accuracy);\n// uint8_t MPU6050_6Axis_MotionApps20::dmpSendGyro(uint_fast16_t elements, uint_fast16_t accuracy);\n// uint8_t MPU6050_6Axis_MotionApps20::dmpSendAccel(uint_fast16_t elements, uint_fast16_t accuracy);\n// uint8_t MPU6050_6Axis_MotionApps20::dmpSendLinearAccel(uint_fast16_t elements, uint_fast16_t accuracy);\n// uint8_t MPU6050_6Axis_MotionApps20::dmpSendLinearAccelInWorld(uint_fast16_t elements, uint_fast16_t accuracy);\n// uint8_t MPU6050_6Axis_MotionApps20::dmpSendControlData(uint_fast16_t elements, uint_fast16_t accuracy);\n// uint8_t MPU6050_6Axis_MotionApps20::dmpSendSensorData(uint_fast16_t elements, uint_fast16_t accuracy);\n// uint8_t MPU6050_6Axis_MotionApps20::dmpSendExternalSensorData(uint_fast16_t elements, uint_fast16_t accuracy);\n// uint8_t MPU6050_6Axis_MotionApps20::dmpSendGravity(uint_fast16_t elements, uint_fast16_t accuracy);\n// uint8_t MPU6050_6Axis_MotionApps20::dmpSendPacketNumber(uint_fast16_t accuracy);\n// uint8_t MPU6050_6Axis_MotionApps20::dmpSendQuantizedAccel(uint_fast16_t elements, uint_fast16_t accuracy);\n// uint8_t MPU6050_6Axis_MotionApps20::dmpSendEIS(uint_fast16_t elements, uint_fast16_t accuracy);\n\nuint8_t MPU6050_6Axis_MotionApps20::dmpGetAccel(int32_t *data, const uint8_t* packet) {\n    // TODO: accommodate different arrangements of sent data (ONLY default supported now)\n    if (packet == 0) packet = dmpPacketBuffer;\n    data[0] = (((uint32_t)packet[28] << 24) | ((uint32_t)packet[29] << 16) | ((uint32_t)packet[30] << 8) | packet[31]);\n    data[1] = (((uint32_t)packet[32] << 24) | ((uint32_t)packet[33] << 16) | ((uint32_t)packet[34] << 8) | packet[35]);\n    data[2] = (((uint32_t)packet[36] << 24) | ((uint32_t)packet[37] << 16) | ((uint32_t)packet[38] << 8) | packet[39]);\n    return 0;\n}\nuint8_t MPU6050_6Axis_MotionApps20::dmpGetAccel(int16_t *data, const uint8_t* packet) {\n    // TODO: accommodate different arrangements of sent data (ONLY default supported now)\n    if (packet == 0) packet = dmpPacketBuffer;\n    data[0] = (packet[28] << 8) | packet[29];\n    data[1] = (packet[32] << 8) | packet[33];\n    data[2] = (packet[36] << 8) | packet[37];\n    return 0;\n}\nuint8_t MPU6050_6Axis_MotionApps20::dmpGetAccel(VectorInt16 *v, const uint8_t* packet) {\n    // TODO: accommodate different arrangements of sent data (ONLY default supported now)\n    if (packet == 0) packet = dmpPacketBuffer;\n    v -> x = (packet[28] << 8) | packet[29];\n    v -> y = (packet[32] << 8) | packet[33];\n    v -> z = (packet[36] << 8) | packet[37];\n    return 0;\n}\nuint8_t MPU6050_6Axis_MotionApps20::dmpGetQuaternion(int32_t *data, const uint8_t* packet) {\n    // TODO: accommodate different arrangements of sent data (ONLY default supported now)\n    if (packet == 0) packet = dmpPacketBuffer;\n    data[0] = (((uint32_t)packet[0] << 24) | ((uint32_t)packet[1] << 16) | ((uint32_t)packet[2] << 8) | packet[3]);\n    data[1] = (((uint32_t)packet[4] << 24) | ((uint32_t)packet[5] << 16) | ((uint32_t)packet[6] << 8) | packet[7]);\n    data[2] = (((uint32_t)packet[8] << 24) | ((uint32_t)packet[9] << 16) | ((uint32_t)packet[10] << 8) | packet[11]);\n    data[3] = (((uint32_t)packet[12] << 24) | ((uint32_t)packet[13] << 16) | ((uint32_t)packet[14] << 8) | packet[15]);\n    return 0;\n}\nuint8_t MPU6050_6Axis_MotionApps20::dmpGetQuaternion(int16_t *data, const uint8_t* packet) {\n    // TODO: accommodate different arrangements of sent data (ONLY default supported now)\n    if (packet == 0) packet = dmpPacketBuffer;\n    data[0] = ((packet[0] << 8) | packet[1]);\n    data[1] = ((packet[4] << 8) | packet[5]);\n    data[2] = ((packet[8] << 8) | packet[9]);\n    data[3] = ((packet[12] << 8) | packet[13]);\n    return 0;\n}\nuint8_t MPU6050_6Axis_MotionApps20::dmpGetQuaternion(Quaternion *q, const uint8_t* packet) {\n    // TODO: accommodate different arrangements of sent data (ONLY default supported now)\n    int16_t qI[4];\n    uint8_t status = dmpGetQuaternion(qI, packet);\n    if (status == 0) {\n        q -> w = (float)qI[0] / 16384.0f;\n        q -> x = (float)qI[1] / 16384.0f;\n        q -> y = (float)qI[2] / 16384.0f;\n        q -> z = (float)qI[3] / 16384.0f;\n        return 0;\n    }\n    return status; // int16 return value, indicates error if this line is reached\n}\n// uint8_t MPU6050_6Axis_MotionApps20::dmpGet6AxisQuaternion(long *data, const uint8_t* packet);\n// uint8_t MPU6050_6Axis_MotionApps20::dmpGetRelativeQuaternion(long *data, const uint8_t* packet);\nuint8_t MPU6050_6Axis_MotionApps20::dmpGetGyro(int32_t *data, const uint8_t* packet) {\n    // TODO: accommodate different arrangements of sent data (ONLY default supported now)\n    if (packet == 0) packet = dmpPacketBuffer;\n    data[0] = (((uint32_t)packet[16] << 24) | ((uint32_t)packet[17] << 16) | ((uint32_t)packet[18] << 8) | packet[19]);\n    data[1] = (((uint32_t)packet[20] << 24) | ((uint32_t)packet[21] << 16) | ((uint32_t)packet[22] << 8) | packet[23]);\n    data[2] = (((uint32_t)packet[24] << 24) | ((uint32_t)packet[25] << 16) | ((uint32_t)packet[26] << 8) | packet[27]);\n    return 0;\n}\nuint8_t MPU6050_6Axis_MotionApps20::dmpGetGyro(int16_t *data, const uint8_t* packet) {\n    // TODO: accommodate different arrangements of sent data (ONLY default supported now)\n    if (packet == 0) packet = dmpPacketBuffer;\n    data[0] = (packet[16] << 8) | packet[17];\n    data[1] = (packet[20] << 8) | packet[21];\n    data[2] = (packet[24] << 8) | packet[25];\n    return 0;\n}\nuint8_t MPU6050_6Axis_MotionApps20::dmpGetGyro(VectorInt16 *v, const uint8_t* packet) {\n    // TODO: accommodate different arrangements of sent data (ONLY default supported now)\n    if (packet == 0) packet = dmpPacketBuffer;\n    v -> x = (packet[16] << 8) | packet[17];\n    v -> y = (packet[20] << 8) | packet[21];\n    v -> z = (packet[24] << 8) | packet[25];\n    return 0;\n}\n// uint8_t MPU6050_6Axis_MotionApps20::dmpSetLinearAccelFilterCoefficient(float coef);\n// uint8_t MPU6050_6Axis_MotionApps20::dmpGetLinearAccel(long *data, const uint8_t* packet);\nuint8_t MPU6050_6Axis_MotionApps20::dmpGetLinearAccel(VectorInt16 *v, VectorInt16 *vRaw, VectorFloat *gravity) {\n    // get rid of the gravity component (+1g = +8192 in standard DMP FIFO packet, sensitivity is 2g)\n    v -> x = vRaw -> x - gravity -> x*8192;\n    v -> y = vRaw -> y - gravity -> y*8192;\n    v -> z = vRaw -> z - gravity -> z*8192;\n    return 0;\n}\n// uint8_t MPU6050_6Axis_MotionApps20::dmpGetLinearAccelInWorld(long *data, const uint8_t* packet);\nuint8_t MPU6050_6Axis_MotionApps20::dmpGetLinearAccelInWorld(VectorInt16 *v, VectorInt16 *vReal, Quaternion *q) {\n    // rotate measured 3D acceleration vector into original state\n    // frame of reference based on orientation quaternion\n    memcpy(v, vReal, sizeof(VectorInt16));\n    v -> rotate(q);\n    return 0;\n}\n// uint8_t MPU6050_6Axis_MotionApps20::dmpGetGyroAndAccelSensor(long *data, const uint8_t* packet);\n// uint8_t MPU6050_6Axis_MotionApps20::dmpGetGyroSensor(long *data, const uint8_t* packet);\n// uint8_t MPU6050_6Axis_MotionApps20::dmpGetControlData(long *data, const uint8_t* packet);\n// uint8_t MPU6050_6Axis_MotionApps20::dmpGetTemperature(long *data, const uint8_t* packet);\n// uint8_t MPU6050_6Axis_MotionApps20::dmpGetGravity(long *data, const uint8_t* packet);\nuint8_t MPU6050_6Axis_MotionApps20::dmpGetGravity(int16_t *data, const uint8_t* packet) {\n    /* +1g corresponds to +8192, sensitivity is 2g. */\n    int16_t qI[4];\n    uint8_t status = dmpGetQuaternion(qI, packet);\n    data[0] = ((int32_t)qI[1] * qI[3] - (int32_t)qI[0] * qI[2]) / 16384;\n    data[1] = ((int32_t)qI[0] * qI[1] + (int32_t)qI[2] * qI[3]) / 16384;\n    data[2] = ((int32_t)qI[0] * qI[0] - (int32_t)qI[1] * qI[1]\n\t       - (int32_t)qI[2] * qI[2] + (int32_t)qI[3] * qI[3]) / (int32_t)(2 * 16384L);\n    return status;\n}\n\nuint8_t MPU6050_6Axis_MotionApps20::dmpGetGravity(VectorFloat *v, Quaternion *q) {\n    v -> x = 2 * (q -> x*q -> z - q -> w*q -> y);\n    v -> y = 2 * (q -> w*q -> x + q -> y*q -> z);\n    v -> z = q -> w*q -> w - q -> x*q -> x - q -> y*q -> y + q -> z*q -> z;\n    return 0;\n}\n// uint8_t MPU6050_6Axis_MotionApps20::dmpGetUnquantizedAccel(long *data, const uint8_t* packet);\n// uint8_t MPU6050_6Axis_MotionApps20::dmpGetQuantizedAccel(long *data, const uint8_t* packet);\n// uint8_t MPU6050_6Axis_MotionApps20::dmpGetExternalSensorData(long *data, int size, const uint8_t* packet);\n// uint8_t MPU6050_6Axis_MotionApps20::dmpGetEIS(long *data, const uint8_t* packet);\n\nuint8_t MPU6050_6Axis_MotionApps20::dmpGetEuler(float *data, Quaternion *q) {\n    data[0] = atan2(2*q -> x*q -> y - 2*q -> w*q -> z, 2*q -> w*q -> w + 2*q -> x*q -> x - 1);   // psi\n    data[1] = -asin(2*q -> x*q -> z + 2*q -> w*q -> y);                              // theta\n    data[2] = atan2(2*q -> y*q -> z - 2*q -> w*q -> x, 2*q -> w*q -> w + 2*q -> z*q -> z - 1);   // phi\n    return 0;\n}\n\n#ifdef USE_OLD_DMPGETYAWPITCHROLL\nuint8_t MPU6050_6Axis_MotionApps20::dmpGetYawPitchRoll(float *data, Quaternion *q, VectorFloat *gravity) {\n    // yaw: (about Z axis)\n    data[0] = atan2(2*q -> x*q -> y - 2*q -> w*q -> z, 2*q -> w*q -> w + 2*q -> x*q -> x - 1);\n    // pitch: (nose up/down, about Y axis)\n    data[1] = atan(gravity -> x / sqrt(gravity -> y*gravity -> y + gravity -> z*gravity -> z));\n    // roll: (tilt left/right, about X axis)\n    data[2] = atan(gravity -> y / sqrt(gravity -> x*gravity -> x + gravity -> z*gravity -> z));\n    return 0;\n}\n#else \nuint8_t MPU6050_6Axis_MotionApps20::dmpGetYawPitchRoll(float *data, Quaternion *q, VectorFloat *gravity) {\n    // yaw: (about Z axis)\n    data[0] = atan2(2*q -> x*q -> y - 2*q -> w*q -> z, 2*q -> w*q -> w + 2*q -> x*q -> x - 1);\n    // pitch: (nose up/down, about Y axis)\n    data[1] = atan2(gravity -> x , sqrt(gravity -> y*gravity -> y + gravity -> z*gravity -> z));\n    // roll: (tilt left/right, about X axis)\n    data[2] = atan2(gravity -> y , gravity -> z);\n    if (gravity -> z < 0) {\n        if(data[1] > 0) {\n            data[1] = PI - data[1]; \n        } else { \n            data[1] = -PI - data[1];\n        }\n    }\n    return 0;\n}\n#endif\n\n// uint8_t MPU6050_6Axis_MotionApps20::dmpGetAccelFloat(float *data, const uint8_t* packet);\n// uint8_t MPU6050_6Axis_MotionApps20::dmpGetQuaternionFloat(float *data, const uint8_t* packet);\n\nuint8_t MPU6050_6Axis_MotionApps20::dmpProcessFIFOPacket(const unsigned char *dmpData) {\n    (void)dmpData; // unused parameter\n    /*for (uint8_t k = 0; k < dmpPacketSize; k++) {\n        if (dmpData[k] < 0x10) Serial.print("0");\n        Serial.print(dmpData[k], HEX);\n        Serial.print(" ");\n    }\n    Serial.print("\\n");*/\n    //Serial.println((uint16_t)dmpPacketBuffer);\n    return 0;\n}\nuint8_t MPU6050_6Axis_MotionApps20::dmpReadAndProcessFIFOPacket(uint8_t numPackets, uint8_t *processed) {\n    uint8_t status;\n    uint8_t buf[dmpPacketSize];\n    for (uint8_t i = 0; i < numPackets; i++) {\n        // read packet from FIFO\n        getFIFOBytes(buf, dmpPacketSize);\n\n        // process packet\n        if ((status = dmpProcessFIFOPacket(buf)) > 0) return status;\n        \n        // increment external process count variable, if supplied\n        if (processed != 0) (*processed)++;\n    }\n    return 0;\n}\n\n// uint8_t MPU6050_6Axis_MotionApps20::dmpSetFIFOProcessedCallback(void (*func) (void));\n\n// uint8_t MPU6050_6Axis_MotionApps20::dmpInitFIFOParam();\n// uint8_t MPU6050_6Axis_MotionApps20::dmpCloseFIFO();\n// uint8_t MPU6050_6Axis_MotionApps20::dmpSetGyroDataSource(uint_fast8_t source);\n// uint8_t MPU6050_6Axis_MotionApps20::dmpDecodeQuantizedAccel();\n// uint32_t MPU6050_6Axis_MotionApps20::dmpGetGyroSumOfSquare();\n// uint32_t MPU6050_6Axis_MotionApps20::dmpGetAccelSumOfSquare();\n// void MPU6050_6Axis_MotionApps20::dmpOverrideQuaternion(long *q);\nuint16_t MPU6050_6Axis_MotionApps20::dmpGetFIFOPacketSize() {\n    return dmpPacketSize;\n}\n\n\n\nuint8_t MPU6050_6Axis_MotionApps20::dmpGetCurrentFIFOPacket(uint8_t *data) { // overflow proof\n    return(GetCurrentFIFOPacket(data, dmpPacketSize));\n}\n'