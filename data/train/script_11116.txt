b'/*\n    SPDX-FileCopyrightText: 2015-2017 Milian Wolff <mail@milianw.de>\n\n    SPDX-License-Identifier: LGPL-2.1-or-later\n*/\n\n#include "treeproxy.h"\n#include "locationdata.h"\n\n#include <resultdata.h>\n#include <QDebug>\n\nTreeProxy::TreeProxy(int symbolRole, int resultDataRole, QObject* parent)\n    : QSortFilterProxyModel(parent)\n    , m_symbolRole(symbolRole)\n    , m_resultDataRole(resultDataRole)\n{\n    setRecursiveFilteringEnabled(true);\n    setSortLocaleAware(false);\n}\n\nTreeProxy::~TreeProxy() = default;\n\nvoid TreeProxy::setFunctionFilter(const QString& functionFilter)\n{\n    m_functionFilter = functionFilter;\n    invalidate();\n}\n\nvoid TreeProxy::setModuleFilter(const QString& moduleFilter)\n{\n    m_moduleFilter = moduleFilter;\n    invalidate();\n}\n\nbool TreeProxy::filterAcceptsRow(int sourceRow, const QModelIndex& sourceParent) const\n{\n    auto source = sourceModel();\n    if (!source) {\n        return false;\n    }\n\n    if (m_functionFilter.isEmpty() && m_moduleFilter.isEmpty()) {\n        return true;\n    }\n\n    const auto index = source->index(sourceRow, 0, sourceParent);\n    const auto* resultData = index.data(m_resultDataRole).value<const ResultData*>();\n    Q_ASSERT(resultData);\n\n    auto filterOut = [&](StringIndex stringId, const QString& filter) {\n        return !filter.isEmpty() && !resultData->string(stringId).contains(filter, Qt::CaseInsensitive);\n    };\n\n    const auto symbol = index.data(m_symbolRole).value<Symbol>();\n    if (filterOut(symbol.functionId, m_functionFilter) || filterOut(symbol.moduleId, m_moduleFilter)) {\n        return false;\n    }\n    return true;\n}\n\nbool TreeProxy::lessThan(const QModelIndex& source_left, const QModelIndex& source_right) const\n{\n    if (sortColumn() != 0) {\n        return QSortFilterProxyModel::lessThan(source_left, source_right);\n    }\n\n    const auto* resultData = source_left.data(m_resultDataRole).value<const ResultData*>();\n\n    const auto symbol_left = source_left.data(m_symbolRole).value<Symbol>();\n    const auto symbol_right = source_right.data(m_symbolRole).value<Symbol>();\n\n    if (symbol_left.functionId != symbol_right.functionId) {\n        return resultData->string(symbol_left.functionId) < resultData->string(symbol_right.functionId);\n    }\n\n    const auto path_left = resultData->string(symbol_left.moduleId);\n    const auto path_right = resultData->string(symbol_right.moduleId);\n\n    auto toShortPath = [](const QString& path) {\n        int idx = path.lastIndexOf(QLatin1Char(\'/\'));\n        return path.midRef(idx + 1);\n    };\n\n    return toShortPath(path_left) < toShortPath(path_right);\n}\n'