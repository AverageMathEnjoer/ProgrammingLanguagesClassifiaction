b'{-# OPTIONS_GHC -fno-warn-type-defaults #-}\n{-# LANGUAGE NoImplicitPrelude #-}\n\nmodule Course.ExtendSpec where\n\n\nimport           Test.Hspec        (Spec, describe, it, shouldBe)\n\nimport           Course.Core\nimport           Course.ExactlyOne (ExactlyOne (ExactlyOne))\nimport           Course.Functor    ((<$>))\nimport           Course.List       (List (..), length, listh, reverse)\nimport           Course.Optional   (Optional (..))\n\nimport           Course.Extend     (cojoin, (<<=))\n\nspec :: Spec\nspec = do\n  it "ExactlyOne instance" $\n    (id <<= ExactlyOne 7) `shouldBe` ExactlyOne (ExactlyOne 7)\n\n  describe "List" $ do\n    it "length" $\n      (length <<= (\'a\' :. \'b\' :. \'c\' :. Nil)) `shouldBe` (3 :. 2 :. 1 :. Nil)\n    it "id" $\n      (id <<= (1 :. 2 :. 3 :. 4 :. Nil)) `shouldBe` nestedListh2 [[1,2,3,4],[2,3,4],[3,4],[4]]\n    it "reverse" $\n      (reverse <<= ((1 :. 2 :. 3 :. Nil) :. (4 :. 5 :. 6 :. Nil) :. Nil)) `shouldBe`\n        nestedListh3 [[[4,5,6],[1,2,3]],[[4,5,6]]]\n\n  describe "Optional" $ do\n    it "id Full" $\n      (id <<= (Full 7)) `shouldBe` Full (Full 7)\n    it "id Empty" $\n      (id <<= Empty) `shouldBe` (Empty :: Optional (Optional Integer))\n\n  describe "cojoin" $ do\n    it "ExactlyOne" $\n      cojoin (ExactlyOne 7) `shouldBe` ExactlyOne (ExactlyOne 7)\n    it "List" $\n      cojoin (1 :. 2 :. 3 :. 4 :. Nil) `shouldBe` nestedListh2 [[1,2,3,4],[2,3,4],[3,4],[4]]\n    it "Full" $\n      cojoin (Full 7) `shouldBe` Full (Full 7)\n    it "Empty" $\n      cojoin Empty `shouldBe` (Empty :: Optional (Optional Integer))\n\n\nnestedListh2 :: [[a]] -> List (List a)\nnestedListh2 = (listh <$>) . listh\n\nnestedListh3 :: [[[a]]] -> List (List (List a))\nnestedListh3 = ((listh <$>) <$>) . nestedListh2\n'