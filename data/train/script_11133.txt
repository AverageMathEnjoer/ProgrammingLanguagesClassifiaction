b"{-# LANGUAGE UndecidableInstances #-}\nmodule Database.Beam.Query.Types\n  ( Q, QExpr, QGenExpr(..), QExprToIdentity, QExprToField, QWindow\n\n  , Projectible\n\n  , HasQBuilder(..) ) where\n\nimport Database.Beam.Query.Internal\nimport Database.Beam.Query.SQL92\n\nimport Database.Beam.Schema.Tables\n\nimport Database.Beam.Backend.SQL\n-- import Database.Beam.Backend.SQL.Builder\n-- import Database.Beam.Backend.SQL.AST\n\nimport Control.Monad.Identity\nimport Data.Vector.Sized (Vector)\n\ntype family QExprToIdentity x\ntype instance QExprToIdentity (table (QGenExpr context syntax s)) = table Identity\ntype instance QExprToIdentity (table (Nullable c)) = Maybe (QExprToIdentity (table c))\ntype instance QExprToIdentity (QGenExpr context syntax s a) = a\ntype instance QExprToIdentity ()     = ()\ntype instance QExprToIdentity (a, b) = (QExprToIdentity a, QExprToIdentity b)\ntype instance QExprToIdentity (a, b, c) = (QExprToIdentity a, QExprToIdentity b, QExprToIdentity c)\ntype instance QExprToIdentity (a, b, c, d) = (QExprToIdentity a, QExprToIdentity b, QExprToIdentity c, QExprToIdentity d)\ntype instance QExprToIdentity (a, b, c, d, e) = (QExprToIdentity a, QExprToIdentity b, QExprToIdentity c, QExprToIdentity d, QExprToIdentity e)\ntype instance QExprToIdentity (a, b, c, d, e, f) = (QExprToIdentity a, QExprToIdentity b, QExprToIdentity c, QExprToIdentity d, QExprToIdentity e, QExprToIdentity f)\ntype instance QExprToIdentity (a, b, c, d, e, f, g) =\n  ( QExprToIdentity a, QExprToIdentity b, QExprToIdentity c, QExprToIdentity d, QExprToIdentity e, QExprToIdentity f\n  , QExprToIdentity g)\ntype instance QExprToIdentity (a, b, c, d, e, f, g, h) =\n  ( QExprToIdentity a, QExprToIdentity b, QExprToIdentity c, QExprToIdentity d, QExprToIdentity e, QExprToIdentity f\n  , QExprToIdentity g, QExprToIdentity h )\ntype instance QExprToIdentity (Vector n a) = Vector n (QExprToIdentity a)\n\n-- TODO can this be unified with QExprToIdentity?\ntype family QExprToField x\ntype instance QExprToField (table (QGenExpr context syntax s)) = table (QField s)\ntype instance QExprToField (table (Nullable (QGenExpr context syntax s))) = table (Nullable (QField s))\ntype instance QExprToField (QGenExpr ctxt syntax s a) = QField s a\ntype instance QExprToField () = ()\ntype instance QExprToField (a, b) = (QExprToField a, QExprToField b)\ntype instance QExprToField (a, b, c) = (QExprToField a, QExprToField b, QExprToField c)\ntype instance QExprToField (a, b, c, d) = (QExprToField a, QExprToField b, QExprToField c, QExprToField d)\ntype instance QExprToField (a, b, c, d, e) = (QExprToField a, QExprToField b, QExprToField c, QExprToField d, QExprToField e)\ntype instance QExprToField (a, b, c, d, e, f) =\n  ( QExprToField a, QExprToField b, QExprToField c, QExprToField d\n  , QExprToField e, QExprToField f )\ntype instance QExprToField (a, b, c, d, e, f, g) =\n  ( QExprToField a, QExprToField b, QExprToField c, QExprToField d\n  , QExprToField e, QExprToField f, QExprToField g )\ntype instance QExprToField (a, b, c, d, e, f, g, h) =\n  ( QExprToField a, QExprToField b, QExprToField c, QExprToField d\n  , QExprToField e, QExprToField f, QExprToField g, QExprToField h)\ntype instance QExprToField (Vector n a) = Vector n (QExprToField a)\n\nclass BeamSqlBackend be => HasQBuilder be where\n  buildSqlQuery :: Projectible be a\n                => TablePrefix -> Q be db s a -> BeamSqlBackendSelectSyntax be\ninstance BeamSqlBackend (MockSqlBackend cmd) => HasQBuilder (MockSqlBackend cmd) where\n  buildSqlQuery = buildSql92Query' True\n-- instance HasQBuilder Select where\n--   buildSqlQuery = buildSql92Query' True\n"