b'/**\n * Copyright (C) 2020 Fernando Cejas Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.fernandocejas.sample.features.movies\n\nimport android.os.Bundle\nimport android.view.View\nimport androidx.annotation.StringRes\nimport androidx.fragment.app.viewModels\nimport androidx.recyclerview.widget.StaggeredGridLayoutManager\nimport com.fernandocejas.sample.R\nimport com.fernandocejas.sample.core.exception.Failure\nimport com.fernandocejas.sample.core.exception.Failure.NetworkConnection\nimport com.fernandocejas.sample.core.exception.Failure.ServerError\nimport com.fernandocejas.sample.core.extension.failure\nimport com.fernandocejas.sample.core.extension.invisible\nimport com.fernandocejas.sample.core.extension.observe\nimport com.fernandocejas.sample.core.extension.visible\nimport com.fernandocejas.sample.core.navigation.Navigator\nimport com.fernandocejas.sample.core.platform.BaseFragment\nimport com.fernandocejas.sample.features.movies.MovieFailure.ListNotAvailable\nimport dagger.hilt.android.AndroidEntryPoint\nimport kotlinx.android.synthetic.main.fragment_movies.*\nimport javax.inject.Inject\n\n@AndroidEntryPoint\nclass MoviesFragment : BaseFragment() {\n\n    @Inject\n    lateinit var navigator: Navigator\n    @Inject\n    lateinit var moviesAdapter: MoviesAdapter\n\n    private val moviesViewModel: MoviesViewModel by viewModels()\n\n    override fun layoutId() = R.layout.fragment_movies\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        with(moviesViewModel) {\n            observe(movies, ::renderMoviesList)\n            failure(failure, ::handleFailure)\n        }\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        initializeView()\n        loadMoviesList()\n    }\n\n\n    private fun initializeView() {\n        movieList.layoutManager = StaggeredGridLayoutManager(3, StaggeredGridLayoutManager.VERTICAL)\n        movieList.adapter = moviesAdapter\n        moviesAdapter.clickListener = { movie, navigationExtras ->\n            navigator.showMovieDetails(requireActivity(), movie, navigationExtras)\n        }\n    }\n\n    private fun loadMoviesList() {\n        emptyView.invisible()\n        movieList.visible()\n        showProgress()\n        moviesViewModel.loadMovies()\n    }\n\n    private fun renderMoviesList(movies: List<MovieView>?) {\n        moviesAdapter.collection = movies.orEmpty()\n        hideProgress()\n    }\n\n    private fun handleFailure(failure: Failure?) {\n        when (failure) {\n            is NetworkConnection -> renderFailure(R.string.failure_network_connection)\n            is ServerError -> renderFailure(R.string.failure_server_error)\n            is ListNotAvailable -> renderFailure(R.string.failure_movies_list_unavailable)\n            else -> renderFailure(R.string.failure_server_error)\n        }\n    }\n\n    private fun renderFailure(@StringRes message: Int) {\n        movieList.invisible()\n        emptyView.visible()\n        hideProgress()\n        notifyWithAction(message, R.string.action_refresh, ::loadMoviesList)\n    }\n}\n'