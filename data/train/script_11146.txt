b'#include "stdafx.h"\n#include "resource.h"\n#include "TypeDatabaseEditor.h"\n#include "Win32AppContext.h"\n\n#include "FileDialog.h"\n\n#include "../AssetsTools/ClassDatabaseFile.h"\n#include "../AssetsTools/AssetsFileReader.h"\n\n#include <WindowsX.h>\n\nINT_PTR CALLBACK AddTypeField(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam);\nINT_PTR CALLBACK TypeDbEditor(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam);\nINT_PTR CALLBACK TypeDbVersionEditor(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam);\nINT_PTR CALLBACK TypeEditor(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam);\n\nstruct TypeDbEditDialog\n{\n\tHINSTANCE hInst = NULL;\n\tint selectedTypeIndex = -1;\n\tchar **originalUnityVersionList = nullptr;\n\tWCHAR *filePath = nullptr;\n\tClassDatabaseFile classDatabase;\n} typeDbEditDialog;\nstruct TypeDbVersionEditDialog\n{\n\tbool isCustomAlloc[256] = {};\n} typeDbVersionEditDialog;\nstruct TypeEditDialog\n{\n\tClassDatabaseType *pType = nullptr;\n\tClassDatabaseType workCopy;\n\tint selectedFieldIndex = -1;\n\tstd::vector<HTREEITEM> fields;\n} typeEditDialog;\nstruct AddFieldDialog\n{\n\tClassDatabaseTypeField typeField;\n\tbool success = false;\n} addFieldDialog;\nvoid OpenTypeDatabaseEditor(HINSTANCE hInstance, HWND hParent)\n{\n\ttypeDbEditDialog.hInst = hInstance;\n\ttypeDbEditDialog.originalUnityVersionList = NULL;\n\tDialogBox(hInstance, MAKEINTRESOURCE(IDD_EDITTYPEDB), hParent, TypeDbEditor);\n}\n\nstatic char *GetEditTextA(HWND hEdit)\n{\n\tchar *cNameBuf;\n\t#ifdef _UNICODE\n\t\tint wcTextLen = Edit_GetTextLength(hEdit);\n\t\tWCHAR *wcNameBuf = (WCHAR*)malloc((wcTextLen+1) * sizeof(WCHAR));\n\t\t__checkoutofmemory(wcNameBuf==NULL);\n\t\tEdit_GetText(hEdit, wcNameBuf, wcTextLen+1);\n\t\twcNameBuf[wcTextLen] = 0;\n\n\t\tint cTextLen = WideCharToMultiByte(CP_UTF8, 0, wcNameBuf, wcTextLen, NULL, 0, NULL, NULL);\n\t\tcNameBuf = (char*)malloc((cTextLen+1) * sizeof(char));\n\t\t__checkoutofmemory(cNameBuf==NULL);\n\t\tWideCharToMultiByte(CP_UTF8, 0, wcNameBuf, wcTextLen, cNameBuf, cTextLen, NULL, NULL);\n\t\tcNameBuf[cTextLen] = 0;\n\t\tfree(wcNameBuf);\n\t#else\n\t\tint cTextLen = Edit_GetTextLength(hEdit);\n\t\tcNameBuf = (char*)malloc(cTextLen+1);\n\t\t__checkoutofmemory(cNameBuf==NULL);\n\t\tEdit_GetText(hEdit, cNameBuf, cTextLen+1);\n\t\tcNameBuf[cTextLen] = 0;\n\t#endif\n\treturn cNameBuf;\n}\nstatic void SetEditTextA(HWND hEdit, const char *text)\n{\n\t#ifdef _UNICODE\n\t\tsize_t textLen = strlen(text);\n\t\tint wcharCount = MultiByteToWideChar(CP_UTF8, 0, text, (int)textLen, NULL, 0);\n\t\tWCHAR *wcTextBuf = (WCHAR*)malloc((wcharCount+1) * sizeof(WCHAR));\n\t\t__checkoutofmemory(wcTextBuf==NULL);\n\t\tMultiByteToWideChar(CP_UTF8, 0, text, (int)textLen, wcTextBuf, wcharCount);\n\t\twcTextBuf[wcharCount] = 0;\n\t\tEdit_SetText(hEdit, wcTextBuf);\n\t\tfree(wcTextBuf);\n\t#else\n\t\tEdit_SetText(hNameEdit, text);\n\t#endif\n}\n\nINT_PTR CALLBACK TypeDbEditor(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)\n{\n\tint wmId, wmEvent;\n\tUNREFERENCED_PARAMETER(lParam);\n\tswitch (message)\n\t{\n\tcase WM_INITDIALOG:\n\t\t{\n\t\t\tmemset(typeDbVersionEditDialog.isCustomAlloc, 0, 256);\n\t\t\tHWND hOptimizeFastCB = GetDlgItem(hDlg, IDC_CKOPTIMIZEFAST);\n\t\t\tButton_SetCheck(hOptimizeFastCB, true);\n\t\t\tHWND hOptimizeSlowCB = GetDlgItem(hDlg, IDC_CKOPTIMIZESLOW);\n\t\t\tButton_SetCheck(hOptimizeSlowCB, false);\n\t\t\tHWND hCompressLZ4CB = GetDlgItem(hDlg, IDC_CKCOMPRESSLZ4);\n\t\t\tButton_SetCheck(hCompressLZ4CB, false);\n\t\t\tHWND hCompressLZMACB = GetDlgItem(hDlg, IDC_CKCOMPRESSLZMA);\n\t\t\tButton_SetCheck(hCompressLZMACB, true);\n\n\t\t\tWCHAR *filePathBuf;\n\t\t\tHRESULT hr = ShowFileOpenDialog(hDlg, &filePathBuf, L"*.dat|Type database:",\n\t\t\t\tnullptr, nullptr, nullptr,\n\t\t\t\tUABE_FILEDIALOG_CLDB_GUID);\n\t\t\t__checkoutofmemory(hr==E_OUTOFMEMORY);\n\t\t\tif (SUCCEEDED(hr))\n\t\t\t{\n\t\t\t\tIAssetsReader *pDbReader = Create_AssetsReaderFromFile(filePathBuf, true, RWOpenFlags_Immediately);\n\n\t\t\t\tif (pDbReader != NULL)\n\t\t\t\t{\n\t\t\t\t\ttypeDbEditDialog.classDatabase.Read(pDbReader);\n\t\t\t\t\tFree_AssetsReader(pDbReader);\n\t\t\t\t\t//fclose(pDbFile);\n\t\t\t\t\ttypeDbEditDialog.filePath = filePathBuf;\n\t\t\t\t\t\n\t\t\t\t\tHWND hAssetlist = GetDlgItem(hDlg, IDC_TYPELIST);\n\t\t\t\t\tfor (DWORD i = 0; i < typeDbEditDialog.classDatabase.classes.size(); i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tClassDatabaseType *pType = &typeDbEditDialog.classDatabase.classes[i];\n\t\t\t\t\t\tconst char *typeName = pType->name.GetString(&typeDbEditDialog.classDatabase);\n\t\t\t\t\t\tif (typeName != NULL)\n\t\t\t\t\t\t{\n#ifdef _UNICODE\n\t\t\t\t\t\t\tsize_t typeNameLen = strlen(typeName);\n\t\t\t\t\t\t\tint wcharCount = MultiByteToWideChar(CP_UTF8, 0, typeName, (int)typeNameLen, NULL, 0);\n\t\t\t\t\t\t\tWCHAR *wcNameBuf = (WCHAR*)malloc((wcharCount+1) * sizeof(WCHAR));\n\t\t\t\t\t\t\t__checkoutofmemory(wcNameBuf==NULL);\n\t\t\t\t\t\t\tMultiByteToWideChar(CP_UTF8, 0, typeName, (int)typeNameLen, wcNameBuf, wcharCount);\n\t\t\t\t\t\t\twcNameBuf[wcharCount] = 0;\n\t\t\t\t\t\t\tListBox_AddString(hAssetlist, wcNameBuf);\n\t\t\t\t\t\t\tfree(wcNameBuf);\n#else\n\t\t\t\t\t\t\tListBox_AddString(hAssetlist, typeName);\n#endif\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tListBox_AddString(hAssetlist, TEXT(""));\n\t\t\t\t\t}\n\t\t\t\t\ttypeDbEditDialog.selectedTypeIndex = -1;\n\t\t\t\t\tListBox_SetCurSel(hAssetlist, 0);\n\t\t\t\t\tgoto DoUpdateTypeList;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tFreeCOMFilePathBuf(&filePathBuf);\n\t\t\t\t\tMessageBox(hDlg, TEXT("Unable to open the file!"), TEXT("ERROR"), 16);\n\t\t\t\t\tEndDialog(hDlg, LOWORD(wParam));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t\tEndDialog(hDlg, LOWORD(wParam));\n\t\t}\n\t\treturn (INT_PTR)TRUE;\n\t\t\n\tcase WM_CLOSE:\n\tcase WM_DESTROY:\n\t\tEndDialog(hDlg, LOWORD(wParam));\n\t\tgoto Free_TypeDbEditorDialog;\n\tcase WM_COMMAND:\n\t\twmId    = LOWORD(wParam);\n\t\twmEvent = HIWORD(wParam);\n\t\tswitch (wmId)\n\t\t{\n\t\t\tcase IDC_CKCOMPRESSLZ4:\n\t\t\t\t{\n\t\t\t\t\tHWND hCompressLZ4CB = GetDlgItem(hDlg, IDC_CKCOMPRESSLZ4);\n\t\t\t\t\tHWND hCompressLZMACB = GetDlgItem(hDlg, IDC_CKCOMPRESSLZMA);\n\t\t\t\t\tif (Button_GetCheck(hCompressLZ4CB))\n\t\t\t\t\t\tButton_SetCheck(hCompressLZMACB, 0);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase IDC_CKCOMPRESSLZMA:\n\t\t\t\t{\n\t\t\t\t\tHWND hCompressLZ4CB = GetDlgItem(hDlg, IDC_CKCOMPRESSLZ4);\n\t\t\t\t\tHWND hCompressLZMACB = GetDlgItem(hDlg, IDC_CKCOMPRESSLZMA);\n\t\t\t\t\tif (Button_GetCheck(hCompressLZMACB))\n\t\t\t\t\t\tButton_SetCheck(hCompressLZ4CB, 0);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase IDC_CKOPTIMIZEFAST:\n\t\t\t\t{\n\t\t\t\t\tHWND hOptimizeFastCB = GetDlgItem(hDlg, IDC_CKOPTIMIZEFAST);\n\t\t\t\t\tHWND hOptimizeSlowCB = GetDlgItem(hDlg, IDC_CKOPTIMIZESLOW);\n\t\t\t\t\tif (Button_GetCheck(hOptimizeFastCB))\n\t\t\t\t\t\tButton_SetCheck(hOptimizeSlowCB, 0);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase IDC_CKOPTIMIZESLOW:\n\t\t\t\t{\n\t\t\t\t\tHWND hOptimizeFastCB = GetDlgItem(hDlg, IDC_CKOPTIMIZEFAST);\n\t\t\t\t\tHWND hOptimizeSlowCB = GetDlgItem(hDlg, IDC_CKOPTIMIZESLOW);\n\t\t\t\t\tif (Button_GetCheck(hOptimizeSlowCB))\n\t\t\t\t\t\tButton_SetCheck(hOptimizeFastCB, 0);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase IDOK:\n\t\t\t\t{\n\t\t\t\t\tHWND hOptimizeFastCB = GetDlgItem(hDlg, IDC_CKOPTIMIZEFAST);\n\t\t\t\t\tHWND hOptimizeSlowCB = GetDlgItem(hDlg, IDC_CKOPTIMIZESLOW);\n\t\t\t\t\tbool optimizePlacebo = Button_GetCheck(hOptimizeSlowCB)?true:false;\n\t\t\t\t\tbool optimizeFast = (Button_GetCheck(hOptimizeFastCB)?true:false);\n\t\t\t\t\tint optimize = optimizePlacebo ? 2 : (optimizeFast ? 1 : 0);\n\t\t\t\t\tHWND hCompressLZ4CB = GetDlgItem(hDlg, IDC_CKCOMPRESSLZ4);\n\t\t\t\t\tHWND hCompressLZMACB = GetDlgItem(hDlg, IDC_CKCOMPRESSLZMA);\n\t\t\t\t\tDWORD compress = Button_GetCheck(hCompressLZ4CB) ? 1 : (Button_GetCheck(hCompressLZMACB) ? 2 : 0);\n\t\t\t\t\tIAssetsWriter *pDbWriter = Create_AssetsWriterToFile(typeDbEditDialog.filePath, true, true, RWOpenFlags_Immediately);\n\t\t\t\t\t//FILE *pDbFile = NULL;\n\t\t\t\t\t//_wfopen_s(&pDbFile, typeDbEditDialog.filePath, L"wb");\n\t\t\t\t\tif (pDbWriter != NULL)\n\t\t\t\t\t{\n\t\t\t\t\t\tDialogBox(typeDbEditDialog.hInst, MAKEINTRESOURCE(IDD_EDITTYPEDBVERSION), hDlg, TypeDbVersionEditor);\n\t\t\t\t\t\ttypeDbEditDialog.classDatabase.Write(pDbWriter, 0, optimize, compress);\n\t\t\t\t\t\tFree_AssetsWriter(pDbWriter);\n\t\t\t\t\t\t//fclose(pDbFile);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tMessageBox(hDlg, TEXT("Unable to open the file for writing!"), TEXT("ERROR"), 16);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tcase IDCANCEL:\n\t\t\t\tEndDialog(hDlg, LOWORD(wParam));\n\t\t\t\tgoto Free_TypeDbEditorDialog;\n\t\t\tcase IDC_BTNTYPEEDIT:\n\t\t\t\t{\n\t\t\t\t\tif (typeDbEditDialog.selectedTypeIndex >= 0 && typeDbEditDialog.selectedTypeIndex < (int)typeDbEditDialog.classDatabase.classes.size())\n\t\t\t\t\t{\n\t\t\t\t\t\ttypeEditDialog.pType = &typeDbEditDialog.classDatabase.classes[typeDbEditDialog.selectedTypeIndex];\n\t\t\t\t\t\tDialogBox(typeDbEditDialog.hInst, MAKEINTRESOURCE(IDD_EDITTYPE), hDlg, TypeEditor);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase IDC_BTNADD:\n\t\t\t\t{\n\t\t\t\t\tClassDatabaseType newType;\n\t\t\t\t\tnewType.name.fromStringTable = false;\n\t\t\t\t\tchar *str = (char*)malloc(1);\n\t\t\t\t\t__checkoutofmemory(str==NULL);\n\t\t\t\t\tstr[0] = 0;\n\t\t\t\t\tnewType.name.str.string = str;\n\t\t\t\t\tnewType.assemblyFileName.fromStringTable = false;\n\t\t\t\t\tchar *str2 = (char*)malloc(1);\n\t\t\t\t\t__checkoutofmemory(str2==NULL);\n\t\t\t\t\tstr2[0] = 0;\n\t\t\t\t\tnewType.assemblyFileName.str.string = str2;\n\n\t\t\t\t\tnewType.classId = -1;\n\t\t\t\t\tnewType.baseClass = 0;\n\t\t\t\t\ttypeDbEditDialog.classDatabase.classes.push_back(newType);\n\t\t\t\t\tHWND hTypeList = GetDlgItem(hDlg, IDC_TYPELIST);\n\t\t\t\t\tListBox_AddString(hTypeList, TEXT(""));\n\t\t\t\t\tListBox_SetCurSel(hTypeList, typeDbEditDialog.classDatabase.classes.size()-1);\n\t\t\t\t\tgoto DoUpdateTypeList;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase IDC_BTNREMOVE:\n\t\t\t\t{\n\t\t\t\t\tif (typeDbEditDialog.selectedTypeIndex >= 0 && typeDbEditDialog.selectedTypeIndex < (int)typeDbEditDialog.classDatabase.classes.size())\n\t\t\t\t\t{\n\t\t\t\t\t\tint selection = typeDbEditDialog.selectedTypeIndex;\n\t\t\t\t\t\tClassDatabaseType *pType = &typeDbEditDialog.classDatabase.classes[typeDbEditDialog.selectedTypeIndex];\n\t\t\t\t\t\tif (!pType->name.fromStringTable)\n\t\t\t\t\t\t\tfree(const_cast<char*>(pType->name.str.string));\n\t\t\t\t\t\tif (!pType->assemblyFileName.fromStringTable)\n\t\t\t\t\t\t\tfree(const_cast<char*>(pType->assemblyFileName.str.string));\n\t\t\t\t\t\tfor (size_t k = 0; k < pType->fields.size(); k++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tClassDatabaseTypeField *pField = &pType->fields[k];\n\t\t\t\t\t\t\tif (!pField->fieldName.fromStringTable)\n\t\t\t\t\t\t\t\tfree(const_cast<char*>(pField->fieldName.str.string));\n\t\t\t\t\t\t\tif (!pField->typeName.fromStringTable)\n\t\t\t\t\t\t\t\tfree(const_cast<char*>(pField->typeName.str.string));\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttypeDbEditDialog.classDatabase.classes.erase(typeDbEditDialog.classDatabase.classes.begin()+selection);\n\t\t\t\t\t\tHWND hTypeList = GetDlgItem(hDlg, IDC_TYPELIST);\n\t\t\t\t\t\tListBox_DeleteString(hTypeList, selection);\n\t\t\t\t\t\tif (selection < (int)typeDbEditDialog.classDatabase.classes.size())\n\t\t\t\t\t\t\tListBox_SetCurSel(hTypeList, selection);\n\t\t\t\t\t\telse if (selection > 0)\n\t\t\t\t\t\t\tListBox_SetCurSel(hTypeList, selection-1);\n\t\t\t\t\t\ttypeDbEditDialog.selectedTypeIndex = -1;\n\t\t\t\t\t\tgoto DoUpdateTypeList;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase IDC_EDITNAME:\n\t\t\t\t{\n\t\t\t\t\tif (typeDbEditDialog.selectedTypeIndex >= 0 && typeDbEditDialog.selectedTypeIndex < (int)typeDbEditDialog.classDatabase.classes.size())\n\t\t\t\t\t{\n\t\t\t\t\t\tClassDatabaseType *pSelectedType = &typeDbEditDialog.classDatabase.classes[typeDbEditDialog.selectedTypeIndex];\n\t\t\t\t\t\tHWND hNameEdit = GetDlgItem(hDlg, IDC_EDITNAME);\n\t\t\t\t\t\tHWND hAssetlist = GetDlgItem(hDlg, IDC_TYPELIST);\n\t\t\t\t\t\tchar *cNameBuf;\n\t\t\t\t\t\t#ifdef _UNICODE\n\t\t\t\t\t\t\tint wcTextLen = Edit_GetTextLength(hNameEdit);\n\t\t\t\t\t\t\tWCHAR *wcNameBuf = (WCHAR*)malloc((wcTextLen+1) * sizeof(WCHAR));\n\t\t\t\t\t\t\t__checkoutofmemory(wcNameBuf==NULL);\n\t\t\t\t\t\t\tEdit_GetText(hNameEdit, wcNameBuf, wcTextLen+1);\n\t\t\t\t\t\t\twcNameBuf[wcTextLen] = 0;\n\n\t\t\t\t\t\t\tListBox_DeleteString(hAssetlist, typeDbEditDialog.selectedTypeIndex);\n\t\t\t\t\t\t\tListBox_InsertString(hAssetlist, typeDbEditDialog.selectedTypeIndex, wcNameBuf);\n\n\t\t\t\t\t\t\tint cTextLen = WideCharToMultiByte(CP_UTF8, 0, wcNameBuf, wcTextLen, NULL, 0, NULL, NULL);\n\t\t\t\t\t\t\tcNameBuf = (char*)malloc((cTextLen+1) * sizeof(char));\n\t\t\t\t\t\t\t__checkoutofmemory(cNameBuf==NULL);\n\t\t\t\t\t\t\tWideCharToMultiByte(CP_UTF8, 0, wcNameBuf, wcTextLen, cNameBuf, cTextLen, NULL, NULL);\n\t\t\t\t\t\t\tcNameBuf[cTextLen] = 0;\n\t\t\t\t\t\t\tfree(wcNameBuf);\n\t\t\t\t\t\t#else\n\t\t\t\t\t\t\tint cTextLen = Edit_GetTextLength(hNameEdit);\n\t\t\t\t\t\t\tcNameBuf = (char*)malloc(cTextLen+1);\n\t\t\t\t\t\t\t__checkoutofmemory(cNameBuf==NULL);\n\t\t\t\t\t\t\tEdit_GetText(hNameEdit, cNameBuf, cTextLen+1);\n\t\t\t\t\t\t\tcNameBuf[cTextLen] = 0;\n\n\t\t\t\t\t\t\tListBox_DeleteString(hAssetlist, typeDbEditDialog.selectedTypeIndex);\n\t\t\t\t\t\t\tListBox_InsertString(hAssetlist, typeDbEditDialog.selectedTypeIndex, cNameBuf);\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\tListBox_SetCurSel(hAssetlist, typeDbEditDialog.selectedTypeIndex);\n\t\t\t\t\t\tif (!pSelectedType->name.fromStringTable)\n\t\t\t\t\t\t\tfree(const_cast<char*>(pSelectedType->name.str.string));\n\t\t\t\t\t\tpSelectedType->name.fromStringTable = false;\n\t\t\t\t\t\tpSelectedType->name.str.string = cNameBuf;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase IDC_EDITTYPEID:\n\t\t\t\t{\n\t\t\t\t\tif (typeDbEditDialog.selectedTypeIndex >= 0 && typeDbEditDialog.selectedTypeIndex < (int)typeDbEditDialog.classDatabase.classes.size())\n\t\t\t\t\t{\n\t\t\t\t\t\tClassDatabaseType *pSelectedType = &typeDbEditDialog.classDatabase.classes[typeDbEditDialog.selectedTypeIndex];\n\t\t\t\t\t\t\n\t\t\t\t\t\tHWND hTypeIdEdit = GetDlgItem(hDlg, IDC_EDITTYPEID);\n\t\t\t\t\t\tint tcTextLen = Edit_GetTextLength(hTypeIdEdit);\n\t\t\t\t\t\tTCHAR *tcNameBuf = (WCHAR*)malloc((tcTextLen+1) * sizeof(WCHAR));\n\t\t\t\t\t\t__checkoutofmemory(tcNameBuf==NULL);\n\t\t\t\t\t\tEdit_GetText(hTypeIdEdit, tcNameBuf, tcTextLen+1);\n\t\t\t\t\t\t*_errno() = 0;\n\t\t\t\t\t\tint typeId = _tcstol(tcNameBuf, NULL, 0);\n\t\t\t\t\t\tif (errno == ERANGE)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t*_errno() = 0;\n\t\t\t\t\t\t\ttypeId = (int)_tcstoul(tcNameBuf, NULL, 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (errno != ERANGE)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpSelectedType->classId = typeId;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfree(tcNameBuf);\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase IDC_TYPELIST:\n\t\t\tDoUpdateTypeList:\n\t\t\t\t{\n\t\t\t\t\tHWND hTypeList = GetDlgItem(hDlg, IDC_TYPELIST);\n\t\t\t\t\tunsigned int selection = (unsigned int)ListBox_GetCurSel(hTypeList);\n\t\t\t\t\tif ((selection != typeDbEditDialog.selectedTypeIndex) && selection < typeDbEditDialog.classDatabase.classes.size())\n\t\t\t\t\t{\n\t\t\t\t\t\ttypeDbEditDialog.selectedTypeIndex = (int)selection;\n\t\t\t\t\t\tHWND hNameEdit = GetDlgItem(hDlg, IDC_EDITNAME);\n\t\t\t\t\t\tHWND hTypeIdEdit = GetDlgItem(hDlg, IDC_EDITTYPEID);\n\t\t\t\t\t\tClassDatabaseType *pSelectedType = &typeDbEditDialog.classDatabase.classes[selection];\n\t\t\t\t\t\tconst char *typeName = pSelectedType->name.GetString(&typeDbEditDialog.classDatabase);\n\t\t\t\t\t\tif (typeName != NULL)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t#ifdef _UNICODE\n\t\t\t\t\t\t\t\tsize_t typeNameLen = strlen(typeName);\n\t\t\t\t\t\t\t\tint wcharCount = MultiByteToWideChar(CP_UTF8, 0, typeName, (int)typeNameLen, NULL, 0);\n\t\t\t\t\t\t\t\tWCHAR *wcNameBuf = (WCHAR*)malloc((wcharCount+1) * sizeof(WCHAR));\n\t\t\t\t\t\t\t\t__checkoutofmemory(wcNameBuf==NULL);\n\t\t\t\t\t\t\t\tMultiByteToWideChar(CP_UTF8, 0, typeName, (int)typeNameLen, wcNameBuf, wcharCount);\n\t\t\t\t\t\t\t\twcNameBuf[wcharCount] = 0;\n\t\t\t\t\t\t\t\tEdit_SetText(hNameEdit, wcNameBuf);\n\t\t\t\t\t\t\t\tfree(wcNameBuf);\n\t\t\t\t\t\t\t#else\n\t\t\t\t\t\t\t\tEdit_SetText(hNameEdit, typeName);\n\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t}\n\t\t\t\t\t\tTCHAR sprntTmp[12];\n\t\t\t\t\t\t_stprintf(sprntTmp, TEXT("0x%08X"), pSelectedType->classId);\n\t\t\t\t\t\tEdit_SetText(hTypeIdEdit, sprntTmp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\t}\n\treturn (INT_PTR)FALSE;\nFree_TypeDbEditorDialog:\n\tFreeCOMFilePathBuf(&typeDbEditDialog.filePath);\n\tfor (size_t i = 0; i < typeDbEditDialog.classDatabase.classes.size(); i++)\n\t{\n\t\tClassDatabaseType *pType = &typeDbEditDialog.classDatabase.classes[i];\n\t\tif (!pType->name.fromStringTable)\n\t\t\tfree(const_cast<char*>(pType->name.str.string));\n\t\tif (!pType->assemblyFileName.fromStringTable)\n\t\t\tfree(const_cast<char*>(pType->assemblyFileName.str.string));\n\t\tfor (size_t k = 0; k < pType->fields.size(); k++)\n\t\t{\n\t\t\tClassDatabaseTypeField *pField = &pType->fields[k];\n\t\t\tif (!pField->fieldName.fromStringTable)\n\t\t\t\tfree(const_cast<char*>(pField->fieldName.str.string));\n\t\t\tif (!pField->typeName.fromStringTable)\n\t\t\t\tfree(const_cast<char*>(pField->typeName.str.string));\n\t\t}\n\t}\n\tfor (int i = 0; i < typeDbEditDialog.classDatabase.header.unityVersionCount; i++)\n\t{\n\t\tif (typeDbVersionEditDialog.isCustomAlloc[i])\n\t\t{\n\t\t\tfree(typeDbEditDialog.classDatabase.header.pUnityVersions[i]);\n\t\t}\n\t}\n\tif (typeDbEditDialog.originalUnityVersionList && typeDbEditDialog.classDatabase.header.pUnityVersions &&\n\t\ttypeDbEditDialog.classDatabase.header.pUnityVersions != typeDbEditDialog.originalUnityVersionList)\n\t{\n\t\tfree(typeDbEditDialog.classDatabase.header.pUnityVersions);\n\t\ttypeDbEditDialog.classDatabase.header.pUnityVersions = typeDbEditDialog.originalUnityVersionList;\n\t}\n\ttypeDbEditDialog.classDatabase.~ClassDatabaseFile();\n\treturn (INT_PTR)TRUE;\n}\n\nINT_PTR CALLBACK TypeDbVersionEditor(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)\n{\n\tint wmId, wmEvent;\n\tUNREFERENCED_PARAMETER(lParam);\n\tswitch (message)\n\t{\n\tcase WM_INITDIALOG:\n\t\t{\n\t\t\tmemset(typeDbVersionEditDialog.isCustomAlloc, 0, 256 * sizeof(bool));\n\t\t\ttypeDbEditDialog.originalUnityVersionList = NULL;\n\t\t\tHWND hVersionList = GetDlgItem(hDlg, IDC_VERSIONLIST);\n\t\t\tfor (DWORD i = 0; i < typeDbEditDialog.classDatabase.header.unityVersionCount; i++)\n\t\t\t{\n\t\t\t\tconst char *versionName = typeDbEditDialog.classDatabase.header.pUnityVersions[i];\n\t\t\t\tif (versionName != NULL)\n\t\t\t\t{\n#ifdef _UNICODE\n\t\t\t\t\tsize_t versionNameLen = strlen(versionName);\n\t\t\t\t\tint wcharCount = MultiByteToWideChar(CP_UTF8, 0, versionName, (int)versionNameLen, NULL, 0);\n\t\t\t\t\tWCHAR *wcNameBuf = (WCHAR*)malloc((wcharCount+1) * sizeof(WCHAR));\n\t\t\t\t\t__checkoutofmemory(wcNameBuf==NULL);\n\t\t\t\t\tMultiByteToWideChar(CP_UTF8, 0, versionName, (int)versionNameLen, wcNameBuf, wcharCount);\n\t\t\t\t\twcNameBuf[wcharCount] = 0;\n\t\t\t\t\tListBox_AddString(hVersionList, wcNameBuf);\n\t\t\t\t\tfree(wcNameBuf);\n#else\n\t\t\t\t\tListBox_AddString(hVersionList, versionName);\n#endif\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tListBox_AddString(hVersionList, TEXT(""));\n\t\t\t}\n\t\t\tListBox_SetCurSel(hVersionList, 0);\n\t\t}\n\t\treturn (INT_PTR)TRUE;\n\t\t\n\tcase WM_CLOSE:\n\tcase WM_DESTROY:\n\t\tEndDialog(hDlg, LOWORD(wParam));\n\t\tgoto Free_TypeDbVersionEditorDialog;\n\tcase WM_COMMAND:\n\t\twmId    = LOWORD(wParam);\n\t\twmEvent = HIWORD(wParam);\n\t\tswitch (wmId)\n\t\t{\n\t\t\tcase IDOK:\n\t\t\t\t{\n\t\t\t\t\tEndDialog(hDlg, LOWORD(wParam));\n\t\t\t\t}\n\t\t\t\tgoto Free_TypeDbVersionEditorDialog;\n\t\t\tcase IDC_BTNREMOVE:\n\t\t\t\t{\n\t\t\t\t\tHWND hVersionList = GetDlgItem(hDlg, IDC_VERSIONLIST);\n\t\t\t\t\tint selection = ListBox_GetCurSel(hVersionList);\n\t\t\t\t\tif (selection >= 0 && selection < (int)typeDbEditDialog.classDatabase.header.unityVersionCount)\n\t\t\t\t\t{\n\t\t\t\t\t\tchar **pNewUnityVersions = (char**)malloc(sizeof(char*) * (typeDbEditDialog.classDatabase.header.unityVersionCount - 1));\n\t\t\t\t\t\t__checkoutofmemory(pNewUnityVersions==NULL);\n\t\t\t\t\t\tmemcpy(pNewUnityVersions, \n\t\t\t\t\t\t\ttypeDbEditDialog.classDatabase.header.pUnityVersions, \n\t\t\t\t\t\t\tselection * sizeof(char*));\n\t\t\t\t\t\tmemcpy(&pNewUnityVersions[selection], \n\t\t\t\t\t\t\t&typeDbEditDialog.classDatabase.header.pUnityVersions[selection+1], \n\t\t\t\t\t\t\t(typeDbEditDialog.classDatabase.header.unityVersionCount - 1 - selection) * sizeof(char*));\n\n\t\t\t\t\t\tmemcpy(&typeDbVersionEditDialog.isCustomAlloc[selection], \n\t\t\t\t\t\t\t&typeDbVersionEditDialog.isCustomAlloc[selection+1], \n\t\t\t\t\t\t\t255 - selection - 1);\n\n\t\t\t\t\t\tif (typeDbEditDialog.originalUnityVersionList == NULL)\n\t\t\t\t\t\t\ttypeDbEditDialog.originalUnityVersionList = typeDbEditDialog.classDatabase.header.pUnityVersions;\n\t\t\t\t\t\telse if (typeDbEditDialog.originalUnityVersionList != typeDbEditDialog.classDatabase.header.pUnityVersions)\n\t\t\t\t\t\t\tfree(typeDbEditDialog.classDatabase.header.pUnityVersions);\n\t\t\t\t\t\ttypeDbEditDialog.classDatabase.header.pUnityVersions = pNewUnityVersions;\n\t\t\t\t\t\ttypeDbEditDialog.classDatabase.header.unityVersionCount--;\n\n\t\t\t\t\t\tListBox_DeleteString(hVersionList, selection);\n\t\t\t\t\t\tif (selection < (int)typeDbEditDialog.classDatabase.header.unityVersionCount)\n\t\t\t\t\t\t\tListBox_SetCurSel(hVersionList, selection);\n\t\t\t\t\t\telse if (selection > 0)\n\t\t\t\t\t\t\tListBox_SetCurSel(hVersionList, selection-1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase IDC_BTNADD:\n\t\t\t\t{\n\t\t\t\t\tif (typeDbEditDialog.classDatabase.header.unityVersionCount >= 254)\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tHWND hVersionEdit = GetDlgItem(hDlg, IDC_VERSIONEDIT);\n\t\t\t\t\tHWND hVersionList = GetDlgItem(hDlg, IDC_VERSIONLIST);\n\t\t\t\t\t//int selection = ListBox_GetCurSel(hVersionList);\n\t\t\t\t\t//if (selection >= 0 && selection < (int)typeDbEditDialog.classDatabase.header.unityVersionCount)\n\t\t\t\t\t{\n\t\t\t\t\t\tchar *cNameBuf;\n\t\t\t\t\t\t#ifdef _UNICODE\n\t\t\t\t\t\t\tint wcTextLen = Edit_GetTextLength(hVersionEdit);\n\t\t\t\t\t\t\tWCHAR *wcNameBuf = (WCHAR*)malloc((wcTextLen+1) * sizeof(WCHAR));\n\t\t\t\t\t\t\t__checkoutofmemory(wcNameBuf==NULL);\n\t\t\t\t\t\t\tEdit_GetText(hVersionEdit, wcNameBuf, wcTextLen+1);\n\t\t\t\t\t\t\twcNameBuf[wcTextLen] = 0;\n\n\t\t\t\t\t\t\tListBox_AddString(hVersionList, wcNameBuf);\n\n\t\t\t\t\t\t\tint cTextLen = WideCharToMultiByte(CP_UTF8, 0, wcNameBuf, wcTextLen, NULL, 0, NULL, NULL);\n\t\t\t\t\t\t\tcNameBuf = (char*)malloc((cTextLen+1) * sizeof(char));\n\t\t\t\t\t\t\t__checkoutofmemory(cNameBuf==NULL);\n\t\t\t\t\t\t\tWideCharToMultiByte(CP_UTF8, 0, wcNameBuf, wcTextLen, cNameBuf, cTextLen, NULL, NULL);\n\t\t\t\t\t\t\tcNameBuf[cTextLen] = 0;\n\t\t\t\t\t\t\tfree(wcNameBuf);\n\t\t\t\t\t\t#else\n\t\t\t\t\t\t\tint cTextLen = Edit_GetTextLength(hNameEdit);\n\t\t\t\t\t\t\tcNameBuf = (char*)malloc(cTextLen+1);\n\t\t\t\t\t\t\t__checkoutofmemory(cNameBuf==NULL);\n\t\t\t\t\t\t\tEdit_GetText(hNameEdit, cNameBuf, cTextLen+1);\n\t\t\t\t\t\t\tcNameBuf[cTextLen] = 0;\n\n\t\t\t\t\t\t\tListBox_AddString(hVersionList, cNameBuf);\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\tListBox_SetCurSel(hVersionList, typeDbEditDialog.classDatabase.header.unityVersionCount);\n\t\t\t\t\t\tchar **pNewUnityVersions = (char**)malloc(sizeof(char*) * (typeDbEditDialog.classDatabase.header.unityVersionCount + 1));\n\t\t\t\t\t\t__checkoutofmemory(pNewUnityVersions==NULL);\n\t\t\t\t\t\tmemcpy(&pNewUnityVersions[0], \n\t\t\t\t\t\t\ttypeDbEditDialog.classDatabase.header.pUnityVersions, \n\t\t\t\t\t\t\ttypeDbEditDialog.classDatabase.header.unityVersionCount * sizeof(char*));\n\t\t\t\t\t\tpNewUnityVersions[typeDbEditDialog.classDatabase.header.unityVersionCount] = cNameBuf;\n\t\t\t\t\t\tif (typeDbEditDialog.originalUnityVersionList == NULL)\n\t\t\t\t\t\t\ttypeDbEditDialog.originalUnityVersionList = typeDbEditDialog.classDatabase.header.pUnityVersions;\n\t\t\t\t\t\telse if (typeDbEditDialog.originalUnityVersionList != typeDbEditDialog.classDatabase.header.pUnityVersions)\n\t\t\t\t\t\t\tfree(typeDbEditDialog.classDatabase.header.pUnityVersions);\n\t\t\t\t\t\ttypeDbEditDialog.classDatabase.header.pUnityVersions = pNewUnityVersions;\n\t\t\t\t\t\ttypeDbVersionEditDialog.isCustomAlloc[typeDbEditDialog.classDatabase.header.unityVersionCount] = true;\n\t\t\t\t\t\ttypeDbEditDialog.classDatabase.header.unityVersionCount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\t}\n\treturn (INT_PTR)FALSE;\nFree_TypeDbVersionEditorDialog:\n\t//nothing to free here, the TypeDbEditorDialog does all this\n\treturn (INT_PTR)TRUE;\n}\n\nWCHAR *_TypeEditor_MakeListViewName(ClassDatabaseTypeField *pTypeField)\n{\n\tconst char *fieldName = pTypeField->fieldName.GetString(&typeDbEditDialog.classDatabase);\n\tconst char *typeName = pTypeField->typeName.GetString(&typeDbEditDialog.classDatabase);\n\tint fieldNameMbLen = (int)strlen(fieldName);\n\tint fieldNameWcLen = MultiByteToWideChar(CP_UTF8, 0, fieldName, fieldNameMbLen, NULL, 0);\n\tint typeNameMbLen = (int)strlen(typeName);\n\tint typeNameWcLen = MultiByteToWideChar(CP_UTF8, 0, typeName, typeNameMbLen, NULL, 0);\n\n\tWCHAR *treeViewText = (WCHAR*)malloc((typeNameWcLen + 1 + fieldNameWcLen + 1) * sizeof(WCHAR));\n\t__checkoutofmemory(treeViewText==NULL);\n\tMultiByteToWideChar(CP_UTF8, 0, typeName, typeNameMbLen, treeViewText, typeNameWcLen);\n\ttreeViewText[typeNameWcLen] = L\' \';\n\tMultiByteToWideChar(CP_UTF8, 0, fieldName, fieldNameMbLen, &treeViewText[typeNameWcLen+1], fieldNameWcLen);\n\ttreeViewText[typeNameWcLen + 1 + fieldNameWcLen] = 0;\n\treturn treeViewText;\n}\nvoid _TypeEditor_BuildTreeView(HWND hFieldTree)\n{\n\tsize_t fieldCount = typeEditDialog.workCopy.fields.size();\n\tfor (size_t i = 0; i < fieldCount; i++)\n\t{\n\t\tClassDatabaseTypeField *pTypeField = &typeEditDialog.workCopy.fields[i];\n\t\tTVINSERTSTRUCT is;is.hParent = NULL;\n\t\tfor (size_t _k = i; _k > 0; _k--)\n\t\t{\n\t\t\tsize_t k = _k - 1;\n\t\t\tif (typeEditDialog.workCopy.fields[k].depth < pTypeField->depth)\n\t\t\t{\n\t\t\t\tis.hParent = typeEditDialog.fields[k];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tWCHAR *treeViewText = _TypeEditor_MakeListViewName(pTypeField);\n\n\t\tis.itemex.pszText = treeViewText;\n\t\tis.itemex.cchTextMax = (int)wcslen(treeViewText)+1;\n\t\tis.itemex.state = 0;\n\t\tis.itemex.stateMask = 0xFF;\n\t\tis.itemex.mask = TVIF_CHILDREN | TVIF_STATE | TVIF_TEXT;\n\t\t//WCHAR *treeViewString = (WCHAR*)\n\t\tif (i == 0)\n\t\t\tis.hInsertAfter = TVI_ROOT;\n\t\telse\n\t\t\tis.hInsertAfter = typeEditDialog.fields[i-1];\n\t\tif (((i+1) < fieldCount) && (typeEditDialog.workCopy.fields[i+1].depth > pTypeField->depth))\n\t\t\tis.itemex.cChildren = 1;\n\t\telse\n\t\t\tis.itemex.cChildren = 0;\n\t\ttypeEditDialog.fields.push_back(TreeView_InsertItem(hFieldTree, &is));\n\t\tfree(treeViewText);\n\t}\n}\nINT_PTR CALLBACK TypeEditor(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)\n{\n\tint wmId, wmEvent;\n\tUNREFERENCED_PARAMETER(lParam);\n\tswitch (message)\n\t{\n\tcase WM_INITDIALOG:\n\t\t{\n\t\t\ttypeEditDialog.selectedFieldIndex = -1;\n\t\t\ttypeEditDialog.workCopy = ClassDatabaseType(*typeEditDialog.pType);\n\t\t\t/*if (!typeEditDialog.workCopy.name.fromStringTable)\n\t\t\t{\n\t\t\t\tsize_t strLen = strlen(typeEditDialog.workCopy.name.str.string);\n\t\t\t\tchar *nameCopy = (char*)malloc(strLen+1);\n\t\t\t\t__checkoutofmemory(nameCopy==NULL);\n\t\t\t\tmemcpy(nameCopy, typeEditDialog.workCopy.name.str.string, strLen+1);\n\t\t\t\ttypeEditDialog.workCopy.name.str.string = nameCopy;\n\t\t\t}*/ //the type\'s name can\'t be changed during the TypeEditor\n\t\t\tHWND hFieldTree = GetDlgItem(hDlg, IDC_TYPETREE);\n\t\t\tsize_t fieldCount = typeEditDialog.workCopy.fields.size();\n\t\t\tfor (size_t i = 0; i < fieldCount; i++)\n\t\t\t{\n\t\t\t\tClassDatabaseTypeField *pTypeField = &typeEditDialog.workCopy.fields[i];\n\t\t\t\tif (!pTypeField->fieldName.fromStringTable)\n\t\t\t\t{\n\t\t\t\t\tsize_t strLen = strlen(pTypeField->fieldName.str.string);\n\t\t\t\t\tchar *nameCopy = (char*)malloc(strLen+1);\n\t\t\t\t\t__checkoutofmemory(nameCopy==NULL);\n\t\t\t\t\tmemcpy(nameCopy, pTypeField->fieldName.str.string, strLen+1);\n\t\t\t\t\tpTypeField->fieldName.str.string = nameCopy;\n\t\t\t\t}\n\t\t\t\tif (!pTypeField->typeName.fromStringTable)\n\t\t\t\t{\n\t\t\t\t\tsize_t strLen = strlen(pTypeField->typeName.str.string);\n\t\t\t\t\tchar *nameCopy = (char*)malloc(strLen+1);\n\t\t\t\t\t__checkoutofmemory(nameCopy==NULL);\n\t\t\t\t\tmemcpy(nameCopy, pTypeField->typeName.str.string, strLen+1);\n\t\t\t\t\tpTypeField->typeName.str.string = nameCopy;\n\t\t\t\t}\n\t\t\t}\n\t\t\t_TypeEditor_BuildTreeView(hFieldTree);\n\t\t}\n\t\treturn (INT_PTR)TRUE;\n\t\t\n\tcase WM_CLOSE:\n\tcase WM_DESTROY:\n\t\t//free the copied strings \n\t\tfor (size_t i = 0; i < typeEditDialog.workCopy.fields.size(); i++)\n\t\t{\n\t\t\tClassDatabaseTypeField *pCopiedTypeField = &typeEditDialog.workCopy.fields[i];\n\t\t\tif (!pCopiedTypeField->fieldName.fromStringTable)\n\t\t\t\tfree(const_cast<char*>(pCopiedTypeField->fieldName.str.string));\n\t\t\tif (!pCopiedTypeField->typeName.fromStringTable)\n\t\t\t\tfree(const_cast<char*>(pCopiedTypeField->typeName.str.string));\n\t\t\t//typeEditDialog.workCopy.fields.erase(typeEditDialog.workCopy.fields.begin()+i);\n\t\t\t//i--;\n\t\t}\n\t\tif (typeEditDialog.workCopy.fields.size() > 0)\n\t\t\ttypeEditDialog.workCopy.fields.clear(); //to make sure that the memory only is freed once!\n\t\tif (typeEditDialog.fields.size() > 0)\n\t\t\ttypeEditDialog.fields.clear(); //to make sure that the memory only is freed once!\n\t\tEndDialog(hDlg, LOWORD(wParam));\n\t\tgoto Free_TypeEditorDialog;\n\tcase WM_COMMAND:\n\t\twmId    = LOWORD(wParam);\n\t\twmEvent = HIWORD(wParam);\n\t\tswitch (wmId)\n\t\t{\n\t\t\tcase IDOK:\n\t\t\t\t{\n\t\t\t\t\t//free the original strings and replace the field\'s data with the work copy\'s field data\n\t\t\t\t\tfor (size_t i = 0; i < typeEditDialog.pType->fields.size(); i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tClassDatabaseTypeField *pOriginalTypeField = &typeEditDialog.pType->fields[i];\n\t\t\t\t\t\tif (!pOriginalTypeField->fieldName.fromStringTable)\n\t\t\t\t\t\t\tfree(const_cast<char*>(pOriginalTypeField->fieldName.str.string));\n\t\t\t\t\t\tif (!pOriginalTypeField->typeName.fromStringTable)\n\t\t\t\t\t\t\tfree(const_cast<char*>(pOriginalTypeField->typeName.str.string));\n\t\t\t\t\t}\n\t\t\t\t\ttypeEditDialog.pType->fields.erase(typeEditDialog.pType->fields.begin(), typeEditDialog.pType->fields.end());\n\t\t\t\t\t//typeEditDialog.pType->fields.clear();\n\t\t\t\t\ttypeEditDialog.pType->fields.reserve(typeEditDialog.workCopy.fields.size());\n\t\t\t\t\tfor (size_t i = 0; i < typeEditDialog.workCopy.fields.size(); i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tClassDatabaseTypeField *pCopiedTypeField = &typeEditDialog.workCopy.fields[i];\n\t\t\t\t\t\ttypeEditDialog.pType->fields.push_back(*pCopiedTypeField);\n\t\t\t\t\t}\n\t\t\t\t\ttypeEditDialog.workCopy.fields.clear();\n\t\t\t\t\ttypeEditDialog.fields.clear();\n\t\t\t\t\tEndDialog(hDlg, LOWORD(wParam));\n\t\t\t\t\tgoto Free_TypeEditorDialog;\n\t\t\t\t}\n\t\t\tcase IDCANCEL:\n\t\t\t\t{\n\t\t\t\t\t//free the copied strings \n\t\t\t\t\tfor (size_t i = 0; i < typeEditDialog.workCopy.fields.size(); i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tClassDatabaseTypeField *pCopiedTypeField = &typeEditDialog.workCopy.fields[i];\n\t\t\t\t\t\tif (!pCopiedTypeField->fieldName.fromStringTable)\n\t\t\t\t\t\t\tfree(const_cast<char*>(pCopiedTypeField->fieldName.str.string));\n\t\t\t\t\t\tif (!pCopiedTypeField->typeName.fromStringTable)\n\t\t\t\t\t\t\tfree(const_cast<char*>(pCopiedTypeField->typeName.str.string));\n\t\t\t\t\t}\n\t\t\t\t\ttypeEditDialog.workCopy.fields.erase(typeEditDialog.workCopy.fields.begin(),typeEditDialog.workCopy.fields.end());\n\t\t\t\t\ttypeEditDialog.fields.erase(typeEditDialog.fields.begin(),typeEditDialog.fields.end());\n\t\t\t\t\tEndDialog(hDlg, LOWORD(wParam));\n\t\t\t\t\tgoto Free_TypeEditorDialog;\n\t\t\t\t}\n\t\t\tcase IDC_BTNADD:\n\t\t\t\t{\n\t\t\t\t\tHWND hFieldTree = GetDlgItem(hDlg, IDC_TYPETREE);\n\t\t\t\t\tif (typeEditDialog.selectedFieldIndex < (int)typeEditDialog.fields.size())\n\t\t\t\t\t{\n\t\t\t\t\t\t//initialize the template field\n\t\t\t\t\t\taddFieldDialog.typeField.fieldName.fromStringTable = false;\n\t\t\t\t\t\taddFieldDialog.typeField.typeName.fromStringTable = false;\n\t\t\t\t\t\tchar *str = (char*)malloc(1);\n\t\t\t\t\t\t__checkoutofmemory(str==NULL);\n\t\t\t\t\t\tstr[0] = 0;\n\t\t\t\t\t\taddFieldDialog.typeField.fieldName.str.string = str;\n\t\t\t\t\t\tstr = (char*)malloc(1);\n\t\t\t\t\t\t__checkoutofmemory(str==NULL);\n\t\t\t\t\t\tstr[0] = 0;\n\t\t\t\t\t\taddFieldDialog.typeField.typeName.str.string = str;\n\t\t\t\t\t\taddFieldDialog.typeField.depth = 0;\n\t\t\t\t\t\taddFieldDialog.typeField.flags2 = 0;\n\t\t\t\t\t\taddFieldDialog.typeField.isArray = 0;\n\t\t\t\t\t\taddFieldDialog.typeField.size = 0;\n\t\t\t\t\t\taddFieldDialog.success = false;\n\n\t\t\t\t\t\tif (typeEditDialog.selectedFieldIndex == -1 && typeEditDialog.fields.size() == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tDialogBox(typeDbEditDialog.hInst, MAKEINTRESOURCE(IDD_ADDFIELD), hDlg, AddTypeField);\n\t\t\t\t\t\t\tif (addFieldDialog.success)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttypeEditDialog.workCopy.fields.push_back(addFieldDialog.typeField);\n\t\t\t\t\t\t\t\t_TypeEditor_BuildTreeView(hFieldTree);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (typeEditDialog.selectedFieldIndex >= 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tClassDatabaseTypeField *pField = &typeEditDialog.workCopy.fields[typeEditDialog.selectedFieldIndex];\n\t\t\t\t\t\t\taddFieldDialog.typeField.depth = pField->depth;\n\t\t\t\t\t\t\tDialogBox(typeDbEditDialog.hInst, MAKEINTRESOURCE(IDD_ADDFIELD), hDlg, AddTypeField);\n\t\t\t\t\t\t\tif (addFieldDialog.success) //if not, AddTypeField frees the strings\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tint targetIndex = typeEditDialog.selectedFieldIndex+1;\n\t\t\t\t\t\t\t\tTVINSERTSTRUCT is;\n\t\t\t\t\t\t\t\tif (addFieldDialog.typeField.depth > pField->depth) //is the new field a child of the selected one?\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t//make the selected field expandable if it isn\'t already\n\t\t\t\t\t\t\t\t\tis.itemex.hItem = typeEditDialog.fields[typeEditDialog.selectedFieldIndex];\n\t\t\t\t\t\t\t\t\tis.itemex.mask = TVIF_HANDLE | TVIF_CHILDREN;\n\t\t\t\t\t\t\t\t\tif (TreeView_GetItem(hFieldTree, &is.itemex) && is.itemex.cChildren != 1)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tis.itemex.cChildren = 1;\n\t\t\t\t\t\t\t\t\t\tis.itemex.mask = TVIF_HANDLE | TVIF_CHILDREN;\n\t\t\t\t\t\t\t\t\t\tTreeView_SetItem(hFieldTree, &is.itemex);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t//set the parent field\n\t\t\t\t\t\t\t\t\tis.hParent = typeEditDialog.fields[typeEditDialog.selectedFieldIndex];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttargetIndex = -1;\n\t\t\t\t\t\t\t\t\tfor (int i = typeEditDialog.selectedFieldIndex+1; i < (int)typeEditDialog.fields.size(); i++)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (typeEditDialog.workCopy.fields[i].depth <= pField->depth)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\ttargetIndex = i;\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (targetIndex == -1)\n\t\t\t\t\t\t\t\t\t\ttargetIndex = (int)typeEditDialog.fields.size();\n\t\t\t\t\t\t\t\t\tis.hParent = NULL;\n\t\t\t\t\t\t\t\t\tfor (int i = typeEditDialog.selectedFieldIndex-1; i >= 0; i--)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (typeEditDialog.workCopy.fields[i].depth < pField->depth)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tis.hParent = typeEditDialog.fields[i];\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (true)\n\t\t\t\t\t\t\t\t//if ((addFieldDialog.typeField.depth > pField->depth) && (typeEditDialog.fields.size() > (targetIndex+1)) &&\n\t\t\t\t\t\t\t\t//\t(typeEditDialog.workCopy.fields[targetIndex+1].depth == addFieldDialog.typeField.depth))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t//rebuild the tree view because it would otherwise append the new field after the parent\'s last field\n\t\t\t\t\t\t\t\t\ttypeEditDialog.workCopy.fields.insert(\n\t\t\t\t\t\t\t\t\t\ttypeEditDialog.workCopy.fields.begin()+targetIndex,\n\t\t\t\t\t\t\t\t\t\taddFieldDialog.typeField);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t//make a backup of the states (rebuilding sets it to 0)\n\t\t\t\t\t\t\t\t\tuint8_t *stateList = (uint8_t*)malloc(typeEditDialog.fields.size() * sizeof(uint8_t));\n\t\t\t\t\t\t\t\t\t__checkoutofmemory(stateList==NULL);\n\t\t\t\t\t\t\t\t\tfor (size_t i = 0; i < typeEditDialog.fields.size(); i++)\n\t\t\t\t\t\t\t\t\t\tstateList[i] = TreeView_GetItemState(hFieldTree, typeEditDialog.fields[i], 0x000D); //all item states except TVIS_SELECTED\n\n\t\t\t\t\t\t\t\t\tTreeView_DeleteAllItems(hFieldTree);\n\t\t\t\t\t\t\t\t\ttypeEditDialog.fields.clear();\n\t\t\t\t\t\t\t\t\t_TypeEditor_BuildTreeView(hFieldTree);\n\n\t\t\t\t\t\t\t\t\t//backup the expanded state\n\t\t\t\t\t\t\t\t\tint _i = 0;\n\t\t\t\t\t\t\t\t\tfor (size_t i = 0; i < typeEditDialog.fields.size(); i++)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (i == targetIndex)\n\t\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t\tTreeView_SetItemState(hFieldTree, typeEditDialog.fields[i], stateList[_i], 0x000D);\n\t\t\t\t\t\t\t\t\t\t_i++;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfree(stateList);\n\n\t\t\t\t\t\t\t\t\tTreeView_SelectItem(hFieldTree, typeEditDialog.fields[targetIndex]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttypeEditDialog.workCopy.fields.insert(\n\t\t\t\t\t\t\t\t\t\ttypeEditDialog.workCopy.fields.begin()+targetIndex,\n\t\t\t\t\t\t\t\t\t\taddFieldDialog.typeField);\n\n\t\t\t\t\t\t\t\t\tWCHAR *treeViewText = _TypeEditor_MakeListViewName(&addFieldDialog.typeField);\n\n\t\t\t\t\t\t\t\t\t//prepare the ListView\n\t\t\t\t\t\t\t\t\tis.itemex.pszText = treeViewText;\n\t\t\t\t\t\t\t\t\tis.itemex.cchTextMax = (int)wcslen(treeViewText);\n\t\t\t\t\t\t\t\t\tis.itemex.state = 0;\n\t\t\t\t\t\t\t\t\tis.itemex.stateMask = 0xFF;\n\t\t\t\t\t\t\t\t\tis.itemex.mask = TVIF_CHILDREN | TVIF_STATE | TVIF_TEXT;\n\t\t\t\t\t\t\t\t\tis.hInsertAfter = typeEditDialog.fields[targetIndex-1];\n\t\t\t\t\t\t\t\t\tis.itemex.cChildren = 0;\n\t\t\t\t\t\t\t\t\tHTREEITEM treeItem = TreeView_InsertItem(hFieldTree, &is);\n\t\t\t\t\t\t\t\t\tfree(treeViewText);\n\t\t\t\t\t\t\t\t\ttypeEditDialog.fields.insert(\n\t\t\t\t\t\t\t\t\t\ttypeEditDialog.fields.begin()+targetIndex,\n\t\t\t\t\t\t\t\t\t\ttreeItem);\n\t\t\t\t\t\t\t\t\tTreeView_SelectItem(hFieldTree, treeItem);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfree(const_cast<char*>(addFieldDialog.typeField.typeName.str.string));\n\t\t\t\t\t\t\tfree(const_cast<char*>(addFieldDialog.typeField.fieldName.str.string));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase IDC_BTNREMOVE:\n\t\t\t\t{\n\t\t\t\t\tHWND hFieldTree = GetDlgItem(hDlg, IDC_TYPETREE);\n\t\t\t\t\tif (typeEditDialog.selectedFieldIndex >= 0 && typeEditDialog.selectedFieldIndex < (int)typeEditDialog.fields.size())\n\t\t\t\t\t{\n\t\t\t\t\t\tClassDatabaseTypeField *pSelField = &typeEditDialog.workCopy.fields[typeEditDialog.selectedFieldIndex];\n\t\t\t\t\t\tuint8_t oldDepth = pSelField->depth; //after removing an item, it is better not to use pSelField anymore\n\t\t\t\t\t\tint oldSel = typeEditDialog.selectedFieldIndex;\n\t\t\t\t\t\ttypeEditDialog.selectedFieldIndex = -1;\n\t\t\t\t\t\tbool forceRemove = true;\n\t\t\t\t\t\tfor (int i = oldSel; i < (int)typeEditDialog.fields.size(); i++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tClassDatabaseTypeField *pField = &typeEditDialog.workCopy.fields[i];\n\t\t\t\t\t\t\t//if the current field is (no child of)/(not) the field to delete, select it and break \n\t\t\t\t\t\t\tif (!forceRemove && (pField->depth <= oldDepth))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTreeView_SelectItem(hFieldTree, typeEditDialog.fields[i]);\n\t\t\t\t\t\t\t\ttypeEditDialog.selectedFieldIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tforceRemove = false;\n\t\t\t\t\t\t\tif (!pField->fieldName.fromStringTable)\n\t\t\t\t\t\t\t\tfree(const_cast<char*>(pField->fieldName.str.string));\n\t\t\t\t\t\t\tif (!pField->typeName.fromStringTable)\n\t\t\t\t\t\t\t\tfree(const_cast<char*>(pField->typeName.str.string));\n\t\t\t\t\t\t\tTreeView_DeleteItem(hFieldTree, typeEditDialog.fields[i]);\n\t\t\t\t\t\t\ttypeEditDialog.workCopy.fields.erase(typeEditDialog.workCopy.fields.begin()+i);\n\t\t\t\t\t\t\ttypeEditDialog.fields.erase(typeEditDialog.fields.begin()+i);\n\t\t\t\t\t\t\ti--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//if the last field was the field to delete or a child of it, select the field before it\n\t\t\t\t\t\tif ((typeEditDialog.selectedFieldIndex == -1) && typeEditDialog.fields.size() > 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttypeEditDialog.selectedFieldIndex = (int)typeEditDialog.fields.size()-1;\n\t\t\t\t\t\t\tTreeView_SelectItem(hFieldTree, typeEditDialog.fields[typeEditDialog.selectedFieldIndex]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase IDC_EDITNAME:\n\t\t\t\t{\n\t\t\t\t\tif (typeEditDialog.selectedFieldIndex >= 0 && typeEditDialog.selectedFieldIndex < (int)typeEditDialog.fields.size())\n\t\t\t\t\t{\n\t\t\t\t\t\tClassDatabaseTypeField *pSelField = &typeEditDialog.workCopy.fields[typeEditDialog.selectedFieldIndex];\n\t\t\t\t\t\tHWND hNameEdit = GetDlgItem(hDlg, IDC_EDITNAME);\n\t\t\t\t\t\tchar *cNameBuf = GetEditTextA(hNameEdit);\n\t\t\t\t\t\tif (!pSelField->fieldName.fromStringTable)\n\t\t\t\t\t\t\tfree(const_cast<char*>(pSelField->fieldName.str.string));\n\t\t\t\t\t\tpSelField->fieldName.fromStringTable = false;\n\t\t\t\t\t\tpSelField->fieldName.str.string = cNameBuf;\n\n\t\t\t\t\t\tHWND hFieldTree = GetDlgItem(hDlg, IDC_TYPETREE);\n\t\t\t\t\t\tWCHAR *treeViewText = _TypeEditor_MakeListViewName(pSelField);\n\t\t\t\t\t\tTVITEMEX itemex;\n\t\t\t\t\t\titemex.hItem = typeEditDialog.fields[typeEditDialog.selectedFieldIndex];\n\t\t\t\t\t\titemex.mask = TVIF_HANDLE | TVIF_TEXT;\n\t\t\t\t\t\titemex.pszText = treeViewText;\n\t\t\t\t\t\titemex.cchTextMax = (int)wcslen(treeViewText);\n\t\t\t\t\t\tTreeView_SetItem(hFieldTree, &itemex);\n\t\t\t\t\t\tfree(treeViewText);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase IDC_EDITTYPE:\n\t\t\t\t{\n\t\t\t\t\tif (typeEditDialog.selectedFieldIndex >= 0 && typeEditDialog.selectedFieldIndex < (int)typeEditDialog.fields.size())\n\t\t\t\t\t{\n\t\t\t\t\t\tClassDatabaseTypeField *pSelField = &typeEditDialog.workCopy.fields[typeEditDialog.selectedFieldIndex];\n\t\t\t\t\t\tHWND hTypeEdit = GetDlgItem(hDlg, IDC_EDITTYPE);\n\t\t\t\t\t\tchar *cNameBuf = GetEditTextA(hTypeEdit);\n\t\t\t\t\t\tif (!pSelField->typeName.fromStringTable && pSelField->typeName.str.string != NULL)\n\t\t\t\t\t\t\tfree(const_cast<char*>(pSelField->typeName.str.string));\n\t\t\t\t\t\tpSelField->typeName.fromStringTable = false;\n\t\t\t\t\t\tpSelField->typeName.str.string = cNameBuf;\n\n\t\t\t\t\t\tHWND hFieldTree = GetDlgItem(hDlg, IDC_TYPETREE);\n\t\t\t\t\t\tWCHAR *treeViewText = _TypeEditor_MakeListViewName(pSelField);\n\t\t\t\t\t\tTVITEMEX itemex;\n\t\t\t\t\t\titemex.hItem = typeEditDialog.fields[typeEditDialog.selectedFieldIndex];\n\t\t\t\t\t\titemex.mask = TVIF_HANDLE | TVIF_TEXT;\n\t\t\t\t\t\titemex.pszText = treeViewText;\n\t\t\t\t\t\titemex.cchTextMax = (int)wcslen(treeViewText);\n\t\t\t\t\t\tTreeView_SetItem(hFieldTree, &itemex);\n\t\t\t\t\t\tfree(treeViewText);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase IDC_EDITSIZE:\n\t\t\t\t{\n\t\t\t\t\tif (typeEditDialog.selectedFieldIndex >= 0 && typeEditDialog.selectedFieldIndex < (int)typeEditDialog.fields.size())\n\t\t\t\t\t{\n\t\t\t\t\t\tClassDatabaseTypeField *pSelField = &typeEditDialog.workCopy.fields[typeEditDialog.selectedFieldIndex];\n\t\t\t\t\t\tHWND hSizeEdit = GetDlgItem(hDlg, IDC_EDITSIZE);\n\t\t\t\t\t\tint tcTextLen = Edit_GetTextLength(hSizeEdit);\n\t\t\t\t\t\tTCHAR *tcNameBuf = (WCHAR*)malloc((tcTextLen+1) * sizeof(WCHAR));\n\t\t\t\t\t\t__checkoutofmemory(tcNameBuf==NULL);\n\t\t\t\t\t\tEdit_GetText(hSizeEdit, tcNameBuf, tcTextLen+1);\n\t\t\t\t\t\t*_errno() = 0;\n\t\t\t\t\t\tint size = _tcstol(tcNameBuf, NULL, 0);\n\t\t\t\t\t\tif (errno == ERANGE)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t*_errno() = 0;\n\t\t\t\t\t\t\tsize = (int)_tcstoul(tcNameBuf, NULL, 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (errno != ERANGE)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpSelField->size = size;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfree(tcNameBuf);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase IDC_EDITVERSION:\n\t\t\t\t{\n\t\t\t\t\tif (typeEditDialog.selectedFieldIndex >= 0 && typeEditDialog.selectedFieldIndex < (int)typeEditDialog.fields.size())\n\t\t\t\t\t{\n\t\t\t\t\t\tClassDatabaseTypeField *pSelField = &typeEditDialog.workCopy.fields[typeEditDialog.selectedFieldIndex];\n\t\t\t\t\t\tHWND hVersionEdit = GetDlgItem(hDlg, IDC_EDITVERSION);\n\t\t\t\t\t\tint tcTextLen = Edit_GetTextLength(hVersionEdit);\n\t\t\t\t\t\tTCHAR *tcNameBuf = (WCHAR*)malloc((tcTextLen+1) * sizeof(WCHAR));\n\t\t\t\t\t\t__checkoutofmemory(tcNameBuf==NULL);\n\t\t\t\t\t\tEdit_GetText(hVersionEdit, tcNameBuf, tcTextLen+1);\n\t\t\t\t\t\t*_errno() = 0;\n\t\t\t\t\t\tint version = _tcstol(tcNameBuf, NULL, 0);\n\t\t\t\t\t\tif (errno == ERANGE)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t*_errno() = 0;\n\t\t\t\t\t\t\tversion = (int)_tcstoul(tcNameBuf, NULL, 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (errno != ERANGE)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpSelField->version = (uint16_t)version;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfree(tcNameBuf);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase IDC_CHECKARRAY:\n\t\t\t\t\tif (typeEditDialog.selectedFieldIndex >= 0 && typeEditDialog.selectedFieldIndex < (int)typeEditDialog.fields.size())\n\t\t\t\t\t{\n\t\t\t\t\t\tClassDatabaseTypeField *pSelField = &typeEditDialog.workCopy.fields[typeEditDialog.selectedFieldIndex];\n\t\t\t\t\t\tHWND hArrayCb = GetDlgItem(hDlg, IDC_CHECKARRAY);\n\t\t\t\t\t\tif (Button_GetCheck(hArrayCb) == BST_CHECKED)\n\t\t\t\t\t\t\tpSelField->isArray = 1;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tpSelField->isArray = 0;\n\t\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase IDC_CHECKALIGN:\n\t\t\t\t\tif (typeEditDialog.selectedFieldIndex >= 0 && typeEditDialog.selectedFieldIndex < (int)typeEditDialog.fields.size())\n\t\t\t\t\t{\n\t\t\t\t\t\tClassDatabaseTypeField *pSelField = &typeEditDialog.workCopy.fields[typeEditDialog.selectedFieldIndex];\n\t\t\t\t\t\tHWND hAlignCb = GetDlgItem(hDlg, IDC_CHECKALIGN);\n\t\t\t\t\t\tif (Button_GetCheck(hAlignCb) == BST_CHECKED)\n\t\t\t\t\t\t\tpSelField->flags2 = pSelField->flags2 | 0x4000;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tpSelField->flags2 = pSelField->flags2 & (~0x4000);\n\t\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase WM_NOTIFY:\n\t\t{\n\t\t\tswitch (((LPNMHDR)lParam)->code)\n\t\t\t{\n\t\t\t\tcase TVN_SELCHANGED:\n\t\t\t\t{\n\t\t\t\t\tLPNMTREEVIEW info = ((LPNMTREEVIEW)lParam);\n\t\t\t\t\tif (info->hdr.idFrom == IDC_TYPETREE)\n\t\t\t\t\t{\n\t\t\t\t\t\t//DoUpdateFieldList:\n\t\t\t\t\t\tHWND hFieldList = GetDlgItem(hDlg, IDC_TYPETREE);\n\t\t\t\t\t\tHTREEITEM selTreeItem = TreeView_GetSelection(hFieldList);//info->itemNew.hItem\n\t\t\t\t\t\tint selection = -1;\n\t\t\t\t\t\tfor (int i = 0; i < (int)typeEditDialog.fields.size(); i++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (typeEditDialog.fields[i] == selTreeItem)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tselection = i;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ((selection != typeEditDialog.selectedFieldIndex) && (selection < (int)typeEditDialog.fields.size()) && (selection >= 0))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttypeEditDialog.selectedFieldIndex = selection;\n\t\t\t\t\t\t\tHWND hFieldTypeEdit = GetDlgItem(hDlg, IDC_EDITTYPE);\n\t\t\t\t\t\t\tHWND hFieldNameEdit = GetDlgItem(hDlg, IDC_EDITNAME);\n\t\t\t\t\t\t\tHWND hSizeEdit = GetDlgItem(hDlg, IDC_EDITSIZE);\n\t\t\t\t\t\t\tHWND hVersionEdit = GetDlgItem(hDlg, IDC_EDITVERSION);\n\t\t\t\t\t\t\tHWND hArrayCb = GetDlgItem(hDlg, IDC_CHECKARRAY);\n\t\t\t\t\t\t\tHWND hAlignCb = GetDlgItem(hDlg, IDC_CHECKALIGN);\n\t\t\t\t\t\t\tClassDatabaseTypeField *pSelField = &typeEditDialog.workCopy.fields[selection];\n\n\t\t\t\t\t\t\tconst char *fieldType = pSelField->typeName.GetString(&typeDbEditDialog.classDatabase);\n\t\t\t\t\t\t\tSetEditTextA(hFieldTypeEdit, (fieldType == NULL) ? "" : fieldType);\n\t\t\t\t\t\t\tconst char *fieldName = pSelField->fieldName.GetString(&typeDbEditDialog.classDatabase);\n\t\t\t\t\t\t\tSetEditTextA(hFieldNameEdit, (fieldName == NULL) ? "" : fieldName);\n\n\t\t\t\t\t\t\tTCHAR sprntTmp[12];\n\t\t\t\t\t\t\t_stprintf(sprntTmp, TEXT("%d"), (int)pSelField->size);\n\t\t\t\t\t\t\tEdit_SetText(hSizeEdit, sprntTmp);\n\n\t\t\t\t\t\t\t_stprintf(sprntTmp, TEXT("%d"), (int)pSelField->version);\n\t\t\t\t\t\t\tEdit_SetText(hVersionEdit, sprntTmp);\n\n\t\t\t\t\t\t\tif (pSelField->isArray & 1)\n\t\t\t\t\t\t\t\tButton_SetCheck(hArrayCb, TRUE);\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tButton_SetCheck(hArrayCb, FALSE);\n\n\t\t\t\t\t\t\tif (pSelField->flags2 & 0x4000)\n\t\t\t\t\t\t\t\tButton_SetCheck(hAlignCb, TRUE);\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tButton_SetCheck(hAlignCb, FALSE);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tbreak;\n\t}\n\treturn (INT_PTR)FALSE;\nFree_TypeEditorDialog:\n\t//typeEditDialog.workCopy.~ClassDatabaseType();\n\treturn (INT_PTR)TRUE;\n}\n\nINT_PTR CALLBACK AddTypeField(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)\n{\tint wmId, wmEvent;\n\tUNREFERENCED_PARAMETER(lParam);\n\tswitch (message)\n\t{\n\tcase WM_INITDIALOG:\n\t\t{\n\t\t\taddFieldDialog.success = false;\n\t\t\tif (addFieldDialog.typeField.depth == 0)\n\t\t\t{\n\t\t\t\tHWND hIsChildCB = GetDlgItem(hDlg, IDC_CHECKISCHILD);\n\t\t\t\tButton_SetCheck(hIsChildCB, BST_CHECKED);\n\t\t\t\tEnableWindow(hIsChildCB, FALSE);\n\t\t\t}\n\t\t}\n\t\treturn (INT_PTR)TRUE;\n\t\t\n\tcase WM_CLOSE:\n\tcase WM_DESTROY:\n\t\tbreak;\n\tcase WM_COMMAND:\n\t\twmId    = LOWORD(wParam);\n\t\twmEvent = HIWORD(wParam);\n\t\tswitch (wmId)\n\t\t{\n\t\t\tcase IDOK:\n\t\t\t\t{\n\t\t\t\t\tHWND hIsChildCB = GetDlgItem(hDlg, IDC_CHECKISCHILD);\n\t\t\t\t\tHWND hTypeEdit = GetDlgItem(hDlg, IDC_EDITTYPE);\n\t\t\t\t\tHWND hNameEdit = GetDlgItem(hDlg, IDC_EDITNAME);\n\t\t\t\t\tHWND hSizeEdit = GetDlgItem(hDlg, IDC_EDITSIZE);\n\t\t\t\t\tHWND hArrayCB = GetDlgItem(hDlg, IDC_CHECKARRAY);\n\t\t\t\t\tHWND hAlignCB = GetDlgItem(hDlg, IDC_CHECKALIGN);\n\t\t\t\t\t\n\t\t\t\t\t//is child\n\t\t\t\t\tif (Button_GetCheck(hIsChildCB) == BST_CHECKED)\n\t\t\t\t\t\taddFieldDialog.typeField.depth++;\n\t\t\t\t\telse if (addFieldDialog.typeField.depth == 0)\n\t\t\t\t\t\tbreak; //Shouldn\'t (normally) happen, since the button is supposed to be stuck to \'checked\' in this case.\n\t\t\t\t\t//is array\n\t\t\t\t\taddFieldDialog.typeField.isArray = (Button_GetCheck(hArrayCB)==BST_CHECKED) ? 1 : 0;\n\t\t\t\t\t//align\n\t\t\t\t\tif (Button_GetCheck(hAlignCB)==BST_CHECKED)\n\t\t\t\t\t\taddFieldDialog.typeField.flags2 = addFieldDialog.typeField.flags2 | 0x4000;\n\t\t\t\t\telse\n\t\t\t\t\t\taddFieldDialog.typeField.flags2 = addFieldDialog.typeField.flags2 & (~0x4000);\n\t\t\t\t\t//size\n\t\t\t\t\tint tcTextLen = Edit_GetTextLength(hSizeEdit);\n\t\t\t\t\tTCHAR *tcNameBuf = (WCHAR*)malloc((tcTextLen+1) * sizeof(WCHAR));\n\t\t\t\t\t__checkoutofmemory(tcNameBuf==NULL);\n\t\t\t\t\tEdit_GetText(hSizeEdit, tcNameBuf, tcTextLen+1);\n\t\t\t\t\tint size = _tcstol(tcNameBuf, NULL, 0);\n\t\t\t\t\tif (errno != ERANGE)\n\t\t\t\t\t\taddFieldDialog.typeField.size = (DWORD)size;\n\t\t\t\t\telse\n\t\t\t\t\t\taddFieldDialog.typeField.size = (DWORD)-1;\n\t\t\t\t\t//version\n\t\t\t\t\taddFieldDialog.typeField.version = 1;\n\t\t\t\t\t\n\t\t\t\t\tchar *cTypeBuf = GetEditTextA(hTypeEdit);\n\t\t\t\t\tif (!addFieldDialog.typeField.typeName.fromStringTable && addFieldDialog.typeField.typeName.str.string != NULL)\n\t\t\t\t\t\tfree(const_cast<char*>(addFieldDialog.typeField.typeName.str.string));\n\t\t\t\t\taddFieldDialog.typeField.typeName.fromStringTable = false;\n\t\t\t\t\taddFieldDialog.typeField.typeName.str.string = cTypeBuf;\n\t\t\t\t\tchar *cNameBuf = GetEditTextA(hNameEdit);\n\t\t\t\t\tif (!addFieldDialog.typeField.fieldName.fromStringTable && addFieldDialog.typeField.typeName.str.string != NULL)\n\t\t\t\t\t\tfree(const_cast<char*>(addFieldDialog.typeField.fieldName.str.string));\n\t\t\t\t\taddFieldDialog.typeField.fieldName.fromStringTable = false;\n\t\t\t\t\taddFieldDialog.typeField.fieldName.str.string = cNameBuf;\n\n\t\t\t\t\taddFieldDialog.success = true;\n\t\t\t\t\tEndDialog(hDlg, LOWORD(wParam));\n\t\t\t\t\treturn (INT_PTR)TRUE;\n\t\t\t\t}\n\t\t\tcase IDCANCEL:\n\t\t\t\t//free the strings allocated by the caller\n\t\t\t\tif (!addFieldDialog.typeField.typeName.fromStringTable && addFieldDialog.typeField.typeName.str.string != NULL)\n\t\t\t\t\tfree(const_cast<char*>(addFieldDialog.typeField.typeName.str.string));\n\t\t\t\tif (!addFieldDialog.typeField.fieldName.fromStringTable && addFieldDialog.typeField.typeName.str.string != NULL)\n\t\t\t\t\tfree(const_cast<char*>(addFieldDialog.typeField.fieldName.str.string));\n\t\t\t\tEndDialog(hDlg, LOWORD(wParam));\n\t\t\t\treturn (INT_PTR)TRUE;\n\t\t}\n\t\tbreak;\n\t}\n\treturn (INT_PTR)FALSE;\n}'