b'package icu.nullptr.twifucker.ui\n\nimport android.content.Context\nimport android.graphics.Color\nimport android.util.TypedValue\nimport android.view.ViewGroup.LayoutParams.WRAP_CONTENT\nimport android.widget.Button\nimport android.widget.TextView\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport androidx.recyclerview.widget.RecyclerView\nimport icu.nullptr.twifucker.R\n\nclass FeatureSwitchView(context: Context) : CustomLayout(context) {\n\n    private val selectableItemBackground = TypedValue().also {\n        context.theme.resolveAttribute(android.R.attr.selectableItemBackground, it, true)\n    }\n\n    private val titleView = TextView(context).apply {\n        setTextAppearance(android.R.style.TextAppearance_DeviceDefault_Large)\n        layoutParams = LayoutParams(WRAP_CONTENT, WRAP_CONTENT).apply {\n            topMargin = 32.dp\n            marginStart = 32.dp\n        }\n        text = context.getString(R.string.feature_switch)\n        addView(this)\n    }\n\n    private var isRecyclerViewAdded = false\n    private val recyclerView = RecyclerView(context).apply {\n        layoutManager = LinearLayoutManager(context)\n        layoutParams = LayoutParams(WRAP_CONTENT, WRAP_CONTENT).apply {\n            marginStart = 32.dp\n            marginEnd = 32.dp\n        }\n        // TODO check if this is necessary\n        // addView(this)\n    }\n\n    private val buttonReset = Button(context).apply {\n        setBackgroundColor(Color.TRANSPARENT)\n        foreground = context.getDrawable(selectableItemBackground.resourceId)\n        layoutParams = LayoutParams(WRAP_CONTENT, WRAP_CONTENT).apply {\n            marginStart = 32.dp\n        }\n        text = context.getString(R.string.reset)\n        addView(this)\n    }\n\n    private val buttonAdd = Button(context).apply {\n        setBackgroundColor(Color.TRANSPARENT)\n        foreground = context.getDrawable(selectableItemBackground.resourceId)\n        layoutParams = LayoutParams(WRAP_CONTENT, WRAP_CONTENT).apply {\n            marginEnd = 32.dp\n        }\n        text = context.getString(R.string.add)\n        addView(this)\n    }\n\n    fun setAdapter(adapter: RecyclerView.Adapter<*>) {\n        recyclerView.adapter = adapter\n    }\n\n    fun setOnResetClickListener(listener: OnClickListener) {\n        buttonReset.setOnClickListener(listener)\n    }\n\n    fun setOnAddClickListener(listener: OnClickListener) {\n        buttonAdd.setOnClickListener(listener)\n    }\n\n    override fun onMeasure(widthMeasureSpec: Int, heightMeasureSpec: Int) {\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec)\n        titleView.autoMeasure()\n        buttonReset.autoMeasure()\n        buttonAdd.autoMeasure()\n        val maxWidth =\n            defaultWidthMeasureSpec(this).coerceAtMost((measuredWidth - recyclerView.marginStart - recyclerView.marginEnd).toExactlyMeasureSpec())\n        val recyclerViewMaxHeight =\n            defaultHeightMeasureSpec(this).coerceAtMost((measuredHeight - titleView.measuredHeightWithMargins - buttonReset.measuredHeightWithMargins).toExactlyMeasureSpec())\n        recyclerView.measure(maxWidth, recyclerViewMaxHeight)\n        val maxHeight =\n            (titleView.measuredHeightWithMargins + recyclerView.measuredHeightWithMargins + buttonReset.measuredHeightWithMargins).coerceAtMost(\n                measuredHeight\n            )\n        setMeasuredDimension(\n            measuredWidth, maxHeight\n        )\n    }\n\n    override fun onLayout(changed: Boolean, l: Int, t: Int, r: Int, b: Int) {\n        if (!isRTL) {\n            titleView.let {\n                it.layout(it.marginStart, it.marginTop)\n            }\n            recyclerView.let {\n                it.layout(it.marginStart, titleView.bottom)\n                // TODO check if this is necessary\n                if (!isRecyclerViewAdded) {\n                    addView(it)\n                    isRecyclerViewAdded = true\n                }\n            }\n            buttonReset.let {\n                it.layout(it.marginStart, recyclerView.bottom)\n            }\n            buttonAdd.let {\n                it.layout(it.marginEnd, recyclerView.bottom, fromRight = true)\n            }\n        } else {\n            titleView.let {\n                it.layout(it.marginEnd, it.marginTop, fromRight = true)\n            }\n            recyclerView.let {\n                it.layout(it.marginEnd, titleView.bottom, fromRight = true)\n                // TODO check if this is necessary\n                if (!isRecyclerViewAdded) {\n                    addView(it)\n                    isRecyclerViewAdded = true\n                }\n            }\n            buttonReset.let {\n                it.layout(it.marginEnd, recyclerView.bottom, fromRight = true)\n            }\n            buttonAdd.let {\n                it.layout(it.marginStart, recyclerView.bottom, fromRight = false)\n            }\n        }\n    }\n}\n'