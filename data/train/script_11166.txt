b'module Database.Beam.Migrate.Tool.Backend where\n\nimport           Database.Beam.Migrate.Tool.CmdLine\nimport           Database.Beam.Migrate.Tool.Registry\nimport           Database.Beam.Migrate.Backend\n\nimport           Control.Monad.Catch\n\nimport qualified Data.HashMap.Strict as HM\n#if !MIN_VERSION_base(4, 11, 0)\nimport           Data.Monoid\n#endif\n\nimport           Language.Haskell.Interpreter hiding (ModuleName)\nimport           Language.Haskell.Interpreter.Unsafe\n\nimport           System.Exit\nimport           System.IO\n\nloadBackend :: MigrateCmdLine -> MigrationRegistry\n            -> DatabaseName\n            -> IO (MigrationDatabase, MigrationFormat, SomeBeamMigrationBackend)\nloadBackend cmdLine reg dbName =\n  case HM.lookup dbName (migrationRegistryDatabases reg) of\n    Nothing -> fail "No such database"\n    Just db@(MigrationDatabase backend _) -> do\n      be <- loadBackend\' cmdLine backend\n      pure (db, MigrationFormatBackend (unModuleName backend), be)\n\nrunBeamInterpreter :: (MonadIO m, MonadMask m)\n                   => MigrateCmdLine -> InterpreterT m a\n                   -> m (Either InterpreterError a)\nrunBeamInterpreter cmdLine action =\n    let ghciArgs = map (\\p -> "-package-db " <> p) (migratePackagePath cmdLine) <> [ "-v" ]--, "-fno-code" ]\n    in unsafeRunInterpreterWithArgs ghciArgs $ do\n       unsafeSetGhcOption "-v3"\n       action\n\nloadBackend\' :: MigrateCmdLine -> ModuleName -> IO SomeBeamMigrationBackend\nloadBackend\' cmdLine (ModuleName backend) = do\n  res <- runBeamInterpreter cmdLine $ do\n    setImports [ "Database.Beam.Migrate.Backend", backend ]\n    interpret "SomeBeamMigrationBackend migrationBackend" (undefined :: SomeBeamMigrationBackend)\n\n  case res of\n    Right be -> pure be\n    Left e -> reportHintError e\n\nreportHintError :: InterpreterError -> IO a\nreportHintError e =\n  do hPutStrLn stderr $\n       case e of\n         WontCompile errs ->\n           "Plugin load error: " ++ unlines (map errMsg errs)\n         UnknownError err ->\n           "Unknown interpeter error: " ++ err\n         NotAllowed err ->\n           "Not allowed: " ++ err\n         GhcException err ->\n           "GHC exception: " ++ err\n     exitWith (ExitFailure 1)\n'