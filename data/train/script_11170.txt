b'/*\n    SPDX-FileCopyrightText: 2015-2017 Milian Wolff <mail@milianw.de>\n\n    SPDX-License-Identifier: LGPL-2.1-or-later\n*/\n\n#include "stacksmodel.h"\n#include "treemodel.h"\n\n#include <KLocalizedString>\n\n#include <QDebug>\n\nStacksModel::StacksModel(QObject* parent)\n    : QAbstractListModel(parent)\n{\n}\n\nStacksModel::~StacksModel() = default;\n\nvoid StacksModel::setStackIndex(int index)\n{\n    beginResetModel();\n    m_stackIndex = index - 1;\n    endResetModel();\n}\n\nstatic void findLeafs(const QModelIndex& index, QVector<QModelIndex>* leafs)\n{\n    auto model = index.model();\n    Q_ASSERT(model);\n    int rows = model->rowCount(index);\n    if (!rows) {\n        leafs->append(index);\n        return;\n    }\n    for (int i = 0; i < rows; ++i) {\n        findLeafs(model->index(i, 0, index), leafs);\n    }\n}\n\nvoid StacksModel::fillFromIndex(const QModelIndex& index)\n{\n    if (index.column() != 0) {\n        // only the first column has children\n        fillFromIndex(index.sibling(index.row(), 0));\n        return;\n    }\n\n    QVector<QModelIndex> leafs;\n    findLeafs(index, &leafs);\n\n    beginResetModel();\n    m_data.clear();\n    m_data.resize(leafs.size());\n    m_stackIndex = 0;\n    int stackIndex = 0;\n    for (auto leaf : leafs) {\n        auto& stack = m_data[stackIndex];\n        while (leaf.isValid()) {\n            stack << leaf.sibling(leaf.row(), TreeModel::LocationColumn);\n            leaf = leaf.parent();\n        }\n        std::reverse(stack.begin(), stack.end());\n        ++stackIndex;\n    }\n    endResetModel();\n\n    emit stacksFound(m_data.size());\n}\n\nvoid StacksModel::clear()\n{\n    beginResetModel();\n    m_data.clear();\n    endResetModel();\n    emit stacksFound(0);\n}\n\nint StacksModel::rowCount(const QModelIndex& parent) const\n{\n    if (parent.isValid() || m_data.isEmpty()) {\n        return 0;\n    }\n    return m_data.value(m_stackIndex).size();\n}\n\nQVariant StacksModel::data(const QModelIndex& index, int role) const\n{\n    if (!hasIndex(index.row(), index.column(), index.parent())) {\n        return {};\n    }\n    return m_data.value(m_stackIndex).value(index.row()).data(role);\n}\n\nQVariant StacksModel::headerData(int section, Qt::Orientation orientation, int role) const\n{\n    if (section == 0 && role == Qt::DisplayRole && orientation == Qt::Horizontal) {\n        return i18n("Backtrace");\n    }\n    return {};\n}\n'