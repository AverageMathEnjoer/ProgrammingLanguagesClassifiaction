b'#include "stdafx.h"\n#include <WindowsX.h>\n\n#include "BatchImportDialog.h"\n#include "../libStringConverter/convert.h"\n#include "../UABE_Generic/AssetPluginUtil.h"\n#include "resource.h"\n#include <regex>\n\nbool CBatchImportDialog::SearchDirectory(const std::wstring &path, const std::string &relativePath, std::vector<std::regex> &regexs, bool searchSubDirs)\n{\n\tWIN32_FIND_DATA findData;\n\tHANDLE hFind = FindFirstFileW((path + L"\\\\*").c_str(), &findData);\n\tif (hFind == INVALID_HANDLE_VALUE)\n\t\treturn false;\n\t//bool ret = false;\n\tdo\n\t{\n\t\tif (0 == wcscmp(findData.cFileName, L".") || 0 == wcscmp(findData.cFileName, L".."))\n\t\t\tcontinue;\n\t\tauto pFileName = unique_WideToMultiByte(findData.cFileName);\n\t\tif (findData.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)\n\t\t{\n\t\t\tif (searchSubDirs)\n\t\t\t{\n\t\t\t\t//ret |= \n\t\t\t\t\tSearchDirectory(path + L"\\\\" + findData.cFileName, relativePath + "\\\\" + pFileName.get(), regexs, true);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfor (size_t i = 0; i < regexs.size(); i++)\n\t\t\t{\n\t\t\t\tstd::cmatch match;\n\t\t\t\tif (!std::regex_match(pFileName.get(), match, regexs[0]))\n\t\t\t\t\tcontinue;\n\t\t\t\tstd::vector<std::string> capturingGroupsStr;\n\t\t\t\tstd::vector<const char*> capturingGroups;\n\t\t\t\t//Retrieve the capturing groups as UTF-8 char*.\n\t\t\t\tif (match.size() > 1)\n\t\t\t\t{\n\t\t\t\t\tcapturingGroupsStr.resize(match.size() - 1);\n\t\t\t\t\tcapturingGroups.resize(match.size() - 1);\n\t\t\t\t\tfor (size_t j = 0; (j+1) < match.size(); j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tcapturingGroupsStr[j] = match[j+1].str();\n\t\t\t\t\t\tcapturingGroups[j] = capturingGroupsStr[j].c_str();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tsize_t matchIndex = (size_t)-1;\n\t\t\t\tif (this->pDesc->GetFilenameMatchInfo(pFileName.get(), capturingGroups, matchIndex) && (matchIndex < this->assetInfo.size()))\n\t\t\t\t{\n\t\t\t\t\tstd::vector<AssetInfo::FileListEntry> &fileList = this->assetInfo[matchIndex].fileList;\n\t\t\t\t\tsize_t targetIndex = fileList.size();\n\t\t\t\t\tfileList.resize(fileList.size() + 1);\n\n\t\t\t\t\tfileList[targetIndex].isRelative = true;\n\t\t\t\t\tfileList[targetIndex].path = (relativePath + "\\\\" + pFileName.get());\n\n\t\t\t\t\t//ret = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} while (FindNextFileW(hFind, &findData));\n\tFindClose(hFind);\n\treturn true;\n}\n\nbool CBatchImportDialog::GenerateFileLists()\n{\n\tstd::vector<const char*> regexStrings; bool checkSubdirs = false;\n\tthis->pDesc->GetFilenameMatchStrings(regexStrings, checkSubdirs);\n\tif (regexStrings.size() == 0) return false;\n\n\tstd::vector<std::regex> regexs(regexStrings.size());\n\tfor (size_t i = 0; i < regexStrings.size(); i++)\n\t{\n\t\tregexs[i].assign(regexStrings[i], std::regex_constants::ECMAScript);\n\t}\n\t\n\tsize_t basePathWLen = 0;\n\twchar_t *basePathW = _MultiByteToWide(basePath.c_str(), basePathWLen);\n\tif (!basePathW) return false;\n\n\tthis->SearchDirectory(std::wstring(basePathW), std::string("."), regexs, checkSubdirs);\n\n\t_FreeWCHAR(basePathW);\n\treturn true;\n}\n\nsize_t CBatchImportDialog::GetCurAssetInfoIndex(unsigned int selection)\n{\n\tHWND hAssetlist = GetDlgItem(this->hWnd, IDC_ASSETLIST);\n\tif (hAssetlist != NULL)\n\t{\n\t\tif (selection == (unsigned int)-1)\n\t\t\tselection = (unsigned int)ListView_GetNextItem(hAssetlist, -1, LVNI_SELECTED);\n\t\tif ((selection >= 0) && (selection < assetInfo.size()))\n\t\t{\n\t\t\tLVITEM item;\n\t\t\tmemset(&item, 0, sizeof(LVITEM));\n\t\t\titem.iItem = selection;\n\t\t\titem.iSubItem = 0;\n\t\t\titem.mask = LVIF_PARAM;\n\t\t\tListView_GetItem(hAssetlist, &item);\n\t\t\tsize_t ret = (size_t)item.lParam;\n\t\t\tif (ret >= assetInfo.size()) return (size_t)-1;\n\t\t\treturn ret;\n\t\t}\n\t}\n\treturn (size_t)-1;\n}\n\nvoid CBatchImportDialog::UpdateDialogFileList(size_t assetInfoIndex)\n{\n\tthis->updatingAssetList = true;\n\n\tHWND hFileList = GetDlgItem(this->hWnd, IDC_FILELIST);\n\tListBox_ResetContent(hFileList);\n\t\n\tint extent = 0;\n\tif (assetInfoIndex < this->assetInfo.size())\n\t{\n\t\tstd::vector<AssetInfo::FileListEntry> &fileList = this->assetInfo[assetInfoIndex].fileList;\n\t\tfor (size_t i = 0; i < fileList.size(); i++)\n\t\t{\n\t\t\tsize_t filePathTLen = 0;\n\t\t\tTCHAR *filePathT = _MultiByteToTCHAR(fileList[i].path.c_str(), filePathTLen);\n\t\t\tListBox_AddString(hFileList, filePathT ? filePathT : L"");\n\n\t\t\tif (filePathT)\n\t\t\t{\n\t\t\t\tHDC hListDC = GetDC(hFileList);\n\t\t\t\tHGDIOBJ hOrigObject = SelectObject(hListDC, GetWindowFont(hFileList));\n\t\t\t\tRECT textRect = {};\n\t\t\t\tDrawText(hListDC, filePathT, -1, &textRect, DT_SINGLELINE | DT_CALCRECT);\n\t\t\t\tSelectObject(hListDC, hOrigObject);\n\t\t\t\tReleaseDC(hFileList, hListDC);\n\n\t\t\t\textent = std::max<long>(extent, textRect.right-textRect.left + 4);\n\t\t\t}\n\n\t\t\t_FreeTCHAR(filePathT);\n\t\t}\n\t}\n\tListBox_SetHorizontalExtent(hFileList, extent);\n\n\tthis->updatingAssetList = false;\n}\n\nint CALLBACK CBatchImportDialog::AssetlistSortCallback(LPARAM lParam1, LPARAM lParam2, LPARAM lParamSort)\n{\n\tsize_t assetDescIndex1 = (size_t)lParam1;\n\tsize_t assetDescIndex2 = (size_t)lParam2;\n\tCBatchImportDialog *pThis = (CBatchImportDialog*)lParamSort;\n\tif (assetDescIndex1 < pThis->assetInfo.size() && assetDescIndex2 < pThis->assetInfo.size())\n\t{\n\t\tbool swap = pThis->dialogSortDirReverse;\n\t\tint retGreater = swap ? 1 : -1;\n\t\tint retSmaller = swap ? -1 : 1;\n\t\tswitch (pThis->dialogSortColumnIdx)\n\t\t{\n\t\t\tcase 0:\n\t\t\t{\n\t\t\t\tstd::string &s1 = pThis->assetInfo[assetDescIndex1].description;\n\t\t\t\tstd::string &s2 = pThis->assetInfo[assetDescIndex2].description;\n\n\t\t\t\tif ( s1 > s2 ) return retGreater;\n\t\t\t\tif ( s1 < s2 ) return retSmaller;\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tcase 1:\n\t\t\t{\n\t\t\t\tstd::string &s1 = pThis->assetInfo[assetDescIndex1].assetsFileName;\n\t\t\t\tstd::string &s2 = pThis->assetInfo[assetDescIndex2].assetsFileName;\n\n\t\t\t\tif ( s1 > s2 ) return retGreater;\n\t\t\t\tif ( s1 < s2 ) return retSmaller;\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tcase 2:\n\t\t\t{\n\t\t\t\tlong long int pathId1 = pThis->assetInfo[assetDescIndex1].pathId;\n\t\t\t\tlong long int pathId2 = pThis->assetInfo[assetDescIndex2].pathId;\n\n\t\t\t\tif ( pathId1 > pathId2 ) return retGreater;\n\t\t\t\tif ( pathId1 < pathId2 ) return retSmaller;\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\nINT_PTR CALLBACK CBatchImportDialog::WindowHandler(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)\n{\n\tCBatchImportDialog* pThis = (CBatchImportDialog*)GetWindowLongPtr(hDlg, GWLP_USERDATA);\n\tINT_PTR ret = (INT_PTR)FALSE;\n\tint wmId, wmEvent;\n\tUNREFERENCED_PARAMETER(lParam);\n\tswitch (message)\n\t{\n\tcase WM_CLOSE:\n\t\tif (pThis && pThis->modeless)\n\t\t{\n\t\t\tpThis->hWnd = NULL;\n\t\t\tDestroyWindow(hDlg);\n\t\t}\n\t\tret = (INT_PTR)TRUE;\n\t\tbreak;\n\tcase WM_DESTROY:\n\t\tif (pThis)\n\t\t{\n\t\t\tpThis->assetInfo.clear();\n\t\t\tpThis->hWnd = NULL;\n\t\t\tif (pThis->closeCallback)\n\t\t\t{\n\t\t\t\tpThis->closeCallback(false);\n\t\t\t}\n\t\t\tSetWindowLongPtr(hDlg, GWLP_USERDATA, NULL);\n\t\t}\n\t\tbreak;\n\tcase WM_INITDIALOG:\n\t\t{\n\t\t\tSetWindowLongPtr(hDlg, GWLP_USERDATA, lParam);\n\t\t\tpThis = (CBatchImportDialog*)lParam;\n\t\t\tpThis->hWnd = hDlg;\n\t\t\t\n\t\t\tpThis->dialogSortColumnIdx = 0;\n\t\t\tpThis->dialogSortDirReverse = true;\n\t\t\tpThis->updatingAssetList = false;\n\n\t\t\tHWND hAssetList = GetDlgItem(hDlg, IDC_ASSETLIST);\n\t\t\tHWND hFileList = GetDlgItem(hDlg, IDC_FILELIST);\n\t\t\tHWND hEditAssetButton = GetDlgItem(hDlg, IDC_EDITASSETBTN);\n\t\t\n\t\t\t{\n\t\t\t\tLVCOLUMN column;\n\t\t\t\tZeroMemory(&column, sizeof(LVCOLUMN));\n\t\t\t\tcolumn.mask = LVCF_TEXT | LVCF_WIDTH | LVCF_SUBITEM;\n\t\t\t\tcolumn.cx = 180;\n\t\t\t\tcolumn.pszText = const_cast<TCHAR*>(TEXT("Description"));\n\t\t\t\tListView_InsertColumn(hAssetList, 0, &column);\n\t\t\t\tcolumn.cx = 140;\n\t\t\t\tcolumn.pszText = const_cast<TCHAR*>(TEXT("File"));\n\t\t\t\tListView_InsertColumn(hAssetList, 1, &column);\n\t\t\t\tcolumn.cx = 80;\n\t\t\t\tcolumn.pszText = const_cast<TCHAR*>(TEXT("Path ID"));\n\t\t\t\tListView_InsertColumn(hAssetList, 2, &column);\n\t\t\t}\n\t\t\t{\n\t\t\t\tif (pThis->pDescWin32 == nullptr || !pThis->pDescWin32->ShowAssetSettings((size_t)-1, hDlg))\n\t\t\t\t\tShowWindow(hEditAssetButton, SW_HIDE);\n\t\t\t}\n\t\t\t//Create a tooltip for the file list.\n\t\t\t{\n\t\t\t\t//https://msdn.microsoft.com/en-us/library/windows/desktop/hh298368(v=vs.85).aspx\n\t\t\t\tHWND hWndTooltip = CreateWindowEx(NULL, TOOLTIPS_CLASS, NULL,\n\t\t\t\t\tWS_POPUP |TTS_ALWAYSTIP | TTS_BALLOON,\n\t\t\t\t\tCW_USEDEFAULT, CW_USEDEFAULT,\n\t\t\t\t\tCW_USEDEFAULT, CW_USEDEFAULT,\n\t\t\t\t\thDlg, NULL, \n\t\t\t\t\tpThis->hInstance, NULL);\n\t\t\t\tif (hWndTooltip)\n\t\t\t\t{\n\t\t\t\t\tTOOLINFO toolInfo = {};\n\t\t\t\t\ttoolInfo.cbSize = sizeof(toolInfo);\n\t\t\t\t\ttoolInfo.hwnd = hDlg;\n\t\t\t\t\ttoolInfo.uFlags = TTF_IDISHWND | TTF_SUBCLASS;\n\t\t\t\t\ttoolInfo.uId = (uintptr_t)hFileList;\n\t\t\t\t\ttoolInfo.lpszText = const_cast<TCHAR*>(TEXT("Double click an item to move it up and use it for import."));\n\t\t\t\t\tSendMessage(hWndTooltip, TTM_ADDTOOL, 0, (LPARAM)&toolInfo);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstd::vector<IAssetBatchImportDesc::AssetDesc> newAssetDescs;\n\t\t\tif (pThis->pDesc->GetImportableAssetDescs(newAssetDescs))\n\t\t\t{\n\t\t\t\tpThis->assetInfo.resize(newAssetDescs.size());\n\n\t\t\t\tif (pThis->GenerateFileLists())\n\t\t\t\t{\n\t\t\t\t\tLVITEM item;\n\t\t\t\t\tZeroMemory(&item, sizeof(LVITEM));\n\t\t\t\t\titem.iSubItem = 0;\n\t\t\t\t\titem.cchTextMax = 255;\n\t\t\t\t\tfor (size_t i = 0; i < std::min<size_t>(INT_MAX, newAssetDescs.size()); i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tconst std::string &curDescription = newAssetDescs[i].description;\n\t\t\t\t\t\tpThis->assetInfo[i].description = curDescription;\n\n\t\t\t\t\t\tsize_t _strLen = 0;\n\t\t\t\t\t\tTCHAR *tcName = _MultiByteToTCHAR(curDescription.c_str(), _strLen);\n\n\t\t\t\t\t\titem.mask = (tcName ? LVIF_TEXT : 0) | LVIF_PARAM;\n\t\t\t\t\t\titem.lParam = i;\n\t\t\t\t\t\titem.iItem = (int)i;\n\t\t\t\t\t\titem.iSubItem = 0;\n\t\t\t\t\t\titem.pszText = tcName;\n\n\t\t\t\t\t\tListView_InsertItem(hAssetList, &item);\n\n\t\t\t\t\t\t_FreeTCHAR(tcName);\n\t\t\t\t\t\t\n\t\t\t\t\t\tconst std::string &curAssetsFileName = newAssetDescs[i].assetsFileName;\n\t\t\t\t\t\tpThis->assetInfo[i].assetsFileName = curAssetsFileName;\n\n\t\t\t\t\t\tTCHAR *tcAssetsFileName = _MultiByteToTCHAR(curAssetsFileName.c_str(), _strLen);\n\n\t\t\t\t\t\titem.mask = (tcAssetsFileName ? LVIF_TEXT : 0);\n\t\t\t\t\t\titem.iSubItem = 1;\n\t\t\t\t\t\titem.pszText = tcAssetsFileName;\n\t\t\t\t\t\tListView_SetItem(hAssetList, &item);\n\n\t\t\t\t\t\t_FreeTCHAR(tcAssetsFileName);\n\t\t\t\t\t\t\n\t\t\t\t\t\tpThis->assetInfo[i].pathId = newAssetDescs[i].pathID;\n\t\t\t\t\t\tTCHAR pathIdBuf[32];\n\t\t\t\t\t\t_stprintf_s(pathIdBuf, _T("%lli"), newAssetDescs[i].pathID);\n\n\t\t\t\t\t\titem.mask = LVIF_TEXT;\n\t\t\t\t\t\titem.iSubItem = 2;\n\t\t\t\t\t\titem.pszText = pathIdBuf;\n\t\t\t\t\t\tListView_SetItem(hAssetList, &item);\n\t\t\t\t\t}\n\n\t\t\t\t\tListView_SetItemState(hAssetList, 0, 0, LVIS_SELECTED);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpThis->modeless ? DestroyWindow(hDlg) : EndDialog(hDlg, FALSE);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tpThis->modeless ? DestroyWindow(hDlg) : EndDialog(hDlg, FALSE);\n\t\t\t}\n\n\t\t\tret = (INT_PTR)TRUE;\n\t\t\tgoto CASE_WM_SIZE;\n\t\t}\n\tcase WM_NOTIFY:\n\t\tif (pThis != nullptr)\n\t\t{\n\t\t\tNMLISTVIEW *pNotifyLV = (NMLISTVIEW*)lParam;\n\t\t\tswitch (pNotifyLV->hdr.code)\n\t\t\t{\n\t\t\t\tcase LVN_ITEMCHANGED:\n\t\t\t\t\tif (pNotifyLV->uNewState & LVIS_SELECTED)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (!pThis->updatingAssetList)\n\t\t\t\t\t\t\tpThis->UpdateDialogFileList(pThis->GetCurAssetInfoIndex((unsigned int)pNotifyLV->iItem));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase LVN_COLUMNCLICK:\n\t\t\t\t\tif (pThis->dialogSortColumnIdx == pNotifyLV->iSubItem)\n\t\t\t\t\t{\n\t\t\t\t\t\tpThis->dialogSortDirReverse ^= true;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tpThis->dialogSortColumnIdx = pNotifyLV->iSubItem;\n\t\t\t\t\t\tpThis->dialogSortDirReverse = false;\n\t\t\t\t\t}\n\n\t\t\t\t\tpThis->updatingAssetList = true;\n\t\t\t\t\tListView_SortItems(pNotifyLV->hdr.hwndFrom, AssetlistSortCallback, (LPARAM)pThis);\n\t\t\t\t\tpThis->updatingAssetList = false;\n\n\t\t\t\t\tpThis->UpdateDialogFileList(pThis->GetCurAssetInfoIndex());\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tbreak;\n\tcase WM_COMMAND:\n\t\tif (pThis != nullptr)\n\t\t{\n\t\t\twmId    = LOWORD(wParam);\n\t\t\twmEvent = HIWORD(wParam);\n\t\t\tswitch (wmId)\n\t\t\t{\n\t\t\t\tcase IDC_FILELIST:\n\t\t\t\t\t{\n\t\t\t\t\t\tswitch (wmEvent)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcase LBN_DBLCLK:\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tHWND hFileList = (HWND)lParam;\n\t\t\t\t\t\t\t\tunsigned int fileListSel = 0;\n\t\t\t\t\t\t\t\tsize_t curAssetInfoIndex = pThis->GetCurAssetInfoIndex();\n\t\t\t\t\t\t\t\tif (curAssetInfoIndex < pThis->assetInfo.size())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tfileListSel = (unsigned int)ListBox_GetCurSel(hFileList);\n\n\t\t\t\t\t\t\t\t\tstd::vector<AssetInfo::FileListEntry> &fileList = pThis->assetInfo[curAssetInfoIndex].fileList;\n\t\t\t\t\t\t\t\t\tif (fileListSel > 0 && fileListSel < fileList.size())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tAssetInfo::FileListEntry entry = fileList[fileListSel];\n\t\t\t\t\t\t\t\t\t\tfileList.erase(fileList.begin() + fileListSel);\n\t\t\t\t\t\t\t\t\t\tfileList.insert(fileList.begin(), entry);\n\t\t\t\t\t\t\t\t\t\tfileListSel = 0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tpThis->UpdateDialogFileList(pThis->GetCurAssetInfoIndex());\n\t\t\t\t\t\t\t\tListBox_SetCurSel(hFileList, (int)fileListSel);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase IDC_EDITASSETBTN:\n\t\t\t\t\t{\n\t\t\t\t\t\tHWND hFileList = GetDlgItem(hDlg, IDC_FILELIST);\n\n\t\t\t\t\t\tsize_t curAssetInfoIndex = pThis->GetCurAssetInfoIndex();\n\t\t\t\t\t\tif (curAssetInfoIndex < pThis->assetInfo.size())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (pThis->pDescWin32 != nullptr\n\t\t\t\t\t\t\t\t&& pThis->pDescWin32->ShowAssetSettings(curAssetInfoIndex, pThis->modeless ? pThis->hParentWnd : hDlg))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tAssetInfo::FileListEntry overrideEntry;\n\t\t\t\t\t\t\t\toverrideEntry.isRelative = false;\n\t\t\t\t\t\t\t\tif (pThis->pDesc->HasFilenameOverride(curAssetInfoIndex, overrideEntry.path, overrideEntry.isRelative))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tstd::vector<AssetInfo::FileListEntry> &fileList = pThis->assetInfo[curAssetInfoIndex].fileList;\n\t\t\t\t\t\t\t\t\tbool entryExists = false;\n\t\t\t\t\t\t\t\t\tfor (size_t i = 0; i < fileList.size(); i++)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (fileList[i].isRelative == overrideEntry.isRelative && !fileList[i].path.compare(overrideEntry.path))\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tentryExists = true;\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (!entryExists)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tfileList.insert(fileList.begin(), overrideEntry);\n\t\t\t\t\t\t\t\t\t\tpThis->UpdateDialogFileList(curAssetInfoIndex);\n\t\t\t\t\t\t\t\t\t\tListBox_SetCurSel(hFileList, (int)0);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase IDOK:\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (size_t i = 0; i < pThis->assetInfo.size(); i++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::string fullFilePathStr;\n\t\t\t\t\t\t\tconst char *fullFilePathCStr = nullptr;\n\t\t\t\t\t\t\tif (pThis->assetInfo[i].fileList.size() > 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (pThis->assetInfo[i].fileList[0].isRelative)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (!pThis->basePath.empty())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tfullFilePathStr = pThis->basePath;\n\t\t\t\t\t\t\t\t\t\tfullFilePathStr += "\\\\";\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfullFilePathStr += pThis->assetInfo[i].fileList[0].path;\n\t\t\t\t\t\t\t\t\tfullFilePathCStr = fullFilePathStr.c_str();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tfullFilePathCStr = pThis->assetInfo[i].fileList[0].path.c_str();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpThis->pDesc->SetInputFilepath(i, fullFilePathCStr);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbool modeless = pThis->modeless;\n\t\t\t\t\t\tif (pThis->closeCallback)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpThis->closeCallback(true);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmodeless ? DestroyWindow(hDlg) : EndDialog(hDlg, TRUE);\n\t\t\t\t\t}\n\t\t\t\t\treturn (INT_PTR)TRUE;\n\t\t\t\tcase IDCANCEL:\n\t\t\t\t\tpThis->modeless ? DestroyWindow(hDlg) : EndDialog(hDlg, FALSE);\n\t\t\t\t\treturn (INT_PTR)TRUE;\n\t\t\t}\n\t\t}\n\t\tbreak;\n\tcase WM_SIZE:\n\tCASE_WM_SIZE:\n\t\t{\n\t\t\tRECT client;\n\t\t\tGetClientRect(hDlg, &client);\n\t\t\tLONG clientWidth = client.right-client.left;\n\t\t\tLONG clientHeight = client.bottom-client.top;\n\t\t\tMoveWindow(GetDlgItem(hDlg, IDC_ASSETSSTATIC), 19, 10, (3*clientWidth / 5) + 7, 15, true);\n\t\t\tMoveWindow(GetDlgItem(hDlg, IDC_ASSETLIST), 19, 30, (3*clientWidth / 5) + 7, clientHeight - 72, true);\n\t\t\tMoveWindow(GetDlgItem(hDlg, IDC_EDITASSETBTN), 19, clientHeight - 33, 75, 26, true);\n\t\t\tMoveWindow(GetDlgItem(hDlg, IDC_FILESSTATIC), (3*clientWidth / 5) + 40, 10, (2*clientWidth / 5) - 56, 15, true);\n\t\t\tMoveWindow(GetDlgItem(hDlg, IDC_FILELIST), (3*clientWidth / 5) + 40, 30, (2*clientWidth / 5) - 56, clientHeight - 72, true);\n\t\t\tMoveWindow(GetDlgItem(hDlg, IDCANCEL), clientWidth - 91, clientHeight - 33, 75, 26, true);\n\t\t\tMoveWindow(GetDlgItem(hDlg, IDOK), (3*clientWidth / 5) + 40, clientHeight - 33, 75, 26, true);\n\t\t\tUpdateWindow(hDlg);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn ret;\n}\n\nCBatchImportDialog::CBatchImportDialog(HINSTANCE hInstance,\n\t\tIAssetBatchImportDesc* pDesc, IWin32AssetBatchImportDesc* pDescWin32,\n\t\tstd::string _basePath)\n\t: hParentWnd(hParentWnd), hWnd(NULL), modeless(false), hInstance(hInstance),\n\tdialogSortColumnIdx(0), dialogSortDirReverse(false), updatingAssetList(false),\n\tpDesc(pDesc), pDescWin32(pDescWin32), basePath(std::move(_basePath))\n{\n}\nCBatchImportDialog::~CBatchImportDialog()\n{\n\tif (this->hWnd)\n\t\tSendMessage(this->hWnd, WM_CLOSE, 0, 0);\n}\nvoid CBatchImportDialog::Hide()\n{\n\tif (this->hWnd)\n\t{\n\t\tShowWindow(this->hWnd, SW_HIDE);\n\t\tSetParent(this->hWnd, NULL);\n\t}\n}\nbool CBatchImportDialog::ShowModal(HWND hParentWnd)\n{\n\tthis->hParentWnd = hParentWnd;\n\tif (this->hWnd)\n\t\treturn false;\n\tthis->modeless = false;\n\treturn (DialogBoxParam(this->hInstance, MAKEINTRESOURCE(IDD_BATCHIMPORT), this->hParentWnd, WindowHandler, (LPARAM)this) == TRUE);\n}\nbool CBatchImportDialog::ShowModeless(HWND hParentWnd)\n{\n\tthis->hParentWnd = hParentWnd;\n\tif (this->hWnd)\n\t{\n\t\tSetParent(this->hWnd, hParentWnd);\n\t\tShowWindow(this->hWnd, SW_SHOW);\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\t//Modify the dialog style before creating the dialog\n\t\t//-> Load the dialog resource in memory and change the style flags,\n\t\t//   then create the dialog using CreateDialogIndirectParam.\n\t\t//https://docs.microsoft.com/en-us/windows/win32/dlgbox/dlgtemplateex\n\t\t//https://devblogs.microsoft.com/oldnewthing/20040623-00/?p=38753\n\t\tstruct _DLGTEMPLATEEX_HEADER {\n\t\t\tuint16_t dlgVer;\n\t\t\tuint16_t signature;\n\t\t\tDWORD helpID;\n\t\t\tDWORD exStyle;\n\t\t\tDWORD style;\n\t\t\tuint16_t cDlgItems;\n\t\t\tshort x;\n\t\t\tshort y;\n\t\t\tshort cx;\n\t\t\tshort cy;\n\t\t};\n\n\t\tbool ret = false;\n\t\tstd::vector<uint8_t> modelessResource;\n\t\t{\n\t\t\tHRSRC hResource = FindResourceExW(hInstance, RT_DIALOG, MAKEINTRESOURCE(IDD_BATCHIMPORT), 0);\n\t\t\tif (hResource == NULL)\n\t\t\t\treturn false;\n\t\t\tHGLOBAL hLoadedResource = LoadResource(hInstance, hResource);\n\t\t\tif (hLoadedResource == NULL)\n\t\t\t\treturn false;\n\t\t\tstd::unique_ptr<void, decltype(FreeResource)*> _raii_hLoadedResource(hLoadedResource, FreeResource);\n\t\t\tLPVOID pResourceData = LockResource(hLoadedResource);\n\t\t\tif (pResourceData == NULL)\n\t\t\t\treturn false;\n\t\t\tDWORD size = SizeofResource(hInstance, hResource);\n\t\t\tmodelessResource.assign((uint8_t*)pResourceData, (uint8_t*)pResourceData + size);\n\t\t}\n\t\t_DLGTEMPLATEEX_HEADER* pDlgTemplateHeader = reinterpret_cast<_DLGTEMPLATEEX_HEADER*>(modelessResource.data());\n\t\tif (modelessResource.size() < sizeof(_DLGTEMPLATEEX_HEADER)\n\t\t\t|| pDlgTemplateHeader->signature != 0xFFFF || pDlgTemplateHeader->dlgVer != 1)\n\t\t\treturn false;\n\t\tpDlgTemplateHeader->style &= ~(WS_POPUP | WS_CAPTION | WS_THICKFRAME);\n\t\tpDlgTemplateHeader->style |= WS_CHILD | WS_SYSMENU;\n\t\tthis->modeless = true;\n\t\tthis->hWnd = CreateDialogIndirectParam(this->hInstance, (DLGTEMPLATE*)pDlgTemplateHeader, this->hParentWnd, WindowHandler, (LPARAM)this);\n\t\treturn (this->hWnd != NULL);\n\t}\n}'