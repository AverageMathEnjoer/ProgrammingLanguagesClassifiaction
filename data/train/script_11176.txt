b'/*\n* Copyright (C) 2014 The CyanogenMod Project\n*\n* Licensed under the Apache License, Version 2.0 (the "License");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an "AS IS" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\npackage com.naman14.timber.dataloaders;\n\nimport android.content.Context;\nimport android.database.Cursor;\nimport android.provider.BaseColumns;\n\nimport com.naman14.timber.provider.RecentStore;\nimport com.naman14.timber.provider.SongPlayCount;\n\nimport java.util.ArrayList;\n\npublic class TopTracksLoader extends SongLoader {\n\n    public static final int NUMBER_OF_SONGS = 99;\n    protected static QueryType mQueryType;\n    private static Context mContext;\n\n    public TopTracksLoader(final Context context, QueryType type) {\n        mContext = context;\n        mQueryType = type;\n    }\n\n    public static Cursor getCursor() {\n        SortedCursor retCursor = null;\n        if (mQueryType == QueryType.TopTracks) {\n            retCursor = makeTopTracksCursor(mContext);\n        } else if (mQueryType == QueryType.RecentSongs) {\n            retCursor = makeRecentTracksCursor(mContext);\n        }\n\n        if (retCursor != null) {\n            ArrayList<Long> missingIds = retCursor.getMissingIds();\n            if (missingIds != null && missingIds.size() > 0) {\n                for (long id : missingIds) {\n                    if (mQueryType == QueryType.TopTracks) {\n                        SongPlayCount.getInstance(mContext).removeItem(id);\n                    } else if (mQueryType == QueryType.RecentSongs) {\n                        RecentStore.getInstance(mContext).removeItem(id);\n                    }\n                }\n            }\n        }\n\n        return retCursor;\n    }\n\n    public static final SortedCursor makeTopTracksCursor(final Context context) {\n\n        Cursor songs = SongPlayCount.getInstance(context).getTopPlayedResults(NUMBER_OF_SONGS);\n\n        try {\n            return makeSortedCursor(context, songs,\n                    songs.getColumnIndex(SongPlayCount.SongPlayCountColumns.ID));\n        } finally {\n            if (songs != null) {\n                songs.close();\n                songs = null;\n            }\n        }\n    }\n\n    public static final SortedCursor makeRecentTracksCursor(final Context context) {\n\n        Cursor songs = RecentStore.getInstance(context).queryRecentIds(null);\n\n        try {\n            return makeSortedCursor(context, songs,\n                    songs.getColumnIndex(SongPlayCount.SongPlayCountColumns.ID));\n        } finally {\n            if (songs != null) {\n                songs.close();\n                songs = null;\n            }\n        }\n    }\n\n    public static final SortedCursor makeSortedCursor(final Context context, final Cursor cursor,\n                                                      final int idColumn) {\n        if (cursor != null && cursor.moveToFirst()) {\n\n            StringBuilder selection = new StringBuilder();\n            selection.append(BaseColumns._ID);\n            selection.append(" IN (");\n\n            long[] order = new long[cursor.getCount()];\n\n            long id = cursor.getLong(idColumn);\n            selection.append(id);\n            order[cursor.getPosition()] = id;\n\n            while (cursor.moveToNext()) {\n                selection.append(",");\n\n                id = cursor.getLong(idColumn);\n                order[cursor.getPosition()] = id;\n                selection.append(String.valueOf(id));\n            }\n\n            selection.append(")");\n\n            Cursor songCursor = makeSongCursor(context, selection.toString(), null);\n            if (songCursor != null) {\n                return new SortedCursor(songCursor, order, BaseColumns._ID, null);\n            }\n        }\n\n        return null;\n    }\n\n\n    public enum QueryType {\n        TopTracks,\n        RecentSongs,\n    }\n}\n'