b'// Copyright (c) 2022-2023 Manuel Schneider\n\n#include "albert/extensions/queryhandler.h"\n#include "globalqueryhandlerprivate.h"\n#include "indexqueryhandlerprivate.h"\n#include <utility>\nusing namespace std;\nusing namespace albert;\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n\nTriggerQueryHandler::TriggerQuery::~TriggerQuery() = default;\n\nQString TriggerQueryHandler::synopsis() const { return {}; }\n\nQString TriggerQueryHandler::defaultTrigger() const { return QString("%1 ").arg(id()); }\n\nbool TriggerQueryHandler::allowTriggerRemap() const { return true; }\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n\nRankItem::RankItem(shared_ptr<Item> i, Score s):\n    item(std::move(i)), score(s) {}\n\nGlobalQueryHandler::GlobalQuery::~GlobalQuery() = default;\n\nGlobalQueryHandler::GlobalQueryHandler() : d(new GlobalQueryHandlerPrivate(this)) {}\n\nGlobalQueryHandler::~GlobalQueryHandler() = default;\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n\nvoid QueryHandler::handleTriggerQuery(TriggerQuery &query) const\n{\n    std::vector<RankItem> &&rank_items = d->handleGlobalQuery(dynamic_cast<GlobalQuery&>(query));\n    sort(rank_items.begin(), rank_items.end(), [](const auto &a, const auto &b){ return a.score > b.score; });\n\n    // TODO c++20 ranges::view\n    std::vector<shared_ptr<Item>> items;\n    items.reserve(rank_items.size());\n    for (auto &match : rank_items)\n        items.push_back(std::move(match.item));\n\n    query.add(std::move(items));\n}\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n\nIndexItem::IndexItem(std::shared_ptr<Item> i, QString s):\n    item(::move(i)), string(::move(s)){}\n\nIndexQueryHandler::IndexQueryHandler() : d(new IndexQueryHandlerPrivate(this)) {}\n\nIndexQueryHandler::~IndexQueryHandler() = default;\n\nvoid IndexQueryHandler::setIndexItems(std::vector<IndexItem> &&index_items)\n{ d->setIndexItems(::move(index_items)); }\n\nstd::vector<RankItem> IndexQueryHandler::handleGlobalQuery(const GlobalQuery &query) const\n{ return d->handleGlobalQuery(query); }\n'