b'\xef\xbb\xbfusing Asn1;\nusing System;\nusing System.Security.Cryptography;\n\nnamespace Rubeus {\n    public class KrbPkAuthenticator {\n\n        public KrbPkAuthenticator(uint cuSec, DateTime cTime, int nonce, KDCReqBody reqBody) {\n            CuSec = cuSec;\n            CTime = cTime;\n            Nonce = nonce;\n            RequestBody = reqBody;\n        }\n\n        public KDCReqBody RequestBody { get; private set; }\n        public uint CuSec { get; set; }\n        public DateTime CTime { get; set; }\n        public int Nonce { get; set; }\n\n        public AsnElt Encode() {\n\n            byte[] paChecksum;\n\n            using (SHA1CryptoServiceProvider sha1 = new SHA1CryptoServiceProvider()) {\n                paChecksum = sha1.ComputeHash(RequestBody.Encode().Encode());\n            }\n        \n            AsnElt asnCTime = AsnElt.MakeString(AsnElt.GeneralizedTime, CTime.ToString("yyyyMMddHHmmssZ"));\n\n            return AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] {\n                    AsnElt.Make(AsnElt.CONTEXT,0, new AsnElt[] { AsnElt.MakeInteger(CuSec) }),\n                    AsnElt.Make(AsnElt.CONTEXT,1, new AsnElt[]{ asnCTime } ),\n                    AsnElt.Make(AsnElt.CONTEXT,2, new AsnElt[]{ AsnElt.MakeInteger(Nonce) } ),\n                    AsnElt.Make(AsnElt.CONTEXT,3, new AsnElt[]{ AsnElt.MakeBlob(paChecksum) })\n                });        \n        }\n    }\n}\n'