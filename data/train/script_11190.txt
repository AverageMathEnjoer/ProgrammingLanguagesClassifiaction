b'# Fit dispersions for negative binomial GLM\n#\n# This function estimates the dispersion parameter (alpha) for negative binomial\n# generalized linear models. The fitting is performed on the log scale.\n#\n# ySEXP n by m matrix of counts\n# xSEXP m by k design matrix\n# mu_hatSEXP n by m matrix, the expected mean values, given beta-hat\n# log_alphaSEXP n length vector of initial guesses for log(alpha)\n# log_alpha_prior_meanSEXP n length vector of the fitted values for log(alpha)\n# log_alpha_prior_sigmasqSEXP a single numeric value for the variance of the prior\n# min_log_alphaSEXP the minimum value of log alpha\n# kappa_0SEXP a parameter used in calculting the initial proposal\n#   for the backtracking search\n#   initial proposal = log(alpha) + kappa_0 * deriv. of log lik. w.r.t. log(alpha)\n# tolSEXP tolerance for convergence in estimates\n# maxitSEXP maximum number of iterations\n# usePriorSEXP boolean variable, whether to use a prior or just calculate the MLE\n# weightsSEXP n by m matrix of weights\n# useWeightsSEXP whether to use weights\n# weightThresholdSEXP the threshold for subsetting the design matrix and GLM weights\n#   for calculating the Cox-Reid correction\n# useCRSEXP whether to use the Cox-Reid correction\n#\n# return a list with elements: log_alpha, iter, iter_accept, last_change, initial_lp, intial_dlp, last_lp, last_dlp, last_d2lp\nfitDispWrapper <- function (ySEXP, xSEXP, mu_hatSEXP, log_alphaSEXP, log_alpha_prior_meanSEXP,\n                            log_alpha_prior_sigmasqSEXP, min_log_alphaSEXP, kappa_0SEXP,\n                            tolSEXP, maxitSEXP, usePriorSEXP, weightsSEXP, useWeightsSEXP,\n                            weightThresholdSEXP, useCRSEXP) {\n  # test for any NAs in arguments\n  arg.names <- names(formals(fitDispWrapper))\n  na.test <- sapply(mget(arg.names), function(x) any(is.na(x)))\n  if (any(na.test)) stop(paste("in call to fitDisp, the following arguments contain NA:",\n                               paste(arg.names[na.test],collapse=", ")))\n  fitDisp(ySEXP=ySEXP, xSEXP=xSEXP, mu_hatSEXP=mu_hatSEXP,\n          log_alphaSEXP=log_alphaSEXP, log_alpha_prior_meanSEXP=log_alpha_prior_meanSEXP,\n          log_alpha_prior_sigmasqSEXP=log_alpha_prior_sigmasqSEXP,\n          min_log_alphaSEXP=min_log_alphaSEXP, kappa_0SEXP=kappa_0SEXP,\n          tolSEXP=tolSEXP, maxitSEXP=maxitSEXP, usePriorSEXP=usePriorSEXP,\n          weightsSEXP=weightsSEXP, useWeightsSEXP=useWeightsSEXP,\n          weightThresholdSEXP, useCRSEXP=useCRSEXP)\n}\n\n# Fit dispersions by evaluating over grid\n#\n# This function estimates the dispersion parameter (alpha) for negative binomial\n# generalized linear models. The fitting is performed on the log scale.\n#\n# ySEXP n by m matrix of counts\n# xSEXP m by k design matrix\n# mu_hatSEXP n by m matrix, the expected mean values, given beta-hat\n# disp_gridSEXP the grid over which to estimate\n# log_alpha_prior_meanSEXP n length vector of the fitted values for log(alpha)\n# log_alpha_prior_sigmasqSEXP a single numeric value for the variance of the prior\n# usePriorSEXP boolean variable, whether to use a prior or just calculate the MLE\n# weightsSEXP n by m matrix of weights\n# useWeightsSEXP whether to use weights\n# weightThresholdSEXP the threshold for subsetting the design matrix and GLM weights\n#   for calculating the Cox-Reid correction\n# useCRSEXP whether to use the Cox-Reid correction\n#\n# return the estimate of dispersion (not log scale)\nfitDispGridWrapper <- function(y, x, mu, logAlphaPriorMean, logAlphaPriorSigmaSq, usePrior,\n                               weightsSEXP, useWeightsSEXP, weightThresholdSEXP, useCRSEXP) {\n  # test for any NAs in arguments\n  arg.names <- names(formals(fitDispGridWrapper))\n  na.test <- sapply(mget(arg.names), function(x) any(is.na(x)))\n  if (any(na.test)) stop(paste("in call to fitDispGridWrapper, the following arguments contain NA:",\n                               paste(arg.names[na.test],collapse=", ")))\n  minLogAlpha <- log(1e-8)\n  maxLogAlpha <- log(max(10, ncol(y)))\n  dispGrid <- seq(from=minLogAlpha, to=maxLogAlpha, length=20)\n  logAlpha <- fitDispGrid(ySEXP=y, xSEXP=x, mu_hatSEXP=mu, disp_gridSEXP=dispGrid,\n                          log_alpha_prior_meanSEXP=logAlphaPriorMean,\n                          log_alpha_prior_sigmasqSEXP=logAlphaPriorSigmaSq,\n                          usePriorSEXP=usePrior,\n                          weightsSEXP=weightsSEXP,\n                          useWeightsSEXP=useWeightsSEXP,\n                          weightThresholdSEXP=weightThresholdSEXP,\n                          useCRSEXP=useCRSEXP)$log_alpha\n  exp(logAlpha)\n}\n\n# Fit beta coefficients for negative binomial GLM\n#\n# This function estimates the coefficients (betas) for negative binomial generalized linear models.\n#\n# ySEXP n by m matrix of counts\n# xSEXP m by k design matrix\n# nfSEXP n by m matrix of normalization factors\n# alpha_hatSEXP n length vector of the disperion estimates\n# contrastSEXP a k length vector for a possible contrast\n# beta_matSEXP n by k matrix of the initial estimates for the betas\n# lambdaSEXP k length vector of the ridge values\n# weightsSEXP n by m matrix of weights\n# useWeightsSEXP whether to use weights\n# tolSEXP tolerance for convergence in estimates\n# maxitSEXP maximum number of iterations\n# useQRSEXP whether to use QR decomposition\n#\n# Note: at this level the betas are on the natural log scale\nfitBetaWrapper <- function (ySEXP, xSEXP, nfSEXP, alpha_hatSEXP, contrastSEXP,\n                            beta_matSEXP, lambdaSEXP, weightsSEXP, useWeightsSEXP,\n                            tolSEXP, maxitSEXP, useQRSEXP, minmuSEXP) {\n  if ( missing(contrastSEXP) ) {\n    # contrast is not required, just give 1,0,0,...\n    contrastSEXP <- c(1,rep(0,ncol(xSEXP)-1))\n  }\n  # test for any NAs in arguments\n  arg.names <- names(formals(fitBetaWrapper))\n  na.test <- sapply(mget(arg.names), function(x) any(is.na(x)))\n  if (any(na.test)) stop(paste("in call to fitBeta, the following arguments contain NA:",\n                               paste(arg.names[na.test],collapse=", ")))\n  \n  fitBeta(ySEXP=ySEXP, xSEXP=xSEXP, nfSEXP=nfSEXP, alpha_hatSEXP=alpha_hatSEXP,\n          contrastSEXP=contrastSEXP, beta_matSEXP=beta_matSEXP,\n          lambdaSEXP=lambdaSEXP, weightsSEXP=weightsSEXP, useWeightsSEXP=useWeightsSEXP,\n          tolSEXP=tolSEXP, maxitSEXP=maxitSEXP, useQRSEXP=useQRSEXP, minmuSEXP=minmuSEXP)\n}\n'