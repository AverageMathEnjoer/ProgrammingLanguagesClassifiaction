b'/**\n * Copyright (C) 2020 Fernando Cejas Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.fernandocejas.sample.core.platform\n\nimport android.content.Context\nimport android.net.NetworkCapabilities\nimport android.os.Build\nimport com.fernandocejas.sample.core.extension.connectivityManager\nimport dagger.hilt.android.qualifiers.ApplicationContext\nimport javax.inject.Inject\nimport javax.inject.Singleton\n\n/**\n * Injectable class which returns information about the network connection state.\n */\n@Singleton\nclass NetworkHandler\n@Inject constructor(@ApplicationContext private val context: Context) {\n    fun isNetworkAvailable(): Boolean {\n        val connectivityManager = context.connectivityManager\n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n            val network = connectivityManager.activeNetwork ?: return false\n            val activeNetwork =\n                connectivityManager.getNetworkCapabilities(network) ?: return false\n\n            return when {\n                activeNetwork.hasTransport(NetworkCapabilities.TRANSPORT_WIFI) -> true\n                activeNetwork.hasTransport(NetworkCapabilities.TRANSPORT_CELLULAR) -> true\n                activeNetwork.hasTransport(NetworkCapabilities.TRANSPORT_ETHERNET) -> true\n                activeNetwork.hasTransport(NetworkCapabilities.TRANSPORT_BLUETOOTH) -> true\n                else -> false\n            }\n        } else {\n            @Suppress("DEPRECATION") val networkInfo =\n                connectivityManager.activeNetworkInfo ?: return false\n            @Suppress("DEPRECATION")\n            return networkInfo.isConnected\n        }\n    }\n}\n'