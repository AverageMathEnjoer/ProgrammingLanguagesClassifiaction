b'package icu.nullptr.twifucker.ui\n\nimport android.content.Context\nimport android.view.ViewGroup.LayoutParams.MATCH_PARENT\nimport android.view.ViewGroup.LayoutParams.WRAP_CONTENT\nimport android.widget.TextView\n\nclass FeatureSwitchItem(context: Context) : CustomLayout(context) {\n    val keyTextView = TextView(context).apply {\n        layoutParams = LayoutParams(MATCH_PARENT, WRAP_CONTENT)\n        setTextAppearance(android.R.style.TextAppearance_DeviceDefault_Medium)\n        addView(this)\n    }\n\n    val valueTextView = TextView(context).apply {\n        layoutParams = LayoutParams(MATCH_PARENT, WRAP_CONTENT)\n        setTextAppearance(android.R.style.TextAppearance_DeviceDefault_Small)\n        addView(this)\n    }\n\n    override fun onMeasure(widthMeasureSpec: Int, heightMeasureSpec: Int) {\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec)\n        keyTextView.autoMeasure()\n        valueTextView.autoMeasure()\n        setMeasuredDimension(\n            measuredWidth,\n            keyTextView.measuredHeightWithMargins + valueTextView.measuredHeightWithMargins\n        )\n    }\n\n    override fun onLayout(changed: Boolean, l: Int, t: Int, r: Int, b: Int) {\n        if (!isRTL) {\n            keyTextView.let { it.layout(x = 0, y = 0) }\n            valueTextView.let { it.layout(x = 0, y = keyTextView.bottom) }\n        } else {\n            keyTextView.let { it.layout(x = 0, y = 0, fromRight = true) }\n            valueTextView.let { it.layout(x = 0, y = keyTextView.bottom, fromRight = true) }\n        }\n    }\n}'