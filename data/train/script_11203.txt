b'/*\n * Copyright (C) 2015 Naman Dwivedi\n *\n * Licensed under the GNU General Public License v3\n *\n * This is free software: you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n */\n\npackage com.naman14.timber.utils;\n\nimport android.os.Build;\nimport androidx.core.view.ViewCompat;\nimport androidx.core.view.ViewPropertyAnimatorListener;\nimport androidx.interpolator.view.animation.FastOutSlowInInterpolator;\nimport android.view.View;\nimport android.view.animation.Animation;\nimport android.view.animation.AnimationUtils;\nimport android.view.animation.Interpolator;\n\nimport com.naman14.timber.R;\n\npublic class FabAnimationUtils {\n\n    private static final long DEFAULT_DURATION = 200L;\n    private static final Interpolator FAST_OUT_SLOW_IN_INTERPOLATOR = new FastOutSlowInInterpolator();\n\n    public static void scaleIn(final View fab) {\n        scaleIn(fab, DEFAULT_DURATION, null);\n    }\n\n    public static void scaleIn(final View fab, long duration, final ScaleCallback callback) {\n        fab.setVisibility(View.VISIBLE);\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {\n            ViewCompat.animate(fab)\n                    .scaleX(1.0F)\n                    .scaleY(1.0F)\n                    .alpha(1.0F)\n                    .setDuration(duration)\n                    .setInterpolator(FAST_OUT_SLOW_IN_INTERPOLATOR)\n                    .withLayer()\n                    .setListener(new ViewPropertyAnimatorListener() {\n                        public void onAnimationStart(View view) {\n                            if (callback != null) callback.onAnimationStart();\n                        }\n\n                        public void onAnimationCancel(View view) {\n                        }\n\n                        public void onAnimationEnd(View view) {\n                            view.setVisibility(View.VISIBLE);\n                            if (callback != null) callback.onAnimationEnd();\n                        }\n                    }).start();\n        } else {\n            Animation anim = AnimationUtils.loadAnimation(fab.getContext(), R.anim.design_fab_out);\n            anim.setDuration(duration);\n            anim.setInterpolator(FAST_OUT_SLOW_IN_INTERPOLATOR);\n            anim.setAnimationListener(new Animation.AnimationListener() {\n                public void onAnimationStart(Animation animation) {\n                    if (callback != null) callback.onAnimationStart();\n                }\n\n                public void onAnimationEnd(Animation animation) {\n                    fab.setVisibility(View.VISIBLE);\n                    if (callback != null) callback.onAnimationEnd();\n                }\n\n                @Override\n                public void onAnimationRepeat(Animation animation) {\n                    //\n                }\n            });\n            fab.startAnimation(anim);\n        }\n    }\n\n    public static void scaleOut(final View fab) {\n        scaleOut(fab, DEFAULT_DURATION, null);\n    }\n\n    public static void scaleOut(final View fab, final ScaleCallback callback) {\n        scaleOut(fab, DEFAULT_DURATION, callback);\n    }\n\n    public static void scaleOut(final View fab, long duration, final ScaleCallback callback) {\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {\n            ViewCompat.animate(fab)\n                    .scaleX(0.0F)\n                    .scaleY(0.0F).alpha(0.0F)\n                    .setInterpolator(FAST_OUT_SLOW_IN_INTERPOLATOR)\n                    .setDuration(duration)\n                    .withLayer()\n                    .setListener(new ViewPropertyAnimatorListener() {\n                        public void onAnimationStart(View view) {\n                            if (callback != null) callback.onAnimationStart();\n                        }\n\n                        public void onAnimationCancel(View view) {\n                        }\n\n                        public void onAnimationEnd(View view) {\n                            view.setVisibility(View.INVISIBLE);\n                            if (callback != null) callback.onAnimationEnd();\n                        }\n                    }).start();\n        } else {\n            Animation anim = AnimationUtils.loadAnimation(fab.getContext(), R.anim.design_fab_out);\n            anim.setInterpolator(FAST_OUT_SLOW_IN_INTERPOLATOR);\n            anim.setDuration(duration);\n            anim.setAnimationListener(new Animation.AnimationListener() {\n                public void onAnimationStart(Animation animation) {\n                    if (callback != null) callback.onAnimationStart();\n                }\n\n                public void onAnimationEnd(Animation animation) {\n                    fab.setVisibility(View.INVISIBLE);\n                    if (callback != null) callback.onAnimationEnd();\n                }\n\n                @Override\n                public void onAnimationRepeat(Animation animation) {\n                    //\n                }\n            });\n            fab.startAnimation(anim);\n        }\n    }\n\n    public interface ScaleCallback {\n        void onAnimationStart();\n\n        void onAnimationEnd();\n    }\n\n\n}\n'