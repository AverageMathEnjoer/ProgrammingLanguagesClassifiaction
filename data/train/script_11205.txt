b'\xef\xbb\xbf// ReSharper disable StringLiteralTypo\n\nnamespace RonSijm.UCIEngineInterop.Core;\n\npublic class UCIEngine : IUCIEngine\n{\n    private const int MaxTries = 200;\n\n    private int _skillLevel;\n\n    private UCIEngineProcess UCIEngineProcess { get; }\n\n    private Settings Settings { get; }\n\n    public int Depth { get; set; }\n\n    public int SkillLevel\n    {\n        get => _skillLevel;\n        set\n        {\n            _skillLevel = value;\n            SetOption("Skill level", SkillLevel.ToString());\n        }\n    }\n\n    public UCIEngine(string path, int depth = 2, Settings settings = null)\n    {\n        Depth = depth;\n        UCIEngineProcess = new UCIEngineProcess(path);\n        UCIEngineProcess.Start();\n\n        Settings = settings ?? new Settings();\n\n        SkillLevel = Settings.SkillLevel;\n        foreach (var property in Settings.GetPropertiesAsDictionary())\n        {\n            SetOption(property.Key, property.Value);\n        }\n\n        StartNewGame();\n    }\n\n    private void Send(string command, int estimatedTime = 100)\n    {\n        UCIEngineProcess.WriteLine(command);\n        UCIEngineProcess.Wait(estimatedTime);\n    }\n\n    private bool IsReady()\n    {\n        Send("isready");\n        var tries = 0;\n\n        while (tries < MaxTries)\n        {\n            ++tries;\n\n            var engineReadLine = UCIEngineProcess.ReadLine();\n            if (engineReadLine == "readyok")\n            {\n                return true;\n            }\n        }\n\n        throw new MaxTriesException();\n    }\n\n    private void SetOption(string name, string value)\n    {\n        Send($"setoption name {name} value {value}");\n\n        if (!IsReady())\n        {\n            throw new ApplicationException();\n        }\n    }\n\n    private string MovesToString(string[] moves)\n    {\n        return string.Join(" ", moves);\n    }\n\n\n    public void StartNewGame()\n    {\n        Send("ucinewgame");\n\n        if (!IsReady())\n        {\n            throw new ApplicationException();\n        }\n    }\n\n    private void Go()\n    {\n        Send($"go depth {Depth}");\n    }\n\n    private void GoTime(int time)\n    {\n        Send($"go movetime {time}", estimatedTime: time + 100);\n    }\n\n    private List<string> ReadLineAsList()\n    {\n        var data = UCIEngineProcess.ReadLine();\n\n        if (data == null)\n        {\n            return null;\n        }\n\n        return data.Split(\' \').ToList();\n    }\n\n    public void SetPosition(params string[] moves)\n    {\n        StartNewGame();\n        Send($"position startpos moves {MovesToString(moves)}");\n    }\n\n    public string GetFenPosition()\n    {\n        Send("d");\n        var tries = 0;\n        while (true)\n        {\n            if (tries > MaxTries)\n            {\n                throw new MaxTriesException();\n            }\n\n            var data = ReadLineAsList();\n\n            if (data == null)\n            {\n                return null;\n            }\n\n            if (data[0] == "Fen:")\n            {\n                return string.Join(" ", data.GetRange(1, data.Count - 1));\n            }\n\n            tries++;\n        }\n    }\n\n    public void SetFenPosition(string fenPosition)\n    {\n        StartNewGame();\n        Send($"position fen {fenPosition}");\n    }\n\n    public string GetBestMove()\n    {\n        Go();\n        var tries = 0;\n        while (true)\n        {\n            if (tries > MaxTries)\n            {\n                throw new MaxTriesException();\n            }\n\n            var data = ReadLineAsList();\n\n            if (data == null)\n            {\n                return null;\n            }\n\n            if (data[0] == "bestmove")\n            {\n                if (data[1] == "(none)")\n                {\n                    return null;\n                }\n\n                return data[1];\n            }\n\n            tries++;\n        }\n    }\n\n\n    public string GetBestMoveTime(int time = 1000)\n    {\n        GoTime(time);\n        while (true)\n        {\n            var data = ReadLineAsList();\n            if (data[0] == "bestmove")\n            {\n                if (data[1] == "(none)")\n                {\n                    return null;\n                }\n\n                return data[1];\n            }\n        }\n    }\n\n\n    public bool IsMoveCorrect(string moveValue)\n    {\n        Send($"go depth 1 searchmoves {moveValue}");\n        var tries = 0;\n        while (true)\n        {\n            if (tries > MaxTries)\n            {\n                throw new MaxTriesException();\n            }\n\n            var data = ReadLineAsList();\n            if (data[0] == "bestmove")\n            {\n                if (data[1] == "(none)")\n                {\n                    return false;\n                }\n\n                return true;\n            }\n\n            tries++;\n        }\n    }\n\n    public Evaluation GetEvaluation()\n    {\n        Evaluation evaluation = null;\n        var fen = GetFenPosition();\n\n        // fen sequence for white always contains w\n        var compare = fen.Contains("w") ? Color.White : Color.Black;\n\n        // I\'m not sure this is the good way to handle evaluation of position, but why not?\n        // Another way we need to somehow limit engine depth? \n        GoTime(10000);\n        var tries = 0;\n        while (true)\n        {\n            if (tries > MaxTries)\n            {\n                throw new MaxTriesException($"tries:{tries}>max-tries:{MaxTries}");\n            }\n\n            var data = ReadLineAsList();\n            if (data[0] == "info")\n            {\n                for (var i = 0; i < data.Count; i++)\n                {\n                    if (data[i] == "score")\n                    {\n                        //don\'t use ternary operator here for readability\n                        int k;\n                        if (compare == Color.White)\n                        {\n                            k = 1;\n                        }\n                        else\n                        {\n                            k = -1;\n                        }\n\n                        evaluation = new Evaluation(data[i + 1], Convert.ToInt32(data[i + 2]) * k);\n                    }\n                }\n            }\n\n            if (data[0] == "bestmove")\n            {\n                return evaluation;\n            }\n\n            tries++;\n        }\n    }\n\n    public void Dispose()\n    {\n        UCIEngineProcess?.Dispose();\n        GC.SuppressFinalize(this);\n    }\n}'