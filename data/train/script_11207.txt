b'package droidninja.filepicker.utils\n\nimport android.content.ContentValues\nimport android.content.Context\nimport android.content.Intent\nimport android.net.Uri\nimport android.os.Build\nimport android.os.Bundle\nimport android.os.Environment\nimport android.provider.MediaStore\nimport android.provider.Settings\nimport androidx.core.content.FileProvider\nimport android.text.TextUtils\nimport android.util.Log\nimport androidx.annotation.WorkerThread\n\nimport java.io.File\nimport java.io.FileNotFoundException\nimport java.io.IOException\nimport java.text.SimpleDateFormat\nimport java.util.Date\nimport java.util.Locale\n\nimport droidninja.filepicker.PickerManager\n\nclass ImageCaptureManager(private val mContext: Context) {\n\n    var currentPhotoPath: Uri? = null\n\n    @Throws(IOException::class)\n    private fun createImageFile(): Uri? {\n        val imageFileName = "JPEG_" + System.currentTimeMillis() + ".jpg"\n        val resolver = mContext.contentResolver\n        val contentValues = ContentValues().apply {\n            put(MediaStore.MediaColumns.DISPLAY_NAME, imageFileName)\n            put(MediaStore.MediaColumns.MIME_TYPE, "image/jpeg")\n        }\n\n        currentPhotoPath = resolver.insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, contentValues)\n\n        return currentPhotoPath\n    }\n\n\n    @WorkerThread\n    @Throws(IOException::class)\n    fun dispatchTakePictureIntent(): Intent? {\n        val takePictureIntent = Intent(MediaStore.ACTION_IMAGE_CAPTURE)\n        // Ensure that there\'s a camera activity to handle the intent\n        if (takePictureIntent.resolveActivity(mContext.packageManager) != null) {\n            // Create the File where the photo should go\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n                val photoURI = createImageFile()\n                takePictureIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)\n                takePictureIntent.addFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION)\n                takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, photoURI)\n            } else {\n                takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, createImageFile())\n            }\n            return takePictureIntent\n        }\n        return null\n    }\n\n\n    fun deleteContentUri(path: Uri?) {\n        if(path != null){\n            mContext.contentResolver.delete(path, null , null)\n        }\n    }\n\n    companion object {\n\n        private val CAPTURED_PHOTO_PATH_KEY = "mCurrentPhotoPath"\n        val REQUEST_TAKE_PHOTO = 0x101\n    }\n\n}\n'