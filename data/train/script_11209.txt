b'import assertk.assertThat\nimport assertk.assertions.isGreaterThan\nimport com.github.eprendre.tingshu.utils.Book\nimport com.github.eprendre.tingshu.utils.Episode\nimport org.jsoup.Jsoup\nimport org.junit.Test\nimport java.net.URLEncoder\n\nclass NiuNiuTest {\n    @Test\n    fun search() {\n        val keywords = "\xe4\xbf\xae\xe4\xbb\x99"\n        val encodedKeywords = URLEncoder.encode(keywords, "utf-8")\n        val page = 1\n        val url = "http://www.ziliao6.com/tv/?name=${encodedKeywords}"\n        val doc = Jsoup.connect(url).testConfig(false).get()\n\n        val list = ArrayList<Book>()\n\n        doc.selectFirst(".alert.alert-info").children()\n            .forEach { element ->\n                val coverUrl = ""\n                if (element.`is`("details")) {\n                    val title = element.selectFirst("summary").ownText()\n                    val bookUrl = element.select("ul > a").apply { removeFirst() }\n                        .joinToString(separator = ",") { a ->\n                            return@joinToString a.text() + "&&" + a.absUrl("href")\n                        }\n                    list.add(Book(coverUrl, bookUrl, title, "", "").apply {\n\n                    })\n                } else if(element.`is`("a")) {\n                    val title = element.text()\n                    val bookUrl = title + "&&" + element.absUrl("href")\n                    list.add(Book(coverUrl, bookUrl, title, "", "").apply {\n                    })\n                }\n            }\n        list.forEach { println(it) }\n        assertThat(list.size).isGreaterThan(0)\n    }\n\n    @Test\n    fun bookDetail() {\n        val episodes = ArrayList<Episode>()\n        val bookUrl = "01\xe9\x9b\x86&&https://vod6.wenshibaowenbei.com/20211114/frtPK312/index.m3u8,02\xe9\x9b\x86&&https://vod6.wenshibaowenbei.com/20211114/Ijpk6PKj/index.m3u8,03\xe9\x9b\x86&&https://vod6.wenshibaowenbei.com/20211114/ufXVqIjy/index.m3u8,04\xe9\x9b\x86&&https://vod6.wenshibaowenbei.com/20211121/BWJ74ex0/index.m3u8,05\xe9\x9b\x86&&https://vod11.bdzybf.com/20211128/KDOldL5K/index.m3u8,06\xe9\x9b\x86&&https://vod11.bdzybf.com/20211205/ATlaRkQz/index.m3u8,07\xe9\x9b\x86&&https://vod11.bdzybf.com/20211205/BlxG8krc/index.m3u8,08\xe9\x9b\x86&&https://vod8.wenshibaowenbei.com/20211212/6cELh9ju/index.m3u8,09\xe9\x9b\x86&&https://vod8.wenshibaowenbei.com/20211212/s2sQm62o/index.m3u8,10\xe9\x9b\x86&&https://vod8.wenshibaowenbei.com/20211212/vNP9XO8m/index.m3u8,11\xe9\x9b\x86&&https://vod8.wenshibaowenbei.com/20211212/tRFWdqmb/index.m3u8,12\xe9\x9b\x86&&https://vod8.wenshibaowenbei.com/20211219/QgmkOIK6/index.m3u8,13\xe9\x9b\x86&&https://vod8.wenshibaowenbei.com/20211225/FPzIEg0C/index.m3u8"\n//        val bookUrl = "\xe4\xbf\xae\xe4\xbb\x99\xe4\xbc\xa0\xe4\xb9\x8b\xe7\x82\xbc\xe5\x89\x91&&https://vod3.bdzybf3.com/20210227/FCt0usUs/index.m3u8"\n        bookUrl.split(",").forEach {\n            val params = it.split("&&")\n            val e = Episode(params[0], params[1])\n            episodes.add(e)\n        }\n        episodes.take(20).forEach { println(it) }\n        assertThat(episodes.size).isGreaterThan(0)\n    }\n}'