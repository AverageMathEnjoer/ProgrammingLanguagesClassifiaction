b'import System.Environment (getArgs)\n\nnotElem\' :: Eq a => [a] -> a -> Bool\nnotElem\' a n = notElem n a\n\n(\\\\) :: Eq a => [a] -> [a] -> [a]\nus \\\\ vs = filter (notElem\' vs) us\n\nnub\' :: Ord a => [a] -> [a]\nnub\' [] = []\nnub\' (x:xs) = if notElem x xs then x : nub\' xs \n              else (x : nub\' (xs \\\\ [x])) `min` (nub\' xs)\n\nmain = do\n    args <- getArgs\n    let word = case args of\n                    [] -> "calculus"\n                    (x:_) -> x\n    putStrLn $ show $ nub\' word\n'