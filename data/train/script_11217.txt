b'\xef\xbb\xbfusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Management;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.ServiceProcess;\n\nnamespace YourAV\n{\n    internal static class ManagementHelper\n    {\n        private static readonly string wmipathstr = @"\\\\" + Environment.MachineName + @"\\root\\SecurityCenter:AntiVirusProduct";\n        //private static readonly string wmipathstr2 = @"\\\\" + Environment.MachineName + @"\\root\\SecurityCenter2:AntiVirusProduct";\n        public static bool RemoveAllAntivirus()\n        {\n            try\n            {\n                ManagementObjectSearcher searcher = new ManagementObjectSearcher(wmipathstr, "SELECT * FROM AntivirusProduct");\n                ManagementObjectCollection instances = searcher.Get();\n                foreach (ManagementObject obj in instances)\n                    if (obj.GetPropertyValue("displayName").ToString() != "Windows Defender")\n                        obj.Delete();\n                return true;\n            }\n            catch\n            {\n                return false;\n            }\n        }\n        //public static bool RemoveAllAntivirus2()\n        //{\n        //    try\n        //    {\n        //        ManagementObjectSearcher searcher = new ManagementObjectSearcher(wmipathstr2, "SELECT * FROM AntivirusProduct");\n        //        ManagementObjectCollection instances = searcher.Get();\n        //        foreach (ManagementObject obj in instances)\n        //            if (obj.GetPropertyValue("displayName").ToString() != "Windows Defender")\n        //                obj.Delete();\n        //        return true;\n        //    }\n        //    catch\n        //    {\n        //        return false;\n        //    }\n        //}\n        public static bool AddAntivirus(string displayName, string instanceGuid)\n        {\n            try\n            {\n\n                ManagementClass avp = new ManagementClass(wmipathstr);\n                ManagementObject status = avp.CreateInstance();\n                status.SetPropertyValue("displayName", displayName);\n                status.SetPropertyValue("instanceGuid", $"{{{instanceGuid}}}");\n                status.SetPropertyValue("productUptoDate", true);\n                status.SetPropertyValue("onAccessScanningEnabled", true);\n\n                status.Put();\n                return true;\n            }\n            catch\n            {\n                return false;\n            }\n        }\n        //public static bool AddAntivirus2(string displayName, string instanceGuid)\n        //{\n        //    try\n        //    {\n\n        //        ManagementClass avp = new ManagementClass(wmipathstr2);\n        //        ManagementObject status = avp.CreateInstance();\n        //        status.SetPropertyValue("displayName", displayName);\n        //        status.SetPropertyValue("instanceGuid", $"{{{instanceGuid}}}");\n        //        status.SetPropertyValue("productState", new Random().Next());\n        //        status.SetPropertyValue("timestamp", DateTime.UtcNow.ToString());\n        //        status.SetPropertyValue("pathToSignedProductExe", $"{AppDomain.CurrentDomain.BaseDirectory}YourAV.exe");\n        //        status.SetPropertyValue("pathToSignedReportingExe", $"{AppDomain.CurrentDomain.BaseDirectory}YourAV.exe");\n\n        //        status.Put();\n        //        return true;\n        //    }\n        //    catch\n        //    {\n        //        return false;\n        //    }\n        //}\n        public static bool IsAntivirusInstalled()\n        {\n            try\n            {\n                ManagementObjectSearcher searcher = new ManagementObjectSearcher(wmipathstr, "SELECT * FROM AntivirusProduct");\n                ManagementObjectCollection instances = searcher.Get();\n                return instances.Count > 0 && instances.Cast<ManagementObject>().Any(item => item.GetPropertyValue("displayName").ToString() != "Windows Defender");\n            }\n            catch\n            {\n                return false;\n            }\n        }\n        public static bool RestartService(string serviceName)\n        {\n            ServiceController service = new ServiceController(serviceName);\n            try\n            {\n                List<ServiceController> dependencies = new List<ServiceController>();\n                if ((service.Status.Equals(ServiceControllerStatus.Running)) || (service.Status.Equals(ServiceControllerStatus.StartPending)))\n                {\n                    FillDependencyTreeLeaves(service, dependencies);\n                    service.Stop();\n                }\n                service.WaitForStatus(ServiceControllerStatus.Stopped);\n\n                foreach (ServiceController dependency in dependencies)\n                {\n                    dependency.Start();\n                    dependency.WaitForStatus(ServiceControllerStatus.Running);\n                }\n\n\n                return true;\n            }\n            catch\n            {\n                return false;\n            }\n        }\n\n        //public static bool RestartService(string serviceName, int timeoutMilliseconds)\n        //{\n        //    ServiceController service = new ServiceController(serviceName);\n        //    try\n        //    {\n        //        int millisec1 = Environment.TickCount;\n        //        TimeSpan timeout = TimeSpan.FromMilliseconds(timeoutMilliseconds);\n        //        List<ServiceController> dependencies = new List<ServiceController>();\n        //        if ((service.Status.Equals(ServiceControllerStatus.Running)) || (service.Status.Equals(ServiceControllerStatus.StartPending)))\n        //        {\n        //            FillDependencyTreeLeaves(service, dependencies);\n        //            service.Stop();\n        //        }\n        //        service.WaitForStatus(ServiceControllerStatus.Stopped);\n        //        service.WaitForStatus(ServiceControllerStatus.Stopped, timeout);\n\n        //        foreach (ServiceController dependency in dependencies)\n        //        {\n        //            int millisec2 = Environment.TickCount; dependency.Start();\n        //            timeout = TimeSpan.FromMilliseconds(timeoutMilliseconds - (millisec2 - millisec1));\n        //            dependency.Start();\n        //            service.WaitForStatus(ServiceControllerStatus.Running, timeout);\n        //        }\n\n        //        return true;\n        //    }\n        //    catch\n        //    {\n        //        return false;\n        //    }\n        //}\n        private static void FillDependencyTreeLeaves(ServiceController controller, List<ServiceController> controllers)\n        {\n            bool dependencyAdded = false;\n            foreach (ServiceController dependency in controller.DependentServices)\n            {\n                ServiceControllerStatus status = dependency.Status;\n                // add only those that are actually running\n                if (status != ServiceControllerStatus.Stopped && status != ServiceControllerStatus.StopPending)\n                {\n                    dependencyAdded = true;\n                    FillDependencyTreeLeaves(dependency, controllers);\n                }\n            }\n            // if no dependency has been added, the service is dependency tree\'s leaf\n            if (!dependencyAdded && !controllers.Contains(controller))\n            {\n                controllers.Add(controller);\n            }\n        }\n    }\n}\n'