b'package effectivejava.chapter3.item14;\n\nimport java.util.*;\n\n// Single-field Comparable with object reference field  (Page 69)\npublic final class CaseInsensitiveString\n        implements Comparable<CaseInsensitiveString> {\n    private final String s;\n\n    public CaseInsensitiveString(String s) {\n        this.s = Objects.requireNonNull(s);\n    }\n\n    // Fixed equals method (Page 40)\n    @Override public boolean equals(Object o) {\n        return o instanceof CaseInsensitiveString &&\n                ((CaseInsensitiveString) o).s.equalsIgnoreCase(s);\n    }\n\n    @Override public int hashCode() {\n        return s.hashCode();\n    }\n\n    @Override public String toString() {\n        return s;\n    }\n\n    // Using an existing comparator to make a class comparable\n    public int compareTo(CaseInsensitiveString cis) {\n        return String.CASE_INSENSITIVE_ORDER.compare(s, cis.s);\n    }\n\n    public static void main(String[] args) {\n        Set<CaseInsensitiveString> s = new TreeSet<>();\n        for (String arg : args)\n            s.add(new CaseInsensitiveString(arg));\n        System.out.println(s);\n    }\n}'