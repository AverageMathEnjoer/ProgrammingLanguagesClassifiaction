b"module Database.Beam.Query.Extensions\n  ( -- * Various combinators corresponding to SQL extensions\n\n    -- ** T614 NTILE function\n    ntile_\n\n    -- ** T615 LEAD and LAG function\n  , lead1_, lag1_, lead_, lag_\n  , leadWithDefault_, lagWithDefault_\n\n    -- ** T616 FIRST_VALUE and LAST_VALUE functions\n  ,  firstValue_, lastValue_\n\n    -- ** T618 NTH_VALUE function\n  , nthValue_\n\n    -- ** T621 Enhanced numeric functions\n  , (**.), ln_, exp_, sqrt_\n  , ceiling_, floor_\n\n  , stddevPopOver_, stddevSampOver_\n  , varPopOver_, varSampOver_\n\n  , stddevPop_, stddevSamp_\n  , varPop_, varSamp_\n\n  , covarPopOver_, covarSampOver_, corrOver_\n  , regrSlopeOver_, regrInterceptOver_\n  , regrCountOver_, regrRSquaredOver_\n  , regrAvgXOver_, regrAvgYOver_\n  , regrSXXOver_, regrSYYOver_, regrSXYOver_\n\n  , covarPop_, covarSamp_, corr_, regrSlope_\n  , regrIntercept_, regrCount_, regrRSquared_\n  , regrAvgX_, regrAvgY_, regrSXX_\n  , regrSYY_, regrSXY_\n  ) where\n\nimport Database.Beam.Query.Internal\nimport Database.Beam.Query.Aggregate\n\nimport Database.Beam.Backend.SQL\n\nntile_ :: (BeamSqlBackend be, BeamSqlT614Backend be, Integral n)\n       => QExpr be s n -> QAgg be s a\nntile_ (QExpr a) = QExpr (ntileE <$> a)\n\nlead1_, lag1_\n  :: (BeamSqlBackend be, BeamSqlT615Backend be)\n  => QExpr be s a -> QAgg be s a\nlead1_ (QExpr a) = QExpr (leadE <$> a <*> pure Nothing <*> pure Nothing)\nlag1_ (QExpr a) = QExpr (lagE <$> a <*> pure Nothing <*> pure Nothing)\n\nlead_, lag_\n  :: (BeamSqlBackend be, BeamSqlT615Backend be, Integral n)\n  => QExpr be s a -> QExpr be s n -> QAgg be s a\nlead_ (QExpr a) (QExpr n) = QExpr (leadE <$> a <*> (Just <$> n) <*> pure Nothing)\nlag_ (QExpr a) (QExpr n) = QExpr (lagE <$> a <*> (Just <$> n) <*> pure Nothing)\n\nleadWithDefault_, lagWithDefault_\n  :: (BeamSqlBackend be, BeamSqlT615Backend be, Integral n)\n  => QExpr be s a -> QExpr be s n -> QExpr be s a\n  -> QAgg be s a\nleadWithDefault_ (QExpr a) (QExpr n) (QExpr def) =\n  QExpr (leadE <$> a <*> fmap Just n <*> fmap Just def)\nlagWithDefault_ (QExpr a) (QExpr n) (QExpr def) =\n  QExpr (lagE <$> a <*> fmap Just n <*> fmap Just def)\n\n-- TODO the first 'a' should be nullable, and the second one not\nfirstValue_, lastValue_\n  :: (BeamSqlBackend be, BeamSqlT616Backend be)\n  => QExpr be s a -> QAgg be s a\nfirstValue_ (QExpr a) = QExpr (firstValueE <$> a)\nlastValue_ (QExpr a) = QExpr (lastValueE <$> a)\n\n-- TODO see comment for 'firstValue_' and 'lastValue_'\nnthValue_\n  :: (BeamSqlBackend be, BeamSqlT618Backend be, Integral n)\n  => QExpr be s a -> QExpr be s n -> QAgg be s a\nnthValue_ (QExpr a) (QExpr n) = QExpr (nthValueE <$> a <*> n)\n\nln_, exp_, sqrt_\n  :: (Floating a, BeamSqlBackend be, BeamSqlT621Backend be)\n  => QGenExpr ctxt be s a -> QGenExpr ctxt be s a\nln_ (QExpr a) = QExpr (lnE <$> a)\nexp_ (QExpr a) = QExpr (expE <$> a)\nsqrt_ (QExpr a) = QExpr (sqrtE <$> a)\n\nceiling_, floor_\n  :: (RealFrac a, Integral b, BeamSqlBackend be, BeamSqlT621Backend be)\n  => QGenExpr ctxt be s a -> QGenExpr ctxt be s b\nceiling_ (QExpr a) = QExpr (ceilE <$> a)\nfloor_ (QExpr a) = QExpr (floorE <$> a)\n\ninfixr 8 **.\n(**.) :: (Floating a, BeamSqlBackend be, BeamSqlT621Backend be)\n      => QGenExpr ctxt be s a -> QGenExpr ctxt be s a -> QGenExpr ctxt be s a\nQExpr a **. QExpr b = QExpr (powerE <$> a <*> b)\n\nstddevPopOver_, stddevSampOver_, varPopOver_, varSampOver_\n  :: (Num a, Floating b, BeamSqlBackend be, BeamSqlT621Backend be)\n  => Maybe (BeamSqlBackendAggregationQuantifierSyntax be) -> QExpr be s a\n  -> QAgg be s b\nstddevPopOver_ q (QExpr x) = QExpr (stddevPopE q <$> x)\nstddevSampOver_ q (QExpr x) = QExpr (stddevSampE q <$> x)\nvarPopOver_ q (QExpr x) = QExpr (varPopE q <$> x)\nvarSampOver_ q (QExpr x) = QExpr (varSampE q <$> x)\n\nstddevPop_, stddevSamp_, varPop_, varSamp_\n  :: (Num a, Floating b, BeamSqlBackend be, BeamSqlT621Backend be)\n  => QExpr be s a -> QAgg be s b\nstddevPop_ = stddevPopOver_ allInGroup_\nstddevSamp_ = stddevSampOver_ allInGroup_\nvarPop_ = varPopOver_ allInGroup_\nvarSamp_ = varSampOver_ allInGroup_\n\ncovarPopOver_, covarSampOver_, corrOver_, regrSlopeOver_, regrInterceptOver_,\n  regrCountOver_, regrRSquaredOver_, regrAvgYOver_, regrAvgXOver_,\n  regrSXXOver_, regrSXYOver_, regrSYYOver_\n  :: (Num a, Floating b, BeamSqlBackend be, BeamSqlT621Backend be)\n  => Maybe (BeamSqlBackendAggregationQuantifierSyntax be) -> QExpr be s a -> QExpr be s a\n  -> QExpr be s b\ncovarPopOver_ q (QExpr x) (QExpr y) = QExpr (covarPopE q <$> x <*> y)\ncovarSampOver_ q (QExpr x) (QExpr y) = QExpr (covarSampE q <$> x <*> y)\ncorrOver_ q (QExpr x) (QExpr y) = QExpr (corrE q <$> x <*> y)\nregrSlopeOver_ q (QExpr x) (QExpr y) = QExpr (regrSlopeE q <$> x <*> y)\nregrInterceptOver_ q (QExpr x) (QExpr y) = QExpr (regrInterceptE q <$> x <*> y)\nregrCountOver_ q (QExpr x) (QExpr y) = QExpr (regrCountE q <$> x <*> y)\nregrRSquaredOver_ q (QExpr x) (QExpr y) = QExpr (regrRSquaredE q <$> x <*> y)\nregrAvgYOver_ q (QExpr x) (QExpr y) = QExpr (regrAvgYE q <$> x <*> y)\nregrAvgXOver_ q (QExpr x) (QExpr y) = QExpr (regrAvgXE q <$> x <*> y)\nregrSXXOver_ q (QExpr x) (QExpr y) = QExpr (regrSXXE q <$> x <*> y)\nregrSYYOver_ q (QExpr x) (QExpr y) = QExpr (regrSYYE q <$> x <*> y)\nregrSXYOver_ q (QExpr x) (QExpr y) = QExpr (regrSXYE q <$> x <*> y)\n\ncovarPop_, covarSamp_, corr_, regrSlope_, regrIntercept_, regrCount_,\n  regrRSquared_, regrAvgY_, regrAvgX_, regrSXX_, regrSXY_, regrSYY_\n  :: (Num a, Floating b, BeamSqlBackend be, BeamSqlT621Backend be)\n  => QExpr be s a -> QExpr be s a -> QExpr be s b\ncovarPop_ = covarPopOver_ allInGroup_\ncovarSamp_ = covarSampOver_ allInGroup_\ncorr_ = corrOver_ allInGroup_\nregrSlope_ = regrSlopeOver_ allInGroup_\nregrIntercept_ = regrInterceptOver_ allInGroup_\nregrCount_ = regrCountOver_ allInGroup_\nregrRSquared_ = regrRSquaredOver_ allInGroup_\nregrAvgY_ = regrAvgYOver_ allInGroup_\nregrAvgX_ = regrAvgXOver_ allInGroup_\nregrSXX_ = regrSXXOver_ allInGroup_\nregrSYY_ = regrSYYOver_ allInGroup_\nregrSXY_ = regrSXYOver_ allInGroup_\n"