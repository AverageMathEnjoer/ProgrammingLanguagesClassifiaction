b'/**\n * Copyright (C) 2020 Fernando Cejas Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.fernandocejas.sample.core.platform\n\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.annotation.StringRes\nimport androidx.core.content.ContextCompat\nimport androidx.fragment.app.Fragment\nimport com.fernandocejas.sample.R.color\nimport com.fernandocejas.sample.core.extension.appContext\nimport com.fernandocejas.sample.core.extension.viewContainer\nimport com.google.android.material.snackbar.Snackbar\nimport dagger.hilt.android.AndroidEntryPoint\nimport kotlinx.android.synthetic.main.toolbar.*\n\n/**\n * Base Fragment class with helper methods for handling views and back button events.\n *\n * @see Fragment\n */\n@AndroidEntryPoint\nabstract class BaseFragment : Fragment() {\n\n    abstract fun layoutId(): Int\n\n    override fun onCreateView(\n        inflater: LayoutInflater,\n        container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View =\n        inflater.inflate(layoutId(), container, false)\n\n    open fun onBackPressed() {}\n\n    internal fun firstTimeCreated(savedInstanceState: Bundle?) = savedInstanceState == null\n\n    internal fun showProgress() = progressStatus(View.VISIBLE)\n\n    internal fun hideProgress() = progressStatus(View.GONE)\n\n    private fun progressStatus(viewStatus: Int) =\n        with(activity) { if (this is BaseActivity) this.progress.visibility = viewStatus }\n\n    internal fun notify(@StringRes message: Int) =\n        Snackbar.make(viewContainer, message, Snackbar.LENGTH_SHORT).show()\n\n    internal fun notifyWithAction(\n        @StringRes message: Int,\n        @StringRes actionText: Int,\n        action: () -> Any\n    ) {\n        val snackBar = Snackbar.make(viewContainer, message, Snackbar.LENGTH_INDEFINITE)\n        snackBar.setAction(actionText) { _ -> action.invoke() }\n        snackBar.setActionTextColor(ContextCompat.getColor(appContext, color.colorTextPrimary))\n        snackBar.show()\n    }\n}\n'