b'module Nat (\n    Nat\n  , my_zero_n\n  , my_isZero_n\n  , my_plus1_n\n  , my_minus1_n\n  , my_from_n\n  , my_to_n\n  ) where\n\ndata Nat = Z | S Nat\n\nmy_zero_n :: Nat\nmy_zero_n = Z\n\nmy_isZero_n :: Nat -> Bool\nmy_isZero_n Z = True\nmy_isZero_n _ = False\n\nmy_plus1_n :: Nat -> Nat\nmy_plus1_n = S\n\nmy_minus1_n :: Nat -> Nat\nmy_minus1_n (S n) = n\nmy_minus1_n _     = error "my_minus1_n"\n\nmy_from_n :: Nat -> Integer\nmy_from_n n = iter n 0\n  where\n    iter m acc\n      | my_isZero_n m = acc\n      | otherwise     = iter (my_minus1_n m) (acc + 1)\n\nmy_to_n :: Integer -> Nat\nmy_to_n 0 = Z\nmy_to_n n = S (my_to_n (n - 1))\n\n'