b'/**\n * Copyright (C) 2020 Fernando Cejas Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.fernandocejas.sample.features.movies\n\nimport android.transition.Fade\nimport android.transition.TransitionManager\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.fragment.app.FragmentActivity\nimport androidx.interpolator.view.animation.FastOutSlowInInterpolator\nimport com.fernandocejas.sample.core.extension.cancelTransition\nimport javax.inject.Inject\n\n\nclass MovieDetailsAnimator\n@Inject constructor() {\n\n    private val TRANSITION_DELAY = 200L\n    private val TRANSITION_DURATION = 400L\n\n    private val SCALE_UP_VALUE = 1.0F\n    private val SCALE_UP_DURATION = 400L\n\n    private val SCALE_DOWN_VALUE = 0.0F\n    private val SCALE_DOWN_DURATION = 200L\n\n    internal fun postponeEnterTransition(activity: FragmentActivity) =\n        activity.postponeEnterTransition()\n\n    internal fun cancelTransition(view: View) = view.cancelTransition()\n\n    internal fun scaleUpView(view: View) =\n        scaleView(view, SCALE_UP_VALUE, SCALE_UP_VALUE, SCALE_UP_DURATION)\n\n    internal fun scaleDownView(view: View) =\n        scaleView(view, SCALE_DOWN_VALUE, SCALE_DOWN_VALUE, SCALE_DOWN_DURATION)\n\n    internal fun fadeVisible(viewContainer: ViewGroup, view: View) =\n        beginTransitionFor(viewContainer, view, View.VISIBLE)\n\n    internal fun fadeInvisible(viewContainer: ViewGroup, view: View) =\n        beginTransitionFor(viewContainer, view, View.INVISIBLE)\n\n    private fun scaleView(view: View, x: Float, y: Float, duration: Long) =\n        view.animate()\n            .scaleX(x)\n            .scaleY(y)\n            .setDuration(duration)\n            .setInterpolator(FastOutSlowInInterpolator())\n            .withLayer()\n            .setListener(null)\n            .start()\n\n    private fun beginTransitionFor(viewContainer: ViewGroup, view: View, visibility: Int) {\n        val transition = Fade()\n        transition.startDelay = TRANSITION_DELAY\n        transition.duration = TRANSITION_DURATION\n        TransitionManager.beginDelayedTransition(viewContainer, transition)\n        view.visibility = visibility\n    }\n}\n\n\n'