b'import com.github.eprendre.tingshu.utils.Book\nimport com.github.eprendre.tingshu.utils.Episode\nimport org.jsoup.Jsoup\nimport org.junit.Test\n\nclass NanGuaTest {\n\n    @Test\n    fun search() {\n        val keywords = "\xe4\xbb\x99"\n        val url = "http://www.nangua55.com/search/"\n\n        val doc = Jsoup.connect(url).testConfig(true)\n            .headers(mapOf("Referer" to "http://www.nangua55.com/search/"))\n            .data("wd", keywords)\n            .post()\n//        val pages = doc.selectFirst("#long-page > ul > .visible-xs").text().split("/")\n//        val currentPage = pages[0].toInt()\n//        val totalPage = pages[1].toInt()\n//        val nextUrl = doc.select("#long-page > ul > li").first { it.text() == "\xe4\xb8\x8b\xe4\xb8\x80\xe9\xa1\xb5" }\n//            .selectFirst("a").absUrl("href")\n        val currentPage = 1\n        val totalPage = 1\n\n        val list = ArrayList<Book>()\n        val elementList = doc.select("#content > div")\n        elementList.forEach { item ->\n            val a = item.selectFirst(".video-pic")\n            val coverUrl = a.attr("data-original")\n            val bookUrl = a.absUrl("href")\n            val title = a.attr("title")\n            val author = ""\n            val artist = ""\n            val status = item.select(".info > li")[2].ownText()\n            list.add(Book(coverUrl, bookUrl, title, author, artist))\n        }\n        println(list)\n    }\n\n    @Test\n    fun bookDetail() {\n        val bookUrl = "http://www.nangua55.com/video/36533.html"\n        val doc = Jsoup.connect(bookUrl).testConfig(true).get()\n        val tabs = doc.select("#playTab > li")\n        val playlists = doc.select(".playlist > ul")\n\n        val episodes = ArrayList<Episode>()\n        tabs.forEachIndexed { index, tab ->\n            val tabTitle = tab.text()\n            val list = playlists[index].select("li > a").map { element ->\n                val title = "$tabTitle - ${element.text()}"\n                val url = element.absUrl("href")\n                Episode(title, url)\n            }.asReversed()\n            episodes.addAll(list)\n        }\n\n        println(episodes)\n    }\n\n\n    @Test\n    fun categoryList() {\n        val url = "http://www.nangua55.com/index.php?s=home-vod-type-id-2-picm-1-p-1"\n        val list = ArrayList<Book>()\n        val doc = Jsoup.connect(url).testConfig(true)\n            .headers(mapOf("Referer" to "http://www.nangua55.com/")).get()\n        val pages = doc.selectFirst("#long-page > ul > .visible-xs").text().split("/")\n        val currentPage = pages[0].toInt()\n        val totalPage = pages[1].toInt()\n        val nextUrl = doc.select("#long-page > ul > li").first { it.text() == "\xe4\xb8\x8b\xe4\xb8\x80\xe9\xa1\xb5" }\n            .selectFirst("a").absUrl("href")\n\n        println(currentPage)\n        println(totalPage)\n        println(nextUrl)\n\n        val elementList = doc.select("#content > li")\n        elementList.forEach { item ->\n            val a = item.selectFirst(".video-pic")\n            val coverUrl = a.attr("data-original")\n            val bookUrl = a.absUrl("href")\n            val title = item.selectFirst(".title").text()\n            val author = item.selectFirst(".subtitle").text()\n            val artist = a.selectFirst(".score").text()\n            val status = a.selectFirst(".note").text()\n            list.add(Book(coverUrl, bookUrl, title, author, artist))\n        }\n        println(list)\n    }\n}'