b'{-# LANGUAGE DeriveGeneric #-}\n{-# LANGUAGE OverloadedStrings #-}\n{-# LANGUAGE QuasiQuotes #-}\n{-# LANGUAGE RecordWildCards #-}\n{-# LANGUAGE TypeFamilies #-}\n\n-- | [Sign in with Slack](https://api.slack.com/authentication/sign-in-with-slack)\n--\n--   * [Using OAuth 2.0](https://api.slack.com/legacy/oauth)\nmodule Network.OAuth2.Provider.Slack where\n\nimport Data.Aeson\nimport Data.Map.Strict qualified as Map\nimport Data.Set qualified as Set\nimport Data.Text.Lazy (Text)\nimport GHC.Generics\nimport Network.OAuth.OAuth2\nimport Network.OAuth2.Experiment\nimport URI.ByteString.QQ\n\ndata Slack = Slack deriving (Show, Eq)\n\ntype instance IdpUserInfo Slack = SlackUser\n\ndefaultSlackApp :: IdpApplication \'AuthorizationCode Slack\ndefaultSlackApp =\n  AuthorizationCodeIdpApplication\n    { idpAppClientId = ""\n    , idpAppClientSecret = ""\n    , idpAppScope = Set.fromList ["openid", "profile"]\n    , idpAppAuthorizeState = "CHANGE_ME"\n    , idpAppAuthorizeExtraParams = Map.empty\n    , idpAppRedirectUri = [uri|http://localhost|]\n    , idpAppTokenRequestAuthenticationMethod = ClientSecretBasic\n    , idpAppName = "default-slack-App"\n    , idp = defaultSlackIdp\n    }\n\n-- https://slack.com/.well-known/openid-configuration\ndefaultSlackIdp :: Idp Slack\ndefaultSlackIdp =\n  Idp\n    { idpFetchUserInfo = authGetJSON @(IdpUserInfo Slack)\n    , idpUserInfoEndpoint = [uri|https://slack.com/api/openid.connect.userInfo|]\n    , idpAuthorizeEndpoint = [uri|https://slack.com/openid/connect/authorize|]\n    , idpTokenEndpoint = [uri|https://slack.com/api/openid.connect.token|]\n    }\n\ndata SlackUser = SlackUser\n  { name :: Text\n  , email :: Text\n  }\n  deriving (Show, Generic)\n\ninstance FromJSON SlackUser\n'