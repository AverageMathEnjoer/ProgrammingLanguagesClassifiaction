b"#include<bits/stdc++.h>\nusing namespace std;\n\n\ntypedef long long HashInt;\nstatic const HashInt HASH_MOD = 2'000'000'033;\nstruct ModBasedHashInt {\n\tHashInt x; ModBasedHashInt(HashInt x=0) : x(x) {}\n\tModBasedHashInt operator+(ModBasedHashInt o) { \n        HashInt y = x + o.x; \n        return y - (y >= HASH_MOD) * HASH_MOD; \n    }\n\tModBasedHashInt operator*(ModBasedHashInt o) { return x*o.x % HASH_MOD; }\n\tHashInt operator-(ModBasedHashInt o) { \n        HashInt y = x - o.x; \n        return y + (y < 0) * HASH_MOD; \n    }\n};\nstruct RollingHash {\n    #define sz(x) ((int)x.size())\n\tvector<ModBasedHashInt> hash, power;\n\tHashInt C;\n\tRollingHash(string& str, HashInt Co) : hash(sz(str)+1, 0), power(hash) {\n\t\tC = Co;\n\t\tpower[0] = 1;\n\t\tfor(int i=0; i<sz(str); i++) {\n\t\t\thash[i+1] = hash[i] * C + str[i];\n\t\t\tpower[i+1] = power[i] * C;\n        }\n\t}\n\n\tHashInt get(int l, int r) { // hash [l, r)\n\t\treturn hash[r] - hash[l] * power[r - l];\n\t}\n};"