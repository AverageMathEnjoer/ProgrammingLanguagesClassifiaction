b'package com.droidcba.kedditbysteps.features.news\n\nimport android.arch.lifecycle.Observer\nimport android.content.Intent\nimport android.net.Uri\nimport android.os.Bundle\nimport android.support.design.widget.Snackbar\nimport android.support.v4.app.Fragment\nimport android.support.v7.widget.LinearLayoutManager\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport com.droidcba.kedditbysteps.KedditApp\nimport com.droidcba.kedditbysteps.R\nimport com.droidcba.kedditbysteps.commons.InfiniteScrollListener\nimport com.droidcba.kedditbysteps.commons.RedditNews\nimport com.droidcba.kedditbysteps.commons.ViewModelFactory\nimport com.droidcba.kedditbysteps.commons.extensions.androidLazy\nimport com.droidcba.kedditbysteps.commons.extensions.getViewModel\nimport com.droidcba.kedditbysteps.commons.extensions.inflate\nimport com.droidcba.kedditbysteps.features.news.adapter.NewsAdapter\nimport com.droidcba.kedditbysteps.features.news.adapter.NewsDelegateAdapter\nimport kotlinx.android.synthetic.main.news_fragment.*\nimport javax.inject.Inject\n\nclass NewsFragment : Fragment(), NewsDelegateAdapter.onViewSelectedListener {\n\n    override fun onItemSelected(url: String?) {\n        if (url.isNullOrEmpty()) {\n            Snackbar.make(news_list, "No URL assigned to this news", Snackbar.LENGTH_LONG).show()\n        } else {\n            val intent = Intent(Intent.ACTION_VIEW)\n            intent.data = Uri.parse(url)\n            startActivity(intent)\n        }\n    }\n\n    companion object {\n        private const val KEY_REDDIT_NEWS = "redditNews"\n    }\n\n    private var redditNews: RedditNews? = null\n    private val newsAdapter by androidLazy { NewsAdapter(this) }\n\n    @Inject\n    lateinit var viewModelFactory: ViewModelFactory<NewsViewModel>\n    private val newsViewModel by androidLazy {\n        getViewModel<NewsViewModel>(viewModelFactory)\n    }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        KedditApp.newsComponent.inject(this)\n\n        newsViewModel.newsState.observe(this, Observer<NewsState> {\n            manageState(it)\n        })\n    }\n\n    private fun manageState(kedditState: NewsState?) {\n        val state = kedditState ?: return\n        when (state) {\n            is NewsState.Success -> {\n                redditNews = state.redditNews\n                newsAdapter.addNews(state.redditNews.news)\n            }\n            is NewsState.Error -> {\n                Snackbar.make(news_list, state.message.orEmpty(), Snackbar.LENGTH_INDEFINITE)\n                        .setAction("RETRY") { requestNews() }\n                        .show()\n            }\n        }\n    }\n\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\n        return container?.inflate(R.layout.news_fragment)\n    }\n\n    override fun onActivityCreated(savedInstanceState: Bundle?) {\n        super.onActivityCreated(savedInstanceState)\n\n        news_list.apply {\n            setHasFixedSize(true)\n            val linearLayout = LinearLayoutManager(context)\n            layoutManager = linearLayout\n            clearOnScrollListeners()\n            addOnScrollListener(InfiniteScrollListener({ requestNews() }, linearLayout))\n        }\n\n        news_list.adapter = newsAdapter\n\n        if (savedInstanceState != null && savedInstanceState.containsKey(KEY_REDDIT_NEWS)) {\n            redditNews = savedInstanceState.get(KEY_REDDIT_NEWS) as RedditNews\n            newsAdapter.clearAndAddNews(redditNews!!.news)\n        } else {\n            requestNews()\n        }\n    }\n\n    override fun onSaveInstanceState(outState: Bundle) {\n        super.onSaveInstanceState(outState)\n        val news = newsAdapter.getNews()\n        if (redditNews != null && news.isNotEmpty()) {\n            outState.putParcelable(KEY_REDDIT_NEWS, redditNews?.copy(news = news))\n        }\n    }\n\n    private fun requestNews() {\n        /**\n         * first time will send empty string for \'after\' parameter.\n         * Next time we will have redditNews set with the next page to\n         * navigate with the \'after\' param.\n         */\n        newsViewModel.fetchNews(redditNews?.after.orEmpty())\n    }\n}\n\n'