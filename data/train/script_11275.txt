b'module Text.Hoodle.Parse.Util where\n\nimport Control.Monad.IO.Class (MonadIO (liftIO))\nimport Data.Attoparsec.ByteString.Char8 (parseOnly)\nimport qualified Data.ByteString.Char8 as B\n--\nimport Data.Hoodle.Simple (Hoodle)\nimport System.Directory (doesFileExist)\n--\nimport qualified Text.Hoodle.Parse.Attoparsec as PA\n\n-- |\nwithHoodle :: (MonadIO m, Functor m) => FilePath -> (Hoodle -> m a) -> m (Maybe a)\nwithHoodle fname act = do\n  b <- liftIO $ doesFileExist fname\n  if not b\n    then return Nothing\n    else do\n      bstr <- liftIO $ B.readFile fname\n      case parseOnly PA.hoodle bstr of\n        Left _err -> return Nothing\n        Right hdl -> Just <$> act hdl\n'