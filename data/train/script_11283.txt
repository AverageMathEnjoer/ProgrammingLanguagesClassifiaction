b'package com.codeest.geeknews.presenter.zhihu;\n\nimport com.codeest.geeknews.base.RxPresenter;\nimport com.codeest.geeknews.base.contract.zhihu.DailyContract;\nimport com.codeest.geeknews.component.RxBus;\nimport com.codeest.geeknews.model.DataManager;\nimport com.codeest.geeknews.model.bean.DailyBeforeListBean;\nimport com.codeest.geeknews.model.bean.DailyListBean;\nimport com.codeest.geeknews.util.DateUtil;\nimport com.codeest.geeknews.util.RxUtil;\nimport com.codeest.geeknews.widget.CommonSubscriber;\nimport com.prolificinteractive.materialcalendarview.CalendarDay;\n\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\nimport javax.inject.Inject;\n\nimport io.reactivex.Flowable;\nimport io.reactivex.android.schedulers.AndroidSchedulers;\nimport io.reactivex.annotations.NonNull;\nimport io.reactivex.disposables.Disposable;\nimport io.reactivex.functions.Consumer;\nimport io.reactivex.functions.Function;\nimport io.reactivex.functions.Predicate;\nimport io.reactivex.schedulers.Schedulers;\n\n/**\n * Created by codeest on 16/8/11.\n * \xe6\x97\xa5\xe6\x9c\x9f\xe4\xb8\xba\xe6\x98\x8e\xe5\xa4\xa9\xe6\x97\xb6\xef\xbc\x8c\xe5\x8f\x96latest\xe6\x8e\xa5\xe5\x8f\xa3\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\n * \xe5\x85\xb6\xe4\xbb\x96\xe6\x97\xa5\xe6\x9c\x9f\xef\xbc\x8c\xe5\x8f\x96before\xe6\x8e\xa5\xe5\x8f\xa3\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\n */\n\npublic class DailyPresenter extends RxPresenter<DailyContract.View> implements DailyContract.Presenter{\n\n    private DataManager mDataManager;\n    private Disposable intervalSubscription;\n\n    private static final int INTERVAL_INSTANCE = 6;\n\n    private int topCount = 0;\n    private int currentTopCount = 0;\n\n    @Inject\n    public DailyPresenter(DataManager mDataManager) {\n        this.mDataManager = mDataManager;\n    }\n\n    @Override\n    public void attachView(DailyContract.View view) {\n        super.attachView(view);\n        registerEvent();\n    }\n\n    private void registerEvent() {\n        addSubscribe(RxBus.getDefault().toFlowable(CalendarDay.class)\n                .subscribeOn(Schedulers.io())\n                .map(new Function<CalendarDay, String>() {\n                    @Override\n                    public String apply(CalendarDay calendarDay) {\n                        StringBuilder date = new StringBuilder();\n                        String year = String.valueOf(calendarDay.getYear());\n                        String month = String.valueOf(calendarDay.getMonth() + 1);\n                        String day = String.valueOf(calendarDay.getDay() + 1);\n                        if(month.length() < 2) {\n                            month = "0" + month;\n                        }\n                        if(day.length() < 2) {\n                            day = "0" + day;\n                        }\n                        return date.append(year).append(month).append(day).toString();\n                    }\n                })\n                .filter(new Predicate<String>() {\n                    @Override\n                    public boolean test(@NonNull String s) throws Exception {\n                        if(s.equals(DateUtil.getTomorrowDate())) {\n                            getDailyData();\n                            return false;\n                        }\n                        return true;\n                    }\n                })\n                .observeOn(Schedulers.io())   //\xe4\xb8\xba\xe4\xba\x86\xe7\xbd\x91\xe7\xbb\x9c\xe8\xaf\xb7\xe6\xb1\x82\xe5\x88\x87\xe5\x88\xb0io\xe7\xba\xbf\xe7\xa8\x8b\n                .flatMap(new Function<String, Flowable<DailyBeforeListBean>>() {\n                    @Override\n                    public Flowable<DailyBeforeListBean> apply(String date) {\n                        return mDataManager.fetchDailyBeforeListInfo(date);\n                    }\n                })\n                .observeOn(AndroidSchedulers.mainThread())    //\xe4\xb8\xba\xe4\xba\x86\xe4\xbd\xbf\xe7\x94\xa8Realm\xe5\x92\x8c\xe6\x98\xbe\xe7\xa4\xba\xe7\xbb\x93\xe6\x9e\x9c\xe5\x88\x87\xe5\x88\xb0\xe4\xb8\xbb\xe7\xba\xbf\xe7\xa8\x8b\n                .map(new Function<DailyBeforeListBean, DailyBeforeListBean>() {\n                    @Override\n                    public DailyBeforeListBean apply(DailyBeforeListBean dailyBeforeListBean) {\n                        List<DailyListBean.StoriesBean> list = dailyBeforeListBean.getStories();\n                        for(DailyListBean.StoriesBean item : list) {\n                            item.setReadState(mDataManager.queryNewsId(item.getId()));\n                        }\n                        return dailyBeforeListBean;\n                    }\n                })\n                .subscribeWith(new CommonSubscriber<DailyBeforeListBean>(mView) {\n                    @Override\n                    public void onNext(DailyBeforeListBean dailyBeforeListBean) {\n                        int year = Integer.valueOf(dailyBeforeListBean.getDate().substring(0,4));\n                        int month = Integer.valueOf(dailyBeforeListBean.getDate().substring(4,6));\n                        int day = Integer.valueOf(dailyBeforeListBean.getDate().substring(6,8));\n                        mView.showMoreContent(String.format("%d\xe5\xb9\xb4%d\xe6\x9c\x88%d\xe6\x97\xa5",year,month,day), dailyBeforeListBean);\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                        super.onError(e);\n                        registerEvent();\n                    }\n                })\n        );\n    }\n\n    @Override\n    public void getDailyData() {\n        addSubscribe(mDataManager.fetchDailyListInfo()\n                .compose(RxUtil.<DailyListBean>rxSchedulerHelper())\n                .map(new Function<DailyListBean, DailyListBean>() {\n                    @Override\n                    public DailyListBean apply(DailyListBean dailyListBean) {\n                        List<DailyListBean.StoriesBean> list = dailyListBean.getStories();\n                        for(DailyListBean.StoriesBean item : list) {\n                            item.setReadState(mDataManager.queryNewsId(item.getId()));\n                        }\n                        return dailyListBean;\n                    }\n                })\n                .subscribeWith(new CommonSubscriber<DailyListBean>(mView) {\n                    @Override\n                    public void onNext(DailyListBean dailyListBean) {\n                        topCount = dailyListBean.getTop_stories().size();\n                        mView.showContent(dailyListBean);\n                    }\n                })\n        );\n    }\n\n    @Override\n    public void getBeforeData(String date) {\n        addSubscribe(mDataManager.fetchDailyBeforeListInfo(date)\n                .compose(RxUtil.<DailyBeforeListBean>rxSchedulerHelper())\n                .map(new Function<DailyBeforeListBean, DailyBeforeListBean>() {\n                    @Override\n                    public DailyBeforeListBean apply(DailyBeforeListBean dailyBeforeListBean) {\n                        List<DailyListBean.StoriesBean> list = dailyBeforeListBean.getStories();\n                        for(DailyListBean.StoriesBean item : list) {\n                            item.setReadState(mDataManager.queryNewsId(item.getId()));\n                        }\n                        return dailyBeforeListBean;\n                    }\n                })\n                .subscribeWith(new CommonSubscriber<DailyBeforeListBean>(mView) {\n                    @Override\n                    public void onNext(DailyBeforeListBean dailyBeforeListBean) {\n                        int year = Integer.valueOf(dailyBeforeListBean.getDate().substring(0,4));\n                        int month = Integer.valueOf(dailyBeforeListBean.getDate().substring(4,6));\n                        int day = Integer.valueOf(dailyBeforeListBean.getDate().substring(6,8));\n                        mView.showMoreContent(String.format("%d\xe5\xb9\xb4%d\xe6\x9c\x88%d\xe6\x97\xa5",year,month,day),dailyBeforeListBean);\n                    }\n                })\n        );\n    }\n\n    @Override\n    public void startInterval() {\n        if (intervalSubscription != null && !intervalSubscription.isDisposed()) {\n            return;\n        }\n        intervalSubscription = Flowable.interval(INTERVAL_INSTANCE, TimeUnit.SECONDS)\n                .onBackpressureDrop()\n                .compose(RxUtil.<Long>rxSchedulerHelper())\n                .subscribe(new Consumer<Long>() {\n                    @Override\n                    public void accept(Long aLong) {\n                        if(currentTopCount == topCount)\n                            currentTopCount = 0;\n                        mView.doInterval(currentTopCount++);\n                    }\n                });\n        addSubscribe(intervalSubscription);\n    }\n\n    @Override\n    public void stopInterval() {\n        if (intervalSubscription != null && !intervalSubscription.isDisposed()) {\n            intervalSubscription.dispose();\n        }\n    }\n\n    @Override\n    public void insertReadToDB(int id) {\n        mDataManager.insertNewsId(id);\n    }\n}\n'