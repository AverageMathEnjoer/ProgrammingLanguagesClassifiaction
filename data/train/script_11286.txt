b'/*\n    SPDX-FileCopyrightText: 2015-2017 Milian Wolff <mail@milianw.de>\n\n    SPDX-License-Identifier: LGPL-2.1-or-later\n*/\n\n#include "histogrammodel.h"\n\n#include <KChartGlobal>\n\n#include <KLocalizedString>\n\n#include <QBrush>\n#include <QColor>\n#include <QPen>\n\n#include <limits>\n\n#include <util.h>\n\nnamespace {\nQColor colorForColumn(int column, int columnCount)\n{\n    return QColor::fromHsv((double(column) / columnCount) * 255, 255, 255);\n}\n}\n\nHistogramModel::HistogramModel(QObject* parent)\n    : QAbstractTableModel(parent)\n{\n    qRegisterMetaType<HistogramData>("HistogramData");\n}\n\nHistogramModel::~HistogramModel() = default;\n\nQVariant HistogramModel::headerData(int section, Qt::Orientation orientation, int role) const\n{\n    if (orientation == Qt::Vertical && role == Qt::DisplayRole && section >= 0 && section < m_data.rows.size()) {\n        return m_data.rows.at(section).sizeLabel;\n    }\n    return {};\n}\n\nQVariant HistogramModel::data(const QModelIndex& index, int role) const\n{\n    if (!hasIndex(index.row(), index.column(), index.parent())) {\n        return {};\n    }\n    if (role == KChart::DatasetBrushRole) {\n        return QVariant::fromValue(QBrush(colorForColumn(index.column(), columnCount())));\n    } else if (role == KChart::DatasetPenRole) {\n        return QVariant::fromValue(QPen(Qt::black));\n    }\n\n    if (role != Qt::DisplayRole && role != Qt::ToolTipRole) {\n        return {};\n    }\n\n    const auto& row = m_data.rows.at(index.row());\n    const auto& column = row.columns[index.column()];\n    if (role == Qt::ToolTipRole) {\n        if (index.column() == 0) {\n            return i18n("%1 allocations in total", column.allocations);\n        }\n        return i18n("%1 allocations from %2, totalling %3 allocated with an average of %4 per allocation",\n                    column.allocations, Util::toString(column.symbol, *m_data.resultData, Util::Long),\n                    Util::formatBytes(column.totalAllocated),\n                    Util::formatBytes(column.totalAllocated / column.allocations));\n    }\n    return column.allocations;\n}\n\nint HistogramModel::columnCount(const QModelIndex& parent) const\n{\n    if (parent.isValid()) {\n        return 0;\n    }\n    return HistogramRow::NUM_COLUMNS;\n}\n\nint HistogramModel::rowCount(const QModelIndex& parent) const\n{\n    if (parent.isValid()) {\n        return 0;\n    }\n    return m_data.rows.size();\n}\n\nvoid HistogramModel::resetData(const HistogramData& data)\n{\n    Q_ASSERT(data.resultData);\n    beginResetModel();\n    m_data = data;\n    endResetModel();\n}\n\nvoid HistogramModel::clearData()\n{\n    beginResetModel();\n    m_data = {};\n    endResetModel();\n}\n'