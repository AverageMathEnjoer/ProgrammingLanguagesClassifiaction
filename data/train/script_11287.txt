b'package effectivejava.chapter9.item65;\n\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.util.Arrays;\nimport java.util.Set;\n\n// Reflective instantiaion demo (Page 283)\npublic class ReflectiveInstantiation {\n    // Reflective instantiation with interface access\n    public static void main(String[] args) {\n        // Translate the class name into a Class object\n        Class<? extends Set<String>> cl = null;\n        try {\n            cl = (Class<? extends Set<String>>)  // Unchecked cast!\n                    Class.forName(args[0]);\n        } catch (ClassNotFoundException e) {\n            fatalError("Class not found.");\n        }\n\n        // Get the constructor\n        Constructor<? extends Set<String>> cons = null;\n        try {\n            cons = cl.getDeclaredConstructor();\n        } catch (NoSuchMethodException e) {\n            fatalError("No parameterless constructor");\n        }\n\n        // Instantiate the set\n        Set<String> s = null;\n        try {\n            s = cons.newInstance();\n        } catch (IllegalAccessException e) {\n            fatalError("Constructor not accessible");\n        } catch (InstantiationException e) {\n            fatalError("Class not instantiable.");\n        } catch (InvocationTargetException e) {\n            fatalError("Constructor threw " + e.getCause());\n        } catch (ClassCastException e) {\n            fatalError("Class doesn\'t implement Set");\n        }\n\n        // Exercise the set\n        s.addAll(Arrays.asList(args).subList(1, args.length));\n        System.out.println(s);\n    }\n\n    private static void fatalError(String msg) {\n        System.err.println(msg);\n        System.exit(1);\n    }\n}\n'