b'#\' getPatterns\n#\'\n#\' Get the full matching patterns for all matched pairs in dataset A and dataset B\n#\'\n#\' @param matchesA A dataframe of the matched observations in\n#\' dataset A, with all variables used to inform the match.\n#\' @param matchesB A dataframe of the matched observations in\n#\' dataset B, with all variables used to inform the match.\n#\' @param varnames A vector of variable names to use for matching.\n#\' Must be present in both matchesA and matchesB.\n#\' @param stringdist.match A vector of booleans, indicating whether to use\n#\' string distance matching when determining matching patterns on\n#\' each variable. Must be same length as varnames.\n#\' @param numeric.match A vector of booleans, indicating whether to use\n#\' numeric pairwise distance matching when determining matching patterns on\n#\' each variable. Must be same length as varnames.\n#\' @param partial.match A vector of booleans, indicating whether to include\n#\' a partial matching category for the string distances. Must be same length\n#\' as varnames. Default is FALSE for all variables.\n#\' @param stringdist.method String distance method for calculating similarity, options are: "jw" Jaro-Winkler (Default), "jaro" Jaro, and "lv" Edit\n#\' @param cut.a Lower bound for full string-distance match, ranging between 0 and 1. Default is 0.92\n#\' @param cut.p Lower bound for partial string-distance match, ranging between 0 and 1. Default is 0.88\n#\' @param jw.weight Parameter that describes the importance of the first characters of a string (only needed if stringdist.method = "jw"). Default is .10\n#\' @param cut.a.num Lower bound for full numeric match. Default is 1\n#\' @param cut.p.num Lower bound for partial numeric match. Default is 2.5\n#\'\n#\' @return \\code{getPatterns()} returns a dataframe with a row for each matched pair,\n#\' where each column indicates the matching pattern for each matching variable.\n#\'\n#\' @author Ted Enamorado <ted.enamorado@gmail.com> and Ben Fifield <benfifield@gmail.com>\n#\' @export\ngetPatterns <- function(matchesA, matchesB, varnames,\n                        stringdist.match, numeric.match,\n                        partial.match, stringdist.method = "jw",\n                        cut.a = 0.92, cut.p = 0.88, jw.weight = .10,\n                        cut.a.num = 1, cut.p.num = 2.5){\n\n    ## --------------\n    ## Start function\n    ## --------------\n    ## Convert to dataframe\n    if(any(class(matchesA) %in% c("tbl_df", "data.table"))){\n        matchesA <- as.data.frame(matchesA)\n    }\n    if(any(class(matchesB) %in% c("tbl_df", "data.table"))){\n        matchesB <- as.data.frame(matchesB)\n    }\n    if(!(stringdist.method %in% c("jw", "jaro", "lv"))){\n        stop("Invalid string distance method. Method should be one of \'jw\', \'jaro\', or \'lv\'.")\n    }\n    if(stringdist.method == "jw" & !is.null(jw.weight)){\n        if(jw.weight < 0 | jw.weight > 0.25){\n            stop("Invalid value provided for jw.weight. Remember, jw.weight in [0, 0.25].")\n        }\n    }\n    if(any(stringdist.match * numeric.match) == 1){\n        stop("There is a variable present in both \'numeric.match\' and \'stringdist.match\'. Please select only one matching metric for each variable.")\n    }\n\n    ## ----------\n    ## Get gammas\n    ## ----------\n    gammalist <- vector(mode = "list", length = length(varnames))\n    namevec <- rep(NA, length(varnames))\n    for(i in 1:length(gammalist)){\n        ## Convert to character\n        if(is.factor(matchesA[,varnames[i]]) | is.factor(matchesB[,varnames[i]])){\n            matchesA[,varnames[i]] <- as.character(matchesA[,varnames[i]])\n            matchesB[,varnames[i]] <- as.character(matchesB[,varnames[i]])\n        }\n        ## Get matches\n        if(stringdist.match[i]){\n            if(stringdist.method %in% c("jw", "jaro")){\n                if(stringdist.method == "jw"){\n                    p1 <- jw.weight\n                }else{\n                    p1 <- NULL\n                }\n                tmp <- 1 - stringdist(matchesA[,varnames[i]], matchesB[,varnames[i]], "jw", p = p1)\n            }else{\n                t <- stringdist(matchesA[,varnames[i]], matchesB[,varnames[i]], method = stringdist.method)\n                t.1 <- nchar(matchesA[,varnames[i]])\n                t.2 <- nchar(matchesB[,varnames[i]])\n                o <- ifelse(t.1 > t.2, t.1, t.2)\n                tmp <- 1 - t * (1/o)\n            }\n            if(partial.match[i]){\n                gammalist[[i]] <- ifelse(\n                    tmp >= cut.a, 2, ifelse(tmp >= cut.p, 1, 0)\n                )\n            }else{\n                gammalist[[i]] <- ifelse(tmp >= cut.a, 2, 0)\n            }\n        }else if(numeric.match[i]){\n            tmp <- abs(matchesA[,varnames[i]] - matchesB[,varnames[i]])\n            if(partial.match[i]){\n                gammalist[[i]] <- ifelse(\n                    tmp <= cut.a.num, 2, ifelse(tmp <= cut.p.num, 1, 0)\n                )\n            }else{\n                gammalist[[i]] <- ifelse(tmp <= cut.a.num, 2, 0)\n            }\n        }else{\n            tmp <- matchesA[,varnames[i]] == matchesB[,varnames[i]]\n            gammalist[[i]] <- ifelse(tmp == TRUE, 2, 0)\n        }\n\n        namevec[i] <- paste0("gamma.", i)\n        \n    }\n    gammalist <- data.frame(do.call(cbind, gammalist))\n    names(gammalist) <- namevec\n\n    return(gammalist)\n\n}\n\n'