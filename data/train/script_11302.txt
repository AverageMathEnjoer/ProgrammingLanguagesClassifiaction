b'package droidninja.filepicker\n\nimport android.content.pm.ActivityInfo\nimport android.net.Uri\nimport java.util.ArrayList\n\nimport droidninja.filepicker.models.BaseFile\nimport droidninja.filepicker.models.FileType\nimport droidninja.filepicker.models.sort.SortingTypes\nimport java.util.LinkedHashSet\n\n/**\n * Created by droidNinja on 29/07/16.\n */\nobject PickerManager {\n    private var maxCount = FilePickerConst.DEFAULT_MAX_COUNT\n    private var showImages = true\n    var cameraDrawable = R.drawable.ic_camera\n    var sortingType = SortingTypes.NONE\n\n    val selectedPhotos: ArrayList<Uri> = ArrayList()\n    val selectedFiles: ArrayList<Uri> = ArrayList()\n\n    private val fileTypes: LinkedHashSet<FileType> = LinkedHashSet()\n\n    var theme: Int = R.style.LibAppTheme\n\n    var title: String? = null\n\n    private var showVideos: Boolean = false\n\n    var isShowGif: Boolean = false\n\n    private var showSelectAll = false\n\n    var imageFileSize: Int = FilePickerConst.DEFAULT_FILE_SIZE\n    var videoFileSize: Int = FilePickerConst.DEFAULT_FILE_SIZE\n\n    var isDocSupport = true\n        get() = field\n\n    var isEnableCamera = true\n\n    /**\n     * Recyclerview span count for both folder and detail screen\n     * Default Folder span is 2\n     * Default Detail Span is 3\n     */\n    var spanTypes = mutableMapOf(\n            FilePickerConst.SPAN_TYPE.FOLDER_SPAN to 2,\n            FilePickerConst.SPAN_TYPE.DETAIL_SPAN to 3\n    )\n\n    /**\n     * The preferred screen orientation this activity would like to run in.\n     * From the {@link android.R.attr#screenOrientation} attribute, one of\n     * {@link #SCREEN_ORIENTATION_UNSPECIFIED},\n     * {@link #SCREEN_ORIENTATION_LANDSCAPE},\n     * {@link #SCREEN_ORIENTATION_PORTRAIT},\n     * {@link #SCREEN_ORIENTATION_USER},\n     * {@link #SCREEN_ORIENTATION_BEHIND},\n     * {@link #SCREEN_ORIENTATION_SENSOR},\n     * {@link #SCREEN_ORIENTATION_NOSENSOR},\n     * {@link #SCREEN_ORIENTATION_SENSOR_LANDSCAPE},\n     * {@link #SCREEN_ORIENTATION_SENSOR_PORTRAIT},\n     * {@link #SCREEN_ORIENTATION_REVERSE_LANDSCAPE},\n     * {@link #SCREEN_ORIENTATION_REVERSE_PORTRAIT},\n     * {@link #SCREEN_ORIENTATION_FULL_SENSOR},\n     * {@link #SCREEN_ORIENTATION_USER_LANDSCAPE},\n     * {@link #SCREEN_ORIENTATION_USER_PORTRAIT},\n     * {@link #SCREEN_ORIENTATION_FULL_USER},\n     * {@link #SCREEN_ORIENTATION_LOCKED},\n     */\n    var orientation = ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED\n        get() = field\n\n    var isShowFolderView = true\n\n    val currentCount: Int\n        get() = selectedPhotos.size + selectedFiles.size\n\n    fun setMaxCount(count: Int) {\n        reset()\n        this.maxCount = count\n    }\n\n    fun getMaxCount(): Int {\n        return maxCount\n    }\n\n    fun add(path: Uri?, type: Int) {\n        if (path != null && shouldAdd()) {\n            if (!selectedPhotos.contains(path) && type == FilePickerConst.FILE_TYPE_MEDIA) {\n                selectedPhotos.add(path)\n            } else if (!selectedFiles.contains(path) && type == FilePickerConst.FILE_TYPE_DOCUMENT) {\n                selectedFiles.add(path)\n            } else {\n                return\n            }\n        }\n    }\n\n    fun add(paths: List<Uri>, type: Int) {\n        for (index in paths.indices) {\n            add(paths[index], type)\n        }\n    }\n\n    fun remove(path: Uri?, type: Int) {\n        if (type == FilePickerConst.FILE_TYPE_MEDIA && selectedPhotos.contains(path)) {\n            selectedPhotos.remove(path)\n        } else if (type == FilePickerConst.FILE_TYPE_DOCUMENT) {\n            selectedFiles.remove(path)\n        }\n    }\n\n    fun shouldAdd(): Boolean {\n        return if (maxCount == -1) true else currentCount < maxCount\n    }\n\n    fun getSelectedFilePaths(files: ArrayList<BaseFile>): ArrayList<Uri> {\n        val paths = ArrayList<Uri>()\n        for (index in files.indices) {\n            paths.add(files[index].path)\n        }\n        return paths\n    }\n\n    fun reset() {\n        selectedFiles.clear()\n        selectedPhotos.clear()\n        fileTypes.clear()\n        maxCount = -1\n    }\n\n    fun clearSelections() {\n        selectedPhotos.clear()\n        selectedFiles.clear()\n    }\n\n    fun deleteMedia(paths: List<Uri>) {\n        selectedPhotos.removeAll(paths)\n    }\n\n    fun showVideo(): Boolean {\n        return showVideos\n    }\n\n    fun setShowVideos(showVideos: Boolean) {\n        this.showVideos = showVideos\n    }\n\n    fun showImages(): Boolean {\n        return showImages\n    }\n\n    fun setShowImages(showImages: Boolean) {\n        this.showImages = showImages\n    }\n\n    fun addFileType(fileType: FileType) {\n        fileTypes.add(fileType)\n    }\n\n    fun addDocTypes() {\n        val pdfs = arrayOf("pdf")\n        fileTypes.add(FileType(FilePickerConst.PDF, pdfs, R.drawable.icon_file_pdf))\n\n        val docs = arrayOf("doc", "docx", "dot", "dotx")\n        fileTypes.add(FileType(FilePickerConst.DOC, docs, R.drawable.icon_file_doc))\n\n        val ppts = arrayOf("ppt", "pptx")\n        fileTypes.add(FileType(FilePickerConst.PPT, ppts, R.drawable.icon_file_ppt))\n\n        val xlss = arrayOf("xls", "xlsx")\n        fileTypes.add(FileType(FilePickerConst.XLS, xlss, R.drawable.icon_file_xls))\n\n        val txts = arrayOf("txt")\n        fileTypes.add(FileType(FilePickerConst.TXT, txts, R.drawable.icon_file_unknown))\n    }\n\n    fun getFileTypes(): ArrayList<FileType> {\n        return ArrayList(fileTypes)\n    }\n\n    fun hasSelectAll(): Boolean {\n        return maxCount == -1 && showSelectAll\n    }\n\n    fun enableSelectAll(showSelectAll: Boolean) {\n        this.showSelectAll = showSelectAll\n    }\n}\n'