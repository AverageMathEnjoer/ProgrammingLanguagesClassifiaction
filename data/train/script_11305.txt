b'/*\n    SPDX-FileCopyrightText: 2014-2017 Milian Wolff <mail@milianw.de>\n\n    SPDX-License-Identifier: LGPL-2.1-or-later\n*/\n\n#include <future>\n#include <thread>\n#include <vector>\n\nusing namespace std;\n\nconst int ALLOCS_PER_THREAD = 1000;\n\nint** alloc()\n{\n    int** block = new int*[ALLOCS_PER_THREAD];\n    for (int i = 0; i < ALLOCS_PER_THREAD; ++i) {\n        block[i] = new int;\n    }\n    return block;\n}\n\nvoid dealloc(future<int**>&& f)\n{\n    int** block = f.get();\n    for (int i = 0; i < ALLOCS_PER_THREAD; ++i) {\n        delete block[i];\n    }\n    delete[] block;\n}\n\nint main()\n{\n    vector<future<void>> futures;\n    futures.reserve(100 * 4);\n    for (int i = 0; i < 100; ++i) {\n        auto f1 = async(launch::async, alloc);\n        auto f2 = async(launch::async, alloc);\n        auto f3 = async(launch::async, alloc);\n        auto f4 = async(launch::async, alloc);\n        futures.emplace_back(async(launch::async, dealloc, move(f1)));\n        futures.emplace_back(async(launch::async, dealloc, move(f2)));\n        futures.emplace_back(async(launch::async, dealloc, move(f3)));\n        futures.emplace_back(async(launch::async, dealloc, move(f4)));\n    }\n    return 0;\n}\n'