b"module Control.Monad.Trans.Crtn.EventHandler where\n\nimport Control.Concurrent.MVar\n  ( MVar,\n    putMVar,\n    takeMVar,\n  )\nimport Control.Monad.State (runStateT)\nimport Control.Monad.Trans.Crtn.Driver (Driver, fire)\nimport Control.Monad.Trans.Crtn.Event (ActionOrder (..))\nimport Control.Monad.Trans.Crtn.Logger (scribe)\nimport Control.Monad.Trans.Except (runExceptT)\n\n-- |\neventHandler :: MVar (Maybe (Driver e IO ())) -> e -> IO ()\neventHandler evar ev = do\n  mnext <- takeMVar evar\n  case mnext of\n    Nothing -> return ()\n    Just drv -> do\n      (r, drv') <- eaction drv\n      putMVar evar (Just drv')\n      case r of\n        Left err -> scribe (show err)\n        Right Nothing -> return ()\n        Right (Just (ActionOrder act)) ->\n          act (eventHandler evar) >>= eventHandler evar\n  where\n    eaction = runStateT (runExceptT $ fire ev)\n"