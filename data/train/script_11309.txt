b'package com.rd.animation.type;\n\nimport android.animation.IntEvaluator;\nimport android.animation.PropertyValuesHolder;\nimport android.animation.ValueAnimator;\nimport androidx.annotation.NonNull;\nimport android.view.animation.AccelerateDecelerateInterpolator;\nimport com.rd.animation.controller.ValueController;\nimport com.rd.animation.data.type.ScaleAnimationValue;\n\npublic class ScaleAnimation extends ColorAnimation {\n\n    public static final float DEFAULT_SCALE_FACTOR = 0.7f;\n    public static final float MIN_SCALE_FACTOR = 0.3f;\n    public static final float MAX_SCALE_FACTOR = 1;\n\n    static final String ANIMATION_SCALE_REVERSE = "ANIMATION_SCALE_REVERSE";\n    static final String ANIMATION_SCALE = "ANIMATION_SCALE";\n\n    int radius;\n    float scaleFactor;\n\n    private ScaleAnimationValue value;\n\n    public ScaleAnimation(@NonNull ValueController.UpdateListener listener) {\n        super(listener);\n        value = new ScaleAnimationValue();\n    }\n\n    @NonNull\n    @Override\n    public ValueAnimator createAnimator() {\n        ValueAnimator animator = new ValueAnimator();\n        animator.setDuration(BaseAnimation.DEFAULT_ANIMATION_TIME);\n        animator.setInterpolator(new AccelerateDecelerateInterpolator());\n        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n            @Override\n            public void onAnimationUpdate(ValueAnimator animation) {\n                onAnimateUpdated(animation);\n            }\n        });\n\n        return animator;\n    }\n\n    @NonNull\n    public ScaleAnimation with(int colorStart, int colorEnd, int radius, float scaleFactor) {\n        if (animator != null && hasChanges(colorStart, colorEnd, radius, scaleFactor)) {\n\n            this.colorStart = colorStart;\n            this.colorEnd = colorEnd;\n\n            this.radius = radius;\n            this.scaleFactor = scaleFactor;\n\n            PropertyValuesHolder colorHolder = createColorPropertyHolder(false);\n            PropertyValuesHolder reverseColorHolder = createColorPropertyHolder(true);\n\n            PropertyValuesHolder scaleHolder = createScalePropertyHolder(false);\n            PropertyValuesHolder scaleReverseHolder = createScalePropertyHolder(true);\n\n            animator.setValues(colorHolder, reverseColorHolder, scaleHolder, scaleReverseHolder);\n        }\n\n        return this;\n    }\n\n    private void onAnimateUpdated(@NonNull ValueAnimator animation) {\n        int color = (int) animation.getAnimatedValue(ANIMATION_COLOR);\n        int colorReverse = (int) animation.getAnimatedValue(ANIMATION_COLOR_REVERSE);\n\n        int radius = (int) animation.getAnimatedValue(ANIMATION_SCALE);\n        int radiusReverse = (int) animation.getAnimatedValue(ANIMATION_SCALE_REVERSE);\n\n        value.setColor(color);\n        value.setColorReverse(colorReverse);\n\n        value.setRadius(radius);\n        value.setRadiusReverse(radiusReverse);\n\n        if (listener != null) {\n            listener.onValueUpdated(value);\n        }\n    }\n\n    @NonNull\n    protected PropertyValuesHolder createScalePropertyHolder(boolean isReverse) {\n        String propertyName;\n        int startRadiusValue;\n        int endRadiusValue;\n\n        if (isReverse) {\n            propertyName = ANIMATION_SCALE_REVERSE;\n            startRadiusValue = radius;\n            endRadiusValue = (int) (radius * scaleFactor);\n        } else {\n            propertyName = ANIMATION_SCALE;\n            startRadiusValue = (int) (radius * scaleFactor);\n            endRadiusValue = radius;\n        }\n\n        PropertyValuesHolder holder = PropertyValuesHolder.ofInt(propertyName, startRadiusValue, endRadiusValue);\n        holder.setEvaluator(new IntEvaluator());\n\n        return holder;\n    }\n\n    @SuppressWarnings("RedundantIfStatement")\n    private boolean hasChanges(int colorStart, int colorEnd, int radiusValue, float scaleFactorValue) {\n        if (this.colorStart != colorStart) {\n            return true;\n        }\n\n        if (this.colorEnd != colorEnd) {\n            return true;\n        }\n\n        if (radius != radiusValue) {\n            return true;\n        }\n\n        if (scaleFactor != scaleFactorValue) {\n            return true;\n        }\n\n        return false;\n    }\n}\n\n'