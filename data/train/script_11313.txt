b'\xef\xbb\xbfusing Asn1;\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace Rubeus\n{\n    //AuthorizationData       ::= SEQUENCE OF SEQUENCE {\n    //          ad-type[0] Int32,\n    //          ad-data[1] OCTET STRING\n    //}\n\n    public abstract class AuthorizationData\n    {\n        public AuthorizationData() { }\n\n        public AuthorizationData(Interop.AuthorizationDataType adtype) : this(adtype, null) \n        {\n        }\n\n        public AuthorizationData(Interop.AuthorizationDataType adtype, byte[] data)\n        {\n\n            ad_type = adtype;\n            ad_data = data;\n        }\n\n        public AsnElt ADEncode()\n        {\n            // ad-type            [0] Int32\n            AsnElt adTypeElt = AsnElt.MakeInteger((long)ad_type);\n            AsnElt adTypeSeq = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] { adTypeElt });\n            adTypeSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 0, adTypeSeq);\n\n            // ad-data            [1] OCTET STRING\n            AsnElt adDataElt = AsnElt.MakeBlob(ad_data);\n            AsnElt adDataSeq = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] { adDataElt });\n            adDataSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 1, adDataSeq);\n\n            AsnElt seq = AsnElt.Make(AsnElt.SEQUENCE, new[] { adTypeSeq, adDataSeq });\n\n            return seq;\n        }\n\n        public abstract AsnElt Encode();\n\n        protected abstract void Decode(AsnElt data);\n\n        protected abstract void Decode(AsnElt data, byte[] asrepKey = null);\n\n        public Interop.AuthorizationDataType ad_type { get; set; }\n\n        public byte[] ad_data { get; set; }\n    }\n}\n'