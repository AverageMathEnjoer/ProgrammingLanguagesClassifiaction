b'module TreeSitter.Cursor\n( Cursor\n, withCursor\n, sizeOfCursor\n, ts_tree_cursor_new_p\n, ts_tree_cursor_delete\n, ts_tree_cursor_reset_p\n, ts_tree_cursor_current_node_p\n, ts_tree_cursor_current_field_name\n, ts_tree_cursor_current_field_id\n, ts_tree_cursor_goto_parent\n, ts_tree_cursor_goto_next_sibling\n, ts_tree_cursor_goto_first_child\n, ts_tree_cursor_goto_first_child_for_byte\n, ts_tree_cursor_copy_child_nodes\n) where\n\nimport Control.Exception as Exc\nimport Data.Int\nimport Data.Word\nimport Foreign.C\nimport Foreign.Marshal.Alloc\nimport Foreign.Ptr\nimport TreeSitter.Node\n\n-- | A cursor for traversing a tree.\n--\n--   This type is uninhabited and used only for type safety within \'Ptr\' values.\ndata Cursor\n\nwithCursor :: Ptr TSNode -> (Ptr Cursor -> IO a) -> IO a\nwithCursor rootPtr action = allocaBytes sizeOfCursor $ \\ cursor -> Exc.bracket\n  (cursor <$ ts_tree_cursor_new_p rootPtr cursor)\n  ts_tree_cursor_delete\n  action\n\n-- | THe size of a \'Cursor\' in bytes. The tests verify that this value is the same as @sizeof(TSTreeCursor)@.\nsizeOfCursor :: Int\nsizeOfCursor = 24\n\nforeign import ccall unsafe "src/bridge.c ts_tree_cursor_new_p" ts_tree_cursor_new_p :: Ptr TSNode -> Ptr Cursor -> IO ()\nforeign import ccall unsafe "ts_tree_cursor_delete" ts_tree_cursor_delete :: Ptr Cursor -> IO ()\nforeign import ccall unsafe "src/bridge.c ts_tree_cursor_reset_p" ts_tree_cursor_reset_p :: Ptr Cursor -> Ptr TSNode -> IO ()\n\nforeign import ccall unsafe "src/bridge.c ts_tree_cursor_current_node_p" ts_tree_cursor_current_node_p :: Ptr Cursor -> Ptr Node -> IO Bool\nforeign import ccall unsafe "ts_tree_cursor_current_field_name" ts_tree_cursor_current_field_name :: Ptr Cursor -> IO CString\nforeign import ccall unsafe "ts_tree_cursor_current_field_id" ts_tree_cursor_current_field_id :: Ptr Cursor -> IO FieldId\n\nforeign import ccall unsafe "ts_tree_cursor_goto_parent" ts_tree_cursor_goto_parent :: Ptr Cursor -> IO Bool\nforeign import ccall unsafe "ts_tree_cursor_goto_next_sibling" ts_tree_cursor_goto_next_sibling :: Ptr Cursor -> IO Bool\nforeign import ccall unsafe "ts_tree_cursor_goto_first_child" ts_tree_cursor_goto_first_child :: Ptr Cursor -> IO Bool\nforeign import ccall unsafe "ts_tree_cursor_goto_first_child_for_byte" ts_tree_cursor_goto_first_child_for_byte :: Ptr Cursor -> Word32 -> IO Int64\n\nforeign import ccall unsafe "src/bridge.c ts_tree_cursor_copy_child_nodes" ts_tree_cursor_copy_child_nodes :: Ptr Cursor -> Ptr Node -> IO Word32\n'