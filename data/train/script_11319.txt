b'/*\n * Copyright (C) 2015 Naman Dwivedi\n *\n * Licensed under the GNU General Public License v3\n *\n * This is free software: you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n */\n\npackage com.naman14.timber.dataloaders;\n\nimport android.content.ContentResolver;\nimport android.content.Context;\nimport android.database.Cursor;\nimport android.media.MediaMetadataRetriever;\nimport android.net.Uri;\nimport android.provider.BaseColumns;\nimport android.provider.MediaStore;\nimport android.text.TextUtils;\n\nimport com.naman14.timber.models.Song;\nimport com.naman14.timber.utils.PreferencesUtility;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class SongLoader {\n\n    private static final long[] sEmptyList = new long[0];\n\n    public static ArrayList<Song> getSongsForCursor(Cursor cursor) {\n        ArrayList arrayList = new ArrayList();\n        if ((cursor != null) && (cursor.moveToFirst()))\n            do {\n                long id = cursor.getLong(0);\n                String title = cursor.getString(1);\n                String artist = cursor.getString(2);\n                String album = cursor.getString(3);\n                int duration = cursor.getInt(4);\n                int trackNumber = cursor.getInt(5);\n                long artistId = cursor.getInt(6);\n                long albumId = cursor.getLong(7);\n\n                arrayList.add(new Song(id, albumId, artistId, title, artist, album, duration, trackNumber));\n            }\n            while (cursor.moveToNext());\n        if (cursor != null)\n            cursor.close();\n        return arrayList;\n    }\n\n    public static Song getSongForCursor(Cursor cursor) {\n        Song song = new Song();\n        if ((cursor != null) && (cursor.moveToFirst())) {\n            long id = cursor.getLong(0);\n            String title = cursor.getString(1);\n            String artist = cursor.getString(2);\n            String album = cursor.getString(3);\n            int duration = cursor.getInt(4);\n            int trackNumber = cursor.getInt(5);\n            long artistId = cursor.getInt(6);\n            long albumId = cursor.getLong(7);\n\n            song = new Song(id, albumId, artistId, title, artist, album, duration, trackNumber);\n        }\n\n        if (cursor != null)\n            cursor.close();\n        return song;\n    }\n\n    public static final long[] getSongListForCursor(Cursor cursor) {\n        if (cursor == null) {\n            return sEmptyList;\n        }\n        final int len = cursor.getCount();\n        final long[] list = new long[len];\n        cursor.moveToFirst();\n        int columnIndex = -1;\n        try {\n            columnIndex = cursor.getColumnIndexOrThrow(MediaStore.Audio.Playlists.Members.AUDIO_ID);\n        } catch (final IllegalArgumentException notaplaylist) {\n            columnIndex = cursor.getColumnIndexOrThrow(BaseColumns._ID);\n        }\n        for (int i = 0; i < len; i++) {\n            list[i] = cursor.getLong(columnIndex);\n            cursor.moveToNext();\n        }\n        cursor.close();\n        cursor = null;\n        return list;\n    }\n\n    public static Song getSongFromPath(String songPath, Context context) {\n        ContentResolver cr = context.getContentResolver();\n\n        Uri uri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;\n        String selection = MediaStore.Audio.Media.DATA;\n        String[] selectionArgs = {songPath};\n        String[] projection = new String[]{"_id", "title", "artist", "album", "duration", "track", "artist_id", "album_id"};\n        String sortOrder = MediaStore.Audio.Media.TITLE + " ASC";\n\n        Cursor cursor = cr.query(uri, projection, selection + "=?", selectionArgs, sortOrder);\n\n        if (cursor != null && cursor.getCount() > 0) {\n            Song song = getSongForCursor(cursor);\n            cursor.close();\n            return song;\n        }\n        else return new Song();\n    }\n\n    public static ArrayList<Song> getAllSongs(Context context) {\n        return getSongsForCursor(makeSongCursor(context, null, null));\n    }\n\n    public static long[] getSongListInFolder(Context context, String path) {\n        String[] whereArgs = new String[]{path + "%"};\n        return getSongListForCursor(makeSongCursor(context, MediaStore.Audio.Media.DATA + " LIKE ?", whereArgs, null));\n    }\n\n    public static Song getSongForID(Context context, long id) {\n        return getSongForCursor(makeSongCursor(context, "_id=" + String.valueOf(id), null));\n    }\n\n    public static List<Song> searchSongs(Context context, String searchString, int limit) {\n        ArrayList<Song> result = getSongsForCursor(makeSongCursor(context, "title LIKE ?", new String[]{searchString + "%"}));\n        if (result.size() < limit) {\n            result.addAll(getSongsForCursor(makeSongCursor(context, "title LIKE ?", new String[]{"%_" + searchString + "%"})));\n        }\n        return result.size() < limit ? result : result.subList(0, limit);\n    }\n\n\n    public static Cursor makeSongCursor(Context context, String selection, String[] paramArrayOfString) {\n        final String songSortOrder = PreferencesUtility.getInstance(context).getSongSortOrder();\n        return makeSongCursor(context, selection, paramArrayOfString, songSortOrder);\n    }\n\n    private static Cursor makeSongCursor(Context context, String selection, String[] paramArrayOfString, String sortOrder) {\n        String selectionStatement = "is_music=1 AND title != \'\'";\n\n        if (!TextUtils.isEmpty(selection)) {\n            selectionStatement = selectionStatement + " AND " + selection;\n        }\n        return context.getContentResolver().query(MediaStore.Audio.Media.EXTERNAL_CONTENT_URI, new String[]{"_id", "title", "artist", "album", "duration", "track", "artist_id", "album_id"}, selectionStatement, paramArrayOfString, sortOrder);\n\n    }\n\n    public static Song songFromFile(String filePath) {\n        MediaMetadataRetriever mmr = new MediaMetadataRetriever();\n        mmr.setDataSource(filePath);\n        return new Song(\n                -1,\n                -1,\n                -1,\n                mmr.extractMetadata(MediaMetadataRetriever.METADATA_KEY_TITLE),\n                mmr.extractMetadata(MediaMetadataRetriever.METADATA_KEY_ARTIST),\n                mmr.extractMetadata(MediaMetadataRetriever.METADATA_KEY_ALBUM),\n                Integer.parseInt(mmr.extractMetadata(MediaMetadataRetriever.METADATA_KEY_DURATION)),\n                0\n        );\n    }\n\n}\n'