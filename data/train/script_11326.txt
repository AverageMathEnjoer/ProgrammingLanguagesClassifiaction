b'package com.zzg.mybatis.generator.util;\n\nimport com.alibaba.fastjson.JSON;\nimport com.zzg.mybatis.generator.model.DatabaseConfig;\nimport com.zzg.mybatis.generator.model.DbType;\nimport com.zzg.mybatis.generator.model.GeneratorConfig;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URL;\nimport java.net.URLDecoder;\nimport java.nio.charset.Charset;\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * XML based config file help class\n * <p>\n * Created by Owen on 6/16/16.\n */\npublic class ConfigHelper {\n\n\tprivate static final Logger _LOG = LoggerFactory.getLogger(ConfigHelper.class);\n\tprivate static final String BASE_DIR = "config";\n\tprivate static final String CONFIG_FILE = "/sqlite3.db";\n\n\tpublic static void createEmptyFiles() throws Exception {\n\t\tFile file = new File(BASE_DIR);\n\t\tif (!file.exists()) {\n\t\t\tfile.mkdir();\n\t\t}\n\t\tFile uiConfigFile = new File(BASE_DIR + CONFIG_FILE);\n\t\tif (!uiConfigFile.exists()) {\n\t\t\tcreateEmptyXMLFile(uiConfigFile);\n\t\t}\n\t}\n\n\tstatic void createEmptyXMLFile(File uiConfigFile) throws IOException {\n\t\tInputStream fis = null;\n\t\tFileOutputStream fos = null;\n\t\ttry {\n\t\t\tfis = Thread.currentThread().getContextClassLoader().getResourceAsStream("sqlite3.db");\n\t\t\tfos = new FileOutputStream(uiConfigFile);\n\t\t\tbyte[] buffer = new byte[1024];\n\t\t\tint byteread = 0;\n\t\t\twhile ((byteread = fis.read(buffer)) != -1) {\n\t\t\t\tfos.write(buffer, 0, byteread);\n\t\t\t}\n\t\t} finally {\n\t\t\tif (fis != null) fis.close();\n\t\t\tif (fos != null) fos.close();\n\t\t}\n\n\t}\n\n\tpublic static List<DatabaseConfig> loadDatabaseConfig() throws Exception {\n\t\tConnection conn = null;\n\t\tStatement stat = null;\n\t\tResultSet rs = null;\n\t\ttry {\n\t\t\tconn = ConnectionManager.getConnection();\n\t\t\tstat = conn.createStatement();\n\t\t\trs = stat.executeQuery("SELECT * FROM dbs");\n\t\t\tList<DatabaseConfig> configs = new ArrayList<>();\n\t\t\twhile (rs.next()) {\n\t\t\t\tint id = rs.getInt("id");\n\t\t\t\tString value = rs.getString("value");\n\t\t\t\tDatabaseConfig databaseConfig = JSON.parseObject(value, DatabaseConfig.class);\n\t\t\t\tdatabaseConfig.setId(id);\n\t\t\t\tconfigs.add(databaseConfig);\n\t\t\t}\n\n\t\t\treturn configs;\n\t\t} finally {\n\t\t\tif (rs != null) rs.close();\n\t\t\tif (stat != null) stat.close();\n\t\t\tif (conn != null) conn.close();\n\t\t}\n\t}\n\n\tpublic static void saveDatabaseConfig(boolean isUpdate, Integer primaryKey, DatabaseConfig dbConfig) throws Exception {\n\t\tString configName = dbConfig.getName();\n\t\tConnection conn = null;\n\t\tStatement stat = null;\n\t\tResultSet rs = null;\n\t\ttry {\n\t\t\tconn = ConnectionManager.getConnection();\n\t\t\tstat = conn.createStatement();\n\t\t\tif (!isUpdate) {\n\t\t\t\tResultSet rs1 = stat.executeQuery("SELECT * from dbs where name = \'" + configName + "\'");\n\t\t\t\tif (rs1.next()) {\n\t\t\t\t\tthrow new RuntimeException("\xe9\x85\x8d\xe7\xbd\xae\xe5\xb7\xb2\xe7\xbb\x8f\xe5\xad\x98\xe5\x9c\xa8, \xe8\xaf\xb7\xe4\xbd\xbf\xe7\x94\xa8\xe5\x85\xb6\xe5\xae\x83\xe5\x90\x8d\xe5\xad\x97");\n\t\t\t\t}\n\t\t\t}\n\t\t\tString jsonStr = JSON.toJSONString(dbConfig);\n\t\t\tString sql;\n\t\t\tif (isUpdate) {\n\t\t\t\tsql = String.format("UPDATE dbs SET name = \'%s\', value = \'%s\' where id = %d", configName, jsonStr, primaryKey);\n\t\t\t} else {\n\t\t\t\tsql = String.format("INSERT INTO dbs (name, value) values(\'%s\', \'%s\')", configName, jsonStr);\n\t\t\t}\n\t\t\tstat.executeUpdate(sql);\n\t\t} finally {\n\t\t\tif (rs != null) rs.close();\n\t\t\tif (stat != null) stat.close();\n\t\t\tif (conn != null) conn.close();\n\t\t}\n\t}\n\n\tpublic static void deleteDatabaseConfig(DatabaseConfig databaseConfig) throws Exception {\n\t\tConnection conn = null;\n\t\tStatement stat = null;\n\t\tResultSet rs = null;\n\t\ttry {\n\t\t\tconn = ConnectionManager.getConnection();\n\t\t\tstat = conn.createStatement();\n\t\t\tString sql = String.format("delete from dbs where id=%d", databaseConfig.getId());\n\t\t\tstat.executeUpdate(sql);\n\t\t} finally {\n\t\t\tif (rs != null) rs.close();\n\t\t\tif (stat != null) stat.close();\n\t\t\tif (conn != null) conn.close();\n\t\t}\n\t}\n\n\tpublic static void saveGeneratorConfig(GeneratorConfig generatorConfig) throws Exception {\n\t\tConnection conn = null;\n\t\tStatement stat = null;\n\t\tResultSet rs = null;\n\t\ttry {\n\t\t\tconn = ConnectionManager.getConnection();\n\t\t\tstat = conn.createStatement();\n\t\t\tString jsonStr = JSON.toJSONString(generatorConfig);\n\t\t\tString sql = String.format("INSERT INTO generator_config values(\'%s\', \'%s\')", generatorConfig.getName(),\n\t\t\t\t\tjsonStr);\n\t\t\tstat.executeUpdate(sql);\n\t\t} finally {\n\t\t\tif (rs != null) rs.close();\n\t\t\tif (stat != null) stat.close();\n\t\t\tif (conn != null) conn.close();\n\t\t}\n\t}\n\n\tpublic static GeneratorConfig loadGeneratorConfig(String name) throws Exception {\n\t\tConnection conn = null;\n\t\tStatement stat = null;\n\t\tResultSet rs = null;\n\t\ttry {\n\t\t\tconn = ConnectionManager.getConnection();\n\t\t\tstat = conn.createStatement();\n\t\t\tString sql = String.format("SELECT * FROM generator_config where name=\'%s\'", name);\n\t\t\t_LOG.info("sql: {}", sql);\n\t\t\trs = stat.executeQuery(sql);\n\t\t\tGeneratorConfig generatorConfig = null;\n\t\t\tif (rs.next()) {\n\t\t\t\tString value = rs.getString("value");\n\t\t\t\tgeneratorConfig = JSON.parseObject(value, GeneratorConfig.class);\n\t\t\t}\n\t\t\treturn generatorConfig;\n\t\t} finally {\n\t\t\tif (rs != null) rs.close();\n\t\t\tif (stat != null) stat.close();\n\t\t\tif (conn != null) conn.close();\n\t\t}\n\t}\n\n\tpublic static List<GeneratorConfig> loadGeneratorConfigs() throws Exception {\n\t\tConnection conn = null;\n\t\tStatement stat = null;\n\t\tResultSet rs = null;\n\t\ttry {\n\t\t\tconn = ConnectionManager.getConnection();\n\t\t\tstat = conn.createStatement();\n\t\t\tString sql = String.format("SELECT * FROM generator_config");\n\t\t\t_LOG.info("sql: {}", sql);\n\t\t\trs = stat.executeQuery(sql);\n\t\t\tList<GeneratorConfig> configs = new ArrayList<>();\n\t\t\twhile (rs.next()) {\n\t\t\t\tString value = rs.getString("value");\n\t\t\t\tconfigs.add(JSON.parseObject(value, GeneratorConfig.class));\n\t\t\t}\n\t\t\treturn configs;\n\t\t} finally {\n\t\t\tif (rs != null) rs.close();\n\t\t\tif (stat != null) stat.close();\n\t\t\tif (conn != null) conn.close();\n\t\t}\n\t}\n\n\tpublic static int deleteGeneratorConfig(String name) throws Exception {\n\t\tConnection conn = null;\n\t\tStatement stat = null;\n\t\ttry {\n\t\t\tconn = ConnectionManager.getConnection();\n\t\t\tstat = conn.createStatement();\n\t\t\tString sql = String.format("DELETE FROM generator_config where name=\'%s\'", name);\n\t\t\t_LOG.info("sql: {}", sql);\n\t\t\treturn stat.executeUpdate(sql);\n\t\t} finally {\n\t\t\tif (stat != null) stat.close();\n\t\t\tif (conn != null) conn.close();\n\t\t}\n\t}\n\n\tpublic static String findConnectorLibPath(String dbType) {\n\t\tDbType type = DbType.valueOf(dbType);\n\t\tURL resource = Thread.currentThread().getContextClassLoader().getResource("logback.xml");\n\t\t_LOG.info("jar resource: {}", resource);\n\t\tif (resource != null) {\n\t\t\ttry {\n\t\t\t\tFile file = new File(resource.toURI().getRawPath() + "/../lib/" + type.getConnectorJarFile());\n\t\t\t\treturn URLDecoder.decode(file.getCanonicalPath(), Charset.forName("UTF-8").displayName());\n\t\t\t} catch (Exception e) {\n\t\t\t\tthrow new RuntimeException("\xe6\x89\xbe\xe4\xb8\x8d\xe5\x88\xb0\xe9\xa9\xb1\xe5\x8a\xa8\xe6\x96\x87\xe4\xbb\xb6\xef\xbc\x8c\xe8\xaf\xb7\xe8\x81\x94\xe7\xb3\xbb\xe5\xbc\x80\xe5\x8f\x91\xe8\x80\x85");\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new RuntimeException("lib can\'t find");\n\t\t}\n\t}\n\n\tpublic static List<String> getAllJDBCDriverJarPaths() {\n\t\tList<String> jarFilePathList = new ArrayList<>();\n\t\tURL url = Thread.currentThread().getContextClassLoader().getResource("logback.xml");\n\t\ttry {\n\t\t\tFile file;\n\t\t\tif (url.getPath().contains(".jar")) {\n\t\t\t\tfile = new File("lib/");\n\t\t\t} else {\n\t\t\t\tfile = new File("src/main/resources/lib");\n\t\t\t}\n\t\t\t_LOG.info("jar lib path: {}", file.getCanonicalPath());\n\t\t\tFile[] jarFiles = file.listFiles();\n\t\t\tif (jarFiles != null && jarFiles.length > 0) {\n\t\t\t\tfor (File jarFile : jarFiles) {\n\t\t\t\t\t_LOG.info("jar file: {}", jarFile.getAbsolutePath());\n\t\t\t\t\tif (jarFile.isFile() && jarFile.getAbsolutePath().endsWith(".jar")) {\n\t\t\t\t\t\tjarFilePathList.add(jarFile.getAbsolutePath());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tthrow new RuntimeException("\xe6\x89\xbe\xe4\xb8\x8d\xe5\x88\xb0\xe9\xa9\xb1\xe5\x8a\xa8\xe6\x96\x87\xe4\xbb\xb6\xef\xbc\x8c\xe8\xaf\xb7\xe8\x81\x94\xe7\xb3\xbb\xe5\xbc\x80\xe5\x8f\x91\xe8\x80\x85");\n\t\t}\n\t\treturn jarFilePathList;\n\t}\n\n\n}\n'