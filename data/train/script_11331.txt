b'// Copyright (c) 2022-2023 Manuel Schneider\n\n#include "albert/util/history.h"\n#include "albert/logging.h"\n#include <QFile>\n#include <QTextStream>\nusing namespace albert;\n\nHistory::History(const QString& p) : file_path(p)\n{\n    QFile f(file_path);\n    if (f.open(QIODevice::ReadOnly)){\n        QTextStream ts(&f);\n        while (!ts.atEnd())\n            lines_ << ts.readLine();\n        f.close();\n    } else\n        WARN << "Opening history file failed:" << file_path;\n    resetIterator();\n}\n\nHistory::~History()\n{\n    QFile f(file_path);\n    if (f.open(QIODevice::WriteOnly)){\n        QTextStream ts(&f);\n        for (const auto &line : lines_)\n            ts << line << Qt::endl;\n        f.close();\n    } else\n        WARN << "Opening history file failed:" << file_path;\n}\n\nvoid History::add(const QString& str)\n{\n    if (!str.isEmpty()){\n        if (lines_.contains(str))\n            lines_.removeAll(str); // Remove dups\n        lines_ << str;\n    }\n    resetIterator();\n}\n\nQString History::next(const QString &substring)\n{\n    for (int l = currentLine_ - 1; 0 <= l; --l)\n        if (lines_[l].contains(substring, Qt::CaseInsensitive))\n            return lines_[currentLine_ = l];\n    return QString{};\n}\n\nQString History::prev(const QString &substring)\n{\n    for (int l = currentLine_ + 1; l < (int)lines_.size(); ++l)\n        if (lines_[l].contains(substring, Qt::CaseInsensitive))\n            return lines_[currentLine_ = l];\n    return QString{};\n}\n\nvoid History::resetIterator()\n{\n    currentLine_ = (int)lines_.size();\n}\n'