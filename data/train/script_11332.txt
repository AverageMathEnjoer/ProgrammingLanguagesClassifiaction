b'class Solution {\n    vector<int> nums;\n    set<int> s; // what all indices are there in recursion stack\n    \n    bool isPossible(int cur) { // can we reach a zero from cur index\n        if (s.find(cur) != s.end()) {\n            return false; // we detected a cycle / deadlock\n        }\n        if(0 <= cur && cur < nums.size()) {\n            if(nums[cur] == 0) return true;\n            s.insert(cur);\n            bool ans = false;\n            if (isPossible(cur + nums[cur])) ans = true;\n            else if (isPossible(cur - nums[cur])) ans = true;\n            s.erase(cur);\n            return ans;\n        }\n        return false;\n    }\npublic:\n    bool canReach(vector<int>& arr, int start) {\n        //dp[i] <-- is it possible to reach a zero from i\n        nums = arr;\n        return isPossible(start);\n    }\n};\n'