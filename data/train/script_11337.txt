b'{-# LANGUAGE FlexibleInstances #-}\n\nmodule Graphics.Hoodle.Render.Type.Hoodle where\n\nimport Control.Lens (view)\nimport Data.Foldable (toList)\nimport Data.Hoodle.BBox (BBox)\nimport Data.Hoodle.Generic\n  ( GHoodle,\n    GLayer (..),\n    GPage,\n    gbackground,\n    gdimension,\n    gembeddedpdf,\n    gembeddedtext,\n    ghoodleID,\n    gitems,\n    glayers,\n    gpages,\n    grevisions,\n    gtitle,\n    pdfBase64,\n  )\nimport Data.Hoodle.Simple (Hoodle (..), Layer (..), Page (..))\nimport Data.Hoodle.Zipper (ZipperSelect)\nimport qualified Data.IntMap as IM\nimport Graphics.Hoodle.Render.Type.Background (RBackground, rbkg2Bkg)\nimport Graphics.Hoodle.Render.Type.Item (RItem, rItem2Item)\nimport Graphics.Hoodle.Render.Type.Renderer (SurfaceID)\n\n----------------------------\n-- normal state rendering --\n----------------------------\n\nnewtype LyBuf = LyBuf {unLyBuf :: SurfaceID}\n\n-- | normal rendering data structure for layer, R for rendering\n--   buffer is Surface, container for item = list\n--   and StrokeBBox as contained items\ntype RLayer = GLayer LyBuf [] RItem\n\n-- | normal rendering data structure for page\n--   background is RBackground and container for layer is IntMap\n--   and layer is RLayer\ntype RPage = GPage RBackground ZipperSelect RLayer\n\n-- | normal rendering data struture for hoodle\n--   container for page is IntMap\n--   page is RPage\ntype RHoodle = GHoodle IM.IntMap RPage\n\ninstance Show RHoodle where\n  show _ = "RHoodle"\n\nemptyRLayer :: SurfaceID -> RLayer\nemptyRLayer sfcid = GLayer (LyBuf sfcid) []\n\n-------\n-- get simple hoodle data structure\n-------\n\n-- | project to simple Layer out of RLayer\nrLayer2Layer :: RLayer -> Layer\nrLayer2Layer = Layer <$> fmap rItem2Item . view gitems\n\n-- | project to simple Page out of RPage\nrPage2Page :: RPage -> Page\nrPage2Page =\n  Page <$> view gdimension\n    <*> rbkg2Bkg . view gbackground\n    <*> fmap rLayer2Layer . toList . view glayers\n\n-- | project to simple Hoodle out of RHoodle\nrHoodle2Hoodle :: RHoodle -> Hoodle\nrHoodle2Hoodle =\n  Hoodle <$> view ghoodleID\n    <*> view gtitle\n    <*> view grevisions\n    <*> fmap pdfBase64 . view gembeddedpdf\n    <*> view gembeddedtext\n    <*> IM.elems . fmap rPage2Page . view gpages\n\n----------------------\n----- Rendering\n----------------------\n\n-- |\nnewtype InBBox a = InBBox {unInBBox :: a}\n\n-- |\nnewtype InBBoxOption = InBBoxOption (Maybe BBox)\n\n-- |\nnewtype InBBoxBkgBuf a = InBBoxBkgBuf {unInBBoxBkgBuf :: a}\n'