b'--\n-- Created to practise generating pseudo-random numbers in my head\n-- according to the Marsaglia algorithm[1].\n--\n-- [1]: https://groups.google.com/forum/#!msg/sci.math/6BIYd0cafQo/Ucipn_5T_TMJ\n--\n-- Copyright (c) 2016, Chris\n-- \n-- Permission to use, copy, modify, and/or distribute this software\n-- for any purpose with or without fee is hereby granted, provided\n-- that the above copyright notice and this permission notice appear\n-- in all copies.\n--\n-- THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL\n-- WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED \n-- WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE\n-- AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL\n-- DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA\n-- OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER\n-- TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR \n-- PERFORMANCE OF THIS SOFTWARE.\n--\n\n\n{-# LANGUAGE OverloadedStrings, NoImplicitPrelude #-}\nimport Protolude\nimport Prelude (getLine, String)\nimport System.Random (randomRIO)\nimport System.IO (hFlush, stdout)\n\n\nmain = do\n    (tens, ones) <- (,) <$> randomRIO (1,9) <*> randomRIO (1,9)\n    printf "The seed is %d. Let\'s go!\\n" (tens*10 + ones)\n    printf "Keep entering numbers from the sequence:\\n"\n    takeGuess tens ones\n\n\ntakeGuess :: Int -> Int -> IO ()\ntakeGuess tens ones = do\n    guess <- readMaybe <$> getLine\n    if guess == Just ones then\n        let next = tens + 6 * ones in\n            takeGuess (div next 10) (mod next 10)\n    else\n        printf "---- FAIL ----\\n"\n\n\n{-\n -\n - SIMPLE TIMES TABLE PLUS ADD TRAINER BELOW\n -\n -\ndata QA = QA { question :: String, answer :: Int }\n\nquestions (factor:term:rest) = QA\n    { question = printf "6\xc3\x97%d + %d = " factor term\n    , answer = 6*factor + term\n    } : questions rest\n\n\nmain = do\n    numbers <- randomRs (1,9) <$> getStdGen\n    forM_ (questions numbers) $ \\qa -> do\n        putStr (question qa)\n        guess <- readMaybe <$> getLine\n        when (guess /= Just (answer qa)) $\n            putStrLn ("---- FAIL ----" :: Text)\n -\n -\n -\n -}\n'