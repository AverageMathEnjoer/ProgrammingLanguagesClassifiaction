b'/*\n * Copyright (C) 2015 Naman Dwivedi\n *\n * Licensed under the GNU General Public License v3\n *\n * This is free software: you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n */\n\npackage com.naman14.timber.utils;\n\nimport android.content.Context;\nimport android.graphics.Bitmap;\nimport android.graphics.BitmapFactory;\nimport android.graphics.drawable.BitmapDrawable;\nimport android.graphics.drawable.Drawable;\nimport android.renderscript.Allocation;\nimport android.renderscript.Element;\nimport android.renderscript.RenderScript;\nimport android.renderscript.ScriptIntrinsicBlur;\nimport android.view.View;\nimport android.widget.ImageView;\n\nimport com.naman14.timber.R;\nimport com.naman14.timber.dataloaders.AlbumLoader;\nimport com.naman14.timber.lastfmapi.LastFmClient;\nimport com.naman14.timber.lastfmapi.callbacks.AlbumInfoListener;\nimport com.naman14.timber.lastfmapi.models.AlbumQuery;\nimport com.naman14.timber.lastfmapi.models.LastfmAlbum;\nimport com.naman14.timber.models.Album;\nimport com.nostra13.universalimageloader.core.DisplayImageOptions;\nimport com.nostra13.universalimageloader.core.ImageLoader;\nimport com.nostra13.universalimageloader.core.assist.FailReason;\nimport com.nostra13.universalimageloader.core.listener.ImageLoadingListener;\nimport com.nostra13.universalimageloader.core.listener.SimpleImageLoadingListener;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\n\npublic class ImageUtils {\n    private static final DisplayImageOptions lastfmDisplayImageOptions =\n                                                new DisplayImageOptions.Builder()\n                                                        .cacheInMemory(true)\n                                                        .cacheOnDisk(true)\n                                                        .showImageOnFail(R.drawable.ic_empty_music2)\n                                                        .build();\n\n    private static final DisplayImageOptions diskDisplayImageOptions =\n                                                new DisplayImageOptions.Builder()\n                                                        .cacheInMemory(true)\n                                                        .build();\n\n    public static void loadAlbumArtIntoView(final long albumId, final ImageView view) {\n        loadAlbumArtIntoView(albumId, view, new SimpleImageLoadingListener());\n    }\n\n    public static void loadAlbumArtIntoView(final long albumId, final ImageView view,\n                                            final ImageLoadingListener listener) {\n        if (PreferencesUtility.getInstance(view.getContext()).alwaysLoadAlbumImagesFromLastfm()) {\n            loadAlbumArtFromLastfm(albumId, view, listener);\n        } else {\n            loadAlbumArtFromDiskWithLastfmFallback(albumId, view, listener);\n        }\n    }\n\n    private static void loadAlbumArtFromDiskWithLastfmFallback(final long albumId, ImageView view,\n                                                               final ImageLoadingListener listener) {\n        ImageLoader.getInstance()\n                .displayImage(TimberUtils.getAlbumArtUri(albumId).toString(),\n                              view,\n                              diskDisplayImageOptions,\n                              new SimpleImageLoadingListener() {\n                                  @Override\n                                  public void onLoadingFailed(String imageUri, View view,\n                                                              FailReason failReason) {\n                                      loadAlbumArtFromLastfm(albumId, (ImageView) view, listener);\n                                      listener.onLoadingFailed(imageUri, view, failReason);\n                                  }\n\n                                  @Override\n                                  public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {\n                                      listener.onLoadingComplete(imageUri, view, loadedImage);\n                                  }\n                              });\n    }\n\n    private static void loadAlbumArtFromLastfm(long albumId, final ImageView albumArt, final ImageLoadingListener listener) {\n        Album album = AlbumLoader.getAlbum(albumArt.getContext(), albumId);\n        LastFmClient.getInstance(albumArt.getContext())\n                .getAlbumInfo(new AlbumQuery(album.title, album.artistName),\n                              new AlbumInfoListener() {\n                                  @Override\n                                  public void albumInfoSuccess(final LastfmAlbum album) {\n                                      if (album != null) {\n                                          ImageLoader.getInstance()\n                                                  .displayImage(album.mArtwork.get(4).mUrl,\n                                                                albumArt,\n                                                                lastfmDisplayImageOptions, new SimpleImageLoadingListener(){\n                                                              @Override\n                                                              public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {\n                                                                  listener.onLoadingComplete(imageUri, view, loadedImage);\n                                                              }\n\n                                                              @Override\n                                                              public void onLoadingFailed(String imageUri, View view, FailReason failReason) {\n                                                                  listener.onLoadingFailed(imageUri, view, failReason);\n                                                              }\n                                                          });\n                                      }\n                                  }\n\n                                  @Override\n                                  public void albumInfoFailed() { }\n                              });\n    }\n\n    public static Drawable createBlurredImageFromBitmap(Bitmap bitmap, Context context, int inSampleSize) {\n\n        RenderScript rs = RenderScript.create(context);\n        final BitmapFactory.Options options = new BitmapFactory.Options();\n        options.inSampleSize = inSampleSize;\n\n        ByteArrayOutputStream stream = new ByteArrayOutputStream();\n        bitmap.compress(Bitmap.CompressFormat.JPEG, 100, stream);\n        byte[] imageInByte = stream.toByteArray();\n        ByteArrayInputStream bis = new ByteArrayInputStream(imageInByte);\n        Bitmap blurTemplate = BitmapFactory.decodeStream(bis, null, options);\n\n        final Allocation input = Allocation.createFromBitmap(rs, blurTemplate);\n        final Allocation output = Allocation.createTyped(rs, input.getType());\n        final ScriptIntrinsicBlur script = ScriptIntrinsicBlur.create(rs, Element.U8_4(rs));\n        script.setRadius(8f);\n        script.setInput(input);\n        script.forEach(output);\n        output.copyTo(blurTemplate);\n\n        return new BitmapDrawable(context.getResources(), blurTemplate);\n    }\n}\n'