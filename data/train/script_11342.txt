b"\n-- | Utils relayted to pdf objects\n\nmodule Pdf.Core.Object.Util\n( intValue\n, int64Value\n, boolValue\n, realValue\n, nameValue\n, stringValue\n, arrayValue\n, streamValue\n, refValue\n, dictValue\n)\nwhere\n\nimport Pdf.Core.Object\n\nimport Data.ByteString (ByteString)\nimport Data.Scientific (Scientific)\nimport qualified Data.Scientific as Scientific\nimport Data.Int (Int64)\n\n-- | Try to convert object to 'Int'\n--\n-- Floating value doesn't automatically get converted\nintValue :: Object -> Maybe Int\nintValue (Number n)\n  = either (const Nothing) Just\n  . floatingOrInteger\n  $ n\nintValue _ = Nothing\n\n-- | Specialized to prevent defaulting warning\nfloatingOrInteger :: Scientific -> Either Double Int\nfloatingOrInteger = Scientific.floatingOrInteger\n\n-- | Try to convert object to 'Int64'.\n--\n-- This is for cases, where according to the specs values above 2^29\n-- (Int) have to be expected.\nint64Value :: Object -> Maybe Int64\nint64Value (Number n) = Scientific.toBoundedInteger n\nint64Value _ = Nothing\n\n-- | Try to convert object to 'Bool'\nboolValue :: Object -> Maybe Bool\nboolValue (Bool b) = Just b\nboolValue _ = Nothing\n\n-- | Try to convert object to 'Double'\n--\n-- Integral value automatically gets converted\nrealValue :: Object -> Maybe Double\nrealValue (Number n)\n  = either Just (Just . fromIntegral)\n  . floatingOrInteger\n  $ n\nrealValue _ = Nothing\n\n-- | Try to convert object to 'Name'\nnameValue :: Object -> Maybe Name\nnameValue (Name n) = Just n\nnameValue _ = Nothing\n\n-- | Try to convert object to 'ByteString'\nstringValue :: Object -> Maybe ByteString\nstringValue (String s) = Just s\nstringValue _ = Nothing\n\n-- | Try to convert object to array\narrayValue :: Object -> Maybe Array\narrayValue (Array arr) = Just arr\narrayValue _ = Nothing\n\n-- | Try to convert object to stream\nstreamValue :: Object -> Maybe Stream\nstreamValue (Stream s) = Just s\nstreamValue _ = Nothing\n\n-- | Try to convert object to reference\nrefValue :: Object -> Maybe Ref\nrefValue (Ref ref) = Just ref\nrefValue _ = Nothing\n\n-- | Try to convert object to dictionary\ndictValue :: Object -> Maybe Dict\ndictValue (Dict d) = Just d\ndictValue _ = Nothing\n"