b'@file:Suppress("DEPRECATION")\n\npackage icu.nullptr.twifucker.ui\n\nimport android.app.Activity\nimport android.app.AlertDialog\nimport android.content.Context\nimport android.content.Intent\nimport android.content.SharedPreferences\nimport android.database.sqlite.SQLiteDatabase\nimport android.net.Uri\nimport android.os.Bundle\nimport android.preference.Preference\nimport android.preference.PreferenceFragment\nimport android.preference.PreferenceGroup\nimport android.preference.SwitchPreference\nimport androidx.documentfile.provider.DocumentFile\nimport com.github.kyuubiran.ezxhelper.AndroidLogger\nimport com.github.kyuubiran.ezxhelper.EzXHelper.addModuleAssetPath\nimport com.github.kyuubiran.ezxhelper.Log\nimport com.github.kyuubiran.ezxhelper.misc.Utils.restartHostApp\nimport icu.nullptr.twifucker.*\nimport icu.nullptr.twifucker.hook.DrawerNavbarHook.bottomNavbarItems\nimport icu.nullptr.twifucker.hook.DrawerNavbarHook.drawerItems\nimport icu.nullptr.twifucker.hook.HookEntry.Companion.isLogcatProcessInitialized\nimport icu.nullptr.twifucker.hook.HookEntry.Companion.logcatProcess\n\nclass SettingsDialog(context: Context) : AlertDialog.Builder(context) {\n\n    companion object {\n        private lateinit var outDialog: AlertDialog\n        private lateinit var prefs: SharedPreferences\n\n        const val PREFS_NAME = "twifucker"\n\n        const val REQUEST_EXPORT_LOG = 1001\n        const val REQUEST_EXPORT_JSON_LOG = 1002\n        const val REQUEST_SET_DOWNLOAD_DIRECTORY = 1003\n\n        const val PREF_DISABLE_PROMOTED_CONTENT = "disable_promoted_content"\n        const val PREF_HIDE_DRAWER_ITEMS = "hide_drawer_items"\n        const val PREF_HIDE_BOTTOM_NAVBAR_ITEMS = "hide_bottom_navbar_items"\n        const val PREF_ENABLE_LOG = "enable_log"\n        const val PREF_EXPORT_LOG = "export_log"\n        const val PREF_EXPORT_JSON_LOG = "export_json_log"\n        const val PREF_CLEAR_LOG = "clear_log"\n        const val PREF_DELETE_DATABASES = "delete_databases"\n        const val PREF_ABOUT = "about"\n\n        const val PREF_DOWNLOAD_DIRECTORY = "download_directory"\n        const val PREF_HIDDEN_DRAWER_ITEMS = "hidden_drawer_items"\n        const val PREF_HIDDEN_BOTTOM_NAVBAR_ITEMS = "hidden_bottom_navbar_items"\n        const val PREF_FEATURE_SWITCH = "feature_switch"\n        const val PREF_VERSION = "version"\n    }\n\n    private fun deleteFromDatabase() {\n        val disablePromotedContent = modulePrefs.getBoolean(PREF_DISABLE_PROMOTED_CONTENT, true)\n        if (!disablePromotedContent) return\n        val re = Regex("""^\\d+-\\d+(-versioncode-\\d+)?.db$""")\n        var count = 0\n        context.databaseList().forEach { db ->\n            if (re.matches(db)) {\n                val database = SQLiteDatabase.openDatabase(\n                    context.getDatabasePath(db).absolutePath, null, SQLiteDatabase.OPEN_READWRITE\n                )\n                count += database.delete(\n                    "timeline", "entity_id LIKE ?", arrayOf("promotedTweet-%")\n                )\n                database.close()\n            }\n        }\n        if (count > 0) {\n            AndroidLogger.toast(context.getString(R.string.deleted_n_promoted_tweet, count))\n        }\n    }\n\n    class PrefsFragment : PreferenceFragment(), Preference.OnPreferenceChangeListener,\n        Preference.OnPreferenceClickListener {\n        @Deprecated("Deprecated in Java")\n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            addPreferencesFromResource(R.xml.settings_dialog)\n\n            for (i in 0 until preferenceScreen.preferenceCount) {\n                val p = preferenceScreen.getPreference(i)\n                if (p is SwitchPreference) {\n                    if (modulePrefs.containsKey(p.key)) {\n                        p.isChecked = modulePrefs.getBoolean(p.key, false)\n                    }\n                    p.onPreferenceChangeListener = this\n                } else if (p is Preference) {\n                    p.onPreferenceClickListener = this\n                }\n                if (p is PreferenceGroup) {\n                    for (j in 0 until p.preferenceCount) {\n                        val p2 = p.getPreference(j)\n                        if (p2 is SwitchPreference) {\n                            if (modulePrefs.containsKey(p2.key)) {\n                                p2.isChecked = modulePrefs.getBoolean(p2.key, false)\n                            }\n                            p2.onPreferenceChangeListener = this\n                        } else if (p2 is Preference) {\n                            p2.onPreferenceClickListener = this\n                        }\n                    }\n                }\n            }\n\n            refreshDownloadDirectory()\n\n            findPreference(PREF_VERSION).summary =\n                "${BuildConfig.VERSION_NAME} (${BuildConfig.VERSION_CODE})"\n\n            if (BuildConfig.DEBUG) {\n                findPreference(PREF_DELETE_DATABASES).isEnabled = true\n            }\n        }\n\n        private fun refreshDownloadDirectory() {\n            val downloadDirectory = modulePrefs.getString(\n                PREF_DOWNLOAD_DIRECTORY, null\n            )\n            if (downloadDirectory == null) {\n                findPreference(PREF_DOWNLOAD_DIRECTORY).summary = ""\n                return\n            }\n            Uri.parse(\n                downloadDirectory\n            )?.let { uri1 ->\n                DocumentFile.fromTreeUri(\n                    context, uri1\n                )?.uri?.let { uri2 ->\n                    findPreference(PREF_DOWNLOAD_DIRECTORY).summary = uri2.path?.split(":")?.last()\n                }\n            }\n        }\n\n        @Deprecated("Deprecated in Java")\n        override fun onPreferenceChange(p0: Preference?, p1: Any?): Boolean {\n            if (p0 is SwitchPreference) {\n                modulePrefs.putBoolean(p0.key, p1 as Boolean)\n                if (p0.key == PREF_ENABLE_LOG) {\n                    if (!p1) {\n                        clearLog()\n                    }\n                }\n            }\n            return true\n        }\n\n        @Deprecated("Deprecated in Java")\n        override fun onPreferenceClick(p0: Preference?): Boolean {\n            when (p0?.key) {\n                PREF_HIDE_DRAWER_ITEMS -> {\n                    onCustomizeHiddenDrawerItems()\n                }\n\n                PREF_HIDE_BOTTOM_NAVBAR_ITEMS -> {\n                    onCustomizeHiddenBottomNavbarItems()\n                }\n\n                PREF_EXPORT_LOG -> {\n                    exportLog(REQUEST_EXPORT_LOG, logFile.name)\n                }\n\n                PREF_EXPORT_JSON_LOG -> {\n                    exportLog(REQUEST_EXPORT_JSON_LOG, logJsonFile.name)\n                }\n\n                PREF_CLEAR_LOG -> {\n                    clearLog()\n                }\n\n                PREF_DELETE_DATABASES -> {\n                    deleteDatabases()\n                }\n\n                PREF_ABOUT -> {\n                    activity.startActivity(\n                        Intent(\n                            Intent.ACTION_VIEW, Uri.parse("https://github.com/Dr-TSNG/TwiFucker")\n                        )\n                    )\n                }\n\n                PREF_FEATURE_SWITCH -> {\n                    FeatureSwitchDialog(context)\n                }\n\n                PREF_DOWNLOAD_DIRECTORY -> {\n                    val intent = Intent(Intent.ACTION_OPEN_DOCUMENT_TREE)\n                    startActivityForResult(intent, REQUEST_SET_DOWNLOAD_DIRECTORY)\n                }\n            }\n            return true\n        }\n\n        @Deprecated("Deprecated in Java")\n        override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n            when (requestCode) {\n                REQUEST_EXPORT_LOG, REQUEST_EXPORT_JSON_LOG -> {\n                    if (resultCode != Activity.RESULT_OK) return\n                    data?.data?.let { uri ->\n                        context.contentResolver.openOutputStream(uri)?.use { out ->\n                            when (requestCode) {\n                                REQUEST_EXPORT_LOG -> {\n                                    logFile.inputStream().use { input ->\n                                        input.copyTo(out)\n                                    }\n                                }\n\n                                REQUEST_EXPORT_JSON_LOG -> {\n                                    logJsonFile.inputStream().use { input ->\n                                        input.copyTo(out)\n                                    }\n                                }\n\n                                else -> {}\n                            }\n                        }\n                    }\n                }\n\n                REQUEST_SET_DOWNLOAD_DIRECTORY -> {\n                    if (resultCode != Activity.RESULT_OK) {\n                        modulePrefs.remove(PREF_DOWNLOAD_DIRECTORY)\n                        refreshDownloadDirectory()\n                        return\n                    }\n                    data?.data?.let { uri ->\n                        context.contentResolver.takePersistableUriPermission(\n                            uri,\n                            Intent.FLAG_GRANT_READ_URI_PERMISSION or Intent.FLAG_GRANT_WRITE_URI_PERMISSION\n                        )\n                        modulePrefs.putString(PREF_DOWNLOAD_DIRECTORY, uri.toString())\n                    }\n                    refreshDownloadDirectory()\n                }\n\n                else -> {\n                    super.onActivityResult(requestCode, resultCode, data)\n                }\n            }\n        }\n\n        private fun deleteDatabases() {\n            val re = Regex("""^\\d+-\\d+(-versioncode-\\d+)?.db$""")\n            var count = 0\n            context.databaseList().forEach { db ->\n                if (re.matches(db)) {\n                    context.deleteDatabase(db)\n                    count++\n                }\n            }\n            if (count > 0) {\n                AndroidLogger.toast(context.getString(R.string.deleted_n_database, count))\n            }\n        }\n\n        private fun exportLog(logType: Int, fileName: String) {\n            when (logType) {\n                REQUEST_EXPORT_LOG -> {\n                    if (!logFile.exists()) return\n                }\n\n                REQUEST_EXPORT_JSON_LOG -> {\n                    if (!logJsonFile.exists()) return\n                }\n\n                else -> {\n                    return\n                }\n            }\n            val intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\n                type = "text/plain"\n                addCategory(Intent.CATEGORY_OPENABLE)\n                putExtra(Intent.EXTRA_TITLE, fileName)\n            }\n            try {\n                startActivityForResult(intent, logType)\n            } catch (t: Throwable) {\n                Log.e(t)\n            }\n        }\n\n        private fun clearLog() {\n            try {\n                if (isLogcatProcessInitialized()) {\n                    logcatProcess.destroy()\n                }\n                logFileDir.deleteRecursively()\n                logFileDir.delete()\n            } catch (t: Throwable) {\n                Log.e(t)\n            }\n        }\n\n        private fun onCustomizeHiddenDrawerItems() {\n            AlertDialog.Builder(activity).apply {\n                val items = drawerItems\n                val ids = items.map { it.key }.toTypedArray()\n                setTitle(R.string.hide_drawer_items)\n                setPositiveButton(R.string.save) { _, _ ->\n                    val hideItems = mutableSetOf<String>()\n                    items.forEach {\n                        if (it.showing.not()) {\n                            hideItems.add(it.key)\n                        }\n                    }\n                    modulePrefs.putStringSet(PREF_HIDDEN_DRAWER_ITEMS, hideItems)\n                }\n                setNeutralButton(R.string.reset) { _, _ ->\n                    modulePrefs.remove(PREF_HIDDEN_DRAWER_ITEMS)\n                }\n                setNegativeButton(R.string.settings_dismiss, null)\n                val showings = BooleanArray(items.size) { i ->\n                    !items[i].showing\n                }\n                setMultiChoiceItems(ids, showings) { _, which, isChecked ->\n                    items[which].showing = !isChecked\n                }\n            }.show()\n        }\n\n        private fun onCustomizeHiddenBottomNavbarItems() {\n            AlertDialog.Builder(activity).apply {\n                val items = bottomNavbarItems\n                val ids = items.map { it.key }.toTypedArray()\n                setTitle(R.string.hide_bottom_navbar_items)\n                setPositiveButton(R.string.save) { _, _ ->\n                    val hideItems = mutableSetOf<String>()\n                    items.forEach {\n                        if (it.showing.not()) {\n                            hideItems.add(it.key)\n                        }\n                    }\n                    modulePrefs.putStringSet(PREF_HIDDEN_BOTTOM_NAVBAR_ITEMS, hideItems)\n\n                }\n                setNeutralButton(R.string.reset) { _, _ ->\n                    modulePrefs.remove(PREF_HIDDEN_BOTTOM_NAVBAR_ITEMS)\n                }\n                setNegativeButton(R.string.settings_dismiss, null)\n                val showings = BooleanArray(items.size) { i ->\n                    !items[i].showing\n                }\n                setMultiChoiceItems(ids, showings) { _, which, isChecked ->\n                    items[which].showing = !isChecked\n                }\n            }.show()\n        }\n    }\n\n    init {\n        addModuleAssetPath(context)\n\n        val act = context as Activity\n\n        outDialog = run {\n            val prefsFragment = PrefsFragment()\n            act.fragmentManager.beginTransaction().add(prefsFragment, "settings").commit()\n            act.fragmentManager.executePendingTransactions()\n\n            prefsFragment.onActivityCreated(null)\n\n            setView(prefsFragment.view)\n\n            setTitle(context.getString(R.string.twifucker_settings))\n            setPositiveButton(context.getString(R.string.save_restart)) { _, _ ->\n                deleteFromDatabase()\n                restartHostApp(act)\n            }\n            setNegativeButton(context.getString(R.string.settings_dismiss), null)\n            setCancelable(false)\n            show()\n        }\n    }\n}\n'