b'/**\n * Copyright (C) 2020 Fernando Cejas Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.fernandocejas.sample.features.movies\n\nimport com.fernandocejas.sample.AndroidTest\nimport com.fernandocejas.sample.core.functional.Either.Right\nimport io.mockk.coEvery\nimport io.mockk.impl.annotations.MockK\nimport kotlinx.coroutines.runBlocking\nimport org.amshove.kluent.shouldEqualTo\nimport org.junit.Before\nimport org.junit.Test\n\nclass MoviesViewModelTest : AndroidTest() {\n\n    private lateinit var moviesViewModel: MoviesViewModel\n\n    @MockK private lateinit var getMovies: GetMovies\n\n    @Before\n    fun setUp() {\n        moviesViewModel = MoviesViewModel(getMovies)\n    }\n\n    @Test fun `loading movies should update live data`() {\n        val moviesList = listOf(Movie(0, "IronMan"), Movie(1, "Batman"))\n        coEvery { getMovies.run(any()) } returns Right(moviesList)\n\n        moviesViewModel.movies.observeForever {\n            it!!.size shouldEqualTo 2\n            it[0].id shouldEqualTo 0\n            it[0].poster shouldEqualTo "IronMan"\n            it[1].id shouldEqualTo 1\n            it[1].poster shouldEqualTo "Batman"\n        }\n\n        runBlocking { moviesViewModel.loadMovies() }\n    }\n}'