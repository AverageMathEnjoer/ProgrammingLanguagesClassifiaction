b'#include "stdafx.h"\n#include "resource.h"\n#include "SelectClassDbDialog.h"\n#include "Win32AppContext.h"\n#include "FileDialog.h"\n#include "../libStringConverter/convert.h"\n#include <WindowsX.h>\n\ntypedef std::unique_ptr<ClassDatabaseFile, void(*)(ClassDatabaseFile*)> ClassDatabaseFile_ptr;\nstatic void ClassDatabaseDeleter_Dummy(ClassDatabaseFile*) {}\nstatic void ClassDatabaseDeleter_delete(ClassDatabaseFile *pFile)\n{\n\tdelete pFile;\n}\n\nSelectClassDbDialog::SelectClassDbDialog(HINSTANCE hInstance, HWND hParentWnd, ClassDatabasePackage &classPackage)\n\t: hInstance(hInstance), hParentWnd(hParentWnd), hDialog(NULL),\n\t\tdialogReason_DbNotFound(true),\n\t\tpClassDatabaseResult(nullptr, ClassDatabaseDeleter_Dummy), rememberForVersion(true), rememberForAll(false), \n\t\tdoneParentMessage(0), classPackage(classPackage)\n{}\n\nINT_PTR CALLBACK SelectClassDbDialog::DlgProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)\n{\n\tINT_PTR ret = (INT_PTR)FALSE;\n\tSelectClassDbDialog *pThis = (SelectClassDbDialog*)(GetWindowLongPtr(hDlg, GWLP_USERDATA));\n\tswitch (message)\n\t{\n\t\tcase WM_INITDIALOG:\n\t\t\t{\n\t\t\t\tSetWindowLongPtr(hDlg, GWLP_USERDATA, lParam);\n\t\t\t\tpThis = (SelectClassDbDialog*)lParam;\n\n\t\t\t\tpThis->hDialog = hDlg;\n\t\t\t\tpThis->pClassDatabaseResult.reset();\n\t\t\t\t\n\t\t\t\tconst char *engineVersion = pThis->version.c_str();\n\t\t\t\tstd::string descText;\n\t\t\t\tif (pThis->dialogReason_DbNotFound)\n\t\t\t\t\tdescText = "No type database matches the player version ";\n\t\t\t\telse\n\t\t\t\t\tdescText = "The selected file has player version ";\n\t\t\t\tdescText += engineVersion;\n\t\t\t\tdescText += ".";\n\t\t\t\tsize_t _len;\n\t\t\t\tTCHAR *descTextT = _MultiByteToTCHAR(descText.c_str(), _len);\n\t\t\t\tStatic_SetText(GetDlgItem(hDlg, IDC_DESCLABEL), descTextT);\n\t\t\t\t_FreeTCHAR(descTextT);\n\n\t\t\t\tTCHAR *fileNameT = _MultiByteToTCHAR(pThis->fileName.c_str(), _len);\n\t\t\t\tStatic_SetText(GetDlgItem(hDlg, IDC_FILELABEL), fileNameT);\n\t\t\t\t_FreeTCHAR(fileNameT);\n\n\t\t\t\tHWND hDatabaseList = GetDlgItem(hDlg, IDC_DBLIST);\n\t\t\t\tfor (DWORD i = 0; i < pThis->classPackage.header.fileCount; i++)\n\t\t\t\t{\n\t\t\t\t\tchar *databaseName = pThis->classPackage.header.files[i].name; size_t _len;\n\t\t\t\t\tTCHAR *databaseNameT = _MultiByteToTCHAR(databaseName, _len);\n\t\t\t\t\tListBox_AddString(hDatabaseList, databaseNameT);\n\t\t\t\t\t_FreeTCHAR(databaseNameT);\n\t\t\t\t}\n\n\t\t\t\tif (pThis->rememberForAll)\n\t\t\t\t\tpThis->rememberForVersion = true;\n\t\t\t\tButton_SetCheck(GetDlgItem(hDlg, IDC_CKREMEMBERVERSION), pThis->rememberForVersion ? BST_CHECKED : BST_UNCHECKED);\n\t\t\t\tEnableWindow(GetDlgItem(hDlg, IDC_CKREMEMBERVERSION), pThis->rememberForAll ? FALSE : TRUE);\n\t\t\t\tButton_SetCheck(GetDlgItem(hDlg, IDC_CKREMEMBERALL), pThis->rememberForAll ? BST_CHECKED : BST_UNCHECKED);\n\t\t\t}\n\t\t\treturn (INT_PTR)TRUE;\n\t\tcase WM_APP+0:\n\t\t\t{\n\t\t\t\tif (!pThis)\n\t\t\t\t\tbreak;\n\t\t\t\tSetWindowLongPtr(hDlg, GWLP_USERDATA, 0);\n\t\t\t\tif (pThis->doneParentMessage != 0 && pThis->hParentWnd != NULL)\n\t\t\t\t\tPostMessageW(pThis->hParentWnd, pThis->doneParentMessage, reinterpret_cast<WPARAM>(pThis), 0);\n\t\t\t}\n\t\t\tEndDialog(hDlg, 1);\n\t\t\treturn (INT_PTR)TRUE;\n\t\tcase WM_COMMAND:\n\t\t\tswitch (LOWORD(wParam))\n\t\t\t{\n\t\t\t\tcase IDC_CKREMEMBERALL:\n\t\t\t\t{\n\t\t\t\t\tbool isChecked = (Button_GetCheck((HWND)lParam) == BST_CHECKED);\n\t\t\t\t\tif (isChecked)\n\t\t\t\t\t\tButton_SetCheck(GetDlgItem(hDlg, IDC_CKREMEMBERVERSION), BST_CHECKED);\n\t\t\t\t\tEnableWindow(GetDlgItem(hDlg, IDC_CKREMEMBERVERSION), isChecked ? FALSE : TRUE);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t\tcase IDC_BTNLOAD:\n\t\t\t\t{\n\t\t\t\t\tHWND hLoadPathEdit = GetDlgItem(hDlg, IDC_ELOADPATH);\n\t\t\t\t\tstd::unique_ptr<TCHAR[]> loadPathBuf;\n\t\t\t\t\tint loadPathLen = Edit_GetTextLength(hLoadPathEdit);\n\t\t\t\t\tif (loadPathLen > 0 && loadPathLen < INT_MAX)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::unique_ptr<TCHAR[]> loadPathBuf(new TCHAR[loadPathLen + 1]);\n\t\t\t\t\t\tint actualLen = Edit_GetText(hLoadPathEdit, loadPathBuf.get(), loadPathLen + 1);\n\t\t\t\t\t\tloadPathBuf[loadPathLen] = 0;\n\t\t\t\t\t\tloadPathLen = actualLen;\n\t\t\t\t\t}\n\n\t\t\t\t\twchar_t *filePath;\n\t\t\t\t\tHRESULT hr = ShowFileOpenDialog(hDlg, &filePath, L"*.dat|.dat files", nullptr, loadPathBuf.get(),\n\t\t\t\t\t\tL"Select a class database file",\n\t\t\t\t\t\tUABE_FILEDIALOG_CLDB_GUID);\n\t\t\t\t\tif (SUCCEEDED(hr))\n\t\t\t\t\t{\n\t\t\t\t\t\tSetWindowTextW(hLoadPathEdit, filePath);\n\t\t\t\t\t\tFreeCOMFilePathBuf(&filePath);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t\tcase IDOK:\n\t\t\t\t{\n\t\t\t\t\tif (!pThis)\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tHWND hLoadPathEdit = GetDlgItem(hDlg, IDC_ELOADPATH);\n\t\t\t\t\tstd::unique_ptr<TCHAR[]> loadPathBuf;\n\t\t\t\t\tint loadPathLen = Edit_GetTextLength(hLoadPathEdit);\n\t\t\t\t\tif (loadPathLen > 0 && loadPathLen < INT_MAX)\n\t\t\t\t\t{\n\t\t\t\t\t\tloadPathBuf.reset(new TCHAR[loadPathLen + 1]);\n\t\t\t\t\t\tint actualLen = Edit_GetText(hLoadPathEdit, loadPathBuf.get(), loadPathLen + 1);\n\t\t\t\t\t\tloadPathBuf[loadPathLen] = 0;\n\t\t\t\t\t\tloadPathLen = actualLen;\n\t\t\t\t\t}\n\t\t\t\t\tif (loadPathLen > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tIAssetsReader_ptr pDatabaseReader(Create_AssetsReaderFromFile(loadPathBuf.get(), true, RWOpenFlags_Immediately), Free_AssetsReader);\n\t\t\t\t\t\tif (pDatabaseReader != nullptr)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpThis->pClassDatabaseResult = ClassDatabaseFile_ptr(new ClassDatabaseFile(), ClassDatabaseDeleter_delete);\n\t\t\t\t\t\t\tif (!pThis->pClassDatabaseResult->Read(pDatabaseReader.get()))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpThis->pClassDatabaseResult.reset();\n\t\t\t\t\t\t\t\tMessageBoxA(hDlg, "Unable to read or deserialize the given class database file!", "UABE", 16);\n\t\t\t\t\t\t\t\tret = (INT_PTR)TRUE;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tMessageBoxA(hDlg, "Unable to open the given class database file!", "UABE", 16);\n\t\t\t\t\t\t\tret = (INT_PTR)TRUE;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tHWND hVersionList = GetDlgItem(hDlg, IDC_DBLIST);\n\t\t\t\t\t\tint selection = ListBox_GetCurSel(hVersionList);\n\t\t\t\t\t\tif (selection >= 0 && (DWORD)selection < pThis->classPackage.header.fileCount)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tClassDatabaseFile *pSelectedDatabase = pThis->classPackage.files[selection];\n\t\t\t\t\t\t\tpThis->pClassDatabaseResult = ClassDatabaseFile_ptr(pSelectedDatabase, ClassDatabaseDeleter_Dummy);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcase IDCANCEL:\n\t\t\t\t{\n\t\t\t\t\tif (!pThis)\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tpThis->rememberForAll = (Button_GetCheck(GetDlgItem(hDlg, IDC_CKREMEMBERALL)) == BST_CHECKED);\n\t\t\t\t\tpThis->rememberForVersion = pThis->rememberForAll || (Button_GetCheck(GetDlgItem(hDlg, IDC_CKREMEMBERVERSION)) == BST_CHECKED);\n\t\t\t\t\t\n\t\t\t\t\tSetWindowLongPtr(hDlg, GWLP_USERDATA, 0);\n\n\t\t\t\t\tif (pThis->doneParentMessage != 0 && pThis->hParentWnd != NULL)\n\t\t\t\t\t\tPostMessageW(pThis->hParentWnd, pThis->doneParentMessage, reinterpret_cast<WPARAM>(pThis), 0);\n\t\t\t\t}\n\t\t\t\tEndDialog(hDlg, 1);\n\t\t\t\treturn (INT_PTR)TRUE;\n\t\t\t}\n\t\t\tbreak;\n\t}\n\treturn ret;\n}\n\nbool SelectClassDbDialog::ShowModal()\n{\n\tthis->doneParentMessage = 0;\n\tif (DialogBoxParam(hInstance, MAKEINTRESOURCE(IDD_SELECTTYPEDB), hParentWnd, DlgProc, (LPARAM)this) != 1)\n\t\treturn false;\n\treturn true;\n}\n\nHWND SelectClassDbDialog::ShowModeless(UINT doneParentMessage)\n{\n\tthis->doneParentMessage = doneParentMessage;\n\tthis->hDialog = CreateDialogParam(hInstance, MAKEINTRESOURCE(IDD_SELECTTYPEDB), hParentWnd, DlgProc, (LPARAM)this);\n\treturn hDialog;\n}\n\nvoid SelectClassDbDialog::ForceCancel(bool rememberForVersion, bool rememberForAll)\n{\n\tthis->rememberForVersion = rememberForVersion;\n\tthis->rememberForAll = rememberForAll;\n\tthis->pClassDatabaseResult.reset();\n\tPostMessage(this->hDialog, WM_APP+0, 0, 0);\n}\n'