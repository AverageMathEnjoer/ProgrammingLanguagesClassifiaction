b'\xef\xbb\xbfusing Asn1;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Net;\nusing System.Security.Cryptography.X509Certificates;\n\nnamespace Rubeus\n{\n    //AS-REQ          ::= [APPLICATION 10] KDC-REQ\n\n    //KDC-REQ         ::= SEQUENCE {\n    //    -- NOTE: first tag is [1], not [0]\n    //    pvno            [1] INTEGER (5) ,\n    //    msg-type        [2] INTEGER (10 -- AS),\n    //    padata          [3] SEQUENCE OF PA-DATA OPTIONAL\n    //                        -- NOTE: not empty --,\n    //    req-body        [4] KDC-REQ-BODY\n    //}\n    \n    public class AS_REQ\n    {\n        public static AS_REQ NewASReq(string userName, string domain, Interop.KERB_ETYPE etype, bool opsec = false)\n        {\n            // build a new AS-REQ for the given userName, domain, and etype, but no PA-ENC-TIMESTAMP\n            //  used for AS-REP-roasting\n\n            AS_REQ req = new AS_REQ(opsec);\n\n            // set the username to roast\n            req.req_body.cname.name_string.Add(userName);\n\n            // the realm (domain) the user exists in\n            req.req_body.realm = domain;\n\n            // KRB_NT_SRV_INST = 2\n            //      service and other unique instance (krbtgt)\n            req.req_body.sname.name_type = Interop.PRINCIPAL_TYPE.NT_SRV_INST;\n            req.req_body.sname.name_string.Add("krbtgt");\n            req.req_body.sname.name_string.Add(domain);\n\n            // try to build a realistic request\n            if (opsec)\n            {\n                string hostName = Dns.GetHostName();\n                List<HostAddress> addresses = new List<HostAddress>();\n                addresses.Add(new HostAddress(hostName));\n                req.req_body.addresses = addresses;\n                req.req_body.kdcOptions = req.req_body.kdcOptions | Interop.KdcOptions.CANONICALIZE;\n                req.req_body.etypes.Add(Interop.KERB_ETYPE.aes256_cts_hmac_sha1);\n                req.req_body.etypes.Add(Interop.KERB_ETYPE.aes128_cts_hmac_sha1);\n                req.req_body.etypes.Add(Interop.KERB_ETYPE.rc4_hmac);\n                req.req_body.etypes.Add(Interop.KERB_ETYPE.rc4_hmac_exp);\n                req.req_body.etypes.Add(Interop.KERB_ETYPE.old_exp);\n                req.req_body.etypes.Add(Interop.KERB_ETYPE.des_cbc_md5);\n\n            }\n            else\n            {\n                // add in our encryption type\n                req.req_body.etypes.Add(etype);\n            }\n\n            return req;\n        }\n\n        public static AS_REQ NewASReq(string userName, string domain, string keyString, Interop.KERB_ETYPE etype, bool opsec = false, bool changepw = false, bool pac = true)\n        {\n            // build a new AS-REQ for the given userName, domain, and etype, w/ PA-ENC-TIMESTAMP\n            //  used for "legit" AS-REQs w/ pre-auth\n\n            // set pre-auth\n            AS_REQ req = new AS_REQ(keyString, etype, opsec, pac);\n            \n            // req.padata.Add()\n\n            // set the username to request a TGT for\n            req.req_body.cname.name_string.Add(userName);\n\n            // the realm (domain) the user exists in\n            req.req_body.realm = domain;\n\n            // KRB_NT_SRV_INST = 2\n            //      service and other unique instance (krbtgt)\n            req.req_body.sname.name_type = Interop.PRINCIPAL_TYPE.NT_SRV_INST;\n\n            if (!changepw) {\n                req.req_body.sname.name_string.Add("krbtgt");\n                req.req_body.sname.name_string.Add(domain);\n            } else {\n                req.req_body.sname.name_string.Add("kadmin");\n                req.req_body.sname.name_string.Add("changepw");\n            }\n\n            // try to build a realistic request\n            if (opsec)\n            {\n                string hostName = Dns.GetHostName();\n                List<HostAddress> addresses = new List<HostAddress>();\n                addresses.Add(new HostAddress(hostName));\n                req.req_body.addresses = addresses;\n                req.req_body.kdcOptions = req.req_body.kdcOptions | Interop.KdcOptions.CANONICALIZE;\n                req.req_body.etypes.Add(Interop.KERB_ETYPE.aes256_cts_hmac_sha1);\n                req.req_body.etypes.Add(Interop.KERB_ETYPE.aes128_cts_hmac_sha1);\n                req.req_body.etypes.Add(Interop.KERB_ETYPE.rc4_hmac);\n                req.req_body.etypes.Add(Interop.KERB_ETYPE.rc4_hmac_exp);\n                req.req_body.etypes.Add(Interop.KERB_ETYPE.old_exp);\n                req.req_body.etypes.Add(Interop.KERB_ETYPE.des_cbc_md5);\n            }\n            else\n            {\n                // add in our encryption type\n                req.req_body.etypes.Add(etype);\n            }\n\n            return req; \n        }\n\n        //TODO: Insert DHKeyPair parameter also.\n        public static AS_REQ NewASReq(string userName, string domain, X509Certificate2 cert, KDCKeyAgreement agreement, Interop.KERB_ETYPE etype, bool verifyCerts = false) {\n\n            // build a new AS-REQ for the given userName, domain, and etype, w/ PA-ENC-TIMESTAMP\n            //  used for "legit" AS-REQs w/ pre-auth\n\n            // set pre-auth\n            AS_REQ req = new AS_REQ(cert, agreement, verifyCerts);\n\n            // req.padata.Add()\n\n            // set the username to request a TGT for\n            req.req_body.cname.name_string.Add(userName);\n\n            // the realm (domain) the user exists in\n            req.req_body.realm = domain;\n\n            // KRB_NT_SRV_INST = 2\n            //      service and other unique instance (krbtgt)\n            req.req_body.sname.name_type = Interop.PRINCIPAL_TYPE.NT_SRV_INST;\n            req.req_body.sname.name_string.Add("krbtgt");\n            req.req_body.sname.name_string.Add(domain);\n\n            // add in our encryption type\n            req.req_body.etypes.Add(etype);\n\n            return req;\n        }\n\n        public AS_REQ(bool opsec = false)\n        {\n            // default, for creation\n            pvno = 5;\n            msg_type = (long)Interop.KERB_MESSAGE_TYPE.AS_REQ;\n\n            padata = new List<PA_DATA>();\n            padata.Add(new PA_DATA());\n\n            req_body = new KDCReqBody(true, opsec);\n        }\n\n        public AS_REQ(string keyString, Interop.KERB_ETYPE etype, bool opsec = false, bool pac = true)\n        {\n            // default, for creation\n            pvno = 5;\n            msg_type = (long)Interop.KERB_MESSAGE_TYPE.AS_REQ;\n\n            padata = new List<PA_DATA>();\n            \n            // add the encrypted timestamp\n            padata.Add(new PA_DATA(keyString, etype));\n\n            // add the include-pac == true\n            padata.Add(new PA_DATA(pac));\n            \n            req_body = new KDCReqBody(true, opsec);\n\n            this.keyString = keyString;\n        }\n\n        public AS_REQ(X509Certificate2 pkCert, KDCKeyAgreement agreement, bool verifyCerts = false) {\n\n            // default, for creation\n            pvno = 5;\n            msg_type = 10;\n\n            padata = new List<PA_DATA>();\n\n            req_body = new KDCReqBody();\n\n            // add the include-pac == true\n            padata.Add(new PA_DATA());\n\n            // add the encrypted timestamp\n            padata.Add(new PA_DATA(pkCert, agreement,  req_body, verifyCerts));           \n        }\n\n        public AS_REQ(byte[] data)\n        {\n            // decode the supplied bytes to an AsnElt object\n            data = AsnIO.FindBER(data);\n            AsnElt asn_AS_REQ = AsnElt.Decode(data);\n            padata = new List<PA_DATA>();\n\n            // AS-REQ::= [APPLICATION 10] KDC-REQ\n            //  tag class == 1\n            //  tag class == 10\n            //  SEQUENCE\n            if (asn_AS_REQ.TagValue != (int)Interop.KERB_MESSAGE_TYPE.AS_REQ)\n            {\n                throw new System.Exception("AS-REQ tag value should be 10");\n            }\n\n            if ((asn_AS_REQ.Sub.Length != 1) || (asn_AS_REQ.Sub[0].TagValue != 16))\n            {\n                throw new System.Exception("First AS-REQ sub should be a sequence");\n            }\n\n            // extract the KDC-REP out\n            AsnElt[] kdc_req = asn_AS_REQ.Sub[0].Sub;\n\n            foreach (AsnElt s in kdc_req)\n            {\n                switch (s.TagValue)\n                {\n                    case 1:\n                        pvno = s.Sub[0].GetInteger();\n                        break;\n                    case 2:\n                        msg_type = s.Sub[0].GetInteger();\n                        break;\n                    case 3:\n                        // sequence of pa-data\n                        foreach(AsnElt pa in s.Sub[0].Sub)\n                        {\n                            padata.Add(new PA_DATA(pa));\n                        }\n                        break;\n                    case 4:\n                        // KDC-REQ-BODY\n                        req_body = new KDCReqBody(s.Sub[0]);\n                        break;\n                    default:\n                        throw new System.Exception(String.Format("Invalid tag AS-REQ value : {0}", s.TagValue));\n                }\n            }\n        }\n\n        public AsnElt Encode()\n        {\n            // pvno            [1] INTEGER (5)\n            AsnElt pvnoAsn = AsnElt.MakeInteger(pvno);\n            AsnElt pvnoSeq = AsnElt.Make(AsnElt.SEQUENCE, new[] { pvnoAsn });\n            pvnoSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 1, pvnoSeq);\n\n\n            // msg-type        [2] INTEGER (10 -- AS -- )\n            AsnElt msg_type_ASN = AsnElt.MakeInteger(msg_type);\n            AsnElt msg_type_ASNSeq = AsnElt.Make(AsnElt.SEQUENCE, new[] { msg_type_ASN });\n            msg_type_ASNSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 2, msg_type_ASNSeq);\n\n            // padata          [3] SEQUENCE OF PA-DATA OPTIONAL\n            List<AsnElt> padatas = new List<AsnElt>();\n            foreach (PA_DATA pa in padata)\n            {\n                padatas.Add(pa.Encode());\n            }\n\n            // req-body        [4] KDC-REQ-BODY\n            AsnElt req_Body_ASN = req_body.Encode();\n            AsnElt req_Body_ASNSeq = AsnElt.Make(AsnElt.SEQUENCE, new[] { req_Body_ASN });\n            req_Body_ASNSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 4, req_Body_ASNSeq);\n\n            AsnElt padata_ASNSeq = AsnElt.Make(AsnElt.SEQUENCE, padatas.ToArray());\n            AsnElt padata_ASNSeq2 = AsnElt.Make(AsnElt.SEQUENCE, new[] { padata_ASNSeq });\n            padata_ASNSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 3, padata_ASNSeq2);\n\n            // encode it all into a sequence\n            AsnElt[] total = new[] { pvnoSeq, msg_type_ASNSeq, padata_ASNSeq, req_Body_ASNSeq };\n            AsnElt seq = AsnElt.Make(AsnElt.SEQUENCE, total);\n\n            // AS-REQ          ::= [APPLICATION 10] KDC-REQ\n            //  put it all together and tag it with 10\n            AsnElt totalSeq = AsnElt.Make(AsnElt.SEQUENCE, new[] { seq });\n            totalSeq = AsnElt.MakeImplicit(AsnElt.APPLICATION, 10, totalSeq);\n\n            return totalSeq;\n        }\n\n        public long pvno { get; set;}\n\n        public long msg_type { get; set; }\n\n        //public PAData[] padata { get; set; }\n        public List<PA_DATA> padata { get; set; }\n\n        public KDCReqBody req_body { get; set; }\n\n        //Ugly hack to make keyString available to \n        //the generic InnerTGT function\n        public string keyString { get; set; }\n    }\n}\n'