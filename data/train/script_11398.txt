b'import Data.Foldable\nimport Data.Traversable\nimport Data.SBV\nimport Data.Vec\n\ninstance EqSymbolic a => EqSymbolic (Vec a) where\n  u .== v = toList u .== toList v\n\nproblem :: Symbolic SBool\nproblem = do\n  a <- exists "a"\n  let o :: Vec SReal\n      o = Vec (-1) 0 0\n      v :: Vec SReal\n      v = Vec 2 1 1\n      z = o + pure a * v\n  return $ z \xe3\x83\xbb z .== 1\n\nproblem2 :: Symbolic SBool\nproblem2 = do\n  oy <- exists "oy"\n  let o :: Vec SReal\n      o = Vec 0 oy 0\n  v <- traverse exists (Vec "x" "y" "z")\n  constrain $ v \xe3\x83\xbb v .== 1\n  a <- exists "a"\n  b <- exists "b"\n\n  return $ (o + pure a * v .== Vec (-1) 0 0 &&& o + pure b * v .== Vec 1 2 0)\n\n\nmain :: IO ()\nmain = do\n  putStrLn "Problem 1:"\n  ret <- allSat $ problem\n  print ret\n  putStrLn "Problem 2:"\n  ret <- allSat $ problem2\n  print ret\n'