b'/*\n * Copyright 2013 - 2017 Mario Arias\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.funktionale.state\n\nimport org.funktionale.collections.prependTo\n\n/**\n * Created by IntelliJ IDEA.\n * @author Mario Arias\n * Date: 29/05/17\n * Time: 12:54 AM\n */\nclass State<S, out T>(val run: (S) -> Pair<S, T>) {\n\n\tfun <R> map(f: (T) -> R): State<S, R> = flatMap { t -> pure<S, R>(f(t)) }\n\n\tfun <P1, R> map(sx: State<S, P1>, f: (T, P1) -> R): State<S, R> = flatMap { t -> sx.map { x -> f(t, x) } }\n\n\tfun <R> flatMap(f: (T) -> State<S, R>): State<S, R> = State { s ->\n\t\tval (s1, t) = run(s)\n\t\tf(t).run(s1)\n\t}\n\n\n\tcompanion object {\n\t\tfun <S, T> pure(t: T): State<S, T> = State { s -> s to t }\n\n\t\tfun <S> get(): State<S, S> = State { s -> s to s }\n\n\t\tfun <S> set(s: S): State<S, Unit> = State { s to Unit }\n\n\t\tfun <S> modify(f: (S) -> S): State<S, Unit> = get<S>().flatMap { s: S -> set(f(s)).map { Unit } }\n\t}\n}\n\nfun <R, S, T> List<T>.stateTraverse(f: (T) -> State<S, R>): State<S, List<R>> {\n\treturn foldRight(State.pure(emptyList())) { i: T, accumulator: State<S, List<R>> ->\n\t\tf(i).map(accumulator) { head: R, tail: List<R> ->\n\t\t\thead prependTo tail\n\t\t}\n\t}\n}\n\nfun <S, T> List<State<S, T>>.stateSequential(): State<S, List<T>> = stateTraverse { it }'