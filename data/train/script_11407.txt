b'{-# LANGUAGE CPP #-}\n#include "containers.h"\n{-# OPTIONS_HADDOCK hide #-}\n\n-- | A clone of Control.Monad.State.Strict.\nmodule Utils.Containers.Internal.State where\n\nimport Control.Monad (ap, liftM2)\nimport Control.Applicative (liftA)\nimport Utils.Containers.Internal.Prelude\nimport Prelude ()\n\nnewtype State s a = State {runState :: s -> (s, a)}\n\ninstance Functor (State s) where\n    fmap = liftA\n\ninstance Monad (State s) where\n    {-# INLINE return #-}\n    {-# INLINE (>>=) #-}\n    return = pure\n    m >>= k = State $ \\ s -> case runState m s of\n        (s\', x) -> runState (k x) s\'\n\ninstance Applicative (State s) where\n    {-# INLINE pure #-}\n    pure x = State $ \\ s -> (s, x)\n    (<*>) = ap\n    m *> n = State $ \\s -> case runState m s of\n      (s\', _) -> runState n s\'\n#if MIN_VERSION_base(4,10,0)\n    liftA2 = liftM2\n#endif\n\nexecState :: State s a -> s -> a\nexecState m x = snd (runState m x)\n'