b'\xef\xbb\xbfusing YeelightAPI;\n\nnamespace RonSijm.ButtFish.Devices;\n\npublic class YeelightDevice : IDeviceAbstraction\n{\n    public override string ToString()\n    {\n        if (_selectedDevice == null)\n        {\n            return "Inner device null";\n        }\n\n        var displayName = _selectedDevice.Hostname;\n        var stateResult = _selectedDevice.Properties.TryGetValue("power", out var state);\n\n        if (stateResult)\n        {\n            if (state.ToString() == "on")\n            {\n                displayName += " - Light is On";\n            }\n        }\n\n        return displayName;\n    }\n\n    private readonly Device _selectedDevice;\n\n    public YeelightDevice(Device selectedDevice)\n    {\n        _selectedDevice = selectedDevice;\n    }\n\n    public async Task SendDuration(int time)\n    {\n        if (!_selectedDevice.IsConnected)\n        {\n            await _selectedDevice.Connect();\n        }\n\n        // Not sure how non-RGB devices behave when sending this command\n        // So putting it in a try/catch\n        try\n        {\n            if (time == TimeUnitConfig.DotTime)\n            {\n                await _selectedDevice.SetRGBColor(255, 0, 0);\n            }\n            else\n            {\n                await _selectedDevice.SetRGBColor(0, 255, 0);\n            }\n        }\n        catch (Exception)\n        {\n            // Do nothing\n        }\n\n        await _selectedDevice.SetBrightness(100, 1);\n        await Task.Delay(time);\n        await _selectedDevice.SetBrightness(1, 1);\n    }\n\n    public void Dispose()\n    {\n        _selectedDevice.Dispose();\n        GC.SuppressFinalize(this);\n    }\n}'