b'{-# LANGUAGE CPP                       #-}\n{-# LANGUAGE ExistentialQuantification #-}\nmodule Control.Monad.SamplingMonad where\n\nimport Control.Monad.TaggingMonad\nimport Data.Monoid\nimport Data.Maybe.Util\n\n#if MIN_VERSION_base(4,9,0)\nimport Data.Semigroup as Sem\n#endif\n\ntype SamplingMonad t a = TaggingMonad (NextSample t) a\n\ndata NextSample a = Ord a => NextSample { unNext :: Maybe a }\n\n#if MIN_VERSION_base(4,9,0)\ninstance Ord a => Semigroup (NextSample a) where\n  (NextSample x) <> (NextSample y) = NextSample $ mergeMaybe min x y\n#endif\n\ninstance Ord a => Monoid (NextSample a) where\n  mempty = NextSample Nothing\n\n#if !(MIN_VERSION_base(4,9,0))\n  mappend (NextSample x) (NextSample y) = NextSample $ mergeMaybe min x y\n#elif !(MIN_VERSION_base(4,11,0))\n  -- this is redundant starting with base-4.11 / GHC 8.4\n  -- if you want to avoid CPP, you can define `mappend = (<>)` unconditionally\n  mappend = (Sem.<>)\n#endif\n'