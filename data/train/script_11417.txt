b'#load "Domain.fs"\n#load "Operations.fs"\n\nopen Capstone3.Operations\nopen Capstone3.Domain\nopen System\n\n// Listing 19.2 (Listing 19.1 is below!)\nlet isValidCommand = (Set [ \'w\';\'d\';\'x\']).Contains\nlet isStopCommand = (=) \'x\'\nlet getAmount command =\n    if command = \'d\' then \'d\', 50M\n    elif command = \'w\' then \'w\', 25M\n    else command, 0M\nlet processCommand account (command, amount) =\n    if command = \'d\' then account |> deposit amount\n    else account |> withdraw amount\n\n// Listing 19.1\nlet openingAccount = { Owner = { Name = "Isaac" }; Balance = 0M; AccountId = Guid.Empty } \nlet account =\n    let commands = [ \'d\'; \'w\'; \'z\'; \'f\'; \'d\'; \'x\'; \'w\' ]\n\n    commands\n    |> Seq.filter isValidCommand\n    |> Seq.takeWhile (not << isStopCommand)\n    |> Seq.map getAmount\n    |> Seq.fold processCommand openingAccount\n\n// Listing 19.3\nlet commands = seq {\n    while true do\n        Console.Write "(d)eposit, (w)ithdraw or e(x)it: "\n        yield Console.ReadKey().KeyChar }\n\n\n#load "Auditing.fs"\n\nopen Capstone3.Auditing\n\n// Test out create account from transaction history\nlet transactions =\n    [ { Transaction.Accepted = false; Timestamp = DateTime.MinValue; Operation = "withdraw"; Amount = 10M }\n      { Transaction.Accepted = true; Timestamp = DateTime.MinValue.AddSeconds 10.; Operation = "withdraw"; Amount = 10M }\n      { Transaction.Accepted = true; Timestamp = DateTime.MinValue.AddSeconds 30.; Operation = "deposit"; Amount = 50M }\n      { Transaction.Accepted = true; Timestamp = DateTime.MinValue.AddSeconds 50.; Operation = "withdraw"; Amount = 10M } ]\n\ntransactions = (transactions |> List.map (Transactions.serialize >> Transactions.deserialize))\n\nlet accountId = Guid.Empty\nlet owner = "Isaac"\nlet loadedAccount = loadAccount(owner, accountId, transactions)'