b'#\' Get or Set Variable or Data Frame Labels\n#\'\n#\' Assigns a label to a vector or data frame, or returns value stored \n#\' in the object\'s \\code{label} attribute (or \\code{NA} if none exists).\n#\' \n#\' @aliases label label<-\n#\' @usage label(x, all = FALSE, fallback = FALSE, simplify = FALSE)\n#\' label(x) <- value\n#\' \n#\' @param x An R object to extract labels from.\n#\' @param all Logical. When x is a data frame, setting this argument to\n#\'   \\code{TRUE} will make the function return all variable labels. By default,\n#\'   its value is \\code{FALSE}, so that if x is a data frame, it is the data\n#\'   frame\'s label that will be returned.\n#\' @param fallback a logical value indicating if labels should fallback to\n#\'   object name(s). Defaults to \\code{FALSE}.\n#\' @param simplify When x is a data frame and \\code{all = TRUE}, coerce results\n#\'   to a vector and remove \\code{NA}\'s. Default is \\code{FALSE}.\n#\' @param value String to be used as label. To clear existing labels, use \\code{NA}\n#\'   or \\code{NULL}.\n#\' \n#\' @author\n#\' Dominic Comtois, \\email{dominic.comtois@@gmail.com},\n#\' @note Loosely based on Gergely Dar\xc3\xb3czi\'s \\code{\\link[rapportools]{label}} \n#\'   function.\n#\' @export\n#\' @importFrom utils tail\nlabel <- function(x, all = FALSE, fallback = FALSE, simplify = FALSE) {\n\n  if (missing(x))\n    stop("No variable / data frame provided.")\n\n  if (is.null(x))\n    stop("cannot extract label from NULL")\n\n  if (is.atomic(x)) {\n    lbl <- attr(x, which = "label", exact = TRUE)\n    if (is.null(lbl)) {\n      if (isTRUE(fallback)) {\n        lbl <- tail(as.character(substitute(x)), 1)\n      } else {\n        lbl <- NA_character_\n      }\n    }\n  } else {\n    if (!is.list(x)) {\n      x <- as.data.frame(x)\n    }\n    \n    if (isTRUE(all)) {\n      lbl <- lapply(x, attr, which = "label", exact = TRUE)\n      lbl[which(vapply(X = lbl, FUN = is.null, FUN.VALUE = logical(1)))] <- \n        NA_character_\n      \n      if (isTRUE(fallback)) {\n        lbl[which(is.na(lbl))] <- colnames(x)[which(is.na(lbl))]\n      }\n      if (isTRUE(simplify)) {\n        lbl <- as.character(lbl)\n      } else {\n        lbl <- lbl[which(!is.na(lbl))]\n      }\n    } else {\n      lbl <- attr(x, which = "label", exact = TRUE)\n      if (is.null(lbl)) {\n        if (isTRUE(fallback)) {\n          lbl <- tail(as.character(substitute(x)), 1)\n        } else {\n          lbl <- NA_character_\n        }\n      }\n    }\n  }\n  \n  return(lbl)\n}\n\n#\' @export\n"label<-" <- function(x, value) {\n\n  if (missing(x) || missing(value))\n    stop("Both x and value arguments must be provided")\n\n  if (is.null(value))\n    value <- NA\n  \n  if (is.data.frame(x)) {\n    if (length(value) > 1 && length(value) < ncol(x))\n      stop("Number of labels does not match number of columns in x")\n\n    if (length(value) == 1 && is.na(value)) {\n      attr(x, "label") <- NULL\n    } else if (length(value) == 1) {\n      attr(x, "label") <- value\n    } else if (length(value) == ncol(x)) {\n      for (i in seq_along(value)) {\n        attr(x[[i]], "label") <- value[i]\n      }\n    } else {\n      stop(paste("provide a single string to label the data frame, or a vector",\n                 "of characters having length = ncol(x)"))\n    }\n  } else if (is.atomic(x)) {\n    if (is.na(value)) {\n      attr(x, "label") <- NULL\n    } else if (length(value) > 1) {\n      stop("A variable label must be a character vector of length 1")\n    } else {\n      attr(x, "label") <- value\n    }\n  }\n  return(x)\n}\n\n#\' Clear Variable and Data Frame Label(s)\n#\'\n#\' Returns the object with all labels removed. Both the \\dQuote{label} attribute\n#\' and \\pkg{Hmisc}\'s \\dQuote{labelled} class are removed.\n#\'\n#\' @usage unlabel(x)\n#\' @param x An R object to remove labels from.\n#\' @seealso \\code{\\link{label}}\n#\' @author\n#\' Dominic Comtois, \\email{dominic.comtois@@gmail.com},\n#\' @export\nunlabel <- function(x) {\n  if (is.list(x)) {\n    for (i in seq_along(x)) {\n      class(x[[i]]) <- setdiff(class(x[[i]]), "labelled")\n    }\n    for (i in seq_along(x)) {\n      attr(x[[i]],"label") <- NULL\n    }\n  }\n  else {\n    class(x) <- setdiff(class(x), "labelled")\n    attr(x, "label") <- NULL\n  }\n  return(x)\n}\n'