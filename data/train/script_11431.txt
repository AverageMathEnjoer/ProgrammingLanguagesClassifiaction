b'\xef\xbb\xbfnamespace RonSijm.UCIEngineInterop.Core;\n\ninternal class UCIEngineProcess : IDisposable\n{\n    private ProcessStartInfo ProcessStartInfo { get; }\n    private Process Process { get; }\n\n    public UCIEngineProcess(string path)\n    {\n        ProcessStartInfo = new ProcessStartInfo\n        {\n            FileName = path,\n            UseShellExecute = false,\n            RedirectStandardError = true,\n            RedirectStandardInput = true,\n            RedirectStandardOutput = true\n        };\n\n        Process = new Process {StartInfo = ProcessStartInfo};\n    }\n        \n    public void Wait(int millisecond)\n    {\n        Process.WaitForExit(millisecond);\n    }\n\n    public void WriteLine(string command)\n    {\n        if (Process.StandardInput == null)\n        {\n            throw new NullReferenceException();\n        }\n        Process.StandardInput.WriteLine(command);\n        Process.StandardInput.Flush();\n    }\n\n    public string ReadLine()\n    {\n        if (Process.StandardOutput == null)\n        {\n            throw new NullReferenceException();\n        }\n        return Process.StandardOutput.ReadLine();\n    }\n\n    public void Start()\n    {\n        Process.Start();\n    }\n\n    ~UCIEngineProcess()\n    {\n        Dispose(false);\n    }\n\n    private void Dispose(bool disposing)\n    {\n        if (!disposing)\n        {\n            return;\n        }\n\n        Process?.Close();\n        Process?.Dispose();\n    }\n\n    public void Dispose()\n    {\n        Dispose(true);\n        GC.SuppressFinalize(this);\n    }\n}'