b"{-# LANGUAGE BangPatterns #-}\n{-# LANGUAGE GADTs #-}\n{-# LANGUAGE LambdaCase #-}\n\nmodule Hoodle.Web.Default\n  ( nextevent,\n    sysevent,\n  )\nwhere\n\nimport Control.Monad (when)\nimport Control.Monad.IO.Class (MonadIO (liftIO))\nimport Control.Monad.State (MonadState (get), modify')\nimport Control.Monad.Trans.Crtn (request)\nimport Control.Monad.Trans.Crtn.Object (Arg (..), Res (..))\nimport Data.Foldable (for_)\nimport Data.List (foldl')\nimport Hoodle.HitTest.Type (BBoxed (..))\nimport qualified Hoodle.Web.ForeignJS as J\nimport Hoodle.Web.Type.Coroutine\n  ( MainCoroutine,\n    MainOp (DoEvent),\n  )\nimport Hoodle.Web.Type.Event (AllEvent (..), SystemEvent (..), UserEvent (..))\nimport Hoodle.Web.Type.State\n  ( DocState (DocState),\n    RStroke (RStroke),\n    docstateData,\n    docstateLastCommit,\n    hdlstateDocState,\n    hdlstateOverlayCanvas,\n    hdlstateOverlayOffCanvas,\n    hdlstateOverlayUpdated,\n    hdlstateSVGBox,\n    hdlstateWebSocket,\n  )\nimport Hoodle.Web.Util (pathBBox, sendBinary, stringifyStrokeId)\nimport Lens.Micro ((.~), (^.))\nimport Message\n  ( C2SMsg (SyncRequest),\n    Commit (Add, Delete),\n    commitId,\n  )\n\n-- | Handling system events until a new user event arrives\nnextevent :: MainCoroutine UserEvent\nnextevent = do\n  Arg DoEvent ev <- request (Res DoEvent ())\n  case ev of\n    SysEv sev -> sysevent sev >> nextevent\n    UsrEv uev -> pure uev\n\n-- | Handling a system event\nsysevent :: SystemEvent -> MainCoroutine ()\nsysevent (ERegisterStroke s') = do\n  s <- get\n  let sock = s ^. hdlstateWebSocket\n      n = s ^. hdlstateDocState . docstateLastCommit\n  when (s' > n) $ liftIO $ sendBinary sock (SyncRequest (n, s'))\nsysevent (EDataStrokes commits) = do\n  s <- get\n  let svg = s ^. hdlstateSVGBox\n      offcvs = s ^. hdlstateOverlayOffCanvas\n      dat0 = s ^. hdlstateDocState . docstateData\n  liftIO $ do\n    J.js_clear_overlay offcvs\n    for_ commits $ \\case\n      Add i xys -> J.drawPath svg (stringifyStrokeId i) xys\n      Delete _ js -> for_ js (J.strokeRemove svg . stringifyStrokeId)\n  let maxId = maximum (map commitId commits)\n      dat' = foldl' f dat0 commits\n        where\n          f !acc (Add i xys) = acc ++ [BBoxed (RStroke i xys) (pathBBox xys)]\n          f !acc (Delete _ js) = filter (\\(BBoxed (RStroke j _) _) -> not (j `elem` js)) acc\n  modify' ((hdlstateDocState .~ DocState maxId dat') . (hdlstateOverlayUpdated .~ True))\nsysevent ERefresh = do\n  s <- get\n  let cvs = s ^. hdlstateOverlayCanvas\n      offcvs = s ^. hdlstateOverlayOffCanvas\n  when (s ^. hdlstateOverlayUpdated) $ do\n    liftIO $ J.js_refresh cvs offcvs\n    modify' (hdlstateOverlayUpdated .~ False)\n"