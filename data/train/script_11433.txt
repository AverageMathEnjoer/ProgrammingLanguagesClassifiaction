b'package droidninja.filepicker\n\nimport android.app.Activity\nimport android.content.Intent\nimport android.content.pm.PackageManager\nimport android.net.Uri\nimport android.os.Build\nimport android.os.Bundle\nimport androidx.annotation.DrawableRes\nimport androidx.fragment.app.Fragment\nimport androidx.core.content.ContextCompat\nimport android.widget.Toast\nimport androidx.annotation.IntegerRes\nimport droidninja.filepicker.models.FileType\nimport droidninja.filepicker.models.sort.SortingTypes\nimport java.util.ArrayList\n\n/**\n * Created by droidNinja on 29/07/16.\n */\nclass FilePickerBuilder {\n\n    private val mPickerOptionsBundle: Bundle = Bundle()\n\n    fun setImageSizeLimit(fileSize: Int): FilePickerBuilder {\n        PickerManager.imageFileSize = fileSize\n        return this\n    }\n\n    fun setVideoSizeLimit(fileSize: Int) : FilePickerBuilder{\n        PickerManager.videoFileSize = fileSize\n        return this\n    }\n\n    fun setMaxCount(maxCount: Int): FilePickerBuilder {\n        PickerManager.setMaxCount(maxCount)\n        return this\n    }\n\n    fun setActivityTheme(theme: Int): FilePickerBuilder {\n        PickerManager.theme = theme\n        return this\n    }\n\n    fun setActivityTitle(title: String): FilePickerBuilder {\n        PickerManager.title = title\n        return this\n    }\n\n    /**\n     * @param spanType it could be [FilePickerConst.SPAN_TYPE.FOLDER_SPAN] (for folder screen)\n     * or [FilePickerConst.SPAN_TYPE.DETAIL_SPAN] (for details screen)\n     * @param count span count in integer, defaults for Folder is 2 and Details is 3\n     */\n    fun setSpan(spanType: FilePickerConst.SPAN_TYPE, count: Int): FilePickerBuilder {\n        PickerManager.spanTypes[spanType] = count\n        return this\n    }\n\n    fun setSelectedFiles(selectedPhotos: ArrayList<Uri>): FilePickerBuilder {\n        mPickerOptionsBundle.putParcelableArrayList(FilePickerConst.KEY_SELECTED_MEDIA, selectedPhotos)\n        return this\n    }\n\n    fun enableVideoPicker(status: Boolean): FilePickerBuilder {\n        PickerManager.setShowVideos(status)\n        return this\n    }\n\n    fun enableImagePicker(status: Boolean): FilePickerBuilder {\n        PickerManager.setShowImages(status)\n        return this\n    }\n\n    fun enableSelectAll(status: Boolean): FilePickerBuilder {\n        PickerManager.enableSelectAll(status)\n        return this\n    }\n\n    fun setCameraPlaceholder(@DrawableRes drawable: Int): FilePickerBuilder {\n        PickerManager.cameraDrawable = drawable\n        return this\n    }\n\n    fun showGifs(status: Boolean): FilePickerBuilder {\n        PickerManager.isShowGif = status\n        return this\n    }\n\n    fun showFolderView(status: Boolean): FilePickerBuilder {\n        PickerManager.isShowFolderView = status\n        return this\n    }\n\n    fun enableDocSupport(status: Boolean): FilePickerBuilder {\n        PickerManager.isDocSupport = status\n        return this\n    }\n\n    fun enableCameraSupport(status: Boolean): FilePickerBuilder {\n        PickerManager.isEnableCamera = status\n        return this\n    }\n\n\n    fun withOrientation(@IntegerRes orientation: Int): FilePickerBuilder {\n        PickerManager.orientation = orientation\n        return this\n    }\n\n    @JvmOverloads\n    fun addFileSupport(title: String, extensions: Array<String>,\n                       @DrawableRes drawable: Int = R.drawable.icon_file_unknown): FilePickerBuilder {\n        PickerManager.addFileType(FileType(title, extensions, drawable))\n        return this\n    }\n\n    fun sortDocumentsBy(type: SortingTypes): FilePickerBuilder {\n        PickerManager.sortingType = type\n        return this\n    }\n\n    fun pickPhoto(context: Activity) {\n        mPickerOptionsBundle.putInt(FilePickerConst.EXTRA_PICKER_TYPE, FilePickerConst.MEDIA_PICKER)\n        start(context, FilePickerConst.REQUEST_CODE_PHOTO)\n    }\n\n    fun pickPhoto(context: Fragment) {\n        mPickerOptionsBundle.putInt(FilePickerConst.EXTRA_PICKER_TYPE, FilePickerConst.MEDIA_PICKER)\n        start(context, FilePickerConst.REQUEST_CODE_PHOTO)\n    }\n\n    fun pickFile(context: Activity) {\n        mPickerOptionsBundle.putInt(FilePickerConst.EXTRA_PICKER_TYPE, FilePickerConst.DOC_PICKER)\n        start(context, FilePickerConst.REQUEST_CODE_DOC)\n    }\n\n    fun pickFile(context: Fragment) {\n        mPickerOptionsBundle.putInt(FilePickerConst.EXTRA_PICKER_TYPE, FilePickerConst.DOC_PICKER)\n        start(context, FilePickerConst.REQUEST_CODE_DOC)\n    }\n\n    fun pickPhoto(context: Activity, requestCode: Int) {\n        mPickerOptionsBundle.putInt(FilePickerConst.EXTRA_PICKER_TYPE, FilePickerConst.MEDIA_PICKER)\n        start(context, requestCode)\n    }\n\n    fun pickPhoto(context: Fragment, requestCode: Int) {\n        mPickerOptionsBundle.putInt(FilePickerConst.EXTRA_PICKER_TYPE, FilePickerConst.MEDIA_PICKER)\n        start(context, requestCode)\n    }\n\n    fun pickFile(context: Activity, requestCode: Int) {\n        mPickerOptionsBundle.putInt(FilePickerConst.EXTRA_PICKER_TYPE, FilePickerConst.DOC_PICKER)\n        start(context, requestCode)\n    }\n\n    fun pickFile(context: Fragment, requestCode: Int) {\n        mPickerOptionsBundle.putInt(FilePickerConst.EXTRA_PICKER_TYPE, FilePickerConst.DOC_PICKER)\n        start(context, requestCode)\n    }\n\n    private fun start(context: Activity, requestCode: Int) {\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n            if (ContextCompat.checkSelfPermission(context, FilePickerConst.PERMISSIONS_FILE_PICKER) != PackageManager.PERMISSION_GRANTED) {\n                Toast.makeText(context,\n                        context.resources.getString(R.string.permission_filepicker_rationale),\n                        Toast.LENGTH_SHORT).show()\n                return\n            }\n        }\n\n        val intent = Intent(context, FilePickerActivity::class.java)\n        intent.putExtras(mPickerOptionsBundle)\n\n        context.startActivityForResult(intent, requestCode)\n    }\n\n    private fun start(fragment: Fragment, requestCode: Int) {\n        fragment.context?.let {\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n                if (ContextCompat.checkSelfPermission(it,\n                                FilePickerConst.PERMISSIONS_FILE_PICKER) != PackageManager.PERMISSION_GRANTED) {\n                    Toast.makeText(fragment.context, it\n                            .resources\n                            .getString(R.string.permission_filepicker_rationale), Toast.LENGTH_SHORT).show()\n                    return\n                }\n            }\n\n            val intent = Intent(fragment.activity, FilePickerActivity::class.java)\n            intent.putExtras(mPickerOptionsBundle)\n\n            fragment.startActivityForResult(intent, requestCode)\n        }\n    }\n\n    companion object {\n        @JvmStatic\n        val instance: FilePickerBuilder\n            get() = FilePickerBuilder()\n    }\n}\n'