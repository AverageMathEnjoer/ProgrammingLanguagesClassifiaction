b'suppressPackageStartupMessages(library(Biobase))\nsuppressPackageStartupMessages(library(DESeq2))\nsuppressPackageStartupMessages(library(edgeR))\nsuppressPackageStartupMessages(library(limma))\nsuppressPackageStartupMessages(library(samr))\nsuppressPackageStartupMessages(library(DSS))\nsuppressPackageStartupMessages(library(EBSeq))\nsuppressPackageStartupMessages(library(iCOBRA))\n\nsource("makeSim.R")\nsource("runScripts.R")\nalgos <- list("DESeq2"=runDESeq2,\n              "edgeR"=runEdgeR,\n              "DSS"=runDSSFDR,\n              "voom"=runVoom,\n              "SAMseq"=runSAMseqFDR,\n              "EBSeq"=runEBSeq)\n\nn <- 10000\nmLevels <- c(6, 8, 10) # total sample size\nderLevels <- c(.05, .1, .2) # DE ratio\n\ngrid <- expand.grid(\n  m=mLevels,\n  der=derLevels)\n\nlibrary("parallel")\noptions(mc.cores=2)\n\n# only simulate with base mean > 10\nload("meanDispPairs_bottomly.rda")\nmdp <- meanDispPairs[meanDispPairs$mean > 10,]\n\ncdList <- mclapply(seq_len(nrow(grid)), function(i) {\n  set.seed(i)\n  m <- grid$m[i]\n  der <- grid$der[i]\n  condition <- factor(rep(c("A","B"), each = m/2))\n  x <- model.matrix(~ condition)\n  beta <- c(rep(0, (1-der) * n),\n            runif(der * n,.5,2)) # half will get flipped negative in makeSim\n  sim <- makeSim(n,m,x,beta,mdp)\n  mat <- sim$mat\n  beta <- sim$beta\n  status <- as.integer(beta != 0)\n  mean.bin <- cut(log10(sim$mu0), c(-Inf,2,3,Inf))\n  truth <- data.frame(status=status, logFC=beta, mean.bin=mean.bin)\n  e <- ExpressionSet(mat, AnnotatedDataFrame(data.frame(condition)))\n  system.time({\n    resTest <- lapply(algos, function(f) f(e))\n  })\n  cd <- COBRAData(pval = data.frame(lapply(resTest, `[[`, "pval")),\n                  padj = data.frame(lapply(resTest, `[[`, "padj")),\n                  score = data.frame(lapply(resTest, `[[`, "logFC")),\n                  truth = truth)\n  cd@score$EBSeq <- cd@score$edgeR # inject LFC estimate for EBSeq\n  cd\n})\n\nplotList <- list()\nfor (i in seq_len(nrow(grid))) {\n  cat(i, "")\n  cp <- calculate_performance(cdList[[i]],\n                              binary_truth = "status", cont_truth = "logFC",\n                              thrs=c(.05, .1),\n                              aspects=c("fdrtpr","fdrtprcurve"))\n  cobraplot <- prepare_data_for_plot(cp)\n  title <- paste0("m=", grid$m[i], ";  ratio=", grid$der[i])\n  plotList[[i]] <- plot_fdrtprcurve(cobraplot, title=title,\n                                    xaxisrange=c(0, 0.3),\n                                    yaxisrange=c(0.7, 1))\n}\n\nlibrary(cowplot)\npng(file="icobra.png", width=1500, height=1500)\ndo.call(plot_grid, plotList)\ndev.off()\n\nwrite.table(session_info()$packages,\n            file="icobra_pkg_versions.txt",\n            quote=FALSE, sep="\\t", row.names=FALSE)\nsave(cdList, file="icobra.rda")\n\nif (FALSE) {\n  load("bottomly_sumexp.RData")\n  bottomly.se <- updateObject(bottomly)\n  levels(bottomly.se$strain) <- c("C","D")\n  bottomly.se$batch <- factor(bottomly.se$experiment.number)\n  bottomly.se <- DESeqDataSet(bottomly.se, ~batch + strain)\n  bottomly.se <- estimateSizeFactors(bottomly.se)\n  bottomly.se <- estimateDispersions(bottomly.se)\n  meanDispPairs <- with(mcols(bottomly.se),\n                        data.frame(mean=baseMean, disp=dispGeneEst))\n  meanDispPairs <- meanDispPairs[meanDispPairs$disp > 1e-6,]\n  meanDispPairs <- meanDispPairs[!is.na(meanDispPairs$mean),]\n  save(meanDispPairs, file="meanDispPairs_bottomly.rda")\n}\n'