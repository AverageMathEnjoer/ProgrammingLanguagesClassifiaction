b'const ll INF = 1LL<<61;\nbool cmpA;\nstruct Line {\n   ll a, b;\n   mutable long double xl;\n   bool operator < (const Line &l) const { if (cmpA) return a < l.a; else return xl < l.xl; }\n};\nstruct DynamicHull : multiset<Line> {\n   bool bad (iterator y) {\n      iterator z = next(y), x;\n      if (y == begin()) {\n         if (z == end()) return 0;\n         return y->a == z->a && y->b <= z->b;\n      }\n      x = prev(y);\n      if (z == end()) {\n         return y->a == x->a && y->b <= x->b;\n      }\n      return 1.0L * (x->b - y->b) * (z->a - y->a) >= 1.0L * (y->b - z->b) * (y->a - x->a);\n   }\n \n   void add (ll a, ll b) {\n        a*=-1;\n        b*=-1;\n      cmpA = 1;\n      iterator y = insert((Line){a,b,-INF});\n      if (bad(y)) { erase(y); return; }\n      while (next(y) != end() && bad(next(y))) erase(next(y));\n      while (y != begin() && bad(prev(y))) erase(prev(y));\n      if (next(y) != end()) next(y)->xl = 1.0L * (y->b - next(y)->b) / (next(y)->a - y->a);\n      if (y != begin()) y->xl = 1.0L * (y->b - prev(y)->b) / (prev(y)->a - y->a);\n   }\n \n   ll eval (ll x) {\n      if (empty()) return -(-INF);\n      cmpA = 0;\n      iterator it = prev(lower_bound((Line){0,0,1.0L*x}));\n      return -(it->a * x + it->b);\n   }\n};\n'