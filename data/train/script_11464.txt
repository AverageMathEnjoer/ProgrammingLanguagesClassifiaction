b'\n-- Peculiar:\n--    * Requires hscassandra 0.0.8, available on github only\n\n-- Functions to:\n--    * Connect to a cassandra nosql server\n--    * Put a bytestring\n--    * Get a bytestring\n\n-- This file acts as a microbench for insertion or retrieval of keys\n\nimport Database.Cassandra\nimport Database.Cassandra.Types\nimport qualified Data.ByteString.Lazy.Char8 as BS\nimport qualified Database.Cassandra.Thrift.Cassandra_Types as CT\nimport Data.Either.Utils\nimport qualified Data.List as L\nimport System.Time\nimport Data.Time.Clock\nimport System.Environment\nimport Control.Monad\nimport qualified Data.Set as S\n\n\nconfig = CassandraConfig { cassandraKeyspace = "Test2"\n                     , cassandraConsistencyLevel = ONE\n                     , cassandraHostname = "127.0.0.1"\n                     , cassandraPort = 9160\n                     , cassandraUsername = ""\n                     , cassandraPassword = ""\n                     }\n\npack :: [Char] -> BS.ByteString\npack string = BS.pack string\n     \ndeColumnValue :: Column -> BS.ByteString\ndeColumnValue (Column _ value _) = value\n                 \nfetchValue string = runCassandraT config $ do\n  res <- get "Users" (pack string) AllColumns\n  return $ deColumnValue $ head $ res\n\ninsertValue string byteString = runCassandraT config $ do\n  insert "Users" (pack string) [ (pack "name") =: byteString ]\n  \nremoveValue string = runCassandraT config $ do\n  remove "Users" (pack string) (ColNames [ (pack "name") ])\n\nmain = do\n  \n  --input <- readFile "/usr/share/dict/words"\n  --let words = tail $ lines input\n  let words = map (\\n -> (show n) ++ "Thequickbrownfoxjumpedoverthelazydog")  $ take 5000 [1..]\n  \n  \n  putStrLn "Benchmarking Cassandra bindings by writing in every dictionary file word as a k,v pair."\n  \n  putStrLn "About to start timing writes..."\n  \n  writeStart <- getCurrentTime\n  mapM_ (\\w -> insertValue w (pack w)) words\n  writeStop <- getCurrentTime\n  \n  let writeTime = diffUTCTime writeStop writeStart\n  \n  putStrLn ("Writes took " ++ (show $ writeTime))\n  \n  putStrLn "Starting reads..."\n  \n  readStart <- getCurrentTime\n  mapM_ (\\w -> fetchValue w) words\n  let pairs = length words\n  readStop <- getCurrentTime\n  \n  let readTime = diffUTCTime readStop readStart\n  \n  putStrLn ("Reads took " ++ (show $ readTime))\n  \n  let totalTime = diffUTCTime readStop writeStart\n  \n  putStrLn ("Total time: " ++ (show $ totalTime))\n  \n  putStrLn "Removing keys..."\n  \n  mapM_ (\\w -> removeValue w) words\n  \n  \n  '