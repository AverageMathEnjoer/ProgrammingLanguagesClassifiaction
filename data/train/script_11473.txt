b"-- |\n-- Module      : Hoodle.Widget.Clock\n-- Copyright   : (c) 2013-2015 Ian-Woo Kim\n--\n-- License     : BSD3\n-- Maintainer  : Ian-Woo Kim <ianwookim@gmail.com>\n-- Stability   : experimental\n-- Portability : GHC\n--\n-- Clock widget drawing and action\nmodule Hoodle.Widget.Clock where\n\nimport Control.Lens (over, set, view, (.~))\nimport Control.Monad.State (get, liftIO, modify)\nimport Data.Functor.Identity (Identity (..))\nimport Data.Hoodle.BBox (BBox (..))\nimport Data.Hoodle.Simple (Dimension (Dim))\nimport Data.List (delete)\nimport Data.Time\n  ( UTCTime,\n    getCurrentTime,\n  )\nimport Graphics.Hoodle.Render.Util.HitTest (isPointInBBox)\nimport qualified Graphics.Rendering.Cairo as Cairo\nimport Hoodle.Accessor (renderCache)\nimport Hoodle.Coroutine.Draw\n  ( invalidate,\n    invalidateInBBox,\n    nextevent,\n  )\nimport Hoodle.Coroutine.Pen (processWithDefTimeInterval)\nimport Hoodle.Device (PointerCoord)\nimport Hoodle.Type.Canvas\n  ( CanvasId,\n    CanvasInfo,\n    canvasWidgets,\n    forBoth,\n    forBoth',\n    unboxBiAct,\n    unboxBiXform,\n    unboxLens,\n  )\nimport Hoodle.Type.Coroutine (MainCoroutine)\nimport Hoodle.Type.Enum (DrawFlag (Efficient))\nimport Hoodle.Type.Event (UserEvent (PenMove, PenUp))\nimport Hoodle.Type.HoodleState\n  ( currentUnit,\n    getCanvasInfo,\n    getCurrentCanvasId,\n    getHoodle,\n    setCanvasInfo,\n    unitHoodles,\n  )\nimport Hoodle.Type.PageArrangement\n  ( CanvasCoordinate (..),\n    CanvasDimension (..),\n  )\nimport Hoodle.Type.Widget\n  ( WidgetItem (ClockWidget),\n    allWidgets,\n    clockWidgetConfig,\n    clockWidgetPosition,\n    doesUseClockWidget,\n    widgetConfig,\n  )\nimport Hoodle.View.Coordinate\n  ( CanvasGeometry (canvasDim, desktop2Canvas),\n    device2Desktop,\n  )\nimport Hoodle.View.Draw\n  ( canvasImageSurface,\n    doubleBufferFlush,\n    drawWidgets,\n    renderClockWidget,\n    virtualDoubleBufferDraw,\n  )\n\n-- |\nnewtype CWAction = Move (CanvasCoordinate, CanvasCoordinate)\n  deriving (Show)\n\ncheckPointerInClock ::\n  (CanvasId, CanvasInfo a, CanvasGeometry) ->\n  PointerCoord ->\n  Maybe CWAction\ncheckPointerInClock (_cid, cinfo, geometry) pcoord\n  | b =\n    let oxy@(CvsCoord (x, y)) = (desktop2Canvas geometry . device2Desktop geometry) pcoord\n        owxy@(CvsCoord (x0, y0)) = view (canvasWidgets . clockWidgetConfig . clockWidgetPosition) cinfo\n        obbox = BBox (x0 - 50, y0 - 50) (x0 + 50, y0 + 50)\n        r\n          | isPointInBBox obbox (x, y) = Just (Move (oxy, owxy))\n          | otherwise = Nothing\n     in r\n  | otherwise = Nothing\n  where\n    b = view (canvasWidgets . widgetConfig . doesUseClockWidget) cinfo\n\n-- |\nstartClockWidget ::\n  (CanvasId, CanvasInfo a, CanvasGeometry) ->\n  CWAction ->\n  MainCoroutine ()\nstartClockWidget (_cid, cinfo, geometry) (Move (oxy, owxy)) = do\n  xst <- get\n  cache <- renderCache\n  let uhdl = view (unitHoodles . currentUnit) xst\n      hdl = getHoodle uhdl\n      cid = getCurrentCanvasId uhdl\n  (srcsfc, Dim wsfc hsfc) <- liftIO (canvasImageSurface cache cid Nothing geometry hdl)\n  -- need to draw other widgets here\n  let otherwidgets = delete ClockWidget allWidgets\n  liftIO $ Cairo.renderWith srcsfc (drawWidgets otherwidgets hdl cinfo Nothing)\n  -- end : need to draw other widgets here ^^^\n  tgtsfc <-\n    liftIO $\n      Cairo.createImageSurface\n        Cairo.FormatARGB32\n        (floor wsfc)\n        (floor hsfc)\n  ctime <- liftIO getCurrentTime\n  manipulateCW cid geometry (srcsfc, tgtsfc) owxy oxy ctime\n  liftIO $ Cairo.surfaceFinish srcsfc\n  liftIO $ Cairo.surfaceFinish tgtsfc\n\n-- | main event loop for clock widget\nmanipulateCW ::\n  CanvasId ->\n  CanvasGeometry ->\n  (Cairo.Surface, Cairo.Surface) ->\n  CanvasCoordinate ->\n  CanvasCoordinate ->\n  UTCTime ->\n  MainCoroutine ()\nmanipulateCW cid geometry (srcsfc, tgtsfc) owxy oxy otime = do\n  r <- nextevent\n  case r of\n    PenMove _ pcoord -> do\n      processWithDefTimeInterval\n        (manipulateCW cid geometry (srcsfc, tgtsfc) owxy oxy)\n        ( \\ctime ->\n            moveClockWidget cid geometry (srcsfc, tgtsfc) owxy oxy pcoord\n              >> manipulateCW cid geometry (srcsfc, tgtsfc) owxy oxy ctime\n        )\n        otime\n    PenUp _ _ -> invalidate cid\n    _ -> return ()\n\nmoveClockWidget ::\n  CanvasId ->\n  CanvasGeometry ->\n  (Cairo.Surface, Cairo.Surface) ->\n  CanvasCoordinate ->\n  CanvasCoordinate ->\n  PointerCoord ->\n  MainCoroutine ()\nmoveClockWidget cid geometry (srcsfc, tgtsfc) (CvsCoord (xw, yw)) (CvsCoord (x0, y0)) pcoord = do\n  let CvsCoord (x, y) = (desktop2Canvas geometry . device2Desktop geometry) pcoord\n  modify $ \\xst ->\n    let uhdl = view (unitHoodles . currentUnit) xst\n        CanvasDimension (Dim cw ch) = canvasDim geometry\n        cinfobox = getCanvasInfo cid uhdl\n        nposx\n          | xw + x - x0 < -50 = -50\n          | xw + x - x0 > cw - 50 = cw - 50\n          | otherwise = xw + x - x0\n        nposy\n          | yw + y - y0 < -50 = -50\n          | yw + y - y0 > ch - 50 = ch - 50\n          | otherwise = yw + y - y0\n        nwpos = CvsCoord (nposx, nposy)\n        changeact :: CanvasInfo a -> CanvasInfo a\n        changeact = set (canvasWidgets . clockWidgetConfig . clockWidgetPosition) nwpos\n        ncinfobox = (runIdentity . forBoth unboxBiXform (return . changeact)) cinfobox\n     in (unitHoodles . currentUnit .~ setCanvasInfo (cid, ncinfobox) uhdl) xst\n  --\n  xst2 <- get\n  let uhdl = view (unitHoodles . currentUnit) xst2\n      cinfobox2 = getCanvasInfo cid uhdl\n      cfg = view (unboxLens (canvasWidgets . clockWidgetConfig)) cinfobox2\n  liftIO $\n    forBoth'\n      unboxBiAct\n      ( \\cinfo ->\n          virtualDoubleBufferDraw\n            srcsfc\n            tgtsfc\n            (return ())\n            (renderClockWidget Nothing cfg)\n            >> doubleBufferFlush tgtsfc cinfo\n      )\n      cinfobox2\n\n-- |\ntoggleClock :: CanvasId -> MainCoroutine ()\ntoggleClock cid = do\n  modify $ \\xst ->\n    let uhdl = view (unitHoodles . currentUnit) xst\n        ncinfobox =\n          ( over (unboxLens (canvasWidgets . widgetConfig . doesUseClockWidget)) not\n              . getCanvasInfo cid\n          )\n            uhdl\n     in (unitHoodles . currentUnit .~ setCanvasInfo (cid, ncinfobox) uhdl) xst\n  invalidateInBBox Nothing Efficient cid\n"