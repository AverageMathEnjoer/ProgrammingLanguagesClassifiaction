b'//used in solving linear congruences a*x = b (mod n)\n// x = extended_gcd(a, n).F * b % n\n// if x < 0: x += n\n//CONDITION: gcd(a, n) = 1\ntypedef ll var;\npair<var, var> extended_gcd(var a, var b){\n\tbool swp = 0;\n\tif (a<b) swap(a, b), swp = 1;\n\t//1 = N*a + M*b\n\t//returns {N, M}\n\tvector<var> K;\n\tvar k, r, FF, SS;\n\twhile(1){\n\t\tk = a/b;\n\t\tr = a - k*b;\n\t\tif(r == 1){\n\t\t\tFF = 1, SS = -k;\n\t\t\treverse(all(K));\n\t\t\tfor(int k: K){\n\t\t\t\tvar tem = FF;\n\t\t\t\tFF = SS;\n\t\t\t\tSS = tem - SS * k;\n\t\t\t}\n\t\t\treturn swp?mp(SS, FF):mp(FF, SS);\n\t\t}\n\t\telse{\n\t\t\tK.pb(k);\n\t\t}\n\t\ta = b;\n\t\tb = r;\n\t}\n}\nvar solve(var a, var b, var n){\n\tpair<var, var> ans = extended_gcd(a, n);\n\tvar x = ( ans.F * b ) % n;\n\tif ( x < 0)\n\t\tx += n;\n\t\n\t//a*x is b (mod n)\n\treturn x;\n\t\n}\n'