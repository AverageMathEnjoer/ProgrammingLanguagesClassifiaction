b'package co.joebirch.composeplayground.material\n\nimport androidx.compose.material.Text\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.shape.CircleShape\nimport androidx.compose.material.*\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.Done\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.unit.dp\nimport co.joebirch.composeplayground.ComposableLayout\n\nobject BottomAppBarView : ComposableLayout {\n\n    @Composable\n    override fun build() {\n        val selectedLayout = remember { mutableStateOf(0) }\n\n        Column(\n            modifier = Modifier.fillMaxSize(),\n            verticalArrangement = Arrangement.SpaceEvenly,\n            horizontalAlignment = Alignment.CenterHorizontally\n        ) {\n            when (selectedLayout.value) {\n                0 -> MinimalBottomAppBar {\n                    Column(\n                        modifier = Modifier.fillMaxSize(),\n                        verticalArrangement = Arrangement.Center\n                    ) {\n                        Button(onClick = {\n                            selectedLayout.value = 1\n                        }, modifier = Modifier.align(Alignment.CenterHorizontally)) {\n                            Text(text = "Switch to styled bar")\n                        }\n                    }\n                }\n                1 -> StyledBottomAppBar {\n                    Column(\n                        modifier = Modifier.fillMaxSize(),\n                        verticalArrangement = Arrangement.Center\n                    ) {\n                        Button(onClick = {\n                            selectedLayout.value = 2\n                        }, modifier = Modifier.align(Alignment.CenterHorizontally)) {\n                            Text(text = "Switch to FAB bar")\n                        }\n                    }\n                }\n                2 -> FabBottomAppBar {\n                    Column(\n                        modifier = Modifier.fillMaxSize(),\n                        verticalArrangement = Arrangement.Center\n                    ) {\n                        Button(onClick = {\n                            selectedLayout.value = 3\n                        }, modifier = Modifier.align(Alignment.CenterHorizontally)) {\n                            Text(text = "Switch to minimal bar")\n                        }\n                    }\n                }\n                3 -> DockedFabBottomAppBar {\n                    Column(\n                        modifier = Modifier.fillMaxSize(),\n                        verticalArrangement = Arrangement.Center\n                    ) {\n                        Button(onClick = {\n                            selectedLayout.value = 0\n                        }, modifier = Modifier.align(Alignment.CenterHorizontally)) {\n                            Text(text = "Switch to minimal bar")\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n}\n\n@Composable\nfun MinimalBottomAppBar(bodyContent: @Composable() () -> Unit) {\n    Scaffold(bottomBar = {\n        BottomAppBar {\n            Text(\n                text = "Jetpack Compose",\n                modifier = Modifier.padding(16.dp)\n            )\n        }\n    }, content = {\n        bodyContent()\n    })\n}\n\n@Composable\nfun BackgroundColorBottomAppBar(bodyContent: @Composable() () -> Unit) {\n    BottomAppBar(\n        backgroundColor = Color.Black\n    ) {\n        Text(\n            text = "Jetpack Compose",\n            modifier = Modifier.padding(16.dp)\n        )\n    }\n}\n\n@Composable\nfun ContentColorBottomAppBar(bodyContent: @Composable() () -> Unit) {\n    BottomAppBar(\n        contentColor = Color.Black\n    ) {\n        Text(\n            text = "Jetpack Compose",\n            modifier = Modifier.padding(16.dp)\n        )\n    }\n}\n\n@Composable\nfun ElevationBottomAppBar(bodyContent: @Composable() () -> Unit) {\n    BottomAppBar(\n        elevation = 12.dp,\n    ) {\n        Text(\n            text = "Jetpack Compose",\n            modifier = Modifier.padding(16.dp)\n        )\n    }\n}\n\n@Composable\nfun StyledBottomAppBar(bodyContent: @Composable() () -> Unit) {\n    Scaffold(bottomBar = {\n        BottomAppBar(\n            elevation = 12.dp,\n            contentColor = Color.White,\n            backgroundColor = Color.Black\n        ) {\n            Text(\n                text = "Jetpack Compose",\n                modifier = Modifier.padding(16.dp)\n            )\n        }\n    }, content = {\n        bodyContent()\n    })\n}\n\n@Composable\nfun FabBottomAppBar(bodyContent: @Composable() () -> Unit) {\n    Scaffold(\n        bottomBar = {\n            BottomAppBar(\n                contentColor = Color.White,\n                backgroundColor = Color.Black,\n                cutoutShape = CircleShape\n            ) {\n\n            }\n        },\n        floatingActionButton = {\n            FloatingActionButton(onClick = {\n\n            }) {\n                Icon(\n                    Icons.Default.Done,\n                    contentDescription = "my description"\n                )\n            }\n        },\n        floatingActionButtonPosition = FabPosition.Center,\n        content = {\n            bodyContent()\n        }\n    )\n}\n\n@Composable\nfun DockedFabBottomAppBar(bodyContent: @Composable() () -> Unit) {\n    Scaffold(\n        bottomBar = {\n            BottomAppBar(\n                contentColor = Color.White,\n                backgroundColor = Color.Black,\n                cutoutShape = CircleShape\n            ) {\n\n            }\n        },\n        floatingActionButton = {\n            FloatingActionButton(onClick = {\n\n            }) {\n                Icon(\n                    Icons.Default.Done,\n                    contentDescription = "my description"\n                )\n            }\n        },\n        floatingActionButtonPosition = FabPosition.Center,\n        isFloatingActionButtonDocked = true,\n        content = {\n            bodyContent()\n        })\n}'