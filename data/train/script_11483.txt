b'// I2Cdev library collection - AK8963 I2C device class header file\n// Based on AKM AK8963 datasheet, 10/2013\n// 8/27/2011 by Jeff Rowberg <jeff@rowberg.net>\n// Updates should (hopefully) always be available at https://github.com/jrowberg/i2cdevlib\n//\n// Changelog:\n//     2016-01-02 - initial release based on AK8975 code\n//\n\n/* ============================================\nI2Cdev device library code is placed under the MIT license\nCopyright (c) 2011 Jeff Rowberg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n===============================================\n*/\n\n#include "AK8963.h"\n\n/** Default constructor, uses default I2C address.\n * @see AK8963_DEFAULT_ADDRESS\n */\nAK8963::AK8963() {\n    devAddr = AK8963_DEFAULT_ADDRESS;\n}\n\n/** Specific address constructor.\n * @param address I2C address\n * @see AK8963_DEFAULT_ADDRESS\n * @see AK8963_ADDRESS_00\n */\nAK8963::AK8963(uint8_t address) {\n    devAddr = address;\n}\n\n/** Power on and prepare for general usage.\n * No specific pre-configuration is necessary for this device.\n */\nvoid AK8963::initialize() {\n}\n\n/** Verify the I2C connection.\n * Make sure the device is connected and responds as expected.\n * @return True if connection is valid, false otherwise\n */\nbool AK8963::testConnection() {\n    if (I2Cdev::readByte(devAddr, AK8963_RA_WIA, buffer) == 1) {\n        return (buffer[0] == 0x48);\n    }\n    return false;\n}\n\n// WIA register\n\nuint8_t AK8963::getDeviceID() {\n    I2Cdev::readByte(devAddr, AK8963_RA_WIA, buffer);\n    return buffer[0];\n}\n\n// INFO register\n\nuint8_t AK8963::getInfo() {\n    I2Cdev::readByte(devAddr, AK8963_RA_INFO, buffer);\n    return buffer[0];\n}\n\n// ST1 register\n\nbool AK8963::getDataReady() {\n    I2Cdev::readBit(devAddr, AK8963_RA_ST1, AK8963_ST1_DRDY_BIT, buffer);\n    return buffer[0];\n}\n\nbool AK8963::getDataOverrun() {\n    I2Cdev::readBit(devAddr, AK8963_RA_ST1, AK8963_ST1_DOR_BIT, buffer);\n    return buffer[0];\n}\n\n// H* registers\nvoid AK8963::getHeading(int16_t *x, int16_t *y, int16_t *z) {\n    I2Cdev::readBytes(devAddr, AK8963_RA_HXL, 6, buffer);\n    *x = (((int16_t)buffer[1]) << 8) | buffer[0];\n    *y = (((int16_t)buffer[3]) << 8) | buffer[2];\n    *z = (((int16_t)buffer[5]) << 8) | buffer[4];\n}\nint16_t AK8963::getHeadingX() {\n    I2Cdev::readBytes(devAddr, AK8963_RA_HXL, 2, buffer);\n    return (((int16_t)buffer[1]) << 8) | buffer[0];\n}\nint16_t AK8963::getHeadingY() {\n    I2Cdev::readBytes(devAddr, AK8963_RA_HYL, 2, buffer);\n    return (((int16_t)buffer[1]) << 8) | buffer[0];\n}\nint16_t AK8963::getHeadingZ() {\n    I2Cdev::readBytes(devAddr, AK8963_RA_HZL, 2, buffer);\n    return (((int16_t)buffer[1]) << 8) | buffer[0];\n}\n\n// ST2 register\nbool AK8963::getOverflowStatus() {\n    I2Cdev::readBit(devAddr, AK8963_RA_ST2, AK8963_ST2_HOFL_BIT, buffer);\n    return buffer[0];\n}\nbool AK8963::getOutputBit() {\n    I2Cdev::readBit(devAddr, AK8963_RA_ST2, AK8963_ST2_BITM_BIT, buffer);\n    return buffer[0];\n}\n\n// CNTL1 register\nuint8_t AK8963::getMode() {\n    I2Cdev::readBits(devAddr, AK8963_RA_CNTL1, AK8963_CNTL1_MODE_BIT, AK8963_CNTL1_MODE_LENGTH, buffer);\n    return buffer[0];\n}\nvoid AK8963::setMode(uint8_t mode) {\n    I2Cdev::writeBits(devAddr, AK8963_RA_CNTL1, AK8963_CNTL1_MODE_BIT, AK8963_CNTL1_MODE_LENGTH, mode);\n}\nuint8_t AK8963::getResolution() {\n    I2Cdev::readBit(devAddr, AK8963_RA_CNTL1, AK8963_CNTL1_RES_BIT, buffer);\n    return buffer[0];\n}\nvoid AK8963::setResolution(uint8_t res) {\n    I2Cdev::writeBit(devAddr, AK8963_RA_CNTL1, AK8963_CNTL1_RES_BIT, res);\n}\n\n// CNTL2 register\nvoid AK8963::reset() {\n    I2Cdev::writeByte(devAddr, AK8963_RA_CNTL2, AK8963_CNTL2_RESET);\n}\n\n// ASTC register\nvoid AK8963::setSelfTest(bool enabled) {\n    I2Cdev::writeBit(devAddr, AK8963_RA_ASTC, AK8963_ASTC_SELF_BIT, enabled);\n}\n\n// I2CDIS\nvoid AK8963::disableI2C() {\n    I2Cdev::writeByte(devAddr, AK8963_RA_I2CDIS, AK8963_I2CDIS_DISABLE);\n}\n\n// ASA* registers\nvoid AK8963::getAdjustment(int8_t *x, int8_t *y, int8_t *z) {\n    I2Cdev::readBytes(devAddr, AK8963_RA_ASAX, 3, buffer);\n    *x = buffer[0];\n    *y = buffer[1];\n    *z = buffer[2];\n}\nvoid AK8963::setAdjustment(int8_t x, int8_t y, int8_t z) {\n    buffer[0] = x;\n    buffer[1] = y;\n    buffer[2] = z;\n    I2Cdev::writeBytes(devAddr, AK8963_RA_ASAX, 3, buffer);\n}\nuint8_t AK8963::getAdjustmentX() {\n    I2Cdev::readByte(devAddr, AK8963_RA_ASAX, buffer);\n    return buffer[0];\n}\nvoid AK8963::setAdjustmentX(uint8_t x) {\n    I2Cdev::writeByte(devAddr, AK8963_RA_ASAX, x);\n}\nuint8_t AK8963::getAdjustmentY() {\n    I2Cdev::readByte(devAddr, AK8963_RA_ASAY, buffer);\n    return buffer[0];\n}\nvoid AK8963::setAdjustmentY(uint8_t y) {\n    I2Cdev::writeByte(devAddr, AK8963_RA_ASAY, y);\n}\nuint8_t AK8963::getAdjustmentZ() {\n    I2Cdev::readByte(devAddr, AK8963_RA_ASAZ, buffer);\n    return buffer[0];\n}\nvoid AK8963::setAdjustmentZ(uint8_t z) {\n    I2Cdev::writeByte(devAddr, AK8963_RA_ASAZ, z);\n}\n'