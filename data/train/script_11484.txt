b"package effectivejava.chapter4.item20;\nimport java.util.*;\n\n// Concrete implementation built atop skeletal implementation (Page 101)\npublic class IntArrays {\n    static List<Integer> intArrayAsList(int[] a) {\n        Objects.requireNonNull(a);\n\n        // The diamond operator is only legal here in Java 9 and later\n        // If you're using an earlier release, specify <Integer>\n        return new AbstractList<>() {\n            @Override public Integer get(int i) {\n                return a[i];  // Autoboxing (Item 6)\n            }\n\n            @Override public Integer set(int i, Integer val) {\n                int oldVal = a[i];\n                a[i] = val;     // Auto-unboxing\n                return oldVal;  // Autoboxing\n            }\n\n            @Override public int size() {\n                return a.length;\n            }\n        };\n    }\n\n    public static void main(String[] args) {\n        int[] a = new int[10];\n        for (int i = 0; i < a.length; i++)\n            a[i] = i;\n\n        List<Integer> list = intArrayAsList(a);\n        Collections.shuffle(list);\n        System.out.println(list);\n    }\n}\n"