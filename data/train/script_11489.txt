b'\xef\xbb\xbfusing System;\nusing System.Collections.Generic;\nusing System.Text;\nusing Castle.DynamicProxy;\nusing Core.CrossCuttingConcerns.Logging;\nusing Core.CrossCuttingConcerns.Logging.Log4Net;\nusing Core.Utilities.Interceptors;\nusing Core.Utilities.Messages;\n\nnamespace Core.Aspects.Autofac.Exception\n{\n    public class ExceptionLogAspect:MethodInterception\n    {\n        private LoggerServiceBase _loggerServiceBase;\n\n        public ExceptionLogAspect(Type loggerService)\n        {\n            if (loggerService.BaseType!=typeof(LoggerServiceBase))\n            {\n                throw new System.Exception(AspectMessages.WrongLoggerType);\n            }\n\n            _loggerServiceBase = (LoggerServiceBase) Activator.CreateInstance(loggerService);\n        }\n        protected override void OnException(IInvocation invocation,System.Exception e)\n        {\n            LogDetailWithException logDetailWithException = GetLogDetail(invocation);\n            logDetailWithException.ExceptionMessage = e.Message;\n            _loggerServiceBase.Error(logDetailWithException);\n        }\n\n        private LogDetailWithException GetLogDetail(IInvocation invocation)\n        {\n            var logParameters = new List<LogParameter>();\n\n            for (int i = 0; i < invocation.Arguments.Length; i++)\n            {\n                logParameters.Add(new LogParameter\n                {\n                    Name= invocation.GetConcreteMethod().GetParameters()[i].Name,\n                    Value = invocation.Arguments[i],\n                    Type = invocation.Arguments[i].GetType().Name\n                });\n            }\n\n            var logDetailWithException = new LogDetailWithException\n            {\n                MethodName = invocation.Method.Name,\n                LogParameters = logParameters\n            };\n\n            return logDetailWithException;\n        }\n    }\n}\n'