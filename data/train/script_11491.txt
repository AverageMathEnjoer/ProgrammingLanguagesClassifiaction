b'module OrderManagement\n\nopen System.Collections.Generic\n\n// Listing 28.1\ntype OrderItemRequest = { ItemId : int; Count : int }\ntype OrderRequest =\n    { OrderId : int\n      CustomerName : string // mandatory\n      Comment : string // optional\n      /// Only one of email and telephone should be populated, or none\n      EmailUpdates : string\n      TelephoneUpdates : string\n      Items : IEnumerable<OrderItemRequest> } // mandatory\n\nmodule private OrderProcessing =\n    // Listing 28.2\n    type OrderId = OrderId of int\n    type ItemId = ItemId of int\n    type OrderItem = { ItemId : ItemId; Count : int }\n    type UpdatePreference = | EmailUpdates of string | TelephoneUpdates of string\n    type Order =\n        { OrderId : OrderId\n          CustomerName : string\n          ContactPreference : UpdatePreference option\n          Comment : string option\n          Items : OrderItem list }\n    // Listing 28.3\n    let toOrder (orderRequest:OrderRequest) =\n        { OrderId = OrderId orderRequest.OrderId\n          CustomerName =\n            match orderRequest.CustomerName with\n            | null -> failwith "Customer name must be populated"\n            | name -> name\n          Comment = orderRequest.Comment |> Option.ofObj\n          ContactPreference =\n            match Option.ofObj orderRequest.EmailUpdates, Option.ofObj orderRequest.TelephoneUpdates  with\n            | None, None -> None\n            | Some email, None -> Some(EmailUpdates email)\n            | None, Some phone -> Some(TelephoneUpdates phone)\n            | Some _, Some _ -> failwith "Unable to proceed - only one of telephone and email should be supplied"\n          Items =\n            orderRequest.Items\n            |> Seq.map(fun item -> { ItemId = ItemId item.ItemId; Count = item.Count })\n            |> Seq.toList }\n    \n    let processOrder (order:Order) = "SUCCESS"\n\nlet placeOrder = OrderProcessing.toOrder >> OrderProcessing.processOrder \n\n'