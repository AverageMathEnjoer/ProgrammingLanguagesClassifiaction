b'package com.xingin.widgets\n\nimport android.annotation.SuppressLint\nimport android.app.Activity\nimport android.text.InputType\nimport android.view.KeyEvent\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.View.OnKeyListener\nimport android.view.ViewGroup\nimport android.widget.FrameLayout\nimport kotlinx.android.synthetic.main.widgets_view_global_loading.view.*\n\n@SuppressLint("ViewConstructor")\n/**\n * Created by susion on 2018/12/15.\n *\n * @param activity view\xe7\x9a\x84context\n * @param autoAttachHost \xe9\xbb\x98\xe8\xae\xa4\xe5\x9c\xa8\xe5\xb1\x95\xe7\xa4\xbaloading\xe6\x97\xb6\xe4\xbc\x9a\xe6\xb7\xbb\xe5\x8a\xa0\xe5\x88\xb0activity\xe7\x9a\x84 android.R.id.content\xe4\xb8\x8a\xe3\x80\x82\xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\xbafalse\xef\xbc\x8c\xe5\x88\x99\xe5\x8f\xaf\xe4\xbb\xa5\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89loading\xe5\xb1\x95\xe7\xa4\xba\xe7\x9a\x84\xe4\xbd\x8d\xe7\xbd\xae\n */\nclass GlobalLoadingView(private val activity: Activity, private val autoAttachHost: Boolean = true) : FrameLayout(activity) {\n\n    private var isShowing = false\n\n    init {\n        LayoutInflater.from(context).inflate(R.layout.widgets_view_global_loading, this)\n        mGlobalLoadingListenBackKeyPressEditText.inputType = InputType.TYPE_NULL\n        mGlobalLoadingListenBackKeyPressEditText.setOnKeyListener(OnKeyListener { v, keyCode, event ->\n            if (event?.keyCode == KeyEvent.KEYCODE_BACK && isShowing) {\n                hide()\n            }\n            return@OnKeyListener true\n        })\n    }\n\n    /**\n     * \xe5\xb1\x95\xe7\xa4\xba\xe5\x85\xa8\xe5\xb1\x80 loading,\n     *\n     * autoAttachHost \xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xbatrue \xe4\xbc\x9a\xe5\xb0\x9d\xe8\xaf\x95 attach\xe5\x9c\xa8 android.R.content \xe4\xb8\x8a\xe3\x80\x82 \xe5\x90\xa6\xe5\x88\x99\xe4\xbc\x9a\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xba\xe5\x8f\xaf\xe8\xa7\x81\xef\xbc\x8c\xe5\xb9\xb6\xe6\x92\xad\xe6\x94\xbe\xe5\x8a\xa8\xe7\x94\xbb\n     * */\n    fun show() {\n        if (activity.isFinishing || activity.isDestroyed) return\n\n        if (autoAttachHost) {\n            attachLoadingViewAndShowAnimation()\n        } else {\n            if (parent != null) {    //\xe8\xbf\x99\xe4\xb8\xaa view \xe5\xb7\xb2\xe7\xbb\x8f\xe8\xa2\xab\xe5\x8a\xa0\xe5\x85\xa5\xe5\x88\xb0\xe5\xbd\x93\xe5\x89\x8d view tree\xe4\xb8\xad\n                visibility = View.VISIBLE\n                innerShow()\n            }\n        }\n    }\n\n    /**\n     * \xe9\x9a\x90\xe8\x97\x8f\xe5\x85\xa8\xe5\xb1\x80 loading,\n     *\n     * autoAttachHost \xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xbatrue \xe4\xbc\x9a\xe5\xb0\x9d\xe8\xaf\x95 detach from  android.R.content \xe4\xb8\x8a\xe3\x80\x82 \xe5\x90\xa6\xe5\x88\x99\xe4\xbc\x9a\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xbaGONE\xef\xbc\x8c\xe5\xb9\xb6\xe5\x81\x9c\xe6\xad\xa2\xe5\x8a\xa8\xe7\x94\xbb\n     * */\n    fun hide() {\n        if (activity.isFinishing || activity.isDestroyed) return\n\n        if (autoAttachHost) {\n            detachLoadingViewAndHideAnimation()\n        } else {\n            if (parent != null) {\n                visibility = View.GONE\n                innerHide()\n            }\n        }\n    }\n\n    private fun detachLoadingViewAndHideAnimation() {\n        val activityContent = activity.findViewById<ViewGroup>(android.R.id.content) ?: return\n        if (parent == null) return\n        activityContent.removeView(this)\n        innerHide()\n    }\n\n    private fun attachLoadingViewAndShowAnimation() {\n        val activityContent = activity.findViewById<ViewGroup>(android.R.id.content) ?: return\n        if (parent != null) return\n        activityContent.addView(this)\n        innerShow()\n    }\n\n    private fun innerShow() {\n        isShowing = true\n        mGlobalLoadingListenBackKeyPressEditText.requestFocus()\n        try {\n            mGlobalLoadingAnimationView.playAnimation()\n        } catch (e: Exception) {\n            e.printStackTrace()\n        }\n    }\n\n    private fun innerHide() {\n        try {\n            mGlobalLoadingAnimationView.pauseAnimation()\n        } catch (e: Exception) {\n            e.printStackTrace()\n        }\n        isShowing = false\n    }\n}'