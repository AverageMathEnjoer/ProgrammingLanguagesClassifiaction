b'/*\n * Copyright (C) 2015 Naman Dwivedi\n *\n * Licensed under the GNU General Public License v3\n *\n * This is free software: you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n */\n\npackage com.naman14.timber;\n\nimport android.annotation.TargetApi;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.media.MediaDescription;\nimport android.media.browse.MediaBrowser;\nimport android.media.session.MediaSession;\nimport android.net.Uri;\nimport android.os.AsyncTask;\nimport android.os.Bundle;\nimport android.service.media.MediaBrowserService;\nimport androidx.annotation.Nullable;\n\nimport com.naman14.timber.dataloaders.AlbumLoader;\nimport com.naman14.timber.dataloaders.AlbumSongLoader;\nimport com.naman14.timber.dataloaders.ArtistAlbumLoader;\nimport com.naman14.timber.dataloaders.ArtistLoader;\nimport com.naman14.timber.dataloaders.ArtistSongLoader;\nimport com.naman14.timber.dataloaders.PlaylistLoader;\nimport com.naman14.timber.dataloaders.PlaylistSongLoader;\nimport com.naman14.timber.dataloaders.SongLoader;\nimport com.naman14.timber.models.Album;\nimport com.naman14.timber.models.Artist;\nimport com.naman14.timber.models.Playlist;\nimport com.naman14.timber.models.Song;\nimport com.naman14.timber.utils.TimberUtils;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n@TargetApi(21)\npublic class WearBrowserService extends MediaBrowserService {\n\n    public static final String MEDIA_ID_ROOT = "__ROOT__";\n    public static final int TYPE_ARTIST = 0;\n    public static final int TYPE_ALBUM = 1;\n    public static final int TYPE_SONG = 2;\n    public static final int TYPE_PLAYLIST = 3;\n    public static final int TYPE_ARTIST_SONG_ALBUMS = 4;\n    public static final int TYPE_ALBUM_SONGS = 5;\n    public static final int TYPE_ARTIST_ALL_SONGS = 6;\n    public static final int TYPE_PLAYLIST_ALL_SONGS = 7;\n\n    MediaSession mSession;\n    public static WearBrowserService sInstance;\n\n    private Context mContext;\n    private boolean mServiceStarted;\n\n    public static WearBrowserService getInstance() {\n        return sInstance;\n    }\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        sInstance = this;\n        mContext = this;\n        mSession = new MediaSession(this, "WearBrowserService");\n        setSessionToken(mSession.getSessionToken());\n        mSession.setCallback(new MediaSessionCallback());\n        mSession.setFlags(MediaSession.FLAG_HANDLES_MEDIA_BUTTONS | MediaSession.FLAG_HANDLES_TRANSPORT_CONTROLS);\n\n    }\n\n    @Override\n    public int onStartCommand(Intent startIntent, int flags, int startId) {\n        return START_STICKY;\n    }\n\n    @Override\n    public void onDestroy() {\n        mServiceStarted = false;\n        mSession.release();\n    }\n\n    @Override\n    public void onLoadChildren(String parentId, Result<List<MediaBrowser.MediaItem>> result) {\n\n        result.detach();\n        loadChildren(parentId, result);\n\n    }\n\n    @Nullable\n    @Override\n    public BrowserRoot onGetRoot(String clientPackageName, int clientUid, Bundle rootHints) {\n        return new BrowserRoot(MEDIA_ID_ROOT, null);\n    }\n\n    private final class MediaSessionCallback extends MediaSession.Callback {\n\n        @Override\n        public void onPlay() {\n            setSessionActive();\n        }\n\n        @Override\n        public void onSeekTo(long position) {\n\n        }\n\n        @Override\n        public void onPlayFromMediaId(final String mediaId, Bundle extras) {\n            long songId = Long.parseLong(mediaId);\n            setSessionActive();\n            MusicPlayer.playAll(mContext, new long[]{songId}, 0, -1, TimberUtils.IdType.NA, false);\n        }\n\n        @Override\n        public void onPause() {\n\n        }\n\n        @Override\n        public void onStop() {\n            setSessionInactive();\n        }\n\n        @Override\n        public void onSkipToNext() {\n\n        }\n\n        @Override\n        public void onSkipToPrevious() {\n\n        }\n\n        @Override\n        public void onFastForward() {\n\n        }\n\n        @Override\n        public void onRewind() {\n\n        }\n\n        @Override\n        public void onCustomAction(String action, Bundle extras) {\n\n        }\n    }\n\n    private void setSessionActive() {\n        if (!mServiceStarted) {\n            startService(new Intent(getApplicationContext(), WearBrowserService.class));\n            mServiceStarted = true;\n        }\n\n        if (!mSession.isActive()) {\n            mSession.setActive(true);\n        }\n    }\n\n    private void setSessionInactive() {\n        if (mServiceStarted) {\n            stopSelf();\n            mServiceStarted = false;\n        }\n\n        if (mSession.isActive()) {\n            mSession.setActive(false);\n        }\n    }\n\n    private void addMediaRoots(List<MediaBrowser.MediaItem> mMediaRoot) {\n        mMediaRoot.add(new MediaBrowser.MediaItem(\n                new MediaDescription.Builder()\n                        .setMediaId(Integer.toString(TYPE_ARTIST))\n                        .setTitle(getString(R.string.artists))\n                        .setIconUri(Uri.parse("android.resource://" +\n                                "naman14.timber/drawable/ic_empty_music2"))\n                        .setSubtitle(getString(R.string.artists))\n                        .build(), MediaBrowser.MediaItem.FLAG_BROWSABLE\n        ));\n\n        mMediaRoot.add(new MediaBrowser.MediaItem(\n                new MediaDescription.Builder()\n                        .setMediaId(Integer.toString(TYPE_ALBUM))\n                        .setTitle(getString(R.string.albums))\n                        .setIconUri(Uri.parse("android.resource://" +\n                                "naman14.timber/drawable/ic_empty_music2"))\n                        .setSubtitle(getString(R.string.albums))\n                        .build(), MediaBrowser.MediaItem.FLAG_BROWSABLE\n        ));\n\n        mMediaRoot.add(new MediaBrowser.MediaItem(\n                new MediaDescription.Builder()\n                        .setMediaId(Integer.toString(TYPE_SONG))\n                        .setTitle(getString(R.string.songs))\n                        .setIconUri(Uri.parse("android.resource://" +\n                                "naman14.timber/drawable/ic_empty_music2"))\n                        .setSubtitle(getString(R.string.songs))\n                        .build(), MediaBrowser.MediaItem.FLAG_BROWSABLE\n        ));\n\n\n        mMediaRoot.add(new MediaBrowser.MediaItem(\n                new MediaDescription.Builder()\n                        .setMediaId(Integer.toString(TYPE_PLAYLIST))\n                        .setTitle(getString(R.string.playlists))\n                        .setIconUri(Uri.parse("android.resource://" +\n                                "naman14.timber/drawable/ic_empty_music2"))\n                        .setSubtitle(getString(R.string.playlists))\n                        .build(), MediaBrowser.MediaItem.FLAG_BROWSABLE\n        ));\n\n    }\n\n\n    private void loadChildren(final String parentId, final Result<List<MediaBrowser.MediaItem>> result) {\n\n        final List<MediaBrowser.MediaItem> mediaItems = new ArrayList<>();\n\n        new AsyncTask<Void, Void, Void>() {\n            @Override\n            protected Void doInBackground(final Void... unused) {\n\n                if (parentId.equals(MEDIA_ID_ROOT)) {\n                    addMediaRoots(mediaItems);\n                } else {\n                    switch (Integer.parseInt(Character.toString(parentId.charAt(0)))) {\n                        case TYPE_ARTIST:\n                            List<Artist> artistList = ArtistLoader.getAllArtists(mContext);\n                            for (Artist artist : artistList) {\n                                String albumNmber = TimberUtils.makeLabel(mContext, R.plurals.Nalbums, artist.albumCount);\n                                String songCount = TimberUtils.makeLabel(mContext, R.plurals.Nsongs, artist.songCount);\n                                fillMediaItems(mediaItems, Integer.toString(TYPE_ARTIST_SONG_ALBUMS) + Long.toString(artist.id), artist.name, Uri.parse("android.resource://" +\n                                        "naman14.timber/drawable/ic_empty_music2"), TimberUtils.makeCombinedString(mContext, albumNmber, songCount), MediaBrowser.MediaItem.FLAG_BROWSABLE);\n                            }\n                            break;\n                        case TYPE_ALBUM:\n                            List<Album> albumList = AlbumLoader.getAllAlbums(mContext);\n                            for (Album album : albumList) {\n                                fillMediaItems(mediaItems, Integer.toString(TYPE_ALBUM_SONGS) + Long.toString(album.id), album.title, TimberUtils.getAlbumArtUri(album.id), album.artistName, MediaBrowser.MediaItem.FLAG_BROWSABLE);\n                            }\n                            break;\n                        case TYPE_SONG:\n                            List<Song> songList = SongLoader.getAllSongs(mContext);\n                            for (Song song : songList) {\n                                fillMediaItems(mediaItems, String.valueOf(song.id), song.title, TimberUtils.getAlbumArtUri(song.albumId), song.artistName, MediaBrowser.MediaItem.FLAG_PLAYABLE);\n                            }\n                            break;\n                        case TYPE_ALBUM_SONGS:\n                            List<Song> albumSongList = AlbumSongLoader.getSongsForAlbum(mContext, Long.parseLong(parentId.substring(1)));\n                            for (Song song : albumSongList) {\n                                fillMediaItems(mediaItems, String.valueOf(song.id), song.title, TimberUtils.getAlbumArtUri(song.albumId), song.artistName, MediaBrowser.MediaItem.FLAG_PLAYABLE);\n                            }\n                            break;\n                        case TYPE_ARTIST_SONG_ALBUMS:\n                            fillMediaItems(mediaItems, Integer.toString(TYPE_ARTIST_ALL_SONGS) + Long.parseLong(parentId.substring(1)), "All songs", Uri.parse("android.resource://" +\n                                    "naman14.timber/drawable/ic_empty_music2"), "All songs by artist", MediaBrowser.MediaItem.FLAG_BROWSABLE);\n                            List<Album> artistAlbums = ArtistAlbumLoader.getAlbumsForArtist(mContext, Long.parseLong(parentId.substring(1)));\n                            for (Album album : artistAlbums) {\n                                String songCount = TimberUtils.makeLabel(mContext, R.plurals.Nsongs, album.songCount);\n                                fillMediaItems(mediaItems, Integer.toString(TYPE_ALBUM_SONGS) + Long.toString(album.id), album.title, TimberUtils.getAlbumArtUri(album.id), songCount, MediaBrowser.MediaItem.FLAG_BROWSABLE);\n\n                            }\n                            break;\n                        case TYPE_ARTIST_ALL_SONGS:\n                            List<Song> artistSongs = ArtistSongLoader.getSongsForArtist(mContext, Long.parseLong(parentId.substring(1)));\n                            for (Song song : artistSongs) {\n                                fillMediaItems(mediaItems, String.valueOf(song.id), song.title, TimberUtils.getAlbumArtUri(song.albumId), song.albumName, MediaBrowser.MediaItem.FLAG_PLAYABLE);\n                            }\n                            break;\n                        case TYPE_PLAYLIST:\n                            List<Playlist> playlistList = PlaylistLoader.getPlaylists(mContext, false);\n                            for (Playlist playlist : playlistList) {\n                                String songCount = TimberUtils.makeLabel(mContext, R.plurals.Nsongs, playlist.songCount);\n                                fillMediaItems(mediaItems, Integer.toString(TYPE_PLAYLIST_ALL_SONGS) + Long.toString(playlist.id), playlist.name,\n                                        Uri.parse("android.resource://" +\n                                                "naman14.timber/drawable/ic_empty_music2"), songCount, MediaBrowser.MediaItem.FLAG_BROWSABLE);\n                            }\n                            break;\n                        case TYPE_PLAYLIST_ALL_SONGS:\n                            List<Song> playlistSongs = PlaylistSongLoader.getSongsInPlaylist(mContext, Long.parseLong(parentId.substring(1)));\n                            for (Song song : playlistSongs) {\n                                fillMediaItems(mediaItems, String.valueOf(song.id), song.title, TimberUtils.getAlbumArtUri(song.albumId), song.albumName, MediaBrowser.MediaItem.FLAG_PLAYABLE);\n                            }\n                            break;\n\n                    }\n                }\n                return null;\n            }\n\n            @Override\n            protected void onPostExecute(Void aVoid) {\n                result.sendResult(mediaItems);\n            }\n        }.execute();\n\n    }\n\n    private void fillMediaItems(List<MediaBrowser.MediaItem> mediaItems, String mediaId, String title, Uri icon, String subTitle, int playableOrBrowsable) {\n        mediaItems.add(new MediaBrowser.MediaItem(\n                new MediaDescription.Builder()\n                        .setMediaId(mediaId)\n                        .setTitle(title)\n                        .setIconUri(icon)\n                        .setSubtitle(subTitle)\n                        .build(), playableOrBrowsable\n        ));\n    }\n\n}\n'