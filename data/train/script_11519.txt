b'module Database.Beam.Sqlite.Test.Insert (tests) where\n\nimport Data.Int (Int32)\nimport Data.Text (Text)\nimport Data.Time (LocalTime, Day(..), UTCTime(..), fromGregorian, getCurrentTime, secondsToDiffTime)\nimport Database.Beam\nimport Database.Beam.Backend.SQL.BeamExtensions\nimport Database.Beam.Sqlite hiding (runInsertReturningList)\nimport Database.SQLite.Simple (execute_)\nimport Test.Tasty\nimport Test.Tasty.ExpectedFailure\nimport Test.Tasty.HUnit\n\nimport Database.Beam.Sqlite.Test\n\ntests :: TestTree\ntests = testGroup "Insertion tests"\n  [ testInsertReturningColumnOrder\n  , testInsertOnlyDefaults\n  , expectFail testUpsertOnlyDefaults\n  ]\n\ndata TestTableT f\n  = TestTable\n  { ttId :: C f Int32\n  , ttFirstName :: C f Text\n  , ttLastName  :: C f Text\n  , ttAge       :: C f Int32\n  , ttDateJoined :: C f LocalTime\n  , ttDateLoggedIn :: C f UTCTime\n  } deriving (Generic, Beamable)\n\nderiving instance Show (TestTableT Identity)\nderiving instance Eq (TestTableT Identity)\n\ninstance Table TestTableT where\n  data PrimaryKey TestTableT f = TestTableKey (C f Int32)\n    deriving (Generic, Beamable)\n  primaryKey = TestTableKey <$> ttId\n\ndata TestTableDb entity\n  = TestTableDb\n  { dbTestTable :: entity (TableEntity TestTableT)\n  } deriving (Generic, Database Sqlite)\n\ntestDatabase :: DatabaseSettings be TestTableDb\ntestDatabase = defaultDbSettings\n\ntestInsertReturningColumnOrder :: TestTree\ntestInsertReturningColumnOrder = testCase "runInsertReturningList with mismatching column order" $ do\n  now <- getCurrentTime\n  let zeroUtcTime = UTCTime (ModifiedJulianDay 0) 0\n  let oneUtcTime = UTCTime (fromGregorian 1 0 0) (secondsToDiffTime 0)\n\n  withTestDb $ \\conn -> do\n    execute_ conn "CREATE TABLE test_table ( date_joined TIMESTAMP NOT NULL, date_logged_in TIMESTAMP WITH TIME ZONE NOT NULL, first_name TEXT NOT NULL, id INT PRIMARY KEY, age INT NOT NULL, last_name TEXT NOT NULL )"\n    inserted <-\n      runBeamSqlite conn $ runInsertReturningList $\n      insert (dbTestTable testDatabase) $\n      insertExpressions [ TestTable 0 (concat_ [ "j", "im" ]) "smith" 19 currentTimestamp_ (val_ zeroUtcTime)\n                        , TestTable 1 "sally" "apple" ((val_ 56 + val_ 109) `div_` 5) currentTimestamp_ (val_ oneUtcTime)\n                        , TestTable 4 "blah" "blah" (-1) currentTimestamp_ (val_ now) ]\n\n    let dateJoined = ttDateJoined (head inserted)\n\n        expected = [ TestTable 0 "jim" "smith" 19 dateJoined zeroUtcTime\n                   , TestTable 1 "sally" "apple" 33 dateJoined oneUtcTime\n                   , TestTable 4 "blah" "blah" (-1) dateJoined now ]\n\n    assertEqual "insert values" inserted expected\n\ndata WithDefaultsT f = WithDefaults\n  { _id :: C f (SqlSerial Int32)\n  , _value :: C f Text\n  } deriving (Generic, Beamable)\n\nderiving instance Show (WithDefaultsT Identity)\nderiving instance Eq (WithDefaultsT Identity)\n\ninstance Table WithDefaultsT where\n  data PrimaryKey WithDefaultsT f = WithDefaultsKey (C f (SqlSerial Int32))\n    deriving (Generic, Beamable)\n  primaryKey = WithDefaultsKey <$> _id\n\ndata WithDefaultsDb entity = WithDefaultsDb\n  { tblWithDefaults :: entity (TableEntity WithDefaultsT)\n  } deriving (Generic, Database Sqlite)\n\nwithDefaultsDb :: DatabaseSettings be WithDefaultsDb\nwithDefaultsDb = defaultDbSettings\n\n-- | Regression test for <https://github.com/haskell-beam/beam/issues/607 #607>\ntestInsertOnlyDefaults :: TestTree\ntestInsertOnlyDefaults = testCase "insert only default values" $\n  withTestDb $ \\conn -> do\n    execute_ conn "CREATE TABLE with_defaults (id INTEGER PRIMARY KEY, value TEXT NOT NULL DEFAULT \\"unknown\\")"\n    inserted <- runBeamSqlite conn $ runInsertReturningList $\n      insert (tblWithDefaults withDefaultsDb) $ insertExpressions\n        [ WithDefaults default_ default_\n        , WithDefaults default_ $ val_ "other"\n        ]\n    assertEqual "inserted values" inserted\n      [ WithDefaults 1 "unknown"\n      , WithDefaults 2 "other"\n      ]\n\ntestUpsertOnlyDefaults :: TestTree\ntestUpsertOnlyDefaults = testCase "upsert only default values" $\n  withTestDb $ \\conn -> do\n    execute_ conn "CREATE TABLE with_defaults (id INTEGER PRIMARY KEY, value TEXT NOT NULL DEFAULT \\"unknown\\")"\n    inserted <- runBeamSqlite conn $ runInsertReturningList $\n      insertOnConflict (tblWithDefaults withDefaultsDb)\n        ( insertExpressions\n            [ WithDefaults default_ default_\n            , WithDefaults default_ $ val_ "other"\n            ]\n        )\n        anyConflict\n        onConflictDoNothing\n    assertEqual "inserted values" inserted\n      [ WithDefaults 1 "unknown"\n      , WithDefaults 2 "other"\n      ]\n'