b'#load "Domain.fs"\n#load "Operations.fs"\n#r @"..\\packages\\FSharp.Data.SqlClient.1.8.2\\lib\\net40\\FSharp.Data.SqlClient.dll"\n#load "SqlRepository.fs"\n\nopen Capstone6.Operations\nopen Capstone6.Domain\nopen System\nopen FSharp.Data\n\n// Copied from SqlRepository.fs, this allows you to test out the queries and commands in isolation.\nlet [<Literal>] Conn = @"Data Source=(localdb)\\MSSQLLocalDB;Database=BankAccountDb;Integrated Security=True;Connect Timeout=60"\ntype AccountsDb = SqlProgrammabilityProvider<Conn>\ntype GetAccountId = SqlCommandProvider<"SELECT TOP 1 AccountId FROM dbo.Account WHERE Owner = @owner", Conn, SingleRow = true>\ntype FindTransactions = SqlCommandProvider<"SELECT Timestamp, OperationId, Amount FROM dbo.AccountTransaction WHERE AccountId = @accountId", Conn>\ntype FindTransactionsByOwner = SqlCommandProvider<"SELECT a.AccountId, at.Timestamp, at.OperationId, at.Amount FROM dbo.Account a LEFT JOIN dbo.AccountTransaction at on a.AccountId = at.AccountId WHERE Owner = @owner", Conn>\ntype DbOperations = SqlEnumProvider<"SELECT Description, OperationId FROM dbo.Operation", Conn>\n\n// Get an accountId and then associated transactions. Note that I\'m using .Value to "unwrap" the\n// optional accountId. This is unsafe and should NEVER be done in "real" code; use either pattern\n// matching or Option.map. I\'m using it here as (a) this is a demo script, and (b) the database\n// is primed with an account that I know about.\nlet accountId = GetAccountId.Create(Conn).Execute("isaac")\nlet transactions = FindTransactions.Create(Conn).Execute(accountId.Value) |> Seq.toArray'