b'{-# LANGUAGE DataKinds #-}\n{-# LANGUAGE DeriveGeneric #-}\n{-# LANGUAGE GeneralizedNewtypeDeriving #-}\n{-# LANGUAGE InstanceSigs #-}\n{-# LANGUAGE OverloadedStrings #-}\n{-# LANGUAGE QuasiQuotes #-}\n{-# LANGUAGE RecordWildCards #-}\n{-# LANGUAGE TypeApplications #-}\n{-# LANGUAGE TypeFamilies #-}\n\n-- | [Auth0](https://auth0.com)\n--\n--   * [Auth0 Authorize Application](https://auth0.com/docs/api/authentication#authorize-application)\n--\n--   * [OAuth 2.0 Authorization Framework](https://auth0.com/docs/authenticate/protocols/oauth)\nmodule Network.OAuth2.Provider.Auth0 where\n\nimport Control.Monad.IO.Class\nimport Control.Monad.Trans.Except\nimport Data.Aeson\nimport Data.Map.Strict qualified as Map\nimport Data.Set qualified as Set\nimport Data.Text.Lazy (Text)\nimport GHC.Generics\nimport Network.OAuth.OAuth2\nimport Network.OAuth2.Experiment\nimport Network.OIDC.WellKnown\nimport URI.ByteString.QQ\n\ndata Auth0 = Auth0\n  deriving (Show, Eq)\n\ntype instance IdpUserInfo Auth0 = Auth0User\n\ndefaultAuth0App :: Idp Auth0 -> IdpApplication \'AuthorizationCode Auth0\ndefaultAuth0App i =\n  AuthorizationCodeIdpApplication\n    { idpAppClientId = ""\n    , idpAppClientSecret = ""\n    , idpAppScope = Set.fromList ["openid", "profile", "email", "offline_access"]\n    , idpAppAuthorizeState = "CHANGE_ME"\n    , idpAppAuthorizeExtraParams = Map.empty\n    , idpAppRedirectUri = [uri|http://localhost|]\n    , idpAppName = "default-auth0-App"\n    , idpAppTokenRequestAuthenticationMethod = ClientSecretBasic\n    , idp = i\n    }\n\ndefaultAuth0Idp :: Idp Auth0\ndefaultAuth0Idp =\n  Idp\n    { idpFetchUserInfo = authGetJSON @(IdpUserInfo Auth0)\n    , --  https://auth0.com/docs/api/authentication#user-profile\n      idpUserInfoEndpoint = [uri|https://foo.auth0.com/userinfo|]\n    , -- https://auth0.com/docs/api/authentication#authorization-code-flow\n      idpAuthorizeEndpoint = [uri|https://foo.auth0.com/authorize|]\n    , -- https://auth0.com/docs/api/authentication#authorization-code-flow44\n      idpTokenEndpoint = [uri|https://foo.auth0.com/oauth/token|]\n    }\n\nmkAuth0Idp ::\n  MonadIO m =>\n  -- | Full domain with no http protocol. e.g. @foo.auth0.com@\n  Text ->\n  ExceptT Text m (Idp Auth0)\nmkAuth0Idp domain = do\n  OpenIDConfigurationUris {..} <- fetchWellKnownUris domain\n  pure\n    ( defaultAuth0Idp\n        { idpUserInfoEndpoint = userinfoUri\n        , idpAuthorizeEndpoint = authorizationUri\n        , idpTokenEndpoint = tokenUri\n        }\n    )\n\n-- | https://auth0.com/docs/api/authentication#user-profile\ndata Auth0User = Auth0User\n  { name :: Text\n  , email :: Text\n  , sub :: Text\n  }\n  deriving (Show, Generic)\n\ninstance FromJSON Auth0User\n'