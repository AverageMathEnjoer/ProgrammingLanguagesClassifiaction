b'{-# LANGUAGE NoImplicitPrelude #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n{-# LANGUAGE InstanceSigs #-}\n\nmodule Course.Extend where\n\nimport Course.Core\nimport Course.ExactlyOne\nimport Course.List\nimport Course.Optional\nimport Course.Functor\n\n-- | All instances of the `Extend` type-class must satisfy one law. This law\n-- is not checked by the compiler. This law is given as:\n--\n-- * The law of associativity\n--   `\xe2\x88\x80f g. (f <<=) . (g <<=) \xe2\x89\x85 (<<=) (f . (g <<=))`\nclass Functor f => Extend f where\n  -- Pronounced, extend.\n  (<<=) ::\n    (f a -> b)\n    -> f a\n    -> f b\n\ninfixr 1 <<=\n\n-- | Implement the @Extend@ instance for @ExactlyOne@.\n--\n-- >>> id <<= ExactlyOne 7\n-- ExactlyOne (ExactlyOne 7)\ninstance Extend ExactlyOne where\n  (<<=) ::\n    (ExactlyOne a -> b)\n    -> ExactlyOne a\n    -> ExactlyOne b\n  (<<=) =\n    error "todo: Course.Extend (<<=)#instance ExactlyOne"\n\n-- | Implement the @Extend@ instance for @List@.\n--\n-- >>> length <<= (\'a\' :. \'b\' :. \'c\' :. Nil)\n-- [3,2,1]\n--\n-- >>> id <<= (1 :. 2 :. 3 :. 4 :. Nil)\n-- [[1,2,3,4],[2,3,4],[3,4],[4]]\n--\n-- >>> reverse <<= ((1 :. 2 :. 3 :. Nil) :. (4 :. 5 :. 6 :. Nil) :. Nil)\n-- [[[4,5,6],[1,2,3]],[[4,5,6]]]\ninstance Extend List where\n  (<<=) ::\n    (List a -> b)\n    -> List a\n    -> List b\n  (<<=) =\n    error "todo: Course.Extend (<<=)#instance List"\n\n-- | Implement the @Extend@ instance for @Optional@.\n--\n-- >>> id <<= (Full 7)\n-- Full (Full 7)\n--\n-- >>> id <<= Empty\n-- Empty\ninstance Extend Optional where\n  (<<=) ::\n    (Optional a -> b)\n    -> Optional a\n    -> Optional b\n  (<<=) =\n    error "todo: Course.Extend (<<=)#instance Optional"\n\n-- | Duplicate the functor using extension.\n--\n-- >>> cojoin (ExactlyOne 7)\n-- ExactlyOne (ExactlyOne 7)\n--\n-- >>> cojoin (1 :. 2 :. 3 :. 4 :. Nil)\n-- [[1,2,3,4],[2,3,4],[3,4],[4]]\n--\n-- >>> cojoin (Full 7)\n-- Full (Full 7)\n--\n-- >>> cojoin Empty\n-- Empty\ncojoin ::\n  Extend f =>\n  f a\n  -> f (f a)\ncojoin =\n  error "todo: Course.Extend#cojoin"\n'