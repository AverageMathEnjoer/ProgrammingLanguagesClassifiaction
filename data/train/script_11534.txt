b'package effectivejava.chapter3.item10.inheritance;\n\nimport effectivejava.chapter3.item10.Color;\nimport effectivejava.chapter3.item10.Point;\n\n// Attempting to add a value component to Point (Page 41)\npublic class ColorPoint extends Point {\n    private final Color color;\n\n    public ColorPoint(int x, int y, Color color) {\n        super(x, y);\n        this.color = color;\n    }\n\n    // Broken - violates symmetry!  (Page 41)\n    @Override public boolean equals(Object o) {\n        if (!(o instanceof ColorPoint))\n            return false;\n        return super.equals(o) && ((ColorPoint) o).color == color;\n    }\n\n//    // Broken - violates transitivity! (page 42)\n//    @Override public boolean equals(Object o) {\n//        if (!(o instanceof Point))\n//            return false;\n//\n//        // If o is a normal Point, do a color-blind comparison\n//        if (!(o instanceof ColorPoint))\n//            return o.equals(this);\n//\n//        // o is a ColorPoint; do a full comparison\n//        return super.equals(o) && ((ColorPoint) o).color == color;\n//    }\n\n    public static void main(String[] args) {\n        // First equals function violates symmetry (Page 42)\n        Point p = new Point(1, 2);\n        ColorPoint cp = new ColorPoint(1, 2, Color.RED);\n        System.out.println(p.equals(cp) + " " + cp.equals(p));\n\n        // Second equals function violates transitivity (Page 42)\n        ColorPoint p1 = new ColorPoint(1, 2, Color.RED);\n        Point p2 = new Point(1, 2);\n        ColorPoint p3 = new ColorPoint(1, 2, Color.BLUE);\n        System.out.printf("%s %s %s%n",\n                          p1.equals(p2), p2.equals(p3), p1.equals(p3));\n    }\n}\n'