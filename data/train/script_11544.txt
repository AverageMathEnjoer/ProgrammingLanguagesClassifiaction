b'\n\n-- import Control.Monad.IO.Class\n-- import Control.Monad.Par.IO\n-- import Control.Monad.Par.Class\n\n-- import Control.Monad.Par.Scheds.Trace\nimport Control.Monad.Par.Scheds.Direct\n\nimport System.IO.Unsafe(unsafePerformIO)\nimport System.IO\n\n\nfoo :: Par Int\nfoo = do fork $ loop 0\n         return 3\n\nloop :: Integer -> Par ()\nloop n = do case unsafePerformIO (dot n) of\n             () -> return ()\n            loop (n+1)\n\ndot :: Integer -> IO ()\ndot n | n `mod` 10000 == 0 =\n  do putStr "."\n     hFlush stdout\ndot _ = return ()\n\nmain :: IO ()\nmain = do\n  putStrLn "Launching runPar:"\n  x <- runParIO foo\n  putStrLn "Returned from runPar:"  \n  print x\n  '