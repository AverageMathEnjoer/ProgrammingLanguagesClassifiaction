b'package com.codeest.geeknews.di.module;\n\nimport com.codeest.geeknews.BuildConfig;\nimport com.codeest.geeknews.app.Constants;\nimport com.codeest.geeknews.di.qualifier.GankUrl;\nimport com.codeest.geeknews.di.qualifier.GoldUrl;\nimport com.codeest.geeknews.di.qualifier.MyUrl;\nimport com.codeest.geeknews.di.qualifier.VtexUrl;\nimport com.codeest.geeknews.di.qualifier.WechatUrl;\nimport com.codeest.geeknews.di.qualifier.ZhihuUrl;\nimport com.codeest.geeknews.model.http.api.GankApis;\nimport com.codeest.geeknews.model.http.api.GoldApis;\nimport com.codeest.geeknews.model.http.api.MyApis;\nimport com.codeest.geeknews.model.http.api.VtexApis;\nimport com.codeest.geeknews.model.http.api.WeChatApis;\nimport com.codeest.geeknews.model.http.api.ZhihuApis;\nimport com.codeest.geeknews.util.SystemUtil;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.concurrent.TimeUnit;\n\nimport javax.inject.Singleton;\n\nimport dagger.Module;\nimport dagger.Provides;\nimport okhttp3.Cache;\nimport okhttp3.CacheControl;\nimport okhttp3.Interceptor;\nimport okhttp3.OkHttpClient;\nimport okhttp3.Request;\nimport okhttp3.Response;\nimport okhttp3.logging.HttpLoggingInterceptor;\nimport retrofit2.Retrofit;\nimport retrofit2.adapter.rxjava2.RxJava2CallAdapterFactory;\nimport retrofit2.converter.gson.GsonConverterFactory;\n\n/**\n * Created by codeest on 2017/2/26.\n */\n\n@Module\npublic class HttpModule {\n\n    @Singleton\n    @Provides\n    Retrofit.Builder provideRetrofitBuilder() {\n        return new Retrofit.Builder();\n    }\n\n\n    @Singleton\n    @Provides\n    OkHttpClient.Builder provideOkHttpBuilder() {\n        return new OkHttpClient.Builder();\n    }\n\n    @Singleton\n    @Provides\n    @ZhihuUrl\n    Retrofit provideZhihuRetrofit(Retrofit.Builder builder, OkHttpClient client) {\n        return createRetrofit(builder, client, ZhihuApis.HOST);\n    }\n\n    @Singleton\n    @Provides\n    @WechatUrl\n    Retrofit provideWechatRetrofit(Retrofit.Builder builder, OkHttpClient client) {\n        return createRetrofit(builder, client, WeChatApis.HOST);\n    }\n\n    @Singleton\n    @Provides\n    @GankUrl\n    Retrofit provideGankRetrofit(Retrofit.Builder builder, OkHttpClient client) {\n        return createRetrofit(builder, client, GankApis.HOST);\n    }\n\n    @Singleton\n    @Provides\n    @GoldUrl\n    Retrofit provideGoldRetrofit(Retrofit.Builder builder, OkHttpClient client) {\n        return createRetrofit(builder, client, GoldApis.HOST);\n    }\n\n    @Singleton\n    @Provides\n    @VtexUrl\n    Retrofit provideVtexRetrofit(Retrofit.Builder builder, OkHttpClient client) {\n        return createRetrofit(builder, client, VtexApis.HOST);\n    }\n\n    @Singleton\n    @Provides\n    @MyUrl\n    Retrofit provideMyRetrofit(Retrofit.Builder builder, OkHttpClient client) {\n        return createRetrofit(builder, client, MyApis.HOST);\n    }\n\n    @Singleton\n    @Provides\n    OkHttpClient provideClient(OkHttpClient.Builder builder) {\n        if (BuildConfig.DEBUG) {\n            HttpLoggingInterceptor loggingInterceptor = new HttpLoggingInterceptor();\n            loggingInterceptor.setLevel(HttpLoggingInterceptor.Level.BASIC);\n            builder.addInterceptor(loggingInterceptor);\n        }\n        File cacheFile = new File(Constants.PATH_CACHE);\n        Cache cache = new Cache(cacheFile, 1024 * 1024 * 50);\n        Interceptor cacheInterceptor = new Interceptor() {\n            @Override\n            public Response intercept(Chain chain) throws IOException {\n                Request request = chain.request();\n                if (!SystemUtil.isNetworkConnected()) {\n                    request = request.newBuilder()\n                            .cacheControl(CacheControl.FORCE_CACHE)\n                            .build();\n                }\n                Response response = chain.proceed(request);\n                if (SystemUtil.isNetworkConnected()) {\n                    int maxAge = 0;\n                    // \xe6\x9c\x89\xe7\xbd\x91\xe7\xbb\x9c\xe6\x97\xb6, \xe4\xb8\x8d\xe7\xbc\x93\xe5\xad\x98, \xe6\x9c\x80\xe5\xa4\xa7\xe4\xbf\x9d\xe5\xad\x98\xe6\x97\xb6\xe9\x95\xbf\xe4\xb8\xba0\n                    response.newBuilder()\n                            .header("Cache-Control", "public, max-age=" + maxAge)\n                            .removeHeader("Pragma")\n                            .build();\n                } else {\n                    // \xe6\x97\xa0\xe7\xbd\x91\xe7\xbb\x9c\xe6\x97\xb6\xef\xbc\x8c\xe8\xae\xbe\xe7\xbd\xae\xe8\xb6\x85\xe6\x97\xb6\xe4\xb8\xba4\xe5\x91\xa8\n                    int maxStale = 60 * 60 * 24 * 28;\n                    response.newBuilder()\n                            .header("Cache-Control", "public, only-if-cached, max-stale=" + maxStale)\n                            .removeHeader("Pragma")\n                            .build();\n                }\n                return response;\n            }\n        };\n//        Interceptor apikey = new Interceptor() {\n//            @Override\n//            public Response intercept(Chain chain) throws IOException {\n//                Request request = chain.request();\n//                request = request.newBuilder()\n//                        .addHeader("apikey",Constants.KEY_API)\n//                        .build();\n//                return chain.proceed(request);\n//            }\n//        }\n//        \xe8\xae\xbe\xe7\xbd\xae\xe7\xbb\x9f\xe4\xb8\x80\xe7\x9a\x84\xe8\xaf\xb7\xe6\xb1\x82\xe5\xa4\xb4\xe9\x83\xa8\xe5\x8f\x82\xe6\x95\xb0\n//        builder.addInterceptor(apikey);\n        //\xe8\xae\xbe\xe7\xbd\xae\xe7\xbc\x93\xe5\xad\x98\n        builder.addNetworkInterceptor(cacheInterceptor);\n        builder.addInterceptor(cacheInterceptor);\n        builder.cache(cache);\n        //\xe8\xae\xbe\xe7\xbd\xae\xe8\xb6\x85\xe6\x97\xb6\n        builder.connectTimeout(10, TimeUnit.SECONDS);\n        builder.readTimeout(20, TimeUnit.SECONDS);\n        builder.writeTimeout(20, TimeUnit.SECONDS);\n        //\xe9\x94\x99\xe8\xaf\xaf\xe9\x87\x8d\xe8\xbf\x9e\n        builder.retryOnConnectionFailure(true);\n        return builder.build();\n    }\n\n    @Singleton\n    @Provides\n    ZhihuApis provideZhihuService(@ZhihuUrl Retrofit retrofit) {\n        return retrofit.create(ZhihuApis.class);\n    }\n\n    @Singleton\n    @Provides\n    GankApis provideGankService(@GankUrl  Retrofit retrofit) {\n        return retrofit.create(GankApis.class);\n    }\n\n    @Singleton\n    @Provides\n    WeChatApis provideWechatService(@WechatUrl Retrofit retrofit) {\n        return retrofit.create(WeChatApis.class);\n    }\n\n    @Singleton\n    @Provides\n    GoldApis provideGoldService(@GoldUrl Retrofit retrofit) {\n        return retrofit.create(GoldApis.class);\n    }\n\n    @Singleton\n    @Provides\n    VtexApis provideVtexService(@VtexUrl Retrofit retrofit) {\n        return retrofit.create(VtexApis.class);\n    }\n\n    @Singleton\n    @Provides\n    MyApis provideMyService(@MyUrl Retrofit retrofit) {\n        return retrofit.create(MyApis.class);\n    }\n\n    private Retrofit createRetrofit(Retrofit.Builder builder, OkHttpClient client, String url) {\n        return builder\n                .baseUrl(url)\n                .client(client)\n                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())\n                .addConverterFactory(GsonConverterFactory.create())\n                .build();\n    }\n}\n'