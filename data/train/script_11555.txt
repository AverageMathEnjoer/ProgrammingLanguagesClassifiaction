b'using System;\nusing System.Diagnostics;\nusing System.Text;\n\nnamespace CS_SQLite3\n{\n  using sqlite3_value = CSSQLite.Mem;\n\n  public partial class CSSQLite\n  {\n    /*\n    ** 2008 June 18\n    **\n    ** The author disclaims copyright to this source code.  In place of\n    ** a legal notice, here is a blessing:\n    **\n    **    May you do good and not evil.\n    **    May you find forgiveness for yourself and forgive others.\n    **    May you share freely, never taking more than you give.\n    **\n    *************************************************************************\n    **\n    ** This module implements the sqlite3_status() interface and related\n    ** functionality.\n    **\n    ** $Id: status.c,v 1.9 2008/09/02 00:52:52 drh Exp $\n    **\n    *************************************************************************\n    **  Included in SQLite3 port to C#-SQLite;  2008 Noah B Hart\n    **  C#-SQLite is an independent reimplementation of the SQLite software library\n    **\n    **  $Header$\n    *************************************************************************\n    */\n    //#include "sqliteInt.h"\n\n    /*\n    ** Variables in which to record status information.\n    */\n    //typedef struct sqlite3StatType sqlite3StatType;\n    public class sqlite3StatType\n    {\n      public int[] nowValue = new int[9];        /* Current value */\n      public int[] mxValue = new int[9];           /* Maximum value */\n    }\n    public static sqlite3StatType sqlite3Stat = new sqlite3StatType();\n\n    /* The "wsdStat" macro will resolve to the status information\n    ** state vector.  If writable static data is unsupported on the target,\n    ** we have to locate the state vector at run-time.  In the more common\n    ** case where writable static data is supported, wsdStat can refer directly\n    ** to the "sqlite3Stat" state vector declared above.\n    */\n#if SQLITE_OMIT_WSD\n//# define wsdStatInit  sqlite3StatType *x = &GLOBAL(sqlite3StatType,sqlite3Stat)\n//# define wsdStat x[0]\n#else\n    //# define wsdStatInit\n    static void wsdStatInit() { }\n    //# define wsdStat sqlite3Stat\n    static sqlite3StatType wsdStat = sqlite3Stat;\n#endif\n\n    /*\n** Return the current value of a status parameter.\n*/\n    static int sqlite3StatusValue( int op )\n    {\n      wsdStatInit();\n      Debug.Assert( op >= 0 && op < ArraySize( wsdStat.nowValue ) );\n      return wsdStat.nowValue[op];\n    }\n\n    /*\n    ** Add N to the value of a status record.  It is assumed that the\n    ** caller holds appropriate locks.\n    */\n    static void sqlite3StatusAdd( int op, int N )\n    {\n      wsdStatInit();\n      Debug.Assert( op >= 0 && op < ArraySize( wsdStat.nowValue ) );\n      wsdStat.nowValue[op] += N;\n      if ( wsdStat.nowValue[op] > wsdStat.mxValue[op] )\n      {\n        wsdStat.mxValue[op] = wsdStat.nowValue[op];\n      }\n    }\n\n    /*\n    ** Set the value of a status to X.\n    */\n    static void sqlite3StatusSet( int op, int X )\n    {\n      wsdStatInit();\n      Debug.Assert( op >= 0 && op < ArraySize( wsdStat.nowValue ) );\n      wsdStat.nowValue[op] = X;\n      if ( wsdStat.nowValue[op] > wsdStat.mxValue[op] )\n      {\n        wsdStat.mxValue[op] = wsdStat.nowValue[op];\n      }\n    }\n\n    /*\n    ** Query status information.\n    **\n    ** This implementation assumes that reading or writing an aligned\n    ** 32-bit integer is an atomic operation.  If that assumption is not true,\n    ** then this routine is not threadsafe.\n    */\n    static int sqlite3_status( int op, ref int pCurrent, ref int pHighwater, int resetFlag )\n    {\n      wsdStatInit();\n      if ( op < 0 || op >= ArraySize( wsdStat.nowValue ) )\n      {\n        return SQLITE_MISUSE;\n      }\n      pCurrent = wsdStat.nowValue[op];\n      pHighwater = wsdStat.mxValue[op];\n      if ( resetFlag != 0 )\n      {\n        wsdStat.mxValue[op] = wsdStat.nowValue[op];\n      }\n      return SQLITE_OK;\n    }\n    /*\n    ** Query status information for a single database connection\n    */\n    int sqlite3_db_status(\n    sqlite3 db,          /* The database connection whose status is desired */\n    int op,              /* Status verb */\n    ref int pCurrent,    /* Write current value here */\n    ref int pHighwater,  /* Write high-water mark here */\n    int resetFlag        /* Reset high-water mark if true */\n    )\n    {\n      switch ( op )\n      {\n        case SQLITE_DBSTATUS_LOOKASIDE_USED:\n          {\n            pCurrent = db.lookaside.nOut;\n            pHighwater = db.lookaside.mxOut;\n            if ( resetFlag != 0 )\n            {\n              db.lookaside.mxOut = db.lookaside.nOut;\n            }\n            break;\n          }\n        default:\n          {\n            return SQLITE_ERROR;\n          }\n      }\n      return SQLITE_OK;\n    }\n  }\n}\n'