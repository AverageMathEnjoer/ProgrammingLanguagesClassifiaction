b'package effectivejava.chapter6.item37;\nimport java.util.*;\nimport java.util.stream.Stream;\n\nimport static java.util.stream.Collectors.*;\n\n// Using a nested EnumMap to associate data with enum pairs - (Pages 174-5)\npublic enum Phase {\n    SOLID, LIQUID, GAS;\n    public enum Transition {\n        MELT(SOLID, LIQUID), FREEZE(LIQUID, SOLID),\n        BOIL(LIQUID, GAS), CONDENSE(GAS, LIQUID),\n        SUBLIME(SOLID, GAS), DEPOSIT(GAS, SOLID);\n\n//        // Adding a new phase (Page 175)\n//        SOLID, LIQUID, GAS, PLASMA;\n//        public enum Transition {\n//            MELT(SOLID, LIQUID), FREEZE(LIQUID, SOLID),\n//            BOIL(LIQUID, GAS), CONDENSE(GAS, LIQUID),\n//            SUBLIME(SOLID, GAS), DEPOSIT(GAS, SOLID),\n//            IONIZE(GAS, PLASMA), DEIONIZE(PLASMA, GAS);\n\n        private final Phase from;\n        private final Phase to;\n        Transition(Phase from, Phase to) {\n            this.from = from;\n            this.to = to;\n        }\n\n        // Initialize the phase transition map\n        private static final Map<Phase, Map<Phase, Transition>>\n                m = Stream.of(values()).collect(groupingBy(t -> t.from,\n                () -> new EnumMap<>(Phase.class),\n                toMap(t -> t.to, t -> t,\n                        (x, y) -> y, () -> new EnumMap<>(Phase.class))));\n        \n        public static Transition from(Phase from, Phase to) {\n            return m.get(from).get(to);\n        }\n    }\n\n    // Simple demo program - prints a sloppy table\n    public static void main(String[] args) {\n        for (Phase src : Phase.values()) {\n            for (Phase dst : Phase.values()) {\n                Transition transition = Transition.from(src, dst);\n                if (transition != null)\n                    System.out.printf("%s to %s : %s %n", src, dst, transition);\n            }\n        }\n    }\n}\n'