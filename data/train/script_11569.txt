b'package com.rd.animation.controller;\n\nimport androidx.annotation.NonNull;\nimport com.rd.animation.type.AnimationType;\nimport com.rd.animation.type.BaseAnimation;\nimport com.rd.draw.data.Indicator;\nimport com.rd.draw.data.Orientation;\nimport com.rd.utils.CoordinatesUtils;\n\npublic class AnimationController {\n\n    private ValueController valueController;\n    private ValueController.UpdateListener listener;\n\n    private BaseAnimation runningAnimation;\n    private Indicator indicator;\n\n    private float progress;\n    private boolean isInteractive;\n\n    public AnimationController(@NonNull Indicator indicator, @NonNull ValueController.UpdateListener listener) {\n        this.valueController = new ValueController(listener);\n        this.listener = listener;\n        this.indicator = indicator;\n    }\n\n    public void interactive(float progress) {\n        this.isInteractive = true;\n        this.progress = progress;\n        animate();\n    }\n\n    public void basic() {\n        this.isInteractive = false;\n        this.progress = 0;\n        animate();\n    }\n\n    public void end() {\n        if (runningAnimation != null) {\n            runningAnimation.end();\n        }\n    }\n\n    private void animate() {\n        AnimationType animationType = indicator.getAnimationType();\n        switch (animationType) {\n            case NONE:\n                listener.onValueUpdated(null);\n                break;\n\n            case COLOR:\n                colorAnimation();\n                break;\n\n            case SCALE:\n                scaleAnimation();\n                break;\n\n            case WORM:\n                wormAnimation();\n                break;\n\n            case FILL:\n                fillAnimation();\n                break;\n\n            case SLIDE:\n                slideAnimation();\n                break;\n\n            case THIN_WORM:\n                thinWormAnimation();\n                break;\n\n            case DROP:\n                dropAnimation();\n                break;\n\n            case SWAP:\n                swapAnimation();\n                break;\n\n            case SCALE_DOWN:\n                scaleDownAnimation();\n                break;\n        }\n    }\n\n    private void colorAnimation() {\n        int selectedColor = indicator.getSelectedColor();\n        int unselectedColor = indicator.getUnselectedColor();\n        long animationDuration = indicator.getAnimationDuration();\n\n        BaseAnimation animation = valueController\n                .color()\n                .with(unselectedColor, selectedColor)\n                .duration(animationDuration);\n\n        if (isInteractive) {\n            animation.progress(progress);\n        } else {\n            animation.start();\n        }\n\n        runningAnimation = animation;\n    }\n\n    private void scaleAnimation() {\n        int selectedColor = indicator.getSelectedColor();\n        int unselectedColor = indicator.getUnselectedColor();\n        int radiusPx = indicator.getRadius();\n        float scaleFactor = indicator.getScaleFactor();\n        long animationDuration = indicator.getAnimationDuration();\n\n        BaseAnimation animation = valueController\n                .scale()\n                .with(unselectedColor, selectedColor, radiusPx, scaleFactor)\n                .duration(animationDuration);\n\n        if (isInteractive) {\n            animation.progress(progress);\n        } else {\n            animation.start();\n        }\n\n        runningAnimation = animation;\n    }\n\n    private void wormAnimation() {\n        int fromPosition = indicator.isInteractiveAnimation() ? indicator.getSelectedPosition() : indicator.getLastSelectedPosition();\n        int toPosition = indicator.isInteractiveAnimation() ? indicator.getSelectingPosition() : indicator.getSelectedPosition();\n\n        int from = CoordinatesUtils.getCoordinate(indicator, fromPosition);\n        int to = CoordinatesUtils.getCoordinate(indicator, toPosition);\n        boolean isRightSide = toPosition > fromPosition;\n\n        int radiusPx = indicator.getRadius();\n        long animationDuration = indicator.getAnimationDuration();\n\n        BaseAnimation animation = valueController\n                .worm()\n                .with(from, to, radiusPx, isRightSide)\n                .duration(animationDuration);\n\n        if (isInteractive) {\n            animation.progress(progress);\n        } else {\n            animation.start();\n        }\n\n        runningAnimation = animation;\n    }\n\n    private void slideAnimation() {\n        int fromPosition = indicator.isInteractiveAnimation() ? indicator.getSelectedPosition() : indicator.getLastSelectedPosition();\n        int toPosition = indicator.isInteractiveAnimation() ? indicator.getSelectingPosition() : indicator.getSelectedPosition();\n\n        int from = CoordinatesUtils.getCoordinate(indicator, fromPosition);\n        int to = CoordinatesUtils.getCoordinate(indicator, toPosition);\n        long animationDuration = indicator.getAnimationDuration();\n\n        BaseAnimation animation = valueController\n                .slide()\n                .with(from, to)\n                .duration(animationDuration);\n\n        if (isInteractive) {\n            animation.progress(progress);\n        } else {\n            animation.start();\n        }\n\n        runningAnimation = animation;\n    }\n\n    private void fillAnimation() {\n        int selectedColor = indicator.getSelectedColor();\n        int unselectedColor = indicator.getUnselectedColor();\n        int radiusPx = indicator.getRadius();\n        int strokePx = indicator.getStroke();\n        long animationDuration = indicator.getAnimationDuration();\n\n        BaseAnimation animation = valueController\n                .fill()\n                .with(unselectedColor, selectedColor, radiusPx, strokePx)\n                .duration(animationDuration);\n\n        if (isInteractive) {\n            animation.progress(progress);\n        } else {\n            animation.start();\n        }\n\n        runningAnimation = animation;\n    }\n\n    private void thinWormAnimation() {\n        int fromPosition = indicator.isInteractiveAnimation() ? indicator.getSelectedPosition() : indicator.getLastSelectedPosition();\n        int toPosition = indicator.isInteractiveAnimation() ? indicator.getSelectingPosition() : indicator.getSelectedPosition();\n\n        int from = CoordinatesUtils.getCoordinate(indicator, fromPosition);\n        int to = CoordinatesUtils.getCoordinate(indicator, toPosition);\n        boolean isRightSide = toPosition > fromPosition;\n\n        int radiusPx = indicator.getRadius();\n        long animationDuration = indicator.getAnimationDuration();\n\n        BaseAnimation animation = valueController\n                .thinWorm()\n                .with(from, to, radiusPx, isRightSide)\n                .duration(animationDuration);\n\n        if (isInteractive) {\n            animation.progress(progress);\n        } else {\n            animation.start();\n        }\n\n        runningAnimation = animation;\n    }\n\n    private void dropAnimation() {\n        int fromPosition = indicator.isInteractiveAnimation() ? indicator.getSelectedPosition() : indicator.getLastSelectedPosition();\n        int toPosition = indicator.isInteractiveAnimation() ? indicator.getSelectingPosition() : indicator.getSelectedPosition();\n\n        int widthFrom = CoordinatesUtils.getCoordinate(indicator, fromPosition);\n        int widthTo = CoordinatesUtils.getCoordinate(indicator, toPosition);\n\n        int paddingTop = indicator.getPaddingTop();\n        int paddingLeft = indicator.getPaddingLeft();\n        int padding = indicator.getOrientation() == Orientation.HORIZONTAL ? paddingTop : paddingLeft;\n\n        int radius = indicator.getRadius();\n        int heightFrom = radius * 3 + padding;\n        int heightTo = radius + padding;\n\n        long animationDuration = indicator.getAnimationDuration();\n\n        BaseAnimation animation = valueController\n                .drop()\n                .duration(animationDuration)\n                .with(widthFrom, widthTo, heightFrom, heightTo, radius);\n\n        if (isInteractive) {\n            animation.progress(progress);\n        } else {\n            animation.start();\n        }\n\n        runningAnimation = animation;\n    }\n\n    private void swapAnimation() {\n        int fromPosition = indicator.isInteractiveAnimation() ? indicator.getSelectedPosition() : indicator.getLastSelectedPosition();\n        int toPosition = indicator.isInteractiveAnimation() ? indicator.getSelectingPosition() : indicator.getSelectedPosition();\n\n        int from = CoordinatesUtils.getCoordinate(indicator, fromPosition);\n        int to = CoordinatesUtils.getCoordinate(indicator, toPosition);\n        long animationDuration = indicator.getAnimationDuration();\n\n        BaseAnimation animation = valueController\n                .swap()\n                .with(from, to)\n                .duration(animationDuration);\n\n        if (isInteractive) {\n            animation.progress(progress);\n        } else {\n            animation.start();\n        }\n\n        runningAnimation = animation;\n    }\n\n    private void scaleDownAnimation() {\n        int selectedColor = indicator.getSelectedColor();\n        int unselectedColor = indicator.getUnselectedColor();\n        int radiusPx = indicator.getRadius();\n        float scaleFactor = indicator.getScaleFactor();\n        long animationDuration = indicator.getAnimationDuration();\n\n        BaseAnimation animation = valueController\n                .scaleDown()\n                .with(unselectedColor, selectedColor, radiusPx, scaleFactor)\n                .duration(animationDuration);\n\n        if (isInteractive) {\n            animation.progress(progress);\n        } else {\n            animation.start();\n        }\n\n        runningAnimation = animation;\n    }\n}\n\n'