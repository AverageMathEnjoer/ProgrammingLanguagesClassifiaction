b'module Cachix.Deploy.OptionsParser where\n\nimport Options.Applicative\nimport Protolude\n\ndata DeployCommand\n  = Activate ActivateOptions\n  | Agent AgentOptions\n  deriving (Show)\n\nparser :: Parser DeployCommand\nparser =\n  subparser $\n    mconcat\n      [ command "activate" $\n          info\n            (helper <*> activate)\n            (progDesc "Deploy a new configuration to agents using CACHIX_ACTIVATE_TOKEN. See https://docs.cachix.org/deploy/deploying-to-agents"),\n        command "agent" $\n          info\n            (helper <*> agent)\n            (progDesc "Run an agent in foreground using CACHIX_AGENT_TOKEN. See https://docs.cachix.org/deploy/running-an-agent/")\n      ]\n  where\n    activate = Activate <$> parserActivateOptions\n    agent = Agent <$> parserAgentOptions\n\ndata AgentOptions = AgentOptions\n  { name :: Text,\n    profile :: Maybe Text,\n    bootstrap :: Bool\n  }\n  deriving (Show)\n\ndata ActivateOptions = ActivateOptions\n  { payloadPath :: FilePath,\n    agents :: [Text],\n    deployAsync :: Bool\n  }\n  deriving (Show)\n\nparserAgentOptions :: Parser AgentOptions\nparserAgentOptions =\n  AgentOptions\n    <$> strArgument\n      ( metavar "AGENT-NAME"\n          <> help "Unique agent identifier (usually hostname)."\n      )\n    <*> optional\n      ( strArgument\n          ( metavar "NIX-PROFILE"\n              <> help "Nix profile to manage. Defaults to \'system\' on NixOS, \'system-profiles/system\' (nix-darwin) on macOS, and \'home-manager\' for Home Manager."\n          )\n      )\n    <*> switch (long "bootstrap" <> help "Exit once the system agent takes over.")\n\nparserActivateOptions :: Parser ActivateOptions\nparserActivateOptions =\n  ActivateOptions\n    <$> strArgument\n      ( metavar "DEPLOY-SPEC.JSON"\n          <> help "https://docs.cachix.org/deploy/reference.html#deploy-json"\n      )\n    <*> many\n      ( strOption\n          ( long "agent"\n              <> short \'a\'\n              <> metavar "AGENT-NAME"\n              <> help "Deploy only specific agent(s)."\n          )\n      )\n    <*> switch (long "async" <> help "Skip waiting for the agents to deploy")\n'