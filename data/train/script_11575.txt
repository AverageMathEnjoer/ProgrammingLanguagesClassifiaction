b'context("optim")\ntest_that("optim gives same results", {\n  set.seed(1)\n  dds <- makeExampleDESeqDataSet(n=100,interceptMean=10,interceptSD=3)\n  dds <- estimateSizeFactors(dds)\n  dds <- estimateDispersions(dds)\n  # make a large predictor to test scaling\n  colData(dds)$condition <- rnorm(ncol(dds),0,1000)\n  modelMatrix <- model.matrix(~ condition, as.data.frame(colData(dds)))\n  fit <- DESeq2:::fitNbinomGLMs(dds, modelMatrix=modelMatrix, \n                                modelFormula = ~ condition,\n                                alpha_hat = dispersions(dds),\n                                lambda = c(2,2),\n                                renameCols=TRUE, betaTol=1e-8,\n                                maxit=100, useOptim=TRUE,\n                                useQR=TRUE, forceOptim=FALSE)\n  fitOptim <- DESeq2:::fitNbinomGLMs(dds, modelMatrix=modelMatrix, \n                                     modelFormula = ~ condition,\n                                     alpha_hat = dispersions(dds),\n                                     lambda = c(2,2),\n                                     renameCols=TRUE, betaTol=1e-8,\n                                     maxit=100, useOptim=TRUE,\n                                     useQR=TRUE, forceOptim=TRUE)\n  #plot(fit$betaMatrix[,2], fitOptim$betaMatrix[,2])\n  #abline(0,1,col="red")\n  expect_equal(fit$betaMatrix, fitOptim$betaMatrix,tolerance=1e-6)\n  expect_equal(fit$betaSE, fitOptim$betaSE,tolerance=1e-6)\n\n  # test optim gives same lfcSE\n  set.seed(1)\n  dds <- makeExampleDESeqDataSet(n=100, m=10)\n  counts(dds)[1,] <- c(rep(0L,5),c(1000L,1000L,0L,0L,0L))\n  dds <- DESeq(dds, betaPrior=FALSE)\n  # beta iter = 100 implies optim used for fitting\n  expect_equal(mcols(dds)$betaIter[1], 100)\n  res1 <- results(dds, contrast=c("condition","B","A"))\n  res2 <- results(dds, contrast=c(0,1))\n  expect_true(all.equal(res1$lfcSE, res2$lfcSE))\n  expect_true(all.equal(res1$pvalue, res2$pvalue))\n})\n'