b'{-# LANGUAGE MultiParamTypeClasses #-}\n\n-- ! BUILD_OPTIONS: -fglasgow-exts -XTypeFamilies -XOverloadedStrings -XPartialTypeSignatures -XTypeApplications -XStandaloneDeriving -XFlexibleInstances -XMultiParamTypeClasses -XDeriveGeneric -XFlexibleContexts -fno-warn-partial-type-signatures -i$$BEAM_SOURCE$$/beam-sqlite/examples/\n-- ! BUILD_DIR: beam-sqlite/examples/\nmodule Main where\n\nimport Database.Beam\nimport Database.Beam.Backend.Types\nimport qualified Database.Beam.Query.Adhoc as Adhoc\nBEAM_MODULE_IMPORT\n\nimport Control.Monad\nimport Control.Exception\n\nimport Data.IORef\nimport Data.Monoid ((<>))\nimport Data.Int\nimport Data.Text\n\nimport Chinook.Schema\n\nimport System.IO\n\ndata BeamDone = BeamDone\n  deriving (Show)\ninstance Exception BeamDone\n\nBEAM_BACKEND_EXTRA\n\nexampleQuery :: Q BEAM_BACKEND ChinookDb s _\nexampleQuery =\n  BEAM_PLACEHOLDER\n\ndisplayStmtList display stmtsV =\n  do mkStmtList <- readIORef stmtsV\n     let stmtList = mkStmtList []\n\n     forM_ stmtList $ \\stmt ->\n       display stmt\n\nmain :: IO ()\nmain =\n  do\n     BEAM_OPEN_DATABASE\n\n     stmts <- newIORef id\n\n     let onStmt s = modifyIORef stmts (. (s:))\n\n         record :: BEAM_BACKEND_MONAD a -> IO a\n         record = BEAM_WITH_DATABASE_DEBUG onStmt chinook\n\n     flip onException (displayStmtList (hPutStrLn stderr) stmts) $\n       handle (\\BeamDone -> pure ()) $\n       docsWithTransaction chinook $ do\n         record $ runSelectReturningList $ select $ exampleQuery\n         throwIO BeamDone\n\n     displayStmtList putStrLn stmts\n'