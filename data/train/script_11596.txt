b'{-# LANGUAGE GeneralizedNewtypeDeriving #-}\n\n-- | Name is an atomic symbol\n--\n-- Note that `IsString` instance is a partial function\n\nmodule Pdf.Core.Name\n(\n  Name,\n  make,\n  toByteString\n)\nwhere\n\nimport Data.String\nimport Data.ByteString (ByteString)\nimport qualified Data.ByteString as ByteString\nimport Data.Hashable (Hashable)\n\n-- | Names usually are used as keys in dictionaries\n--\n-- Byte 0 is not allowed inside names\nnewtype Name = Name ByteString\n  deriving (Eq, Show, Ord, Monoid, Semigroup, Hashable)\n\n-- | Make a name.\n--\n-- Throws if the bytestring contains 0\nmake :: ByteString -> Either String Name\nmake bs\n  | ByteString.any (== 0) bs\n  = Left "Name.make: 0 byte is not allowed"\n  | otherwise\n  = Right (Name bs)\n\n-- | Unwrap name to bytestring\ntoByteString :: Name -> ByteString\ntoByteString (Name bs) = bs\n\ninstance IsString Name where\n  fromString = either error id . make . fromString\n'