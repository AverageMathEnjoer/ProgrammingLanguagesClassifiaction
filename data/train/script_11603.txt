b'/* \n * QR Code generator demo (Java)\n * \n * Run this command-line program with no arguments. The program creates/overwrites a bunch of\n * PNG and SVG files in the current working directory to demonstrate the creation of QR Codes.\n * \n * Copyright (c) Project Nayuki. (MIT License)\n * https://www.nayuki.io/page/qr-code-generator-library\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy of\n * this software and associated documentation files (the "Software"), to deal in\n * the Software without restriction, including without limitation the rights to\n * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n * the Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n * - The above copyright notice and this permission notice shall be included in\n *   all copies or substantial portions of the Software.\n * - The Software is provided "as is", without warranty of any kind, express or\n *   implied, including but not limited to the warranties of merchantability,\n *   fitness for a particular purpose and noninfringement. In no event shall the\n *   authors or copyright holders be liable for any claim, damages or other\n *   liability, whether in an action of contract, tort or otherwise, arising from,\n *   out of or in connection with the Software or the use or other dealings in the\n *   Software.\n */\n\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Objects;\nimport javax.imageio.ImageIO;\nimport io.nayuki.qrcodegen.QrCode;\nimport io.nayuki.qrcodegen.QrSegment;\nimport io.nayuki.qrcodegen.QrSegmentAdvanced;\n\n\npublic final class QrCodeGeneratorDemo {\n\t\n\t// The main application program.\n\tpublic static void main(String[] args) throws IOException {\n\t\tdoBasicDemo();\n\t\tdoVarietyDemo();\n\t\tdoSegmentDemo();\n\t\tdoMaskDemo();\n\t}\n\t\n\t\n\t\n\t/*---- Demo suite ----*/\n\t\n\t// Creates a single QR Code, then writes it to a PNG file and an SVG file.\n\tprivate static void doBasicDemo() throws IOException {\n\t\tString text = "Hello, world!";          // User-supplied Unicode text\n\t\tQrCode.Ecc errCorLvl = QrCode.Ecc.LOW;  // Error correction level\n\t\t\n\t\tQrCode qr = QrCode.encodeText(text, errCorLvl);  // Make the QR Code symbol\n\t\t\n\t\tBufferedImage img = toImage(qr, 10, 4);          // Convert to bitmap image\n\t\tFile imgFile = new File("hello-world-QR.png");   // File path for output\n\t\tImageIO.write(img, "png", imgFile);              // Write image to file\n\t\t\n\t\tString svg = toSvgString(qr, 4, "#FFFFFF", "#000000");  // Convert to SVG XML code\n\t\tFile svgFile = new File("hello-world-QR.svg");          // File path for output\n\t\tFiles.write(svgFile.toPath(),                           // Write image to file\n\t\t\tsvg.getBytes(StandardCharsets.UTF_8));\n\t}\n\t\n\t\n\t// Creates a variety of QR Codes that exercise different features of the library, and writes each one to file.\n\tprivate static void doVarietyDemo() throws IOException {\n\t\tQrCode qr;\n\t\t\n\t\t// Numeric mode encoding (3.33 bits per digit)\n\t\tqr = QrCode.encodeText("314159265358979323846264338327950288419716939937510", QrCode.Ecc.MEDIUM);\n\t\twritePng(toImage(qr, 13, 1), "pi-digits-QR.png");\n\t\t\n\t\t// Alphanumeric mode encoding (5.5 bits per character)\n\t\tqr = QrCode.encodeText("DOLLAR-AMOUNT:$39.87 PERCENTAGE:100.00% OPERATIONS:+-*/", QrCode.Ecc.HIGH);\n\t\twritePng(toImage(qr, 10, 2), "alphanumeric-QR.png");\n\t\t\n\t\t// Unicode text as UTF-8\n\t\tqr = QrCode.encodeText("\xe3\x81\x93\xe3\x82\x93\xe3\x81\xab\xe3\x81\xa1wa\xe3\x80\x81\xe4\xb8\x96\xe7\x95\x8c\xef\xbc\x81 \xce\xb1\xce\xb2\xce\xb3\xce\xb4", QrCode.Ecc.QUARTILE);\n\t\twritePng(toImage(qr, 10, 3), "unicode-QR.png");\n\t\t\n\t\t// Moderately large QR Code using longer text (from Lewis Carroll\'s Alice in Wonderland)\n\t\tqr = QrCode.encodeText(\n\t\t\t"Alice was beginning to get very tired of sitting by her sister on the bank, "\n\t\t\t+ "and of having nothing to do: once or twice she had peeped into the book her sister was reading, "\n\t\t\t+ "but it had no pictures or conversations in it, \'and what is the use of a book,\' thought Alice "\n\t\t\t+ "\'without pictures or conversations?\' So she was considering in her own mind (as well as she could, "\n\t\t\t+ "for the hot day made her feel very sleepy and stupid), whether the pleasure of making a "\n\t\t\t+ "daisy-chain would be worth the trouble of getting up and picking the daisies, when suddenly "\n\t\t\t+ "a White Rabbit with pink eyes ran close by her.", QrCode.Ecc.HIGH);\n\t\twritePng(toImage(qr, 6, 10), "alice-wonderland-QR.png");\n\t}\n\t\n\t\n\t// Creates QR Codes with manually specified segments for better compactness.\n\tprivate static void doSegmentDemo() throws IOException {\n\t\tQrCode qr;\n\t\tList<QrSegment> segs;\n\t\t\n\t\t// Illustration "silver"\n\t\tString silver0 = "THE SQUARE ROOT OF 2 IS 1.";\n\t\tString silver1 = "41421356237309504880168872420969807856967187537694807317667973799";\n\t\tqr = QrCode.encodeText(silver0 + silver1, QrCode.Ecc.LOW);\n\t\twritePng(toImage(qr, 10, 3), "sqrt2-monolithic-QR.png");\n\t\t\n\t\tsegs = Arrays.asList(\n\t\t\tQrSegment.makeAlphanumeric(silver0),\n\t\t\tQrSegment.makeNumeric(silver1));\n\t\tqr = QrCode.encodeSegments(segs, QrCode.Ecc.LOW);\n\t\twritePng(toImage(qr, 10, 3), "sqrt2-segmented-QR.png");\n\t\t\n\t\t// Illustration "golden"\n\t\tString golden0 = "Golden ratio \xcf\x86 = 1.";\n\t\tString golden1 = "6180339887498948482045868343656381177203091798057628621354486227052604628189024497072072041893911374";\n\t\tString golden2 = "......";\n\t\tqr = QrCode.encodeText(golden0 + golden1 + golden2, QrCode.Ecc.LOW);\n\t\twritePng(toImage(qr, 8, 5), "phi-monolithic-QR.png");\n\t\t\n\t\tsegs = Arrays.asList(\n\t\t\tQrSegment.makeBytes(golden0.getBytes(StandardCharsets.UTF_8)),\n\t\t\tQrSegment.makeNumeric(golden1),\n\t\t\tQrSegment.makeAlphanumeric(golden2));\n\t\tqr = QrCode.encodeSegments(segs, QrCode.Ecc.LOW);\n\t\twritePng(toImage(qr, 8, 5), "phi-segmented-QR.png");\n\t\t\n\t\t// Illustration "Madoka": kanji, kana, Cyrillic, full-width Latin, Greek characters\n\t\tString madoka = "\xe3\x80\x8c\xe9\xad\x94\xe6\xb3\x95\xe5\xb0\x91\xe5\xa5\xb3\xe3\x81\xbe\xe3\x81\xa9\xe3\x81\x8b\xe2\x98\x86\xe3\x83\x9e\xe3\x82\xae\xe3\x82\xab\xe3\x80\x8d\xe3\x81\xa3\xe3\x81\xa6\xe3\x80\x81\xe3\x80\x80\xd0\x98\xd0\x90\xd0\x98\xe3\x80\x80\xef\xbd\x84\xef\xbd\x85\xef\xbd\x93\xef\xbd\x95\xe3\x80\x80\xce\xba\xce\xb1\xef\xbc\x9f";\n\t\tqr = QrCode.encodeText(madoka, QrCode.Ecc.LOW);\n\t\twritePng(toImage(qr, 9, 4, 0xFFFFE0, 0x303080), "madoka-utf8-QR.png");\n\t\t\n\t\tsegs = Arrays.asList(QrSegmentAdvanced.makeKanji(madoka));\n\t\tqr = QrCode.encodeSegments(segs, QrCode.Ecc.LOW);\n\t\twritePng(toImage(qr, 9, 4, 0xE0F0FF, 0x404040), "madoka-kanji-QR.png");\n\t}\n\t\n\t\n\t// Creates QR Codes with the same size and contents but different mask patterns.\n\tprivate static void doMaskDemo() throws IOException {\n\t\tQrCode qr;\n\t\tList<QrSegment> segs;\n\t\t\n\t\t// Project Nayuki URL\n\t\tsegs = QrSegment.makeSegments("https://www.nayuki.io/");\n\t\tqr = QrCode.encodeSegments(segs, QrCode.Ecc.HIGH, QrCode.MIN_VERSION, QrCode.MAX_VERSION, -1, true);  // Automatic mask\n\t\twritePng(toImage(qr, 8, 6, 0xE0FFE0, 0x206020), "project-nayuki-automask-QR.png");\n\t\tqr = QrCode.encodeSegments(segs, QrCode.Ecc.HIGH, QrCode.MIN_VERSION, QrCode.MAX_VERSION, 3, true);  // Force mask 3\n\t\twritePng(toImage(qr, 8, 6, 0xFFE0E0, 0x602020), "project-nayuki-mask3-QR.png");\n\t\t\n\t\t// Chinese text as UTF-8\n\t\tsegs = QrSegment.makeSegments("\xe7\xb6\xad\xe5\x9f\xba\xe7\x99\xbe\xe7\xa7\x91\xef\xbc\x88Wikipedia\xef\xbc\x8c\xe8\x81\x86\xe8\x81\xbdi/\xcb\x8cw\xc9\xaak\xe1\xb5\xbb\xcb\x88pi\xcb\x90di.\xc9\x99/\xef\xbc\x89\xe6\x98\xaf\xe4\xb8\x80\xe5\x80\x8b\xe8\x87\xaa\xe7\x94\xb1\xe5\x85\xa7\xe5\xae\xb9\xe3\x80\x81\xe5\x85\xac\xe9\x96\x8b\xe7\xb7\xa8\xe8\xbc\xaf\xe4\xb8\x94\xe5\xa4\x9a\xe8\xaa\x9e\xe8\xa8\x80\xe7\x9a\x84\xe7\xb6\xb2\xe8\xb7\xaf\xe7\x99\xbe\xe7\xa7\x91\xe5\x85\xa8\xe6\x9b\xb8\xe5\x8d\x94\xe4\xbd\x9c\xe8\xa8\x88\xe7\x95\xab");\n\t\tqr = QrCode.encodeSegments(segs, QrCode.Ecc.MEDIUM, QrCode.MIN_VERSION, QrCode.MAX_VERSION, 0, true);  // Force mask 0\n\t\twritePng(toImage(qr, 10, 3), "unicode-mask0-QR.png");\n\t\tqr = QrCode.encodeSegments(segs, QrCode.Ecc.MEDIUM, QrCode.MIN_VERSION, QrCode.MAX_VERSION, 1, true);  // Force mask 1\n\t\twritePng(toImage(qr, 10, 3), "unicode-mask1-QR.png");\n\t\tqr = QrCode.encodeSegments(segs, QrCode.Ecc.MEDIUM, QrCode.MIN_VERSION, QrCode.MAX_VERSION, 5, true);  // Force mask 5\n\t\twritePng(toImage(qr, 10, 3), "unicode-mask5-QR.png");\n\t\tqr = QrCode.encodeSegments(segs, QrCode.Ecc.MEDIUM, QrCode.MIN_VERSION, QrCode.MAX_VERSION, 7, true);  // Force mask 7\n\t\twritePng(toImage(qr, 10, 3), "unicode-mask7-QR.png");\n\t}\n\t\n\t\n\t\n\t/*---- Utilities ----*/\n\t\n\tprivate static BufferedImage toImage(QrCode qr, int scale, int border) {\n\t\treturn toImage(qr, scale, border, 0xFFFFFF, 0x000000);\n\t}\n\t\n\t\n\t/**\n\t * Returns a raster image depicting the specified QR Code, with\n\t * the specified module scale, border modules, and module colors.\n\t * <p>For example, scale=10 and border=4 means to pad the QR Code with 4 light border\n\t * modules on all four sides, and use 10&#xD7;10 pixels to represent each module.\n\t * @param qr the QR Code to render (not {@code null})\n\t * @param scale the side length (measured in pixels, must be positive) of each module\n\t * @param border the number of border modules to add, which must be non-negative\n\t * @param lightColor the color to use for light modules, in 0xRRGGBB format\n\t * @param darkColor the color to use for dark modules, in 0xRRGGBB format\n\t * @return a new image representing the QR Code, with padding and scaling\n\t * @throws NullPointerException if the QR Code is {@code null}\n\t * @throws IllegalArgumentException if the scale or border is out of range, or if\n\t * {scale, border, size} cause the image dimensions to exceed Integer.MAX_VALUE\n\t */\n\tprivate static BufferedImage toImage(QrCode qr, int scale, int border, int lightColor, int darkColor) {\n\t\tObjects.requireNonNull(qr);\n\t\tif (scale <= 0 || border < 0)\n\t\t\tthrow new IllegalArgumentException("Value out of range");\n\t\tif (border > Integer.MAX_VALUE / 2 || qr.size + border * 2L > Integer.MAX_VALUE / scale)\n\t\t\tthrow new IllegalArgumentException("Scale or border too large");\n\t\t\n\t\tBufferedImage result = new BufferedImage((qr.size + border * 2) * scale, (qr.size + border * 2) * scale, BufferedImage.TYPE_INT_RGB);\n\t\tfor (int y = 0; y < result.getHeight(); y++) {\n\t\t\tfor (int x = 0; x < result.getWidth(); x++) {\n\t\t\t\tboolean color = qr.getModule(x / scale - border, y / scale - border);\n\t\t\t\tresult.setRGB(x, y, color ? darkColor : lightColor);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t\n\t\n\t// Helper function to reduce code duplication.\n\tprivate static void writePng(BufferedImage img, String filepath) throws IOException {\n\t\tImageIO.write(img, "png", new File(filepath));\n\t}\n\t\n\t\n\t/**\n\t * Returns a string of SVG code for an image depicting the specified QR Code, with the specified\n\t * number of border modules. The string always uses Unix newlines (\\n), regardless of the platform.\n\t * @param qr the QR Code to render (not {@code null})\n\t * @param border the number of border modules to add, which must be non-negative\n\t * @param lightColor the color to use for light modules, in any format supported by CSS, not {@code null}\n\t * @param darkColor the color to use for dark modules, in any format supported by CSS, not {@code null}\n\t * @return a string representing the QR Code as an SVG XML document\n\t * @throws NullPointerException if any object is {@code null}\n\t * @throws IllegalArgumentException if the border is negative\n\t */\n\tprivate static String toSvgString(QrCode qr, int border, String lightColor, String darkColor) {\n\t\tObjects.requireNonNull(qr);\n\t\tObjects.requireNonNull(lightColor);\n\t\tObjects.requireNonNull(darkColor);\n\t\tif (border < 0)\n\t\t\tthrow new IllegalArgumentException("Border must be non-negative");\n\t\tlong brd = border;\n\t\tStringBuilder sb = new StringBuilder()\n\t\t\t.append("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n")\n\t\t\t.append("<!DOCTYPE svg PUBLIC \\"-//W3C//DTD SVG 1.1//EN\\" \\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\\">\\n")\n\t\t\t.append(String.format("<svg xmlns=\\"http://www.w3.org/2000/svg\\" version=\\"1.1\\" viewBox=\\"0 0 %1$d %1$d\\" stroke=\\"none\\">\\n",\n\t\t\t\tqr.size + brd * 2))\n\t\t\t.append("\\t<rect width=\\"100%\\" height=\\"100%\\" fill=\\"" + lightColor + "\\"/>\\n")\n\t\t\t.append("\\t<path d=\\"");\n\t\tfor (int y = 0; y < qr.size; y++) {\n\t\t\tfor (int x = 0; x < qr.size; x++) {\n\t\t\t\tif (qr.getModule(x, y)) {\n\t\t\t\t\tif (x != 0 || y != 0)\n\t\t\t\t\t\tsb.append(" ");\n\t\t\t\t\tsb.append(String.format("M%d,%dh1v1h-1z", x + brd, y + brd));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn sb\n\t\t\t.append("\\" fill=\\"" + darkColor + "\\"/>\\n")\n\t\t\t.append("</svg>\\n")\n\t\t\t.toString();\n\t}\n\t\n}\n'