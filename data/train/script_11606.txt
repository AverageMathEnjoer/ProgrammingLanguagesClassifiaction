b'// UVa1602 Lattice Animals\n// Rujia Liu\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<set>\nusing namespace std;\n\nstruct Cell {\n  int x, y;\n  Cell(int x=0, int y=0):x(x),y(y) {};\n  bool operator < (const Cell& rhs) const {\n    return x < rhs.x || (x == rhs.x && y < rhs.y);\n  }\n};\n\ntypedef set<Cell> Polyomino;\n\n#define FOR_CELL(c, p) for(Polyomino::const_iterator c = (p).begin(); c != (p).end(); ++c)\n\ninline Polyomino normalize(const Polyomino &p) {\n  int minX = p.begin()->x, minY = p.begin()->y;\n  FOR_CELL(c, p) {\n    minX = min(minX, c->x);\n    minY = min(minY, c->y);\n  }\n  Polyomino p2;    \n  FOR_CELL(c, p)\n    p2.insert(Cell(c->x - minX, c->y - minY));\n  return p2;\n}\n\ninline Polyomino rotate(const Polyomino &p) {\n  Polyomino p2;\n  FOR_CELL(c, p)\n    p2.insert(Cell(c->y, -c->x));\n  return normalize(p2);\n}\n\ninline Polyomino flip(const Polyomino &p) {\n  Polyomino p2;\n  FOR_CELL(c, p)\n    p2.insert(Cell(c->x, -c->y));\n  return normalize(p2);\n}\n\nconst int dx[] = {-1,1,0,0};\nconst int dy[] = {0,0,-1,1};\nconst int maxn = 10;\n\nset<Polyomino> poly[maxn+1];\nint ans[maxn+1][maxn+1][maxn+1];\n\n// add a cell to p0 and check whether it\'s new. If so, add to the polyonimo set\nvoid check_polyomino(const Polyomino& p0, const Cell& c) {\n  Polyomino p = p0;\n  p.insert(c);\n  p = normalize(p);\n\n  int n = p.size();\n  for(int i = 0; i < 4; i++) {\n    if(poly[n].count(p) != 0) return;\n    p = rotate(p);\n  }      \n  p = flip(p);\n  for(int i = 0; i < 4; i++) {\n    if(poly[n].count(p) != 0) return;\n    p = rotate(p);\n  }\n  poly[n].insert(p);\n}\n\nvoid generate() {\n  Polyomino s;\n  s.insert(Cell(0, 0));\n  poly[1].insert(s);\n\n  // generate\n  for(int n = 2; n <= maxn; n++) {\n    for(set<Polyomino>::iterator p = poly[n-1].begin(); p != poly[n-1].end(); ++p)\n      FOR_CELL(c, *p)\n        for(int dir = 0; dir < 4; dir++) {\n          Cell newc(c->x + dx[dir], c->y + dy[dir]);\n          if(p->count(newc) == 0) check_polyomino(*p, newc);\n        }\n  }\n\n  // precompute answers\n  for(int n = 1; n <= maxn; n++)\n    for(int w = 1; w <= maxn; w++)\n      for(int h = 1; h <= maxn; h++) {\n        int cnt = 0;\n        for(set<Polyomino>::iterator p = poly[n].begin(); p != poly[n].end(); ++p) {\n          int maxX = 0, maxY = 0;\n          FOR_CELL(c, *p) {\n            maxX = max(maxX, c->x);\n            maxY = max(maxY, c->y);\n          }\n          if(min(maxX, maxY) < min(h, w) && max(maxX, maxY) < max(h, w))\n            ++cnt;\n        } \n        ans[n][w][h] = cnt;\n      }\n}\n\nint main() {\n  generate();\n\n  int n, w, h;\n  while(scanf("%d%d%d", &n, &w, &h) == 3) {\n    printf("%d\\n", ans[n][w][h]);\n  }\n  return 0;\n}\n'