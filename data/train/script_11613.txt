b'\xef\xbb\xbfusing Asn1;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Pkcs;\nusing System.Security.Cryptography.X509Certificates;\n\nnamespace Rubeus {\n    public class PA_PK_AS_REQ {\n\n        public static readonly Oid IdPkInitAuthData = new Oid("1.3.6.1.5.2.3.1");\n        public KrbAuthPack AuthPack { get; private set; }\n        public X509Certificate2 PKCert { get; private set; }\n        public KDCKeyAgreement Agreement { get; private set; }\n        public bool VerifyCerts { get; private set; }\n\n        public PA_PK_AS_REQ(KrbAuthPack krbAuthPack, X509Certificate2 pkCert, KDCKeyAgreement agreement, bool verifyCerts = false) {\n            AuthPack = krbAuthPack;\n            PKCert = pkCert;\n            Agreement = agreement;\n            VerifyCerts = verifyCerts;\n        }\n\n        public AsnElt Encode() {\n\n            SignedCms signed = new SignedCms(\n                new ContentInfo(\n                    IdPkInitAuthData,\n                    AuthPack.Encode().Encode()\n                )\n            );\n            \n            var signer = new CmsSigner(PKCert);\n            if(!VerifyCerts)\n            {\n                signer.IncludeOption = X509IncludeOption.EndCertOnly; // only the end certificate is included in the X.509 chain information.\n            }\n            signed.ComputeSignature(signer, silent: false);\n\n            return AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] {\n                AsnElt.Make(AsnElt.CONTEXT, 0, new AsnElt[]{\n                    AsnElt.MakeBlob(signed.Encode())\n                    //AsnElt.Decode(signed.Encode())\n                })\n            });\n        }\n    }\n}\n'