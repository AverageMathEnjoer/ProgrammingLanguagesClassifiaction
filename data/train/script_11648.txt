b'//http://codeforces.com/contest/707/submission/21781107\n//bitset begins\nunsigned ll allone = (1LL<<64)-1;\nstruct node{\n\t\n\t// MX = numbers needed in bitmask / 64\n\t#define MX 16\n\tint SIZE;\n\tint extra;\n\tunsigned ll mask[MX];\n\t\n\tnode(){\n\t\tint i;\n\t\tfo(i, MX) mask[i] = 0;\n\t}\n\t\n\t//n is total numbers for which bitset is needed\n\tvoid init(int n){\n\t\tSIZE = n/64;\n\t\tif(n%64) SIZE++;\n\t\textra = (n%64);\n\t\tif(!extra) extra = 64;\n\t\tint i;\n\t\tfo(i, SIZE) mask[i] = 0;\n\t}\n\t\n\t//returns true if bit was earlier off\n\tbool set(int pos){\n\t\tbool res = true;\n\t\tint idx = (pos-1)/64;\n\t\tint j = (pos-1)%64;\n\t\tif (mask[idx]&(1LL<<j)) res = false;\n\t\tmask[idx] |= (1LL<<j);\n\t\treturn res;\n\t}\n\t\n\t//returns true if bit was earlier on\n\tbool unset(int pos){\n\t\tbool res = false;\n\t\tint idx = (pos-1)/64;\n\t\tint j = (pos-1)%64;\n\t\tif (mask[idx]&(1LL<<j)) res = true;\n\t\tmask[idx] &= (allone)^(1LL<<j);\n\t\treturn res;\n\t}\n\t\n\tvoid complement(int idx){\n\t\tif (idx == SIZE-1){\n\t\t\tmask[idx] ^= ((1LL<<extra)-1);\n\t\t\treturn;\n\t\t}\n\t\tmask[idx] ^= allone;\n\t}\n\tvoid complementall(){\n\t\tint i;\n\t\tfo(i, SIZE) complement(i);\n\t}\n\t//returns how many bits are 1\n\tint ans(){\n\t\tint res = 0, i;\n\t\tfo(i, SIZE) res += __builtin_popcountll(mask[i]);\n\t\treturn res;\n\t}\n}bit[N];\n//bitset ends\n'