b'/*\n * Copyright (C) 2015 Naman Dwivedi\n *\n * Licensed under the GNU General Public License v3\n *\n * This is free software: you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n */\n\npackage com.naman14.timber.subfragments;\n\nimport android.graphics.Bitmap;\nimport android.graphics.Color;\nimport android.graphics.drawable.Drawable;\nimport android.graphics.drawable.TransitionDrawable;\nimport android.os.AsyncTask;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport androidx.fragment.app.Fragment;\n\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.ImageView;\nimport android.widget.LinearLayout;\nimport android.widget.ProgressBar;\nimport android.widget.SeekBar;\nimport android.widget.TextView;\n\nimport com.afollestad.appthemeengine.Config;\nimport com.naman14.timber.MusicPlayer;\nimport com.naman14.timber.R;\nimport com.naman14.timber.activities.BaseActivity;\nimport com.naman14.timber.listeners.MusicStateListener;\nimport com.naman14.timber.utils.Helpers;\nimport com.naman14.timber.utils.ImageUtils;\nimport com.naman14.timber.utils.NavigationUtils;\nimport com.naman14.timber.utils.PreferencesUtility;\nimport com.naman14.timber.utils.SlideTrackSwitcher;\nimport com.naman14.timber.utils.TimberUtils;\nimport com.naman14.timber.widgets.PlayPauseButton;\nimport com.nostra13.universalimageloader.core.DisplayImageOptions;\nimport com.nostra13.universalimageloader.core.ImageLoader;\nimport com.nostra13.universalimageloader.core.assist.FailReason;\nimport com.nostra13.universalimageloader.core.listener.ImageLoadingListener;\n\nimport net.steamcrafted.materialiconlib.MaterialIconView;\n\npublic class QuickControlsFragment extends Fragment implements MusicStateListener {\n\n\n    public static View topContainer;\n    private ProgressBar mProgress;\n    private SeekBar mSeekBar;\n    private int overflowcounter = 0;\n    private PlayPauseButton mPlayPause, mPlayPauseExpanded;\n    private TextView mTitle, mTitleExpanded;\n    private TextView mArtist, mArtistExpanded;\n    private ImageView mAlbumArt, mBlurredArt;\n    private View rootView;\n    private View playPauseWrapper, playPauseWrapperExpanded;\n    private MaterialIconView previous, next;\n    private boolean duetoplaypause = false;\n    private boolean fragmentPaused = false;\n\n    public Runnable mUpdateProgress = new Runnable() {\n\n        @Override\n        public void run() {\n\n            long position = MusicPlayer.position();\n            mProgress.setProgress((int) position);\n            mSeekBar.setProgress((int) position);\n\n            overflowcounter--;\n            if (MusicPlayer.isPlaying()) {\n                int delay = (int) (1500 - (position % 1000));\n                if (overflowcounter < 0 && !fragmentPaused) {\n                    overflowcounter++;\n                    mProgress.postDelayed(mUpdateProgress, delay);\n                }\n            } else mProgress.removeCallbacks(this);\n\n        }\n    };\n\n    private final View.OnClickListener mPlayPauseListener = new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n            duetoplaypause = true;\n            if (!mPlayPause.isPlayed()) {\n                mPlayPause.setPlayed(true);\n                mPlayPause.startAnimation();\n            } else {\n                mPlayPause.setPlayed(false);\n                mPlayPause.startAnimation();\n            }\n            Handler handler = new Handler();\n            handler.postDelayed(new Runnable() {\n                @Override\n                public void run() {\n                    MusicPlayer.playOrPause();\n                }\n            }, 200);\n\n        }\n    };\n\n    private final View.OnClickListener mPlayPauseExpandedListener = new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n            duetoplaypause = true;\n            if (!mPlayPauseExpanded.isPlayed()) {\n                mPlayPauseExpanded.setPlayed(true);\n                mPlayPauseExpanded.startAnimation();\n            } else {\n                mPlayPauseExpanded.setPlayed(false);\n                mPlayPauseExpanded.startAnimation();\n            }\n            Handler handler = new Handler();\n            handler.postDelayed(new Runnable() {\n                @Override\n                public void run() {\n                    MusicPlayer.playOrPause();\n                }\n            }, 200);\n\n        }\n    };\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        View rootView = inflater.inflate(R.layout.fragment_playback_controls, container, false);\n        this.rootView = rootView;\n\n        mPlayPause = (PlayPauseButton) rootView.findViewById(R.id.play_pause);\n        mPlayPauseExpanded = (PlayPauseButton) rootView.findViewById(R.id.playpause);\n        playPauseWrapper = rootView.findViewById(R.id.play_pause_wrapper);\n        playPauseWrapperExpanded = rootView.findViewById(R.id.playpausewrapper);\n        playPauseWrapper.setOnClickListener(mPlayPauseListener);\n        playPauseWrapperExpanded.setOnClickListener(mPlayPauseExpandedListener);\n        mProgress = (ProgressBar) rootView.findViewById(R.id.song_progress_normal);\n        mSeekBar = (SeekBar) rootView.findViewById(R.id.song_progress);\n        mTitle = (TextView) rootView.findViewById(R.id.title);\n        mArtist = (TextView) rootView.findViewById(R.id.artist);\n        mTitleExpanded = (TextView) rootView.findViewById(R.id.song_title);\n        mArtistExpanded = (TextView) rootView.findViewById(R.id.song_artist);\n        mAlbumArt = (ImageView) rootView.findViewById(R.id.album_art_nowplayingcard);\n        mBlurredArt = (ImageView) rootView.findViewById(R.id.blurredAlbumart);\n        next = (MaterialIconView) rootView.findViewById(R.id.next);\n        previous = (MaterialIconView) rootView.findViewById(R.id.previous);\n        topContainer = rootView.findViewById(R.id.topContainer);\n\n        LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams) mProgress.getLayoutParams();\n        mProgress.measure(0, 0);\n        layoutParams.setMargins(0, -(mProgress.getMeasuredHeight() / 2), 0, 0);\n        mProgress.setLayoutParams(layoutParams);\n\n        mPlayPause.setColor(Config.accentColor(getActivity(), Helpers.getATEKey(getActivity())));\n        mPlayPauseExpanded.setColor(Color.WHITE);\n\n        mSeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {\n            @Override\n            public void onProgressChanged(SeekBar seekBar, int i, boolean b) {\n                if (b) {\n                    MusicPlayer.seek((long) i);\n                }\n            }\n\n            @Override\n            public void onStartTrackingTouch(SeekBar seekBar) {\n            }\n\n            @Override\n            public void onStopTrackingTouch(SeekBar seekBar) {\n            }\n        });\n\n        next.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                Handler handler = new Handler();\n                handler.postDelayed(new Runnable() {\n                    @Override\n                    public void run() {\n                        MusicPlayer.next();\n                    }\n                }, 200);\n\n            }\n        });\n\n        previous.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                Handler handler = new Handler();\n                handler.postDelayed(new Runnable() {\n                    @Override\n                    public void run() {\n                        MusicPlayer.previous(getActivity(), false);\n                    }\n                }, 200);\n\n            }\n        });\n\n\n        ((BaseActivity) getActivity()).setMusicStateListenerListener(this);\n\n        if (PreferencesUtility.getInstance(getActivity()).isGesturesEnabled()) {\n            new SlideTrackSwitcher() {\n                @Override\n                public void onClick() {\n                    NavigationUtils.navigateToNowplaying(getActivity(), false);\n                }\n            }.attach(rootView.findViewById(R.id.root_view));\n        }\n\n\n        return rootView;\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n        fragmentPaused = true;\n    }\n\n    public void updateNowplayingCard() {\n        mTitle.setText(MusicPlayer.getTrackName());\n        mArtist.setText(MusicPlayer.getArtistName());\n        mTitleExpanded.setText(MusicPlayer.getTrackName());\n        mArtistExpanded.setText(MusicPlayer.getArtistName());\n        if (!duetoplaypause) {\n            ImageLoader.getInstance().displayImage(TimberUtils.getAlbumArtUri(MusicPlayer.getCurrentAlbumId()).toString(), mAlbumArt,\n                    new DisplayImageOptions.Builder().cacheInMemory(true)\n                            .showImageOnFail(R.drawable.ic_empty_music2)\n                            .resetViewBeforeLoading(true)\n                            .build(), new ImageLoadingListener() {\n                        @Override\n                        public void onLoadingStarted(String imageUri, View view) {\n\n                        }\n\n                        @Override\n                        public void onLoadingFailed(String imageUri, View view, FailReason failReason) {\n                            Bitmap failedBitmap = ImageLoader.getInstance().loadImageSync("drawable://" + R.drawable.ic_empty_music2);\n                            if (getActivity() != null)\n                                new setBlurredAlbumArt().execute(failedBitmap);\n                        }\n\n                        @Override\n                        public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {\n                            if (getActivity() != null)\n                                new setBlurredAlbumArt().execute(loadedImage);\n\n                        }\n\n                        @Override\n                        public void onLoadingCancelled(String imageUri, View view) {\n\n                        }\n                    });\n        }\n        duetoplaypause = false;\n        mProgress.setMax((int) MusicPlayer.duration());\n        mSeekBar.setMax((int) MusicPlayer.duration());\n        mProgress.postDelayed(mUpdateProgress, 10);\n    }\n\n    @Override\n    public void onStart() {\n        super.onStart();\n\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n        topContainer = rootView.findViewById(R.id.topContainer);\n        fragmentPaused = false;\n        if (mProgress != null)\n            mProgress.postDelayed(mUpdateProgress, 10);\n\n    }\n\n    public void updateState() {\n        if (MusicPlayer.isPlaying()) {\n            if (!mPlayPause.isPlayed()) {\n                mPlayPause.setPlayed(true);\n                mPlayPause.startAnimation();\n            }\n            if (!mPlayPauseExpanded.isPlayed()) {\n                mPlayPauseExpanded.setPlayed(true);\n                mPlayPauseExpanded.startAnimation();\n            }\n        } else {\n            if (mPlayPause.isPlayed()) {\n                mPlayPause.setPlayed(false);\n                mPlayPause.startAnimation();\n            }\n            if (mPlayPauseExpanded.isPlayed()) {\n                mPlayPauseExpanded.setPlayed(false);\n                mPlayPauseExpanded.startAnimation();\n            }\n        }\n    }\n\n    public void restartLoader() {\n\n    }\n\n    public void onPlaylistChanged() {\n\n    }\n\n    public void onMetaChanged() {\n        updateNowplayingCard();\n        updateState();\n    }\n\n    private class setBlurredAlbumArt extends AsyncTask<Bitmap, Void, Drawable> {\n\n        @Override\n        protected Drawable doInBackground(Bitmap... loadedImage) {\n            Drawable drawable = null;\n            try {\n                drawable = ImageUtils.createBlurredImageFromBitmap(loadedImage[0], getActivity(), 6);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n            return drawable;\n        }\n\n        @Override\n        protected void onPostExecute(Drawable result) {\n            if (result != null) {\n                if (mBlurredArt.getDrawable() != null) {\n                    final TransitionDrawable td =\n                            new TransitionDrawable(new Drawable[]{\n                                    mBlurredArt.getDrawable(),\n                                    result\n                            });\n                    mBlurredArt.setImageDrawable(td);\n                    td.startTransition(400);\n\n                } else {\n                    mBlurredArt.setImageDrawable(result);\n                }\n            }\n        }\n\n        @Override\n        protected void onPreExecute() {\n        }\n    }\n\n\n}\n'