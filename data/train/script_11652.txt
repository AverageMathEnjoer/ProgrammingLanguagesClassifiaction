b'package com.rd.animation.type;\n\nimport android.animation.ValueAnimator;\nimport androidx.annotation.NonNull;\nimport android.view.animation.AccelerateDecelerateInterpolator;\nimport com.rd.animation.controller.ValueController;\nimport com.rd.animation.data.type.ThinWormAnimationValue;\n\npublic class ThinWormAnimation extends WormAnimation {\n\n    private ThinWormAnimationValue value;\n\n    public ThinWormAnimation(@NonNull ValueController.UpdateListener listener) {\n        super(listener);\n        value = new ThinWormAnimationValue();\n    }\n\n    @Override\n    public ThinWormAnimation duration(long duration) {\n        super.duration(duration);\n        return this;\n    }\n\n    @Override\n    public WormAnimation with(int coordinateStart, int coordinateEnd, int radius, boolean isRightSide) {\n        if (hasChanges(coordinateStart, coordinateEnd, radius, isRightSide)) {\n            animator = createAnimator();\n\n            this.coordinateStart = coordinateStart;\n            this.coordinateEnd = coordinateEnd;\n\n            this.radius = radius;\n            this.isRightSide = isRightSide;\n\n            int height = radius * 2;\n            rectLeftEdge = coordinateStart - radius;\n            rectRightEdge = coordinateStart + radius;\n\n            value.setRectStart(rectLeftEdge);\n            value.setRectEnd(rectRightEdge);\n            value.setHeight(height);\n\n            RectValues rec = createRectValues(isRightSide);\n            long sizeDuration = (long) (animationDuration * 0.8);\n            long reverseDelay = (long) (animationDuration * 0.2);\n\n            long heightDuration = (long) (animationDuration * 0.5);\n            long reverseHeightDelay = (long) (animationDuration * 0.5);\n\n            ValueAnimator straightAnimator = createWormAnimator(rec.fromX, rec.toX, sizeDuration, false, value);\n            ValueAnimator reverseAnimator = createWormAnimator(rec.reverseFromX, rec.reverseToX, sizeDuration, true, value);\n            reverseAnimator.setStartDelay(reverseDelay);\n\n            ValueAnimator straightHeightAnimator = createHeightAnimator(height, radius, heightDuration);\n            ValueAnimator reverseHeightAnimator = createHeightAnimator(radius, height, heightDuration);\n            reverseHeightAnimator.setStartDelay(reverseHeightDelay);\n\n            animator.playTogether(straightAnimator, reverseAnimator, straightHeightAnimator, reverseHeightAnimator);\n        }\n        return this;\n    }\n\n    private ValueAnimator createHeightAnimator(int fromHeight, int toHeight, long duration) {\n        ValueAnimator anim = ValueAnimator.ofInt(fromHeight, toHeight);\n        anim.setInterpolator(new AccelerateDecelerateInterpolator());\n        anim.setDuration(duration);\n        anim.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n            @Override\n            public void onAnimationUpdate(ValueAnimator animation) {\n                onAnimateUpdated(animation);\n            }\n        });\n\n        return anim;\n    }\n\n    private void onAnimateUpdated(@NonNull ValueAnimator animation) {\n        value.setHeight((int) animation.getAnimatedValue());\n\n        if (listener != null) {\n            listener.onValueUpdated(value);\n        }\n    }\n\n    @Override\n    public ThinWormAnimation progress(float progress) {\n        if (animator != null) {\n            long progressDuration = (long) (progress * animationDuration);\n            int size = animator.getChildAnimations().size();\n\n            for (int i = 0; i < size; i++) {\n                ValueAnimator anim = (ValueAnimator) animator.getChildAnimations().get(i);\n\n                long setDuration = progressDuration - anim.getStartDelay();\n                long duration = anim.getDuration();\n\n                if (setDuration > duration) {\n                    setDuration = duration;\n\n                } else if (setDuration < 0) {\n                    setDuration = 0;\n                }\n\n                if (i == size - 1 && setDuration <= 0) {\n                    continue;\n                }\n\n                if (anim.getValues() != null && anim.getValues().length > 0) {\n                    anim.setCurrentPlayTime(setDuration);\n                }\n            }\n        }\n\n        return this;\n    }\n}'