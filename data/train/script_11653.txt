b'{-# LANGUAGE BangPatterns, CPP #-}\nmodule LookupGE_Map where\n\nimport Data.Map.Internal\n\nlookupGE1 :: Ord k => k -> Map k a -> Maybe (k,a)\nlookupGE1 k m =\n    case splitLookup k m of\n        (_,Just v,_)  -> Just (k,v)\n        (_,Nothing,r) -> findMinMaybe r\n{-# INLINABLE lookupGE1 #-}\n\nlookupGE2 :: Ord k => k -> Map k a -> Maybe (k,a)\nlookupGE2 = go\n  where\n    go !_ Tip = Nothing\n    go !k (Bin _ kx x l r) =\n        case compare k kx of\n            LT -> case go k l of\n                    Nothing -> Just (kx,x)\n                    ret -> ret\n            GT -> go k r\n            EQ -> Just (kx,x)\n{-# INLINABLE lookupGE2 #-}\n\nlookupGE3 :: Ord k => k -> Map k a -> Maybe (k,a)\nlookupGE3 = go Nothing\n  where\n    go def !_ Tip = def\n    go def !k (Bin _ kx x l r) =\n        case compare k kx of\n            LT -> go (Just (kx,x)) k l\n            GT -> go def k r\n            EQ -> Just (kx,x)\n{-# INLINABLE lookupGE3 #-}\n\nlookupGE4 :: Ord k => k -> Map k a -> Maybe (k,a)\nlookupGE4 k = k `seq` goNothing\n  where\n    goNothing Tip = Nothing\n    goNothing (Bin _ kx x l r) = case compare k kx of\n                                   LT -> goJust kx x l\n                                   EQ -> Just (kx, x)\n                                   GT -> goNothing r\n\n    goJust ky y Tip = Just (ky, y)\n    goJust ky y (Bin _ kx x l r) = case compare k kx of\n                                     LT -> goJust kx x l\n                                     EQ -> Just (kx, x)\n                                     GT -> goJust ky y r\n{-# INLINABLE lookupGE4 #-}\n\n-------------------------------------------------------------------------------\n-- Utilities\n-------------------------------------------------------------------------------\n\nfindMinMaybe :: Map k a -> Maybe (k,a)\nfindMinMaybe (Bin _ kx x Tip _)  = Just (kx,x)\nfindMinMaybe (Bin _ _  _ l _)    = findMinMaybe l\nfindMinMaybe Tip                 = Nothing\n\n#ifdef TESTING\n-------------------------------------------------------------------------------\n-- Properties:\n-------------------------------------------------------------------------------\n\nprop_lookupGE12 :: Int -> [Int] -> Bool\nprop_lookupGE12 x xs = case fromList $ zip xs xs of m -> lookupGE1 x m == lookupGE2 x m\n\nprop_lookupGE13 :: Int -> [Int] -> Bool\nprop_lookupGE13 x xs = case fromList $ zip xs xs of m -> lookupGE1 x m == lookupGE3 x m\n\nprop_lookupGE14 :: Int -> [Int] -> Bool\nprop_lookupGE14 x xs = case fromList $ zip xs xs of m -> lookupGE1 x m == lookupGE4 x m\n#endif\n'