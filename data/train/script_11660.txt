b'package effectivejava.chapter7.item45.anagrams;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.*;\n\n// Prints all large anagram groups in a dictionary iteratively (Page 204)\npublic class IterativeAnagrams {\n    public static void main(String[] args) throws IOException {\n        File dictionary = new File(args[0]);\n        int minGroupSize = Integer.parseInt(args[1]);\n\n        Map<String, Set<String>> groups = new HashMap<>();\n        try (Scanner s = new Scanner(dictionary)) {\n            while (s.hasNext()) {\n                String word = s.next();\n                groups.computeIfAbsent(alphabetize(word),\n                        (unused) -> new TreeSet<>()).add(word);\n            }\n        }\n\n        for (Set<String> group : groups.values())\n            if (group.size() >= minGroupSize)\n                System.out.println(group.size() + ": " + group);\n    }\n\n    private static String alphabetize(String s) {\n        char[] a = s.toCharArray();\n        Arrays.sort(a);\n        return new String(a);\n    }\n}\n'