b'{-# LANGUAGE TemplateHaskell #-}\n{-# LANGUAGE DataKinds #-}\n{-# LANGUAGE DeriveGeneric #-}\n{-# LANGUAGE GeneralizedNewtypeDeriving #-}\n{-# LANGUAGE TypeOperators #-}\n\nmodule Api where\n\nimport           Data.Proxy\nimport           Servant.API\nimport qualified Elm.Derive\n\ntype Api =\n  "api" :>\n    ("item" :> Get \'[JSON] [ItemId] :<|>\n     "item" :> Capture "itemId" ItemId :> Get \'[JSON] Item :<|>\n     "item" :> ReqBody \'[JSON] String :> Post \'[JSON] ItemId :<|>\n     "item" :> Capture "itemId" ItemId :> Delete \'[JSON] ())\n\napi :: Proxy Api\napi = Proxy\n\n-- types\n\nnewtype ItemId = ItemId Int\n  deriving (Show, Eq, Ord, Enum, FromHttpApiData, ToHttpApiData)\n\ndata Item\n  = Item {\n    id :: ItemId,\n    text :: String\n  }\n  deriving (Show, Eq)\n\nElm.Derive.deriveBoth Elm.Derive.defaultOptions \'\'Item\nElm.Derive.deriveBoth Elm.Derive.defaultOptions \'\'ItemId\n'