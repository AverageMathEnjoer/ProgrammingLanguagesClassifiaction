b'\xef\xbb\xbfusing System;\nusing System.Collections.Generic;\nusing System.Text;\nusing Business.Abstract;\nusing Business.Constants;\nusing Core.Entities.Concrete;\nusing Core.Utilities.Results;\nusing Core.Utilities.Security.Hashing;\nusing Core.Utilities.Security.Jwt;\nusing Entities.Dtos;\n\nnamespace Business.Concrete\n{\n    public class AuthManager:IAuthService\n    {\n        private IUserService _userService;\n        private ITokenHelper _tokenHelper;\n\n        public AuthManager(IUserService userService, ITokenHelper tokenHelper)\n        {\n            _userService = userService;\n            _tokenHelper = tokenHelper;\n        }\n\n        public IDataResult<User> Register(UserForRegisterDto userForRegisterDto, string password)\n        {\n            byte[] passwordHash, passwordSalt;\n            HashingHelper.CreatePasswordHash(password,out passwordHash,out passwordSalt);\n            var user = new User\n            {\n                Email = userForRegisterDto.Email,\n                FirstName = userForRegisterDto.FirstName,\n                LastName = userForRegisterDto.LastName,\n                PasswordHash = passwordHash,\n                PasswordSalt = passwordSalt,\n                Status = true\n            };\n            _userService.Add(user);\n            return  new SuccessDataResult<User>(user,Messages.UserRegistered);\n        }\n\n        public IDataResult<User> Login(UserForLoginDto userForLoginDto)\n        {\n            var userToCheck = _userService.GetByMail(userForLoginDto.Email);\n            if (userToCheck==null)\n            {\n                return new ErrorDataResult<User>(Messages.UserNotFound);\n            }\n\n            if (!HashingHelper.VerifyPasswordHash(userForLoginDto.Password,userToCheck.PasswordHash,userToCheck.PasswordSalt))\n            {\n                return new ErrorDataResult<User>(Messages.PasswordError);\n            }\n\n            return new SuccessDataResult<User>(userToCheck,Messages.SuccessfulLogin);\n        }\n\n        public IResult UserExists(string email)\n        {\n            if (_userService.GetByMail(email)!=null)\n            {\n                return new ErrorResult(Messages.UserAlreadyExists);\n            }\n            return new SuccessResult();\n        }\n\n        public IDataResult<AccessToken> CreateAccessToken(User user)\n        {\n            var claims = _userService.GetClaims(user);\n            var accessToken = _tokenHelper.CreateToken(user, claims);\n            return new SuccessDataResult<AccessToken>(accessToken,Messages.AccessTokenCreated);\n        }\n    }\n}\n'