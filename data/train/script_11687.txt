b'/*\n    SPDX-FileCopyrightText: 2016-2019 Milian Wolff <mail@milianw.de>\n\n    SPDX-License-Identifier: LGPL-2.1-or-later\n*/\n\n#include "costdelegate.h"\n\n#include <QDebug>\n#include <QPainter>\n\n#include <cmath>\n\nCostDelegate::CostDelegate(int sortRole, int maxCostRole, QObject* parent)\n    : QStyledItemDelegate(parent)\n    , m_sortRole(sortRole)\n    , m_maxCostRole(maxCostRole)\n{\n}\n\nCostDelegate::~CostDelegate() = default;\n\nvoid CostDelegate::paint(QPainter* painter, const QStyleOptionViewItem& option, const QModelIndex& index) const\n{\n    // TODO: handle negative values\n    const int64_t cost = index.data(m_sortRole).toULongLong();\n    if (cost == 0) {\n        QStyledItemDelegate::paint(painter, option, index);\n        return;\n    }\n\n    const int64_t maxCost = index.data(m_maxCostRole).toULongLong();\n    // top-down can miscalculate the peak cost\n    const auto fraction = std::min(1.f, std::abs(float(cost) / maxCost));\n    auto rect = option.rect;\n    rect.setWidth(rect.width() * fraction);\n\n    const auto& brush = painter->brush();\n    const auto& pen = painter->pen();\n\n    painter->setPen(Qt::NoPen);\n\n    if (option.features & QStyleOptionViewItem::Alternate) {\n        // we must handle this ourselves as otherwise the custom background\n        // would get painted over with the alternate background color\n        painter->setBrush(option.palette.alternateBase());\n        painter->drawRect(option.rect);\n    }\n\n    auto color = QColor::fromHsv(120 - fraction * 120, 255, 255, (-((fraction - 1) * (fraction - 1))) * 120 + 120);\n    painter->setBrush(color);\n    painter->drawRect(rect);\n\n    painter->setBrush(brush);\n    painter->setPen(pen);\n\n    if (option.features & QStyleOptionViewItem::Alternate) {\n        auto o = option;\n        o.features &= ~QStyleOptionViewItem::Alternate;\n        QStyledItemDelegate::paint(painter, o, index);\n    } else {\n        QStyledItemDelegate::paint(painter, option, index);\n    }\n}\n'