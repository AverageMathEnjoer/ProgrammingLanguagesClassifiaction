b'package co.joebirch.composeplayground.material\n\nimport androidx.compose.material.Text\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material.*\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.ArrowBack\nimport androidx.compose.material.icons.filled.Done\nimport androidx.compose.material.icons.filled.Menu\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.rememberCoroutineScope\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.unit.dp\nimport co.joebirch.composeplayground.ComposableLayout\nimport kotlinx.coroutines.launch\n\nobject ScaffoldView : ComposableLayout {\n\n    @Composable\n    override fun build() {\n        val selectedLayout = remember { mutableStateOf(0) }\n\n        Column(\n            modifier = Modifier.fillMaxSize(),\n            verticalArrangement = Arrangement.SpaceEvenly,\n            horizontalAlignment = Alignment.CenterHorizontally\n        ) {\n            when (selectedLayout.value) {\n                0 -> ScaffoldWithFabComponent {\n                    Column(\n                        modifier = Modifier.fillMaxSize(),\n                        verticalArrangement = Arrangement.Center\n                    ) {\n                        Button(onClick = {\n                            selectedLayout.value = 1\n                        }, modifier = Modifier.align(Alignment.CenterHorizontally)) {\n                            Text(text = "Switch to docked FAB")\n                        }\n                    }\n                }\n                1 -> ScaffoldWithDockedFabComponent {\n                    Column(\n                        modifier = Modifier.fillMaxSize(),\n                        verticalArrangement = Arrangement.Center\n                    ) {\n                        Button(onClick = {\n                            selectedLayout.value = 2\n                        }, modifier = Modifier.align(Alignment.CenterHorizontally)) {\n                            Text(text = "Switch to TopAppBar")\n                        }\n                    }\n                }\n                2 -> ScaffoldWithTopAppBar {\n                    Column(\n                        modifier = Modifier.fillMaxSize(),\n                        verticalArrangement = Arrangement.Center\n                    ) {\n                        Button(onClick = {\n                            selectedLayout.value = 3\n                        }, modifier = Modifier.align(Alignment.CenterHorizontally)) {\n                            Text(text = "Switch to Drawer")\n                        }\n                    }\n                }\n                3 -> ScaffoldWithDrawer {\n                    Column(\n                        modifier = Modifier.fillMaxSize(),\n                        verticalArrangement = Arrangement.Center\n                    ) {\n                        Button(onClick = {\n                            selectedLayout.value = 0\n                        }, modifier = Modifier.align(Alignment.CenterHorizontally)) {\n                            Text(text = "Switch to FAB")\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n}\n\n@Composable\nfun ScaffoldWithSnackbar(bodyContent: @Composable() () -> Unit) {\n    val state = remember { mutableStateOf(0) }\n\n    val positions = listOf(\n        FabPosition.End,\n        FabPosition.Center\n    )\n    Scaffold(\n        snackbarHost = { state ->\n\n        }\n    ) {\n\n    }\n\n    Scaffold {\n        bodyContent()\n    }\n}\n\n@Composable\nfun ScaffoldWithFabComponent(bodyContent: @Composable() () -> Unit) {\n    val state = remember { mutableStateOf(0) }\n\n    val positions = listOf(\n        FabPosition.End,\n        FabPosition.Center\n    )\n    Scaffold {\n\n    }\n\n    Scaffold(\n        floatingActionButton = {\n            FloatingActionButton(onClick = {\n                // Handle FAB click\n            }) {\n                Icon(\n                    imageVector = Icons.Filled.Done,\n                    contentDescription = "my description"\n                )\n            }\n        },\n        content = {\n            bodyContent()\n        }\n    )\n}\n\n@Composable\nfun ScaffoldWithPositionedFabComponent(bodyContent: @Composable() () -> Unit) {\n    val state = remember { mutableStateOf(0) }\n\n    val positions = listOf(\n        FabPosition.End,\n        FabPosition.Center\n    )\n    Scaffold {\n\n    }\n\n    Scaffold(\n        floatingActionButton = {\n            FloatingActionButton(onClick = {\n                // Handle FAB click\n            }) {\n                Icon(\n                    imageVector = Icons.Filled.Done,\n                    contentDescription = "my description"\n                )\n            }\n        },\n        floatingActionButtonPosition = FabPosition.End,\n        content = {\n            Text(text = "Compose Academy")\n        }\n    )\n}\n\n@Composable\nfun ScaffoldWithDockedFabComponent(bodyContent: @Composable() () -> Unit) {\n    val state = remember { mutableStateOf(true) }\n\n    Scaffold(\n        floatingActionButton = {\n            FloatingActionButton(onClick = {\n                state.value = !state.value\n            }) {\n                Icon(\n                    imageVector = Icons.Filled.Done,\n                    contentDescription = "my description"\n                )\n            }\n        },\n        bottomBar = {\n            BottomAppBar { }\n        },\n        isFloatingActionButtonDocked = true,\n        content = {\n            Text(text = "Compose Academy")\n        }\n    )\n}\n\n@Composable\nfun ScaffoldWithTopAppBar(bodyContent: @Composable() () -> Unit) {\n    Scaffold(\n        topBar = {\n            TopAppBar(\n                title = {\n                    Text(text = "Compose Academy")\n                },\n                navigationIcon = {\n                    IconButton(onClick = { }) {\n                        Icon(\n                            imageVector = Icons.Filled.ArrowBack,\n                            contentDescription = "my description"\n                        )\n                    }\n                }\n            )\n        },\n        content = {\n            Text(text = "Compose Academy")\n        }\n    )\n}\n\n@Composable\nfun ScaffoldWithDrawer(bodyContent: @Composable() () -> Unit) {\n    val coroutineScope = rememberCoroutineScope()\n    val drawerState = rememberDrawerState(initialValue = DrawerValue.Closed)\n    val scaffoldState = rememberScaffoldState(drawerState = drawerState)\n    Scaffold(\n        scaffoldState = scaffoldState,\n        topBar = {\n            TopAppBar(\n                title = {\n                    Text(text = "Jetpack Compose")\n                },\n                navigationIcon = {\n                    IconButton(onClick = {\n                        coroutineScope.launch {\n                            drawerState.open()\n                        }\n                    }) {\n                        Icon(\n                            imageVector = Icons.Filled.Menu,\n                            contentDescription = "my description"\n                        )\n                    }\n                }\n            )\n        },\n        drawerContent = {\n            Column(\n                modifier = Modifier.fillMaxSize(),\n                horizontalAlignment = Alignment.CenterHorizontally\n            ) {\n                Spacer(modifier = Modifier.heightIn(24.dp))\n                Button(onClick = {\n                    coroutineScope.launch {\n                        drawerState.close()\n                    }\n                }) {\n                    Text(text = "Close Drawer")\n                }\n            }\n        },\n        content = {\n            Text(text = "Compose Academy")\n        }\n    )\n}\n\n@Composable\nfun ScaffoldWithBottomBar(bodyContent: @Composable() () -> Unit) {\n    Scaffold(\n        bottomBar = {\n            BottomAppBar {\n                Text(\n                    text = "Compose Academy",\n                    modifier = Modifier.padding(16.dp)\n                )\n            }\n        }\n    ) {\n        Text(text = "Compose Academy")\n    }\n}\n\n@Composable\nfun ScaffoldColor(bodyContent: @Composable() () -> Unit) {\n    val state = remember { mutableStateOf(0) }\n\n    val positions = listOf(\n        FabPosition.End,\n        FabPosition.Center\n    )\n    Scaffold {\n\n    }\n\n    Scaffold(\n        contentColor = Color.Black,\n        backgroundColor = Color.White\n    ) {\n        bodyContent()\n    }\n}\n\n\n@Composable\nfun MinimalScaffold(bodyContent: @Composable() () -> Unit) {\n    Scaffold {\n        Text(text = "Compose Academy")\n    }\n}\n\n@Composable\nfun BackgroundColorScaffold(bodyContent: @Composable() () -> Unit) {\n    Scaffold(\n        backgroundColor = Color.White\n    ) {\n        Text(text = "Compose Academy")\n    }\n}\n\n@Composable\nfun ContentColorScaffold(bodyContent: @Composable() () -> Unit) {\n    Scaffold(\n        contentColor = Color.Blue\n    ) {\n        Text(text = "Compose Academy")\n    }\n}\n\n@Composable\nfun DrawerBackgroundColorScaffold(bodyContent: @Composable() () -> Unit) {\n    val coroutineScope = rememberCoroutineScope()\n    val drawerState = rememberDrawerState(initialValue = DrawerValue.Closed)\n    val scaffoldState = rememberScaffoldState(drawerState = drawerState)\n    Scaffold(\n        scaffoldState = scaffoldState,\n        topBar = {\n            TopAppBar(\n                title = {\n                    Text(text = "Jetpack Compose")\n                },\n                navigationIcon = {\n                    IconButton(onClick = {\n                        coroutineScope.launch {\n                            drawerState.open()\n                        }\n                    }) {\n                        Icon(\n                            imageVector = Icons.Filled.Menu,\n                            contentDescription = "my description"\n                        )\n                    }\n                }\n            )\n        },\n        drawerContent = {\n            Column(\n                modifier = Modifier.fillMaxSize(),\n                horizontalAlignment = Alignment.CenterHorizontally\n            ) {\n                Spacer(modifier = Modifier.height(24.dp))\n                Button(onClick = {\n                    coroutineScope.launch {\n                        drawerState.close()\n                    }\n                }) {\n                    Text(text = "Close Drawer")\n                }\n            }\n        },\n        drawerBackgroundColor = Color.White,\n        content = {\n            Text(text = "Compose Academy")\n        }\n    )\n}\n\n@Composable\nfun DrawerContentColorScaffold(bodyContent: @Composable() () -> Unit) {\n    val coroutineScope = rememberCoroutineScope()\n    val drawerState = rememberDrawerState(initialValue = DrawerValue.Closed)\n    val scaffoldState = rememberScaffoldState(drawerState = drawerState)\n    Scaffold(\n        scaffoldState = scaffoldState,\n        topBar = {\n            TopAppBar(\n                title = {\n                    Text(text = "Jetpack Compose")\n                },\n                navigationIcon = {\n                    IconButton(onClick = {\n                        coroutineScope.launch {\n                            drawerState.open()\n                        }\n                    }) {\n                        Icon(\n                            imageVector = Icons.Filled.Menu,\n                            contentDescription = "my description"\n                        )\n                    }\n                }\n            )\n        },\n        drawerContent = {\n            Column(\n                modifier = Modifier.fillMaxSize(),\n                horizontalAlignment = Alignment.CenterHorizontally\n            ) {\n                Spacer(modifier = Modifier.height(24.dp))\n                Button(onClick = {\n                    coroutineScope.launch {\n                        drawerState.close()\n                    }\n                }) {\n                    Text(text = "Close Drawer")\n                }\n            }\n        },\n        drawerContentColor = Color.Blue,\n        content = {\n            Text(text = "Compose Academy")\n        }\n    )\n}\n\n@Composable\nfun DrawerSrimColorScaffold(bodyContent: @Composable() () -> Unit) {\n    val coroutineScope = rememberCoroutineScope()\n    val drawerState = rememberDrawerState(initialValue = DrawerValue.Closed)\n    val scaffoldState = rememberScaffoldState(drawerState = drawerState)\n    Scaffold(\n        scaffoldState = scaffoldState,\n        topBar = {\n            TopAppBar(\n                title = {\n                    Text(text = "Jetpack Compose")\n                },\n                navigationIcon = {\n                    IconButton(onClick = {\n                        coroutineScope.launch {\n                            drawerState.open()\n                        }\n                    }) {\n                        Icon(\n                            imageVector = Icons.Filled.Menu,\n                            contentDescription = "my description"\n                        )\n                    }\n                }\n            )\n        },\n        drawerContent = {\n            Column(\n                modifier = Modifier.fillMaxSize(),\n                horizontalAlignment = Alignment.CenterHorizontally\n            ) {\n                Spacer(modifier = Modifier.height(24.dp))\n                Button(onClick = {\n                    coroutineScope.launch {\n                        drawerState.close()\n                    }\n                }) {\n                    Text(text = "Close Drawer")\n                }\n            }\n        },\n        drawerScrimColor = Color.Red,\n        content = {\n            Text(text = "Compose Academy")\n        }\n    )\n}\n\n@Composable\nfun DrawerShapeColorScaffold(bodyContent: @Composable() () -> Unit) {\n    val coroutineScope = rememberCoroutineScope()\n    val drawerState = rememberDrawerState(initialValue = DrawerValue.Closed)\n    val scaffoldState = rememberScaffoldState(drawerState = drawerState)\n    Scaffold(\n        scaffoldState = scaffoldState,\n        topBar = {\n            TopAppBar(\n                title = {\n                    Text(text = "Jetpack Compose")\n                },\n                navigationIcon = {\n                    IconButton(onClick = {\n                        coroutineScope.launch {\n                            drawerState.open()\n                        }\n                    }) {\n                        Icon(\n                            imageVector = Icons.Filled.Menu,\n                            contentDescription = "my description"\n                        )\n                    }\n                }\n            )\n        },\n        drawerContent = {\n            Column(\n                modifier = Modifier.fillMaxSize(),\n                horizontalAlignment = Alignment.CenterHorizontally\n            ) {\n                Spacer(modifier = Modifier.height(24.dp))\n                Button(onClick = {\n                    coroutineScope.launch {\n                        drawerState.close()\n                    }\n                }) {\n                    Text(text = "Close Drawer")\n                }\n            }\n        },\n        drawerShape = RoundedCornerShape(8.dp),\n        content = {\n            Text(text = "Compose Academy")\n        }\n    )\n}\n\n@Composable\nfun DrawerElevationScaffold(bodyContent: @Composable() () -> Unit) {\n    val coroutineScope = rememberCoroutineScope()\n    val drawerState = rememberDrawerState(initialValue = DrawerValue.Closed)\n    val scaffoldState = rememberScaffoldState(drawerState = drawerState)\n    Scaffold(\n        scaffoldState = scaffoldState,\n        topBar = {\n            TopAppBar(\n                title = {\n                    Text(text = "Jetpack Compose")\n                },\n                navigationIcon = {\n                    IconButton(onClick = {\n                        coroutineScope.launch {\n                            drawerState.open()\n                        }\n                    }) {\n                        Icon(\n                            imageVector = Icons.Filled.Menu,\n                            contentDescription = "my description"\n                        )\n                    }\n                }\n            )\n        },\n        drawerContent = {\n            Column(\n                modifier = Modifier.fillMaxSize(),\n                horizontalAlignment = Alignment.CenterHorizontally\n            ) {\n                Spacer(modifier = Modifier.height(24.dp))\n                Button(onClick = {\n                    coroutineScope.launch {\n                        drawerState.close()\n                    }\n                }) {\n                    Text(text = "Close Drawer")\n                }\n            }\n        },\n        drawerElevation = 12.dp,\n        content = {\n            Text(text = "Compose Academy")\n        }\n    )\n}\n\n@Composable\nfun DisableDrawerGestures(bodyContent: @Composable() () -> Unit) {\n    val coroutineScope = rememberCoroutineScope()\n    val drawerState = rememberDrawerState(initialValue = DrawerValue.Closed)\n    val scaffoldState = rememberScaffoldState(drawerState = drawerState)\n    Scaffold(\n        scaffoldState = scaffoldState,\n        topBar = {\n            TopAppBar(\n                title = {\n                    Text(text = "Jetpack Compose")\n                },\n                navigationIcon = {\n                    IconButton(onClick = {\n                        coroutineScope.launch {\n                            drawerState.open()\n                        }\n                    }) {\n                        Icon(\n                            imageVector = Icons.Filled.Menu,\n                            contentDescription = "my description"\n                        )\n                    }\n                }\n            )\n        },\n        drawerContent = {\n            Column(\n                modifier = Modifier.fillMaxSize(),\n                horizontalAlignment = Alignment.CenterHorizontally\n            ) {\n                Spacer(modifier = Modifier.height(24.dp))\n                Button(onClick = {\n                    coroutineScope.launch {\n                        drawerState.close()\n                    }\n                }) {\n                    Text(text = "Close Drawer")\n                }\n            }\n        },\n        drawerGesturesEnabled = false,\n        content = {\n            Text(text = "Compose Academy")\n        }\n    )\n}'