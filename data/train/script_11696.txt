b'package com.bennyhuo.kotlin.scheduledtask\n\nimport com.bennyhuo.kotlin.api.updateApi\nimport kotlinx.coroutines.*\n\nclass CoroutineUpdateTask : UpdateTask {\n\n    private var scope: CoroutineScope? = null\n\n    override fun scheduleUpdate(interval: Long) {\n        cancel()\n        val scope = CoroutineScope(Dispatchers.IO)\n        scope.launch {\n            while (isActive) {\n                try {\n                    updateApi.getConfigSuspend().let(::println)\n                } catch (e: Exception) {\n                    e.printStackTrace()\n                    if (e is CancellationException) throw e\n                }\n                delay(interval)\n            }\n        }\n\n        this.scope = scope\n    }\n\n    override fun cancel() {\n        scope?.cancel()\n        scope = null\n    }\n}'