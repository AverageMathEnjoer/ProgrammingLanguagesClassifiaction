b'\xef\xbb\xbfusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Runtime.InteropServices;\nusing System.Text;\n\nnamespace Rubeus.lib.Interop\n{\n    [StructLayout(LayoutKind.Sequential)]\n    public struct LUID\n    {\n        public UInt32 LowPart;\n        public Int32 HighPart;\n\n        public LUID(UInt64 value)\n        {\n            LowPart = (UInt32)(value & 0xffffffffL);\n            HighPart = (Int32)(value >> 32);\n        }\n\n        public LUID(LUID value)\n        {\n            LowPart = value.LowPart;\n            HighPart = value.HighPart;\n        }\n\n        public LUID(string value)\n        {\n            if (System.Text.RegularExpressions.Regex.IsMatch(value, @"^0x[0-9A-Fa-f]+$"))\n            {\n                // if the passed LUID string is of form 0xABC123\n                UInt64 uintVal = Convert.ToUInt64(value, 16);\n                LowPart = (UInt32)(uintVal & 0xffffffffL);\n                HighPart = (Int32)(uintVal >> 32);\n            }\n            else if (System.Text.RegularExpressions.Regex.IsMatch(value, @"^\\d+$"))\n            {\n                // if the passed LUID string is a decimal form\n                UInt64 uintVal = UInt64.Parse(value);\n                LowPart = (UInt32)(uintVal & 0xffffffffL);\n                HighPart = (Int32)(uintVal >> 32);\n            }\n            else\n            {\n                System.ArgumentException argEx = new System.ArgumentException("Passed LUID string value is not in a hex or decimal form", value);\n                throw argEx;\n            }\n        }\n\n        public override int GetHashCode()\n        {\n            UInt64 Value = ((UInt64)this.HighPart << 32) + this.LowPart;\n            return Value.GetHashCode();\n        }\n\n        public override bool Equals(object obj)\n        {\n            return obj is LUID && (((ulong)this) == (LUID)obj);\n        }\n\n        public override string ToString()\n        {\n            UInt64 Value = ((UInt64)this.HighPart << 32) + this.LowPart;\n            return String.Format("0x{0:x}", (ulong)Value);\n        }\n\n        public static bool operator ==(LUID x, LUID y)\n        {\n            return (((ulong)x) == ((ulong)y));\n        }\n\n        public static bool operator !=(LUID x, LUID y)\n        {\n            return (((ulong)x) != ((ulong)y));\n        }\n\n        public static implicit operator ulong(LUID luid)\n        {\n            // enable casting to a ulong\n            UInt64 Value = ((UInt64)luid.HighPart << 32);\n            return Value + luid.LowPart;\n        }\n    }\n}\n'