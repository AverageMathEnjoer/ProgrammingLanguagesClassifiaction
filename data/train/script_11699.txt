b"module Cachix.Types.MultipartUpload where\n\nimport Cachix.Types.NarInfoCreate (NarInfoCreate)\nimport Data.Aeson (FromJSON, ToJSON)\nimport Data.Swagger (ToSchema)\nimport Data.UUID (UUID)\nimport Protolude\n\ndata CreateMultipartUploadResponse = CreateMultipartUploadResponse\n  { narId :: UUID,\n    uploadId :: Text\n  }\n  deriving stock (Generic, Show)\n  deriving anyclass (ToJSON, FromJSON, ToSchema, NFData)\n\n-- | Any hashes or headers required to create the presigned URL.\ndata SigningData = SigningData\n  { contentMD5 :: Text\n  }\n  deriving stock (Generic, Show)\n  deriving anyclass (ToJSON, FromJSON, ToSchema, NFData)\n\nnewtype UploadPartResponse = UploadPartResponse {uploadUrl :: Text}\n  deriving stock (Generic, Show)\n  deriving anyclass (ToJSON, FromJSON, ToSchema, NFData)\n\ndata CompletedPart = CompletedPart\n  { partNumber :: Int,\n    -- | An opaque identifier for the uploaded part.\n    eTag :: Text\n  }\n  deriving stock (Generic, Show)\n  deriving anyclass (ToJSON, FromJSON, ToSchema, NFData)\n\ntype CompletedParts = Maybe (NonEmpty CompletedPart)\n\ndata CompletedMultipartUpload = CompletedMultipartUpload\n  { -- | A list of 'CompletedPart`, sorted by the 'partNumber'.\n    parts :: CompletedParts,\n    -- | The narinfo to create after verifying the upload.\n    narInfoCreate :: NarInfoCreate\n  }\n  deriving stock (Generic, Show)\n  deriving anyclass (ToJSON, FromJSON, ToSchema)\n"