b'/*\n * Copyright 2013 - 2016 Mario Arias\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.funktionale.option\n\nimport org.funktionale.collections.prependTo\nimport org.funktionale.option.Option.None\nimport org.funktionale.option.Option.Some\nimport org.funktionale.utils.GetterOperation\nimport org.funktionale.utils.GetterOperationImpl\nimport org.funktionale.utils.Predicate\nimport org.funktionale.utils.hashCodeForNullable\nimport java.util.*\n\nsealed class Option<out T> {\n\n    companion object {\n    \tfun <T> empty(): Option<T> = None\n    }\n\n    abstract fun isEmpty(): Boolean\n\n    fun nonEmpty(): Boolean = isDefined()\n\n    fun isDefined(): Boolean = !isEmpty()\n\n    abstract fun get(): T\n\n    fun orNull(): T? = if (isEmpty()) {\n        null\n    } else {\n        get()\n    }\n\n    inline fun <R> map(f: (T) -> R): Option<R> = if (isEmpty()) {\n        None\n    } else {\n        Some(f(get()))\n    }\n\n    inline fun <P1, R> map(p1: Option<P1>, f: (T, P1) -> R): Option<R> = if (isEmpty()) {\n        None\n    } else {\n        p1.map { pp1 -> f(get(), pp1) }\n    }\n\n    inline fun <R> fold(ifEmpty: () -> R, some: (T) -> R): R = if (isEmpty()) {\n        ifEmpty()\n    } else {\n        some(get())\n    }\n\n    inline fun <R> flatMap(f: (T) -> Option<R>): Option<R> = if (isEmpty()) {\n        None\n    } else {\n        f(get())\n    }\n\n    inline fun filter(predicate: Predicate<T>): Option<T> = if (nonEmpty() && predicate(get())) {\n        this\n    } else {\n        None\n    }\n\n    inline fun filterNot(predicate: Predicate<T>): Option<T> = if (nonEmpty() && !predicate(get())) {\n        this\n    } else {\n        None\n    }\n\n    inline fun exists(predicate: Predicate<T>): Boolean = nonEmpty() && predicate(get())\n\n    inline fun forEach(f: (T) -> Unit) {\n        if (nonEmpty()) f(get())\n    }\n\n\n    fun toList(): List<T> = if (isEmpty()) {\n        listOf()\n    } else {\n        listOf(get())\n    }\n\n    infix fun <X> and(value: Option<X>): Option<X> = if (isEmpty()) {\n        None\n    } else {\n        value\n    }\n\n    object None : Option<Nothing>() {\n        override fun get() = throw NoSuchElementException("None.get")\n\n        override fun isEmpty() = true\n\n        override fun equals(other: Any?): Boolean = when (other) {\n            is None -> true\n            else -> false\n        }\n\n        override fun hashCode(): Int = Integer.MAX_VALUE\n    }\n\n    class Some<out T>(val t: T) : Option<T>() {\n        override fun get() = t\n\n        override fun isEmpty() = false\n\n        override fun equals(other: Any?): Boolean = when (other) {\n            is Some<*> -> t == other.get()\n            else -> false\n        }\n\n        override fun hashCode(): Int = t.hashCodeForNullable(17) { a, b -> a + b }\n\n        override fun toString(): String = "Some<$t>"\n    }\n}\n\nfun <T> Option<T>.getOrElse(default: () -> T): T = if (isEmpty()) {\n    default()\n} else {\n    get()\n}\n\nfun <T> Option<T>.orElse(alternative: () -> Option<T>): Option<T> = if (isEmpty()) {\n    alternative()\n} else {\n    this\n}\n\ninfix fun <T> Option<T>.or(value: Option<T>): Option<T> = if (isEmpty()) {\n    value\n} else {\n    this\n}\n\nfun <T> T?.toOption(): Option<T> = if (this != null) {\n    Some(this)\n} else {\n    None\n}\n\ninline fun <T> optionTry(body: () -> T): Option<T> = try {\n    Some(body())\n} catch(e: Exception) {\n    None\n}\n\nval <K, V> Map<K, V>.option: GetterOperation<K, Option<V>>\n    get () {\n        return GetterOperationImpl { k -> this[k].toOption() }\n    }\n\n\nfun <T> Array<out T>.firstOption(): Option<T> {\n    return firstOrNull().toOption()\n}\n\nfun BooleanArray.firstOption(): Option<Boolean> {\n    return firstOrNull().toOption()\n}\n\nfun ByteArray.firstOption(): Option<Byte> {\n    return firstOrNull().toOption()\n}\n\nfun CharArray.firstOption(): Option<Char> {\n    return firstOrNull().toOption()\n}\n\nfun DoubleArray.firstOption(): Option<Double> {\n    return firstOrNull().toOption()\n}\n\nfun FloatArray.firstOption(): Option<Float> {\n    return firstOrNull().toOption()\n}\n\n\nfun IntArray.firstOption(): Option<Int> {\n    return firstOrNull().toOption()\n}\n\n\nfun LongArray.firstOption(): Option<Long> {\n    return firstOrNull().toOption()\n}\n\n\nfun ShortArray.firstOption(): Option<Short> {\n    return firstOrNull().toOption()\n}\n\nfun <T> Iterable<T>.firstOption(): Option<T> {\n    return firstOrNull().toOption()\n}\n\nfun <T> List<T>.firstOption(): Option<T> {\n    return firstOrNull().toOption()\n}\n\nfun <T> Sequence<T?>.firstOption(): Option<T> {\n    return firstOrNull().toOption()\n}\n\n\nfun String.firstOption(): Option<Char> {\n    return firstOrNull().toOption()\n}\n\nfun <T> Array<out T>.firstOption(predicate: Predicate<T>): Option<T> {\n    return firstOrNull(predicate).toOption()\n}\n\ninline fun BooleanArray.firstOption(predicate: (Boolean) -> Boolean): Option<Boolean> {\n    return firstOrNull(predicate).toOption()\n}\n\ninline fun ByteArray.firstOption(predicate: (Byte) -> Boolean): Option<Byte> {\n    return firstOrNull(predicate).toOption()\n}\n\ninline fun CharArray.firstOption(predicate: (Char) -> Boolean): Option<Char> {\n    return firstOrNull(predicate).toOption()\n}\n\ninline fun DoubleArray.firstOption(predicate: (Double) -> Boolean): Option<Double> {\n    return firstOrNull(predicate).toOption()\n}\n\ninline fun FloatArray.firstOption(predicate: (Float) -> Boolean): Option<Float> {\n    return firstOrNull(predicate).toOption()\n}\n\ninline fun IntArray.firstOption(predicate: (Int) -> Boolean): Option<Int> {\n    return firstOrNull(predicate).toOption()\n}\n\ninline fun LongArray.firstOption(predicate: (Long) -> Boolean): Option<Long> {\n    return firstOrNull(predicate).toOption()\n}\n\ninline fun ShortArray.firstOption(predicate: (Short) -> Boolean): Option<Short> {\n    return firstOrNull(predicate).toOption()\n}\n\nfun <T> Iterable<T>.firstOption(predicate: Predicate<T>): Option<T> {\n    return firstOrNull(predicate).toOption()\n}\n\nfun <T> Sequence<T>.firstOption(predicate: Predicate<T>): Option<T> {\n    return firstOrNull(predicate).toOption()\n}\n\ninline fun String.firstOption(predicate: (Char) -> Boolean): Option<Char> {\n    return firstOrNull(predicate).toOption()\n}\n\nfun <T, R> List<T>.optionTraverse(f: (T) -> Option<R>): Option<List<R>> = foldRight(Some(emptyList())) { i: T, accumulator: Option<List<R>> ->\n    f(i).map(accumulator) { head: R, tail: List<R> ->\n        head prependTo tail\n    }\n}\n\nfun <T> List<Option<T>>.optionSequential(): Option<List<T>> = optionTraverse { it }\n\nfun <T> List<Option<T>>.flatten(): List<T> {\n    return filter { it.isDefined() }.map { it.get() }\n}\n\nfun <P1, R> ((P1) -> R).optionLift(): (Option<P1>) -> Option<R> {\n    return { it.map(this) }\n}\n\n\n'