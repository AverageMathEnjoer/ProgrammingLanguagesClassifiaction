b'\xef\xbb\xbfopen System\nopen System.IO\n\n#load "packages/FsLab/FsLab.fsx"\nopen FSharp.Data\nopen RDotNet\nopen RProvider\nopen RProvider.ggplot2\nopen RProvider.datasets\nopen Deedle\n\n#load "paket-files/evelinag/ffplot/ggplot.fs"\nopen ggplot\n\n#load "parseScripts.fs"\nopen StarWars.ParseScripts\n\n// Visualize character mentions using violin plot from ggplot2\n\nlet appearancesFilename = __SOURCE_DIRECTORY__ + "/data/charactersPerScene.csv"\n\nlet charactersToVisualize = \n  [| "HAN" ;\n     "LEIA"\n     "LUKE"\n     "CHEWBACCA";\n     "DARTH VADER"\n     "C-3PO"\n     "ANAKIN"\n     "R2-D2"\n     "PADME"\n     "EMPEROR"\n     "YODA"\n     "OBI-WAN"\n     |] \nlet selectedCharacters = set charactersToVisualize\n\ntype Appearance = {Name: string; Time: float}\n\n// Extract the character mentions\nlet characterAppearances =\n    File.ReadAllLines(appearancesFilename)\n    |> Array.map (fun line -> line.Split([|\',\'|]))\n    |> Array.filter (fun line -> selectedCharacters.Contains(line.[0]) )\n    |> Array.collect (fun line -> \n        let name = line.[0]\n        line.[1..] |> Array.map float |> Array.map (fun x -> {Name = name; Time = x}))\n\n// Get colours for each character\nlet colours = \n  R.eval(R.parse(text=\n    "c(" + ( charactersToVisualize \n             |> Seq.map (fun name -> name, getCharacterColour name)\n             |> Seq.map (fun (name, colour) -> "\\"" + name + "\\" = \\"" + colour + "\\"")\n             |> String.concat "," )\n    + ")" ))\n\n// Create an R data frame and specify ordering of Name factors \nlet df = Frame.ofRecords(characterAppearances)\nR.assign("df", R.as_data_frame(df))\nR.eval(R.parse(text=("df$Name <- factor(df$Name, levels = c(\\"" + (String.concat "\\",\\"" charactersToVisualize) + "\\"))")))\nR.eval(R.parse(text="library(ggplot2)"))\n\n// Massive ggplot!!!\nR.eval(R.parse(text="ggplot(df, aes(x=Name,y=Time,fill=Name,colour=Name))")) \n++ R.geom__hline(namedParams["yintercept", box [0..6]; "size", box 2; "colour", box "#e2e2e2"])\n++ R.geom__violin(\n    namedParams[\n        "adjust", box 0.05;\n        ])\n++ R.coord__flip()\n++ R.scale__fill__manual(namedParams["values", colours])\n++ R.scale__colour__manual(namedParams["values", colours])\n++ R.theme__bw()\n++ R.theme( \n    namedParams[\n        "legend.position", box "none"\n        "panel.border", R.element__blank() |> box\n        "panel.grid.minor", R.element__blank() |> box\n        "axis.ticks", R.element__blank() |> box \n        "panel.grid.major.y", R.element__line(namedParams[ "size", box 1; "color", box "#e2e2e2"] ) |> box \n        "panel.grid.major.x", R.element__blank() |> box \n        "axis.title.x", R.element__blank() |> box\n        "axis.title.y", R.element__blank() |> box\n        "axis.text", R.element__text(namedParams["size", 16]) |> box\n        ])\n++ R.scale__y__continuous(\n    namedParams [\n        "breaks", box [0.5; 1.5; 2.5; 3.5; 4.5; 5.5]\n        "labels", box ["Episode I"; "Episode II"; "Episode III"; "Episode IV"; "Episode V"; "Episode VI" ]])\n\n'