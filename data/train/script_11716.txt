b'package effectivejava.chapter6.item34;\nimport java.util.*;\nimport java.util.stream.Stream;\n\nimport static java.util.stream.Collectors.toMap;\n\n// Enum type with constant-specific class bodies and data (Pages 163-4)\npublic enum Operation {\n    PLUS("+") {\n        public double apply(double x, double y) { return x + y; }\n    },\n    MINUS("-") {\n        public double apply(double x, double y) { return x - y; }\n    },\n    TIMES("*") {\n        public double apply(double x, double y) { return x * y; }\n    },\n    DIVIDE("/") {\n        public double apply(double x, double y) { return x / y; }\n    };\n\n    private final String symbol;\n\n    Operation(String symbol) { this.symbol = symbol; }\n\n    @Override public String toString() { return symbol; }\n\n    public abstract double apply(double x, double y);\n\n    // Implementing a fromString method on an enum type (Page 164)\n    private static final Map<String, Operation> stringToEnum =\n            Stream.of(values()).collect(\n                    toMap(Object::toString, e -> e));\n\n    // Returns Operation for string, if any\n    public static Optional<Operation> fromString(String symbol) {\n        return Optional.ofNullable(stringToEnum.get(symbol));\n    }\n\n    public static void main(String[] args) {\n        double x = Double.parseDouble(args[0]);\n        double y = Double.parseDouble(args[1]);\n        for (Operation op : Operation.values())\n            System.out.printf("%f %s %f = %f%n",\n                    x, op, y, op.apply(x, y));\n    }\n}\n'