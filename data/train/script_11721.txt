b'package id.zelory.compressor.constraint\n\nimport com.natpryce.hamkrest.assertion.assertThat\nimport com.natpryce.hamkrest.equalTo\nimport com.natpryce.hamkrest.isA\nimport id.zelory.compressor.loadBitmap\nimport id.zelory.compressor.overWrite\nimport io.mockk.every\nimport io.mockk.mockk\nimport io.mockk.mockkStatic\nimport io.mockk.unmockkAll\nimport io.mockk.verify\nimport org.junit.After\nimport org.junit.Test\nimport java.io.File\n\n/**\n * Created on : January 25, 2020\n * Author     : zetbaitsu\n * Name       : Zetra\n * GitHub     : https://github.com/zetbaitsu\n */\nclass QualityConstraintTest {\n\n    @After\n    fun teardown() {\n        unmockkAll()\n    }\n\n    @Test\n    fun `when satisfy function not yet invoked, constraint should not satisfied`() {\n        // Given\n        val constraint = QualityConstraint(mockk(relaxed = true))\n\n        // When + Then\n        assertThat(constraint.isSatisfied(mockk()), equalTo(false))\n    }\n\n    @Test\n    fun `when satisfy function is invoked, constraint should satisfied`() {\n        // Given\n        mockkStatic("id.zelory.compressor.UtilKt")\n        every { loadBitmap(any()) } returns mockk()\n        every { overWrite(any(), any(), any(), any()) } returns mockk()\n\n        val constraint = QualityConstraint(mockk(relaxed = true))\n\n        // When\n        constraint.satisfy(mockk(relaxed = true))\n\n        // Then\n        assertThat(constraint.isSatisfied(mockk()), equalTo(true))\n    }\n\n    @Test\n    fun `when trying satisfy constraint, it should save image with provided quality`() {\n        // Given\n        mockkStatic("id.zelory.compressor.UtilKt")\n        every { loadBitmap(any()) } returns mockk()\n        every { overWrite(any(), any(), any(), any()) } returns mockk()\n\n        val imageFile = mockk<File>(relaxed = true)\n        val quality = 75\n        val constraint = QualityConstraint(quality)\n\n        // When\n        constraint.satisfy(imageFile)\n\n        // Then\n        verify { overWrite(imageFile, any(), any(), quality) }\n    }\n\n    @Test\n    fun `verify extension`() {\n        // Given\n        val compression = Compression()\n\n        // When\n        compression.quality(90)\n\n        // Then\n        assertThat(compression.constraints.first(), isA<QualityConstraint>())\n    }\n}'