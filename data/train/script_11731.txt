b'/*\nI2Cdev library collection - MPU6050 RPi calibration program\nBased on the example in Arduino/MPU6050/\n\n==============================================\nI2Cdev device library code is placed under the MIT license\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n===============================================\n\nTo compile on a Raspberry Pi (1 or 2 or 3)\n  1. install the bcm2835 library, see http://www.airspayce.com/mikem/bcm2835/index.html\n  2. enable i2c on your RPi , see https://learn.adafruit.com/adafruits-raspberry-pi-lesson-4-gpio-setup/configuring-i2c\n  3. connect your i2c devices\n  4. then from bash\n      $ PATH_I2CDEVLIB=~/i2cdevlib/\n      $ gcc -o IMU_zero ${PATH_I2CDEVLIB}RaspberryPi_bcm2835/MPU6050/examples/IMU_zero.cpp \\\n         -I ${PATH_I2CDEVLIB}RaspberryPi_bcm2835/I2Cdev ${PATH_I2CDEVLIB}RaspberryPi_bcm2835/I2Cdev/I2Cdev.cpp \\\n         -I ${PATH_I2CDEVLIB}RaspberryPi_bcm2835/MPU6050/ ${PATH_I2CDEVLIB}RaspberryPi_bcm2835/MPU6050/MPU6050.cpp -l bcm2835 -l m\n      $ sudo ./IMU_zero\n\nIf an MPU6050 \n      * is an ideal member of its tribe, \n      * is properly warmed up, \n      * is at rest in a neutral position, \n      * is in a location where the pull of gravity is exactly 1g, and \n      * has been loaded with the best possible offsets, \nthen it will report 0 for all accelerations and displacements, except for \nZ acceleration, for which it will report 16384 (that is, 2^14).  Your device \nprobably won\'t do quite this well, but good offsets will all get the baseline \noutputs close to these target values.\n\n  Put the MPU6050 on a flat and horizontal surface, and leave it operating for \n5-10 minutes so its temperature gets stabilized.\n\n  Run this program.  A "----- done -----" line will indicate that it has done its best.\nWith the current accuracy-related constants (NFast = 1000, NSlow = 10000), it will take \na few minutes to get there.\n\n  Along the way, it will generate a dozen or so lines of output, showing that for each \nof the 6 desired offsets, it is \n      * first, trying to find two estimates, one too low and one too high, and\n      * then, closing in until the bracket can\'t be made smaller.\n\n  The line just above the "done" line will look something like\n    [567,567] --> [-1,2]  [-2223,-2223] --> [0,1] [1131,1132] --> [16374,16404] [155,156] --> [-1,1]  [-25,-24] --> [0,3] [5,6] --> [0,4]\nAs will have been shown in interspersed header lines, the six groups making up this\nline describe the optimum offsets for the X acceleration, Y acceleration, Z acceleration,\nX gyro, Y gyro, and Z gyro, respectively.  In the sample shown just above, the trial showed\nthat +567 was the best offset for the X acceleration, -2223 was best for Y acceleration, \nand so on.\n\n  The need for the delay between readings (usDelay) was brought to attention by Nikolaus Doppelhammer.\n===============================================\n*/\n\n\n#include <stdio.h>\n#include <cstdio>\n#include <bcm2835.h>\n#include "I2Cdev.h"\n#include "MPU6050.h"\n#include <math.h>\n\n// class default I2C address is 0x68\n// specific I2C addresses may be passed as a parameter here\n// AD0 low = 0x68 (default for InvenSense evaluation board)\n// AD0 high = 0x69\nMPU6050 accelgyro;\n//MPU6050 accelgyro(0x69); // <-- use for AD0 high\n\n\nconst char LBRACKET = \'[\';\nconst char RBRACKET = \']\';\nconst char COMMA    = \',\';\nconst char BLANK    = \' \';\nconst char PERIOD   = \'.\';\n\nconst int iAx = 0;\nconst int iAy = 1;\nconst int iAz = 2;\nconst int iGx = 3;\nconst int iGy = 4;\nconst int iGz = 5;\n\nconst int usDelay = 3150;   // empirical, to hold sampling to 200 Hz\nconst int NFast =  1000;    // the bigger, the better (but slower)\nconst int NSlow = 10000;    // ..\nconst int LinesBetweenHeaders = 5;\n\n\nint LowValue[6];\nint HighValue[6];\nint Smoothed[6];\nint LowOffset[6];\nint HighOffset[6];\nint Target[6];\nint LinesOut;\nint N;\n\n\nvoid ForceHeader()\n{ \n\tLinesOut = 99; \n}\n    \nvoid GetSmoothed()\n{ \n\tint16_t RawValue[6];\n\tint i;\n\tlong Sums[6];\n\tfor (i = iAx; i <= iGz; i++)\n\t{ \n\t\tSums[i] = 0; \n\t}\n\t//    unsigned long Start = micros();\n\n\tfor (i = 1; i <= N; i++)\n\t{ \n\t\t// get sums\n\t\taccelgyro.getMotion6(&RawValue[iAx], &RawValue[iAy], &RawValue[iAz], \n\t\t\t\t\t\t\t&RawValue[iGx], &RawValue[iGy], &RawValue[iGz]);\n\t\tif ((i % 500) == 0)\n\t\t{\n\t\t\tprintf("%c", PERIOD);\n\t\t}\n\t\tdelayMicroseconds(usDelay);\n\t\tfor (int j = iAx; j <= iGz; j++)\n\t\t{\n\t\t\tSums[j] = Sums[j] + RawValue[j];\n\t\t}\n\t} // get sums\n\t//    unsigned long usForN = micros() - Start;\n\t//    printf(" reading at %d Hz\\n", 1000000/((usForN+N/2)/N));\n\tfor (i = iAx; i <= iGz; i++)\n\t{ \n\t\tSmoothed[i] = (Sums[i] + N/2) / N ; \n\t}\n} // GetSmoothed\n\nvoid Initialize()\n{\n\t// initialize device\n\tprintf("Initializing I2C devices...\\n");\n\tI2Cdev::initialize();\n\n\t// verify connection\n\tprintf("Testing device connections...\\n");\n\tif(!accelgyro.testConnection()) \n\t{\n\t\tprintf("MPU6050 connection failed\\n");\n\t\treturn;\n\t}\n\n\tprintf("MPU6050 connection successful\\n"); \n\taccelgyro.initialize();\n\tprintf("Initialization done!\\n");\n} // Initialize\n\nvoid SetAveraging(int NewN)\n{ \n\tN = NewN;\n\tprintf("averaging %d  readings each time\\n", N);\n} // SetAveraging\n\nvoid SetOffsets(int TheOffsets[6])\n{ \n\taccelgyro.setXAccelOffset(TheOffsets [iAx]);\n\taccelgyro.setYAccelOffset(TheOffsets [iAy]);\n\taccelgyro.setZAccelOffset(TheOffsets [iAz]);\n\taccelgyro.setXGyroOffset (TheOffsets [iGx]);\n\taccelgyro.setYGyroOffset (TheOffsets [iGy]);\n\taccelgyro.setZGyroOffset (TheOffsets [iGz]);\n} // SetOffsets\n\nvoid ShowProgress()\n{ \n\tif (LinesOut >= LinesBetweenHeaders)\n\t{ \n\t\t// show header\n\t\tprintf("\\tXAccel\\t\\t\\tYAccel\\t\\t\\t\\tZAccel\\t\\t\\tXGyro\\t\\t\\tYGyro\\t\\t\\tZGyro\\n");\n\t\tLinesOut = 0;\n\t} // show header\n\tprintf("%c", BLANK);\n\tfor (int i = iAx; i <= iGz; i++)\n\t{ \n\t\tprintf("%c%d%c%d] --> [%d%c%d", LBRACKET, LowOffset[i], COMMA, HighOffset[i],\n\t\t\t\t\t\tLowValue[i], COMMA, HighValue[i]);\n\t\tif (i == iGz)\n\t\t{ \n\t\t\tprintf("%c\\n", RBRACKET); \n\t\t}\n\t\telse\n\t\t{ \n\t\t\tprintf("]\\t"); \n\t\t}\n\t}\n\tLinesOut++;\n} // ShowProgress\n\nvoid PullBracketsIn()\n{ \n\tbool AllBracketsNarrow;\n\tbool StillWorking;\n\tint NewOffset[6];\n\n\tprintf("\\nclosing in:\\n");\n\tAllBracketsNarrow = false;\n\tForceHeader();\n\tStillWorking = true;\n\twhile (StillWorking) \n\t{ \n\t\tStillWorking = false;\n\t\tif (AllBracketsNarrow && (N == NFast))\n\t\t{ \n\t\t\tSetAveraging(NSlow); \n\t\t}\n\t\telse\n\t\t{ \n\t\t\tAllBracketsNarrow = true; \n\t\t}// tentative\n\t\tfor (int i = iAx; i <= iGz; i++)\n\t\t{ \n\t\t\tif (HighOffset[i] <= (LowOffset[i]+1))\n\t\t\t{ \n\t\t\tNewOffset[i] = LowOffset[i]; \n\t\t\t}\n\t\t\telse\n\t\t\t{ \n\t\t\t// binary search\n\t\t\t\tStillWorking = true;\n\t\t\t\tNewOffset[i] = (LowOffset[i] + HighOffset[i]) / 2;\n\t\t\t\tif (HighOffset[i] > (LowOffset[i] + 10))\n\t\t\t\t{ \n\t\t\t\t\tAllBracketsNarrow = false; \n\t\t\t\t}\n\t\t\t} // binary search\n\t\t}\n\t\tSetOffsets(NewOffset);\n\t\tGetSmoothed();\n\t\tfor (int i = iAx; i <= iGz; i++)\n\t\t{ \n\t\t\t// closing in\n\t\t\tif (Smoothed[i] > Target[i])\n\t\t\t{ \n\t\t\t\t// use lower half\n\t\t\t\tHighOffset[i] = NewOffset[i];\n\t\t\t\tHighValue[i] = Smoothed[i];\n\t\t\t} // use lower half\n\t\t\telse\n\t\t\t{ \n\t\t\t\t// use upper half\n\t\t\t\tLowOffset[i] = NewOffset[i];\n\t\t\t\tLowValue[i] = Smoothed[i];\n\t\t\t} // use upper half\n\t\t} // closing in\n\t\tShowProgress();\n\t} // still working\n} // PullBracketsIn\n\nvoid PullBracketsOut()\n{ \n\tbool Done = false;\n\tint NextLowOffset[6];\n\tint NextHighOffset[6];\n\n\tprintf("expanding:\\n");\n\tForceHeader();\n\n\twhile (!Done)\n\t{\n\t\tDone = true;\n\t\tSetOffsets(LowOffset);\n\t\tGetSmoothed();\n\t\tfor (int i = iAx; i <= iGz; i++)\n\t\t{\n\t\t\t// got low values\n\t\t\tLowValue[i] = Smoothed[i];\n\t\t\tif (LowValue[i] >= Target[i])\n\t\t\t{\n\t\t\t\tDone = false;\n\t\t\t\tNextLowOffset[i] = LowOffset[i] - 1000;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tNextLowOffset[i] = LowOffset[i]; \n\t\t\t}\n\t\t} // got low values\n\n\t\tSetOffsets(HighOffset);\n\t\tGetSmoothed();\n\t\tfor (int i = iAx; i <= iGz; i++)\n\t\t{\n\t\t\t// got high values\n\t\t\tHighValue[i] = Smoothed[i];\n\t\t\tif (HighValue[i] <= Target[i])\n\t\t\t{\n\t\t\t\tDone = false;\n\t\t\t\tNextHighOffset[i] = HighOffset[i] + 1000;\n\t\t\t}\n\t\t\telse\n\t\t\t{ \n\t\t\t\tNextHighOffset[i] = HighOffset[i]; \n\t\t\t}\n\t\t} // got high values\n\t\tShowProgress();\n\t\tfor (int i = iAx; i <= iGz; i++)\n\t\t{ \n\t\t\tLowOffset[i] = NextLowOffset[i];   // had to wait until ShowProgress done\n\t\t\tHighOffset[i] = NextHighOffset[i]; // ..\n\t\t}\n\t} // keep going\n} // PullBracketsOut\n\n\n\nint main(int argc, char **argv)\n{ \n\tInitialize();\n\tfor (int i = iAx; i <= iGz; i++)\n\t{ // set targets and initial guesses\n\t\tTarget[i] = 0; // must fix for ZAccel \n\t\tHighOffset[i] = 0;\n\t\tLowOffset[i] = 0;\n\t} // set targets and initial guesses\n\tTarget[iAz] = 16384;\n\tSetAveraging(NFast);\n\tPullBracketsOut();\n\tPullBracketsIn();\n\n\tprintf("-------------- done --------------\\n\\n");\n\treturn 0;\n}\n'