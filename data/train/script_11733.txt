b'{-# LANGUAGE OverloadedStrings #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n\n-----------------------------------------------------------------------------\n\n-- |\n-- Module      : Data.Hoodle.Predefined\n-- Copyright   : (c) 2011-2013 Ian-Woo Kim\n--\n-- License     : BSD3\n-- Maintainer  : Ian-Woo Kim <ianwookim@gmail.com>\n-- Stability   : experimental\n-- Portability : GHC\nmodule Data.Hoodle.Predefined where\n\nimport qualified Data.ByteString.Char8 as B\nimport qualified Data.Map as M\nimport Text.Printf (printf)\n\n-- |\npredefinedPenShapeAspectXY :: (Double, Double)\npredefinedPenShapeAspectXY = (cos (pi / 6.0), sin (pi / 6.0))\n\n-- |\nhexToRGBA :: Integer -> (Double, Double, Double, Double)\nhexToRGBA n =\n  let r = n `div` (256 * 256 * 256)\n      g = (n - r * 256 * 256 * 256) `div` (256 * 256)\n      b = (n - r * 256 * 256 * 256 - g * 256 * 256) `div` 256\n      a = n - r * 256 * 256 * 256 - g * 256 * 256 - b * 256\n   in (fromIntegral r / 255.0, fromIntegral g / 255.0, fromIntegral b / 255.0, fromIntegral a / 255.0)\n\nrgbaToHEX :: (Double, Double, Double, Double) -> String\nrgbaToHEX (r, g, b, a) =\n  let i :: Integer = floor (255 * a) + 256 * floor (255 * b) + 256 * 256 * floor (255 * g) + 256 * 256 * 256 * floor (255 * r)\n   in printf "#%08x" i\n\npredefinedHighlighterOpacity :: Double\npredefinedHighlighterOpacity = 0.5\n\npredefinedPencolor :: M.Map B.ByteString (Double, Double, Double, Double)\npredefinedPencolor =\n  M.fromList\n    [ ("black", hexToRGBA 0x000000ff),\n      ("blue", hexToRGBA 0x3333ccff),\n      ("red", hexToRGBA 0xff0000ff),\n      ("green", hexToRGBA 0x008000ff),\n      ("gray", hexToRGBA 0x808080ff),\n      ("lightblue", hexToRGBA 0x00c0ffff),\n      ("lightgreen", hexToRGBA 0x00ff00ff),\n      ("magenta", hexToRGBA 0xff00ffff),\n      ("orange", hexToRGBA 0xff8000ff),\n      ("yellow", hexToRGBA 0xffff00ff),\n      ("white", hexToRGBA 0xffffffff)\n    ]\n\n-- | need to be refined.\ngetPenColor :: B.ByteString -> Maybe (Double, Double, Double, Double)\ngetPenColor b | (not . B.null) b =\n  case B.head b of\n    \'#\' -> Just (hexToRGBA . (read :: String -> Integer) . B.unpack $ ("0x" `B.append` B.tail b))\n    _ -> M.lookup b predefinedPencolor\ngetPenColor _ = Nothing\n\n-- |\npredefinedBkgcolor :: M.Map B.ByteString (Double, Double, Double, Double)\npredefinedBkgcolor =\n  M.fromList\n    [ ("", hexToRGBA 0xffffffff),\n      ("blue", hexToRGBA 0xa0e8ffff),\n      ("pink", hexToRGBA 0xffc0d4ff),\n      ("green", hexToRGBA 0x80ffc0ff),\n      ("orange", hexToRGBA 0xffc080ff),\n      ("yellow", hexToRGBA 0xffff80ff),\n      ("white", hexToRGBA 0xffffffff)\n    ]\n\npredefinedVeryfine :: Double\npredefinedVeryfine = 0.42\n\npredefinedFine :: Double\npredefinedFine = 0.85\n\npredefinedMedium :: Double\npredefinedMedium = 1.41\n\npredefinedThick :: Double\npredefinedThick = 2.26\n\npredefinedVerythick :: Double\npredefinedVerythick = 5.67\n\npredefinedUltrathick :: Double\npredefinedUltrathick = 15.41\n\n---- for Highlighter\n\npredefinedHighlighterVeryfine :: Double\npredefinedHighlighterVeryfine = 2.83\n\npredefinedHighlighterFine :: Double\npredefinedHighlighterFine = 2.83\n\npredefinedHighlighterMedium :: Double\npredefinedHighlighterMedium = 8.50\n\npredefinedHighlighterThick :: Double\npredefinedHighlighterThick = 19.84\n\npredefinedHighlighterVerythick :: Double\npredefinedHighlighterVerythick = 19.84\n\npredefinedHighlighterUltrathick :: Double\npredefinedHighlighterUltrathick = 30.84\n\n---- for Eraser\n\npredefinedEraserVeryfine :: Double\npredefinedEraserVeryfine = 2.83\n\npredefinedEraserFine :: Double\npredefinedEraserFine = 2.83\n\npredefinedEraserMedium :: Double\npredefinedEraserMedium = 8.50\n\npredefinedEraserThick :: Double\npredefinedEraserThick = 19.84\n\npredefinedEraserVerythick :: Double\npredefinedEraserVerythick = 19.84\n\npredefinedEraserUltrathick :: Double\npredefinedEraserUltrathick = 30.84\n\npredefinedRulingMarginColor :: (Double, Double, Double, Double)\npredefinedRulingMarginColor = hexToRGBA 0xff0080ff\n\npredefinedRulingColor :: (Double, Double, Double, Double)\npredefinedRulingColor = hexToRGBA 0x40a0ffff\n\npredefinedRulingThickness :: Double\npredefinedRulingThickness = 0.5\n\npredefinedRulingLeftMargin :: Double\npredefinedRulingLeftMargin = 72.0\n\npredefinedRulingTopMargin :: Double\npredefinedRulingTopMargin = 80.0\n\npredefinedRulingSpacing :: Double\npredefinedRulingSpacing = 24.0\n\npredefinedRulingBottomMargin :: Double\npredefinedRulingBottomMargin = predefinedRulingSpacing\n\npredefinedRulingGraphSpacing :: Double\npredefinedRulingGraphSpacing = 14.17\n'