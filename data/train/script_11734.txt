b'\xef\xbb\xbf// UVa814 The Letter Carrier\'s Rounds\n// Rujia Liu\n#include<iostream>\n#include<string>\n#include<vector>\n#include<set>\n#include<map>\nusing namespace std;\n\nvoid parse_address(const string& s, string& user, string& mta) {\n  int k = s.find(\'@\');\n  user = s.substr(0, k);\n  mta = s.substr(k+1);\n}\n\nint main() {\n  int k;\n  string s, t, user1, mta1, user2, mta2;\n  set<string> addr;\n\n  // \xe8\xbe\x93\xe5\x85\xa5\xe6\x89\x80\xe6\x9c\x89MTA\xef\xbc\x8c\xe8\xbd\xac\xe5\x8c\x96\xe4\xb8\xba\xe5\x9c\xb0\xe5\x9d\x80\xe5\x88\x97\xe8\xa1\xa8\n  while(cin >> s && s != "*") {\n    cin >> s >> k;\n    while(k--) { cin >> t; addr.insert(t + "@" + s); }\n  }\n\n  while(cin >> s && s != "*") {\n    parse_address(s, user1, mta1); // \xe5\xa4\x84\xe7\x90\x86\xe5\x8f\x91\xe4\xbb\xb6\xe4\xba\xba\xe5\x9c\xb0\xe5\x9d\x80\n\n    vector<string> mta; // \xe6\x89\x80\xe6\x9c\x89\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9e\xe6\x8e\xa5\xe7\x9a\x84mta\xef\xbc\x8c\xe6\x8c\x89\xe7\x85\xa7\xe8\xbe\x93\xe5\x85\xa5\xe9\xa1\xba\xe5\xba\x8f\n    map<string, vector<string> > dest; // \xe6\xaf\x8f\xe4\xb8\xaamta\xe9\x9c\x80\xe8\xa6\x81\xe5\x8f\x91\xe9\x80\x81\xe7\x9a\x84\xe7\x94\xa8\xe6\x88\xb7\n    set<string> vis;\n    while(cin >> t && t != "*") {\n      parse_address(t, user2, mta2); // \xe5\xa4\x84\xe7\x90\x86\xe6\x94\xb6\xe4\xbb\xb6\xe4\xba\xba\xe5\x9c\xb0\xe5\x9d\x80\n      if(vis.count(t)) continue;     // \xe9\x87\x8d\xe5\xa4\x8d\xe7\x9a\x84\xe6\x94\xb6\xe4\xbb\xb6\xe4\xba\xba\n      vis.insert(t);\n      if(!dest.count(mta2)) { mta.push_back(mta2); dest[mta2] = vector<string>(); }\n      dest[mta2].push_back(t);\n    }\n    getline(cin, t); // \xe6\x8a\x8a"*"\xe8\xbf\x99\xe4\xb8\x80\xe8\xa1\x8c\xe7\x9a\x84\xe5\x9b\x9e\xe8\xbd\xa6\xe5\x90\x83\xe6\x8e\x89\n\n    // \xe8\xbe\x93\xe5\x85\xa5\xe9\x82\xae\xe4\xbb\xb6\xe6\xad\xa3\xe6\x96\x87\n    string data;\n    while(getline(cin, t) && t[0] != \'*\') data += "     " + t + "\\n";\n\n    for(int i = 0; i < mta.size(); i++) {\n      string mta2 = mta[i];\n      vector<string> users = dest[mta2];\n      cout << "Connection between " << mta1 << " and " << mta2 <<endl;\n      cout << "     HELO " << mta1 << "\\n";\n      cout << "     250\\n";\n      cout << "     MAIL FROM:<" << s << ">\\n";\n      cout << "     250\\n";\n      bool ok = false;\n      for(int i = 0; i < users.size(); i++) {\n        cout << "     RCPT TO:<" << users[i] << ">\\n";\n        if(addr.count(users[i])) { ok = true; cout << "     250\\n"; }\n        else cout << "     550\\n";\n      }\n      if(ok) {\n        cout << "     DATA\\n";\n        cout << "     354\\n";\n        cout << data;\n        cout << "     .\\n";\n        cout << "     250\\n";\n      }\n      cout << "     QUIT\\n";\n      cout << "     221\\n";\n    }\n  }\n  return 0;\n}\n'