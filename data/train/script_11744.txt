b'{-# LANGUAGE NoImplicitPrelude #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n{-# LANGUAGE InstanceSigs #-}\n\nmodule Course.Comonad where\n\nimport Course.Core\nimport Course.ExactlyOne\nimport Course.Extend\n\n-- | All instances of the `Comonad` type-class must satisfy two laws. These\n-- laws are not checked by the compiler. These laws are given as:\n--\n-- * The law of left identity\n--   `\xe2\x88\x80x. copure <<= x \xe2\x89\x85 x`\n--\n-- * The law of right identity\n--   `\xe2\x88\x80f. copure . (f <<=) == f\nclass Extend f => Comonad f where\n  copure ::\n    f a\n    -> a\n\n-- | Implement the @Comonad@ instance for @ExactlyOne@.\n--\n-- >>> copure (ExactlyOne 7)\n-- 7\ninstance Comonad ExactlyOne where\n  copure ::\n    ExactlyOne a\n    -> a\n  copure =\n    error "todo: Course.Comonad copure#instance ExactlyOne"\n\n-- | Witness that all things with (<<=) and copure also have (<$>).\n--\n-- >>> (+10) <$$> ExactlyOne 7\n-- ExactlyOne 17\n(<$$>) ::\n  Comonad f =>\n  (a -> b)\n  -> f a\n  -> f b\n(<$$>) =\n  error "todo: Course.Comonad#(<$>)"\n'