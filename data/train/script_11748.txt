b'// UVa1354 Mobile Computing\n// Rujia Liu\n#include<cstdio>\n#include<cstring>\n#include<vector>\nusing namespace std;\n\nstruct Tree {\n  double L, R; // distance from the root to the leftmost/rightmost point\n  Tree():L(0),R(0) {}\n};\n\nconst int maxn = 6;\n\nint n, vis[1<<maxn];\ndouble r, w[maxn], sum[1<<maxn];\nvector<Tree> tree[1<<maxn];\n\nvoid dfs(int subset) {\n  if(vis[subset]) return;\n  vis[subset] = true;\n\n  bool have_children = false;\n  for(int left = (subset-1)&subset; left; left = (left-1)&subset) {\n    have_children = true;\n\n    int right = subset^left;\n    double d1 = sum[right] / sum[subset];\n    double d2 = sum[left] / sum[subset];\n\n    dfs(left); dfs(right);\n\n    for(int i = 0; i < tree[left].size(); i++)\n      for(int j = 0; j < tree[right].size(); j++) {\n        Tree t;\n        t.L = max(tree[left][i].L + d1, tree[right][j].L - d2);\n        t.R = max(tree[right][j].R + d2, tree[left][i].R - d1);\n        if(t.L + t.R < r) tree[subset].push_back(t);\n      }\n  }\n\n  if(!have_children) tree[subset].push_back(Tree());\n}\n\nint main() {\n  int T;\n  scanf("%d", &T);\n  while(T--) {\n    scanf("%lf%d", &r, &n);\n    for(int i = 0; i < n; i++) scanf("%lf", &w[i]);\n    for(int i = 0; i < (1<<n); i++) {\n      sum[i] = 0;\n      tree[i].clear();\n      for(int j = 0; j < n; j++)\n        if(i & (1<<j)) sum[i] += w[j];\n    }\n\n    int root = (1<<n)-1;\n    memset(vis, 0, sizeof(vis));\n    dfs(root);\n\n    double ans = -1;\n    for(int i = 0; i < tree[root].size(); i++)\n      ans = max(ans, tree[root][i].L + tree[root][i].R);\n    printf("%.10lf\\n", ans);\n  }\n  return 0;\n}\n'