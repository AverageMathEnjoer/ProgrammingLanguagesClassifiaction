b'package com.codeest.geeknews.widget;\n\nimport com.github.moduth.blockcanary.BlockCanaryContext;\n\nimport java.io.File;\nimport java.util.LinkedList;\nimport java.util.List;\n\n/**\n * Created by codeest on 2016/9/6.\n */\npublic class AppBlockCanaryContext extends BlockCanaryContext {\n\n    /**\n     * Implement in your project.\n     *\n     * @return Qualifier which can specify this installation, like version + flavor.\n     */\n    public String provideQualifier() {\n        return "unknown";\n    }\n\n    /**\n     * Implement in your project.\n     *\n     * @return user id\n     */\n    public String provideUid() {\n        return "uid";\n    }\n\n    /**\n     * Network type\n     *\n     * @return {@link String} like 2G, 3G, 4G, wifi, etc.\n     */\n    public String provideNetworkType() {\n        return "unknown";\n    }\n\n    /**\n     * Config monitor duration, after this time BlockCanary will stop, use\n     * with {@code BlockCanary}\'s isMonitorDurationEnd\n     *\n     * @return monitor last duration (in hour)\n     */\n    public int provideMonitorDuration() {\n        return -1;\n    }\n\n    /**\n     * Config block threshold (in millis), dispatch over this duration is regarded as a BLOCK. You may set it\n     * from performance of device.\n     *\n     * @return threshold in mills\n     */\n    public int provideBlockThreshold() {\n        return 1000;\n    }\n\n    /**\n     * Thread stack dump interval, use when block happens, BlockCanary will dump on main thread\n     * stack according to current sample cycle.\n     * <p>\n     * Because the implementation mechanism of Looper, real dump interval would be longer than\n     * the period specified here (especially when cpu is busier).\n     * </p>\n     *\n     * @return dump interval (in millis)\n     */\n    public int provideDumpInterval() {\n        return provideBlockThreshold();\n    }\n\n    /**\n     * Path to save log, like "/blockcanary/", will save to sdcard if can.\n     *\n     * @return path of log files\n     */\n    public String providePath() {\n        return "/blockcanary/";\n    }\n\n    /**\n     * If need notification to notice block.\n     *\n     * @return true if need, else if not need.\n     */\n    public boolean displayNotification() {\n        return true;\n    }\n\n    /**\n     * Implement in your project, bundle files into a zip file.\n     *\n     * @param src  files before compress\n     * @param dest files compressed\n     * @return true if compression is successful\n     */\n    public boolean zip(File[] src, File dest) {\n        return false;\n    }\n\n    /**\n     * Implement in your project, bundled log files.\n     *\n     * @param zippedFile zipped file\n     */\n    public void upload(File zippedFile) {\n        throw new UnsupportedOperationException();\n    }\n\n\n    /**\n     * Packages that developer concern, by default it uses process name,\n     * put high priority one in pre-order.\n     *\n     * @return null if simply concern only package with process name.\n     */\n    public List<String> concernPackages() {\n        return null;\n    }\n\n    /**\n     * Filter stack without any in concern package, used with @{code concernPackages}.\n     *\n     * @return true if filter, false it not.\n     */\n    public boolean filterNonConcernStack() {\n        return false;\n    }\n\n    /**\n     * Provide white list, entry in white list will not be shown in ui list.\n     *\n     * @return return null if you don\'t need white-list filter.\n     */\n    public List<String> provideWhiteList() {\n        LinkedList<String> whiteList = new LinkedList<>();\n        whiteList.add("org.chromium");\n        return whiteList;\n    }\n\n    /**\n     * Whether to delete files whose stack is in white list, used with white-list.\n     *\n     * @return true if delete, false it not.\n     */\n    public boolean deleteFilesInWhiteList() {\n        return true;\n    }\n}\n'