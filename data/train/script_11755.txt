b'/*\n * Copyright 2013 - 2016 Mario Arias\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.funktionale.currying\n\nimport org.testng.Assert.assertEquals\nimport org.testng.Assert.assertTrue\nimport org.testng.annotations.Test\n\nclass CurryingTest {\n    @Test fun testCurrying() {\n        val sum2ints = { x: Int, y: Int -> x + y }\n        val curried = sum2ints.curried()\n        assertEquals(curried(2)(4), 6)\n        val add5 = curried(5)\n        assertEquals(add5(7), 12)\n    }\n\n    @Test fun testUncurrying() {\n        val sum2ints: (Int, Int) -> Int = { x, y -> x + y }\n        val curried: (Int) -> (Int) -> Int = sum2ints.curried()\n        assertEquals(curried(2)(4), 6)\n        //same type as sum2ints,\n        assertEquals(curried.uncurried()(2, 4), 6)\n        assertEquals(sum2ints(2, 4), 6)\n\n        val sum3ints: (Int, Int, Int) -> Int = { x, y, _ -> x + y }\n        val f: (Int) -> (Int) -> (Int) -> Int = sum3ints.curried()\n        assertTrue(f.uncurried() is (Int, Int, Int) -> Int)\n    }\n}'