b'package io.github.javiewer.view.listener;\n\nimport android.os.Bundle;\nimport androidx.swiperefreshlayout.widget.SwipeRefreshLayout;\nimport androidx.recyclerview.widget.GridLayoutManager;\nimport androidx.recyclerview.widget.LinearLayoutManager;\nimport androidx.recyclerview.widget.RecyclerView;\nimport androidx.recyclerview.widget.StaggeredGridLayoutManager;\n\nimport java.util.List;\n\nimport okhttp3.ResponseBody;\nimport retrofit2.Call;\nimport retrofit2.Callback;\nimport retrofit2.Response;\n\n/**\n * Project: JAViewer\n */\n\npublic abstract class BasicOnScrollListener<I> extends RecyclerView.OnScrollListener {\n\n    private boolean loading = false;\n\n    private int loadThreshold = 5;\n    private int currentPage = 0;\n\n    private long token;\n    private boolean end = false;\n\n\n    public void reset() {\n        loading = false;\n        loadThreshold = 5;\n        currentPage = 0;\n        int oldSize = getItems().size();\n        if (oldSize > 0) {\n            getItems().clear();\n            getAdapter().notifyItemRangeRemoved(0, oldSize);\n        }\n    }\n\n    public Bundle saveState() {\n        Bundle bundle = new Bundle();\n        bundle.putInt("CurrentPage", currentPage);\n        return bundle;\n    }\n\n    public void restoreState(Bundle bundle) {\n        currentPage = bundle.getInt("CurrentPage");\n    }\n\n    public abstract RecyclerView.LayoutManager getLayoutManager();\n\n    public abstract SwipeRefreshLayout getRefreshLayout();\n\n    public abstract List<I> getItems();\n\n    public abstract RecyclerView.Adapter getAdapter();\n\n    public abstract Call<ResponseBody> newCall(int page);\n\n    public void refresh() {\n        setLoading(true);\n        reset();\n        onLoad(token = System.currentTimeMillis());\n    }\n\n    private void onLoad(final long token) {\n        final int page = currentPage;\n        Call<ResponseBody> call = newCall(page + 1);\n\n        if (call == null) {\n            setLoading(false);\n            getRefreshLayout().setRefreshing(false);\n            return;\n        }\n        call.enqueue(new Callback<ResponseBody>() {\n            @Override\n            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {\n                if (token == BasicOnScrollListener.this.token && page == currentPage) {\n                    try {\n                        onResult(response.body());\n                        currentPage++;\n                    } catch (Throwable e) {\n                        onFailure(call, e);\n                    }\n                }\n\n                setLoading(false);\n                getRefreshLayout().setRefreshing(false);\n            }\n\n            @Override\n            public void onFailure(Call<ResponseBody> call, Throwable t) {\n                setLoading(false);\n                getRefreshLayout().setRefreshing(false);\n                onExceptionCaught(t);\n            }\n        });\n    }\n\n    public void onExceptionCaught(Throwable t) {\n\n    }\n\n    public void onResult(ResponseBody response) throws Exception {\n\n    }\n\n    @Override\n    public void onScrolled(RecyclerView recyclerView, int dx, int dy) {\n        super.onScrolled(recyclerView, dx, dy);\n\n        if (!isLoading() && canLoadMore(recyclerView)) {\n            onLoad(token = System.currentTimeMillis());\n            loading = true;\n        }\n    }\n\n    public boolean canLoadMore(RecyclerView recyclerView) {\n        RecyclerView.LayoutManager mLayoutManager = getLayoutManager();\n        int visibleItemCount = recyclerView.getChildCount();\n        int totalItemCount = mLayoutManager.getItemCount();\n        int firstVisibleItem = 0;\n        if (mLayoutManager instanceof StaggeredGridLayoutManager) {\n            firstVisibleItem = ((StaggeredGridLayoutManager) mLayoutManager).findFirstVisibleItemPositions(null)[0];\n        } else if (mLayoutManager instanceof GridLayoutManager) {\n            firstVisibleItem = ((GridLayoutManager) mLayoutManager).findFirstVisibleItemPosition();\n        } else if (mLayoutManager instanceof LinearLayoutManager) {\n            firstVisibleItem = ((LinearLayoutManager) mLayoutManager).findFirstVisibleItemPosition();\n        }\n\n        return (totalItemCount - visibleItemCount) <= (firstVisibleItem + this.loadThreshold);\n    }\n\n    public boolean isLoading() {\n        return loading;\n    }\n\n    public void setLoading(boolean loading) {\n        this.loading = loading;\n    }\n\n    public boolean isEnd() {\n        return end;\n    }\n\n    public void setEnd(boolean end) {\n        this.end = end;\n    }\n}\n'