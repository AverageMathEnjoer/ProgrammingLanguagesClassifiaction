b'{-# LANGUAGE GeneralizedNewtypeDeriving #-}\n{-# LANGUAGE LambdaCase #-}\n{-# LANGUAGE OverloadedStrings #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n\n-- common message type between server and client\n\nmodule Message where\n\nimport Data.Binary (Binary (..))\nimport Data.Text (Text)\nimport qualified Data.Text as T\nimport Data.Word (Word8)\n\nnewtype CommitId = CommitId {unCommitId :: Int}\n  deriving (Show, Eq, Ord, Num, Binary)\n\ndata C2SMsg\n  = -- | (hash,data)\n    NewStroke (Int, [(Double, Double)])\n  | -- | ids\n    DeleteStrokes [CommitId]\n  | -- | (id0,id1)\n    SyncRequest (CommitId, CommitId)\n\ninstance Binary C2SMsg where\n  put (NewStroke hshData) = do\n    put (0 :: Word8)\n    put hshData\n  put (DeleteStrokes is) = do\n    put (1 :: Word8)\n    put is\n  put (SyncRequest startend) = do\n    put (2 :: Word8)\n    put startend\n\n  get = do\n    t :: Word8 <- get\n    case t of\n      0 -> NewStroke <$> get\n      1 -> DeleteStrokes <$> get\n      2 -> SyncRequest <$> get\n\ndata Commit\n  = Add CommitId [(Double, Double)]\n  | Delete CommitId [CommitId]\n  deriving (Show)\n\ninstance Binary Commit where\n  put (Add i strk) = do\n    put (0 :: Word8)\n    put i\n    put strk\n  put (Delete i js) = do\n    put (1 :: Word8)\n    put i\n    put js\n\n  get = do\n    t :: Word8 <- get\n    case t of\n      0 -> Add <$> get <*> get\n      1 -> Delete <$> get <*> get\n\ncommitId :: Commit -> CommitId\ncommitId (Add i _) = i\ncommitId (Delete i _) = i\n\ndata S2CMsg\n  = -- | id\n    RegisterStroke CommitId\n  | -- | commits\n    DataStrokes [Commit]\n\ninstance Binary S2CMsg where\n  put (RegisterStroke i) = put (0 :: Word8) >> put i\n  put (DataStrokes cs) = put (1 :: Word8) >> put cs\n\n  get = do\n    t :: Word8 <- get\n    case t of\n      0 -> RegisterStroke <$> get\n      1 -> DataStrokes <$> get\n'