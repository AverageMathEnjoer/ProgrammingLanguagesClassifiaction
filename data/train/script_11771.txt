b'#I @"..\\..\\..\\packages\\"\n#r @"FsCheck\\lib\\net45\\FsCheck.dll"\n#r @"xunit.extensibility.core\\lib\\dotnet\\xunit.core.dll"\n#r @"xunit.abstractions\\lib\\net35\\xunit.abstractions.dll"\n#r @"FsCheck.Xunit\\lib\\net45\\FsCheck.Xunit.dll"\n\nopen System\nopen FsCheck\nopen FsCheck.Xunit\n\n// Listing 41.1\nlet sumsNumbers numbers =\n    numbers |> List.fold (+) 0\n\n[<Property(Verbose = true)>]\nlet ``Correctly adds numbers`` numbers =\n    let actual = sumsNumbers numbers\n    actual = List.sum numbers\n\n// Listing 41.2\nlet flipCase (text:string) =\n    text.ToCharArray()\n    |> Array.map(fun c -> if Char.IsUpper c then Char.ToLower c else Char.ToUpper c)\n    |> String\n\n[<Property>]\nlet ``Always has same number of letters`` (input:string) =\n    let output = input |> flipCase\n    input.Length = output.Length\n    \n\n// Listing 41.3\n[<Property>]\nlet ``Always has same number of letters with Guard Clause`` (input:string) =\n    input <> null ==> lazy\n        let output = input |> flipCase\n        input.Length = output.Length\n\n// Listing 41.4\ntype LettersOnlyGen() =\n    static member Letters() =\n        Arb.Default.Char() |> Arb.filter Char.IsLetter\n\n[<Property(Arbitrary = [| typeof<LettersOnlyGen> |])>]\nlet ``Always has same number of letters with Arb Gen`` (NonEmptyString input) =\n    let output = input |> flipCase\n    input.Length = output.Length\n\n\n\n\nlet noLetterIsTheSameCase (NonEmptyString input) =\n    let output = input |> flipCase\n    (input.ToCharArray(), output.ToCharArray())\n    ||> Array.forall2 (<>)\nlet allLettersAreTheSame (NonEmptyString input) =\n    let output = input |> flipCase\n    (input.ToCharArray(), output.ToCharArray())\n    ||> Array.forall2 (fun a b -> Char.ToLower a = Char.ToLower b)\n\n// Bonus! You can also run tests directly in scripts like this: -\nCheck.Quick ``Correctly adds numbers`` // simple check\n\nlet config = { Config.Default with Arbitrary = [ typeof<LettersOnlyGen> ] }\nCheck.One(config, noLetterIsTheSameCase) // check with config'