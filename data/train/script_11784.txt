b'-- | This module defines the main data types and functions needed to use\n-- Tasty.\n--\n-- To create a test suite, you also need one or more test providers, such\n-- as\n-- <https://hackage.haskell.org/package/tasty-hunit tasty-hunit> or\n-- <https://hackage.haskell.org/package/tasty-quickcheck tasty-quickcheck>.\n--\n-- A simple example (using tasty-hunit) is\n--\n-- >import Test.Tasty\n-- >import Test.Tasty.HUnit\n-- >\n-- >main = defaultMain tests\n-- >\n-- >tests :: TestTree\n-- >tests = testGroup "Tests"\n-- >  [ testCase "2+2=4" $\n-- >      2+2 @?= 4\n-- >  , testCase "7 is even" $\n-- >      assertBool "Oops, 7 is odd" (even 7)\n-- >  ]\n--\n-- Take a look at the <https://github.com/UnkindPartition/tasty#readme README>:\n-- it contains a comprehensive list of test providers, a bigger example,\n-- and a lot of other information.\n--\n-- @since 0.1\n\nmodule Test.Tasty\n  (\n  -- * Organizing tests\n    TestName\n  , TestTree\n  , testGroup\n  -- * Running tests\n  , defaultMain\n  , defaultMainWithIngredients\n  , defaultIngredients\n  , includingOptions\n  -- * Adjusting and querying options\n  -- | Normally options are specified on the command line. But you can\n  -- also have different options for different subtrees in the same tree,\n  -- using the functions below.\n  --\n  -- Note that /ingredient options/ (number of threads, hide successes\n  -- etc.) set in this way will not have any effect. This is for modifying\n  -- per-test options, such as timeout, number of generated tests etc.\n  , adjustOption\n  , localOption\n  , askOption\n  -- ** Standard options\n  , Timeout(..)\n  , mkTimeout\n  -- * Resources\n  -- | Sometimes several tests need to access the same resource \xe2\x80\x94 say,\n  -- a file or a socket. We want to create or grab the resource before\n  -- the tests are run, and destroy or release afterwards.\n  , withResource\n  -- * Dependencies\n  , DependencyType(..)\n  , after\n  , after_\n  )\n  where\n\nimport Test.Tasty.Core\nimport Test.Tasty.Runners\nimport Test.Tasty.Options\nimport Test.Tasty.Options.Core\nimport Test.Tasty.Ingredients.Basic\n\n-- | List of the default ingredients. This is what \'defaultMain\' uses.\n--\n-- At the moment it consists of \'listingTests\' and \'consoleTestReporter\'.\n--\n-- @since 0.4.2\ndefaultIngredients :: [Ingredient]\ndefaultIngredients = [listingTests, consoleTestReporter]\n\n-- | Parse the command line arguments and run the tests.\n--\n-- When the tests finish, this function calls \'System.Exit.exitWith\' with the exit code\n-- that indicates whether any tests have failed. Most external systems\n-- (stack, cabal, travis-ci, jenkins etc.) rely on the exit code to detect\n-- whether the tests pass. If you want to do something else after\n-- `defaultMain` returns, you need to catch the exception and then re-throw\n-- it. Example:\n--\n-- >import Test.Tasty\n-- >import Test.Tasty.HUnit\n-- >import System.Exit\n-- >import Control.Exception\n-- >\n-- >test = testCase "Test 1" (2 @?= 3)\n-- >\n-- >main = defaultMain test\n-- >  `catch` (\\e -> do\n-- >    if e == ExitSuccess\n-- >      then putStrLn "Yea"\n-- >      else putStrLn "Nay"\n-- >    throwIO e)\n--\n-- @since 0.1\ndefaultMain :: TestTree -> IO ()\ndefaultMain = defaultMainWithIngredients defaultIngredients\n\n-- | Locally adjust the option value for the given test subtree.\n--\n-- @since 0.1\nadjustOption :: IsOption v => (v -> v) -> TestTree -> TestTree\nadjustOption f = PlusTestOptions $ \\opts ->\n  setOption (f $ lookupOption opts) opts\n\n-- | Locally set the option value for the given test subtree.\n--\n-- @since 0.1\nlocalOption :: IsOption v => v -> TestTree -> TestTree\nlocalOption v = PlusTestOptions (setOption v)\n\n-- | Customize the test tree based on the run-time options.\n--\n-- @since 0.6\naskOption :: IsOption v => (v -> TestTree) -> TestTree\naskOption f = AskOptions $ f . lookupOption\n\n-- | Acquire the resource to run this test (sub)tree and release it\n-- afterwards.\n--\n-- @since 0.5\nwithResource\n  :: IO a -- ^ initialize the resource\n  -> (a -> IO ()) -- ^ free the resource\n  -> (IO a -> TestTree)\n    -- ^ @\'IO\' a@ is an action which returns the acquired resource.\n    -- Despite it being an \'IO\' action, the resource it returns will be\n    -- acquired only once and shared across all the tests in the tree.\n  -> TestTree\nwithResource acq rel = WithResource (ResourceSpec acq rel)\n'