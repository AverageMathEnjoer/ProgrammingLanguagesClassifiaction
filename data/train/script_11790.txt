b'package com.naman14.timber.dataloaders;\n\nimport android.text.TextUtils;\n\nimport java.io.File;\nimport java.io.FileFilter;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\n/**\n * Created by nv95 on 10.11.16.\n */\n\npublic class FolderLoader {\n\n    private static final String[] SUPPORTED_EXT = new String[] {\n            "mp3",\n            "mp4",\n            "m4a",\n            "aac",\n            "ogg",\n            "wav"\n    };\n\n    public static List<File> getMediaFiles(File dir, final boolean acceptDirs) {\n        ArrayList<File> list = new ArrayList<>();\n        list.add(new File(dir, ".."));\n        if (dir.isDirectory()) {\n            List<File> files = Arrays.asList(dir.listFiles(new FileFilter() {\n\n                @Override\n                public boolean accept(File file) {\n                    if (file.isFile()) {\n                        String name = file.getName();\n                        return !".nomedia".equals(name) && checkFileExt(name);\n                    } else if (file.isDirectory()) {\n                        return acceptDirs && checkDir(file);\n                    } else\n                        return false;\n                }\n            }));\n            Collections.sort(files, new FilenameComparator());\n            Collections.sort(files, new DirFirstComparator());\n            list.addAll(files);\n        }\n\n        return list;\n    }\n\n    public static boolean isMediaFile(File file) {\n        return file.exists() && file.canRead() && checkFileExt(file.getName());\n    }\n\n    private static boolean checkDir(File dir) {\n        return dir.exists() && dir.canRead() && !".".equals(dir.getName()) && dir.listFiles(new FileFilter() {\n            @Override\n            public boolean accept(File pathname) {\n                String name = pathname.getName();\n                return !".".equals(name) && !"..".equals(name) && pathname.canRead() && (pathname.isDirectory()  || (pathname.isFile() && checkFileExt(name)));\n            }\n\n        }).length != 0;\n    }\n\n    private static boolean checkFileExt(String name) {\n        if (TextUtils.isEmpty(name)) {\n            return false;\n        }\n        int p = name.lastIndexOf(".") + 1;\n        if (p < 1) {\n            return false;\n        }\n        String ext = name.substring(p).toLowerCase();\n        for (String o : SUPPORTED_EXT) {\n            if (o.equals(ext)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private static class FilenameComparator implements Comparator<File> {\n        @Override\n        public int compare(File f1, File f2) {\n            return f1.getName().compareTo(f2.getName());\n        }\n    }\n\n    private static class DirFirstComparator implements Comparator<File> {\n        @Override\n        public int compare(File f1, File f2) {\n            if (f1.isDirectory() == f2.isDirectory())\n                return 0;\n            else if (f1.isDirectory() && !f2.isDirectory())\n                return -1;\n            else\n                return 1;\n        }\n    }\n}\n'