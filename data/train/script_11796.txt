b'// Listing 33.1\n#I @"..\\..\\packages"\n#r @"FSharp.Data\\lib\\net40\\FSharp.Data.dll"\nopen FSharp.Data\n\ntype Package = HtmlProvider< @"..\\..\\data\\sample-package.html">\n\n// Listing 33.1\nlet getDownloadsForPackage packageName =\n    let package = Package.Load(sprintf "https://www.nuget.org/packages/%s" packageName)\n    package.Tables.``Version History``.Rows\n    |> Seq.sumBy(fun p -> p.Downloads)\n\n// Listing 33.2\nlet getPackage packageName =\n    packageName |> sprintf "https://www.nuget.org/packages/%s" |> Package.Load\nlet getDetailsForVersion versionText packageName =\n    let package = getPackage packageName\n    package.Tables.``Version History``.Rows |> Seq.tryFind(fun p -> p.Version.Contains versionText)\n\n\n// Listing 33.3\n(* You should comment out / delete the lines above before uncommenting these ones - otherwise, as the names\nof the declared symbols clash, you\'ll get errors in the IDE. *)\n\n// let getPackage =\n//     sprintf "https://www.nuget.org/packages/%s" >> Package.Load\n// let getVersionsForPackage (package:Package) =\n//     package.Tables.``Version History``.Rows\n// let loadPackageVersions = getPackage >> getVersionsForPackage\n\n// let getDownloadsForPackage =\n//     loadPackageVersions >> Seq.sumBy(fun p -> p.Downloads)\n\n// let getDetailsForVersion versionText =\n//     loadPackageVersions >> Seq.tryFind(fun p -> p.Version.Contains versionText)\n\n// Now you try step 10\n// let getDetailsForCurrentVersion = getDetailsForVersion "(this version)"\n\n// Listing 33.4\n\nopen System\n\ntype PackageVersion =\n    | CurrentVersion\n    | Prerelease\n    | Old\ntype VersionDetails =\n    { Version : Version\n      Downloads : decimal\n      PackageVersion : PackageVersion\n      LastUpdated : DateTime }\ntype NuGetPackage =\n    { PackageName : string\n      Versions : VersionDetails list }\n\n// Listing 33.5\nlet parse (versionText:string) =\n    let getVersionPart (version:string) isCurrent =\n        match version.Split \'-\', isCurrent with\n        | [| version; _ |], true\n        | [| version |], true -> Version.Parse version, CurrentVersion\n        | [| version; _ |], false -> Version.Parse version, Prerelease\n        | [| version |], false -> Version.Parse version, Old\n        | _ -> failwith "unknown version format"\n\n    let parts = versionText.Split \' \' |> Seq.toList |> List.rev\n    match parts with\n    | [] -> failwith "Must be at least two elements to a version"\n    | "version)" :: "(this" :: version :: _ -> getVersionPart version true\n    | version :: _ -> getVersionPart version false\n\nlet enrich (versionHistory:Package.VersionHistory.Row seq) = \n    { PackageName =\n        match versionHistory |> Seq.map(fun row -> row.Version.Split \' \' |> Array.toList |> List.rev) |> Seq.head with\n        | "version)" :: "(this" :: _ :: name | _ :: name -> List.rev name |> String.concat " "\n        | _ -> failwith "Unable to parse version name"\n      Versions =\n        versionHistory \n        |> Seq.map(fun versionHistory ->\n            let version, packageVersion = parse versionHistory.Version\n            { Version = version\n              Downloads = versionHistory.Downloads\n              LastUpdated = versionHistory.``Last updated``\n              PackageVersion = packageVersion })\n        |> Seq.toList }\n\n// Listing 33.6\n(* You should comment out / delete the clashing function definitions from Listing 33.3 in order to remove\nany errors in the IDE *)\n\n// let loadPackageVersions = getPackage >> getVersionsForPackage >> enrich >> (fun p -> p.Versions)\n// let getDetailsForVersion version = loadPackageVersions >> Seq.find(fun p -> p.Version = version)\n// let getDetailsForCurrentVersion = loadPackageVersions >> Seq.find(fun p -> p.PackageVersion = CurrentVersion)\n\n// "Newtonsoft.Json" |> getDetailsForVersion (Version.Parse "9.0.1")\n\n// let getDownloadsForPackage = loadPackageVersions >> Seq.sumBy(fun p -> p.Downloads)\n'