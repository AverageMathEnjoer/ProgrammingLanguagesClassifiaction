b'/**\n * Copyright (C) 2020 Fernando Cejas Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.fernandocejas.sample.core.navigation\n\nimport android.content.ActivityNotFoundException\nimport android.content.Context\nimport android.content.Intent\nimport android.net.Uri\nimport android.view.View\nimport android.widget.ImageView\nimport androidx.core.app.ActivityOptionsCompat\nimport androidx.fragment.app.FragmentActivity\nimport com.fernandocejas.sample.core.extension.empty\nimport com.fernandocejas.sample.features.login.Authenticator\nimport com.fernandocejas.sample.features.login.LoginActivity\nimport com.fernandocejas.sample.features.movies.MovieDetailsActivity\nimport com.fernandocejas.sample.features.movies.MovieView\nimport com.fernandocejas.sample.features.movies.MoviesActivity\nimport javax.inject.Inject\nimport javax.inject.Singleton\n\n\n@Singleton\nclass Navigator\n@Inject constructor(private val authenticator: Authenticator) {\n\n    private fun showLogin(context: Context) =\n        context.startActivity(LoginActivity.callingIntent(context))\n\n    fun showMain(context: Context) {\n        when (authenticator.userLoggedIn()) {\n            true -> showMovies(context)\n            false -> showLogin(context)\n        }\n    }\n\n    private fun showMovies(context: Context) =\n        context.startActivity(MoviesActivity.callingIntent(context))\n\n    fun showMovieDetails(activity: FragmentActivity, movie: MovieView, navigationExtras: Extras) {\n        val intent = MovieDetailsActivity.callingIntent(activity, movie)\n        val sharedView = navigationExtras.transitionSharedElement as ImageView\n        val activityOptions = ActivityOptionsCompat\n            .makeSceneTransitionAnimation(activity, sharedView, sharedView.transitionName)\n        activity.startActivity(intent, activityOptions.toBundle())\n    }\n\n    private val VIDEO_URL_HTTP = "http://www.youtube.com/watch?v="\n    private val VIDEO_URL_HTTPS = "https://www.youtube.com/watch?v="\n\n    fun openVideo(context: Context, videoUrl: String) {\n        try {\n            context.startActivity(createYoutubeIntent(videoUrl))\n        } catch (ex: ActivityNotFoundException) {\n            context.startActivity(Intent(Intent.ACTION_VIEW, Uri.parse(videoUrl)))\n        }\n    }\n\n    private fun createYoutubeIntent(videoUrl: String): Intent {\n        val videoId = when {\n            videoUrl.startsWith(VIDEO_URL_HTTP) -> videoUrl.replace(VIDEO_URL_HTTP, String.empty())\n            videoUrl.startsWith(VIDEO_URL_HTTPS) -> videoUrl.replace(\n                VIDEO_URL_HTTPS,\n                String.empty()\n            )\n            else -> videoUrl\n        }\n\n        val intent = Intent(Intent.ACTION_VIEW, Uri.parse("vnd.youtube:$videoId"))\n        intent.putExtra("force_fullscreen", true)\n        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\n\n        return intent\n    }\n\n    class Extras(val transitionSharedElement: View)\n}\n\n\n'