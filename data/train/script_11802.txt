b'using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Core.DependencyResolvers;\nusing Core.Extensions;\nusing Core.Utilities.IoC;\nusing Core.Utilities.Security.Encyption;\nusing Core.Utilities.Security.Jwt;\nusing Microsoft.AspNetCore.Authentication.JwtBearer;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.HttpsPolicy;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.IdentityModel.Tokens;\n\nnamespace WebAPI\n{\n    public class Startup\n    {\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public IConfiguration Configuration { get; }\n\n        // This method gets called by the runtime. Use this method to add services to the container.\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddCors(options =>\n            {\n                options.AddPolicy("AllowOrigin",\n                    builder => builder.WithOrigins("http://localhost:3000"));\n            });\n\n            var tokenOptions = Configuration.GetSection("TokenOptions").Get<TokenOptions>();\n\n            services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\n                .AddJwtBearer(options =>\n                {\n                    options.TokenValidationParameters=new TokenValidationParameters\n                    {\n                        ValidateIssuer = true,\n                        ValidateAudience = true,\n                        ValidateLifetime = true,\n                        ValidIssuer = tokenOptions.Issuer,\n                        ValidAudience = tokenOptions.Audience,\n                        ValidateIssuerSigningKey = true,\n                        IssuerSigningKey = SecurityKeyHelper.CreateSecurityKey(tokenOptions.SecurityKey)\n                    };\n                });\n\n           \n\n            services.AddDependencyResolvers(new ICoreModule[]\n            {\n                new CoreModule(),\n            });\n        }\n\n        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.ConfigureCustomExceptionMiddleware();\n\n            app.UseCors(builder => builder.WithOrigins("http://localhost:3000").AllowAnyHeader());\n\n            app.UseHttpsRedirection();\n\n            app.UseRouting();\n\n            app.UseAuthentication();\n\n            app.UseAuthorization();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n'