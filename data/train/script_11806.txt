b'package effectivejava.chapter5.item31;\nimport java.util.*;\n\n// Generic stack with bulk methods using wildcard types (Pages 139-41)\npublic class Stack<E> {\n    private E[] elements;\n    private int size = 0;\n    private static final int DEFAULT_INITIAL_CAPACITY = 16;\n\n    // The elements array will contain only E instances from push(E).\n    // This is sufficient to ensure type safety, but the runtime\n    // type of the array won\'t be E[]; it will always be Object[]!\n    @SuppressWarnings("unchecked") \n        public Stack() {\n        elements = (E[]) new Object[DEFAULT_INITIAL_CAPACITY];\n    }\n\n    public void push(E e) {\n        ensureCapacity();\n        elements[size++] = e;\n    }\n\n    public E pop() {\n        if (size==0)\n            throw new EmptyStackException();\n        E result = elements[--size];\n        elements[size] = null; // Eliminate obsolete reference\n        return result;\n    }\n\n    public boolean isEmpty() {\n        return size == 0;\n    }\n\n    private void ensureCapacity() {\n        if (elements.length == size)\n            elements = Arrays.copyOf(elements, 2 * size + 1);\n    }\n\n//    // pushAll staticfactory without wildcard type - deficient!\n//    public void pushAll(Iterable<E> src) {\n//        for (E e : src)\n//            push(e);\n//    }\n\n     // Wildcard type for parameter that serves as an E producer\n    public void pushAll(Iterable<? extends E> src) {\n        for (E e : src)\n            push(e);\n    }\n\n//    // popAll staticfactory without wildcard type - deficient!\n//    public void popAll(Collection<E> dst) {\n//        while (!isEmpty())\n//            dst.add(pop());\n//    }\n\n    // Wildcard type for parameter that serves as an E consumer\n    public void popAll(Collection<? super E> dst) {\n        while (!isEmpty())\n            dst.add(pop());\n    }\n\n    // Little program to exercise our generic Stack\n    public static void main(String[] args) {\n        Stack<Number> numberStack = new Stack<>();\n        Iterable<Integer> integers = Arrays.asList(3, 1, 4, 1, 5, 9);\n        numberStack.pushAll(integers);\n\n        Collection<Object> objects = new ArrayList<>();\n        numberStack.popAll(objects);\n\n        System.out.println(objects);\n    }\n}\n'