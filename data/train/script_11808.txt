b'{-# LANGUAGE CPP #-}\n{-# LANGUAGE ForeignFunctionInterface #-}\n{-# LANGUAGE OverloadedStrings #-}\n\nmodule Hoodle.GUI.Menu where\n\nimport Control.Lens (set)\nimport Control.Monad (foldM, when)\nimport qualified Data.Foldable as F (forM_)\nimport Data.Hoodle.Predefined\n  ( predefinedEraserFine,\n    predefinedEraserMedium,\n    predefinedEraserThick,\n    predefinedEraserUltrathick,\n    predefinedEraserVeryfine,\n    predefinedEraserVerythick,\n    predefinedFine,\n    predefinedHighlighterFine,\n    predefinedHighlighterMedium,\n    predefinedHighlighterThick,\n    predefinedHighlighterUltrathick,\n    predefinedHighlighterVeryfine,\n    predefinedHighlighterVerythick,\n    predefinedMedium,\n    predefinedThick,\n    predefinedUltrathick,\n    predefinedVeryfine,\n    predefinedVerythick,\n  )\nimport Foreign.C.Types (CInt (..))\nimport Foreign.ForeignPtr (withForeignPtr)\nimport Foreign.Ptr (Ptr)\nimport qualified Graphics.UI.Gtk as Gtk\nimport qualified Graphics.UI.Gtk.General.CssProvider as Gtk\nimport qualified Graphics.UI.Gtk.General.StyleContext as Gtk\nimport qualified Graphics.UI.GtkInternals as Gtk (unToolbar)\nimport Hoodle.Coroutine.Callback (eventHandler)\nimport Hoodle.Type\n  ( AllEvent (..),\n    BackgroundStyle (..),\n    EventVar,\n    MenuEvent (..),\n    NewPageModeType (..),\n    PenColor (..),\n    PenType (..),\n    SelectType (..),\n    UIComponentSignalHandler,\n    UserEvent (..),\n    defaultUIComponentSignalHandler,\n    newPageModeSignal,\n    pageModeSignal,\n    penColorSignal,\n    penModeSignal,\n    viewModeToUserEvent,\n  )\nimport Paths_hoodle_core (getDataDir)\nimport System.FilePath ((</>))\n\n-- | This is because haskell gtk3 package miss gtk_toolbar_set_icon_size.\n--   Refer to leksah IDE.Find module.\nforeign import ccall safe "gtk_toolbar_set_icon_size"\n  gtk_toolbar_set_icon_size :: Ptr Gtk.Toolbar -> CInt -> IO ()\n\ntoolbarSetIconSize :: Gtk.ToolbarClass self => self -> Gtk.IconSize -> IO ()\ntoolbarSetIconSize self iconSize =\n  withForeignPtr (Gtk.unToolbar $ Gtk.toToolbar self) $\n    \\selfPtr -> gtk_toolbar_set_icon_size selfPtr (fromIntegral $ fromEnum iconSize)\n\njustMenu :: MenuEvent -> Maybe UserEvent\njustMenu = Just . Menu\n\niconList :: [(String, Gtk.StockId)]\niconList =\n  [ ("fullscreen.png", "myfullscreen"),\n    ("pencil.png", "mypen"),\n    ("eraser.png", "myeraser"),\n    ("highlighter.png", "myhighlighter"),\n    ("text-tool.png", "mytext"),\n    ("latex-tool.png", "mylatex"),\n    ("shapes.png", "myshapes"),\n    ("ruler.png", "myruler"),\n    ("lasso.png", "mylasso"),\n    ("rect-select.png", "myrectselect"),\n    ("stretch.png", "mystretch"),\n    ("hand.png", "myhand"),\n    ("recycled.png", "mydefault"),\n    ("default-pen.png", "mydefaultpen"),\n    ("thin.png", "mythin"),\n    ("medium.png", "mymedium"),\n    ("thick.png", "mythick"),\n    ("black.png", "myblack"),\n    ("blue.png", "myblue"),\n    ("red.png", "myred"),\n    ("green.png", "mygreen"),\n    ("gray.png", "mygray"),\n    ("lightblue.png", "mylightblue"),\n    ("lightgreen.png", "mylightgreen"),\n    ("magenta.png", "mymagenta"),\n    ("orange.png", "myorange"),\n    ("yellow.png", "myyellow"),\n    ("white.png", "mywhite")\n  ]\n\n-- |\nviewmods :: [Gtk.RadioActionEntry]\nviewmods =\n  [ Gtk.RadioActionEntry "CONTA" "Continuous" Nothing Nothing Nothing 0,\n    Gtk.RadioActionEntry "ONEPAGEA" "One Page" Nothing Nothing Nothing 1\n  ]\n\n-- |\npointmods :: [Gtk.RadioActionEntry]\npointmods =\n  [ Gtk.RadioActionEntry "PENVERYFINEA" "Very fine" Nothing Nothing Nothing 0,\n    Gtk.RadioActionEntry "PENFINEA" "Fine" (Just "mythin") Nothing Nothing 1,\n    Gtk.RadioActionEntry "PENTHICKA" "Thick" (Just "mythick") Nothing Nothing 3,\n    Gtk.RadioActionEntry "PENVERYTHICKA" "Very Thick" Nothing Nothing Nothing 4,\n    Gtk.RadioActionEntry "PENULTRATHICKA" "Ultra Thick" Nothing Nothing Nothing 5,\n    Gtk.RadioActionEntry "PENMEDIUMA" "Medium" (Just "mymedium") Nothing Nothing 2\n    --             , Gtk.RadioActionEntry "NOWIDTH" "Unknown" Nothing Nothing Nothing 999\n  ]\n\n-- |\npenmods :: [Gtk.RadioActionEntry]\npenmods =\n  [ Gtk.RadioActionEntry "PENA" "Pen" (Just "mypen") Nothing Nothing 0,\n    Gtk.RadioActionEntry "ERASERA" "Eraser" (Just "myeraser") Nothing Nothing 1,\n    Gtk.RadioActionEntry "HIGHLTA" "Highlighter" (Just "myhighlighter") Nothing Nothing 2,\n    --           , Gtk.RadioActionEntry "TEXTA"   "Text"        (Just "mytext")        Nothing Nothing 3\n    Gtk.RadioActionEntry "SELREGNA" "Select Region" (Just "mylasso") Nothing Nothing 4,\n    Gtk.RadioActionEntry "SELRECTA" "Select Rectangle" (Just "myrectselect") Nothing Nothing 5,\n    Gtk.RadioActionEntry "VERTSPA" "Vertical Space" (Just "mystretch") Nothing Nothing 6\n  ]\n\n--          , Gtk.RadioActionEntry "HANDA"   "Hand Tool"         (Just "myhand")        Nothing Nothing 7\n\n-- |\ncolormods :: [Gtk.RadioActionEntry]\ncolormods =\n  [ Gtk.RadioActionEntry "BLUEA" "Blue" (Just "myblue") Nothing Nothing 1,\n    Gtk.RadioActionEntry "REDA" "Red" (Just "myred") Nothing Nothing 2,\n    Gtk.RadioActionEntry "GREENA" "Green" (Just "mygreen") Nothing Nothing 3,\n    Gtk.RadioActionEntry "GRAYA" "Gray" (Just "mygray") Nothing Nothing 4,\n    Gtk.RadioActionEntry "LIGHTBLUEA" "Lightblue" (Just "mylightblue") Nothing Nothing 5,\n    Gtk.RadioActionEntry "LIGHTGREENA" "Lightgreen" (Just "mylightgreen") Nothing Nothing 6,\n    Gtk.RadioActionEntry "MAGENTAA" "Magenta" (Just "mymagenta") Nothing Nothing 7,\n    Gtk.RadioActionEntry "ORANGEA" "Orange" (Just "myorange") Nothing Nothing 8,\n    Gtk.RadioActionEntry "YELLOWA" "Yellow" (Just "myyellow") Nothing Nothing 9,\n    Gtk.RadioActionEntry "WHITEA" "White" (Just "mywhite") Nothing Nothing 10,\n    Gtk.RadioActionEntry "BLACKA" "Black" (Just "myblack") Nothing Nothing 0\n    ---             , Gtk.RadioActionEntry "NOCOLOR"     "Unknown"    Nothing Nothing Nothing 999\n  ]\n\n-- |\nbkgstyles :: [Gtk.RadioActionEntry]\nbkgstyles =\n  [ Gtk.RadioActionEntry "BKGGRAPHA" "Graph" Nothing Nothing Nothing 3,\n    Gtk.RadioActionEntry "BKGPLAINA" "Plain" Nothing Nothing Nothing 0,\n    Gtk.RadioActionEntry "BKGLINEDA" "Lined" Nothing Nothing Nothing 1,\n    Gtk.RadioActionEntry "BKGRULEDA" "Ruled" Nothing Nothing Nothing 2\n  ]\n\nnewpagemods :: [Gtk.RadioActionEntry]\nnewpagemods =\n  [ Gtk.RadioActionEntry "NEWPAGEPLAINA" "Plain page" Nothing Nothing Nothing 0,\n    Gtk.RadioActionEntry "NEWPAGELASTA" "Last page" Nothing Nothing Nothing 1,\n    Gtk.RadioActionEntry "NEWPAGECYCLEA" "Cycle page" Nothing Nothing Nothing 2\n  ]\n\n-- |\niconResourceAdd :: Gtk.IconFactory -> FilePath -> (FilePath, Gtk.StockId) -> IO ()\niconResourceAdd iconfac resdir (fp, stid) = do\n  myIconSource <- Gtk.iconSourceNew\n  Gtk.iconSourceSetFilename myIconSource (resdir </> fp)\n  -- Gtk.iconSourceSetSize myIconSource Gtk.IconSizeLargeToolbar\n  Gtk.iconSourceSetSize myIconSource Gtk.IconSizeSmallToolbar\n  myIconSourceSmall <- Gtk.iconSourceNew\n  Gtk.iconSourceSetFilename myIconSourceSmall (resdir </> fp)\n  Gtk.iconSourceSetSize myIconSource Gtk.IconSizeMenu\n  myIconSet <- Gtk.iconSetNew\n  Gtk.iconSetAddSource myIconSet myIconSource\n  Gtk.iconSetAddSource myIconSet myIconSourceSmall\n  Gtk.iconFactoryAdd iconfac stid myIconSet\n\n-- |\nactionNewAndRegisterRef ::\n  EventVar ->\n  String ->\n  String ->\n  Maybe String ->\n  Maybe Gtk.StockId ->\n  Maybe UserEvent ->\n  IO Gtk.Action\nactionNewAndRegisterRef evar name label tooltip stockId myevent = do\n  a <- Gtk.actionNew name label tooltip stockId\n  case myevent of\n    Nothing -> return a\n    Just ev -> do\n      _ <- a `Gtk.on` Gtk.actionActivated $ do\n        eventHandler evar (UsrEv ev)\n      return a\n\n-- |\ngetMenuUI :: EventVar -> IO (Gtk.UIManager, UIComponentSignalHandler)\ngetMenuUI evar = do\n  let actionNewAndRegister = actionNewAndRegisterRef evar\n  -- icons\n  myiconfac <- Gtk.iconFactoryNew\n  Gtk.iconFactoryAddDefault myiconfac\n  resDir <- (</> "resource") <$> getDataDir\n\n  css <- Gtk.cssProviderNew\n  Gtk.cssProviderLoadFromPath css (resDir </> "hoodle.css")\n  Just screen <- Gtk.screenGetDefault\n  Gtk.styleContextAddProviderForScreen screen css 800\n\n  mapM_ (iconResourceAdd myiconfac resDir) iconList\n  fma <- actionNewAndRegister "FMA" "File" Nothing Nothing Nothing\n  ema <- actionNewAndRegister "EMA" "Edit" Nothing Nothing Nothing\n  vma <- actionNewAndRegister "VMA" "View" Nothing Nothing Nothing\n  lma <- actionNewAndRegister "LMA" "Layer" Nothing Nothing Nothing\n  ima <- actionNewAndRegister "IMA" "Embed" Nothing Nothing Nothing\n  pma <- actionNewAndRegister "PMA" "Page" Nothing Nothing Nothing\n  tma <- actionNewAndRegister "TMA" "Tool" Nothing Nothing Nothing\n  verma <- actionNewAndRegister "VERMA" "Version" Nothing Nothing Nothing\n  oma <- actionNewAndRegister "OMA" "Option" Nothing Nothing Nothing\n  wma <- actionNewAndRegister "WMA" "Window" Nothing Nothing Nothing\n  hma <- actionNewAndRegister "HMA" "Help" Nothing Nothing Nothing\n\n  ---------------\n  -- file menu --\n  ---------------\n  newa <- actionNewAndRegister "NEWA" "New" (Just "Just a Stub") (Just Gtk.stockNew) (justMenu MenuNew)\n  opena <- actionNewAndRegister "OPENA" "Open" (Just "Just a Stub") (Just Gtk.stockOpen) (justMenu MenuOpen)\n  savea <- actionNewAndRegister "SAVEA" "Save" (Just "Just a Stub") (Just Gtk.stockSave) (justMenu MenuSave)\n  saveasa <- actionNewAndRegister "SAVEASA" "Save As" (Just "Just a Stub") (Just Gtk.stockSaveAs) (justMenu MenuSaveAs)\n  printa <- actionNewAndRegister "PRINTA" "Print" (Just "Just a Stub") Nothing (justMenu MenuPrint)\n  --\n  exporta <- actionNewAndRegister "EXPORTA" "Export to PDF" (Just "Just a Stub") Nothing (justMenu MenuExport)\n  expsvga <- actionNewAndRegister "EXPSVGA" "Export Current Page to SVG" (Just "Just a Stub") Nothing (justMenu MenuExportPageSVG)\n  --\n  annpdfa <- actionNewAndRegister "ANNPDFA" "Annotate PDF" (Just "Just a Stub") Nothing (justMenu MenuAnnotatePDF)\n  --\n  reloada <- actionNewAndRegister "RELOADA" "Reload File" (Just "Just a Stub") Nothing (justMenu MenuReload)\n  recenta <- actionNewAndRegister "RECENTA" "Recent Document" (Just "Just a Stub") Nothing (justMenu MenuRecentDocument)\n  --\n  quita <- actionNewAndRegister "QUITA" "Quit" (Just "Just a Stub") (Just Gtk.stockQuit) (justMenu MenuQuit)\n\n  ---------------\n  -- edit menu --\n  ---------------\n  undoa <- actionNewAndRegister "UNDOA" "Undo" (Just "Just a Stub") (Just Gtk.stockUndo) (justMenu MenuUndo)\n  redoa <- actionNewAndRegister "REDOA" "Redo" (Just "Just a Stub") (Just Gtk.stockRedo) (justMenu MenuRedo)\n  cuta <- actionNewAndRegister "CUTA" "Cut" (Just "Just a Stub") (Just Gtk.stockCut) (justMenu MenuCut)\n  copya <- actionNewAndRegister "COPYA" "Copy" (Just "Just a Stub") (Just Gtk.stockCopy) (justMenu MenuCopy)\n  pastea <- actionNewAndRegister "PASTEA" "Paste" (Just "Just a Stub") (Just Gtk.stockPaste) (justMenu MenuPaste)\n  deletea <- actionNewAndRegister "DELETEA" "Delete" (Just "Just a Stub") (Just Gtk.stockDelete) (justMenu MenuDelete)\n\n  ---------------\n  -- view menu --\n  ---------------\n  togpanzooma <- actionNewAndRegister "TOGPANZOOMA" "Show/Hide Zoom Widget" (Just "Just a stub") Nothing (justMenu MenuTogglePanZoomWidget)\n  togscra <- actionNewAndRegister "TOGSCRA" "Show/Hide Scroll Widget" (Just "Just a stub") Nothing (justMenu MenuToggleScrollWidget)\n  --\n  zooma <- actionNewAndRegister "ZOOMA" "Zoom" (Just "Just a Stub") Nothing Nothing -- (justMenu MenuZoom)\n  zmina <- actionNewAndRegister "ZMINA" "Zoom In" (Just "Zoom In") (Just Gtk.stockZoomIn) (justMenu MenuZoomIn)\n  zmouta <- actionNewAndRegister "ZMOUTA" "Zoom Out" (Just "Zoom Out") (Just Gtk.stockZoomOut) (justMenu MenuZoomOut)\n  nrmsizea <- actionNewAndRegister "NRMSIZEA" "Normal Size" (Just "Normal Size") (Just Gtk.stockZoom100) (justMenu MenuNormalSize)\n  pgwdtha <- actionNewAndRegister "PGWDTHA" "Page Width" (Just "Page Width") (Just Gtk.stockZoomFit) (justMenu MenuPageWidth)\n  pgheighta <- actionNewAndRegister "PGHEIGHTA" "Page Height" (Just "Page Height") Nothing (justMenu MenuPageHeight)\n  setzma <- actionNewAndRegister "SETZMA" "Set Zoom" (Just "Set Zoom") (Just Gtk.stockFind) (justMenu MenuSetZoom)\n  --\n  fscra <- actionNewAndRegister "FSCRA" "Full Screen" (Just "Just a Stub") (Just "myfullscreen") (justMenu MenuFullScreen)\n  --\n  fstpagea <- actionNewAndRegister "FSTPAGEA" "First Page" (Just "Just a Stub") (Just Gtk.stockGotoFirst) (justMenu MenuFirstPage)\n  prvpagea <- actionNewAndRegister "PRVPAGEA" "Previous Page" (Just "Just a Stub") (Just Gtk.stockGoBack) (justMenu MenuPreviousPage)\n  nxtpagea <- actionNewAndRegister "NXTPAGEA" "Next Page" (Just "Just a Stub") (Just Gtk.stockGoForward) (justMenu MenuNextPage)\n  lstpagea <- actionNewAndRegister "LSTPAGEA" "Last Page" (Just "Just a Stub") (Just Gtk.stockGotoLast) (justMenu MenuLastPage)\n  --\n  hsplita <- actionNewAndRegister "HSPLITA" "Clone View Horizontally" (Just "horizontal split") Nothing (justMenu MenuHSplit)\n  vsplita <- actionNewAndRegister "VSPLITA" "Clone View Vertically" (Just "vertical split") Nothing (justMenu MenuVSplit)\n  delcvsa <- actionNewAndRegister "DELCVSA" "Remove Clone View" (Just "delete current canvas") Nothing (justMenu MenuDelCanvas)\n\n  ----------------\n  -- layer menu --\n  ----------------\n  toglayera <- actionNewAndRegister "TOGLAYERA" "Show/Hide Layer Widget" (Just "Just a stub") Nothing (justMenu MenuToggleLayerWidget)\n  --\n  newlyra <- actionNewAndRegister "NEWLYRA" "New Layer" (Just "Just a Stub") Nothing (justMenu MenuNewLayer)\n  nextlayera <- actionNewAndRegister "NEXTLAYERA" "Next Layer" (Just "Just a Stub") Nothing (justMenu MenuNextLayer)\n  prevlayera <- actionNewAndRegister "PREVLAYERA" "Prev Layer" (Just "Just a Stub") Nothing (justMenu MenuPrevLayer)\n  gotolayera <- actionNewAndRegister "GOTOLAYERA" "Goto Layer" (Just "Just a Stub") Nothing (justMenu MenuGotoLayer)\n  dellyra <- actionNewAndRegister "DELLYRA" "Delete Layer" (Just "Just a Stub") Nothing (justMenu MenuDeleteLayer)\n\n  ----------------\n  -- embed menu --\n  ----------------\n\n  ldpnga <- actionNewAndRegister "LDIMGA" "Load PNG or JPG Image" (Just "Just a Stub") Nothing (justMenu MenuLoadPNGorJPG)\n  ldsvga <- actionNewAndRegister "LDSVGA" "Load SVG Image" (Just "Just a Stub") Nothing (justMenu MenuLoadSVG)\n  ldimgbkga <- actionNewAndRegister "LDIMGBKGA" "Make Title Page from Image" (Just "Just a Stub") Nothing (justMenu MenuLoadImageBackground)\n  ldpreimga <- actionNewAndRegister "LDPREIMGA" "Embed Predefined Image File" (Just "Just a Stub") Nothing (justMenu MenuEmbedPredefinedImage)\n  ldpreimg2a <- actionNewAndRegister "LDPREIMG2A" "Embed Predefined Image File 2" (Just "Just a Stub") Nothing (justMenu MenuEmbedPredefinedImage2)\n  ldpreimg3a <- actionNewAndRegister "LDPREIMG3A" "Embed Predefined Image File 3" (Just "Just a Stub") Nothing (justMenu MenuEmbedPredefinedImage3)\n\n  texta <- actionNewAndRegister "TEXTA" "Text" (Just "Text") (Just "mytext") (justMenu MenuText)\n  textsrca <- actionNewAndRegister "TEXTSRCA" "Embed Text Source" (Just "Just a Stub") Nothing (justMenu MenuEmbedTextSource)\n  editsrca <- actionNewAndRegister "EDITSRCA" "Edit text source" (Just "Just a Stub") Nothing (justMenu MenuEditEmbedTextSource)\n  editnetsrca <- actionNewAndRegister "EDITNETSRCA" "Network edit text source" (Just "Just a Stub") Nothing (justMenu MenuEditNetEmbedTextSource)\n  textfromsrca <- actionNewAndRegister "TEXTFROMSRCA" "Text From Source" (Just "Just a Stub") Nothing (justMenu MenuTextFromSource)\n\n  togglenetsrca <- Gtk.toggleActionNew ("TOGGLENETSRCA" :: String) "Toggle network edit text source" (Just "Just a Stub") Nothing\n  _ <- togglenetsrca `Gtk.on` Gtk.actionToggled $ do\n    eventHandler evar (UsrEv (Menu MenuToggleNetworkEditSource))\n  latexa <- actionNewAndRegister "LATEXA" "LaTeX" (Just "Just a Stub") (Just "mylatex") (justMenu MenuLaTeX)\n  latexneta <- actionNewAndRegister "LATEXNETA" "LaTeX Network" (Just "Just a Stub") (Just "mylatex") (justMenu MenuLaTeXNetwork)\n  combinelatexa <- actionNewAndRegister "COMBINELATEXA" "Combine LaTeX texts to ..." (Just "Just a Stub") Nothing (justMenu MenuCombineLaTeX)\n  latexfromsrca <- actionNewAndRegister "LATEXFROMSRCA" "LaTeX From Source" (Just "Just a Stub") Nothing (justMenu MenuLaTeXFromSource)\n  updatelatexa <- actionNewAndRegister "UPDATELATEXA" "Update LaTeX" (Just "Just a Stub") Nothing (justMenu MenuUpdateLaTeX)\n\n  ---------------\n  -- page menu --\n  ---------------\n\n  newpgba <- actionNewAndRegister "NEWPGBA" "New Page Before" (Just "Just a Stub") Nothing (justMenu MenuNewPageBefore)\n  newpgaa <- actionNewAndRegister "NEWPGAA" "New Page After" (Just "Just a Stub") Nothing (justMenu MenuNewPageAfter)\n  newpgea <- actionNewAndRegister "NEWPGEA" "New Page At End" (Just "Just a Stub") Nothing (justMenu MenuNewPageAtEnd)\n  delpga <- actionNewAndRegister "DELPGA" "Delete Page" (Just "Just a Stub") Nothing (justMenu MenuDeletePage)\n\n  ppsizea <- actionNewAndRegister "PPSIZEA" "Paper Size" (Just "Just a Stub") Nothing (justMenu MenuPaperSize)\n  ppclra <- actionNewAndRegister "PPCLRA" "Paper Color" (Just "Just a Stub") Nothing (justMenu MenuPaperColor)\n  ppstya <- actionNewAndRegister "PPSTYA" "Paper Style" Nothing Nothing Nothing\n  apallpga <- actionNewAndRegister "APALLPGA" "Apply To All Pages" (Just "Just a Stub") Nothing (justMenu MenuApplyToAllPages)\n  embedbkgpdfa <- actionNewAndRegister "EMBEDBKGPDFA" "Embed All PDF backgroound" (Just "Just a Stub") Nothing (justMenu MenuEmbedAllPDFBkg)\n  defppa <- actionNewAndRegister "DEFPPA" "Default Paper" (Just "Just a Stub") Nothing (justMenu MenuDefaultPaper)\n  setdefppa <- actionNewAndRegister "SETDEFPPA" "Set As Default" (Just "Just a Stub") Nothing (justMenu MenuSetAsDefaultPaper)\n\n  -- tools menu\n  linka <- actionNewAndRegister "LINKA" "Add Link" (Just "Add Link") (Just Gtk.stockIndex) (justMenu MenuAddLink)\n  anchora <- actionNewAndRegister "ANCHORA" "Add Anchor" (Just "Add Anchor") Nothing (justMenu MenuAddAnchor)\n  listanchora <- actionNewAndRegister "LISTANCHORA" "List Anchors" (Just "List Anchors") Nothing (justMenu MenuListAnchors)\n\n  clra <- actionNewAndRegister "CLRA" "Color" (Just "Just a Stub") Nothing Nothing\n  clrpcka <- actionNewAndRegister "CLRPCKA" "Color Picker.." (Just "Just a Stub") (Just Gtk.stockSelectColor) (justMenu MenuColorPicker)\n  penopta <- actionNewAndRegister "PENOPTA" "Pen Options" (Just "Just a Stub") Nothing (justMenu MenuPenOptions)\n  erasropta <- actionNewAndRegister "ERASROPTA" "Eraser Options" (Just "Just a Stub") Nothing (justMenu MenuEraserOptions)\n  hiltropta <- actionNewAndRegister "HILTROPTA" "Highlighter Options" (Just "Just a Stub") Nothing (justMenu MenuHighlighterOptions)\n  txtfnta <- actionNewAndRegister "TXTFNTA" "Text Font" (Just "Just a Stub") Nothing (justMenu MenuTextFont)\n  defpena <- actionNewAndRegister "DEFPENA" "Default Pen" (Just "Just a Stub") (Just "mydefaultpen") (justMenu MenuDefaultPen)\n  defersra <- actionNewAndRegister "DEFERSRA" "Default Eraser" (Just "Just a Stub") Nothing (justMenu MenuDefaultEraser)\n  defhiltra <- actionNewAndRegister "DEFHILTRA" "Default Highlighter" (Just "Just a Stub") Nothing (justMenu MenuDefaultHighlighter)\n  deftxta <- actionNewAndRegister "DEFTXTA" "Default Text" (Just "Just a Stub") Nothing (justMenu MenuDefaultText)\n  setdefopta <- actionNewAndRegister "SETDEFOPTA" "Set As Default" (Just "Just a Stub") Nothing (justMenu MenuSetAsDefaultOption)\n\n  ------------------\n  -- version menu --\n  ------------------\n\n  synca <- actionNewAndRegister "SYNCA" "Start Sync" (Just "Just a Stub") Nothing (justMenu MenuStartSync)\n  versiona <- actionNewAndRegister "VERSIONA" "Save Version" (Just "Just a Stub") Nothing (justMenu MenuVersionSave)\n  showreva <- actionNewAndRegister "SHOWREVA" "Show Revisions" (Just "Just a Stub") Nothing (justMenu MenuShowRevisions)\n  showida <- actionNewAndRegister "SHOWIDA" "Show UUID" (Just "Just a Stub") Nothing (justMenu MenuShowUUID)\n\n  -----------------\n  -- option menu --\n  -----------------\n  uxinputa <- Gtk.toggleActionNew ("UXINPUTA" :: String) "Use XInput" (Just "Just a Stub") Nothing\n  _ <- uxinputa `Gtk.on` Gtk.actionToggled $ do\n    eventHandler evar (UsrEv (Menu MenuUseXInput))\n  handa <- Gtk.toggleActionNew ("HANDA" :: String) "Use Touch" (Just "Toggle touch") (Just "myhand")\n  _ <- handa `Gtk.on` Gtk.actionToggled $ do\n    eventHandler evar (UsrEv (Menu MenuUseTouch))\n  popmenua <- Gtk.toggleActionNew ("POPMENUA" :: String) "Use Popup Menu" (Just "Just a stub") Nothing\n  _ <- popmenua `Gtk.on` Gtk.actionToggled $ do\n    eventHandler evar (UsrEv (Menu MenuUsePopUpMenu))\n  ebdimga <- Gtk.toggleActionNew ("EBDIMGA" :: String) "Embed PNG/JPG Image" (Just "Just a stub") Nothing\n  _ <- ebdimga `Gtk.on` Gtk.actionToggled $ do\n    eventHandler evar (UsrEv (Menu MenuEmbedImage))\n  ebdpdfa <- Gtk.toggleActionNew ("EBDPDFA" :: String) "Embed PDF" (Just "Just a stub") Nothing\n  _ <- ebdpdfa `Gtk.on` Gtk.actionToggled $ do\n    eventHandler evar (UsrEv (Menu MenuEmbedPDF))\n  flwlnka <- Gtk.toggleActionNew ("FLWLNKA" :: String) "Follow Links" (Just "Just a stub") Nothing\n  _ <- flwlnka `Gtk.on` Gtk.actionToggled $ do\n    eventHandler evar (UsrEv (Menu MenuFollowLinks))\n  keepratioa <- Gtk.toggleActionNew ("KEEPRATIOA" :: String) "Keep Aspect Ratio" (Just "Just a stub") Nothing\n  _ <- keepratioa `Gtk.on` Gtk.actionToggled $ do\n    eventHandler evar (UsrEv (Menu MenuKeepAspectRatio))\n  vcursora <- Gtk.toggleActionNew ("VCURSORA" :: String) "Use Variable Cursor" (Just "Just a stub") Nothing\n  _ <- vcursora `Gtk.on` Gtk.actionToggled $ do\n    eventHandler evar (UsrEv (Menu MenuUseVariableCursor))\n  -- temporary implementation (later will be as submenus with toggle action. appropriate reflection)\n  togclocka <- actionNewAndRegister "TOGCLOCKA" "Toggle Clock Widget" (Just "Just a stub") Nothing (justMenu MenuToggleClockWidget)\n\n  pressrsensa <- Gtk.toggleActionNew ("PRESSRSENSA" :: String) "Pressure Sensitivity" (Just "Just a Stub") Nothing\n  _ <- pressrsensa `Gtk.on` Gtk.actionToggled $ do\n    eventHandler evar (UsrEv (Menu MenuPressureSensitivity))\n\n  newpagemoda <- actionNewAndRegister "NEWPAGEMODEA" "New page mode" Nothing Nothing Nothing\n  relauncha <- actionNewAndRegister "RELAUNCHA" "Relaunch Application" (Just "Just a Stub") Nothing (justMenu MenuRelaunch)\n\n  -- window menu\n  addtaba <- actionNewAndRegister "ADDTABA" "Add new tab" (Just "Just a Stub") Nothing (justMenu MenuAddTab)\n  -- nexttaba <- actionNewAndRegister "NEXTTABA" "Go to next tab" (Just "Just a Stub") Nothing (justMenu MenuNextTab)\n  closetaba <- actionNewAndRegister "CLOSETABA" "Close current tab" (Just "Just a Stub") Nothing (justMenu MenuCloseTab)\n\n  -- help menu\n  abouta <- actionNewAndRegister "ABOUTA" "About" (Just "Just a Stub") Nothing (justMenu MenuAbout)\n\n  -- others\n  defaulta <- actionNewAndRegister "DEFAULTA" "Default" (Just "Default") (Just "mydefault") (justMenu MenuDefault)\n\n  agr <- Gtk.actionGroupNew ("AGR" :: String)\n  mapM_\n    (Gtk.actionGroupAddAction agr)\n    [fma, ema, vma, lma, ima, pma, tma, verma, oma, wma, hma]\n  mapM_\n    (Gtk.actionGroupAddAction agr)\n    [undoa, redoa, cuta, copya, pastea, deletea]\n  mapM_\n    (\\act -> Gtk.actionGroupAddActionWithAccel agr act (Nothing :: Maybe String))\n    [ newa,\n      annpdfa,\n      opena,\n      savea,\n      saveasa,\n      reloada,\n      recenta,\n      printa,\n      exporta,\n      synca,\n      versiona,\n      showreva,\n      showida,\n      quita,\n      fscra,\n      zooma,\n      zmina,\n      zmouta,\n      nrmsizea,\n      pgwdtha,\n      pgheighta,\n      setzma,\n      fstpagea,\n      prvpagea,\n      nxtpagea,\n      lstpagea,\n      hsplita,\n      vsplita,\n      delcvsa,\n      newpgba,\n      newpgaa,\n      newpgea,\n      delpga,\n      expsvga,\n      newlyra,\n      nextlayera,\n      prevlayera,\n      gotolayera,\n      dellyra,\n      ppsizea,\n      ppclra,\n      ppstya,\n      apallpga,\n      embedbkgpdfa,\n      defppa,\n      setdefppa,\n      ldpnga,\n      ldsvga,\n      ldimgbkga,\n      texta,\n      textsrca,\n      editsrca,\n      editnetsrca,\n      textfromsrca,\n      latexa,\n      latexneta,\n      combinelatexa,\n      latexfromsrca,\n      updatelatexa,\n      ldpreimga,\n      ldpreimg2a,\n      ldpreimg3a,\n      linka,\n      anchora,\n      listanchora,\n      clra,\n      clrpcka,\n      penopta,\n      erasropta,\n      hiltropta,\n      txtfnta,\n      defpena,\n      defersra,\n      defhiltra,\n      deftxta,\n      setdefopta,\n      togpanzooma,\n      togscra,\n      toglayera,\n      togclocka,\n      newpagemoda,\n      relauncha,\n      addtaba,\n      closetaba,\n      abouta,\n      defaulta\n    ]\n\n  mapM_\n    (Gtk.actionGroupAddAction agr)\n    [ togglenetsrca,\n      uxinputa,\n      handa,\n      popmenua,\n      ebdimga,\n      ebdpdfa,\n      flwlnka,\n      keepratioa,\n      pressrsensa,\n      vcursora\n    ]\n\n  mpgmodconnid <-\n    actionGroupAddRadioActionsAndGetConnID agr viewmods 0 (assignViewMode evar)\n  _mpointconnid <-\n    actionGroupAddRadioActionsAndGetConnID agr pointmods 0 (assignPoint evar)\n  mpenmodconnid <-\n    actionGroupAddRadioActionsAndGetConnID agr penmods 0 (assignPenMode evar)\n  mcolorconnid <-\n    actionGroupAddRadioActionsAndGetConnID agr colormods 0 (assignColor evar)\n  _mbkgstyconnid <-\n    actionGroupAddRadioActionsAndGetConnID agr bkgstyles 2 (assignBkgStyle evar)\n  mnpgmodconnid <-\n    actionGroupAddRadioActionsAndGetConnID agr newpagemods 0 (assignNewPageMode evar)\n\n  let disabledActions =\n        [ recenta,\n          printa,\n          cuta,\n          copya,\n          deletea,\n          setzma,\n          newpgea,\n          ppsizea,\n          ppclra,\n          defppa,\n          setdefppa,\n          erasropta,\n          hiltropta,\n          txtfnta,\n          defpena,\n          defersra,\n          defhiltra,\n          deftxta,\n          setdefopta,\n          abouta,\n          defaulta,\n          relauncha,\n          editnetsrca\n        ]\n      enabledActions =\n        [ opena,\n          savea,\n          saveasa,\n          reloada,\n          versiona,\n          showreva,\n          showida,\n          quita,\n          pastea,\n          fstpagea,\n          prvpagea,\n          nxtpagea,\n          lstpagea,\n          clra,\n          penopta,\n          zooma,\n          nrmsizea,\n          pgwdtha,\n          texta,\n          newpagemoda\n        ]\n  --\n  mapM_ (`Gtk.actionSetSensitive` True) enabledActions\n  mapM_ (`Gtk.actionSetSensitive` False) disabledActions\n  --\n  --\n  -- radio actions\n  --\n  ui <- Gtk.uiManagerNew\n\n  uiDecl <- readFile (resDir </> "menu.xml")\n  _ <- Gtk.uiManagerAddUiFromString ui uiDecl\n  Gtk.uiManagerInsertActionGroup ui agr 0\n  Just ra2 <- Gtk.actionGroupGetAction agr ("PENFINEA" :: String)\n  Gtk.set (Gtk.castToRadioAction ra2) [Gtk.radioActionCurrentValue Gtk.:= 2]\n  Just ra3 <- Gtk.actionGroupGetAction agr ("SELREGNA" :: String)\n  Gtk.actionSetSensitive ra3 True\n  Just ra4 <- Gtk.actionGroupGetAction agr ("VERTSPA" :: String)\n  Gtk.actionSetSensitive ra4 True\n  Just ra6 <- Gtk.actionGroupGetAction agr ("CONTA" :: String)\n  Gtk.actionSetSensitive ra6 True\n  Just _ra7 <- Gtk.actionGroupGetAction agr ("PENA" :: String)\n  Gtk.actionSetSensitive ra6 True\n  Just toolbar1 <- Gtk.uiManagerGetWidget ui ("/ui/toolbar1" :: String)\n  Gtk.toolbarSetStyle (Gtk.castToToolbar toolbar1) Gtk.ToolbarIcons\n  toolbarSetIconSize (Gtk.castToToolbar toolbar1) Gtk.IconSizeSmallToolbar\n  Just toolbar2 <- Gtk.uiManagerGetWidget ui ("/ui/toolbar2" :: String)\n  Gtk.toolbarSetStyle (Gtk.castToToolbar toolbar2) Gtk.ToolbarIcons\n  toolbarSetIconSize (Gtk.castToToolbar toolbar2) Gtk.IconSizeSmallToolbar\n\n  let uicomponentsignalhandler =\n        set penModeSignal mpenmodconnid\n          . set pageModeSignal mpgmodconnid\n          . set penColorSignal mcolorconnid\n          . set newPageModeSignal mnpgmodconnid\n          $ defaultUIComponentSignalHandler\n  return (ui, uicomponentsignalhandler)\n\n-- |\nactionGroupAddRadioActionsAndGetConnID ::\n  Gtk.ActionGroup ->\n  [Gtk.RadioActionEntry] ->\n  Int ->\n  (Gtk.RadioAction -> IO ()) ->\n  IO (Maybe (Gtk.ConnectId Gtk.RadioAction))\nactionGroupAddRadioActionsAndGetConnID self entries _value onChange = do\n  mgroup <-\n    foldM\n      ( \\mgroup (n, Gtk.RadioActionEntry name label stockId accelerator tooltip value) -> do\n          action <- Gtk.radioActionNew name label tooltip stockId value\n          F.forM_ mgroup $ \\gr -> Gtk.radioActionSetGroup action gr\n          when (n == value) (Gtk.toggleActionSetActive action True)\n          Gtk.actionGroupAddActionWithAccel self action accelerator\n          return (Just action)\n      )\n      Nothing\n      (zip [0 ..] entries)\n  case mgroup of\n    Nothing -> return Nothing\n    Just gr -> do\n      connid <- (gr `Gtk.on` Gtk.radioActionChanged) onChange\n      return (Just connid)\n\n-- |\nassignViewMode :: EventVar -> Gtk.RadioAction -> IO ()\nassignViewMode evar a = viewModeToUserEvent a >>= eventHandler evar . UsrEv\n\n-- |\nassignPenMode :: EventVar -> Gtk.RadioAction -> IO ()\nassignPenMode evar a = do\n  v <- Gtk.radioActionGetCurrentValue a\n  eventHandler evar (UsrEv (AssignPenMode (int2PenType v)))\n\n-- |\nassignColor :: EventVar -> Gtk.RadioAction -> IO ()\nassignColor evar a = do\n  v <- Gtk.radioActionGetCurrentValue a\n  let c = int2Color v\n  eventHandler evar (UsrEv (PenColorChanged c))\n\n-- |\nassignPoint :: EventVar -> Gtk.RadioAction -> IO ()\nassignPoint evar a = do\n  v <- Gtk.radioActionGetCurrentValue a\n  eventHandler evar (UsrEv (PenWidthChanged v))\n\n-- |\nassignBkgStyle :: EventVar -> Gtk.RadioAction -> IO ()\nassignBkgStyle evar a = do\n  v <- Gtk.radioActionGetCurrentValue a\n  let sty = int2BkgStyle v\n  eventHandler evar (UsrEv (BackgroundStyleChanged sty))\n\n-- |\nassignNewPageMode :: EventVar -> Gtk.RadioAction -> IO ()\nassignNewPageMode evar a = do\n  v <- Gtk.radioActionGetCurrentValue a\n  eventHandler evar (UsrEv (AssignNewPageMode (int2NewPageMode v)))\n\n-- |\nint2PenType :: Int -> Either PenType SelectType\nint2PenType 0 = Left PenWork\nint2PenType 1 = Left EraserWork\nint2PenType 2 = Left HighlighterWork\n-- int2PenType 3 = Left TextWork\nint2PenType 4 = Right SelectLassoWork\nint2PenType 5 = Right SelectRectangleWork\nint2PenType 6 = Left VerticalSpaceWork\n-- int2PenType 7 = Right SelectHandToolWork\nint2PenType _ = error "No such pentype"\n\n-- |\npenType2Int :: Either PenType SelectType -> Int\npenType2Int (Left PenWork) = 0\npenType2Int (Left EraserWork) = 1\npenType2Int (Left HighlighterWork) = 2\npenType2Int (Left VerticalSpaceWork) = 6\npenType2Int (Right SelectLassoWork) = 4\npenType2Int (Right SelectRectangleWork) = 5\npenType2Int _ = 100\n\n-- penType2Int (Right SelectHandToolWork)  = 7\n\n-- |\nint2Point :: PenType -> Int -> Double\nint2Point PenWork 0 = predefinedVeryfine\nint2Point PenWork 1 = predefinedFine\nint2Point PenWork 2 = predefinedMedium\nint2Point PenWork 3 = predefinedThick\nint2Point PenWork 4 = predefinedVerythick\nint2Point PenWork 5 = predefinedUltrathick\nint2Point HighlighterWork 0 = predefinedHighlighterVeryfine\nint2Point HighlighterWork 1 = predefinedHighlighterFine\nint2Point HighlighterWork 2 = predefinedHighlighterMedium\nint2Point HighlighterWork 3 = predefinedHighlighterThick\nint2Point HighlighterWork 4 = predefinedHighlighterVerythick\nint2Point HighlighterWork 5 = predefinedHighlighterUltrathick\nint2Point EraserWork 0 = predefinedEraserVeryfine\nint2Point EraserWork 1 = predefinedEraserFine\nint2Point EraserWork 2 = predefinedEraserMedium\nint2Point EraserWork 3 = predefinedEraserThick\nint2Point EraserWork 4 = predefinedEraserVerythick\nint2Point EraserWork 5 = predefinedEraserUltrathick\nint2Point _ _ = error "No such point"\n\nsimilarTo :: Double -> Double -> Bool\nsimilarTo v w = (v < w + eps) && (v > w - eps)\n  where\n    eps = 1e-2\n\n-- |\npoint2Int :: PenType -> Double -> Int\npoint2Int PenWork v\n  | v `similarTo` predefinedVeryfine = 0\n  | v `similarTo` predefinedFine = 1\n  | v `similarTo` predefinedMedium = 2\n  | v `similarTo` predefinedThick = 3\n  | v `similarTo` predefinedVerythick = 4\n  | v `similarTo` predefinedUltrathick = 5\npoint2Int HighlighterWork v\n  | v `similarTo` predefinedHighlighterFine = 1\n  | v `similarTo` predefinedHighlighterVeryfine = 0\n  | v `similarTo` predefinedHighlighterMedium = 2\n  | v `similarTo` predefinedHighlighterThick = 3\n  | v `similarTo` predefinedHighlighterVerythick = 4\n  | v `similarTo` predefinedHighlighterUltrathick = 5\npoint2Int EraserWork v\n  | v `similarTo` predefinedEraserVeryfine = 0\n  | v `similarTo` predefinedEraserFine = 1\n  | v `similarTo` predefinedEraserMedium = 2\n  | v `similarTo` predefinedEraserThick = 3\n  | v `similarTo` predefinedEraserVerythick = 4\n  | v `similarTo` predefinedEraserUltrathick = 5\npoint2Int _ _ = 0 -- for the time being\n\n-- |\nint2Color :: Int -> PenColor\nint2Color 0 = ColorBlack\nint2Color 1 = ColorBlue\nint2Color 2 = ColorRed\nint2Color 3 = ColorGreen\nint2Color 4 = ColorGray\nint2Color 5 = ColorLightBlue\nint2Color 6 = ColorLightGreen\nint2Color 7 = ColorMagenta\nint2Color 8 = ColorOrange\nint2Color 9 = ColorYellow\nint2Color 10 = ColorWhite\nint2Color _ = error "No such color"\n\ncolor2Int :: PenColor -> Int\ncolor2Int ColorBlack = 0\ncolor2Int ColorBlue = 1\ncolor2Int ColorRed = 2\ncolor2Int ColorGreen = 3\ncolor2Int ColorGray = 4\ncolor2Int ColorLightBlue = 5\ncolor2Int ColorLightGreen = 6\ncolor2Int ColorMagenta = 7\ncolor2Int ColorOrange = 8\ncolor2Int ColorYellow = 9\ncolor2Int ColorWhite = 10\ncolor2Int _ = 0 -- just for the time being\n\nint2BkgStyle :: Int -> BackgroundStyle\nint2BkgStyle 0 = BkgStylePlain\nint2BkgStyle 1 = BkgStyleLined\nint2BkgStyle 2 = BkgStyleRuled\nint2BkgStyle 3 = BkgStyleGraph\nint2BkgStyle _ = BkgStyleRuled\n\n-- |\nint2NewPageMode :: Int -> NewPageModeType\nint2NewPageMode 0 = NPPlain\nint2NewPageMode 1 = NPLast\nint2NewPageMode 2 = NPCycle\nint2NewPageMode _ = error "No such new page mode"\n\n-- |\nnewPageMode2Int :: NewPageModeType -> Int\nnewPageMode2Int NPPlain = 0\nnewPageMode2Int NPLast = 1\nnewPageMode2Int NPCycle = 2\n'