b'// I2Cdev library collection - MPU6050 I2C device class, 9-axis MotionApps 4.1 implementation\n// Based on InvenSense MPU-6050 register map document rev. 2.0, 5/19/2011 (RM-MPU-6000A-00)\n// 6/18/2012 by Jeff Rowberg <jeff@rowberg.net>\n// Updates should (hopefully) always be available at https://github.com/jrowberg/i2cdevlib\n//\n// Changelog:\n//  2021/09/27 - split implementations out of header files, finally\n\n/* ============================================\nI2Cdev device library code is placed under the MIT license\nCopyright (c) 2021 Jeff Rowberg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n===============================================\n*/\n\n// MotionApps 4.1 DMP implementation, built using the MPU-9150 "MotionFit" board\n#define MPU6050_INCLUDE_DMP_MOTIONAPPS41\n\n#include "MPU6050_9Axis_MotionApps41.h"\n\n// Tom Carpenter\'s conditional PROGMEM code\n// http://forum.arduino.cc/index.php?topic=129407.0\n#ifdef __AVR__\n    #include <avr/pgmspace.h>\n#elif defined(ESP32)\n    #include <pgmspace.h>\n#else\n    // Teensy 3.0 library conditional PROGMEM code from Paul Stoffregen\n    #ifndef __PGMSPACE_H_\n        #define __PGMSPACE_H_ 1\n        #include <inttypes.h>\n\n        #define PROGMEM\n        #define PGM_P  const char *\n        #define PSTR(str) (str)\n        #define F(x) x\n\n        typedef void prog_void;\n        typedef char prog_char;\n        //typedef unsigned char prog_uchar;\n        typedef int8_t prog_int8_t;\n        typedef uint8_t prog_uint8_t;\n        typedef int16_t prog_int16_t;\n        typedef uint16_t prog_uint16_t;\n        typedef int32_t prog_int32_t;\n        typedef uint32_t prog_uint32_t;\n        \n        #define strcpy_P(dest, src) strcpy((dest), (src))\n        #define strcat_P(dest, src) strcat((dest), (src))\n        #define strcmp_P(a, b) strcmp((a), (b))\n        \n        #define pgm_read_byte(addr) (*(const unsigned char *)(addr))\n        #define pgm_read_word(addr) (*(const unsigned short *)(addr))\n        #define pgm_read_dword(addr) (*(const unsigned long *)(addr))\n        #define pgm_read_float(addr) (*(const float *)(addr))\n        \n        #define pgm_read_byte_near(addr) pgm_read_byte(addr)\n        #define pgm_read_word_near(addr) pgm_read_word(addr)\n        #define pgm_read_dword_near(addr) pgm_read_dword(addr)\n        #define pgm_read_float_near(addr) pgm_read_float(addr)\n        #define pgm_read_byte_far(addr) pgm_read_byte(addr)\n        #define pgm_read_word_far(addr) pgm_read_word(addr)\n        #define pgm_read_dword_far(addr) pgm_read_dword(addr)\n        #define pgm_read_float_far(addr) pgm_read_float(addr)\n    #endif\n#endif\n\n// NOTE! Enabling DEBUG adds about 3.3kB to the flash program size.\n// Debug output is now working even on ATMega328P MCUs (e.g. Arduino Uno)\n// after moving string constants to flash memory storage using the F()\n// compiler macro (Arduino IDE 1.0+ required).\n\n//#define DEBUG\n#ifdef DEBUG\n    #define DEBUG_PRINT(x) Serial.print(x)\n    #define DEBUG_PRINTF(x, y) Serial.print(x, y)\n    #define DEBUG_PRINTLN(x) Serial.println(x)\n    #define DEBUG_PRINTLNF(x, y) Serial.println(x, y)\n#else\n    #define DEBUG_PRINT(x)\n    #define DEBUG_PRINTF(x, y)\n    #define DEBUG_PRINTLN(x)\n    #define DEBUG_PRINTLNF(x, y)\n#endif\n\n#define MPU6050_DMP_CODE_SIZE       1962    // dmpMemory[]\n#define MPU6050_DMP_CONFIG_SIZE     232     // dmpConfig[]\n#define MPU6050_DMP_UPDATES_SIZE    140     // dmpUpdates[]\n\n/* ================================================================================================ *\n | Default MotionApps v4.1 48-byte FIFO packet structure:                                           |\n |                                                                                                  |\n | [QUAT W][      ][QUAT X][      ][QUAT Y][      ][QUAT Z][      ][GYRO X][      ][GYRO Y][      ] |\n |   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  |\n |                                                                                                  |\n | [GYRO Z][      ][MAG X ][MAG Y ][MAG Z ][ACC X ][      ][ACC Y ][      ][ACC Z ][      ][      ] |\n |  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  |\n * ================================================================================================ */\n\n// this block of memory gets written to the MPU on start-up, and it seems\n// to be volatile memory, so it has to be done each time (it only takes ~1\n// second though)\nstatic const unsigned char dmpMemory[MPU6050_DMP_CODE_SIZE] PROGMEM = {\n    // bank 0, 256 bytes\n    0xFB, 0x00, 0x00, 0x3E, 0x00, 0x0B, 0x00, 0x36, 0x00, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00, 0x00,\n    0x00, 0x65, 0x00, 0x54, 0xFF, 0xEF, 0x00, 0x00, 0xFA, 0x80, 0x00, 0x0B, 0x12, 0x82, 0x00, 0x01,\n    0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x28, 0x00, 0x00, 0xFF, 0xFF, 0x45, 0x81, 0xFF, 0xFF, 0xFA, 0x72, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x7F, 0xFF, 0xFF, 0xFE, 0x80, 0x01,\n    0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x3E, 0x03, 0x30, 0x40, 0x00, 0x00, 0x00, 0x02, 0xCA, 0xE3, 0x09, 0x3E, 0x80, 0x00, 0x00,\n    0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,\n    0x41, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x2A, 0x00, 0x00, 0x16, 0x55, 0x00, 0x00, 0x21, 0x82,\n    0xFD, 0x87, 0x26, 0x50, 0xFD, 0x80, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x05, 0x80, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,\n    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x6F, 0x00, 0x02, 0x65, 0x32, 0x00, 0x00, 0x5E, 0xC0,\n    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0xFB, 0x8C, 0x6F, 0x5D, 0xFD, 0x5D, 0x08, 0xD9, 0x00, 0x7C, 0x73, 0x3B, 0x00, 0x6C, 0x12, 0xCC,\n    0x32, 0x00, 0x13, 0x9D, 0x32, 0x00, 0xD0, 0xD6, 0x32, 0x00, 0x08, 0x00, 0x40, 0x00, 0x01, 0xF4,\n    0xFF, 0xE6, 0x80, 0x79, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD0, 0xD6, 0x00, 0x00, 0x27, 0x10,\n\n    // bank 1, 256 bytes\n    0xFB, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0xFA, 0x36, 0xFF, 0xBC, 0x30, 0x8E, 0x00, 0x05, 0xFB, 0xF0, 0xFF, 0xD9, 0x5B, 0xC8,\n    0xFF, 0xD0, 0x9A, 0xBE, 0x00, 0x00, 0x10, 0xA9, 0xFF, 0xF4, 0x1E, 0xB2, 0x00, 0xCE, 0xBB, 0xF7,\n    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x02, 0x00, 0x02, 0x02, 0x00, 0x00, 0x0C,\n    0xFF, 0xC2, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0xCF, 0x80, 0x00, 0x40, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x14,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x03, 0x3F, 0x68, 0xB6, 0x79, 0x35, 0x28, 0xBC, 0xC6, 0x7E, 0xD1, 0x6C,\n    0x80, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB2, 0x6A, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xF0, 0x00, 0x00, 0x00, 0x30,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x25, 0x4D, 0x00, 0x2F, 0x70, 0x6D, 0x00, 0x00, 0x05, 0xAE, 0x00, 0x0C, 0x02, 0xD0,\n    \n    // bank 2, 256 bytes\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x65, 0x00, 0x54, 0xFF, 0xEF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x01, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x01, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0xFF, 0xEF, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,\n    0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x78, 0xA2,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    \n    // bank 3, 256 bytes\n    0xD8, 0xDC, 0xF4, 0xD8, 0xB9, 0xAB, 0xF3, 0xF8, 0xFA, 0xF1, 0xBA, 0xA2, 0xDE, 0xB2, 0xB8, 0xB4,\n    0xA8, 0x81, 0x98, 0xF7, 0x4A, 0x90, 0x7F, 0x91, 0x6A, 0xF3, 0xF9, 0xDB, 0xA8, 0xF9, 0xB0, 0xBA,\n    0xA0, 0x80, 0xF2, 0xCE, 0x81, 0xF3, 0xC2, 0xF1, 0xC1, 0xF2, 0xC3, 0xF3, 0xCC, 0xA2, 0xB2, 0x80,\n    0xF1, 0xC6, 0xD8, 0x80, 0xBA, 0xA7, 0xDF, 0xDF, 0xDF, 0xF2, 0xA7, 0xC3, 0xCB, 0xC5, 0xB6, 0xF0,\n    0x87, 0xA2, 0x94, 0x24, 0x48, 0x70, 0x3C, 0x95, 0x40, 0x68, 0x34, 0x58, 0x9B, 0x78, 0xA2, 0xF1,\n    0x83, 0x92, 0x2D, 0x55, 0x7D, 0xD8, 0xB1, 0xB4, 0xB8, 0xA1, 0xD0, 0x91, 0x80, 0xF2, 0x70, 0xF3,\n    0x70, 0xF2, 0x7C, 0x80, 0xA8, 0xF1, 0x01, 0xB0, 0x98, 0x87, 0xD9, 0x43, 0xD8, 0x86, 0xC9, 0x88,\n    0xBA, 0xA1, 0xF2, 0x0E, 0xB8, 0x97, 0x80, 0xF1, 0xA9, 0xDF, 0xDF, 0xDF, 0xAA, 0xDF, 0xDF, 0xDF,\n    0xF2, 0xAA, 0xC5, 0xCD, 0xC7, 0xA9, 0x0C, 0xC9, 0x2C, 0x97, 0x97, 0x97, 0x97, 0xF1, 0xA9, 0x89,\n    0x26, 0x46, 0x66, 0xB0, 0xB4, 0xBA, 0x80, 0xAC, 0xDE, 0xF2, 0xCA, 0xF1, 0xB2, 0x8C, 0x02, 0xA9,\n    0xB6, 0x98, 0x00, 0x89, 0x0E, 0x16, 0x1E, 0xB8, 0xA9, 0xB4, 0x99, 0x2C, 0x54, 0x7C, 0xB0, 0x8A,\n    0xA8, 0x96, 0x36, 0x56, 0x76, 0xF1, 0xB9, 0xAF, 0xB4, 0xB0, 0x83, 0xC0, 0xB8, 0xA8, 0x97, 0x11,\n    0xB1, 0x8F, 0x98, 0xB9, 0xAF, 0xF0, 0x24, 0x08, 0x44, 0x10, 0x64, 0x18, 0xF1, 0xA3, 0x29, 0x55,\n    0x7D, 0xAF, 0x83, 0xB5, 0x93, 0xF0, 0x00, 0x28, 0x50, 0xF5, 0xBA, 0xAD, 0x8F, 0x9F, 0x28, 0x54,\n    0x7C, 0xB9, 0xF1, 0xA3, 0x86, 0x9F, 0x61, 0xA6, 0xDA, 0xDE, 0xDF, 0xDB, 0xB2, 0xB6, 0x8E, 0x9D,\n    0xAE, 0xF5, 0x60, 0x68, 0x70, 0xB1, 0xB5, 0xF1, 0xDA, 0xA6, 0xDF, 0xD9, 0xA6, 0xFA, 0xA3, 0x86,\n    \n    // bank 4, 256 bytes\n    0x96, 0xDB, 0x31, 0xA6, 0xD9, 0xF8, 0xDF, 0xBA, 0xA6, 0x8F, 0xC2, 0xC5, 0xC7, 0xB2, 0x8C, 0xC1,\n    0xB8, 0xA2, 0xDF, 0xDF, 0xDF, 0xA3, 0xDF, 0xDF, 0xDF, 0xD8, 0xD8, 0xF1, 0xB8, 0xA8, 0xB2, 0x86,\n    0xB4, 0x98, 0x0D, 0x35, 0x5D, 0xB8, 0xAA, 0x98, 0xB0, 0x87, 0x2D, 0x35, 0x3D, 0xB2, 0xB6, 0xBA,\n    0xAF, 0x8C, 0x96, 0x19, 0x8F, 0x9F, 0xA7, 0x0E, 0x16, 0x1E, 0xB4, 0x9A, 0xB8, 0xAA, 0x87, 0x2C,\n    0x54, 0x7C, 0xB9, 0xA3, 0xDE, 0xDF, 0xDF, 0xA3, 0xB1, 0x80, 0xF2, 0xC4, 0xCD, 0xC9, 0xF1, 0xB8,\n    0xA9, 0xB4, 0x99, 0x83, 0x0D, 0x35, 0x5D, 0x89, 0xB9, 0xA3, 0x2D, 0x55, 0x7D, 0xB5, 0x93, 0xA3,\n    0x0E, 0x16, 0x1E, 0xA9, 0x2C, 0x54, 0x7C, 0xB8, 0xB4, 0xB0, 0xF1, 0x97, 0x83, 0xA8, 0x11, 0x84,\n    0xA5, 0x09, 0x98, 0xA3, 0x83, 0xF0, 0xDA, 0x24, 0x08, 0x44, 0x10, 0x64, 0x18, 0xD8, 0xF1, 0xA5,\n    0x29, 0x55, 0x7D, 0xA5, 0x85, 0x95, 0x02, 0x1A, 0x2E, 0x3A, 0x56, 0x5A, 0x40, 0x48, 0xF9, 0xF3,\n    0xA3, 0xD9, 0xF8, 0xF0, 0x98, 0x83, 0x24, 0x08, 0x44, 0x10, 0x64, 0x18, 0x97, 0x82, 0xA8, 0xF1,\n    0x11, 0xF0, 0x98, 0xA2, 0x24, 0x08, 0x44, 0x10, 0x64, 0x18, 0xDA, 0xF3, 0xDE, 0xD8, 0x83, 0xA5,\n    0x94, 0x01, 0xD9, 0xA3, 0x02, 0xF1, 0xA2, 0xC3, 0xC5, 0xC7, 0xD8, 0xF1, 0x84, 0x92, 0xA2, 0x4D,\n    0xDA, 0x2A, 0xD8, 0x48, 0x69, 0xD9, 0x2A, 0xD8, 0x68, 0x55, 0xDA, 0x32, 0xD8, 0x50, 0x71, 0xD9,\n    0x32, 0xD8, 0x70, 0x5D, 0xDA, 0x3A, 0xD8, 0x58, 0x79, 0xD9, 0x3A, 0xD8, 0x78, 0x93, 0xA3, 0x4D,\n    0xDA, 0x2A, 0xD8, 0x48, 0x69, 0xD9, 0x2A, 0xD8, 0x68, 0x55, 0xDA, 0x32, 0xD8, 0x50, 0x71, 0xD9,\n    0x32, 0xD8, 0x70, 0x5D, 0xDA, 0x3A, 0xD8, 0x58, 0x79, 0xD9, 0x3A, 0xD8, 0x78, 0xA8, 0x8A, 0x9A,\n    \n    // bank 5, 256 bytes\n    0xF0, 0x28, 0x50, 0x78, 0x9E, 0xF3, 0x88, 0x18, 0xF1, 0x9F, 0x1D, 0x98, 0xA8, 0xD9, 0x08, 0xD8,\n    0xC8, 0x9F, 0x12, 0x9E, 0xF3, 0x15, 0xA8, 0xDA, 0x12, 0x10, 0xD8, 0xF1, 0xAF, 0xC8, 0x97, 0x87,\n    0x34, 0xB5, 0xB9, 0x94, 0xA4, 0x21, 0xF3, 0xD9, 0x22, 0xD8, 0xF2, 0x2D, 0xF3, 0xD9, 0x2A, 0xD8,\n    0xF2, 0x35, 0xF3, 0xD9, 0x32, 0xD8, 0x81, 0xA4, 0x60, 0x60, 0x61, 0xD9, 0x61, 0xD8, 0x6C, 0x68,\n    0x69, 0xD9, 0x69, 0xD8, 0x74, 0x70, 0x71, 0xD9, 0x71, 0xD8, 0xB1, 0xA3, 0x84, 0x19, 0x3D, 0x5D,\n    0xA3, 0x83, 0x1A, 0x3E, 0x5E, 0x93, 0x10, 0x30, 0x81, 0x10, 0x11, 0xB8, 0xB0, 0xAF, 0x8F, 0x94,\n    0xF2, 0xDA, 0x3E, 0xD8, 0xB4, 0x9A, 0xA8, 0x87, 0x29, 0xDA, 0xF8, 0xD8, 0x87, 0x9A, 0x35, 0xDA,\n    0xF8, 0xD8, 0x87, 0x9A, 0x3D, 0xDA, 0xF8, 0xD8, 0xB1, 0xB9, 0xA4, 0x98, 0x85, 0x02, 0x2E, 0x56,\n    0xA5, 0x81, 0x00, 0x0C, 0x14, 0xA3, 0x97, 0xB0, 0x8A, 0xF1, 0x2D, 0xD9, 0x28, 0xD8, 0x4D, 0xD9,\n    0x48, 0xD8, 0x6D, 0xD9, 0x68, 0xD8, 0xB1, 0x84, 0x0D, 0xDA, 0x0E, 0xD8, 0xA3, 0x29, 0x83, 0xDA,\n    0x2C, 0x0E, 0xD8, 0xA3, 0x84, 0x49, 0x83, 0xDA, 0x2C, 0x4C, 0x0E, 0xD8, 0xB8, 0xB0, 0x97, 0x86,\n    0xA8, 0x31, 0x9B, 0x06, 0x99, 0x07, 0xAB, 0x97, 0x28, 0x88, 0x9B, 0xF0, 0x0C, 0x20, 0x14, 0x40,\n    0xB9, 0xA3, 0x8A, 0xC3, 0xC5, 0xC7, 0x9A, 0xA3, 0x28, 0x50, 0x78, 0xF1, 0xB5, 0x93, 0x01, 0xD9,\n    0xDF, 0xDF, 0xDF, 0xD8, 0xB8, 0xB4, 0xA8, 0x8C, 0x9C, 0xF0, 0x04, 0x28, 0x51, 0x79, 0x1D, 0x30,\n    0x14, 0x38, 0xB2, 0x82, 0xAB, 0xD0, 0x98, 0x2C, 0x50, 0x50, 0x78, 0x78, 0x9B, 0xF1, 0x1A, 0xB0,\n    0xF0, 0xB1, 0x83, 0x9C, 0xA8, 0x29, 0x51, 0x79, 0xB0, 0x8B, 0x29, 0x51, 0x79, 0xB1, 0x83, 0x24,\n\n    // bank 6, 256 bytes\n    0x70, 0x59, 0xB0, 0x8B, 0x20, 0x58, 0x71, 0xB1, 0x83, 0x44, 0x69, 0x38, 0xB0, 0x8B, 0x39, 0x40,\n    0x68, 0xB1, 0x83, 0x64, 0x48, 0x31, 0xB0, 0x8B, 0x30, 0x49, 0x60, 0xA5, 0x88, 0x20, 0x09, 0x71,\n    0x58, 0x44, 0x68, 0x11, 0x39, 0x64, 0x49, 0x30, 0x19, 0xF1, 0xAC, 0x00, 0x2C, 0x54, 0x7C, 0xF0,\n    0x8C, 0xA8, 0x04, 0x28, 0x50, 0x78, 0xF1, 0x88, 0x97, 0x26, 0xA8, 0x59, 0x98, 0xAC, 0x8C, 0x02,\n    0x26, 0x46, 0x66, 0xF0, 0x89, 0x9C, 0xA8, 0x29, 0x51, 0x79, 0x24, 0x70, 0x59, 0x44, 0x69, 0x38,\n    0x64, 0x48, 0x31, 0xA9, 0x88, 0x09, 0x20, 0x59, 0x70, 0xAB, 0x11, 0x38, 0x40, 0x69, 0xA8, 0x19,\n    0x31, 0x48, 0x60, 0x8C, 0xA8, 0x3C, 0x41, 0x5C, 0x20, 0x7C, 0x00, 0xF1, 0x87, 0x98, 0x19, 0x86,\n    0xA8, 0x6E, 0x76, 0x7E, 0xA9, 0x99, 0x88, 0x2D, 0x55, 0x7D, 0x9E, 0xB9, 0xA3, 0x8A, 0x22, 0x8A,\n    0x6E, 0x8A, 0x56, 0x8A, 0x5E, 0x9F, 0xB1, 0x83, 0x06, 0x26, 0x46, 0x66, 0x0E, 0x2E, 0x4E, 0x6E,\n    0x9D, 0xB8, 0xAD, 0x00, 0x2C, 0x54, 0x7C, 0xF2, 0xB1, 0x8C, 0xB4, 0x99, 0xB9, 0xA3, 0x2D, 0x55,\n    0x7D, 0x81, 0x91, 0xAC, 0x38, 0xAD, 0x3A, 0xB5, 0x83, 0x91, 0xAC, 0x2D, 0xD9, 0x28, 0xD8, 0x4D,\n    0xD9, 0x48, 0xD8, 0x6D, 0xD9, 0x68, 0xD8, 0x8C, 0x9D, 0xAE, 0x29, 0xD9, 0x04, 0xAE, 0xD8, 0x51,\n    0xD9, 0x04, 0xAE, 0xD8, 0x79, 0xD9, 0x04, 0xD8, 0x81, 0xF3, 0x9D, 0xAD, 0x00, 0x8D, 0xAE, 0x19,\n    0x81, 0xAD, 0xD9, 0x01, 0xD8, 0xF2, 0xAE, 0xDA, 0x26, 0xD8, 0x8E, 0x91, 0x29, 0x83, 0xA7, 0xD9,\n    0xAD, 0xAD, 0xAD, 0xAD, 0xF3, 0x2A, 0xD8, 0xD8, 0xF1, 0xB0, 0xAC, 0x89, 0x91, 0x3E, 0x5E, 0x76,\n    0xF3, 0xAC, 0x2E, 0x2E, 0xF1, 0xB1, 0x8C, 0x5A, 0x9C, 0xAC, 0x2C, 0x28, 0x28, 0x28, 0x9C, 0xAC,\n    \n    // bank 7, 170 bytes (remainder)\n    0x30, 0x18, 0xA8, 0x98, 0x81, 0x28, 0x34, 0x3C, 0x97, 0x24, 0xA7, 0x28, 0x34, 0x3C, 0x9C, 0x24,\n    0xF2, 0xB0, 0x89, 0xAC, 0x91, 0x2C, 0x4C, 0x6C, 0x8A, 0x9B, 0x2D, 0xD9, 0xD8, 0xD8, 0x51, 0xD9,\n    0xD8, 0xD8, 0x79, 0xD9, 0xD8, 0xD8, 0xF1, 0x9E, 0x88, 0xA3, 0x31, 0xDA, 0xD8, 0xD8, 0x91, 0x2D,\n    0xD9, 0x28, 0xD8, 0x4D, 0xD9, 0x48, 0xD8, 0x6D, 0xD9, 0x68, 0xD8, 0xB1, 0x83, 0x93, 0x35, 0x3D,\n    0x80, 0x25, 0xDA, 0xD8, 0xD8, 0x85, 0x69, 0xDA, 0xD8, 0xD8, 0xB4, 0x93, 0x81, 0xA3, 0x28, 0x34,\n    0x3C, 0xF3, 0xAB, 0x8B, 0xA3, 0x91, 0xB6, 0x09, 0xB4, 0xD9, 0xAB, 0xDE, 0xB0, 0x87, 0x9C, 0xB9,\n    0xA3, 0xDD, 0xF1, 0xA3, 0xA3, 0xA3, 0xA3, 0x95, 0xF1, 0xA3, 0xA3, 0xA3, 0x9D, 0xF1, 0xA3, 0xA3,\n    0xA3, 0xA3, 0xF2, 0xA3, 0xB4, 0x90, 0x80, 0xF2, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,\n    0xA3, 0xA3, 0xB2, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xB0, 0x87, 0xB5, 0x99, 0xF1, 0xA3, 0xA3,\n    0xA3, 0x98, 0xF1, 0xA3, 0xA3, 0xA3, 0xA3, 0x97, 0xA3, 0xA3, 0xA3, 0xA3, 0xF3, 0x9B, 0xA3, 0xA3,\n    0xDC, 0xB9, 0xA7, 0xF1, 0x26, 0x26, 0x26, 0xD8, 0xD8, 0xFF\n};\n\n#ifndef MPU6050_DMP_FIFO_RATE_DIVISOR \n#define MPU6050_DMP_FIFO_RATE_DIVISOR 0x03\n#endif\n\nstatic const unsigned char dmpConfig[MPU6050_DMP_CONFIG_SIZE] PROGMEM = {\n//  BANK    OFFSET  LENGTH  [DATA]\n    0x02,   0xEC,   0x04,   0x00, 0x47, 0x7D, 0x1A,   // ?\n    0x03,   0x82,   0x03,   0x4C, 0xCD, 0x6C,         // FCFG_1 inv_set_gyro_calibration\n    0x03,   0xB2,   0x03,   0x36, 0x56, 0x76,         // FCFG_3 inv_set_gyro_calibration\n    0x00,   0x68,   0x04,   0x02, 0xCA, 0xE3, 0x09,   // D_0_104 inv_set_gyro_calibration\n    0x01,   0x0C,   0x04,   0x00, 0x00, 0x00, 0x00,   // D_1_152 inv_set_accel_calibration\n    0x03,   0x86,   0x03,   0x0C, 0xC9, 0x2C,         // FCFG_2 inv_set_accel_calibration\n    0x03,   0x90,   0x03,   0x26, 0x46, 0x66,         //   (continued)...FCFG_2 inv_set_accel_calibration\n    0x00,   0x6C,   0x02,   0x40, 0x00,               // D_0_108 inv_set_accel_calibration\n\n    0x02,   0x40,   0x04,   0x00, 0x00, 0x00, 0x00,   // CPASS_MTX_00 inv_set_compass_calibration\n    0x02,   0x44,   0x04,   0x40, 0x00, 0x00, 0x00,   // CPASS_MTX_01\n    0x02,   0x48,   0x04,   0x00, 0x00, 0x00, 0x00,   // CPASS_MTX_02\n    0x02,   0x4C,   0x04,   0x40, 0x00, 0x00, 0x00,   // CPASS_MTX_10\n    0x02,   0x50,   0x04,   0x00, 0x00, 0x00, 0x00,   // CPASS_MTX_11\n    0x02,   0x54,   0x04,   0x00, 0x00, 0x00, 0x00,   // CPASS_MTX_12\n    0x02,   0x58,   0x04,   0x00, 0x00, 0x00, 0x00,   // CPASS_MTX_20\n    0x02,   0x5C,   0x04,   0x00, 0x00, 0x00, 0x00,   // CPASS_MTX_21\n    0x02,   0xBC,   0x04,   0xC0, 0x00, 0x00, 0x00,   // CPASS_MTX_22\n\n    0x01,   0xEC,   0x04,   0x00, 0x00, 0x40, 0x00,   // D_1_236 inv_apply_endian_accel\n    0x03,   0x86,   0x06,   0x0C, 0xC9, 0x2C, 0x97, 0x97, 0x97, // FCFG_2 inv_set_mpu_sensors\n    0x04,   0x22,   0x03,   0x0D, 0x35, 0x5D,         // CFG_MOTION_BIAS inv_turn_on_bias_from_no_motion\n    0x00,   0xA3,   0x01,   0x00,                     // ?\n    0x04,   0x29,   0x04,   0x87, 0x2D, 0x35, 0x3D,   // FCFG_5 inv_set_bias_update\n    0x07,   0x62,   0x05,   0xF1, 0x20, 0x28, 0x30, 0x38, // CFG_8 inv_send_quaternion\n    0x07,   0x9F,   0x01,   0x30,                     // CFG_16 inv_set_footer\n    0x07,   0x67,   0x01,   0x9A,                     // CFG_GYRO_SOURCE inv_send_gyro\n    0x07,   0x68,   0x04,   0xF1, 0x28, 0x30, 0x38,   // CFG_9 inv_send_gyro -> inv_construct3_fifo\n    0x07,   0x62,   0x05,   0xF1, 0x20, 0x28, 0x30, 0x38, // ?\n    0x02,   0x0C,   0x04,   0x00, 0x00, 0x00, 0x00,   // ?\n    0x07,   0x83,   0x06,   0xC2, 0xCA, 0xC4, 0xA3, 0xA3, 0xA3, // ?\n                 // SPECIAL 0x01 = enable interrupts\n    0x00,   0x00,   0x00,   0x01, // SET INT_ENABLE, SPECIAL INSTRUCTION\n    0x07,   0xA7,   0x01,   0xFE,                     // ?\n    0x07,   0x62,   0x05,   0xF1, 0x20, 0x28, 0x30, 0x38, // ?\n    0x07,   0x67,   0x01,   0x9A,                     // ?\n    0x07,   0x68,   0x04,   0xF1, 0x28, 0x30, 0x38,   // CFG_12 inv_send_accel -> inv_construct3_fifo\n    0x07,   0x8D,   0x04,   0xF1, 0x28, 0x30, 0x38,   // ??? CFG_12 inv_send_mag -> inv_construct3_fifo\n    0x02,   0x16,   0x02,   0x00, MPU6050_DMP_FIFO_RATE_DIVISOR // D_0_22 inv_set_fifo_rate\n\n    // This very last 0x03 WAS a 0x09, which drops the FIFO rate down to 20 Hz. 0x07 is 25 Hz,\n    // 0x01 is 100Hz. Going faster than 100Hz (0x00=200Hz) tends to result in very noisy data.\n    // DMP output frequency is calculated easily using this equation: (200Hz / (1 + value))\n\n    // It is important to make sure the host processor can keep up with reading and processing\n    // the FIFO output at the desired rate. Handling FIFO overflow cleanly is also a good idea.\n};\n\nconst unsigned char dmpUpdates[MPU6050_DMP_UPDATES_SIZE] PROGMEM = {\n    0x01,   0xB2,   0x02,   0xFF, 0xF5,\n    0x01,   0x90,   0x04,   0x0A, 0x0D, 0x97, 0xC0,\n    0x00,   0xA3,   0x01,   0x00,\n    0x04,   0x29,   0x04,   0x87, 0x2D, 0x35, 0x3D,\n    0x01,   0x6A,   0x02,   0x06, 0x00,\n    0x01,   0x60,   0x08,   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00,   0x60,   0x04,   0x40, 0x00, 0x00, 0x00,\n    0x02,   0x60,   0x0C,   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x01,   0x08,   0x02,   0x01, 0x20,\n    0x01,   0x0A,   0x02,   0x00, 0x4E,\n    0x01,   0x02,   0x02,   0xFE, 0xB3,\n    0x02,   0x6C,   0x04,   0x00, 0x00, 0x00, 0x00, // READ\n    0x02,   0x6C,   0x04,   0xFA, 0xFE, 0x00, 0x00,\n    0x02,   0x60,   0x0C,   0xFF, 0xFF, 0xCB, 0x4D, 0x00, 0x01, 0x08, 0xC1, 0xFF, 0xFF, 0xBC, 0x2C,\n    0x02,   0xF4,   0x04,   0x00, 0x00, 0x00, 0x00,\n    0x02,   0xF8,   0x04,   0x00, 0x00, 0x00, 0x00,\n    0x02,   0xFC,   0x04,   0x00, 0x00, 0x00, 0x00,\n    0x00,   0x60,   0x04,   0x40, 0x00, 0x00, 0x00,\n    0x00,   0x60,   0x04,   0x00, 0x40, 0x00, 0x00\n};\n\nuint8_t MPU6050_9Axis_MotionApps41::dmpInitialize() {\n    // reset device\n    DEBUG_PRINTLN(F("\\n\\nResetting MPU6050..."));\n    reset();\n    delay(30); // wait after reset\n\n    // disable sleep mode\n    DEBUG_PRINTLN(F("Disabling sleep mode..."));\n    setSleepEnabled(false);\n\n    // get MPU product ID\n    DEBUG_PRINTLN(F("Getting product ID..."));\n    //uint8_t productID = 0; //getProductID();\n    DEBUG_PRINT(F("Product ID = "));\n    DEBUG_PRINT(productID);\n\n    // get MPU hardware revision\n    DEBUG_PRINTLN(F("Selecting user bank 16..."));\n    setMemoryBank(0x10, true, true);\n    DEBUG_PRINTLN(F("Selecting memory byte 6..."));\n    setMemoryStartAddress(0x06);\n    DEBUG_PRINTLN(F("Checking hardware revision..."));\n    uint8_t hwRevision = readMemoryByte();\n    (void)hwRevision; // suppress unused variable compile warning\n    DEBUG_PRINT(F("Revision @ user[16][6] = "));\n    DEBUG_PRINTLNF(hwRevision, HEX);\n    DEBUG_PRINTLN(F("Resetting memory bank selection to 0..."));\n    setMemoryBank(0, false, false);\n\n    // check OTP bank valid\n    DEBUG_PRINTLN(F("Reading OTP bank valid flag..."));\n    uint8_t otpValid = getOTPBankValid();\n    (void)otpValid; // suppress unused variable compile warning\n    DEBUG_PRINT(F("OTP bank is "));\n    DEBUG_PRINTLN(otpValid ? F("valid!") : F("invalid!"));\n\n    // get X/Y/Z gyro offsets\n    DEBUG_PRINTLN(F("Reading gyro offset values..."));\n    int8_t xgOffset = getXGyroOffset();\n    int8_t ygOffset = getYGyroOffset();\n    int8_t zgOffset = getZGyroOffset();\n    DEBUG_PRINT(F("X gyro offset = "));\n    DEBUG_PRINTLN(xgOffset);\n    DEBUG_PRINT(F("Y gyro offset = "));\n    DEBUG_PRINTLN(ygOffset);\n    DEBUG_PRINT(F("Z gyro offset = "));\n    DEBUG_PRINTLN(zgOffset);\n    \n    I2Cdev::readByte(devAddr, MPU6050_RA_USER_CTRL, buffer, I2Cdev::readTimeout, wireObj); // ?\n    \n    DEBUG_PRINTLN(F("Enabling interrupt latch, clear on any read, AUX bypass enabled"));\n    I2Cdev::writeByte(devAddr, MPU6050_RA_INT_PIN_CFG, 0x32, wireObj);\n\n    // enable MPU AUX I2C bypass mode\n    //DEBUG_PRINTLN(F("Enabling AUX I2C bypass mode..."));\n    //setI2CBypassEnabled(true);\n\n    DEBUG_PRINTLN(F("Setting magnetometer mode to power-down..."));\n    //mag -> setMode(0);\n    I2Cdev::writeByte(0x0E, 0x0A, 0x00, wireObj);\n\n    DEBUG_PRINTLN(F("Setting magnetometer mode to fuse access..."));\n    //mag -> setMode(0x0F);\n    I2Cdev::writeByte(0x0E, 0x0A, 0x0F, wireObj);\n\n    DEBUG_PRINTLN(F("Reading mag magnetometer factory calibration..."));\n    int8_t asax, asay, asaz;\n    //mag -> getAdjustment(&asax, &asay, &asaz);\n    I2Cdev::readBytes(0x0E, 0x10, 3, buffer, I2Cdev::readTimeout, wireObj);\n    asax = (int8_t)buffer[0];\n    asay = (int8_t)buffer[1];\n    asaz = (int8_t)buffer[2];\n    (void)asax; // suppress unused variable compiler warning\n    (void)asay; // suppress unused variable compiler warning\n    (void)asaz; // suppress unused variable compiler warning\n    DEBUG_PRINT(F("Adjustment X/Y/Z = "));\n    DEBUG_PRINT(asax);\n    DEBUG_PRINT(F(" / "));\n    DEBUG_PRINT(asay);\n    DEBUG_PRINT(F(" / "));\n    DEBUG_PRINTLN(asaz);\n\n    DEBUG_PRINTLN(F("Setting magnetometer mode to power-down..."));\n    //mag -> setMode(0);\n    I2Cdev::writeByte(0x0E, 0x0A, 0x00, wireObj);\n\n    // load DMP code into memory banks\n    DEBUG_PRINT(F("Writing DMP code to MPU memory banks ("));\n    DEBUG_PRINT(MPU6050_DMP_CODE_SIZE);\n    DEBUG_PRINTLN(F(" bytes)"));\n    if (writeProgMemoryBlock(dmpMemory, MPU6050_DMP_CODE_SIZE)) {\n        DEBUG_PRINTLN(F("Success! DMP code written and verified."));\n\n        DEBUG_PRINTLN(F("Configuring DMP and related settings..."));\n\n        // write DMP configuration\n        DEBUG_PRINT(F("Writing DMP configuration to MPU memory banks ("));\n        DEBUG_PRINT(MPU6050_DMP_CONFIG_SIZE);\n        DEBUG_PRINTLN(F(" bytes in config def)"));\n        if (writeProgDMPConfigurationSet(dmpConfig, MPU6050_DMP_CONFIG_SIZE)) {\n            DEBUG_PRINTLN(F("Success! DMP configuration written and verified."));\n\n            DEBUG_PRINTLN(F("Setting DMP and FIFO_OFLOW interrupts enabled..."));\n            setIntEnabled(1<<MPU6050_INTERRUPT_FIFO_OFLOW_BIT|1<<MPU6050_INTERRUPT_DMP_INT_BIT);\n\n            DEBUG_PRINTLN(F("Setting sample rate to 200Hz..."));\n            setRate(4); // 1khz / (1 + 4) = 200 Hz\n\n            DEBUG_PRINTLN(F("Setting clock source to Z Gyro..."));\n            setClockSource(MPU6050_CLOCK_PLL_ZGYRO);\n\n            DEBUG_PRINTLN(F("Setting DLPF bandwidth to 42Hz..."));\n            setDLPFMode(MPU6050_DLPF_BW_42);\n\n            DEBUG_PRINTLN(F("Setting external frame sync to TEMP_OUT_L[0]..."));\n            setExternalFrameSync(MPU6050_EXT_SYNC_TEMP_OUT_L);\n\n            DEBUG_PRINTLN(F("Setting gyro sensitivity to +/- 2000 deg/sec..."));\n            setFullScaleGyroRange(MPU6050_GYRO_FS_2000);\n\n            DEBUG_PRINTLN(F("Setting DMP configuration bytes (function unknown)..."));\n            setDMPConfig1(0x03);\n            setDMPConfig2(0x00);\n\n            DEBUG_PRINTLN(F("Clearing OTP Bank flag..."));\n            setOTPBankValid(false);\n\n            DEBUG_PRINTLN(F("Setting X/Y/Z gyro offsets to previous values..."));\n            setXGyroOffsetTC(xgOffset);\n            setYGyroOffsetTC(ygOffset);\n            setZGyroOffsetTC(zgOffset);\n\n            //DEBUG_PRINTLN(F("Setting X/Y/Z gyro user offsets to zero..."));\n            //setXGyroOffset(0);\n            //setYGyroOffset(0);\n            //setZGyroOffset(0);\n\n            DEBUG_PRINTLN(F("Writing final memory update 1/19 (function unknown)..."));\n            uint8_t dmpUpdate[16], j;\n            uint16_t pos = 0;\n            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);\n            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);\n\n            DEBUG_PRINTLN(F("Writing final memory update 2/19 (function unknown)..."));\n            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);\n            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);\n\n            DEBUG_PRINTLN(F("Resetting FIFO..."));\n            resetFIFO();\n\n            DEBUG_PRINTLN(F("Reading FIFO count..."));\n            uint8_t fifoCount = getFIFOCount();\n\n            DEBUG_PRINT(F("Current FIFO count="));\n            DEBUG_PRINTLN(fifoCount);\n            uint8_t fifoBuffer[128];\n            //getFIFOBytes(fifoBuffer, fifoCount);\n\n            DEBUG_PRINTLN(F("Writing final memory update 3/19 (function unknown)..."));\n            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);\n            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);\n\n            DEBUG_PRINTLN(F("Writing final memory update 4/19 (function unknown)..."));\n            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);\n            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);\n\n            DEBUG_PRINTLN(F("Disabling all standby flags..."));\n            I2Cdev::writeByte(0x68, MPU6050_RA_PWR_MGMT_2, 0x00, wireObj);\n\n            DEBUG_PRINTLN(F("Setting accelerometer sensitivity to +/- 2g..."));\n            I2Cdev::writeByte(0x68, MPU6050_RA_ACCEL_CONFIG, 0x00, wireObj);\n\n            DEBUG_PRINTLN(F("Setting motion detection threshold to 2..."));\n            setMotionDetectionThreshold(2);\n\n            DEBUG_PRINTLN(F("Setting zero-motion detection threshold to 156..."));\n            setZeroMotionDetectionThreshold(156);\n\n            DEBUG_PRINTLN(F("Setting motion detection duration to 80..."));\n            setMotionDetectionDuration(80);\n\n            DEBUG_PRINTLN(F("Setting zero-motion detection duration to 0..."));\n            setZeroMotionDetectionDuration(0);\n\n            DEBUG_PRINTLN(F("Setting AK8975 to single measurement mode..."));\n            //mag -> setMode(1);\n            I2Cdev::writeByte(0x0E, 0x0A, 0x01, wireObj);\n\n            // setup AK8975 (0x0E) as Slave 0 in read mode\n            DEBUG_PRINTLN(F("Setting up AK8975 read slave 0..."));\n            I2Cdev::writeByte(0x68, MPU6050_RA_I2C_SLV0_ADDR, 0x8E, wireObj);\n            I2Cdev::writeByte(0x68, MPU6050_RA_I2C_SLV0_REG,  0x01, wireObj);\n            I2Cdev::writeByte(0x68, MPU6050_RA_I2C_SLV0_CTRL, 0xDA, wireObj);\n\n            // setup AK8975 (0x0E) as Slave 2 in write mode\n            DEBUG_PRINTLN(F("Setting up AK8975 write slave 2..."));\n            I2Cdev::writeByte(0x68, MPU6050_RA_I2C_SLV2_ADDR, 0x0E, wireObj);\n            I2Cdev::writeByte(0x68, MPU6050_RA_I2C_SLV2_REG,  0x0A, wireObj);\n            I2Cdev::writeByte(0x68, MPU6050_RA_I2C_SLV2_CTRL, 0x81, wireObj);\n            I2Cdev::writeByte(0x68, MPU6050_RA_I2C_SLV2_DO,   0x01, wireObj);\n\n            // setup I2C timing/delay control\n            DEBUG_PRINTLN(F("Setting up slave access delay..."));\n            I2Cdev::writeByte(0x68, MPU6050_RA_I2C_SLV4_CTRL, 0x18, wireObj);\n            I2Cdev::writeByte(0x68, MPU6050_RA_I2C_MST_DELAY_CTRL, 0x05, wireObj);\n\n            // enable interrupts\n            DEBUG_PRINTLN(F("Enabling default interrupt behavior/no bypass..."));\n            I2Cdev::writeByte(0x68, MPU6050_RA_INT_PIN_CFG, 0x00, wireObj);\n\n            // enable I2C master mode and reset DMP/FIFO\n            DEBUG_PRINTLN(F("Enabling I2C master mode..."));\n            I2Cdev::writeByte(0x68, MPU6050_RA_USER_CTRL, 0x20, wireObj);\n            DEBUG_PRINTLN(F("Resetting FIFO..."));\n            I2Cdev::writeByte(0x68, MPU6050_RA_USER_CTRL, 0x24, wireObj);\n            DEBUG_PRINTLN(F("Rewriting I2C master mode enabled because...I don\'t know"));\n            I2Cdev::writeByte(0x68, MPU6050_RA_USER_CTRL, 0x20, wireObj);\n            DEBUG_PRINTLN(F("Enabling and resetting DMP/FIFO..."));\n            I2Cdev::writeByte(0x68, MPU6050_RA_USER_CTRL, 0xE8, wireObj);\n\n            DEBUG_PRINTLN(F("Writing final memory update 5/19 (function unknown)..."));\n            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);\n            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);\n            DEBUG_PRINTLN(F("Writing final memory update 6/19 (function unknown)..."));\n            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);\n            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);\n            DEBUG_PRINTLN(F("Writing final memory update 7/19 (function unknown)..."));\n            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);\n            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);\n            DEBUG_PRINTLN(F("Writing final memory update 8/19 (function unknown)..."));\n            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);\n            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);\n            DEBUG_PRINTLN(F("Writing final memory update 9/19 (function unknown)..."));\n            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);\n            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);\n            DEBUG_PRINTLN(F("Writing final memory update 10/19 (function unknown)..."));\n            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);\n            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);\n            DEBUG_PRINTLN(F("Writing final memory update 11/19 (function unknown)..."));\n            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);\n            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);\n            \n            DEBUG_PRINTLN(F("Reading final memory update 12/19 (function unknown)..."));\n            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);\n            readMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);\n            #ifdef DEBUG\n                DEBUG_PRINT(F("Read bytes: "));\n                for (j = 0; j < 4; j++) {\n                    DEBUG_PRINTF(dmpUpdate[3 + j], HEX);\n                    DEBUG_PRINT(" ");\n                }\n                DEBUG_PRINTLN("");\n            #endif\n\n            DEBUG_PRINTLN(F("Writing final memory update 13/19 (function unknown)..."));\n            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);\n            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);\n            DEBUG_PRINTLN(F("Writing final memory update 14/19 (function unknown)..."));\n            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);\n            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);\n            DEBUG_PRINTLN(F("Writing final memory update 15/19 (function unknown)..."));\n            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);\n            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);\n            DEBUG_PRINTLN(F("Writing final memory update 16/19 (function unknown)..."));\n            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);\n            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);\n            DEBUG_PRINTLN(F("Writing final memory update 17/19 (function unknown)..."));\n            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);\n            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);\n\n            DEBUG_PRINTLN(F("Waiting for FIRO count >= 46..."));\n            while ((fifoCount = getFIFOCount()) < 46);\n            DEBUG_PRINTLN(F("Reading FIFO..."));\n            getFIFOBytes(fifoBuffer, (fifoCount < 128) ? fifoCount : 128); // safeguard only 128 bytes\n            DEBUG_PRINTLN(F("Reading interrupt status..."));\n            getIntStatus();\n\n            DEBUG_PRINTLN(F("Writing final memory update 18/19 (function unknown)..."));\n            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);\n            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);\n\n            DEBUG_PRINTLN(F("Waiting for FIRO count >= 48..."));\n            while ((fifoCount = getFIFOCount()) < 48);\n            DEBUG_PRINTLN(F("Reading FIFO..."));\n            getFIFOBytes(fifoBuffer, (fifoCount < 128) ? fifoCount : 128); // safeguard only 128 bytes\n            DEBUG_PRINTLN(F("Reading interrupt status..."));\n            getIntStatus();\n            DEBUG_PRINTLN(F("Waiting for FIRO count >= 48..."));\n            while ((fifoCount = getFIFOCount()) < 48);\n            DEBUG_PRINTLN(F("Reading FIFO..."));\n            getFIFOBytes(fifoBuffer, (fifoCount < 128) ? fifoCount : 128); // safeguard only 128 bytes\n            DEBUG_PRINTLN(F("Reading interrupt status..."));\n            getIntStatus();\n\n            DEBUG_PRINTLN(F("Writing final memory update 19/19 (function unknown)..."));\n            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);\n            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);\n\n            DEBUG_PRINTLN(F("Disabling DMP (you turn it on later)..."));\n            setDMPEnabled(false);\n\n            DEBUG_PRINTLN(F("Setting up internal 48-byte (default) DMP packet buffer..."));\n            dmpPacketSize = 48;\n            /*if ((dmpPacketBuffer = (uint8_t *)malloc(42)) == 0) {\n                return 3; // TODO: proper error code for no memory\n            }*/\n\n            DEBUG_PRINTLN(F("Resetting FIFO and clearing INT status one last time..."));\n            resetFIFO();\n            getIntStatus();\n        } else {\n            DEBUG_PRINTLN(F("ERROR! DMP configuration verification failed."));\n            return 2; // configuration block loading failed\n        }\n    } else {\n        DEBUG_PRINTLN(F("ERROR! DMP code verification failed."));\n        return 1; // main binary block loading failed\n    }\n    return 0; // success\n}\n\nbool MPU6050_9Axis_MotionApps41::dmpPacketAvailable() {\n    return getFIFOCount() >= dmpGetFIFOPacketSize();\n}\n\n// uint8_t MPU6050_9Axis_MotionApps41::dmpSetFIFORate(uint8_t fifoRate);\n// uint8_t MPU6050_9Axis_MotionApps41::dmpGetFIFORate();\n// uint8_t MPU6050_9Axis_MotionApps41::dmpGetSampleStepSizeMS();\n// uint8_t MPU6050_9Axis_MotionApps41::dmpGetSampleFrequency();\n// int32_t MPU6050_9Axis_MotionApps41::dmpDecodeTemperature(int8_t tempReg);\n\n//uint8_t MPU6050_9Axis_MotionApps41::dmpRegisterFIFORateProcess(inv_obj_func func, int16_t priority);\n//uint8_t MPU6050_9Axis_MotionApps41::dmpUnregisterFIFORateProcess(inv_obj_func func);\n//uint8_t MPU6050_9Axis_MotionApps41::dmpRunFIFORateProcesses();\n\n// uint8_t MPU6050_9Axis_MotionApps41::dmpSendQuaternion(uint_fast16_t accuracy);\n// uint8_t MPU6050_9Axis_MotionApps41::dmpSendGyro(uint_fast16_t elements, uint_fast16_t accuracy);\n// uint8_t MPU6050_9Axis_MotionApps41::dmpSendAccel(uint_fast16_t elements, uint_fast16_t accuracy);\n// uint8_t MPU6050_9Axis_MotionApps41::dmpSendLinearAccel(uint_fast16_t elements, uint_fast16_t accuracy);\n// uint8_t MPU6050_9Axis_MotionApps41::dmpSendLinearAccelInWorld(uint_fast16_t elements, uint_fast16_t accuracy);\n// uint8_t MPU6050_9Axis_MotionApps41::dmpSendControlData(uint_fast16_t elements, uint_fast16_t accuracy);\n// uint8_t MPU6050_9Axis_MotionApps41::dmpSendSensorData(uint_fast16_t elements, uint_fast16_t accuracy);\n// uint8_t MPU6050_9Axis_MotionApps41::dmpSendExternalSensorData(uint_fast16_t elements, uint_fast16_t accuracy);\n// uint8_t MPU6050_9Axis_MotionApps41::dmpSendGravity(uint_fast16_t elements, uint_fast16_t accuracy);\n// uint8_t MPU6050_9Axis_MotionApps41::dmpSendPacketNumber(uint_fast16_t accuracy);\n// uint8_t MPU6050_9Axis_MotionApps41::dmpSendQuantizedAccel(uint_fast16_t elements, uint_fast16_t accuracy);\n// uint8_t MPU6050_9Axis_MotionApps41::dmpSendEIS(uint_fast16_t elements, uint_fast16_t accuracy);\n\nuint8_t MPU6050_9Axis_MotionApps41::dmpGetAccel(int32_t *data, const uint8_t* packet) {\n    // TODO: accommodate different arrangements of sent data (ONLY default supported now)\n    if (packet == 0) packet = dmpPacketBuffer;\n    data[0] = (((uint32_t)packet[34] << 24) | ((uint32_t)packet[35] << 16) | ((uint32_t)packet[36] << 8) | packet[37]);\n    data[1] = (((uint32_t)packet[38] << 24) | ((uint32_t)packet[39] << 16) | ((uint32_t)packet[40] << 8) | packet[41]);\n    data[2] = (((uint32_t)packet[42] << 24) | ((uint32_t)packet[43] << 16) | ((uint32_t)packet[44] << 8) | packet[45]);\n    return 0;\n}\nuint8_t MPU6050_9Axis_MotionApps41::dmpGetAccel(int16_t *data, const uint8_t* packet) {\n    // TODO: accommodate different arrangements of sent data (ONLY default supported now)\n    if (packet == 0) packet = dmpPacketBuffer;\n    data[0] = (packet[34] << 8) | packet[35];\n    data[1] = (packet[38] << 8) | packet[39];\n    data[2] = (packet[42] << 8) | packet[43];\n    return 0;\n}\nuint8_t MPU6050_9Axis_MotionApps41::dmpGetAccel(VectorInt16 *v, const uint8_t* packet) {\n    // TODO: accommodate different arrangements of sent data (ONLY default supported now)\n    if (packet == 0) packet = dmpPacketBuffer;\n    v -> x = (packet[34] << 8) | packet[35];\n    v -> y = (packet[38] << 8) | packet[39];\n    v -> z = (packet[42] << 8) | packet[43];\n    return 0;\n}\nuint8_t MPU6050_9Axis_MotionApps41::dmpGetQuaternion(int32_t *data, const uint8_t* packet) {\n    // TODO: accommodate different arrangements of sent data (ONLY default supported now)\n    if (packet == 0) packet = dmpPacketBuffer;\n    data[0] = (((uint32_t)packet[0] << 24) | ((uint32_t)packet[1] << 16) | ((uint32_t)packet[2] << 8) | packet[3]);\n    data[1] = (((uint32_t)packet[4] << 24) | ((uint32_t)packet[5] << 16) | ((uint32_t)packet[6] << 8) | packet[7]);\n    data[2] = (((uint32_t)packet[8] << 24) | ((uint32_t)packet[9] << 16) | ((uint32_t)packet[10] << 8) | packet[11]);\n    data[3] = (((uint32_t)packet[12] << 24) | ((uint32_t)packet[13] << 16) | ((uint32_t)packet[14] << 8) | packet[15]);\n    return 0;\n}\nuint8_t MPU6050_9Axis_MotionApps41::dmpGetQuaternion(int16_t *data, const uint8_t* packet) {\n    // TODO: accommodate different arrangements of sent data (ONLY default supported now)\n    if (packet == 0) packet = dmpPacketBuffer;\n    data[0] = ((packet[0] << 8) | packet[1]);\n    data[1] = ((packet[4] << 8) | packet[5]);\n    data[2] = ((packet[8] << 8) | packet[9]);\n    data[3] = ((packet[12] << 8) | packet[13]);\n    return 0;\n}\nuint8_t MPU6050_9Axis_MotionApps41::dmpGetQuaternion(Quaternion *q, const uint8_t* packet) {\n    // TODO: accommodate different arrangements of sent data (ONLY default supported now)\n    int16_t qI[4];\n    uint8_t status = dmpGetQuaternion(qI, packet);\n    if (status == 0) {\n        q -> w = (float)qI[0] / 16384.0f;\n        q -> x = (float)qI[1] / 16384.0f;\n        q -> y = (float)qI[2] / 16384.0f;\n        q -> z = (float)qI[3] / 16384.0f;\n        return 0;\n    }\n    return status; // int16 return value, indicates error if this line is reached\n}\n// uint8_t MPU6050_9Axis_MotionApps41::dmpGet6AxisQuaternion(long *data, const uint8_t* packet);\n// uint8_t MPU6050_9Axis_MotionApps41::dmpGetRelativeQuaternion(long *data, const uint8_t* packet);\nuint8_t MPU6050_9Axis_MotionApps41::dmpGetGyro(int32_t *data, const uint8_t* packet) {\n    // TODO: accommodate different arrangements of sent data (ONLY default supported now)\n    if (packet == 0) packet = dmpPacketBuffer;\n    data[0] = (((uint32_t)packet[16] << 24) | ((uint32_t)packet[17] << 16) | ((uint32_t)packet[18] << 8) | packet[19]);\n    data[1] = (((uint32_t)packet[20] << 24) | ((uint32_t)packet[21] << 16) | ((uint32_t)packet[22] << 8) | packet[23]);\n    data[2] = (((uint32_t)packet[24] << 24) | ((uint32_t)packet[25] << 16) | ((uint32_t)packet[26] << 8) | packet[27]);\n    return 0;\n}\nuint8_t MPU6050_9Axis_MotionApps41::dmpGetGyro(int16_t *data, const uint8_t* packet) {\n    // TODO: accommodate different arrangements of sent data (ONLY default supported now)\n    if (packet == 0) packet = dmpPacketBuffer;\n    data[0] = (packet[16] << 8) | packet[17];\n    data[1] = (packet[20] << 8) | packet[21];\n    data[2] = (packet[24] << 8) | packet[25];\n    return 0;\n}\nuint8_t MPU6050_9Axis_MotionApps41::dmpGetMag(int16_t *data, const uint8_t* packet) {\n    // TODO: accommodate different arrangements of sent data (ONLY default supported now)\n    if (packet == 0) packet = dmpPacketBuffer;\n    data[0] = (packet[28] << 8) | packet[29];\n    data[1] = (packet[30] << 8) | packet[31];\n    data[2] = (packet[32] << 8) | packet[33];\n    return 0;\n}\n// uint8_t MPU6050_9Axis_MotionApps41::dmpSetLinearAccelFilterCoefficient(float coef);\n// uint8_t MPU6050_9Axis_MotionApps41::dmpGetLinearAccel(long *data, const uint8_t* packet);\nuint8_t MPU6050_9Axis_MotionApps41::dmpGetLinearAccel(VectorInt16 *v, VectorInt16 *vRaw, VectorFloat *gravity) {\n    // get rid of the gravity component (+1g = +4096 in standard DMP FIFO packet)\n    v -> x = vRaw -> x - gravity -> x*4096;\n    v -> y = vRaw -> y - gravity -> y*4096;\n    v -> z = vRaw -> z - gravity -> z*4096;\n    return 0;\n}\n// uint8_t MPU6050_9Axis_MotionApps41::dmpGetLinearAccelInWorld(long *data, const uint8_t* packet);\nuint8_t MPU6050_9Axis_MotionApps41::dmpGetLinearAccelInWorld(VectorInt16 *v, VectorInt16 *vReal, Quaternion *q) {\n    // rotate measured 3D acceleration vector into original state\n    // frame of reference based on orientation quaternion\n    memcpy(v, vReal, sizeof(VectorInt16));\n    v -> rotate(q);\n    return 0;\n}\n// uint8_t MPU6050_9Axis_MotionApps41::dmpGetGyroAndAccelSensor(long *data, const uint8_t* packet);\n// uint8_t MPU6050_9Axis_MotionApps41::dmpGetGyroSensor(long *data, const uint8_t* packet);\n// uint8_t MPU6050_9Axis_MotionApps41::dmpGetControlData(long *data, const uint8_t* packet);\n// uint8_t MPU6050_9Axis_MotionApps41::dmpGetTemperature(long *data, const uint8_t* packet);\n// uint8_t MPU6050_9Axis_MotionApps41::dmpGetGravity(long *data, const uint8_t* packet);\nuint8_t MPU6050_9Axis_MotionApps41::dmpGetGravity(int16_t *data, const uint8_t* packet) {\n    /* +1g corresponds to +8192, sensitivity is 2g. */\n    int16_t qI[4];\n    uint8_t status = dmpGetQuaternion(qI, packet);\n    data[0] = ((int32_t)qI[1] * qI[3] - (int32_t)qI[0] * qI[2]) / 16384;\n    data[1] = ((int32_t)qI[0] * qI[1] + (int32_t)qI[2] * qI[3]) / 16384;\n    data[2] = ((int32_t)qI[0] * qI[0] - (int32_t)qI[1] * qI[1]\n\t       - (int32_t)qI[2] * qI[2] + (int32_t)qI[3] * qI[3]) / (int32_t)(2 * 16384L);\n    return status;\n}\n\nuint8_t MPU6050_9Axis_MotionApps41::dmpGetGravity(VectorFloat *v, Quaternion *q) {\n    v -> x = 2 * (q -> x*q -> z - q -> w*q -> y);\n    v -> y = 2 * (q -> w*q -> x + q -> y*q -> z);\n    v -> z = q -> w*q -> w - q -> x*q -> x - q -> y*q -> y + q -> z*q -> z;\n    return 0;\n}\n// uint8_t MPU6050_9Axis_MotionApps41::dmpGetUnquantizedAccel(long *data, const uint8_t* packet);\n// uint8_t MPU6050_9Axis_MotionApps41::dmpGetQuantizedAccel(long *data, const uint8_t* packet);\n// uint8_t MPU6050_9Axis_MotionApps41::dmpGetExternalSensorData(long *data, int size, const uint8_t* packet);\n// uint8_t MPU6050_9Axis_MotionApps41::dmpGetEIS(long *data, const uint8_t* packet);\n\nuint8_t MPU6050_9Axis_MotionApps41::dmpGetEuler(float *data, Quaternion *q) {\n    data[0] = atan2(2*q -> x*q -> y - 2*q -> w*q -> z, 2*q -> w*q -> w + 2*q -> x*q -> x - 1);   // psi\n    data[1] = -asin(2*q -> x*q -> z + 2*q -> w*q -> y);                              // theta\n    data[2] = atan2(2*q -> y*q -> z - 2*q -> w*q -> x, 2*q -> w*q -> w + 2*q -> z*q -> z - 1);   // phi\n    return 0;\n}\n\n#ifdef USE_OLD_DMPGETYAWPITCHROLL\nuint8_t MPU6050_9Axis_MotionApps41::dmpGetYawPitchRoll(float *data, Quaternion *q, VectorFloat *gravity) {\n    // yaw: (about Z axis)\n    data[0] = atan2(2*q -> x*q -> y - 2*q -> w*q -> z, 2*q -> w*q -> w + 2*q -> x*q -> x - 1);\n    // pitch: (nose up/down, about Y axis)\n    data[1] = atan(gravity -> x / sqrt(gravity -> y*gravity -> y + gravity -> z*gravity -> z));\n    // roll: (tilt left/right, about X axis)\n    data[2] = atan(gravity -> y / sqrt(gravity -> x*gravity -> x + gravity -> z*gravity -> z));\n    return 0;\n}\n#else \nuint8_t MPU6050_9Axis_MotionApps41::dmpGetYawPitchRoll(float *data, Quaternion *q, VectorFloat *gravity) {\n    // yaw: (about Z axis)\n    data[0] = atan2(2*q -> x*q -> y - 2*q -> w*q -> z, 2*q -> w*q -> w + 2*q -> x*q -> x - 1);\n    // pitch: (nose up/down, about Y axis)\n    data[1] = atan2(gravity -> x , sqrt(gravity -> y*gravity -> y + gravity -> z*gravity -> z));\n    // roll: (tilt left/right, about X axis)\n    data[2] = atan2(gravity -> y , gravity -> z);\n    if(gravity->z<0) {\n        if(data[1]>0) {\n            data[1] = PI - data[1]; \n        } else { \n            data[1] = -PI - data[1];\n        }\n    }\n    return 0;\n}\n#endif\n\n// uint8_t MPU6050_9Axis_MotionApps41::dmpGetAccelFloat(float *data, const uint8_t* packet);\n// uint8_t MPU6050_9Axis_MotionApps41::dmpGetQuaternionFloat(float *data, const uint8_t* packet);\n\nuint8_t MPU6050_9Axis_MotionApps41::dmpProcessFIFOPacket(const unsigned char *dmpData) {\n    (void)dmpData; // suppress unused variable compiler warning\n    /*for (uint8_t k = 0; k < dmpPacketSize; k++) {\n        if (dmpData[k] < 0x10) Serial.print("0");\n        Serial.print(dmpData[k], HEX);\n        Serial.print(" ");\n    }\n    Serial.print("\\n");*/\n    //Serial.println((uint16_t)dmpPacketBuffer);\n    return 0;\n}\nuint8_t MPU6050_9Axis_MotionApps41::dmpReadAndProcessFIFOPacket(uint8_t numPackets, uint8_t *processed) {\n    uint8_t status;\n    uint8_t buf[dmpPacketSize];\n    for (uint8_t i = 0; i < numPackets; i++) {\n        // read packet from FIFO\n        getFIFOBytes(buf, dmpPacketSize);\n\n        // process packet\n        if ((status = dmpProcessFIFOPacket(buf)) > 0) return status;\n        \n        // increment external process count variable, if supplied\n        if (processed != 0) (*processed)++;\n    }\n    return 0;\n}\n\n// uint8_t MPU6050_9Axis_MotionApps41::dmpSetFIFOProcessedCallback(void (*func) (void));\n\n// uint8_t MPU6050_9Axis_MotionApps41::dmpInitFIFOParam();\n// uint8_t MPU6050_9Axis_MotionApps41::dmpCloseFIFO();\n// uint8_t MPU6050_9Axis_MotionApps41::dmpSetGyroDataSource(uint_fast8_t source);\n// uint8_t MPU6050_9Axis_MotionApps41::dmpDecodeQuantizedAccel();\n// uint32_t MPU6050_9Axis_MotionApps41::dmpGetGyroSumOfSquare();\n// uint32_t MPU6050_9Axis_MotionApps41::dmpGetAccelSumOfSquare();\n// void MPU6050_9Axis_MotionApps41::dmpOverrideQuaternion(long *q);\nuint16_t MPU6050_9Axis_MotionApps41::dmpGetFIFOPacketSize() {\n    return dmpPacketSize;\n}\n'