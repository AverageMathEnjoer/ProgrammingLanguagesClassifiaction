b'/*\n * Copyright (C) 2015 Naman Dwivedi\n *\n * Licensed under the GNU General Public License v3\n *\n * This is free software: you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n */\n\npackage com.naman14.timber.dataloaders;\n\nimport android.content.Context;\nimport android.database.Cursor;\nimport android.provider.MediaStore;\n\nimport com.naman14.timber.models.Artist;\nimport com.naman14.timber.utils.PreferencesUtility;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ArtistLoader {\n\n    public static Artist getArtist(Cursor cursor) {\n        Artist artist = new Artist();\n        if (cursor != null) {\n            if (cursor.moveToFirst())\n                artist = new Artist(cursor.getLong(0), cursor.getString(1), cursor.getInt(2), cursor.getInt(3));\n        }\n        if (cursor != null)\n            cursor.close();\n        return artist;\n    }\n\n    public static List<Artist> getArtistsForCursor(Cursor cursor) {\n        ArrayList arrayList = new ArrayList();\n        if ((cursor != null) && (cursor.moveToFirst()))\n            do {\n                arrayList.add(new Artist(cursor.getLong(0), cursor.getString(1), cursor.getInt(2), cursor.getInt(3)));\n            }\n            while (cursor.moveToNext());\n        if (cursor != null)\n            cursor.close();\n        return arrayList;\n    }\n\n    public static List<Artist> getAllArtists(Context context) {\n        return getArtistsForCursor(makeArtistCursor(context, null, null));\n    }\n\n    public static Artist getArtist(Context context, long id) {\n        return getArtist(makeArtistCursor(context, "_id=?", new String[]{String.valueOf(id)}));\n    }\n\n    public static List<Artist> getArtists(Context context, String paramString, int limit) {\n        List<Artist> result = getArtistsForCursor(makeArtistCursor(context, "artist LIKE ?", new String[]{paramString + "%"}));\n        if (result.size() < limit) {\n            result.addAll(getArtistsForCursor(makeArtistCursor(context, "artist LIKE ?", new String[]{"%_" + paramString + "%"})));\n        }\n        return result.size() < limit ? result : result.subList(0, limit);\n    }\n\n\n    public static Cursor makeArtistCursor(Context context, String selection, String[] paramArrayOfString) {\n        final String artistSortOrder = PreferencesUtility.getInstance(context).getArtistSortOrder();\n        Cursor cursor = context.getContentResolver().query(MediaStore.Audio.Artists.EXTERNAL_CONTENT_URI, new String[]{"_id", "artist", "number_of_albums", "number_of_tracks"}, selection, paramArrayOfString, artistSortOrder);\n        return cursor;\n    }\n}\n'