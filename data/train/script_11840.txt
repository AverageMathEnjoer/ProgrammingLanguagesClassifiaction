b'#include "hotkey.h"\n#include <QSettings>\n#include <QCoreApplication>\n#include <QMessageBox>\n#include <QHotkey>\n#include "albert/albert.h"\n#include "albert/logging.h"\nstatic const char *CFG_NOTIFY_SUPPORT = "notifiedUnsupportedHotkey";\nstatic const char *CFG_HOTKEY = "hotkey";\nstatic const char *DEF_HOTKEY = "Ctrl+Space";\n\nHotkey::Hotkey()\n{\n    QSettings s(qApp->applicationName());\n    if (isPlatformSupported())\n        setHotkey(QKeySequence::fromString(s.value(CFG_HOTKEY, DEF_HOTKEY).toString())[0]);\n    else {\n        if (!s.value(CFG_NOTIFY_SUPPORT, false).toBool()){\n            QMessageBox::warning(nullptr, "Hotkey not supported",\n                                 "Hotkeys are not supported on this platform. Use your desktop "\n                                 "environment to run bind a hotkey to \'albertctl toggle\'");\n            s.setValue(CFG_NOTIFY_SUPPORT, true);\n        }\n    }\n}\n\nQKeyCombination Hotkey::hotkey() const\n{\n    if (hotkey_)\n        return hotkey_->shortcut()[0];\n    else\n        return Qt::Key_unknown;\n}\n\nbool Hotkey::setHotkey(QKeyCombination keycode)\n{\n    QKeySequence ks(keycode);\n\n    if (auto hotkey = std::make_unique<QHotkey>(ks, true, qApp); hotkey->isRegistered()){\n        if (hotkey_)\n            hotkey_->disconnect();\n\n        hotkey_ = std::move(hotkey);\n\n        QSettings(qApp->applicationName()).setValue(CFG_HOTKEY, ks.toString());\n\n        QObject::connect(hotkey_.get(), &QHotkey::activated,\n                         qApp, [](){ albert::toggle(); });\n\n        INFO << "Hotkey set to" << ks.toString();\n        return true;\n    } else {\n        QMessageBox::warning(nullptr, "Error", QString("Failed to set hotkey \'%1\'").arg(ks.toString()));\n        WARN << "Failed to set hotkey " << ks.toString();\n        return false;\n    }\n}\n\nbool Hotkey::isPlatformSupported()\n{\n    return QHotkey::isPlatformSupported();\n}\n'