b'package com.github.eprendre.sources_by_eprendre\n\nimport com.github.eprendre.tingshu.extensions.config\nimport com.github.eprendre.tingshu.sources.AudioUrlExtractor\nimport com.github.eprendre.tingshu.sources.AudioUrlWebViewExtractor\nimport com.github.eprendre.tingshu.sources.TingShu\nimport com.github.eprendre.tingshu.utils.*\nimport org.jsoup.Jsoup\nimport java.net.URLEncoder\nimport java.util.*\n\nobject TingShuBao : TingShu(){\n\n    override fun getSourceId(): String {\n        return "4c099c03129640fe8416d920ea6ae842"\n    }\n\n    override fun getDesc(): String {\n        return "\xe6\x8e\xa8\xe8\x8d\x90\xe6\x8c\x87\xe6\x95\xb0:4\xe6\x98\x9f \xe2\xad\x90\xe2\xad\x90\xe2\xad\x90\xe2\xad\x90\\n" +\n                "PC\xe7\xab\xaf\xe7\x9a\x84\xe7\x82\xb8\xe4\xba\x86\xef\xbc\x8c\xe6\xad\xa4\xe4\xb8\xba\xe7\xa7\xbb\xe5\x8a\xa8\xe7\xab\xaf\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe6\xad\xa3\xe5\xb8\xb8\xe4\xbd\xbf\xe7\x94\xa8"\n    }\n\n    override fun getUrl(): String {\n        return "http://m.tingshubao.com/fenlei.html"\n    }\n\n    override fun getName(): String {\n        return "\xe5\x90\xac\xe4\xb9\xa6\xe5\xae\x9d"\n    }\n\n    override fun search(keywords: String, page: Int): Pair<List<Book>, Int> {\n        val url = "http://m.tingshubao.com/search.asp"\n        val encodedKeywords = URLEncoder.encode(keywords, "gb2312")\n        val geturl = "$url?page=$page&searchword=$encodedKeywords&searchtype=-1"\n        val doc = getUrl(geturl, geturl)\n        val uiPage = doc.select(".paging > a").last()\n        var nextPage = 1\n        if(uiPage != null){\n            val uiList = uiPage.absUrl("href")\n            nextPage = uiList.replaceBefore("=","").replaceAfter("&","").replace("=","").replace("&","").toInt()\n        }\n        val list = ArrayList<Book>()\n        doc.select(".book-ol > li").forEach {\n            val coverUrl = it.selectFirst("a > img").absUrl("data-original")\n            val bookUrl = it.selectFirst("a").absUrl("href")\n            val title = it.select(".book-cell > .book-title").text().trim()\n            var author = it.select(".book-cell > .book-meta").text().split("\xe8\x91\x97")[0]+"\xe8\x91\x97)".trim()\n            var artist = it.select(".book-cell > .book-meta").text().split("\xe8\x91\x97")[1].substring(1).trim()\n            list.add(Book(coverUrl, bookUrl, title, author, artist).apply {\n                this.sourceId = getSourceId()\n            })\n        }\n        return if(nextPage >= page)\n            Pair(list, nextPage)\n        else\n            Pair(list, page)\n    }\n\n    override fun getAudioUrlExtractor(): AudioUrlExtractor {\n//        AudioUrlWebViewSniffExtractor.setUp { url ->\n//            url.contains(".mp3", true) || url.contains(".m4a", true) || url.contains(".php",true)\n//        }\n//        return AudioUrlWebViewSniffExtractor\n\n        AudioUrlWebViewExtractor.setUp { html ->\n            val doc = Jsoup.parse(html)\n            val audioElement = doc.getElementById("jp_audio_0")\n            audioElement?.attr("src")\n        }\n        return AudioUrlWebViewExtractor\n\n    }\n\n    override fun getCategoryMenus(): List<CategoryMenu> {\n        val url = "http://m.tingshubao.com/fenlei.html"\n        val doc = getUrl(url, "http://m.tingshubao.com/")\n        val list = ArrayList<CategoryMenu>()\n        doc.select(".module > .pd-module-box").map{\n            val title = it.select(".pd-class > dt > a").text()\n            val subMenu = it.select(".pd-class > dd > a").map{\n                val titles = it.text()\n                val urls = it.absUrl("href")\n                CategoryTab(titles, urls)\n            }\n            list.add(CategoryMenu(title, subMenu))\n        }\n        return list\n    }\n\n    override fun getCategoryList(url: String): Category {\n        val doc = getUrl(url, "http://m.tingshubao.com/fenlei.html")\n        val uiPage = doc.select(".paging > a").last()\n        if(uiPage != null){\n            val nextUrl = uiPage.absUrl("href")\n            val index = url.lastIndexOf("_")\n            var str1 = url.substring(url.lastIndexOf("_") + 1).substringBefore(".")\n            if(index == -1) str1 = "1"\n            val currentPageNum = try {\n                str1.toInt()\n            }catch (e: Exception) {\n                1\n            }\n            var str2 = nextUrl.substring(nextUrl.lastIndexOf("_") + 1).substringBefore(".")\n            val totalPage = str2.toInt()\n            val list = ArrayList<Book>()\n            doc.select(".book-ol > li").forEach {\n                val coverUrl = it.selectFirst("a > img").absUrl("data-original")\n                val bookUrl = it.selectFirst("a").absUrl("href")\n                val title = it.select(".book-cell > .book-title").text().trim()\n                var author = it.select(".book-cell > .book-meta").text().split("\xe8\x91\x97")[0]+"\xe8\x91\x97)".trim()\n                var artist = it.select(".book-cell > .book-meta").text().split("\xe8\x91\x97")[1].substring(1).trim()\n                val intro = it.selectFirst(".book-desc").text()\n                list.add(Book(coverUrl, bookUrl, title, author, artist).apply {\n                    this.intro = intro\n                    this.sourceId = getSourceId()\n                })\n            }\n            return Category(list, currentPageNum, totalPage, url, nextUrl)\n        }else{\n            val list = ArrayList<Book>()\n            doc.select(".list-ul > li").forEach {\n                val coverUrl = it.selectFirst("a > img").absUrl("data-original")\n                val bookUrl = it.selectFirst("a").absUrl("href")\n                val title = it.select(".list-name > a").text().trim()\n                var author = ""\n                var artist = "\xe6\xbc\x94\xe6\x92\xad\xef\xbc\x9a" + it.select(".module-slide-author > a").text()\n                list.add(Book(coverUrl, bookUrl, title, author, artist).apply {\n                    this.sourceId = getSourceId()\n                })\n            }\n            return Category(list, 1, 1, url, url)\n        }\n    }\n\n    override fun getBookDetailInfo(bookUrl: String, loadEpisodes: Boolean, loadFullPages: Boolean): BookDetail {\n        val episodes = ArrayList<Episode>()\n        var info = ""\n        if(loadEpisodes) {\n            val doc = getUrl(bookUrl, bookUrl)\n            doc.select(".play-list > ul > li").forEach {\n                episodes.add(Episode(it.text(), it.select("a").first().absUrl("href")))\n            }\n            info = doc.selectFirst(".book-des").text()\n        }\n        return BookDetail(episodes, info)\n    }\n\n    private fun getUrl(url: String, ref: String):org.jsoup.nodes.Document{\n        val conn = Jsoup.connect(url).config()\n        conn.header("Upgrade-Insecure-Requests", "1")\n        conn.referrer(ref)\n        return conn.get()\n    }\n}'