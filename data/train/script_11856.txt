b'{-# LANGUAGE CPP #-}\n{-# LANGUAGE BangPatterns #-}\n#if !defined(TESTING) && defined(__GLASGOW_HASKELL__)\n{-# LANGUAGE Trustworthy #-}\n#endif\n\n#include "containers.h"\n\n-----------------------------------------------------------------------------\n-- |\n-- Module      :  Data.IntMap.Strict\n-- Copyright   :  (c) Daan Leijen 2002\n--                (c) Andriy Palamarchuk 2008\n-- License     :  BSD-style\n-- Maintainer  :  libraries@haskell.org\n-- Portability :  portable\n--\n--\n-- = Finite Int Maps (strict interface)\n--\n-- The @\'IntMap\' v@ type represents a finite map (sometimes called a dictionary)\n-- from key of type @Int@ to values of type @v@.\n--\n-- Each function in this module is careful to force values before installing\n-- them in an \'IntMap\'. This is usually more efficient when laziness is not\n-- necessary. When laziness /is/ required, use the functions in\n-- "Data.IntMap.Lazy".\n--\n-- In particular, the functions in this module obey the following law:\n--\n--  - If all values stored in all maps in the arguments are in WHNF, then all\n--    values stored in all maps in the results will be in WHNF once those maps\n--    are evaluated.\n--\n-- For a walkthrough of the most commonly used functions see the\n-- <https://haskell-containers.readthedocs.io/en/latest/map.html maps introduction>.\n--\n-- This module is intended to be imported qualified, to avoid name clashes with\n-- Prelude functions:\n--\n-- > import Data.IntMap.Strict (IntMap)\n-- > import qualified Data.IntMap.Strict as IntMap\n--\n-- Note that the implementation is generally /left-biased/. Functions that take\n-- two maps as arguments and combine them, such as `union` and `intersection`,\n-- prefer the values in the first argument to those in the second.\n--\n--\n-- == Detailed performance information\n--\n-- The amortized running time is given for each operation, with \\(n\\) referring to\n-- the number of entries in the map and \\(W\\) referring to the number of bits in\n-- an \'Int\' (32 or 64).\n--\n-- Benchmarks comparing "Data.IntMap.Strict" with other dictionary\n-- implementations can be found at https://github.com/haskell-perf/dictionaries.\n--\n--\n-- == Warning\n--\n-- The \'IntMap\' type is shared between the lazy and strict modules, meaning that\n-- the same \'IntMap\' value can be passed to functions in both modules. This\n-- means that the \'Functor\', \'Traversable\' and \'Data.Data.Data\' instances are\n-- the same as for the "Data.IntMap.Lazy" module, so if they are used the\n-- resulting map may contain suspended values (thunks).\n--\n--\n-- == Implementation\n--\n-- The implementation is based on /big-endian patricia trees/.  This data\n-- structure performs especially well on binary operations like \'union\' and\n-- \'intersection\'. Additionally, benchmarks show that it is also (much) faster\n-- on insertions and deletions when compared to a generic size-balanced map\n-- implementation (see "Data.Map").\n--\n--    * Chris Okasaki and Andy Gill,  \\"/Fast Mergeable Integer Maps/\\",\n--      Workshop on ML, September 1998, pages 77-86,\n--      <http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.37.5452>\n--\n--    * D.R. Morrison, \\"/PATRICIA -- Practical Algorithm To Retrieve Information Coded In Alphanumeric/\\",\n--      Journal of the ACM, 15(4), October 1968, pages 514-534.\n--\n-----------------------------------------------------------------------------\n\n-- See the notes at the beginning of Data.IntMap.Internal.\n\nmodule Data.IntMap.Strict (\n    -- * Map type\n#if !defined(TESTING)\n    IntMap, Key          -- instance Eq,Show\n#else\n    IntMap(..), Key          -- instance Eq,Show\n#endif\n\n    -- * Construction\n    , empty\n    , singleton\n    , fromSet\n\n    -- ** From Unordered Lists\n    , fromList\n    , fromListWith\n    , fromListWithKey\n\n    -- ** From Ascending Lists\n    , fromAscList\n    , fromAscListWith\n    , fromAscListWithKey\n    , fromDistinctAscList\n\n    -- * Insertion\n    , insert\n    , insertWith\n    , insertWithKey\n    , insertLookupWithKey\n\n    -- * Deletion\\/Update\n    , delete\n    , adjust\n    , adjustWithKey\n    , update\n    , updateWithKey\n    , updateLookupWithKey\n    , alter\n    , alterF\n\n    -- * Query\n    -- ** Lookup\n    , lookup\n    , (!?)\n    , (!)\n    , findWithDefault\n    , member\n    , notMember\n    , lookupLT\n    , lookupGT\n    , lookupLE\n    , lookupGE\n\n    -- ** Size\n    , null\n    , size\n\n    -- * Combine\n\n    -- ** Union\n    , union\n    , unionWith\n    , unionWithKey\n    , unions\n    , unionsWith\n\n    -- ** Difference\n    , difference\n    , (\\\\)\n    , differenceWith\n    , differenceWithKey\n\n    -- ** Intersection\n    , intersection\n    , intersectionWith\n    , intersectionWithKey\n\n    -- ** Disjoint\n    , disjoint\n\n    -- ** Compose\n    , compose\n\n    -- ** Universal combining function\n    , mergeWithKey\n\n    -- * Traversal\n    -- ** Map\n    , map\n    , mapWithKey\n    , traverseWithKey\n    , traverseMaybeWithKey\n    , mapAccum\n    , mapAccumWithKey\n    , mapAccumRWithKey\n    , mapKeys\n    , mapKeysWith\n    , mapKeysMonotonic\n\n    -- * Folds\n    , foldr\n    , foldl\n    , foldrWithKey\n    , foldlWithKey\n    , foldMapWithKey\n\n    -- ** Strict folds\n    , foldr\'\n    , foldl\'\n    , foldrWithKey\'\n    , foldlWithKey\'\n\n    -- * Conversion\n    , elems\n    , keys\n    , assocs\n    , keysSet\n\n    -- ** Lists\n    , toList\n\n-- ** Ordered lists\n    , toAscList\n    , toDescList\n\n    -- * Filter\n    , filter\n    , filterWithKey\n    , restrictKeys\n    , withoutKeys\n    , partition\n    , partitionWithKey\n\n    , takeWhileAntitone\n    , dropWhileAntitone\n    , spanAntitone\n\n    , mapMaybe\n    , mapMaybeWithKey\n    , mapEither\n    , mapEitherWithKey\n\n    , split\n    , splitLookup\n    , splitRoot\n\n    -- * Submap\n    , isSubmapOf, isSubmapOfBy\n    , isProperSubmapOf, isProperSubmapOfBy\n\n    -- * Min\\/Max\n    , lookupMin\n    , lookupMax\n    , findMin\n    , findMax\n    , deleteMin\n    , deleteMax\n    , deleteFindMin\n    , deleteFindMax\n    , updateMin\n    , updateMax\n    , updateMinWithKey\n    , updateMaxWithKey\n    , minView\n    , maxView\n    , minViewWithKey\n    , maxViewWithKey\n\n#ifdef __GLASGOW_HASKELL__\n    -- * Debugging\n    , showTree\n    , showTreeWith\n#endif\n    ) where\n\nimport Data.IntMap.Strict.Internal\nimport Prelude ()\n'