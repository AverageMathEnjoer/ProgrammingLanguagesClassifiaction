b'// UVa1151 Buy or Build\n// Rujia Liu\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nconst int maxn = 1000 + 10;\nconst int maxq = 8;\nint n;\nint x[maxn], y[maxn], cost[maxq];\nvector<int> subn[maxq];\n\nint pa[maxn];\nint findset(int x) { return pa[x] != x ? pa[x] = findset(pa[x]) : x; } \n\nstruct Edge {\n  int u, v, d;\n  Edge(int u, int v, int d):u(u),v(v),d(d) {}\n  bool operator < (const Edge& rhs) const {\n    return d < rhs.d;\n  }\n};\n\n// initialize pa and sort e before calling this method\n// cnt is the current number of components\nint MST(int cnt, const vector<Edge>& e, vector<Edge>& used) {\n  if(cnt == 1) return 0;\n  int m = e.size();\n  int ans = 0;\n  used.clear();\n  for(int i = 0; i < m; i++) {\n    int u = findset(e[i].u), v = findset(e[i].v);\n    int d = e[i].d;\n    if(u != v) {\n      pa[u] = v;\n      ans += d;\n      used.push_back(e[i]);\n      if(--cnt == 1) break;\n    }\n  }\n  return ans;\n}\n\nint main() {\n  int T, q;\n  scanf("%d", &T);\n  while(T--) {\n    scanf("%d%d", &n, &q);\n    for(int i = 0; i < q; i++) {\n      int cnt;\n      scanf("%d%d", &cnt, &cost[i]);\n      subn[i].clear();\n      while(cnt--) {\n        int u;\n        scanf("%d", &u);\n        subn[i].push_back(u-1);\n      }\n    }\n    for(int i = 0; i < n; i++) scanf("%d%d", &x[i], &y[i]);\n\n    vector<Edge> e, need;\n    for(int i = 0; i < n; i++)\n      for(int j = i+1; j < n; j++) {\n        int c = (x[i]-x[j])*(x[i]-x[j]) + (y[i]-y[j])*(y[i]-y[j]);\n        e.push_back(Edge(i, j, c));\n      }\n\n    for(int i = 0; i < n; i++) pa[i] = i;\n    sort(e.begin(), e.end());\n\n    int ans = MST(n, e, need);\n    for(int mask = 0; mask < (1<<q); mask++) {\n      // union cities in the same sub-network\n      for(int i = 0; i < n; i++) pa[i] = i;\n      int cnt = n, c = 0;\n      for(int i = 0; i < q; i++) if(mask & (1<<i)) {\n        c += cost[i];\n        for(int j = 1; j < subn[i].size(); j++) {\n          int u = findset(subn[i][j]), v = findset(subn[i][0]);\n          if(u != v) { pa[u] = v; cnt--; }\n        }\n      }\n      vector<Edge> dummy;\n      ans = min(ans, c + MST(cnt, need, dummy));\n    }\n    printf("%d\\n", ans);\n    if(T) printf("\\n");\n  }\n  return 0;\n}\n'