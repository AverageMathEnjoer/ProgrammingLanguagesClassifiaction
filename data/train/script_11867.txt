b"import           Control.Applicative\nimport           Control.Concurrent\nimport           Control.Monad\nimport           Control.Monad.Identity\nimport           Control.Monad.Trans.Reader\nimport           Control.Monad.Trans.Class\nimport           Control.Monad.Trans.MSF\nimport           Data.Maybe\nimport           Data.MonadicStreamFunction hiding (reactimate, switch, trace)\nimport qualified Data.MonadicStreamFunction as MSF\nimport           Debug.Trace\nimport           FRP.BearRiver\nimport           Graphics.UI.SDL            as SDL\nimport           Graphics.UI.SDL.Primitives as SDL\n\ntype Stream m b = SF m () b\ntype Signal a   = Stream IO a\n\nballInCirclesAroundMouse :: Signal (Int, Int)\nballInCirclesAroundMouse =\n  addPair <$> mousePos <*> ballInCircles\n\n-- Mouse position\nmousePos :: Signal (Int, Int)\nmousePos = arrM (\\() -> lift getMousePos)\n\n-- Ball going around in circles\nballInCircles :: Signal (Int, Int)\nballInCircles =\n  (\\(x,y) -> (round x, round y)) <$> ballInCirclesD\n\nballInCirclesD :: Signal (Double, Double)\nballInCirclesD =\n  (\\x -> (rad * cos x, rad * sin x)) <$> (/2) <$> time\n  where rad = 45 -- radius in pixels\n\n-- Auxiliary\naddPair :: Num a => (a,a) -> (a,a) -> (a,a)\naddPair (x1,x2) (y1,y2) = (x1+y1, x2+y2)\n\n-- Input\ngetMousePos :: IO (Int, Int)\ngetMousePos = do\n  pumpEvents\n  (x,y,btns) <- SDL.getMouseState\n  return (fromIntegral x, fromIntegral y)\n\nmain = do\n   SDL.init [InitEverything]\n   SDL.setVideoMode 800 600 32 [SWSurface]\n   reactimate' ballInCirclesAroundMouse\n\n-- Output\nrender (px,py) = do\n  screen <- SDL.getVideoSurface\n\n  white <- SDL.mapRGB (SDL.surfaceGetPixelFormat screen) 0xFF 0xFF 0xFF\n  SDL.fillRect screen Nothing white\n\n  SDL.filledCircle screen (fromIntegral px) (fromIntegral py) 30 (Pixel 0xFF0000FF)\n\n  SDL.flip screen\n\n  threadDelay 1000\n\nreactimate' :: Signal (Int, Int) -> IO ()\nreactimate' sf =\n  MSF.reactimate $ sense >>> sfIO >>> actuate\n where sfIO    = runReaderS sf\n       sense   = arr (const (0.2, ()))\n       actuate = arrM render\n"