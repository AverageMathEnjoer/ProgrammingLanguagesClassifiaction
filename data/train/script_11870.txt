b'{-# LANGUAGE StandaloneDeriving #-}\n{-# LANGUAGE DeriveAnyClass #-}\n{-# LANGUAGE RecordWildCards #-}\n{-# LANGUAGE PartialTypeSignatures #-}\n{-# LANGUAGE UndecidableInstances #-}\n{-# LANGUAGE OverloadedStrings #-}\n\n-- | This module contains a minimal example of how to use\n-- a custom data type (``ShippingCarrier`` in this example) in migration\n-- Other than the use of ``ShippingCarrier`` as a part of ``AddressT``,\n-- this is just a stripped down version of Pagila.Schema.V0001\nmodule Pagila.Schema.CustomMigrateExample where\n\nimport           Database.Beam\nimport           Database.Beam.Postgres\nimport           Database.Beam.Migrate\nimport           Database.Beam.Postgres.Migrate\nimport           Database.Beam.Backend.SQL\nimport           Database.Beam.Migrate.SQL.Types (TableFieldSchema(..), DataType(..))\nimport           Database.Beam.Backend.SQL.Types (SqlSerial)\n\nimport           Data.Int\nimport qualified Data.Text as T\nimport           Data.Time.LocalTime (LocalTime)\nimport           Database.PostgreSQL.Simple.FromField\nimport           Text.Read\n\ndata ShippingCarrier = USPS | FedEx | UPS | DHL\n  deriving (Show, Read, Eq, Ord, Enum)\n\ninstance HasSqlValueSyntax be String => HasSqlValueSyntax be ShippingCarrier where\n  sqlValueSyntax = autoSqlValueSyntax\ninstance (IsSql92ColumnSchemaSyntax be) => HasDefaultSqlDataTypeConstraints be ShippingCarrier\n\ninstance FromField ShippingCarrier where\n  fromField f bs = do\n    mCarrier <- readMaybe <$> fromField f bs\n    case mCarrier of\n      Nothing -> returnError ConversionFailed f "Could not \'read\' value for \'ShippingCarrier\'"\n      Just x -> pure x\n\n-- | An explicit definition of ``fromBackendRow`` is required for each custom type\ninstance (BeamBackend be, FromBackendRow be T.Text) => FromBackendRow be ShippingCarrier where\n  fromBackendRow = do\n    val <- fromBackendRow\n    case val :: T.Text of\n      "usps" -> pure USPS\n      "fedex" -> pure FedEx\n      "ups"  -> pure UPS\n      "dhl"  -> pure DHL\n      _ -> fail ("Invalid value for ShippingCarrier: " ++ T.unpack val)\n\n-- | The shipping carrier type that is used in migration\n-- In this case, we want to store it as the postgres type ``text``\n-- Look into the module Database.Beam.Postgres.Syntax for a list of other\n-- postgres types that your custom type can take\nshippingCarrierType :: DataType PgDataTypeSyntax ShippingCarrier\nshippingCarrierType = DataType pgTextType\n\n\n-- | Address table\ndata AddressT f\n  = AddressT\n  { addressId         :: Columnar f (SqlSerial Int32)\n  , addressAddress1   :: Columnar f T.Text\n  , addressAddress2   :: Columnar f (Maybe T.Text)\n  , addressDistrict   :: Columnar f T.Text\n  , addressShipper    :: Columnar f ShippingCarrier\n  , addressPostalCode :: Columnar f T.Text\n  , addressPhone      :: Columnar f T.Text\n  , addressLastUpdate :: Columnar f LocalTime\n  } deriving Generic\ntype Address = AddressT Identity\nderiving instance Show Address\nderiving instance Eq Address\n\ninstance Table AddressT where\n  data PrimaryKey AddressT f = AddressId (Columnar f (SqlSerial Int32)) deriving Generic\n  primaryKey = AddressId . addressId\ntype AddressId = PrimaryKey AddressT Identity\nderiving instance Show AddressId\nderiving instance Eq AddressId\n\n\n-- | Pagila db\ndata PagilaDb f\n  = PagilaDb\n  {\n    address    :: f (TableEntity AddressT)\n  } deriving Generic\ninstance Database PagilaDb\n\n-- Beamable instances\n\ninstance Beamable (PrimaryKey AddressT)\ninstance Beamable AddressT\n\nlastUpdateField :: TableFieldSchema PgColumnSchemaSyntax LocalTime\nlastUpdateField = field "last_update" timestamp (defaultTo_ now_) notNull\n\nmigration :: () -> Migration PgCommandSyntax (CheckedDatabaseSettings Postgres PagilaDb)\nmigration () = do\n--  year_ <- createDomain "year" integer (check (\\yr -> yr >=. 1901 &&. yr <=. 2155))\n  PagilaDb <$> createTable "address"\n                 (AddressT\n                    (field "address_id" smallserial)\n                    (field "address" (varchar (Just 50)) notNull)\n                    (field "address2" (maybeType $ varchar (Just 50)))\n                    (field "district" (varchar (Just 20)) notNull)\n                    (field "shipper" shippingCarrierType)\n                    (field "postal_code" (varchar (Just 10)))\n                    (field "phone" (varchar (Just 20)) notNull) lastUpdateField)\n'