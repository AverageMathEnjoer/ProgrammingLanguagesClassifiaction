b'/*\n    SPDX-FileCopyrightText: 2015-2017 Milian Wolff <mail@milianw.de>\n\n    SPDX-License-Identifier: LGPL-2.1-or-later\n*/\n\n#include "histogramwidget.h"\n\n#include <QSortFilterProxyModel>\n#include <QVBoxLayout>\n\n#include <KChartBarDiagram>\n#include <KChartChart>\n\n#include <KChartBackgroundAttributes>\n#include <KChartCartesianCoordinatePlane>\n#include <KChartDataValueAttributes>\n#include <KChartFrameAttributes.h>\n#include <KChartGridAttributes>\n#include <KChartHeaderFooter>\n#include <KChartLegend>\n\n#include <KColorScheme>\n#include <KLocalizedString>\n\n#include "histogrammodel.h"\n#include "util.h"\n\nusing namespace KChart;\n\nnamespace {\nclass SizeAxis : public CartesianAxis\n{\n    Q_OBJECT\npublic:\n    explicit SizeAxis(AbstractCartesianDiagram* diagram = nullptr)\n        : CartesianAxis(diagram)\n    {\n    }\n\n    const QString customizedLabel(const QString& label) const override\n    {\n        return Util::formatBytes(label.toLongLong());\n    }\n};\n\nclass HistogramProxy : public QSortFilterProxyModel\n{\n    Q_OBJECT\npublic:\n    explicit HistogramProxy(bool showTotal, QObject* parent = nullptr)\n        : QSortFilterProxyModel(parent)\n        , m_showTotal(showTotal)\n    {\n    }\n    virtual ~HistogramProxy() = default;\n\nprotected:\n    bool filterAcceptsColumn(int sourceColumn, const QModelIndex& /*sourceParent*/) const override\n    {\n        if (m_showTotal) {\n            return sourceColumn == 0;\n        } else {\n            return sourceColumn != 0;\n        }\n    }\n\nprivate:\n    bool m_showTotal;\n};\n}\n\nHistogramWidget::HistogramWidget(QWidget* parent)\n    : QWidget(parent)\n    , m_chart(new KChart::Chart(this))\n    , m_total(new BarDiagram(this))\n    , m_detailed(new BarDiagram(this))\n{\n    auto layout = new QVBoxLayout(this);\n    layout->addWidget(m_chart);\n    setLayout(layout);\n\n    auto* coordinatePlane = dynamic_cast<CartesianCoordinatePlane*>(m_chart->coordinatePlane());\n    Q_ASSERT(coordinatePlane);\n\n    {\n        m_total->setAntiAliasing(true);\n\n        KColorScheme scheme(QPalette::Active, KColorScheme::Window);\n        QPen foreground(scheme.foreground().color());\n        auto bottomAxis = new CartesianAxis(m_total);\n        auto axisTextAttributes = bottomAxis->textAttributes();\n        axisTextAttributes.setPen(foreground);\n        bottomAxis->setTextAttributes(axisTextAttributes);\n        auto axisTitleTextAttributes = bottomAxis->titleTextAttributes();\n        axisTitleTextAttributes.setPen(foreground);\n        bottomAxis->setTitleTextAttributes(axisTitleTextAttributes);\n        bottomAxis->setPosition(KChart::CartesianAxis::Bottom);\n        bottomAxis->setTitleText(i18n("Requested Allocation Size"));\n        m_total->addAxis(bottomAxis);\n\n        auto* rightAxis = new CartesianAxis(m_total);\n        rightAxis->setTextAttributes(axisTextAttributes);\n        rightAxis->setTitleTextAttributes(axisTitleTextAttributes);\n        rightAxis->setTitleText(i18n("Number of Allocations"));\n        rightAxis->setPosition(CartesianAxis::Right);\n        m_total->addAxis(rightAxis);\n\n        coordinatePlane->addDiagram(m_total);\n\n        m_total->setType(BarDiagram::Normal);\n    }\n\n    {\n        m_detailed->setAntiAliasing(true);\n\n        coordinatePlane->addDiagram(m_detailed);\n\n        m_detailed->setType(BarDiagram::Stacked);\n    }\n}\n\nHistogramWidget::~HistogramWidget() = default;\n\nvoid HistogramWidget::setModel(QAbstractItemModel* model)\n{\n    {\n        auto proxy = new HistogramProxy(true, this);\n        proxy->setSourceModel(model);\n        m_total->setModel(proxy);\n    }\n    {\n        auto proxy = new HistogramProxy(false, this);\n        proxy->setSourceModel(model);\n        m_detailed->setModel(proxy);\n    }\n}\n\n#include "histogramwidget.moc"\n'