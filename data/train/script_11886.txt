b'-- % cabal install hspec\n-- % runghc <this_file>\n\nimport Small\n\nmain :: IO ()\nmain = hspec $ do\n    describe "my_gcd" $\n      prop "behaves as model" $ \\(Small m) (Small n) -> m >= 2 && n >= 2\n        ==> if m >= n then\n                my_gcd m n == gcd m n\n            else\n                my_gcd n m == gcd n m\n    describe "my_gcd_fast" $\n      prop "behaves as model" $ \\(Small m) (Small n) -> m >= 2 && n >= 2\n        ==> my_gcd_fast m n == gcd m n\n    describe "my_lcm_fast" $\n      prop "behaves as model" $ \\(Small m) (Small n) -> m >= 2 && n >= 2\n        ==> my_lcm_fast m n == lcm m n\n    describe "my_power" $\n      prop "behaves as model" $ \\(Small m) (Small n) -> m >= 1 && n >= 0\n        ==> my_power m n == m ^ n\n    describe "my_power_iter" $\n      prop "behaves as model" $ \\(Small m) (Small n) -> m >= 1 && n >= 0\n        ==> my_power_iter m n == m ^ n\n    describe "my_power_fast" $\n      prop "behaves as model" $ \\(Small m) (Small n) -> m >= 1 && n >= 0\n        ==> my_power_fast m n == m ^ n\n    describe "my_power_fast_iter" $\n      prop "behaves as model" $ \\(Small m) (Small n) -> m >= 1 && n >= 0\n        ==> my_power_fast_iter m n == m ^ n\n    describe "my_fib" $\n      prop "behaves as model" $ \\(Small n) -> n >= 0\n        ==> my_fib n == fibModel n\n    describe "my_fib_iter" $\n      prop "behaves as model" $ \\(Small n) -> n >= 0\n        ==> my_fib_iter n == fibModel n\n    describe "my_even_m" $\n      prop "behaves as model" $ \\(Small n) -> n >= 0\n        ==> my_even_m n == even n\n    describe "my_odd_m" $\n      prop "behaves as model" $ \\(Small n) -> n >= 0\n        ==> my_odd_m n == odd n\n    describe "my_even_m2" $\n      prop "behaves as model" $ \\(Small n) -> n >= 0\n        ==> my_even_m2 n == even n\n    describe "my_odd_m2" $\n      prop "behaves as model" $ \\(Small n) -> n >= 0\n        ==> my_odd_m2 n == odd n\n\n----------------------------------------------------------------\n\nmy_gcd :: Integer -> Integer -> Integer\nmy_gcd a 0 = a\nmy_gcd a b\n  | c >= b    = my_gcd c b\n  | otherwise = my_gcd b c\n  where\n    c = a - b\n\nmy_gcd_fast :: Integer -> Integer -> Integer\nmy_gcd_fast = undefined\n\nmy_lcm_fast :: Integer -> Integer -> Integer\nmy_lcm_fast = undefined\n\n----------------------------------------------------------------\n\nmy_power :: Integer -> Integer -> Integer\nmy_power _ 0 = 1\nmy_power m n = my_power m (n - 1) * m\n\nmy_power_fast :: Integer -> Integer -> Integer\nmy_power_fast _ 0 = 1\nmy_power_fast m n\n  | odd n     = my_power_fast undefined undefined * m\n  | otherwise = my_power_fast undefined undefined\n\nmy_power_iter :: Integer -> Integer -> Integer\nmy_power_iter x y = iter x y 1\n  where\n    iter :: Integer -> Integer -> Integer -> Integer\n    iter _ 0 acc = acc\n    iter m n acc = iter m (n - 1) (acc * m)\n\nmy_power_fast_iter :: Integer -> Integer -> Integer\nmy_power_fast_iter x y = iter x y 1\n  where\n    iter :: Integer -> Integer -> Integer -> Integer\n    iter _ 0 acc = acc\n    iter m n acc\n      | odd n     = iter undefined undefined undefined\n      | otherwise = iter undefined undefined undefined\n\n----------------------------------------------------------------\n\nmy_fib :: Integer -> Integer\nmy_fib 0 = 0\nmy_fib 1 = 1\nmy_fib n = my_fib (n - 2) + my_fib (n - 1)\n\nmy_fib_iter :: Integer -> Integer\nmy_fib_iter a = iter a 0 1\n  where\n    iter :: Integer -> Integer -> Integer -> Integer\n    iter 0 x _ = x\n    iter n x y = iter undefined undefined undefined\n\nfibModel :: Integer -> Integer\nfibModel n = fibs !! fromInteger n\n\nfibs :: [Integer]\nfibs = 0 : 1 : zipWith (+) fibs (tail fibs)\n\n----------------------------------------------------------------\n\nmy_even_m :: Integer -> Bool\nmy_even_m 0 = True\nmy_even_m n = my_odd_m (n - 1)\n\nmy_odd_m :: Integer -> Bool\nmy_odd_m 0 = False\nmy_odd_m n = my_even_m (n - 1)\n\n----------------------------------------------------------------\n\nmy_even_m2 :: Integer -> Bool\nmy_even_m2 0 = True\nmy_even_m2 n = undefined\n\nmy_odd_m2 :: Integer -> Bool\nmy_odd_m2 1 = True\nmy_odd_m2 n = undefined\n'