b'let website = "/TryFSharp.Formatting"\nlet info =\n  [ "project-name", "Tutorial: Functional Reactive Programming in F# and WPF"\n    "project-author", "Stephen Elliott"\n    "project-summary", "Trying to use FSharp.Formatting"\n    "project-github", "https://github.com/yukitos/notes/tree/master/Try_Tutorial_FRP_in_FS_and_WPF"]\n\n#I "packages/FSharp.Formatting.2.4.1/lib/net40"\n#I "packages/RazorEngine.3.3.0/lib/net40"\n#I "packages/FSharp.Compiler.Service.0.0.36/lib/net40"\n\n#r "RazorEngine.dll"\n#r "FSharp.Compiler.Service.dll"\n#r "FSharp.Literate.dll"\n#r "FSharp.CodeFormat.dll"\n#r "FSharp.MetadataFormat.dll"\n\nopen System.IO\nopen FSharp.Literate\nopen FSharp.MetadataFormat\n\nlet (@@) path1 path2 =\n    Path.Combine(path1, path2)\n\n#if RELEASE\nlet root = website\n#else\nlet root = "file://" + (__SOURCE_DIRECTORY__ @@ "output")\n#endif\n\nlet content     = __SOURCE_DIRECTORY__ @@ "docs"\nlet output      = __SOURCE_DIRECTORY__ @@ "output"\nlet templates   = __SOURCE_DIRECTORY__ @@ "templates"\nlet formatting  = __SOURCE_DIRECTORY__ @@ "packages/FSharp.Formatting.2.4.1/"\nlet docTemplate = formatting @@ "templates/docpage.cshtml"\n\nlet layoutRoots =\n  [ templates\n    formatting @@ "templates"\n    formatting @@ "templates/reference" ]\n\nlet buildDocumentation () =\n    let subdirs = Directory.EnumerateDirectories(content, "*", SearchOption.AllDirectories)\n    for dir in Seq.append [content] subdirs do\n        let sub = if dir.Length > content.Length then dir.Substring(content.Length + 1) else "."\n        Literate.ProcessDirectory\n            ( dir, docTemplate, output @@ sub, replacements = ("root", root)::info,\n              layoutRoots = layoutRoots )\n\nbuildDocumentation()\n'