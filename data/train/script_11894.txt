b'package com.rd.utils;\n\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\nimport android.util.Pair;\nimport com.rd.animation.type.AnimationType;\nimport com.rd.draw.data.Indicator;\nimport com.rd.draw.data.Orientation;\n\npublic class CoordinatesUtils {\n\n\t@SuppressWarnings("UnnecessaryLocalVariable")\n\tpublic static int getCoordinate(@Nullable Indicator indicator, int position) {\n\t\tif (indicator == null) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tif (indicator.getOrientation() == Orientation.HORIZONTAL) {\n\t\t\treturn getXCoordinate(indicator, position);\n\t\t} else {\n\t\t\treturn getYCoordinate(indicator, position);\n\t\t}\n\t}\n\n\t@SuppressWarnings("UnnecessaryLocalVariable")\n\tpublic static int getXCoordinate(@Nullable Indicator indicator, int position) {\n\t\tif (indicator == null) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tint coordinate;\n\t\tif (indicator.getOrientation() == Orientation.HORIZONTAL) {\n\t\t\tcoordinate = getHorizontalCoordinate(indicator, position);\n\t\t} else {\n\t\t\tcoordinate = getVerticalCoordinate(indicator);\n\t\t}\n\n\t\tcoordinate += indicator.getPaddingLeft();\n\t\treturn coordinate;\n\t}\n\n\tpublic static int getYCoordinate(@Nullable Indicator indicator, int position) {\n\t\tif (indicator == null) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tint coordinate;\n\t\tif (indicator.getOrientation() == Orientation.HORIZONTAL) {\n\t\t\tcoordinate = getVerticalCoordinate(indicator);\n\t\t} else {\n\t\t\tcoordinate = getHorizontalCoordinate(indicator, position);\n\t\t}\n\n\t\tcoordinate += indicator.getPaddingTop();\n\t\treturn coordinate;\n\t}\n\n\t@SuppressWarnings("SuspiciousNameCombination")\n\tpublic static int getPosition(@Nullable Indicator indicator, float x, float y) {\n\t\tif (indicator == null) {\n\t\t\treturn -1;\n\t\t}\n\n\t\tfloat lengthCoordinate;\n\t\tfloat heightCoordinate;\n\n\t\tif (indicator.getOrientation() == Orientation.HORIZONTAL) {\n\t\t\tlengthCoordinate = x;\n\t\t\theightCoordinate = y;\n\t\t} else {\n\t\t\tlengthCoordinate = y;\n\t\t\theightCoordinate = x;\n\t\t}\n\n\t\treturn getFitPosition(indicator, lengthCoordinate, heightCoordinate);\n\t}\n\n\tprivate static int getFitPosition(@NonNull Indicator indicator, float lengthCoordinate, float heightCoordinate) {\n\t\tint count = indicator.getCount();\n\t\tint radius = indicator.getRadius();\n\t\tint stroke = indicator.getStroke();\n\t\tint padding = indicator.getPadding();\n\n\t\tint height = indicator.getOrientation() == Orientation.HORIZONTAL ? indicator.getHeight() : indicator.getWidth();\n\t\tint length = 0;\n\n\t\tfor (int i = 0; i < count; i++) {\n\t\t\tint indicatorPadding = i > 0 ? padding : padding / 2;\n\t\t\tint startValue = length;\n\n\t\t\tlength += radius * 2 + (stroke / 2) + indicatorPadding;\n\t\t\tint endValue = length;\n\n\t\t\tboolean fitLength = lengthCoordinate >= startValue && lengthCoordinate <= endValue;\n\t\t\tboolean fitHeight = heightCoordinate >= 0 && heightCoordinate <= height;\n\n\t\t\tif (fitLength && fitHeight) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\n\t\treturn -1;\n\t}\n\n\tprivate static int getHorizontalCoordinate(@NonNull Indicator indicator, int position) {\n\t\tint count = indicator.getCount();\n\t\tint radius = indicator.getRadius();\n\t\tint stroke = indicator.getStroke();\n\t\tint padding = indicator.getPadding();\n\n\t\tint coordinate = 0;\n\t\tfor (int i = 0; i < count; i++) {\n\t\t\tcoordinate += radius + (stroke / 2);\n\n\t\t\tif (position == i) {\n\t\t\t\treturn coordinate;\n\t\t\t}\n\n\t\t\tcoordinate += radius + padding + (stroke / 2);\n\t\t}\n\n\t\tif (indicator.getAnimationType() == AnimationType.DROP) {\n\t\t\tcoordinate += radius * 2;\n\t\t}\n\n\t\treturn coordinate;\n\t}\n\n\tprivate static int getVerticalCoordinate(@NonNull Indicator indicator) {\n\t\tint radius = indicator.getRadius();\n\t\tint coordinate;\n\n\t\tif (indicator.getAnimationType() == AnimationType.DROP) {\n\t\t\tcoordinate = radius * 3;\n\t\t} else {\n\t\t\tcoordinate = radius;\n\t\t}\n\n\t\treturn coordinate;\n\t}\n\n\tpublic static Pair<Integer, Float> getProgress(@NonNull Indicator indicator, int position, float positionOffset, boolean isRtl) {\n\t\tint count = indicator.getCount();\n\t\tint selectedPosition = indicator.getSelectedPosition();\n\n\t\tif (isRtl) {\n\t\t\tposition = (count - 1) - position;\n\t\t}\n\n\t\tif (position < 0) {\n\t\t\tposition = 0;\n\n\t\t} else if (position > count - 1) {\n\t\t\tposition = count - 1;\n\t\t}\n\n\t\tboolean isRightOverScrolled = position > selectedPosition;\n\t\tboolean isLeftOverScrolled;\n\n\t\tif (isRtl) {\n\t\t\tisLeftOverScrolled = position - 1 < selectedPosition;\n\t\t} else {\n\t\t\tisLeftOverScrolled = position + 1 < selectedPosition;\n\t\t}\n\n\t\tif (isRightOverScrolled || isLeftOverScrolled) {\n\t\t\tselectedPosition = position;\n\t\t\tindicator.setSelectedPosition(selectedPosition);\n\t\t}\n\n\t\tboolean slideToRightSide = selectedPosition == position && positionOffset != 0;\n\t\tint selectingPosition;\n\t\tfloat selectingProgress;\n\n\t\tif (slideToRightSide) {\n\t\t\tselectingPosition = isRtl ? position - 1 : position + 1;\n\t\t\tselectingProgress = positionOffset;\n\n\t\t} else {\n\t\t\tselectingPosition = position;\n\t\t\tselectingProgress = 1 - positionOffset;\n\t\t}\n\n\t\tif (selectingProgress > 1) {\n\t\t\tselectingProgress = 1;\n\n\t\t} else if (selectingProgress < 0) {\n\t\t\tselectingProgress = 0;\n\t\t}\n\n\t\treturn new Pair<>(selectingPosition, selectingProgress);\n\t}\n}\n'