b'{-# LANGUAGE StandaloneDeriving #-}\n{-# LANGUAGE DeriveAnyClass #-}\n{-# LANGUAGE RecordWildCards #-}\n{-# LANGUAGE PartialTypeSignatures #-}\n{-# OPTIONS_GHC -fglasgow-exts #-}\n\nmodule Pagila.Schema.V0002\n  ( module V0001\'\n  , FilmActorT(..), FilmActor\n  , PrimaryKey(..), FilmActorId\n\n  , migration, PagilaDb\n  ) where\n\nimport qualified Pagila.Schema.V0001 as V0001\nimport qualified Pagila.Schema.V0001 as V0001\' hiding (PagilaDb, migration)\n\nimport Database.Beam\nimport Database.Beam.Postgres\nimport Database.Beam.Postgres (PgSyntax(..))\nimport Database.Beam.Postgres.Migrate\nimport Database.Beam.Migrate.Types hiding (migrateScript)\nimport Database.Beam.Migrate.SQL.Tables\nimport Database.Beam.Migrate.SQL.Types\n\nimport qualified Database.PostgreSQL.Simple as Pg\n\nimport qualified Control.Exception as E\n\nimport Data.Text (Text)\nimport Data.ByteString (ByteString)\nimport qualified Data.ByteString.Lazy as BL\nimport Data.Time.LocalTime (LocalTime)\nimport Data.Scientific (Scientific)\n\n-- film actor\n\ndata FilmActorT f\n  = FilmActorT\n  { filmActorFilm :: PrimaryKey V0001.FilmT f\n  , filmActorActor :: PrimaryKey V0001.ActorT f\n  , filmCategoryLastUpdate :: Columnar f LocalTime\n  } deriving Generic\ntype FilmActor = FilmActorT Identity\nderiving instance Eq FilmActor; deriving instance Show FilmActor\n\ninstance Table FilmActorT where\n  data PrimaryKey FilmActorT f = FilmActorId (PrimaryKey V0001.ActorT f) (PrimaryKey V0001.FilmT f)\n    deriving Generic\n  primaryKey fa = FilmActorId (filmActorActor fa) (filmActorFilm fa)\ntype FilmActorId = PrimaryKey FilmActorT Identity\nderiving instance Eq FilmActorId; deriving instance Show FilmActorId\n\n-- Pagila db\n\ninstance Beamable FilmActorT\ninstance Beamable (PrimaryKey FilmActorT)\n\ndata PagilaDb f\n  = PagilaDb\n  { actor      :: f (TableEntity V0001.ActorT)\n  , address    :: f (TableEntity V0001.AddressT)\n  , city       :: f (TableEntity V0001.CityT)\n  , country    :: f (TableEntity V0001.CountryT)\n  , category   :: f (TableEntity V0001.CategoryT)\n  , customer   :: f (TableEntity V0001.CustomerT)\n  , film       :: f (TableEntity V0001.FilmT)\n  , filmCategory :: f (TableEntity V0001.FilmCategoryT)\n  , filmActor  :: f (TableEntity FilmActorT)\n  , language   :: f (TableEntity V0001.LanguageT)\n  , store      :: f (TableEntity V0001.StoreT)\n  , staff      :: f (TableEntity V0001.StaffT)\n  } deriving Generic\ninstance Database Postgres PagilaDb\n\nmigration :: CheckedDatabaseSettings Postgres V0001.PagilaDb\n          -> Migration PgCommandSyntax (CheckedDatabaseSettings Postgres PagilaDb)\nmigration oldDb =\n  PagilaDb\n    <$> preserve (V0001.actor oldDb)\n    <*> preserve (V0001.address oldDb)\n    <*> preserve (V0001.city oldDb)\n    <*> preserve (V0001.country oldDb)\n    <*> preserve (V0001.category oldDb)\n    <*> preserve (V0001.customer oldDb)\n    <*> preserve (V0001.film oldDb)\n    <*> preserve (V0001.filmCategory oldDb)\n    <*> createTable "film_actor"\n          (FilmActorT (V0001.FilmId (field "film_id" smallint notNull))\n                                    (V0001.ActorId (field "actor_id" smallint notNull))\n                                    V0001.lastUpdateField)\n    <*> preserve (V0001.language oldDb)\n    <*> preserve (V0001.store oldDb)\n    <*> preserve (V0001.staff oldDb)\n'