b'package com.quyunshuo.androidbaseframemvvm.base.ktx\n\nimport android.animation.Animator\nimport android.animation.IntEvaluator\nimport android.animation.ValueAnimator\nimport android.view.View\nimport android.view.ViewGroup\nimport com.quyunshuo.androidbaseframemvvm.base.view.OnSingleClickListener\n\n/**\n * @Author: QuYunShuo\n * @Time: 2020/9/1\n * @Class: ViewKtx\n * @Remark: View\xe7\x9b\xb8\xe5\x85\xb3\xe7\x9a\x84\xe6\x89\xa9\xe5\xb1\x95\xe6\x96\xb9\xe6\xb3\x95\n */\n\n/*************************************** View\xe5\x8f\xaf\xe8\xa7\x81\xe6\x80\xa7\xe7\x9b\xb8\xe5\x85\xb3 ********************************************/\n/**\n * \xe9\x9a\x90\xe8\x97\x8fView\n * @receiver View\n */\nfun View.gone() {\n    visibility = View.GONE\n}\n\n/**\n * \xe6\x98\xbe\xe7\xa4\xbaView\n * @receiver View\n */\nfun View.visible() {\n    visibility = View.VISIBLE\n}\n\n/**\n * View\xe4\xb8\x8d\xe5\x8f\xaf\xe8\xa7\x81\xe4\xbd\x86\xe5\xad\x98\xe5\x9c\xa8\xe5\x8e\x9f\xe4\xbd\x8d\xe7\xbd\xae\n * @receiver View\n */\nfun View.invisible() {\n    visibility = View.INVISIBLE\n}\n\n/**\n * \xe8\xae\xbe\xe7\xbd\xae View \xe4\xb8\xba [View.VISIBLE]\n * \xe5\xa6\x82\xe6\x9e\x9c [isVisible] \xe5\x80\xbc\xe4\xb8\xbatrue\xef\xbc\x8c\xe5\xb0\x86 [View.setVisibility] \xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xba [View.VISIBLE],\xe5\x8f\x8d\xe4\xb9\x8b\xe4\xb8\xba [View.GONE]\n *\n * @receiver View\n * @param isVisible Boolean \xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xbe\xe7\xa4\xba\n */\nfun View.setVisible(isVisible: Boolean) {\n    if (isVisible) visible() else gone()\n}\n\n/**\n * \xe8\xae\xbe\xe7\xbd\xae View \xe4\xb8\xba [View.GONE]\n * \xe5\xa6\x82\xe6\x9e\x9c [isGone] \xe5\x80\xbc\xe4\xb8\xbatrue\xef\xbc\x8c\xe5\xb0\x86 [View.setVisibility] \xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xba [View.GONE],\xe5\x8f\x8d\xe4\xb9\x8b\xe4\xb8\xba [View.VISIBLE]\n *\n * @receiver View\n * @param isGone Boolean \xe6\x98\xaf\xe5\x90\xa6\xe9\x9a\x90\xe8\x97\x8f\n */\nfun View.setGone(isGone: Boolean) {\n    if (isGone) visible() else gone()\n}\n\n/*************************************** View\xe5\xae\xbd\xe9\xab\x98\xe7\x9b\xb8\xe5\x85\xb3 ********************************************/\n/**\n * \xe8\xae\xbe\xe7\xbd\xae View \xe7\x9a\x84\xe9\xab\x98\xe5\xba\xa6\n * @receiver View\n * @param height Int \xe7\x9b\xae\xe6\xa0\x87\xe9\xab\x98\xe5\xba\xa6\n * @return View\n */\nfun View.height(height: Int): View {\n    val params = layoutParams ?: ViewGroup.LayoutParams(\n        ViewGroup.LayoutParams.MATCH_PARENT,\n        ViewGroup.LayoutParams.WRAP_CONTENT\n    )\n    params.height = height\n    layoutParams = params\n    return this\n}\n\n/**\n * \xe8\xae\xbe\xe7\xbd\xaeView\xe7\x9a\x84\xe5\xae\xbd\xe5\xba\xa6\n * @receiver View\n * @param width Int \xe7\x9b\xae\xe6\xa0\x87\xe5\xae\xbd\xe5\xba\xa6\n * @return View\n */\nfun View.width(width: Int): View {\n    val params = layoutParams ?: ViewGroup.LayoutParams(\n        ViewGroup.LayoutParams.MATCH_PARENT,\n        ViewGroup.LayoutParams.WRAP_CONTENT\n    )\n    params.width = width\n    layoutParams = params\n    return this\n}\n\n/**\n * \xe8\xae\xbe\xe7\xbd\xaeView\xe7\x9a\x84\xe5\xae\xbd\xe5\xba\xa6\xe5\x92\x8c\xe9\xab\x98\xe5\xba\xa6\n * @receiver View\n * @param width Int \xe8\xa6\x81\xe8\xae\xbe\xe7\xbd\xae\xe7\x9a\x84\xe5\xae\xbd\xe5\xba\xa6\n * @param height Int \xe8\xa6\x81\xe8\xae\xbe\xe7\xbd\xae\xe7\x9a\x84\xe9\xab\x98\xe5\xba\xa6\n * @return View\n */\nfun View.widthAndHeight(width: Int, height: Int): View {\n    val params = layoutParams ?: ViewGroup.LayoutParams(\n        ViewGroup.LayoutParams.MATCH_PARENT,\n        ViewGroup.LayoutParams.WRAP_CONTENT\n    )\n    params.width = width\n    params.height = height\n    layoutParams = params\n    return this\n}\n\n/**\n * \xe8\xae\xbe\xe7\xbd\xae\xe5\xae\xbd\xe5\xba\xa6\xef\xbc\x8c\xe5\xb8\xa6\xe6\x9c\x89\xe8\xbf\x87\xe6\xb8\xa1\xe5\x8a\xa8\xe7\x94\xbb\n * @param targetValue \xe7\x9b\xae\xe6\xa0\x87\xe5\xae\xbd\xe5\xba\xa6\n * @param duration \xe6\x97\xb6\xe9\x95\xbf\n * @param action \xe5\x8f\xaf\xe9\x80\x89\xe8\xa1\x8c\xe4\xb8\xba\n * @return \xe5\x8a\xa8\xe7\x94\xbb\n */\nfun View.animateWidth(\n    targetValue: Int, duration: Long = 400, listener: Animator.AnimatorListener? = null,\n    action: ((Float) -> Unit)? = null\n): ValueAnimator? {\n    var animator: ValueAnimator? = null\n    post {\n        animator = ValueAnimator.ofInt(width, targetValue).apply {\n            addUpdateListener {\n                width(it.animatedValue as Int)\n                action?.invoke((it.animatedFraction))\n            }\n            if (listener != null) addListener(listener)\n            setDuration(duration)\n            start()\n        }\n    }\n    return animator\n}\n\n/**\n * \xe8\xae\xbe\xe7\xbd\xae\xe9\xab\x98\xe5\xba\xa6\xef\xbc\x8c\xe5\xb8\xa6\xe6\x9c\x89\xe8\xbf\x87\xe6\xb8\xa1\xe5\x8a\xa8\xe7\x94\xbb\n * @param targetValue \xe7\x9b\xae\xe6\xa0\x87\xe9\xab\x98\xe5\xba\xa6\n * @param duration \xe6\x97\xb6\xe9\x95\xbf\n * @param action \xe5\x8f\xaf\xe9\x80\x89\xe8\xa1\x8c\xe4\xb8\xba\n * @return \xe5\x8a\xa8\xe7\x94\xbb\n */\nfun View.animateHeight(\n    targetValue: Int,\n    duration: Long = 400,\n    listener: Animator.AnimatorListener? = null,\n    action: ((Float) -> Unit)? = null\n): ValueAnimator? {\n    var animator: ValueAnimator? = null\n    post {\n        animator = ValueAnimator.ofInt(height, targetValue).apply {\n            addUpdateListener {\n                height(it.animatedValue as Int)\n                action?.invoke((it.animatedFraction))\n            }\n            if (listener != null) addListener(listener)\n            setDuration(duration)\n            start()\n        }\n    }\n    return animator\n}\n\n/**\n * \xe8\xae\xbe\xe7\xbd\xae\xe5\xae\xbd\xe5\xba\xa6\xe5\x92\x8c\xe9\xab\x98\xe5\xba\xa6\xef\xbc\x8c\xe5\xb8\xa6\xe6\x9c\x89\xe8\xbf\x87\xe6\xb8\xa1\xe5\x8a\xa8\xe7\x94\xbb\n * @param targetWidth \xe7\x9b\xae\xe6\xa0\x87\xe5\xae\xbd\xe5\xba\xa6\n * @param targetHeight \xe7\x9b\xae\xe6\xa0\x87\xe9\xab\x98\xe5\xba\xa6\n * @param duration \xe6\x97\xb6\xe9\x95\xbf\n * @param action \xe5\x8f\xaf\xe9\x80\x89\xe8\xa1\x8c\xe4\xb8\xba\n * @return \xe5\x8a\xa8\xe7\x94\xbb\n */\nfun View.animateWidthAndHeight(\n    targetWidth: Int,\n    targetHeight: Int,\n    duration: Long = 400,\n    listener: Animator.AnimatorListener? = null,\n    action: ((Float) -> Unit)? = null\n): ValueAnimator? {\n    var animator: ValueAnimator? = null\n    post {\n        val startHeight = height\n        val evaluator = IntEvaluator()\n        animator = ValueAnimator.ofInt(width, targetWidth).apply {\n            addUpdateListener {\n                widthAndHeight(\n                    it.animatedValue as Int,\n                    evaluator.evaluate(it.animatedFraction, startHeight, targetHeight)\n                )\n                action?.invoke((it.animatedFraction))\n            }\n            if (listener != null) addListener(listener)\n            setDuration(duration)\n            start()\n        }\n    }\n    return animator\n}\n\n/*************************************** View\xe5\x85\xb6\xe4\xbb\x96 ********************************************/\n/**\n * \xe8\x8e\xb7\xe5\x8f\x96View id\n */\nfun View.getViewId(): Int {\n    var id = id\n    if (id == View.NO_ID) {\n        id = View.generateViewId()\n    }\n    return id\n}\n\n/**\n * \xe7\xbb\x99 [View] \xe8\xae\xbe\xe7\xbd\xae\xe5\xb8\xa6\xe6\x9c\x89\xe9\x98\xb2\xe6\x8a\x96\xe6\x95\x88\xe6\x9e\x9c\xe7\x9a\x84\xe7\x82\xb9\xe5\x87\xbb\xe4\xba\x8b\xe4\xbb\xb6\n *\n * @receiver [View]\n * @param delayTime Int \xe9\x98\xb2\xe6\x8a\x96\xe9\x97\xb4\xe9\x9a\x94\xe6\x97\xb6\xe9\x97\xb4\xef\xbc\x8c\xe5\x8d\x95\xe4\xbd\x8d\xe6\x98\xaf\xe6\xaf\xab\xe7\xa7\x92\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe5\x80\xbc 500ms\n * @param listener (v: View) -> Unit \xe5\x85\xb7\xe4\xbd\x93\xe7\x9a\x84\xe7\x82\xb9\xe5\x87\xbb\xe4\xba\x8b\xe4\xbb\xb6\n * @see OnSingleClickListener\n */\nfun View.setOnSingleClickListener(delayTime: Int = 500, listener: (v: View) -> Unit) {\n    setOnClickListener(OnSingleClickListener(delayTime, listener))\n}'