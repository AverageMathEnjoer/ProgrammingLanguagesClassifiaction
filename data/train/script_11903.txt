b'{-# LANGUAGE ForeignFunctionInterface #-}\n{-# LANGUAGE NumericUnderscores #-}\n{-# OPTIONS_GHC -w #-}\n\nmodule Main where\n\nimport Control.Concurrent (forkIO, threadDelay)\nimport Control.Monad (forever)\nimport Control.Monad.IO.Class (liftIO)\nimport Data.Foldable (for_)\nimport Debug.Trace (flushEventLog, traceEventIO)\nimport Foreign.Ptr (FunPtr)\nimport GHC.Eventlog.Socket (startWait)\n\nforeign import ccall safe "cbit.h callTest" c_callTest :: IO ()\n\ntype SimpleIO = IO ()\n\nforeign import ccall "wrapper" mkWrapper :: SimpleIO -> IO (FunPtr SimpleIO)\n\nforeign import ccall safe "cbit.h callTest2" c_callTest2 :: FunPtr SimpleIO -> IO ()\n\nsimpleAction :: IO ()\nsimpleAction =\n  putStrLn "I am in simple action!"\n\nmain :: IO ()\nmain = do\n  startWait "/tmp/eventlog.sock"\n  wSimpleAction <- mkWrapper simpleAction\n  forkIO $\n    forever $ do\n      threadDelay 1_000_000\n      flushEventLog\n  forever $ do\n    threadDelay 5_000_000\n    putStrLn "am i here"\n    for_ [1 .. 10_000] $ \\_ ->\n      c_callTest2 wSimpleAction\n'