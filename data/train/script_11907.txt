b"module Database.Beam.Query.Extract\n    ( -- * SQL @EXTRACT@ support\n\n      ExtractField(..),\n\n      extract_,\n\n      -- ** SQL92 fields\n      hour_, minutes_, seconds_,\n      year_, month_, day_,\n\n      HasSqlTime, HasSqlDate\n    ) where\n\nimport Database.Beam.Query.Internal ( QGenExpr(..) )\n\nimport Database.Beam.Backend.SQL ( BeamSqlBackend, BeamSqlBackendSyntax )\nimport Database.Beam.Backend.SQL.SQL92 ( Sql92ExtractFieldSyntax\n                                       , IsSql92ExpressionSyntax(..)\n                                       , IsSql92ExtractFieldSyntax(..) )\n\nimport Data.Time (LocalTime, UTCTime, TimeOfDay, Day)\n\n-- | A field that can be extracted from SQL expressions of type 'tgt'\n-- that results in a type 'a', in backend 'be'.\nnewtype ExtractField be tgt a\n    = ExtractField (Sql92ExtractFieldSyntax (BeamSqlBackendSyntax be))\n\n-- | Extracts the given field from the target expression\nextract_ :: BeamSqlBackend be\n         => ExtractField be tgt a -> QGenExpr ctxt be s tgt -> QGenExpr cxt be s a\nextract_ (ExtractField field) (QExpr expr) =\n    QExpr (extractE field <$> expr)\n\n-- | Type-class for types that contain a time component\nclass HasSqlTime tgt\ninstance HasSqlTime LocalTime\ninstance HasSqlTime UTCTime\ninstance HasSqlTime TimeOfDay\n\n-- | Extracts the hours, minutes, or seconds from any timestamp or\n-- time field\nhour_, minutes_, seconds_\n    :: ( BeamSqlBackend be, HasSqlTime tgt )\n    => ExtractField be tgt Double\nhour_    = ExtractField hourField\nminutes_ = ExtractField minutesField\nseconds_ = ExtractField secondsField\n\n-- | Type-class for types that contain a date component\nclass HasSqlDate tgt\ninstance HasSqlDate LocalTime\ninstance HasSqlDate UTCTime\ninstance HasSqlDate Day\n\nyear_, month_, day_\n    :: ( BeamSqlBackend be, HasSqlDate tgt )\n    => ExtractField be tgt Double\nyear_  = ExtractField yearField\nmonth_ = ExtractField monthField\nday_   = ExtractField dayField\n"