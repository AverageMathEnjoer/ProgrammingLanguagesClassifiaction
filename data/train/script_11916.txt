b"\n-- | INTERNAL module.\n-- \n-- ILists are lists whose cdr fields are IVars, filled in\n-- asynchronously via Par computation.  This module mostly exists as a\n-- datatype to use in building other, higher-level abstractions.  (See\n-- OpenList and Stream.)\n\nmodule Control.Monad.Par.IList \n (\n   IList(..)\n )\nwhere\n\nimport Control.Monad.Par\nimport Control.DeepSeq\n\n-- | An 'IList' is the equivalent of a lazy list in the 'Par' monad.\n-- The tail of the list is an 'IVar', which allows the list to be\n-- produced and consumed in parallel.\ndata IList a = Null | Cons { hd :: a, tl :: IVar (IList a) }\n\n-- | To fully evaluate an 'IList' means to evaluate both the head\n-- and tail.  This does not evaluate the entire spine of the list\n-- of course, because the tail is an 'IVar'.\ninstance NFData a => NFData (IList a) where\n--  rnf Null = r0\n  rnf Null = ()\n  rnf (Cons a b) = rnf a `seq` rnf b\n"