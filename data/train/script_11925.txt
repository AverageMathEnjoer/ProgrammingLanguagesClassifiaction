b'\xef\xbb\xbfnamespace RonSijm.ButtFish;\n\npublic static class EngineSelector\n{\n    public static (string Name, string Path) SelectEngine(Dictionary<string, string> engines)\n    {\n        var locatedEngines = LocateViableEngines(engines);\n\n        if (!locatedEngines.Any())\n        {\n            ShowNoViableEnginesWarning(engines);\n\n            return (null, null);\n        }\n\n        if (locatedEngines.Count == 1)\n        {\n            var engineToUse = locatedEngines.First();\n\n            return engineToUse;\n        }\n\n        Console.WriteLine($"Located {locatedEngines.Count} Engines.");\n\n        do\n        {\n            Console.WriteLine("Which one do you want to use?");\n\n            for (var index = 0; index < locatedEngines.Count; index++)\n            {\n                var locatedEngine = locatedEngines[index];\n                Console.WriteLine($"{index + 1}: {locatedEngine.Name}");\n            }\n\n            var usageChoice = Console.ReadKey().KeyChar;\n            var validChoiceResult = int.TryParse(usageChoice.ToString(), out var selectedIndex);\n\n            if (!validChoiceResult || selectedIndex > locatedEngines.Count)\n            {\n                Console.WriteLine($"{usageChoice} is not a valid option.");\n            }\n            else\n            {\n                return locatedEngines[selectedIndex - 1];\n            }\n        }\n        while (true);\n    }\n\n    private static void ShowNoViableEnginesWarning(Dictionary<string, string> engines)\n    {\n        Console.WriteLine("UCIEngine is missing");\n\n        var startupPath = Environment.CurrentDirectory;\n\n        foreach (var optionsEngine in engines)\n        {\n            Console.WriteLine($"Expected Executable for {optionsEngine.Key} to be at \'{startupPath}\\\\{optionsEngine.Value}\'");\n        }\n\n        Console.WriteLine("You can download StockFish over here: https://github.com/RonSijm/ButtFish/blob/main/RonSijm.ButtFish/stockfish_15_x64_avx2.exe");\n        Console.WriteLine("You can LC0 over here: https://lczero.org/play/download/");\n    }\n\n    private static List<(string Name, string Path)> LocateViableEngines(Dictionary<string, string> engines)\n    {\n        var startupPath = Environment.CurrentDirectory;\n\n        var locatedEngines = new List<(string Name, string Path)>();\n\n        foreach (var option in engines)\n        {\n            var expectedEnginePath = $"{startupPath}\\\\{option.Value}";\n\n            if (File.Exists(expectedEnginePath))\n            {\n                locatedEngines.Add((option.Key, option.Value));\n            }\n        }\n\n        return locatedEngines;\n    }\n}'