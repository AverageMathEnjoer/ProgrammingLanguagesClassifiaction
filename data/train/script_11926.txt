b'{-# LANGUAGE CPP, ScopedTypeVariables #-}\n\n-- If we instead commute the monad transformers we can change the\n-- reader value observed by a continuation.\n\nimport Control.Monad.Cont as C\nimport qualified Control.Monad.Reader as R\nimport Data.IORef\nimport Text.Printf\n\ntype M a = C.ContT () (R.ReaderT Int IO) a\n\ntest ref = do \n  x <- R.ask \n  liftIO$ printf "Observed value %d before callCC\\n" x \n  callCC$ \\cont -> do\n     liftIO$ writeIORef ref cont\n     liftIO$ printf "Write ioref inside callcc...\\n" \n  z <- R.ask \n  liftIO$ printf "Observed value %d in invoked continuation\\n" z\n  return ()\n\nmain = do ref :: IORef (() -> M ()) <- newIORef (error "should not be used")\n          let m0 = test ref\n\t      m1 = C.runContT m0 (\\ () -> return ())\n\t      m2 = R.runReaderT m1 (100::Int)\n          m2 \n\n          k <- readIORef ref\n          let m3 = do \n\t\t      w <- lift$ R.ask \n\t\t      liftIO$ putStrLn ("In new runReader instance: observed " ++ show w)\n\t\t      k ()\n\t\t      liftIO$ putStrLn  " !! Should not reach here..."\n\n\t  R.runReaderT (C.runContT m3 (\\ () -> return ())) 200\n          putStrLn "Done with main."\n'