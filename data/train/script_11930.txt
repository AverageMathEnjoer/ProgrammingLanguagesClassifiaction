b'package co.joebirch.composeplayground.foundation\n\nimport androidx.compose.foundation.indication\nimport androidx.compose.foundation.interaction.MutableInteractionSource\nimport androidx.compose.material.Text\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.selection.triStateToggleable\nimport androidx.compose.material.ripple.rememberRipple\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.state.ToggleableState\nimport androidx.compose.ui.unit.dp\nimport co.joebirch.composeplayground.ComposableLayout\n\nobject TriToggleableView : ComposableLayout {\n\n    @Composable\n    override fun build() {\n        Column(\n            modifier = Modifier\n                .fillMaxSize()\n                .padding(32.dp),\n            verticalArrangement = Arrangement.SpaceEvenly,\n            horizontalAlignment = Alignment.CenterHorizontally\n        ) {\n            TriToggleableComponent()\n            DisabledTriToggleableComponent()\n            IndicationTriToggleableComponent()\n        }\n    }\n\n}\n\n@Composable\nfun TriToggleableComponent() {\n    val state = remember { mutableStateOf(ToggleableState(false)) }\n    Text(\n        text = "Jetpack Compose",\n        modifier = Modifier.triStateToggleable(\n            state = state.value,\n            onClick = {\n                when (state.value) {\n                    ToggleableState.Off -> {\n                        state.value = ToggleableState.Indeterminate\n                    }\n                    ToggleableState.Indeterminate -> {\n                        state.value = ToggleableState.On\n                    }\n                    else -> {\n                        state.value = ToggleableState.Off\n                    }\n                }\n            }\n        )\n    )\n}\n\n@Composable\nfun DisabledTriToggleableComponent() {\n    val state = remember { mutableStateOf(ToggleableState(false)) }\n    Text(\n        text = "Jetpack Compose",\n        modifier = Modifier.triStateToggleable(\n            state = state.value,\n            onClick = {\n                when (state.value) {\n                    ToggleableState.Off -> {\n                        state.value = ToggleableState.Indeterminate\n                    }\n                    ToggleableState.Indeterminate -> {\n                        state.value = ToggleableState.On\n                    }\n                    else -> {\n                        state.value = ToggleableState.Off\n                    }\n                }\n            },\n            enabled = false\n        )\n    )\n}\n\n@Composable\nfun IndicationTriToggleableComponent() {\n    val state = remember { mutableStateOf(ToggleableState(false)) }\n    Text(\n        text = "Jetpack Compose",\n        modifier = Modifier\n            .triStateToggleable(\n                state = state.value,\n                onClick = {\n                    when (state.value) {\n                        ToggleableState.Off -> {\n                            state.value = ToggleableState.Indeterminate\n                        }\n                        ToggleableState.Indeterminate -> {\n                            state.value = ToggleableState.On\n                        }\n                        else -> {\n                            state.value = ToggleableState.Off\n                        }\n                    }\n                }\n            )\n            .indication(\n                indication = rememberRipple(),\n                interactionSource = MutableInteractionSource()\n            )\n    )\n}'