b'module Utils where\n\nimport Control.Concurrent.STM\nimport Control.Monad.Writer\nimport qualified Data.Foldable as F\n\nimport Test.Tasty.Runners\n\n-- run tests, return successfulness\nrunSMap :: StatusMap -> IO [Result]\nrunSMap smap = atomically $\n  execWriterT $ getTraversal $ flip F.foldMap smap $ \\tv -> Traversal $ do\n    s <- lift $ readTVar tv\n    case s of\n      Done r -> tell [r]\n      _ -> lift retry\n'