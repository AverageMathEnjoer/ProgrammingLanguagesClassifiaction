b'//\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x9a\xe6\x89\x8b\xe6\x9c\xba\xe5\x8f\xb7\xe7\xa0\x81\xe5\xbd\x92\xe5\xb1\x9e\xe5\x9c\xb0\xe6\x9f\xa5\xe8\xaf\xa2 dat\xe9\xab\x98\xe6\x95\x88\xe7\x8e\x87\xe6\x9f\xa5\xe8\xaf\xa2\n//\xe5\x8e\x8b\xe7\xbc\xa9\xef\xbc\x9a\xe5\x8e\x9f\xe7\x89\x88txt\xe4\xb8\xba18M,\xe7\x94\x9f\xe6\x88\x90\xe8\xbf\x99\xe7\xa7\x8ddat\xe7\xbb\x93\xe6\x9e\x84\xe4\xb8\xba2.88M \n//\xe6\x80\xa7\xe8\x83\xbd\xef\xbc\x9a\xe6\xaf\x8f\xe7\xa7\x92\xe8\xa7\xa3\xe6\x9e\x90200\xe4\xb8\x87+\xe5\x8f\xb7\xe6\xae\xb5\xe6\x88\x96\xe8\x80\x85\xe5\x8f\xb7\xe7\xa0\x81,\xe7\xae\x80\xe6\xb4\x81\xe9\xab\x98\xe6\x95\x88 \n//\xe7\x8e\xaf\xe5\xa2\x83\xef\xbc\x9aCPU i7-7700K +\xe5\x86\x85\xe5\xad\x9816GB\n//\xe5\x88\x9b\xe5\xbb\xba\xef\xbc\x9aqqzeng-ip \xe4\xba\x8e 2017-5-21\n\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Text;\nnamespace qqzeng_phone_dat\n{\n     public class PhoneSearch\n    {\n       \n        private Dictionary<uint, PrefixIndex> prefixDict;\n        private byte[] indexBuffer;\n        private byte[] data;\n        long firstPhoneOffset;//\xe7\xb4\xa2\xe5\xbc\x95\xe5\x8c\xba\xe7\xac\xac\xe4\xb8\x80\xe6\x9d\xa1\xe6\xb5\x81\xe4\xbd\x8d\xe7\xbd\xae\n        long lastPhoneOffset;//\xe7\xb4\xa2\xe5\xbc\x95\xe5\x8c\xba\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe6\x9d\xa1\xe6\xb5\x81\xe4\xbd\x8d\xe7\xbd\xae\n        long prefixStartOffset;//\xe5\x89\x8d\xe7\xbc\x80\xe5\x8c\xba\xe7\xac\xac\xe4\xb8\x80\xe6\x9d\xa1\xe7\x9a\x84\xe6\xb5\x81\xe4\xbd\x8d\xe7\xbd\xae\n        long prefixEndOffset;//\xe5\x89\x8d\xe7\xbc\x80\xe5\x8c\xba\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe6\x9d\xa1\xe7\x9a\x84\xe6\xb5\x81\xe4\xbd\x8d\xe7\xbd\xae\n        long phoneCount;       //\xe5\x8f\xb7\xe6\xae\xb5\xe6\xae\xb5\xe6\x95\xb0\xe9\x87\x8f\n        long prefixCount;  //\xe5\x89\x8d\xe7\xbc\x80\xe6\x95\xb0\xe9\x87\x8f\n\n        /// <summary>\n        /// \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe4\xba\x8c\xe8\xbf\x9b\xe5\x88\xb6dat\xe6\x95\xb0\xe6\x8d\xae\n        /// </summary>\n        /// <param name="dataPath"></param>\n        public PhoneSearch(string dataPath)\n        {\n            using (FileStream fs = new FileStream(dataPath, FileMode.Open, FileAccess.Read, FileShare.Read))\n            {\n                data = new byte[fs.Length];\n                fs.Read(data, 0, data.Length);\n            }\n\n            firstPhoneOffset = BytesToLong(data[0], data[1], data[2], data[3]);\n            lastPhoneOffset = BytesToLong(data[4], data[5], data[6], data[7]);\n            prefixStartOffset = BytesToLong(data[8], data[9], data[10], data[11]);\n            prefixEndOffset = BytesToLong(data[12], data[13], data[14], data[15]);\n\n          \n\n            phoneCount = (lastPhoneOffset - firstPhoneOffset) / 8 + 1; //\xe7\xb4\xa2\xe5\xbc\x95\xe5\x8c\xba\xe5\x9d\x97\xe6\xaf\x8f\xe7\xbb\x84 8\xe5\xad\x97\xe8\x8a\x82          \n            prefixCount = (prefixEndOffset - prefixStartOffset) / 9 + 1; //\xe5\x89\x8d\xe7\xbc\x80\xe5\x8c\xba\xe5\x9d\x97\xe6\xaf\x8f\xe7\xbb\x84 9\xe5\xad\x97\xe8\x8a\x82\n\n            //\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe5\x89\x8d\xe7\xbc\x80\xe5\xaf\xb9\xe5\xba\x94\xe7\xb4\xa2\xe5\xbc\x95\xe5\x8c\xba\xe5\x8c\xba\xe9\x97\xb4\n            indexBuffer = new byte[prefixCount * 9];\n            Array.Copy(data, prefixStartOffset, indexBuffer, 0, prefixCount * 9);\n            prefixDict = new Dictionary<uint, PrefixIndex>();\n            for (var k = 0; k < prefixCount; k++)\n            {\n                int i = k * 9;\n                uint prefix = (uint)indexBuffer[i];\n                long start_index = BytesToLong(indexBuffer[i + 1], indexBuffer[i + 2], indexBuffer[i + 3], indexBuffer[i + 4]);\n                long end_index = BytesToLong(indexBuffer[i + 5], indexBuffer[i + 6], indexBuffer[i + 7], indexBuffer[i + 8]);\n                prefixDict.Add(prefix, new PrefixIndex() { prefix = prefix, start_index = start_index, end_index = end_index });\n            }\n\n        }\n\n        public static uint PhoneToInt(string phone,out uint prefix)\n        {           \n            prefix = Convert.ToUInt32(phone.Substring(0,3));\n            return Convert.ToUInt32(phone.Substring(0, 7)); ;\n        }\n\n        /// <summary>\n        /// \xe5\x8f\xb7\xe6\xae\xb5\xe6\x9f\xa5\xe8\xaf\xa2\n        /// </summary>\n        /// <param name="phone">7\xe4\xbd\x8d\xe6\x88\x96\xe8\x80\x8511\xe4\xbd\x8d</param>\n        /// <returns></returns>\n        public string Query(string phone)\n        {\n            uint phone_prefix_value;\n            uint intPhone = PhoneToInt(phone, out phone_prefix_value);\n            uint high = 0;\n            uint low = 0;\n          \n            uint local_offset = 0;\n            uint local_length = 0;\n\n           \n            if (prefixDict.ContainsKey(phone_prefix_value))\n            {\n                low = (uint)prefixDict[phone_prefix_value].start_index;\n                high = (uint)prefixDict[phone_prefix_value].end_index;\n            }\n            else\n            {\n                return "";\n            }\n\n            if (low == high)\n            {\n                GetIndex(low, out local_offset, out local_length);\n                return GetLocal(local_offset, local_length);\n            }\n            else\n            {\n                int my_index = BinarySearch(low, high, intPhone);\n                if (my_index!=-1)\n                {\n                    GetIndex((uint)my_index, out local_offset, out local_length);\n                    return GetLocal(local_offset, local_length);\n                }\n                else\n                {\n                    return "";\n                }\n            }\n            \n          \n           \n\n        }\n        /// <summary>\n        /// \xe4\xba\x8c\xe5\x88\x86\xe7\xae\x97\xe6\xb3\x95\n        /// </summary>\n        public int BinarySearch(uint low, uint high, uint key)\n        {\n            uint mid = (low + high) / 2;\n            if (low > high)\n                return -1;\n            else\n            {\n                uint phoneNum = GetIntPhone(mid);\n                if (phoneNum == key)\n                    return (int)mid;\n                else if (phoneNum > key)\n                    return BinarySearch( low, mid - 1, key);\n                else\n                    return BinarySearch(mid + 1, high, key);\n            }\n        }\n\n\n\n        /// <summary>\n        /// \xe5\x9c\xa8\xe7\xb4\xa2\xe5\xbc\x95\xe5\x8c\xba\xe8\xa7\xa3\xe6\x9e\x90\n        /// </summary>\n        /// <param name="left">ip\xe7\xac\xacleft\xe4\xb8\xaa\xe7\xb4\xa2\xe5\xbc\x95</param>\n        /// <param name="startip">\xe8\xbf\x94\xe5\x9b\x9e\xe5\xbc\x80\xe5\xa7\x8bip\xe7\x9a\x84\xe6\x95\xb0\xe5\x80\xbc</param>\n        /// <param name="endip">\xe8\xbf\x94\xe5\x9b\x9e\xe7\xbb\x93\xe6\x9d\x9fip\xe7\x9a\x84\xe6\x95\xb0\xe5\x80\xbc</param>\n        /// <param name="local_offset">\xe8\xbf\x94\xe5\x9b\x9e\xe5\x9c\xb0\xe5\x9d\x80\xe4\xbf\xa1\xe6\x81\xaf\xe7\x9a\x84\xe6\xb5\x81\xe4\xbd\x8d\xe7\xbd\xae</param>\n        /// <param name="local_length">\xe8\xbf\x94\xe5\x9b\x9e\xe5\x9c\xb0\xe5\x9d\x80\xe4\xbf\xa1\xe6\x81\xaf\xe7\x9a\x84\xe6\xb5\x81\xe9\x95\xbf\xe5\xba\xa6</param>\n        private void GetIndex(uint left, out uint local_offset, out uint local_length)\n        {\n            long left_offset = firstPhoneOffset + (left * 8);\n            local_offset = (uint)data[4 + left_offset] + (((uint)data[5 + left_offset]) << 8) + (((uint)data[6 + left_offset]) << 16);\n            local_length = (uint)data[7 + left_offset];\n        }\n     \n\n        /// <summary>\n        /// \xe8\xbf\x94\xe5\x9b\x9e\xe5\xbd\x92\xe5\xb1\x9e\xe5\x9c\xb0\xe4\xbf\xa1\xe6\x81\xaf\n        /// </summary>\n        /// <param name="local_offset">\xe5\x9c\xb0\xe5\x9d\x80\xe4\xbf\xa1\xe6\x81\xaf\xe7\x9a\x84\xe6\xb5\x81\xe4\xbd\x8d\xe7\xbd\xae</param>\n        /// <param name="local_length">\xe5\x9c\xb0\xe5\x9d\x80\xe4\xbf\xa1\xe6\x81\xaf\xe7\x9a\x84\xe6\xb5\x81\xe9\x95\xbf\xe5\xba\xa6</param>\n        /// <returns></returns>\n        private string GetLocal(uint local_offset, uint local_length)\n        {\n            byte[] buf = new byte[local_length];\n            Array.Copy(data, local_offset, buf, 0, local_length);\n             return Encoding.UTF8.GetString(buf, 0, (int)local_length); \n          \n           // return Encoding.GetEncoding("GB2312").GetString(buf, 0, (int)local_length);\n\n        }\n\n        private uint GetIntPhone(uint left)\n        {\n            long left_offset = firstPhoneOffset + (left * 8);\n            return BytesToLong(data[0 + left_offset], data[1 + left_offset], data[2 + left_offset], data[3 + left_offset]);\n\n        }\n\n\n        /// <summary>\n        /// \xe5\xad\x97\xe8\x8a\x82\xe8\xbd\xac\xe6\x95\xb4\xe5\xbd\xa2 \xe5\xb0\x8f\xe8\x8a\x82\xe5\xba\x8f \n        /// </summary>     \n        private uint BytesToLong(byte a, byte b, byte c, byte d)\n        {\n            return ((uint)a << 0) | ((uint)b << 8) | ((uint)c << 16) | ((uint)d << 24);\n        }\n\n    /*\n    \xef\xbc\x88\xe8\xb0\x83\xe7\x94\xa8\xe4\xbe\x8b\xe5\xad\x90\xef\xbc\x89\xef\xbc\x9a\n    PhoneSearch finder = new PhoneSearch("qqzeng-phone.dat");\n    string result = finder.Query("\xe5\x8f\xb7\xe6\xae\xb5\xe6\x88\x96\xe8\x80\x85\xe5\x8f\xb7\xe7\xa0\x81");\n   --> result="\xe7\x9c\x81\xe4\xbb\xbd|\xe5\x9f\x8e\xe5\xb8\x82|\xe8\xbf\x90\xe8\x90\xa5\xe5\x95\x86|\xe5\x8c\xba\xe5\x8f\xb7|\xe9\x82\xae\xe7\xbc\x96|\xe8\xa1\x8c\xe6\x94\xbf\xe5\x8c\xba\xe5\x88\x92\xe4\xbb\xa3\xe7\xa0\x81"\n    */\n}\n'