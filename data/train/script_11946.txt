b'package com.rengwuxian.materialedittext.validation;\n\nimport android.support.annotation.NonNull;\n\n/**\n * Base Validator class to either implement or inherit from for custom validation\n */\npublic abstract class METValidator {\n\n  /**\n   * Error message that the view will display if validation fails.\n   * <p/>\n   * This is protected, so you can change this dynamically in your {@link #isValid(CharSequence, boolean)}\n   * implementation. If necessary, you can also interact with this via its getter and setter.\n   */\n  protected String errorMessage;\n\n  public METValidator(@NonNull String errorMessage) {\n    this.errorMessage = errorMessage;\n  }\n\n  public void setErrorMessage(@NonNull String errorMessage) {\n    this.errorMessage = errorMessage;\n  }\n\n  @NonNull\n  public String getErrorMessage() {\n    return this.errorMessage;\n  }\n\n  /**\n   * Abstract method to implement your own validation checking.\n   *\n   * @param text    The CharSequence representation of the text in the EditText field. Cannot be null, but may be empty.\n   * @param isEmpty Boolean indicating whether or not the text param is empty\n   * @return True if valid, false if not\n   */\n  public abstract boolean isValid(@NonNull CharSequence text, boolean isEmpty);\n\n}\n'