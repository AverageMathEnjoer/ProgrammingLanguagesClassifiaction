b'context("construction_errors")\ntest_that("proper errors thrown in object construction", {\n  coldata <- DataFrame(x=factor(c("A","A","B","B")),\n                       xx=factor(c("A","A","B","B ")),\n                       xwNA=factor(c("A","A","B",NA)),\n                       name=letters[1:4],\n                       ident=factor(rep("A",4)),\n                       num=1:4,\n                       big.num=runif(4,100,101),\n                       wide.num=c(-50.5,-10.5,10.5,50.5),\n                       missinglevels=factor(c("A","A","B","B"), levels=c("A","B","C")),\n                       notref=factor(c("control","control","abc","abc")),\n                       row.names=1:4)\n  cts <- matrix(1:16, ncol=4)\n  dup.rownms.cts <- matrix(1:16, ncol=4, dimnames=list(c(1,2,3,3),1:4))\n\n  expect_message(DESeqDataSet(SummarizedExperiment(list(foo=cts), colData=coldata), ~ x), "renaming the first")\n  expect_error(DESeqDataSet(SummarizedExperiment(list(foo=cts, counts=cts), colData=coldata), ~ x), "\'counts\' assay")\n  expect_error(DESeqDataSetFromMatrix(matrix(c(1:11,-1),ncol=4), coldata, ~ x), "values in assay are negative")\n  expect_error(DESeqDataSetFromMatrix(matrix(c(1:11,0.5),ncol=4), coldata, ~ x), "are not integers")\n  expect_error(DESeqDataSetFromMatrix(matrix(rep(0,16),ncol=4), coldata, ~ x), "all samples have 0 counts")\n  expect_warning(DESeqDataSetFromMatrix(matrix(rep(1:4,4),ncol=4), coldata, ~ x), "have equal values")\n  expect_warning(DESeqDataSetFromMatrix(dup.rownms.cts, coldata, ~ x), "duplicate rownames")\n  expect_error(DESeqDataSetFromMatrix(cts, colData=coldata, ~xwNA), "cannot contain NA")\n  expect_error(DESeqDataSetFromMatrix(cts, coldata, ~ y), "must be columns in colData")\n  expect_warning(DESeqDataSetFromMatrix(cts, coldata, ~ name), "are characters")\n  expect_error(DESeqDataSetFromMatrix(cts, coldata, ~ ident), "all samples having the same value")\n  expect_message(DESeqDataSetFromMatrix(cts, coldata, ~ num), "integer values")\n  expect_message(DESeqDataSetFromMatrix(cts, coldata, ~ big.num), "standard deviation larger than 5")\n  expect_message(DESeqDataSetFromMatrix(cts, coldata, ~ wide.num), "standard deviation larger than 5")\n  expect_message(DESeqDataSetFromMatrix(cts, coldata, ~ missinglevels), "were dropped")\n  expect_message(DESeqDataSetFromMatrix(cts, coldata, ~ notref), "not the reference level")\n  expect_error(DESeqDataSetFromMatrix(cts, coldata, ~ident + x), "design contains")\n  expect_message(DESeqDataSetFromMatrix(cts, coldata, ~xx), "characters other than")\n\n  coldata2 <- data.frame(ord=ordered(rep(1:2,each=2)))\n  expect_error(DESeqDataSetFromMatrix(cts, coldata2, ~ord), "ordered")\n  \n  chr.cts <- cts\n  mode(chr.cts) <- "character"\n  expect_error(DESeqDataSetFromMatrix(chr.cts, coldata, ~x), "should be numeric")\n  \n  # same colnames but in different order:\n  expect_error(DESeqDataSetFromMatrix(matrix(1:16, ncol=4, dimnames=list(1:4, 4:1)), coldata, ~ x))\n\n  # testing incoming metadata columns\n  coldata <- DataFrame(x=factor(c("A","A","B","B")))\n  rowranges <- GRanges("1", IRanges(1 + 0:3 * 10, width=10))\n  se <- SummarizedExperiment(list(counts=cts), colData=coldata, rowRanges=rowranges)\n  mcols(colData(se)) <- DataFrame(info="x is a factor")\n  mcols(se)$id <- 1:4\n  mcols(mcols(se)) <- DataFrame(info="the gene id")\n  dds <- DESeqDataSet(se, ~ x)\n  mcols(colData(dds))\n  mcols(mcols(dds))\n\n})\n'