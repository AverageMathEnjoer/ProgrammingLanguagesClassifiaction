b'package com.naman14.timber.adapters;\n\nimport android.app.Activity;\nimport android.graphics.Color;\nimport android.graphics.ColorFilter;\nimport android.graphics.PorterDuff;\nimport android.graphics.PorterDuffColorFilter;\nimport android.graphics.drawable.Drawable;\nimport android.os.AsyncTask;\nimport android.os.Handler;\nimport androidx.annotation.NonNull;\nimport androidx.core.content.ContextCompat;\nimport androidx.recyclerview.widget.RecyclerView;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.ImageView;\nimport android.widget.TextView;\n\nimport com.naman14.timber.R;\nimport com.naman14.timber.dataloaders.FolderLoader;\nimport com.naman14.timber.dataloaders.SongLoader;\nimport com.naman14.timber.models.Song;\nimport com.naman14.timber.utils.PreferencesUtility;\nimport com.naman14.timber.utils.TimberUtils;\nimport com.naman14.timber.widgets.BubbleTextGetter;\nimport com.nostra13.universalimageloader.core.DisplayImageOptions;\nimport com.nostra13.universalimageloader.core.ImageLoader;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Created by nv95 on 10.11.16.\n */\n\npublic class FolderAdapter extends BaseSongAdapter<FolderAdapter.ItemHolder> implements BubbleTextGetter {\n\n    @NonNull\n    private List<File> mFileSet;\n    private List<Song> mSongs;\n    private File mRoot;\n    private Activity mContext;\n    private final Drawable[] mIcons;\n    private boolean mBusy = false;\n\n\n    public FolderAdapter(Activity context, File root) {\n        mContext = context;\n        mIcons = new Drawable[]{\n                ContextCompat.getDrawable(context, R.drawable.ic_folder_open_black_24dp),\n                ContextCompat.getDrawable(context, R.drawable.ic_folder_parent_dark),\n                ContextCompat.getDrawable(context, R.drawable.ic_file_music_dark),\n                ContextCompat.getDrawable(context, R.drawable.ic_timer_wait)\n        };\n        mSongs = new ArrayList<>();\n        updateDataSet(root);\n    }\n\n    public void applyTheme(boolean dark) {\n        ColorFilter cf = new PorterDuffColorFilter(Color.WHITE, PorterDuff.Mode.SRC_ATOP);\n        for (Drawable d : mIcons) {\n            if (dark) {\n                d.setColorFilter(cf);\n            } else {\n                d.clearColorFilter();\n            }\n        }\n    }\n\n    @Override\n    public FolderAdapter.ItemHolder onCreateViewHolder(ViewGroup viewGroup, int i) {\n        View v = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.item_folder_list, viewGroup, false);\n        return new ItemHolder(v);\n    }\n\n    @Override\n    public void onBindViewHolder(final FolderAdapter.ItemHolder itemHolder, int i) {\n        File localItem = mFileSet.get(i);\n        Song song = mSongs.get(i);\n        itemHolder.title.setText(localItem.getName());\n        if (localItem.isDirectory()) {\n            itemHolder.albumArt.setImageDrawable("..".equals(localItem.getName()) ? mIcons[1] : mIcons[0]);\n        } else {\n            ImageLoader.getInstance().displayImage(TimberUtils.getAlbumArtUri(song.albumId).toString(),\n                    itemHolder.albumArt,\n                    new DisplayImageOptions.Builder().\n                            cacheInMemory(true).showImageOnFail(mIcons[2])\n                            .resetViewBeforeLoading(true).build());\n        }\n    }\n\n    @Override\n    public int getItemCount() {\n        return mFileSet.size();\n    }\n\n    @Deprecated\n    public void updateDataSet(File newRoot) {\n        if (mBusy) {\n            return;\n        }\n        if ("..".equals(newRoot.getName())) {\n            goUp();\n            return;\n        }\n        mRoot = newRoot;\n        mFileSet = FolderLoader.getMediaFiles(newRoot, true);\n        getSongsForFiles(mFileSet);\n    }\n\n    @Deprecated\n    public boolean goUp() {\n        if (mRoot == null || mBusy) {\n            return false;\n        }\n        File parent = mRoot.getParentFile();\n        if (parent != null && parent.canRead()) {\n            updateDataSet(parent);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public boolean goUpAsync() {\n        if (mRoot == null || mBusy) {\n            return false;\n        }\n        File parent = mRoot.getParentFile();\n        if (parent != null && parent.canRead()) {\n            return updateDataSetAsync(parent);\n        } else {\n            return false;\n        }\n    }\n\n    public boolean updateDataSetAsync(File newRoot) {\n        if (mBusy) {\n            return false;\n        }\n        if ("..".equals(newRoot.getName())) {\n            goUpAsync();\n            return false;\n        }\n        mRoot = newRoot;\n        new NavigateTask().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, mRoot);\n        return true;\n    }\n\n    @Override\n    public String getTextToShowInBubble(int pos) {\n        if (mBusy || mFileSet.size() == 0)\n            return "";\n        try {\n            File f = mFileSet.get(pos);\n            if (f.isDirectory()) {\n                return String.valueOf(f.getName().charAt(0));\n            } else {\n                return Character.toString(f.getName().charAt(0));\n            }\n        } catch (Exception e) {\n            return "";\n        }\n    }\n\n    private void getSongsForFiles(List<File> files) {\n        mSongs.clear();\n        for (File file : files) {\n            mSongs.add(SongLoader.getSongFromPath(file.getAbsolutePath(), mContext));\n        }\n    }\n\n\n    private class NavigateTask extends AsyncTask<File, Void, List<File>> {\n\n        @Override\n        protected void onPreExecute() {\n            super.onPreExecute();\n            mBusy = true;\n        }\n\n        @Override\n        protected List<File> doInBackground(File... params) {\n            List<File> files = FolderLoader.getMediaFiles(params[0], true);\n            getSongsForFiles(files);\n            return files;\n        }\n\n        @Override\n        protected void onPostExecute(List<File> files) {\n            super.onPostExecute(files);\n            mFileSet = files;\n            notifyDataSetChanged();\n            mBusy = false;\n            PreferencesUtility.getInstance(mContext).storeLastFolder(mRoot.getPath());\n        }\n    }\n\n    public class ItemHolder extends RecyclerView.ViewHolder implements View.OnClickListener {\n\n        protected TextView title;\n        protected ImageView albumArt;\n\n        public ItemHolder(View view) {\n            super(view);\n            this.title = (TextView) view.findViewById(R.id.folder_title);\n            this.albumArt = (ImageView) view.findViewById(R.id.album_art);\n            view.setOnClickListener(this);\n        }\n\n        @Override\n        public void onClick(View v) {\n            if (mBusy) {\n                return;\n            }\n            final File f = mFileSet.get(getAdapterPosition());\n\n            if (f.isDirectory() && updateDataSetAsync(f)) {\n                albumArt.setImageDrawable(mIcons[3]);\n            } else if (f.isFile()) {\n\n                final Handler handler = new Handler();\n                handler.postDelayed(new Runnable() {\n                    @Override\n                    public void run() {\n                        int current = -1;\n                        long songId = SongLoader.getSongFromPath(mFileSet.get(getAdapterPosition()).getAbsolutePath(),mContext).id;\n                        int count = 0;\n                        for (Song song : mSongs) {\n                            if (song.id != -1) {\n                                count++;\n                            }\n                        }\n                        long[] ret = new long[count];\n                        int j = 0;\n                        for (int i = 0; i < getItemCount(); i++) {\n                            if (mSongs.get(i).id != -1) {\n                                ret[j] = mSongs.get(i).id;\n                                if (mSongs.get(i).id == songId) {\n                                    current = j;\n                                }\n                                j++;\n                            }\n                        }\n                        playAll(mContext, ret, current, -1, TimberUtils.IdType.NA,\n                                false, mSongs.get(getAdapterPosition()), false);\n                    }\n                }, 100);\n\n\n            }\n        }\n\n    }\n\n\n}'