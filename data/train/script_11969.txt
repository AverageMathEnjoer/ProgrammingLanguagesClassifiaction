b'package com.codeest.geeknews.util;\n\nimport android.support.annotation.Nullable;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\n\nimport static java.lang.System.currentTimeMillis;\n\n/**\n * Created by codeest on 16/8/13.\n */\n\npublic class DateUtil {\n\n    /**\n     * \xe8\x8e\xb7\xe5\x8f\x96\xe5\xbd\x93\xe5\x89\x8d\xe6\x97\xa5\xe6\x9c\x9f\n     * @return\n     */\n    public static String getCurrentDate() {\n        SimpleDateFormat df = new SimpleDateFormat("yyyyMMdd");\n        return df.format(new Date());\n    }\n\n    /**\n     * \xe8\x8e\xb7\xe5\x8f\x96\xe5\xbd\x93\xe5\x89\x8d\xe6\x97\xa5\xe6\x9c\x9f\n     * @return\n     */\n    public static String getTomorrowDate() {\n        SimpleDateFormat df = new SimpleDateFormat("yyyyMMdd");\n        return String.valueOf(Integer.valueOf(df.format(new Date())) + 1);\n    }\n\n    /**\n     * \xe8\x8e\xb7\xe5\x8f\x96\xe5\xbd\x93\xe5\x89\x8d\xe6\x97\xa5\xe6\x9c\x9f\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\n     * @return\n     */\n    public static String getCurrentDateString() {\n        SimpleDateFormat df = new SimpleDateFormat("yyyy\xe5\xb9\xb4MM\xe6\x9c\x88dd\xe6\x97\xa5");\n        return df.format(new Date());\n    }\n\n    /**\n     * \xe8\x8e\xb7\xe5\x8f\x96\xe5\xbd\x93\xe5\x89\x8d\xe5\xb9\xb4\n     * @return\n     */\n    public static int getCurrentYear() {\n        Calendar cal=Calendar.getInstance();\n        return cal.get(Calendar.YEAR);\n    }\n\n    /**\n     * \xe8\x8e\xb7\xe5\x8f\x96\xe5\xbd\x93\xe5\x89\x8d\xe6\x9c\x88\n     * @return\n     */\n    public static int getCurrentMonth() {\n        Calendar cal=Calendar.getInstance();\n        return cal.get(Calendar.MONTH);\n    }\n\n    /**\n     * \xe8\x8e\xb7\xe5\x8f\x96\xe5\xbd\x93\xe5\x89\x8d\xe6\x97\xa5\n     * @return\n     */\n    public static int getCurrentDay() {\n        Calendar cal=Calendar.getInstance();\n        return cal.get(Calendar.DATE);\n    }\n\n    /**\n     * \xe5\x88\x87\xe5\x89\xb2\xe6\xa0\x87\xe5\x87\x86\xe6\x97\xb6\xe9\x97\xb4\n     * @param time\n     * @return\n     */\n    @Nullable\n    public static String subStandardTime(String time) {\n        int idx = time.indexOf(".");\n        if (idx > 0) {\n            return time.substring(0, idx).replace("T"," ");\n        }\n        return null;\n    }\n\n    /**\n     * \xe5\xb0\x86\xe6\x97\xb6\xe9\x97\xb4\xe6\x88\xb3\xe8\xbd\xac\xe5\x8c\x96\xe4\xb8\xba\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\n     * @param showTime\n     * @return\n     */\n    public static String formatTime2String(long showTime) {\n        return formatTime2String(showTime,false);\n    }\n\n    public static String formatTime2String(long showTime , boolean haveYear) {\n        String str = "";\n        long distance = currentTimeMillis()/1000 - showTime;\n        if(distance < 300){\n            str = "\xe5\x88\x9a\xe5\x88\x9a";\n        }else if(distance >= 300 && distance < 600){\n            str = "5\xe5\x88\x86\xe9\x92\x9f\xe5\x89\x8d";\n        }else if(distance >= 600 && distance < 1200){\n            str = "10\xe5\x88\x86\xe9\x92\x9f\xe5\x89\x8d";\n        }else if(distance >= 1200 && distance < 1800){\n            str = "20\xe5\x88\x86\xe9\x92\x9f\xe5\x89\x8d";\n        }else if(distance >= 1800 && distance < 2700){\n            str = "\xe5\x8d\x8a\xe5\xb0\x8f\xe6\x97\xb6\xe5\x89\x8d";\n        }else if(distance >= 2700){\n            Date date = new Date(showTime * 1000);\n            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");\n            str = formatDateTime(sdf.format(date) , haveYear);\n        }\n        return str;\n    }\n\n    public static String formatDate2String(String time) {\n        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");\n        if(time == null){\n            return "\xe6\x9c\xaa\xe7\x9f\xa5";\n        }\n        try {\n            long createTime = format.parse(time).getTime() / 1000;\n            long currentTime = System.currentTimeMillis() / 1000;\n            if (currentTime - createTime - 24 * 3600 > 0) { //\xe8\xb6\x85\xe5\x87\xba\xe4\xb8\x80\xe5\xa4\xa9\n                return (currentTime - createTime) / (24 * 3600) + "\xe5\xa4\xa9\xe5\x89\x8d";\n            } else {\n                return (currentTime - createTime) / 3600 + "\xe5\xb0\x8f\xe6\x97\xb6\xe5\x89\x8d";\n            }\n        } catch (ParseException e) {\n            e.printStackTrace();\n        }\n        return "\xe6\x9c\xaa\xe7\x9f\xa5";\n    }\n\n    public static String formatDateTime(String time ,boolean haveYear) {\n        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");\n        if(time == null){\n            return "";\n        }\n        Date date;\n        try {\n            date = format.parse(time);\n        } catch (ParseException e) {\n            e.printStackTrace();\n            return "";\n        }\n\n        Calendar current = Calendar.getInstance();\n        Calendar today = Calendar.getInstance();\n        today.set(Calendar.YEAR, current.get(Calendar.YEAR));\n        today.set(Calendar.MONTH, current.get(Calendar.MONTH));\n        today.set(Calendar.DAY_OF_MONTH, current.get(Calendar.DAY_OF_MONTH));\n        today.set(Calendar.HOUR_OF_DAY, 0);\n        today.set(Calendar.MINUTE, 0);\n        today.set(Calendar.SECOND, 0);\n        Calendar yesterday = Calendar.getInstance();\n        yesterday.set(Calendar.YEAR, current.get(Calendar.YEAR));\n        yesterday.set(Calendar.MONTH, current.get(Calendar.MONTH));\n        yesterday.set(Calendar.DAY_OF_MONTH, current.get(Calendar.DAY_OF_MONTH)-1);\n        yesterday.set(Calendar.HOUR_OF_DAY, 0);\n        yesterday.set(Calendar.MINUTE, 0);\n        yesterday.set(Calendar.SECOND, 0);\n\n        current.setTime(date);\n        if(current.after(today)){\n            return "\xe4\xbb\x8a\xe5\xa4\xa9 "+time.split(" ")[1];\n        }else if(current.before(today) && current.after(yesterday)){\n            return "\xe6\x98\xa8\xe5\xa4\xa9 "+time.split(" ")[1];\n        }else{\n            if(haveYear) {\n                int index = time.indexOf(" ");\n                return time.substring(0,index);\n            }else {\n                int yearIndex = time.indexOf("-")+1;\n                int index = time.indexOf(" ");\n                return time.substring(yearIndex,time.length()).substring(0,index);\n            }\n        }\n    }\n}\n'