b'import com.github.eprendre.tingshu.utils.Book\nimport com.github.eprendre.tingshu.utils.Episode\nimport com.github.kittinunf.fuel.Fuel\nimport com.github.kittinunf.fuel.json.responseJson\nimport org.junit.Test\nimport java.net.URLEncoder\n\nclass YunTuTest {\n    val wechatID = "07955551-706c-4259-9aa0-db4627dfca57"\n\n    @Test\n    fun search() {\n        val keywords = "\xe4\xbb\x99" //\xe6\x90\x9c\xe7\xb4\xa2\xe5\x85\xb3\xe9\x94\xae\xe8\xaf\x8d\n        val page = 1 //\xe5\xbd\x93\xe5\x89\x8d\xe9\xa1\xb5\xe6\x95\xb0\n        val encodedKeywords = URLEncoder.encode(keywords, "utf-8") //\xe7\xbc\x96\xe7\xa0\x81\n        val url = "http://open-service.yuntuys.com/api/w_ys/book/search/wechat:$wechatID/$encodedKeywords?pageSize=20&pageNum=$page"\n\n        val list = ArrayList<Book>()\n        val jsonObject = Fuel.get(url).responseJson().third.get().obj()\n        val totalPage = jsonObject.getJSONObject("data").getInt("totalPage")\n        val jsonArray = jsonObject.getJSONObject("data").getJSONArray("list")\n        (0 until jsonArray.length()).forEach { i ->\n            val item = jsonArray.getJSONObject(i)\n            val coverUrl = item.getString("cover")\n            val bookUrl = item.getLong("bookId").toString()\n            val title = item.getString("bookName")\n            val artist = item.getString("anchorName")\n            val author = item.getString("authorName")\n            val status = "\xe5\x85\xb1 ${item.getInt("chapters")} \xe7\xab\xa0"\n            val intro = item.getString("summary")\n            list.add(\n                Book(\n                    coverUrl,\n                    bookUrl,\n                    title,\n                    author,\n                    artist\n                ).apply {\n                    this.status = status\n                    this.intro = intro\n                }\n            )\n        }\n        list.take(5).forEach {\n            println(it)\n        }\n        assert(list.size > 0)\n    }\n\n    @Test\n    fun bookDetail() {\n        val bookId = "12660"\n        val url = "http://open-service.yuntuys.com/api/w_ys/book/getChapters/wechat:$wechatID/$bookId/true/asc?pageSize=20&pageNum=1"\n\n        val episodes = ArrayList<Episode>()\n        val list = Fuel.get(url).responseJson().third.get().obj()\n            .getJSONObject("data").getJSONObject("pageQuery")\n            .getJSONArray("list")\n        (0 until list.length()).forEach {\n            val item = list.getJSONObject(it)\n            val name = item.getString("name")\n            val audioUrl = item.getString("audioUrl")\n            episodes.add(Episode(name, audioUrl))\n        }\n        episodes.take(10).forEach {\n            println(it)\n        }\n        assert(episodes.isNotEmpty())\n    }\n\n    @Test\n    fun categoryList() {\n        val typeId = 585\n        val url = "http://open-service.yuntuys.com/api/w_ys/book/getBookListByType/wechat:$wechatID/$typeId?pageNum=1&pageSize=20"\n\n        val list = ArrayList<Book>()\n        val data = Fuel.get(url).responseJson().third.get().obj().getJSONObject("data")\n        val currentPage = data.getInt("pageNumber")\n        val totalPage = data.getInt("totalPage")\n        val nextUrl = "http://open-service.yuntuys.com/api/w_ys/book/getBookListByType/wechat:$wechatID/$typeId?pageNum=${currentPage + 1}&pageSize=20"\n        val jsonArray = data.getJSONArray("list")\n        (0 until jsonArray.length()).forEach { i ->\n            val item = jsonArray.getJSONObject(i)\n            val coverUrl = item.getString("cover")\n            val bookUrl = item.getLong("bookId").toString()\n            val title = item.getString("bookName")\n            val artist = item.getString("anchorName")\n            val author = item.getString("authorName")\n            val status = "\xe5\x85\xb1 ${item.getInt("chapters")} \xe7\xab\xa0"\n            val intro = item.getString("summary")\n            list.add(\n                Book(\n                    coverUrl,\n                    bookUrl,\n                    title,\n                    author,\n                    artist\n                ).apply {\n                    this.status = status\n                    this.intro = intro\n                }\n            )\n        }\n        list.take(5).forEach {\n            println(it)\n        }\n        assert(list.size > 0)\n    }\n\n    @Test\n    fun menu() {\n        val url = "http://open-service.yuntuys.com/api/w_ys/class_type/getHaveOrNoChildrenToPid/178"\n        val data = Fuel.get(url).responseJson().third.get().obj().getJSONObject("data")\n        val noSubset = data.getJSONArray("noSubset")\n        (0 until noSubset.length()).forEach {\n            val item = noSubset.getJSONObject(it)\n            val name = item.getString("name")\n            val classTypeId = item.getInt("classTypeId")\n            println("CategoryTab(\\"$name\\", \\"$classTypeId\\"),")\n        }\n        val haveSubset = data.getJSONArray("haveSubset")\n        (0 until haveSubset.length()).forEach { it1 ->\n            val subSet = haveSubset.getJSONObject(it1)\n            println("============================")\n            val categoryName = subSet.getString("name")\n            println(categoryName)\n            val childrenList = subSet.getJSONArray("childrenList")\n            (0 until childrenList.length()).forEach {\n                val item = childrenList.getJSONObject(it)\n                val name = item.getString("name")\n                val classTypeId = item.getInt("classTypeId")\n                println("CategoryTab(\\"$name\\", \\"$classTypeId\\"),")\n            }\n\n        }\n    }\n\n}'