b'{-# LANGUAGE CPP #-}\n#if __GLASGOW_HASKELL__\n{-# LANGUAGE MagicHash #-}\n#endif\n#if !defined(TESTING) && defined(__GLASGOW_HASKELL__)\n{-# LANGUAGE Safe #-}\n#endif\n\n#include "containers.h"\n\n-----------------------------------------------------------------------------\n-- |\n-- Module      :  Utils.Containers.Internal.BitUtil\n-- Copyright   :  (c) Clark Gaebel 2012\n--                (c) Johan Tibel 2012\n-- License     :  BSD-style\n-- Maintainer  :  libraries@haskell.org\n-- Portability :  portable\n-----------------------------------------------------------------------------\n--\n-- = WARNING\n--\n-- This module is considered __internal__.\n--\n-- The Package Versioning Policy __does not apply__.\n--\n-- The contents of this module may change __in any way whatsoever__\n-- and __without any warning__ between minor versions of this package.\n--\n-- Authors importing this module are expected to track development\n-- closely.\n\nmodule Utils.Containers.Internal.BitUtil\n    ( bitcount\n    , highestBitMask\n    , shiftLL\n    , shiftRL\n    , wordSize\n    ) where\n\nimport Data.Bits (popCount, unsafeShiftL, unsafeShiftR\n    , countLeadingZeros, finiteBitSize\n    )\n\n\n{----------------------------------------------------------------------\n  [bitcount] as posted by David F. Place to haskell-cafe on April 11, 2006,\n  based on the code on\n  http://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetKernighan,\n  where the following source is given:\n    Published in 1988, the C Programming Language 2nd Ed. (by Brian W.\n    Kernighan and Dennis M. Ritchie) mentions this in exercise 2-9. On April\n    19, 2006 Don Knuth pointed out to me that this method "was first published\n    by Peter Wegner in CACM 3 (1960), 322. (Also discovered independently by\n    Derrick Lehmer and published in 1964 in a book edited by Beckenbach.)"\n----------------------------------------------------------------------}\n\nbitcount :: Int -> Word -> Int\nbitcount a x = a + popCount x\n{-# INLINE bitcount #-}\n\n-- The highestBitMask implementation is based on\n-- http://graphics.stanford.edu/~seander/bithacks.html#RoundUpPowerOf2\n-- which has been put in the public domain.\n\n-- | Return a word where only the highest bit is set.\nhighestBitMask :: Word -> Word\nhighestBitMask w = shiftLL 1 (wordSize - 1 - countLeadingZeros w)\n{-# INLINE highestBitMask #-}\n\n-- Right and left logical shifts.\nshiftRL, shiftLL :: Word -> Int -> Word\nshiftRL = unsafeShiftR\nshiftLL = unsafeShiftL\n\n{-# INLINE wordSize #-}\nwordSize :: Int\nwordSize = finiteBitSize (0 :: Word)\n'