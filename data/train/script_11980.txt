b'/**\n * This code was modified by me, Paul Woitaschek. All these changes are licensed under GPLv3. The\n * original source can be found here: {@link https://github.com/alexjlockwood/material-pause-play-\n * animation/blob/master/app/src/main/java/com/alexjlockwood/example/playpauseanimation/\n * PlayPauseView.java}\n * <p/>\n * The original licensing is as follows:\n * <p/>\n * <p/>\n * The MIT License (MIT)\n * <p/>\n * Copyright (c) 2015 Alex Lockwood\n * <p/>\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and\n * associated documentation files (the "Software"), to deal in the Software without restriction,\n * including without limitation the rights to use, copy, modify, merge, publish, distribute,\n * sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * <p/>\n * The above copyright notice and this permission notice shall be included in all copies or\n * substantial portions of the Software.\n * <p/>\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING\n * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\npackage com.naman14.timber.widgets;\n\nimport android.animation.Animator;\nimport android.animation.AnimatorListenerAdapter;\nimport android.animation.ObjectAnimator;\nimport android.graphics.Canvas;\nimport android.graphics.Color;\nimport android.graphics.ColorFilter;\nimport android.graphics.Paint;\nimport android.graphics.Path;\nimport android.graphics.PixelFormat;\nimport android.graphics.drawable.Drawable;\nimport androidx.annotation.Nullable;\nimport android.util.Log;\nimport android.util.Property;\nimport android.view.animation.DecelerateInterpolator;\n\n\npublic class PlayPauseDrawable extends Drawable {\n\n\n    private static final String TAG = PlayPauseDrawable.class.getSimpleName();\n    private final Path leftPauseBar = new Path();\n    private final Path rightPauseBar = new Path();\n    private final Paint paint = new Paint();\n    private float progress;\n    private static final Property<PlayPauseDrawable, Float> PROGRESS =\n            new Property<PlayPauseDrawable, Float>(Float.class, "progress") {\n                @Override\n                public Float get(PlayPauseDrawable d) {\n                    return d.getProgress();\n                }\n\n                @Override\n                public void set(PlayPauseDrawable d, Float value) {\n                    d.setProgress(value);\n                }\n            };\n    private boolean isPlay;\n    @Nullable\n    private Animator animator;\n\n    public PlayPauseDrawable() {\n        paint.setAntiAlias(true);\n        paint.setStyle(Paint.Style.FILL);\n        paint.setColor(Color.WHITE);\n    }\n\n    /**\n     * Linear interpolate between a and b with parameter t.\n     */\n    private static float interpolate(float a, float b, float t) {\n        return a + (b - a) * t;\n    }\n\n    @Override\n    public void draw(Canvas canvas) {\n        long startDraw = System.currentTimeMillis();\n\n        leftPauseBar.rewind();\n        rightPauseBar.rewind();\n\n        // move to center of canvas\n        canvas.translate(getBounds().left, getBounds().top);\n\n        float pauseBarHeight = 7.0F / 12.0F * ((float) getBounds().height());\n        float pauseBarWidth = pauseBarHeight / 3.0F;\n        float pauseBarDistance = pauseBarHeight / 3.6F;\n\n        // The current distance between the two pause bars.\n        final float barDist = interpolate(pauseBarDistance, 0.0F, progress);\n        // The current width of each pause bar.\n        final float barWidth = interpolate(pauseBarWidth, pauseBarHeight / 1.75F, progress);\n        // The current position of the left pause bar\'s top left coordinate.\n        final float firstBarTopLeft = interpolate(0.0F, barWidth, progress);\n        // The current position of the right pause bar\'s top right coordinate.\n        final float secondBarTopRight = interpolate(2.0F * barWidth + barDist, barWidth + barDist, progress);\n\n        // Draw the left pause bar. The left pause bar transforms into the\n        // top half of the play button triangle by animating the position of the\n        // rectangle\'s top left coordinate and expanding its bottom width.\n        leftPauseBar.moveTo(0.0F, 0.0F);\n        leftPauseBar.lineTo(firstBarTopLeft, -pauseBarHeight);\n        leftPauseBar.lineTo(barWidth, -pauseBarHeight);\n        leftPauseBar.lineTo(barWidth, 0.0F);\n        leftPauseBar.close();\n\n        // Draw the right pause bar. The right pause bar transforms into the\n        // bottom half of the play button triangle by animating the position of the\n        // rectangle\'s top right coordinate and expanding its bottom width.\n        rightPauseBar.moveTo(barWidth + barDist, 0.0F);\n        rightPauseBar.lineTo(barWidth + barDist, -pauseBarHeight);\n        rightPauseBar.lineTo(secondBarTopRight, -pauseBarHeight);\n        rightPauseBar.lineTo(2.0F * barWidth + barDist, 0.0F);\n        rightPauseBar.close();\n\n        canvas.save();\n\n        // Translate the play button a tiny bit to the right so it looks more centered.\n        canvas.translate(interpolate(0.0F, pauseBarHeight / 8.0F, progress), 0.0F);\n\n        // (1) Pause --> Play: rotate 0 to 90 degrees clockwise.\n        // (2) Play --> Pause: rotate 90 to 180 degrees clockwise.\n        final float rotationProgress = isPlay ? 1.0F - progress : progress;\n        final float startingRotation = isPlay ? 90.0F : 0.0F;\n        canvas.rotate(interpolate(startingRotation, startingRotation + 90.0F, rotationProgress), getBounds().width() / 2.0F, getBounds().height() / 2.0F);\n\n        // Position the pause/play button in the center of the drawable\'s bounds.\n        canvas.translate(getBounds().width() / 2.0F - ((2.0F * barWidth + barDist) / 2.0F), getBounds().height() / 2.0F + (pauseBarHeight / 2.0F));\n\n        // Draw the two bars that form the animated pause/play button.\n        canvas.drawPath(leftPauseBar, paint);\n        canvas.drawPath(rightPauseBar, paint);\n\n        canvas.restore();\n\n        long timeElapsed = System.currentTimeMillis() - startDraw;\n        if (timeElapsed > 16) {\n            Log.e(TAG, "Drawing took too long=" + timeElapsed);\n        }\n    }\n\n    public void transformToPause(boolean animated) {\n        if (isPlay) {\n            if (animated) {\n                toggle();\n            } else {\n                isPlay = false;\n                setProgress(0.0F);\n            }\n        }\n    }\n\n    @Override\n    public void jumpToCurrentState() {\n        Log.v(TAG, "jumpToCurrentState()");\n        if (animator != null) {\n            animator.cancel();\n        }\n        setProgress(isPlay ? 1.0F : 0.0F);\n    }\n\n    public void transformToPlay(boolean animated) {\n        if (!isPlay) {\n            if (animated) {\n                toggle();\n            } else {\n                isPlay = true;\n                setProgress(1.0F);\n            }\n        }\n    }\n\n    private void toggle() {\n        if (animator != null) {\n            animator.cancel();\n        }\n\n        animator = ObjectAnimator.ofFloat(this, PROGRESS, isPlay ? 1.0F : 0.0F, isPlay ? 0.0F : 1.0F);\n        animator.addListener(new AnimatorListenerAdapter() {\n            @Override\n            public void onAnimationEnd(Animator animation) {\n                isPlay = !isPlay;\n            }\n        });\n\n        animator.setInterpolator(new DecelerateInterpolator());\n        animator.setDuration(200);\n        animator.start();\n    }\n\n    private float getProgress() {\n        return progress;\n    }\n\n    private void setProgress(float progress) {\n        this.progress = progress;\n        invalidateSelf();\n    }\n\n    @Override\n    public void setAlpha(int alpha) {\n        paint.setAlpha(alpha);\n        invalidateSelf();\n    }\n\n    @Override\n    public void setColorFilter(ColorFilter cf) {\n        paint.setColorFilter(cf);\n        invalidateSelf();\n    }\n\n\n    @Override\n    public int getOpacity() {\n        return PixelFormat.TRANSLUCENT;\n    }\n}'