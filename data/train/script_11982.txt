b'/*\n * Copyright 2013 - 2016 Mario Arias\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.funktionale.utils\n\nimport org.testng.Assert.assertEquals\nimport org.testng.annotations.Test\n\nclass UtilTest {\n\n    private val add5 = { i: Int -> i + 5 }\n    private val multiplyBy2 = { i: Int -> i * 2 }\n\n    private fun applyTwoFunctions(i: Int, firstFunction: (Int) -> Int, secondFunction: (Int) -> Int): Int {\n        val x = firstFunction(i)\n        return secondFunction(x)\n    }\n\n    @Test fun testIdentity() {\n\n        assertEquals(applyTwoFunctions(2, add5, multiplyBy2), 14)\n\n        assertEquals(applyTwoFunctions(2, add5, identity()), 7)\n\n        assertEquals(applyTwoFunctions(2, identity(), identity()), 2)\n    }\n\n    @Test fun testConstant() {\n\n        assertEquals(applyTwoFunctions(2, add5, constant(1)), 1)\n\n        val list = arrayListOf("foo", "bar", "baz")\n\n        assertEquals(list.map(constant(7)), arrayListOf(7, 7, 7))\n    }\n\n    val Greeter.receive: SetterOperation<String, String>\n        get() {\n            return SetterOperationImpl { k, v ->\n                this.receiveHello(k, v)\n            }\n        }\n\n    val Greeter.sayHello: GetterOperation<String, String>\n        get() {\n            return GetterOperationImpl { k ->\n                this.sayHelloTo(k)\n            }\n        }\n\n    @Test fun testGetterAndSetterOperations() {\n        val greeter = Greeter()\n\n        //Test Setter\n        greeter.receive["Hola"] = "Mario"\n        assertEquals("Hola from Mario", greeter.getReceivedHello())\n        assertEquals("Hello Mario", greeter.sayHello["Mario"])\n\n    }\n}\n\n\nclass Greeter {\n\n    var hello: String? = null\n    var name: String? = null\n\n    fun receiveHello(hello: String, name: String) {\n        this.hello = hello\n        this.name = name\n    }\n\n    fun getReceivedHello(): String {\n        return "$hello from $name"\n    }\n\n    fun sayHelloTo(name: String): String {\n        return "Hello $name"\n    }\n\n\n}\n\n'