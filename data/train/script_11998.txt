b'/*\n    SPDX-FileCopyrightText: 2016-2017 Milian Wolff <mail@milianw.de>\n\n    SPDX-License-Identifier: LGPL-2.1-or-later\n*/\n\n#include "topproxy.h"\n\n#include <KLocalizedString>\n\nnamespace {\nTreeModel::Columns toSource(TopProxy::Type type)\n{\n    switch (type) {\n    case TopProxy::Peak:\n        return TreeModel::PeakColumn;\n    case TopProxy::Leaked:\n        return TreeModel::LeakedColumn;\n    case TopProxy::Allocations:\n        return TreeModel::AllocationsColumn;\n    case TopProxy::Temporary:\n        return TreeModel::TemporaryColumn;\n    }\n    Q_UNREACHABLE();\n}\n}\n\nTopProxy::TopProxy(Type type, QObject* parent)\n    : QSortFilterProxyModel(parent)\n    , m_type(type)\n{\n}\n\nTopProxy::~TopProxy() = default;\n\nbool TopProxy::filterAcceptsColumn(int source_column, const QModelIndex& /*source_parent*/) const\n{\n    return source_column == TreeModel::LocationColumn || source_column == toSource(m_type);\n}\n\nbool TopProxy::filterAcceptsRow(int source_row, const QModelIndex& source_parent) const\n{\n    if (source_parent.isValid()) {\n        // only show top rows\n        return false;\n    }\n    const auto index = sourceModel()->index(source_row, toSource(m_type));\n    const auto cost = index.data(TreeModel::SortRole).toLongLong();\n    // note: explicitly exclude zero values, which could show up when we diff files\n    //       and no change was observed (overall) for a given metric\n    if (!cost || cost < m_costThreshold) {\n        // don\'t show rows that didn\'t leak anything, or didn\'t trigger any\n        // temporary allocations\n        // in general, hide anything that\'s not really interesting\n        return false;\n    }\n    return true;\n}\n\nvoid TopProxy::setSourceModel(QAbstractItemModel* sourceModel)\n{\n    QSortFilterProxyModel::setSourceModel(sourceModel);\n    connect(sourceModel, &QAbstractItemModel::modelReset, this, &TopProxy::updateCostThreshold, Qt::UniqueConnection);\n    updateCostThreshold();\n}\n\nvoid TopProxy::updateCostThreshold()\n{\n    // hide anything below 1% of the max cost\n    m_costThreshold = sourceModel()->index(0, toSource(m_type)).data(TreeModel::MaxCostRole).toLongLong() * 0.01;\n    invalidate();\n}\n'