b'\xef\xbb\xbfusing Microsoft.Win32;\nusing System;\nusing System.ComponentModel;\nusing System.IO;\n\nnamespace Aerial\n{\n    public class RegSettings\n    {\n        readonly string keyAddress = @"SOFTWARE\\AerialScreenSaver";\n        [Obsolete("Replaced with MultiMonitorMode")]\n        private bool DifferentMoviesOnDual = false;\n        [Obsolete("Replaced with MultiMonitorMode")]\n        private bool MultiscreenDisabled = true;\n        public MultiMonitorModeEnum MultiMonitorMode = RegSettings.MultiMonitorModeEnum.MainOnly;\n        public bool UseTimeOfDay = true;\n        public bool CacheVideos = true;\n        public string CacheLocation = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "Aerial");\n        public string ChosenMovies = "";\n        public string JsonURL = AerialGlobalVars.appleVideosURI;\n\n#pragma warning disable CS0618 // Type or member is obsolete\n        public RegSettings()\n        {\n            RegistryKey key = Registry.CurrentUser.OpenSubKey(keyAddress);\n            if (key != null)\n            {\n                DifferentMoviesOnDual = bool.Parse(key.GetValue(nameof(DifferentMoviesOnDual)) as string ?? "True");\n                MultiscreenDisabled = bool.Parse(key.GetValue(nameof(MultiscreenDisabled)) as string ?? "True");\n\n                if (!Enum.TryParse(key.GetValue(nameof(MultiMonitorMode)) as string, out MultiMonitorMode))\n                {\n                    // load value from legacy settings\n                    MultiMonitorMode =\n                        MultiscreenDisabled ? MultiMonitorModeEnum.MainOnly\n                        : DifferentMoviesOnDual ? MultiMonitorModeEnum.DifferentVideos : MultiMonitorModeEnum.SameOnEach;\n                }\n\n                UseTimeOfDay = bool.Parse(key.GetValue(nameof(UseTimeOfDay)) as string ?? "True");\n                CacheVideos = bool.Parse(key.GetValue(nameof(CacheVideos)) as string ?? "True");\n                CacheLocation = key.GetValue(nameof(CacheLocation)) as string;\n                ChosenMovies = (key.GetValue(nameof(ChosenMovies)) as string ?? "");\n                JsonURL = key.GetValue(nameof(JsonURL)) as string;\n            }\n        }\n\n        /// <summary>\n        /// Save text into the Registry.\n        /// </summary>\n        public void SaveSettings()\n        {\n            RegistryKey key = Registry.CurrentUser.CreateSubKey(keyAddress);\n            \n            key.SetValue(nameof(MultiMonitorMode), MultiMonitorMode);\n            key.SetValue(nameof(UseTimeOfDay), UseTimeOfDay);\n            key.SetValue(nameof(CacheVideos), CacheVideos);\n            key.SetValue(nameof(CacheLocation), CacheLocation);\n            key.SetValue(nameof(ChosenMovies), ChosenMovies);\n            key.SetValue(nameof(JsonURL), JsonURL);\n\n            // delete old keys\n            key.DeleteValue(nameof(DifferentMoviesOnDual), throwOnMissingValue: false);\n            key.DeleteValue(nameof(MultiscreenDisabled), throwOnMissingValue: false);\n        }\n#pragma warning restore CS0618 // Type or member is obsolete\n\n        public enum MultiMonitorModeEnum\n        {\n            [Description("Show on Main Screen only")]\n            MainOnly = 0,\n            [Description("Show same video on each screen")]\n            SameOnEach = 1,\n            [Description("Show different video on each screen")]\n            DifferentVideos = 5,\n            [Description("Span single video across all screens")]\n            SpanAll = 10,\n        }\n    }\n}\n'