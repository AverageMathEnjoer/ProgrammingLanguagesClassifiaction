b'package effectivejava.chapter11.item79;\nimport java.util.*;\nimport java.util.concurrent.CopyOnWriteArrayList;\n\n// Broken - invokes alien method from synchronized block!\npublic class ObservableSet<E> extends ForwardingSet<E> {\n    public ObservableSet(Set<E> set) { super(set); }\n\n//    private final List<SetObserver<E>> observers\n//            = new ArrayList<>();\n\n//    public void addObserver(SetObserver<E> observer) {\n//        synchronized(observers) {\n//            observers.add(observer);\n//        }\n//    }\n//\n//    public boolean removeObserver(SetObserver<E> observer) {\n//        synchronized(observers) {\n//            return observers.remove(observer);\n//        }\n//    }\n\n//    private void notifyElementAdded(E element) {\n//        synchronized(observers) {\n//            for (SetObserver<E> observer : observers)\n//                observer.added(this, element);\n//        }\n//    }\n\n//    // Alien method moved outside of synchronized block - open calls\n//    private void notifyElementAdded(E element) {\n//        List<SetObserver<E>> snapshot = null;\n//        synchronized(observers) {\n//            snapshot = new ArrayList<>(observers);\n//        }\n//        for (SetObserver<E> observer : snapshot)\n//            observer.added(this, element);\n//    }\n\n    // Thread-safe observable set with CopyOnWriteArrayList\n    private final List<SetObserver<E>> observers =\n            new CopyOnWriteArrayList<>();\n\n    public void addObserver(SetObserver<E> observer) {\n        observers.add(observer);\n    }\n\n    public boolean removeObserver(SetObserver<E> observer) {\n        return observers.remove(observer);\n    }\n\n    private void notifyElementAdded(E element) {\n        for (SetObserver<E> observer : observers)\n            observer.added(this, element);\n    }\n\n    @Override public boolean add(E element) {\n        boolean added = super.add(element);\n        if (added)\n            notifyElementAdded(element);\n        return added;\n    }\n\n    @Override public boolean addAll(Collection<? extends E> c) {\n        boolean result = false;\n        for (E element : c)\n            result |= add(element);  // Calls notifyElementAdded\n        return result;\n    }\n}\n'