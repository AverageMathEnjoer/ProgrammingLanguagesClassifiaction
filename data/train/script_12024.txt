b'{-# LANGUAGE GADTs #-}\n{-# LANGUAGE Rank2Types #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n\nmodule Main where\n\nimport Control.Concurrent\n  ( MVar,\n    newEmptyMVar,\n    putMVar,\n    threadDelay,\n  )\nimport Control.Monad.Trans.Crtn.Driver (Driver, driver)\nimport Control.Monad.Trans.Crtn.EventHandler (eventHandler)\nimport Event\n  ( Event\n      ( Close,\n        Message,\n        Open,\n        Render\n      ),\n  )\nimport Sample (world)\nimport Simple (simplelogger)\n\n-- |\ntest_tickingevent :: IO ()\ntest_tickingevent = do\n  dref <- newEmptyMVar :: IO (MVar (Maybe (Driver Event IO ())))\n  let logger = simplelogger --  weblogger "http://127.0.0.1:7800"\n  putMVar dref . Just $ driver logger world\n  putStrLn "starting ticking"\n  ticking dref 0\n\nsecond :: Int\nsecond = 1000000\n\n-- |\nticking :: MVar (Maybe (Driver Event IO ())) -> Int -> IO ()\nticking mvar n = do\n  putStrLn "--------------------------"\n  putStrLn ("ticking : " ++ show n)\n  if n `mod` 10 == 0\n    then eventHandler mvar Open\n    else\n      if n `mod` 10 == 5\n        then eventHandler mvar Close\n        else\n          if n `mod` 10 == 3 || n `mod` 10 == 6\n            then eventHandler mvar Render\n            else eventHandler mvar (Message ("test : " ++ show n))\n  putStrLn "_-_-_-_-_-_-_-_-_-_-_-_-_-"\n  threadDelay (1 * second)\n  ticking mvar (n + 1)\n\n{-    putStrLn "--------------------------"\n  putStrLn ("ticking : " ++ show n)\n  {- if n `mod` 10 == 0\n    then eventHandler mvar Open\n    else if n `mod` 10 == 5\n      then eventHandler mvar Close\n      else if n `mod` 10 == 3\n        then eventHandler mvar Render\n        else eventHandler mvar (Message ("test : " ++ show n)) -}\n  {- if n == 5\n    then eventHandler mvar Start\n    else if n `mod` 3 == 0\n         then eventHandler mvar Render\n         else eventHandler mvar (Message ("test : " ++ show n)) -}\n  let action | n `mod` 10 == 5 = eventHandler mvar (eventWrap (Start mycmd))\n             | n `mod` 10 == 9 = eventHandler mvar (eventWrap (Init (n `div` 10)))\n             | otherwise = eventHandler mvar (eventWrap Render)\n  action\n  putStrLn "_-_-_-_-_-_-_-_-_-_-_-_-_-"\n  threadDelay (1*second)\n  ticking mvar (n+1) -}\n\n-------------------------------\n-- test\n-------------------------------\n\nmain :: IO ()\nmain = test_tickingevent\n'