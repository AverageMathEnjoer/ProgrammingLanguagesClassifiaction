b'\xef\xbb\xbfusing System;\nusing System.Windows.Forms;\nusing System.IO;\nusing System.Linq;\nusing Aerial;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Net;\nusing System.Web.Script.Serialization;\n\nnamespace ScreenSaver\n{\n    public partial class SettingsForm : Form\n    {\n        public SettingsForm()\n        {\n            InitializeComponent();\n            \n            LoadSettings();\n            \n            //timer to update the number of current downloads every second\n            var myTimer = new Timer();\n            myTimer.Tick += new EventHandler(updateNumCurrDownloads);\n            myTimer.Interval = 1 * 1000; //1 second\n            myTimer.Start();\n        }\n\n        /// <summary>\n        /// Load display text from the Registry\n        /// </summary>\n        private void LoadSettings()\n        {\n            var settings = new RegSettings();\n            //chkDifferentMonitorMovies.Checked = settings.DifferentMoviesOnDual;\n            chkUseTimeOfDay.Checked = settings.UseTimeOfDay;\n            //chkMultiscreenDisabled.Checked = settings.MultiscreenDisabled;\n            chkCacheVideos.Checked = settings.CacheVideos;\n            cbMultiScreenMode.DataBindEnum(settings.MultiMonitorMode);\n\n            if (settings.CacheLocation == null || settings.CacheLocation == "")\n            {\n                txtCacheFolderPath.Text = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "Aerial").ToString();\n            }\n            else\n            {\n                txtCacheFolderPath.Text = settings.CacheLocation;\n            }\n\n            if (String.IsNullOrEmpty(settings.JsonURL))\n            {\n                changeVideoSourceText.Text = AerialGlobalVars.appleVideosURI;\n            } else\n            {\n                changeVideoSourceText.Text = settings.JsonURL;\n            }\n            \n            changeCacheLocationButton.Enabled = settings.CacheVideos;\n\n            ShowSpace();\n\n            PopulateChosenVideoGroup();\n\n            InitPlayer();\n        }\n\n        private void InitPlayer()\n        {\n            this.player.enableContextMenu = false;\n            this.player.settings.autoStart = true;\n            this.player.settings.enableErrorDialogs = true;\n            this.player.stretchToFit = true;\n            this.player.uiMode = "none";\n        }\n\n\n        private void PopulateChosenVideoGroup()\n        {\n            var movies = AerialContext.GetAllMovies();\n            movies.Sort();\n            if (movies.Count == 0) return; // error\n\n            AddHumanNumbers(movies);\n\n            var selected = new RegSettings().ChosenMovies.Split(\';\').ToList();\n            tvChosen.BuildTree(movies, selected);\n        }\n\n        private void tvChosen_AfterSelect(object sender, TreeViewEventArgs e)\n        {\n            Trace.WriteLine("Selected tree element " + e.Node.FullPath);\n            if (cbLivePreview.Checked && e.Node.FullPath.Contains("\\\\"))\n            {\n                string url = tvChosen.GetUrl(e.Node.FullPath);\n                player.URL = Caching.TryHit(url);\n            }\n        }\n\n        private static void AddHumanNumbers(List<Asset> movies)\n        {\n            int n = 1;\n            for (int i = 1; i < movies.Count; i++)\n            {\n                if (movies[i - 1].ShortName() == movies[i].ShortName())\n                {\n                    movies[i - 1].numeric = n;\n                    n++;\n                    movies[i].numeric = n;\n                }\n                else\n                {\n                    if (n != 1)\n                    {\n                        movies[i - 1].numeric = n;\n                        n = 1;\n                        movies[i].numeric = n;\n                    }\n                    else\n                    {\n                        movies[i - 1].numeric = 0;\n                        movies[i].numeric = n;\n                    }\n                }\n            }\n            if (movies.Count > 0 && movies.Last().numeric == 1) movies.Last().numeric = 0;\n        }\n\n        void HideChosenVideoGroup()\n        {\n            // while developing\n            tabs.TabPages.Remove(tabAbout);\n            grpChosenVideos.Hide();\n        }\n\n        private void updateNumCurrDownloads(object sender, EventArgs e)\n        {\n            numOfCurrDown_lbl.Text = "# of files downloading: " + Caching.NumOfCurrentDownloads;\n        }\n\n        private void ShowSpace()\n        {\n            var cacheSize = NativeMethods.GetExplorerFileSize(Caching.GetDirectorySize());\n            lblCacheSize.Text = "Current Cache Size: " + cacheSize;\n\n            var cacheFree = NativeMethods.GetExplorerFileSize(Caching.CacheSpace());\n            lblFreeSpace.Text = "Free Space Available on drive: " + cacheFree;\n\n        }\n\n        /// <summary>\n        /// Save text into the Registry.\n        /// </summary>\n        private void SaveSettings()\n        {\n            var settings = new RegSettings();\n            settings.MultiMonitorMode = (RegSettings.MultiMonitorModeEnum)cbMultiScreenMode.SelectedValue;\n            settings.UseTimeOfDay = chkUseTimeOfDay.Checked;\n            settings.CacheVideos = chkCacheVideos.Checked;\n\n            string oldCacheDirectory = settings.CacheLocation;\n            settings.CacheLocation = txtCacheFolderPath.Text;\n            settings.JsonURL = changeVideoSourceText.Text;\n\n            settings.ChosenMovies = tvChosen.ConcatChosenEntities();\n\n            settings.SaveSettings();\n\n            Caching.UpdateCachePath(oldCacheDirectory, settings.CacheLocation);\n        }\n\n\n        private void okButton_Click(object sender, EventArgs e)\n        {\n            SaveSettings();\n            Close();\n        }\n\n        private void cancelButton_Click(object sender, EventArgs e)\n        {\n            Close();\n        }\n\n        private void changeCacheLocationButton_Click(object sender, EventArgs e)\n        {\n            folderBrowserDialog.SelectedPath = txtCacheFolderPath.Text;\n            DialogResult result = folderBrowserDialog.ShowDialog();\n            if (result == DialogResult.OK)\n            {\n                txtCacheFolderPath.Text = folderBrowserDialog.SelectedPath;\n            }\n            ShowSpace();\n        }\n\n        private void chkCacheVideos_CheckedChanged(object sender, EventArgs e)\n        {\n            changeCacheLocationButton.Enabled = chkCacheVideos.Checked;\n        }\n\n        private void SettingsForm_Load(object sender, EventArgs e)\n        {\n            this.lblVersion.Text = "Current Version " + AssemblyVersion.ExecutingAssemblyVersion + " (" + AssemblyVersion.CompileDate.ToShortDateString() + ")";\n        }\n\n        private void lblVersion_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)\n        {\n            ProcessStartInfo sInfo = new ProcessStartInfo(getLatestReleaseURI());\n            Process.Start(sInfo);\n        }\n\n        private void btnOpenCache_Click(object sender, EventArgs e)\n        {\n            Process.Start(Caching.CacheFolder);\n        }\n\n        private void btnPurgeCache_Click(object sender, EventArgs e)\n        {\n            if (MessageBox.Show("Are you sure you want to delete all cached files?", "Delete Cache?") == DialogResult.OK)\n            {\n                Caching.DeleteCache();\n            }\n            ShowSpace();\n        }\n\n\n        private void timerDiskUpdate_Tick(object sender, EventArgs e)\n        {\n            ShowSpace();\n        }\n\n        private string getLatestReleaseURI()\n        {\n            string releaseData = "";\n\n            using (WebClient w = new WebClient())\n            {\n                w.Headers.Add("User-Agent: Other");  //github will give a 403 if we don\'t define the user agent\n                try\n                {\n                    releaseData = w.DownloadString(AerialGlobalVars.githubLatestReleaseDetails);\n                } catch (WebException)\n                {\n                    //if we have an error reading the release data, just use the standard URL for all releases (AKA do nothing here)\n                }\n            }\n            var deserializedData = new JavaScriptSerializer().Deserialize<dynamic>(releaseData);\n\n            string githubURL = "";\n\n            if (String.IsNullOrEmpty(releaseData))\n            {\n                githubURL = AerialGlobalVars.githubAllReleases; //URL for all releases\n            } else\n            {\n                githubURL = deserializedData["html_url"];\n            }\n\n            return githubURL;\n        }\n\n        private void videoSourceResetButton_Click(object sender, EventArgs e)\n        {\n            changeVideoSourceText.Text = AerialGlobalVars.appleVideosURI;\n        }\n\n        private void SetToFourK_btn_Click(object sender, EventArgs e)\n        {\n            changeVideoSourceText.Text = AerialGlobalVars.applefourKVideoURI;\n        }\n\n        private void fullDownloadBtn_Click(object sender, EventArgs e)\n        {\n            var movies = AerialContext.GetAllMovies();\n\n\n            var cacheFree = NativeMethods.GetExplorerFileSize(Caching.CacheSpace());\n            if (MessageBox.Show("Downloading all videos may take over 10GB of space, do you want to procede? " +\n                                "(You currently have " + cacheFree + " of space free)", "Download?", MessageBoxButtons.YesNo) != DialogResult.Yes)\n            {\n                //don\'t download if user cancels\n                return;\n            }\n\n            try\n            {\n                foreach (var movie in movies)\n                {\n                    if (!Caching.IsHit(movie.url))\n                    {\n                        Caching.StartDelayedCache(movie.url);\n                        Trace.WriteLine("Downloading " + movie.url);\n                    } else\n                    {\n                        Trace.WriteLine(movie.url + " is already cached");\n                    }\n                }\n            } catch (WebException err)\n            {\n                Trace.WriteLine("Error downloading all videos: " + err.ToString());\n            }\n        }\n    }\n}\n'