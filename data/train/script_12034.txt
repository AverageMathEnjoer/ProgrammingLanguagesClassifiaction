b'#include "stdafx.h"\n#include "InstallDialog.h"\n#include "resource.h"\n#include "../libStringConverter/convert.h"\n#include "../AssetsTools/InternalBundleReplacer.h"\n#include "../UABE_Win32/FileDialog.h"\n#include <ObjBase.h>\n\nLRESULT CALLBACK InstallWndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam);\nINT_PTR CALLBACK DescriptionDlgProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam);\nINT_PTR CALLBACK PrepareDlgProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam);\n\nATOM RegisterInstallWindowClass(HINSTANCE hInstance)\n{\n\tWNDCLASSEX wcex;\n\n\twcex.cbSize = sizeof(WNDCLASSEX);\n\n\twcex.style\t\t\t= CS_HREDRAW | CS_VREDRAW;\n\twcex.lpfnWndProc\t= InstallWndProc;\n\twcex.cbClsExtra\t\t= 0;\n\twcex.cbWndExtra\t\t= 0;\n\twcex.hInstance\t\t= hInstance;\n\twcex.hIcon\t\t\t= LoadIcon(hInstance, MAKEINTRESOURCE(IDI_MODINSTALLER));\n\twcex.hCursor\t\t= LoadCursor(NULL, IDC_ARROW);\n\twcex.hbrBackground\t= (HBRUSH)(COLOR_WINDOW+0);\n\twcex.lpszMenuName\t= NULL;\n\twcex.lpszClassName\t= L"UABE_ModInstaller";\n\twcex.hIconSm\t\t= NULL;\n\n\treturn RegisterClassEx(&wcex);\n}\nLRESULT CALLBACK InstallWndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)\n{\n\tint wmId, wmEvent;\n\n\tswitch (message)\n\t{\n\t\tcase WM_COMMAND:\n\t\t\twmId    = LOWORD(wParam);\n\t\t\twmEvent = HIWORD(wParam);\n\t\t\treturn DefWindowProc(hWnd, message, wParam, lParam);\n\t\tcase WM_SIZE:\n\t\t\t{\n\t\t\t\tuint16_t width = LOWORD(lParam); uint16_t height = HIWORD(lParam);\n\t\t\t\tInstallDialogsData *pData = (InstallDialogsData*)GetWindowLongPtr(hWnd, GWLP_USERDATA);\n\t\t\t\tfor (int i = 0; i < InstallDialog_COUNT; i++)\n\t\t\t\t{\n\t\t\t\t\tMoveWindow(pData->hDialogs[i], 0, 0, width, height, TRUE);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn (LRESULT)1;\n\t\tcase WM_DESTROY:\n\t\t\t{\n\t\t\t\tInstallDialogsData *pData = (InstallDialogsData*)GetWindowLongPtr(hWnd, GWLP_USERDATA);\n\t\t\t\tpData->closeWindows = true;\n\t\t\t\t//PostQuitMessage(0);\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn DefWindowProc(hWnd, message, wParam, lParam);\n\t}\n\treturn 0;\n}\nvoid SetTitleFont(HWND hStatic)\n{\n\tHFONT origFont = (HFONT)SendMessage(hStatic, WM_GETFONT, 0, 0);\n\tLOGFONT logfont = {};\n\tGetObject(origFont, sizeof(LOGFONT), &logfont);\n\tlogfont.lfWeight = FW_BOLD;\n\tlogfont.lfHeight = -16;\n\tHFONT newFont = CreateFontIndirect(&logfont);\n\tSendMessage(hStatic, WM_SETFONT, (WPARAM)newFont, (LPARAM)FALSE);\n}\nINT_PTR CALLBACK PrepareDlgProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)\n{\n\tUNREFERENCED_PARAMETER(lParam);\n\tswitch (message)\n\t{\n\tcase WM_INITDIALOG:\n\t\treturn (INT_PTR)TRUE;\n\t}\n\treturn (INT_PTR)FALSE;\n}\n#include "Licences.h"\nINT_PTR CALLBACK LicenceDlgProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)\n{\n\tUNREFERENCED_PARAMETER(lParam);\n\tswitch (message)\n\t{\n\tcase WM_INITDIALOG:\n\t\t{\n\t\t\tHWND hLicencesEdit = GetDlgItem(hDlg, IDC_LICENCES);\n\t\t\tEdit_SetText(hLicencesEdit, LicencesText);\n\t\t}\n\t\treturn (INT_PTR)TRUE;\n\tcase WM_COMMAND:\n\t\tif (LOWORD(wParam) == IDOK || LOWORD(wParam) == IDCANCEL)\n\t\t{\n\t\t\tEndDialog(hDlg, LOWORD(wParam));\n\t\t\treturn (INT_PTR)TRUE;\n\t\t}\n\t\tbreak;\n\t}\n\treturn (INT_PTR)FALSE;\n}\nINT_PTR CALLBACK IntroductionDlgProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)\n{\n\tUNREFERENCED_PARAMETER(lParam);\n\tswitch (message)\n\t{\n\tcase WM_INITDIALOG:\n\t\t{\n\t\t\tHWND hSetupTitle = GetDlgItem(hDlg, IDC_SETUPTITLE);\n\t\t\tSetTitleFont(hSetupTitle);\n\t\t}\n\t\treturn (INT_PTR)TRUE;\n\tcase WM_DESTROY:\n\t\t{\n\t\t\tHWND hSetupTitle = GetDlgItem(hDlg, IDC_SETUPTITLE);\n\t\t\tHFONT modifiedFont = (HFONT)SendMessage(hSetupTitle, WM_GETFONT, 0, 0);\n\t\t\tDeleteObject((HGDIOBJ)modifiedFont);\n\t\t}\n\t\treturn (INT_PTR)TRUE;\n\tcase WM_SIZE:\n\t\t{\n\t\t\tint width = LOWORD(lParam); int height = HIWORD(lParam);\n\t\t\tHWND hSetupTitle = GetDlgItem(hDlg, IDC_SETUPTITLE);\n\t\t\tHWND hIntroduction = GetDlgItem(hDlg, IDC_SINTRODUCTION);\n\t\t\tHWND hLicencelink = GetDlgItem(hDlg, IDC_LICENCELINK);\n\t\t\tHWND hBack = GetDlgItem(hDlg, IDC_BACK);\n\t\t\tHWND hNext = GetDlgItem(hDlg, IDC_NEXT);\n\t\t\tHWND hCancel = GetDlgItem(hDlg, IDC_CANCEL);\n\t\t\tSetWindowPos(hSetupTitle, NULL, 0, 0, width - 2, 18, SWP_NOMOVE | SWP_NOZORDER | SWP_NOACTIVATE);\n\t\t\tSetWindowPos(hIntroduction, NULL, 0, 0, width - 8, height - 56, SWP_NOMOVE | SWP_NOZORDER | SWP_NOACTIVATE);\n\t\t\tSetWindowPos(hLicencelink, NULL, 5, height - 26, width / 5 - 10, 23, SWP_NOZORDER | SWP_NOACTIVATE);\n\t\t\tSetWindowPos(hBack, NULL, width / 5, height - 26, (width - 10) / 4, 23, SWP_NOZORDER | SWP_NOACTIVATE);\n\t\t\tSetWindowPos(hNext, NULL, 9 * width / 20 + 4, height - 26, (width - 10) / 4, 23, SWP_NOZORDER | SWP_NOACTIVATE);\n\t\t\tSetWindowPos(hCancel, NULL, width - width / 4 - 4, height - 26, (width - 10) / 4, 23, SWP_NOZORDER | SWP_NOACTIVATE);\n\t\t}\n\t\treturn (INT_PTR)TRUE;\n\tcase WM_COMMAND:\n\t\tif (LOWORD(wParam) == IDC_NEXT)\n\t\t{\n\t\t\tDialogController_Introduction *pController = (DialogController_Introduction*)GetWindowLongPtr(hDlg, GWLP_USERDATA);\n\t\t\tShowInstallDialog(pController->GetDialogsData(), (EInstallDialogs)(pController->GetOwnDialogType() + 1));\n\t\t}\n\t\telse if (LOWORD(wParam) == IDC_CANCEL)\n\t\t{\n\t\t\tDialogController_Introduction *pController = (DialogController_Introduction*)GetWindowLongPtr(hDlg, GWLP_USERDATA);\n\t\t\tOnCancelPressed(pController->GetDialogsData());\n\t\t}\n\t\telse\n\t\t\tbreak;\n\t\treturn (INT_PTR)TRUE;\n\tcase WM_NOTIFY:\n\t\tif (((NMHDR*)lParam)->idFrom == IDC_LICENCELINK)\n\t\t{\n\t\t\tswitch (((NMHDR*)lParam)->code)\n\t\t\t{\n\t\t\t\tcase NM_CLICK:\n\t\t\t\tcase NM_RETURN:\n\t\t\t\t\tDialogBox((HINSTANCE)GetWindowLongPtr(hDlg, GWLP_HINSTANCE), MAKEINTRESOURCE(IDD_LICENCES), hDlg, LicenceDlgProc);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn (INT_PTR)FALSE;\n}\nINT_PTR CALLBACK DescriptionDlgProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)\n{\n\tUNREFERENCED_PARAMETER(lParam);\n\tswitch (message)\n\t{\n\tcase WM_INITDIALOG:\n\t\t{\n\t\t\tHWND hSetupTitle = GetDlgItem(hDlg, IDC_SETUPTITLE);\n\t\t\tSetTitleFont(hSetupTitle);\n\t\t}\n\t\treturn (INT_PTR)TRUE;\n\tcase WM_DESTROY:\n\t\t{\n\t\t\tHWND hSetupTitle = GetDlgItem(hDlg, IDC_SETUPTITLE);\n\t\t\tHFONT modifiedFont = (HFONT)SendMessage(hSetupTitle, WM_GETFONT, 0, 0);\n\t\t\tDeleteObject((HGDIOBJ)modifiedFont);\n\t\t}\n\t\treturn (INT_PTR)TRUE;\n\tcase WM_SIZE:\n\t\t{\n\t\t\tint width = LOWORD(lParam); int height = HIWORD(lParam);\n\t\t\tHWND hSetupTitle = GetDlgItem(hDlg, IDC_SETUPTITLE);\n\t\t\tHWND hCancel = GetDlgItem(hDlg, IDC_CANCEL);\n\t\t\tHWND hAuthors = GetDlgItem(hDlg, IDC_AUTHORS);\n\t\t\tHWND hDescription = GetDlgItem(hDlg, IDC_DESCRIPTION);\n\t\t\tHWND hBack = GetDlgItem(hDlg, IDC_BACK);\n\t\t\tHWND hNext = GetDlgItem(hDlg, IDC_NEXT);\n\t\t\tSetWindowPos(hSetupTitle, NULL, 0, 0, width - 2, 18, SWP_NOMOVE | SWP_NOZORDER | SWP_NOACTIVATE);\n\t\t\tSetWindowPos(hAuthors, NULL, 0, 0, width - 4, 32, SWP_NOMOVE | SWP_NOZORDER | SWP_NOACTIVATE);\n\t\t\tSetWindowPos(hDescription, NULL, 0, 0, width - 8, height - 88, SWP_NOMOVE | SWP_NOZORDER | SWP_NOACTIVATE);\n\t\t\tSetWindowPos(hCancel, NULL, width - width / 4 - 4, height - 26, (width - 10) / 4, 23, SWP_NOZORDER | SWP_NOACTIVATE);\n\t\t\tSetWindowPos(hBack, NULL, width / 5, height - 26, (width - 10) / 4, 23, SWP_NOZORDER | SWP_NOACTIVATE);\n\t\t\tSetWindowPos(hNext, NULL, 9 * width / 20 + 4, height - 26, (width - 10) / 4, 23, SWP_NOZORDER | SWP_NOACTIVATE);\n\t\t}\n\t\treturn (INT_PTR)TRUE;\n\tcase WM_COMMAND:\n\t\t{\n\t\t\tDialogController_Description *pController = (DialogController_Description*)GetWindowLongPtr(hDlg, GWLP_USERDATA);\n\t\t\tswitch (LOWORD(wParam))\n\t\t\t{\n\t\t\t\tcase IDC_BACK:\n\t\t\t\t\tShowInstallDialog(pController->GetDialogsData(), (EInstallDialogs)(pController->GetOwnDialogType() - 1));\n\t\t\t\t\tbreak;\n\t\t\t\tcase IDC_NEXT:\n\t\t\t\t\tShowInstallDialog(pController->GetDialogsData(), (EInstallDialogs)(pController->GetOwnDialogType() + 1));\n\t\t\t\t\tbreak;\n\t\t\t\tcase IDC_CANCEL:\n\t\t\t\t\tOnCancelPressed(pController->GetDialogsData());\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\treturn (INT_PTR)FALSE;\n\t\t\t}\n\t\t\treturn (INT_PTR)TRUE;\n\t\t}\n\t}\n\treturn (INT_PTR)FALSE;\n}\nINT_PTR CALLBACK PathSelectDlgProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)\n{\n\tUNREFERENCED_PARAMETER(lParam);\n\tswitch (message)\n\t{\n\tcase WM_INITDIALOG:\n\t\t{\n\t\t\tHWND hSetupTitle = GetDlgItem(hDlg, IDC_SETUPTITLE);\n\t\t\tSetTitleFont(hSetupTitle);\n\t\t}\n\t\treturn (INT_PTR)TRUE;\n\tcase WM_DESTROY:\n\t\t{\n\t\t\tHWND hSetupTitle = GetDlgItem(hDlg, IDC_SETUPTITLE);\n\t\t\tHFONT modifiedFont = (HFONT)SendMessage(hSetupTitle, WM_GETFONT, 0, 0);\n\t\t\tDeleteObject((HGDIOBJ)modifiedFont);\n\t\t}\n\t\treturn (INT_PTR)TRUE;\n\tcase WM_SIZE:\n\t\t{\n\t\t\tint width = LOWORD(lParam); int height = HIWORD(lParam);\n\t\t\tHWND hNext = GetDlgItem(hDlg, IDC_NEXT);\n\t\t\tHWND hBack = GetDlgItem(hDlg, IDC_BACK);\n\t\t\tHWND hCancel = GetDlgItem(hDlg, IDC_CANCEL);\n\t\t\tHWND hSetupTitle = GetDlgItem(hDlg, IDC_SETUPTITLE);\n\t\t\tHWND hEditPath = GetDlgItem(hDlg, IDC_EDITPATH);\n\t\t\tHWND hBtnPathSelect = GetDlgItem(hDlg, IDC_BTNPATHSELECT);\n\t\t\tHWND hTreeMods = GetDlgItem(hDlg, IDC_TREEMODS);\n\t\t\tSetWindowPos(hNext, NULL, 9 * width / 20 + 4, height - 26, (width - 10) / 4, 23, SWP_NOZORDER | SWP_NOACTIVATE);\n\t\t\tSetWindowPos(hBack, NULL, width / 5, height - 26, (width - 10) / 4, 23, SWP_NOZORDER | SWP_NOACTIVATE);\n\t\t\tSetWindowPos(hCancel, NULL, width - width / 4 - 4, height - 26, (width - 10) / 4, 23, SWP_NOZORDER | SWP_NOACTIVATE);\n\t\t\tSetWindowPos(hSetupTitle, NULL, 0, 0, width - 2, 18, SWP_NOMOVE | SWP_NOZORDER | SWP_NOACTIVATE);\n\t\t\tSetWindowPos(hEditPath, NULL, 5, 56, (int)((float)width / 10.0F * 8.0F) - 12, 26, SWP_NOZORDER | SWP_NOACTIVATE);\n\t\t\tSetWindowPos(hBtnPathSelect, NULL, width - width / 5 - 5, 56, (width - 10) / 5 - 2, 24, SWP_NOZORDER | SWP_NOACTIVATE);\n\t\t\tSetWindowPos(hTreeMods, NULL, 6, 86, width - 11, height - 116, SWP_NOZORDER | SWP_NOACTIVATE);\n\t\t}\n\t\treturn (INT_PTR)TRUE;\n\tcase WM_COMMAND:\n\t\t{\n\t\t\tDialogController_PathSelect *pController = (DialogController_PathSelect*)GetWindowLongPtr(hDlg, GWLP_USERDATA);\n\t\t\tswitch (LOWORD(wParam))\n\t\t\t{\n\t\t\t\tcase IDC_BACK:\n\t\t\t\t\tShowInstallDialog(pController->GetDialogsData(), (EInstallDialogs)(pController->GetOwnDialogType() - 1));\n\t\t\t\t\tbreak;\n\t\t\t\tcase IDC_NEXT:\n\t\t\t\t\tShowInstallDialog(pController->GetDialogsData(), (EInstallDialogs)(pController->GetOwnDialogType() + 1));\n\t\t\t\t\tbreak;\n\t\t\t\tcase IDC_CANCEL:\n\t\t\t\t\tOnCancelPressed(pController->GetDialogsData());\n\t\t\t\t\tbreak;\n\t\t\t\tcase IDC_BTNPATHSELECT:\n\t\t\t\t\t{\n\t\t\t\t\t\tHWND hEditPath = GetDlgItem(hDlg, IDC_EDITPATH);\n\t\t\t\t\t\tWCHAR *pFolder = NULL;\n\t\t\t\t\t\tif (hEditPath && ShowFolderSelectDialog(hDlg, &pFolder))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSetWindowTextW(hEditPath, pFolder);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (pFolder)\n\t\t\t\t\t\t\tFreeCOMFilePathBuf(&pFolder);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\treturn (INT_PTR)FALSE;\n\t\t\t}\n\t\t\treturn (INT_PTR)TRUE;\n\t\t}\n\t}\n\treturn (INT_PTR)FALSE;\n}\nINT_PTR CALLBACK ProgressDlgProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)\n{\n\tUNREFERENCED_PARAMETER(lParam);\n\tswitch (message)\n\t{\n\tcase WM_INITDIALOG:\n\t\t{\n\t\t\tHWND hSetupTitle = GetDlgItem(hDlg, IDC_SETUPTITLE);\n\t\t\tSetTitleFont(hSetupTitle);\n\t\t}\n\t\treturn (INT_PTR)TRUE;\n\tcase WM_DESTROY:\n\t\t{\n\t\t\tHWND hSetupTitle = GetDlgItem(hDlg, IDC_SETUPTITLE);\n\t\t\tHFONT modifiedFont = (HFONT)SendMessage(hSetupTitle, WM_GETFONT, 0, 0);\n\t\t\tDeleteObject((HGDIOBJ)modifiedFont);\n\t\t}\n\t\treturn (INT_PTR)TRUE;\n\tcase WM_SIZE:\n\t\t{\n\t\t\tint width = LOWORD(lParam); int height = HIWORD(lParam);\n\t\t\tHWND hNext = GetDlgItem(hDlg, IDC_NEXT);\n\t\t\tHWND hCancel = GetDlgItem(hDlg, IDC_CANCEL);\n\t\t\tHWND hSetupTitle = GetDlgItem(hDlg, IDC_SETUPTITLE);\n\t\t\tHWND hProgInstall = GetDlgItem(hDlg, IDC_PROGINSTALL);\n\t\t\tHWND hSCurFile = GetDlgItem(hDlg, IDC_SCURFILE);\n\t\t\tHWND hEditStatus = GetDlgItem(hDlg, IDC_EDITSTATUS);\n\t\t\tSetWindowPos(hNext, NULL, 9 * width / 20 + 4, height - 26, (width - 10) / 4, 23, SWP_NOZORDER | SWP_NOACTIVATE);\n\t\t\tSetWindowPos(hCancel, NULL, width - width / 4 - 4, height - 26, (width - 10) / 4, 23, SWP_NOZORDER | SWP_NOACTIVATE);\n\t\t\tSetWindowPos(hSetupTitle, NULL, 0, 0, width - 2, 18, SWP_NOMOVE | SWP_NOZORDER | SWP_NOACTIVATE);\n\t\t\tSetWindowPos(hProgInstall, NULL, 5, 70, width - 10, 20, SWP_NOZORDER | SWP_NOACTIVATE);\n\t\t\tSetWindowPos(hSCurFile, NULL, 5, 90, width - 10, 18, SWP_NOZORDER | SWP_NOACTIVATE);\n\t\t\tSetWindowPos(hEditStatus, NULL, 6, 108, width - 11, height - 134, SWP_NOZORDER | SWP_NOACTIVATE);\n\t\t}\n\t\treturn (INT_PTR)TRUE;\n\tcase WM_COMMAND:\n\t\t{\n\t\t\tDialogController_Progress *pController = (DialogController_Progress*)GetWindowLongPtr(hDlg, GWLP_USERDATA);\n\t\t\tswitch (LOWORD(wParam))\n\t\t\t{\n\t\t\t\tcase IDC_NEXT:\n\t\t\t\t\tShowInstallDialog(pController->GetDialogsData(), (EInstallDialogs)(pController->GetOwnDialogType() + 1));\n\t\t\t\t\tbreak;\n\t\t\t\tcase IDC_CANCEL:\n\t\t\t\t\t{\n\t\t\t\t\t\tDWORD result = MessageBox(hDlg, \n\t\t\t\t\t\t\tTEXT("Do you really want to cancel the mod installation?\\r\\n")\\\n\t\t\t\t\t\t\tTEXT("The installer will finish the current operation and then revert the changes."), \n\t\t\t\t\t\t\tTEXT("UABE Mod Installer"), MB_YESNO | MB_ICONINFORMATION);\n\t\t\t\t\t\tif (result == IDYES)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpController->SetCancelled(true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\treturn (INT_PTR)FALSE;\n\t\t\t}\n\t\t\treturn (INT_PTR)TRUE;\n\t\t}\n\t}\n\treturn (INT_PTR)FALSE;\n}\nINT_PTR CALLBACK CompleteDlgProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)\n{\n\tUNREFERENCED_PARAMETER(lParam);\n\tswitch (message)\n\t{\n\tcase WM_INITDIALOG:\n\t\t{\n\t\t\tHWND hSetupTitle = GetDlgItem(hDlg, IDC_SETUPTITLE);\n\t\t\tSetTitleFont(hSetupTitle);\n\t\t}\n\t\treturn (INT_PTR)TRUE;\n\tcase WM_SIZE:\n\t\t{\n\t\t\tint width = LOWORD(lParam); int height = HIWORD(lParam);\n\t\t\tHWND hSetupTitle = GetDlgItem(hDlg, IDC_SETUPTITLE);\n\t\t\tHWND hClose = GetDlgItem(hDlg, IDC_CLOSE);\n\t\t\tHWND hCompleteText = GetDlgItem(hDlg, IDC_COMPLETETEXT);\n\t\t\tHWND hModAuthors = GetDlgItem(hDlg, IDC_MODAUTHORS);\n\t\t\tHWND hInstAuthor = GetDlgItem(hDlg, IDC_INSTAUTHOR);\n\t\t\tHWND hBack = GetDlgItem(hDlg, IDC_BACK);\n\t\t\tSetWindowPos(hSetupTitle, NULL, 0, 0, width - 2, 18, SWP_NOMOVE | SWP_NOZORDER | SWP_NOACTIVATE);\n\t\t\tSetWindowPos(hCompleteText, NULL, 2, 20, width - 4, height - 120, SWP_NOMOVE | SWP_NOZORDER | SWP_NOACTIVATE);\n\t\t\tSetWindowPos(hModAuthors, NULL, 2, height - 100, width - 4, 40, SWP_NOZORDER | SWP_NOACTIVATE);\n\t\t\tSetWindowPos(hInstAuthor, NULL, 2, height - 60, width - 4, 20, SWP_NOACTIVATE);\n\t\t\tSetWindowPos(hClose, NULL, width - width / 4 - 4, height - 26, (width - 10) / 4, 23, SWP_NOZORDER | SWP_NOACTIVATE);\n\t\t\tSetWindowPos(hBack, NULL, width / 5, height - 26, (width - 10) / 4, 23, SWP_NOZORDER | SWP_NOACTIVATE);\n\t\t}\n\t\treturn (INT_PTR)TRUE;\n\tcase WM_DESTROY:\n\t\t{\n\t\t\tHWND hSetupTitle = GetDlgItem(hDlg, IDC_SETUPTITLE);\n\t\t\tHFONT modifiedFont = (HFONT)SendMessage(hSetupTitle, WM_GETFONT, 0, 0);\n\t\t\tDeleteObject((HGDIOBJ)modifiedFont);\n\t\t}\n\t\treturn (INT_PTR)TRUE;\n\tcase WM_COMMAND:\n\t\t{\n\t\t\tDialogController_Complete *pController = (DialogController_Complete*)GetWindowLongPtr(hDlg, GWLP_USERDATA);\n\t\t\tswitch (LOWORD(wParam))\n\t\t\t{\n\t\t\t\tcase IDC_BACK:\n\t\t\t\t\tShowInstallDialog(pController->GetDialogsData(), (EInstallDialogs)(pController->GetOwnDialogType() - 1));\n\t\t\t\t\tbreak;\n\t\t\t\tcase IDC_CLOSE:\n\t\t\t\t\tpController->GetDialogsData()->closeWindows = true;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\treturn (INT_PTR)FALSE;\n\t\t\t}\n\t\t\treturn (INT_PTR)TRUE;\n\t\t}\n\t}\n\treturn (INT_PTR)FALSE;\n}\n\ntypedef DialogController*(__cdecl *DialogControllerConstructor)(HWND hDialog, HWND hParentWindow, InstallDialogsData *dialogsData);\nDialogController *ConstructPrepareDialogController(HWND hDialog, HWND hParentWindow, InstallDialogsData *dialogsData)\n{\n\treturn new DialogController_Prepare(hDialog, hParentWindow, dialogsData);\n}\nDialogController *ConstructIntroductionDialogController(HWND hDialog, HWND hParentWindow, InstallDialogsData *dialogsData)\n{\n\treturn new DialogController_Introduction(hDialog, hParentWindow, dialogsData);\n}\nDialogController *ConstructDescriptionDialogController(HWND hDialog, HWND hParentWindow, InstallDialogsData *dialogsData)\n{\n\treturn new DialogController_Description(hDialog, hParentWindow, dialogsData);\n}\nDialogController *ConstructPathSelectDialogController(HWND hDialog, HWND hParentWindow, InstallDialogsData *dialogsData)\n{\n\treturn new DialogController_PathSelect(hDialog, hParentWindow, dialogsData);\n}\nDialogController *ConstructProgressDialogController(HWND hDialog, HWND hParentWindow, InstallDialogsData *dialogsData)\n{\n\treturn new DialogController_Progress(hDialog, hParentWindow, dialogsData);\n}\nDialogController *ConstructCompleteDialogController(HWND hDialog, HWND hParentWindow, InstallDialogsData *dialogsData)\n{\n\treturn new DialogController_Complete(hDialog, hParentWindow, dialogsData);\n}\nconst struct {uint16_t id; DLGPROC proc; DialogControllerConstructor constr;} InstallDialogCreateInfo[] = {\n\t{ IDD_PREPARE, PrepareDlgProc, ConstructPrepareDialogController},\n\t{ IDD_INTRODUCTION, IntroductionDlgProc, ConstructIntroductionDialogController},\n\t{ IDD_DESCRIPTION, DescriptionDlgProc, ConstructDescriptionDialogController},\n\t{ IDD_PATHSELECT, PathSelectDlgProc, ConstructPathSelectDialogController},\n\t{ IDD_PROGRESS, ProgressDlgProc, ConstructProgressDialogController},\n\t{ IDD_COMPLETE, CompleteDlgProc, ConstructCompleteDialogController},\n};\n\nstruct DialogMessageThreadParam\n{\n\tInstallDialogsData *ret;\n\tHINSTANCE hInstance;\n\tHANDLE readyEvent;\n};\nDWORD WINAPI InstallDialogsMessageThread(PVOID _param)\n{\n\tDialogMessageThreadParam *param = (DialogMessageThreadParam*)_param;\n\tInstallDialogsData *dialogsData = param->ret;\n\tHINSTANCE hInstance = param->hInstance;\n\t{\n\t\tInstallDialogsData *ret = param->ret;\n\t\tHRESULT hr = CoInitializeEx(NULL, COINIT_APARTMENTTHREADED | \n\t\t\tCOINIT_DISABLE_OLE1DDE);\n\t\tif (!FAILED(hr))\n\t\t{\n\t\t\tINITCOMMONCONTROLSEX init;\n\t\t\tinit.dwSize = sizeof(init);\n\t\t\tinit.dwICC = ICC_PROGRESS_CLASS | ICC_LINK_CLASS;\n\t\t\tif (!InitCommonControlsEx(&init))\n\t\t\t\thr = E_FAIL;\n\t\t}\n\t\tif (FAILED(hr))\n\t\t{\n\t\t\tTCHAR sprntTmp[100];\n\t\t\t_stprintf_s(sprntTmp, TEXT("Fatal error : Unable to initialize the COM (HRESULT %X)!"), hr);\n\t\t\tMessageBox(NULL, sprntTmp, TEXT("ERROR"), 16);\n\t\t\tCoUninitialize();\n\t\t\tdelete ret;\n\t\t\tparam->ret = NULL;\n\t\t\tSetEvent(param->readyEvent);\n\t\t\treturn NULL;\n\t\t}\n\t\tret->dialogChangedEvent = CreateEvent(NULL, FALSE, TRUE, NULL);\n\t\tret->freeDialogResourcesEvent = CreateEvent(NULL, TRUE, FALSE, NULL);\n\t\tret->dialogThreadClosedEvent = CreateEvent(NULL, TRUE, FALSE, NULL);\n\t\tRegisterInstallWindowClass(hInstance);\n\t\tret->hWindow = CreateWindow(L"UABE_ModInstaller", L"UABE Mod Installer", WS_OVERLAPPEDWINDOW,\n\t\t\tCW_USEDEFAULT, 0, 100, 100, NULL, NULL, hInstance, NULL);\n\t\tif (ret->hWindow == NULL)\n\t\t{\n\t\t\tCloseHandle(ret->dialogThreadClosedEvent);\n\t\t\tCloseHandle(ret->freeDialogResourcesEvent);\n\t\t\tCloseHandle(ret->dialogChangedEvent);\n\t\t\tCoUninitialize();\n\t\t\tdelete ret;\n\t\t\tparam->ret = NULL;\n\t\t\tSetEvent(param->readyEvent);\n\t\t\treturn NULL;\n\t\t}\n\t\tSetWindowLongPtr(ret->hWindow, GWLP_USERDATA, (LONG_PTR)dialogsData);\n\t\tfor (unsigned int i = 0; i < InstallDialog_COUNT; i++)\n\t\t{\n\t\t\tret->hDialogs[i] = \n\t\t\t\tCreateDialog(hInstance, MAKEINTRESOURCE(InstallDialogCreateInfo[i].id), ret->hWindow, InstallDialogCreateInfo[i].proc);\n\t\t\tif (!ret->hDialogs[i])\n\t\t\t{\n\t\t\t\tDWORD test = GetLastError();\n\t\t\t\tDestroyWindow(ret->hWindow);\n\t\t\t\tCloseHandle(ret->dialogThreadClosedEvent);\n\t\t\t\tCloseHandle(ret->freeDialogResourcesEvent);\n\t\t\t\tCloseHandle(ret->dialogChangedEvent);\n\t\t\t\tCoUninitialize();\n\t\t\t\tdelete ret;\n\t\t\t\tparam->ret = NULL;\n\t\t\t\tSetEvent(param->readyEvent);\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t\tfor (unsigned int i = 0; i < InstallDialog_COUNT; i++)\n\t\t{\n\t\t\tret->pControllers[i] = InstallDialogCreateInfo[i].constr(ret->hDialogs[i], ret->hWindow, ret);\n\t\t}\n\t\tint borderWidth, borderHeight;\n\t\t{\n\t\t\tRECT oldWinRect;\n\t\t\tGetWindowRect(ret->hWindow, &oldWinRect);\n\t\t\tRECT oldClnRect;\n\t\t\tGetClientRect(ret->hWindow, &oldClnRect);\n\t\t\tborderWidth = (oldWinRect.right - oldWinRect.left) - (oldClnRect.right - oldClnRect.left);\n\t\t\tborderHeight = (oldWinRect.bottom - oldWinRect.top) - (oldClnRect.bottom - oldClnRect.top);\n\t\t}\n\t\tret->activeDialogIndex = InstallDialog_Prepare;\n\t\t/*RECT prepareRect;\n\t\tGetClientRect(ret->hDialogs[InstallDialog_Prepare], &prepareRect);\n\t\tSetWindowPos(ret->hWindow, NULL, 0, 0,\n\t\t\tprepareRect.right - prepareRect.left + borderWidth,\n\t\t\tprepareRect.bottom - prepareRect.top + borderHeight,\n\t\t\tSWP_NOMOVE | SWP_NOREPOSITION | SWP_NOZORDER);*/\n\t\tSetWindowPos(ret->hWindow, NULL, 0, 0,\n\t\t\t500 + borderWidth,\n\t\t\t360 + borderHeight,\n\t\t\tSWP_NOMOVE | SWP_NOREPOSITION | SWP_NOZORDER);\n\t\tShowWindow(ret->hWindow, SW_SHOWDEFAULT);\n\t\tUpdateWindow(ret->hWindow);\n\t\t\n\t\tSetEvent(param->readyEvent);\n\t}\n\n\t{\n\t\tint noMessageCounter = 0;\n\t\twhile (!dialogsData->closeWindows)\n\t\t{\n\t\t\tMSG msg;\n\t\t\tif (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE))\n\t\t\t{\n\t\t\t\tnoMessageCounter = 0;\n\t\t\t\tTranslateMessage(&msg);\n\t\t\t\tDispatchMessage(&msg);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!IsWindow(dialogsData->hWindow))\n\t\t\t\t\tbreak;\n\t\t\t\tif (noMessageCounter < 100)\n\t\t\t\t{\n\t\t\t\t\tnoMessageCounter++;\n\t\t\t\t\tSleep(1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tSleep(10);\n\t\t\t}\n\t\t}\n\t\twhile (!dialogsData->closeWindows)\n\t\t\tSleep(10);\n\t\tDestroyWindow(dialogsData->hWindow);\n\t\tdialogsData->hWindow = NULL;\n\t\tdialogsData->closeWindows = false;\n\t\tSetEvent(dialogsData->dialogChangedEvent);\n\t\tWaitForSingleObject(dialogsData->freeDialogResourcesEvent, INFINITE);\n\t\tCloseHandle(dialogsData->freeDialogResourcesEvent); dialogsData->freeDialogResourcesEvent = NULL;\n\t\tCloseHandle(dialogsData->dialogChangedEvent); dialogsData->dialogChangedEvent = NULL;\n\t\tfor (unsigned int i = 0; i < InstallDialog_COUNT; i++)\n\t\t{\n\t\t\tdelete dialogsData->pControllers[i];\n\t\t}\n\t\tdialogsData->dialogChangedEvent = NULL;\n\t\tdialogsData->isClosed = true;\n\t\tCoUninitialize();\n\t\tSetEvent(dialogsData->dialogThreadClosedEvent);\n\t}\n\treturn 0;\n}\nInstallDialogsData *InitInstallDialogs(HINSTANCE hInstance)\n{\n\tInstallDialogsData *ret = new InstallDialogsData();\n\tmemset(ret, 0, sizeof(InstallDialogsData));\n\tDialogMessageThreadParam threadParam;\n\tthreadParam.ret = ret;\n\tthreadParam.hInstance = hInstance;\n\tthreadParam.readyEvent = CreateEvent(NULL, FALSE, FALSE, NULL);\n\tHANDLE hThread = CreateThread(NULL, 0, InstallDialogsMessageThread, &threadParam, 0, NULL);\n\tif (!hThread)\n\t{\n\t\tCloseHandle(threadParam.readyEvent);\n\t\tdelete ret;\n\t\treturn NULL;\n\t}\n\tCloseHandle(hThread);\n\twhile (WaitForSingleObject(threadParam.readyEvent, INFINITE) != WAIT_OBJECT_0){}\n\tCloseHandle(threadParam.readyEvent);\n\treturn threadParam.ret;\n}\n\nbool ShowInstallDialog(InstallDialogsData *data, EInstallDialogs dialog)\n{\n\tif (!IsWindow(data->hWindow))\n\t\treturn false;\n\tShowWindow(data->hDialogs[data->activeDialogIndex], SW_HIDE);\n\tdata->activeDialogIndex = (int)dialog;\n\tShowWindow(data->hDialogs[dialog], SW_SHOW);\n\tSetEvent(data->dialogChangedEvent);\n\treturn true;\n}\nEInstallDialogs WaitForDialogChanged(InstallDialogsData *data, DWORD timeout)\n{\n\tif (data->hWindow != NULL && WaitForSingleObject(data->dialogChangedEvent, timeout) == WAIT_OBJECT_0)\n\t\treturn data->pControllers[data->activeDialogIndex]->GetOwnDialogType();\n\telse\n\t\treturn (EInstallDialogs)-1;\n}\nvoid OnCancelPressed(InstallDialogsData *data)\n{\n\tDWORD result = MessageBox(data->hWindow, \n\t\tTEXT("Do you really want to cancel the mod installation?"), \n\t\tTEXT("UABE Mod Installer"), MB_YESNO | MB_ICONINFORMATION);\n\tif (result == IDYES)\n\t{\n\t\tdata->closeWindows = true;\n\t}\n}\nvoid CloseDialogThread(InstallDialogsData *data)\n{\n\t//if (WaitForSingleObject(data->dialogThreadClosedEvent, 0) != WAIT_OBJECT_0)\n\t{\n\t\tdata->closeWindows = true;\n\t\tSetEvent(data->freeDialogResourcesEvent);\n\t\tWaitForSingleObject(data->dialogThreadClosedEvent, INFINITE);\n\t\tCloseHandle(data->dialogThreadClosedEvent); data->dialogThreadClosedEvent = NULL;\n\t}\n}\n\nInstallDialogsData::~InstallDialogsData()\n{\n\t//if (IsWindow(this->hWindow))\n\tif (this->hWindow != NULL)\n\t{\n\t\tthis->closeWindows = true;\n\t\twhile (!this->isClosed) Sleep(0);\n\t}\n}\n\nDialogController::~DialogController(){}\nDialogControllerBase::DialogControllerBase(HWND hDialog, HWND hParentWindow, InstallDialogsData *dialogsData)\n{\n\tthis->hDialog = hDialog;\n\tthis->hParentWindow = hParentWindow;\n\tthis->dialogsData = dialogsData;\n\tSetWindowLongPtr(hDialog, GWLP_USERDATA, (LONG_PTR)this);\n}\nDialogControllerBase::~DialogControllerBase(){}\nHWND DialogControllerBase::GetDialogHandle() { return hDialog; }\nHWND DialogControllerBase::GetParentWindow() { return hParentWindow; }\nInstallDialogsData *DialogControllerBase::GetDialogsData() { return dialogsData; }\n\nDialogController_Prepare::DialogController_Prepare(HWND hDialog, HWND hParentWindow, InstallDialogsData *dialogsData)\n\t: DialogControllerBase(hDialog, hParentWindow, dialogsData)\n{\n\thProcessCheckboxes[0] = GetDlgItem(hDialog, IDC_CKLOADDATA);\n}\nDialogController_Prepare::~DialogController_Prepare(){}\nEInstallDialogs DialogController_Prepare::GetOwnDialogType() { return InstallDialog_Prepare; }\nvoid DialogController_Prepare::SetStatus(EInstallDialogPrepareStatus stat, EInstallDialogPrepareStatusValue value)\n{\n\tif (stat < InstallDialogPrepareStatus_SIZE)\n\t{\n\t\tswitch (value)\n\t\t{\n\t\t\tcase InstallPrepareStatus_Inactive:\n\t\t\t\tButton_SetCheck(hProcessCheckboxes[stat], BST_UNCHECKED);\n\t\t\t\tbreak;\n\t\t\tcase InstallPrepareStatus_Active:\n\t\t\t\tButton_SetCheck(hProcessCheckboxes[stat], BST_INDETERMINATE);\n\t\t\t\tbreak;\n\t\t\tcase InstallPrepareStatus_Completed:\n\t\t\t\tButton_SetCheck(hProcessCheckboxes[stat], BST_CHECKED);\n\t\t\t\tbreak;\n\t\t\tcase InstallPrepareStatus_Error:\n\t\t\t\t{\n\t\t\t\t\tButton_SetCheck(hProcessCheckboxes[stat], BST_INDETERMINATE);\n\t\t\t\t\tint textLen = Button_GetTextLength(hProcessCheckboxes[stat]);\n\t\t\t\t\tTCHAR *newButtonText = new TCHAR[textLen + 10];\n\t\t\t\t\tint copied = Button_GetText(hProcessCheckboxes[stat], newButtonText, textLen+1);\n\t\t\t\t\tif (copied > textLen) copied = textLen;\n\t\t\t\t\t_tcscpy(&newButtonText[copied], TEXT(" (failed)"));\n\t\t\t\t\tButton_SetText(hProcessCheckboxes[stat], newButtonText);\n\t\t\t\t\tdelete[] newButtonText;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n\nDialogControllerTitled::DialogControllerTitled(HWND hDialog, HWND hParentWindow, InstallDialogsData *dialogsData, bool appendSetup)\n\t: DialogControllerBase(hDialog, hParentWindow, dialogsData)\n{\n\thStaticTitle = GetDlgItem(hDialog, IDC_SETUPTITLE);\n\tbAppendTitle = appendSetup;\n}\nDialogControllerTitled::~DialogControllerTitled(){}\nvoid DialogControllerTitled::SetModName(const char *modName)\n{\n\tif (hStaticTitle)\n\t{\n#ifdef _UNICODE\n\t\tint modNameLenA = (int)(strlen(modName) & 0x7FFFFFFF);\n\t\tint modNameLenW = MultiByteToWideChar(CP_UTF8, 0, modName, modNameLenA, NULL, 0);\n\t\twchar_t *title = new wchar_t[modNameLenW + 7];\n\t\tMultiByteToWideChar(CP_UTF8, 0, modName, modNameLenA, title, modNameLenW);\n\t\twcsncpy(&title[modNameLenW], bAppendTitle ? L" Setup" : L"", 7);\n#else\n\t\tsize_t modNameLen = strlen(modName);\n\t\tchar *title = new char[modNameLen + 7];\n\t\tstrncpy(title, modName, modNameLen);\n\t\tstrncpy(&title[modNameLen], bAppendTitle ? " Setup" : "", 7);\n#endif\n\t\tSetWindowText(hStaticTitle, title);\n\t\tdelete[] title;\n\t}\n}\n\n\nDialogController_Introduction::DialogController_Introduction(HWND hDialog, HWND hParentWindow, InstallDialogsData *dialogsData)\n\t: DialogControllerTitled(hDialog, hParentWindow, dialogsData, true)\n{\n}\nDialogController_Introduction::~DialogController_Introduction()\n{\n}\nEInstallDialogs DialogController_Introduction::GetOwnDialogType()\n{\n\treturn InstallDialog_Introduction;\n}\n\nDialogController_Description::DialogController_Description(HWND hDialog, HWND hParentWindow, InstallDialogsData *dialogsData)\n\t: DialogControllerTitled(hDialog, hParentWindow, dialogsData, false)\n{\n\thStaticAuthors = GetDlgItem(hDialog, IDC_AUTHORS);\n\thStaticDescription = GetDlgItem(hDialog, IDC_DESCRIPTION);\n}\nDialogController_Description::~DialogController_Description(){}\nEInstallDialogs DialogController_Description::GetOwnDialogType() { return InstallDialog_Description; }\nvoid DialogController_Description::SetAuthors(const char *authors)\n{\n\tif (hStaticAuthors)\n\t{\n\t\tuint16_t nullAuthor = 0;\n\t\tTCHAR *displayText;\n\t\tif (!authors)\n\t\t{\n\t\t\tdisplayText = (TCHAR*)&nullAuthor;\n\t\t}\n\t\telse\n\t\t{\n#ifdef _UNICODE\n\t\t\tint authorsLenA = (int)(strlen(authors) & 0x7FFFFFFF);\n\t\t\tint authorsLenW = MultiByteToWideChar(CP_UTF8, 0, authors, authorsLenA, NULL, 0);\n\t\t\tdisplayText = new wchar_t[authorsLenW + 4];\n\t\t\twcsncpy(displayText, L"By ", 3);\n\t\t\tMultiByteToWideChar(CP_UTF8, 0, authors, authorsLenA, &displayText[3], authorsLenW);\n\t\t\tdisplayText[authorsLenW + 3] = 0;\n#else\n\t\t\tsize_t authorsLen = strlen(authors);\n\t\t\tdisplayText = new char[authorsLen + 4];\n\t\t\tstrncpy(displayText, "By ", 3);\n\t\t\tstrncpy(&displayText[3], authors, authorsLen);\n\t\t\tdisplayText[authorsLen + 3] = 0;\n#endif\n\t\t}\n\t\tSetWindowText(hStaticAuthors, displayText);\n\t\tif (displayText != (TCHAR*)&nullAuthor)\n\t\t\tdelete[] displayText;\n\t}\n}\nvoid DialogController_Description::SetDescription(const char *description)\n{\n\tif (hStaticDescription)\n\t{\n#ifdef _UNICODE\n\t\tint descriptionLenA = (int)(strlen(description) & 0x7FFFFFFF);\n\t\tint descriptionLenW = MultiByteToWideChar(CP_UTF8, 0, description, descriptionLenA, NULL, 0);\n\t\twchar_t *displayText = new wchar_t[descriptionLenW + 1];\n\t\tMultiByteToWideChar(CP_UTF8, 0, description, descriptionLenA, displayText, descriptionLenW);\n\t\tdisplayText[descriptionLenW] = 0;\n\t\tSetWindowText(hStaticDescription, displayText);\n\t\tdelete[] displayText;\n#else\n\t\tSetWindowText(hStaticDescription, description);\n#endif\n\t}\n}\n\nDialogController_PathSelect::DialogController_PathSelect(HWND hDialog, HWND hParentWindow, InstallDialogsData *dialogsData)\n\t: DialogControllerTitled(hDialog, hParentWindow, dialogsData, true)\n{\n\thEditPath = GetDlgItem(hDialog, IDC_EDITPATH);\n\thTreeModifications = GetDlgItem(hDialog, IDC_TREEMODS);\n}\nDialogController_PathSelect::~DialogController_PathSelect()\n{\n}\nEInstallDialogs DialogController_PathSelect::GetOwnDialogType()\n{\n\treturn InstallDialog_PathSelect;\n}\n\nTCHAR *DialogController_PathSelect::GetPath(size_t &pathLen)\n{\n\tif (hEditPath)\n\t{\n\t\tsize_t textLen = (size_t)Edit_GetTextLength(hEditPath);\n\t\tTCHAR *ret = new TCHAR[textLen + 1];\n\t\tEdit_GetText(hEditPath, ret, textLen + 1);\n\t\tret[textLen] = 0;\n\t\tpathLen = textLen;\n\t\treturn ret;\n\t}\n\tpathLen = 0;\n\treturn NULL;\n}\nvoid DialogController_PathSelect::SetPath(const TCHAR *path)\n{\n\tif (hEditPath)\n\t\tEdit_SetText(hEditPath, path);\n}\n\nvoid FillModsTree_AssetsReplacers(HWND hTree, HTREEITEM base, std::vector<AssetsReplacer*>& replacers)\n{\n\tTCHAR sprntTmp[256];\n\n\tTVINSERTSTRUCT insert = {};\n\tinsert.hParent = base;\n\tinsert.hInsertAfter = TVI_FIRST;//hInsertAfter?hInsertAfter:TVI_ROOT;\n\tinsert.itemex.hItem = NULL;\n\tinsert.itemex.state = 0;\n\tinsert.itemex.stateMask = 0xFF;\n\tinsert.itemex.pszText = sprntTmp;\n\tinsert.itemex.cchTextMax = 256;\n\tinsert.itemex.hwnd = NULL;\n\tinsert.itemex.mask = TVIF_CHILDREN | TVIF_STATE | TVIF_TEXT;\n\tinsert.itemex.cChildren = 0;\n\tfor (size_t i = replacers.size(); i > 0; i--)\n\t{\n\t\tAssetsReplacer *pReplacer = (AssetsReplacer*)replacers[i - 1];\n\t\tif (!pReplacer)\n\t\t\tcontinue;\n\t\tswitch (pReplacer->GetType())\n\t\t{\n\t\t\tcase AssetsReplacement_AddOrModify:\n\t\t\tcase AssetsReplacement_Remove:\n\t\t\t{\n\t\t\t\tAssetsEntryReplacer *pEntryReplacer = reinterpret_cast<AssetsEntryReplacer*>(pReplacer);\n\t\t\t\tconst TCHAR* opType =\n\t\t\t\t\t(pReplacer->GetType() == AssetsReplacement_AddOrModify) ? TEXT("Replace") : (\n\t\t\t\t\t\t(pReplacer->GetType() == AssetsReplacement_Remove) ? TEXT("Remove") : TEXT("<invalid>"));\n\t\t\t\t_stprintf_s(sprntTmp, TEXT("%s PathId %lld"), opType, (long long int)pEntryReplacer->GetPathID());\n\t\t\t\tTreeView_InsertItem(hTree, &insert);\n\t\t\t}\n\t\t\tbreak;\n\t\t\tcase AssetsReplacement_Dependencies:\n\t\t\t{\n\t\t\t\t_stprintf_s(sprntTmp, TEXT("Modify dependencies"));\n\t\t\t\tTreeView_InsertItem(hTree, &insert);\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n}\nvoid DialogController_PathSelect::FillModsTree(InstallerPackageFile *pInstallFile)\n{\n\tif (!hTreeModifications)\n\t\treturn;\n\tsize_t numBundle = 0, numAssets = 0, numResources = 0;\n\tfor (size_t i = 0; i < pInstallFile->affectedAssets.size(); i++)\n\t{\n\t\tswitch (pInstallFile->affectedAssets[i].type)\n\t\t{\n\t\tcase InstallerPackageAssetsType::Assets:\n\t\t\tnumAssets++;\n\t\t\tbreak;\n\t\tcase InstallerPackageAssetsType::Bundle:\n\t\t\tnumBundle++;\n\t\t\tbreak;\n\t\tcase InstallerPackageAssetsType::Resources:\n\t\t\tnumResources++;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tTVINSERTSTRUCT insert = {};\n\tinsert.hParent = NULL;\n\tinsert.hInsertAfter = TVI_FIRST;//hInsertAfter?hInsertAfter:TVI_ROOT;\n\tinsert.itemex.hItem = NULL;\n\tinsert.itemex.state = 0;\n\tinsert.itemex.stateMask = 0xFF;\n\tinsert.itemex.pszText = const_cast<TCHAR*>(TEXT("Affected bundles"));\n\tinsert.itemex.hwnd = NULL;\n\tinsert.itemex.mask = TVIF_CHILDREN | TVIF_STATE | TVIF_TEXT;\n\tinsert.itemex.cChildren = numBundle ? 1 : 0;\n\tHTREEITEM hBundleBaseItem = TreeView_InsertItem(hTreeModifications, &insert);\n\n\tinsert.itemex.pszText = const_cast<TCHAR*>(TEXT("Affected assets files"));\n\tinsert.hInsertAfter = TVI_LAST;\n\tinsert.itemex.cChildren = numAssets ? 1 : 0;\n\tHTREEITEM hAssetsBaseItem = TreeView_InsertItem(hTreeModifications, &insert);\n\n\tinsert.itemex.pszText = const_cast<TCHAR*>(TEXT("Affected resource files"));\n\tinsert.hInsertAfter = TVI_LAST;\n\tinsert.itemex.cChildren = numResources ? 1 : 0;\n\tHTREEITEM hResourcesBaseItem = TreeView_InsertItem(hTreeModifications, &insert);\n\t\n\tfor (size_t _i = pInstallFile->affectedAssets.size(); _i > 0; _i--)\n\t{\n\t\tsize_t i = _i - 1;\n\t\tInstallerPackageAssetsDesc &desc = pInstallFile->affectedAssets[i];\n\t\tsize_t pathLen;\n\t\tTCHAR *tcPath = _MultiByteToTCHAR(desc.path.c_str(), pathLen);\n\t\tinsert.itemex.pszText = tcPath;\n\t\tinsert.hInsertAfter = TVI_FIRST;\n\t\tswitch (desc.type)\n\t\t{\n\t\tcase InstallerPackageAssetsType::Assets:\n\t\t\tinsert.hParent = hAssetsBaseItem;\n\t\t\tbreak;\n\t\tcase InstallerPackageAssetsType::Bundle:\n\t\t\tinsert.hParent = hBundleBaseItem;\n\t\t\tbreak;\n\t\tcase InstallerPackageAssetsType::Resources:\n\t\t\tinsert.hParent = hResourcesBaseItem;\n\t\t\tbreak;\n\t\tdefault: insert.hParent = NULL;\n\t\t}\n\t\tinsert.itemex.cChildren = desc.replacers.size() ? 1 : 0;\n\t\tHTREEITEM hCurBaseDesc = TreeView_InsertItem(hTreeModifications, &insert);\n\t\t_FreeTCHAR(tcPath);\n\t\tswitch (desc.type)\n\t\t{\n\t\tcase InstallerPackageAssetsType::Assets:\n\t\t\t{\n\t\t\t\tstd::vector<AssetsReplacer*> replacerVector(desc.replacers.size());\n\t\t\t\tfor (size_t i = 0; i < desc.replacers.size(); ++i)\n\t\t\t\t\treplacerVector[i] = reinterpret_cast<AssetsReplacer*>(desc.replacers[i].get());\n\t\t\t\tFillModsTree_AssetsReplacers(hTreeModifications, hCurBaseDesc, replacerVector);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase InstallerPackageAssetsType::Bundle:\n\t\t\t{\n\t\t\t\tinsert.hParent = hCurBaseDesc;\n\t\t\t\tfor (size_t _i = desc.replacers.size(); _i > 0; _i--)\n\t\t\t\t{\n\t\t\t\t\tsize_t i = _i - 1;\n\t\t\t\t\tTCHAR sprntTmp[1024];\n\t\t\t\t\tinsert.itemex.pszText = sprntTmp;\n\t\t\t\t\tinsert.itemex.cChildren = 0;\n\n\t\t\t\t\tBundleReplacer* pReplacer = (BundleReplacer*)desc.replacers[i].get();\n\t\t\t\t\tBundleEntryModifierFromAssets* pModifierFromAssets =\n\t\t\t\t\t\tdynamic_cast<BundleEntryModifierFromAssets*>(pReplacer);\n\t\t\t\t\tsize_t origEntryNameLen; size_t newEntryNameLen;\n\t\t\t\t\tTCHAR* tcOrigEntry = _MultiByteToTCHAR(pReplacer->GetOriginalEntryName(), origEntryNameLen);\n\t\t\t\t\tTCHAR* tcNewEntry = _MultiByteToTCHAR(pReplacer->GetEntryName(), newEntryNameLen);\n\t\t\t\t\tif (pReplacer->GetType() == BundleReplacement_Rename)\n\t\t\t\t\t{\n\t\t\t\t\t\t_stprintf_s(sprntTmp, TEXT("Rename %s to %s"), tcOrigEntry, tcNewEntry);\n\t\t\t\t\t}\n\t\t\t\t\telse if (pReplacer->GetType() == BundleReplacement_AddOrModify)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (pReplacer->GetOriginalEntryName() == NULL && pReplacer->GetEntryName() != NULL)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t_stprintf_s(sprntTmp, TEXT("Modify/add %s"), tcNewEntry);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (pReplacer->GetOriginalEntryName() != NULL && pReplacer->GetEntryName() != NULL &&\n\t\t\t\t\t\t\tstrcmp(pReplacer->GetOriginalEntryName(), pReplacer->GetEntryName()))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t_stprintf_s(sprntTmp, TEXT("Modify and rename %s to %s"), tcOrigEntry, tcNewEntry);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t_stprintf_s(sprntTmp, TEXT("Modify %s"), tcOrigEntry);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (pModifierFromAssets)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tinsert.itemex.cChildren = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (pReplacer->GetType() == BundleReplacement_Remove)\n\t\t\t\t\t{\n\t\t\t\t\t\t_stprintf_s(sprntTmp, TEXT("Remove %s"), tcOrigEntry);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t_stprintf_s(sprntTmp, TEXT("<invalid> %s"), tcOrigEntry);\n\t\t\t\t\t}\n\t\t\t\t\tHTREEITEM curTreeItem = TreeView_InsertItem(hTreeModifications, &insert);\n\t\t\t\t\t_FreeTCHAR(tcOrigEntry);\n\t\t\t\t\t_FreeTCHAR(tcNewEntry);\n\t\t\t\t\tif (pModifierFromAssets)\n\t\t\t\t\t{\n\t\t\t\t\t\tsize_t assetReplacerCount;\n\t\t\t\t\t\tAssetsReplacer** pAssetReplacers = pModifierFromAssets->GetReplacers(assetReplacerCount);\n\t\t\t\t\t\tstd::vector<AssetsReplacer*> replacerVector(pAssetReplacers, &pAssetReplacers[assetReplacerCount]);\n\t\t\t\t\t\tFillModsTree_AssetsReplacers(hTreeModifications, curTreeItem, replacerVector);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase InstallerPackageAssetsType::Resources:\n\t\t\tif (desc.replacers.size() == 1)\n\t\t\t{\n\t\t\t\tBundleReplacer* pReplacer = reinterpret_cast<BundleReplacer*>(desc.replacers[0].get());\n\t\t\t\tauto* pResourcesReplacer = dynamic_cast<BundleEntryModifierByResources*>(pReplacer);\n\t\t\t\tif (pResourcesReplacer != nullptr)\n\t\t\t\t{\n\t\t\t\t\tinsert.hParent = hCurBaseDesc;\n\t\t\t\t\tinsert.itemex.pszText = const_cast<TCHAR*>(\n\t\t\t\t\t\tpResourcesReplacer->RequiresEntryReader() ? TEXT("Modify") : TEXT("Add or replace")\n\t\t\t\t\t);\n\t\t\t\t\tinsert.itemex.cChildren = 0;\n\t\t\t\t\tTreeView_InsertItem(hTreeModifications, &insert);\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\n\nDialogController_Progress::DialogController_Progress(HWND hDialog, HWND hParentWindow, InstallDialogsData *dialogsData)\n\t: DialogControllerTitled(hDialog, hParentWindow, dialogsData, true)\n{\n\thInstallingText = GetDlgItem(hDialog, IDC_SINSTALLING);\n\thProgressBar = GetDlgItem(hDialog, IDC_PROGINSTALL);\n\thCurFileText = GetDlgItem(hDialog, IDC_SCURFILE);\n\thLogEdit = GetDlgItem(hDialog, IDC_EDITSTATUS);\n\thBtnNext = GetDlgItem(hDialog, IDC_NEXT);\n\thBtnCancel = GetDlgItem(hDialog, IDC_CANCEL);\n\tcancelled = false;\n\n\tif (hProgressBar)\n\t{\n\t\tSendMessage(hProgressBar, PBM_SETRANGE, NULL, MAKELPARAM(0,10000));\n\t\tSendMessage(hProgressBar, PBM_SETPOS, NULL, NULL);\n\t}\n}\nDialogController_Progress::~DialogController_Progress()\n{\n}\nEInstallDialogs DialogController_Progress::GetOwnDialogType()\n{\n\treturn InstallDialog_Progress;\n}\n\nbool DialogController_Progress::GetCancelled()\n{\n\treturn cancelled;\n}\nvoid DialogController_Progress::SetCancelled(bool cancelled)\n{\n\tthis->cancelled = cancelled;\n}\nvoid DialogController_Progress::SetPaused(bool paused)\n{\n\tif (hProgressBar)\n\t{\n\t\tif (paused)\n\t\t\tSendMessage(hProgressBar, PBM_SETSTATE, PBST_PAUSED, NULL);\n\t\telse\n\t\t\tSendMessage(hProgressBar, PBM_SETSTATE, PBST_NORMAL, NULL);\n\t}\n}\nvoid DialogController_Progress::SetProgress(float percent, const char *curFileName)\n{\n\tif (hProgressBar)\n\t{\n\t\tSendMessage(hProgressBar, PBM_SETPOS, (WPARAM)((int)(abs(percent) * 100.0F)), NULL);\n\t\tif (percent < 0)\n\t\t\tSendMessage(hProgressBar, PBM_SETSTATE, PBST_ERROR, NULL);\n\t\telse\n\t\t\tSendMessage(hProgressBar, PBM_SETSTATE, PBST_NORMAL, NULL);\n\t}\n\tif (hCurFileText)\n\t{\n\t\tsize_t fileNameLen;\n\t\tTCHAR *tcFileName = _MultiByteToTCHAR(curFileName, fileNameLen);\n\t\tSetWindowText(hCurFileText, tcFileName);\n\t\t_FreeTCHAR(tcFileName);\n\t}\n}\nvoid DialogController_Progress::AddToLog(const wchar_t *logText)\n{\n\tif (hLogEdit)\n\t{\n\t\tsize_t logTextLen;\n\t\tTCHAR *tcLogText = _WideToTCHAR(logText, logTextLen);\n\t\tint editLen = Edit_GetTextLength(hLogEdit);\n\t\tint oldSelStart = editLen, oldSelEnd = editLen;\n\t\tSendMessage(hLogEdit, EM_GETSEL, (WPARAM)&oldSelStart, (LPARAM)&oldSelEnd);\n\t\tEdit_SetSel(hLogEdit, editLen, editLen);\n\t\tEdit_ReplaceSel(hLogEdit, logText);\n\t\tif ((oldSelEnd != editLen) || (oldSelStart != oldSelEnd))\n\t\t\tEdit_SetSel(hLogEdit, oldSelStart, oldSelEnd);\n\t\telse\n\t\t\tEdit_SetSel(hLogEdit, editLen + logTextLen, editLen + logTextLen);\n\t\t_FreeTCHAR(tcLogText);\n\t}\n}\nvoid DialogController_Progress::AddToLog(const char *logText)\n{\n\tif (hLogEdit)\n\t{\n\t\tsize_t logTextLen;\n\t\tTCHAR *tcLogText = _MultiByteToTCHAR(logText, logTextLen);\n\t\tint editLen = Edit_GetTextLength(hLogEdit);\n\t\tint oldSelStart = editLen, oldSelEnd = editLen;\n\t\tSendMessage(hLogEdit, EM_GETSEL, (WPARAM)&oldSelStart, (LPARAM)&oldSelEnd);\n\t\tEdit_SetSel(hLogEdit, editLen, editLen);\n\t\tEdit_ReplaceSel(hLogEdit, tcLogText);\n\t\tif ((oldSelEnd != editLen) || (oldSelStart != oldSelEnd))\n\t\t\tEdit_SetSel(hLogEdit, oldSelStart, oldSelEnd);\n\t\telse\n\t\t\tEdit_SetSel(hLogEdit, editLen + logTextLen, editLen + logTextLen);\n\t\t_FreeTCHAR(tcLogText);\n\t}\n}\nvoid DialogController_Progress::EnableContinue()\n{\n\tif (hBtnNext)\n\t{\n\t\tButton_Enable(hBtnNext, TRUE);\n\t\tif (hInstallingText)\n\t\t{\n\t\t\tEdit_SetText(hInstallingText, TEXT(""));\n\t\t}\n\t}\n}\nvoid DialogController_Progress::DisableCancel()\n{\n\tif (hBtnCancel)\n\t{\n\t\tButton_Enable(hBtnCancel, FALSE);\n\t}\n}\n\nDialogController_Complete::DialogController_Complete(HWND hDialog, HWND hParentWindow, InstallDialogsData *dialogsData)\n\t: DialogControllerTitled(hDialog, hParentWindow, dialogsData, true)\n{\n\thStaticCompleteText = GetDlgItem(hDialog, IDC_COMPLETETEXT);\n\thStaticAuthors = GetDlgItem(hDialog, IDC_MODAUTHORS);\n}\nDialogController_Complete::~DialogController_Complete()\n{\n}\nEInstallDialogs DialogController_Complete::GetOwnDialogType()\n{\n\treturn InstallDialog_Complete;\n}\nvoid DialogController_Complete::SetCompleteText(const TCHAR *text)\n{\n\tif (hStaticCompleteText)\n\t{\n\t\tSetWindowText(hStaticCompleteText, text);\n\t}\n}\nvoid DialogController_Complete::SetAuthors(const char *authors)\n{\n\tif (hStaticAuthors)\n\t{\n\t\tuint16_t nullAuthor = 0;\n\t\tTCHAR *displayText;\n\t\tif (!authors)\n\t\t{\n\t\t\tdisplayText = (TCHAR*)&nullAuthor;\n\t\t}\n\t\telse\n\t\t{\n#ifdef _UNICODE\n\t\t\tint authorsLenA = (int)(strlen(authors) & 0x7FFFFFFF);\n\t\t\tint authorsLenW = MultiByteToWideChar(CP_UTF8, 0, authors, authorsLenA, NULL, 0);\n\t\t\tdisplayText = new wchar_t[authorsLenW + 4];\n\t\t\twcsncpy(displayText, L"By ", 3);\n\t\t\tMultiByteToWideChar(CP_UTF8, 0, authors, authorsLenA, &displayText[3], authorsLenW);\n\t\t\tdisplayText[authorsLenW + 3] = 0;\n#else\n\t\t\tsize_t authorsLen = strlen(authors);\n\t\t\tdisplayText = new char[authorsLen + 4];\n\t\t\tstrncpy(displayText, "By ", 3);\n\t\t\tstrncpy(&displayText[3], authors, authorsLen);\n\t\t\tdisplayText[authorsLen + 3] = 0;\n#endif\n\t\t}\n\t\tSetWindowText(hStaticAuthors, displayText);\n\t\tif (displayText != (TCHAR*)&nullAuthor)\n\t\t\tdelete[] displayText;\n\t}\n}'