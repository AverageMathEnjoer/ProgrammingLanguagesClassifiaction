b'#!/usr/bin/env stack\n-- stack --resolver lts-16.31 script\n\nimport Control.DeepSeq\nimport Criterion.Main\n\n-- Concat looks linear\n-- benchmarking concat/256\n-- time                 2.474 \xce\xbcs   (2.466 \xce\xbcs .. 2.484 \xce\xbcs)\n--                      1.000 R\xc2\xb2   (1.000 R\xc2\xb2 .. 1.000 R\xc2\xb2)\n-- mean                 2.485 \xce\xbcs   (2.472 \xce\xbcs .. 2.498 \xce\xbcs)\n-- std dev              45.33 ns   (37.19 ns .. 55.72 ns)\n-- variance introduced by outliers: 19% (moderately inflated)\n--\n-- benchmarking concat/1024\n-- time                 10.45 \xce\xbcs   (10.35 \xce\xbcs .. 10.57 \xce\xbcs)\n--                      0.999 R\xc2\xb2   (0.999 R\xc2\xb2 .. 1.000 R\xc2\xb2)\n-- mean                 10.41 \xce\xbcs   (10.33 \xce\xbcs .. 10.48 \xce\xbcs)\n-- std dev              243.1 ns   (204.8 ns .. 296.0 ns)\n-- variance introduced by outliers: 25% (moderately inflated)\n--\n-- benchmarking concat/4096\n-- time                 41.92 \xce\xbcs   (41.67 \xce\xbcs .. 42.23 \xce\xbcs)\n--                      1.000 R\xc2\xb2   (0.999 R\xc2\xb2 .. 1.000 R\xc2\xb2)\n-- mean                 42.02 \xce\xbcs   (41.76 \xce\xbcs .. 42.33 \xce\xbcs)\n-- std dev              991.6 ns   (790.8 ns .. 1.260 \xce\xbcs)\n-- variance introduced by outliers: 22% (moderately inflated)\n\nbenchConcatRoot :: Int -> Benchmark\nbenchConcatRoot i = bench (show i) $ xs `seq` nf concat xs\n  where\n    root = floor (sqrt (fromIntegral i)) :: Int\n    individualList = replicate root (0.0 :: Double)\n    totalList = replicate root individualList\n    xs = force totalList\n\n-- benchmarking concat/16\n-- time                 3.772 \xce\xbcs   (3.761 \xce\xbcs .. 3.786 \xce\xbcs)\n--                      1.000 R\xc2\xb2   (1.000 R\xc2\xb2 .. 1.000 R\xc2\xb2)\n-- mean                 3.809 \xce\xbcs   (3.789 \xce\xbcs .. 3.836 \xce\xbcs)\n-- std dev              83.20 ns   (65.32 ns .. 117.2 ns)\n-- variance introduced by outliers: 24% (moderately inflated)\n--\n-- benchmarking concat/32\n-- time                 8.904 \xce\xbcs   (8.557 \xce\xbcs .. 9.340 \xce\xbcs)\n--                      0.987 R\xc2\xb2   (0.982 R\xc2\xb2 .. 0.992 R\xc2\xb2)\n-- mean                 8.717 \xce\xbcs   (8.505 \xce\xbcs .. 9.043 \xce\xbcs)\n-- std dev              882.2 ns   (711.8 ns .. 1.230 \xce\xbcs)\n-- variance introduced by outliers: 87% (severely inflated)\n--\n-- benchmarking concat/64\n-- time                 16.73 \xce\xbcs   (16.57 \xce\xbcs .. 17.01 \xce\xbcs)\n--                      0.999 R\xc2\xb2   (0.997 R\xc2\xb2 .. 1.000 R\xc2\xb2)\n-- mean                 16.69 \xce\xbcs   (16.56 \xce\xbcs .. 16.83 \xce\xbcs)\n-- std dev              453.9 ns   (325.9 ns .. 670.8 ns)\n-- variance introduced by outliers: 29% (moderately inflated)\n\nbenchConcatManyLists :: Int -> Benchmark\nbenchConcatManyLists i = bench (show i) $ xs `seq` nf concat xs\n  where\n    individualList = replicate 25 (0.0 :: Double)\n    totalList = replicate i individualList\n    xs = force totalList\n\n-- benchmarking benchConcatLongLists/16\n-- time                 3.896 \xce\xbcs   (3.876 \xce\xbcs .. 3.917 \xce\xbcs)\n--                      1.000 R\xc2\xb2   (0.999 R\xc2\xb2 .. 1.000 R\xc2\xb2)\n-- mean                 3.893 \xce\xbcs   (3.877 \xce\xbcs .. 3.922 \xce\xbcs)\n-- std dev              69.18 ns   (48.06 ns .. 115.7 ns)\n-- variance introduced by outliers: 17% (moderately inflated)\n--\n-- benchmarking benchConcatLongLists/32\n-- time                 8.111 \xce\xbcs   (8.068 \xce\xbcs .. 8.150 \xce\xbcs)\n--                      1.000 R\xc2\xb2   (0.999 R\xc2\xb2 .. 1.000 R\xc2\xb2)\n-- mean                 8.106 \xce\xbcs   (8.068 \xce\xbcs .. 8.155 \xce\xbcs)\n-- std dev              140.6 ns   (112.6 ns .. 189.7 ns)\n-- variance introduced by outliers: 16% (moderately inflated)\n--\n-- benchmarking benchConcatLongLists/64\n-- time                 16.61 \xce\xbcs   (16.38 \xce\xbcs .. 16.92 \xce\xbcs)\n--                      0.999 R\xc2\xb2   (0.997 R\xc2\xb2 .. 1.000 R\xc2\xb2)\n-- mean                 16.50 \xce\xbcs   (16.39 \xce\xbcs .. 16.68 \xce\xbcs)\n-- std dev              461.9 ns   (304.2 ns .. 805.3 ns)\n-- variance introduced by outliers: 31% (moderately inflated)\nbenchConcatLongLists :: Int -> Benchmark\nbenchConcatLongLists i = bench (show i) $ xs `seq` nf concat xs\n  where\n    individualList = replicate i (0.0 :: Double)\n    totalList = replicate 25 individualList\n    xs = force totalList\n\nmain :: IO ()\nmain =\n  defaultMain\n    [ bgroup\n        "benchConcatRoot"\n        [benchConcatRoot (4 ^ i) | i <- [4, 5, 6]],\n      bgroup\n        "benchConcatManyLists"\n        [benchConcatManyLists (2 ^ i) | i <- [4, 5, 6]],\n      bgroup\n        "benchConcatLongLists"\n        [benchConcatLongLists (2 ^ i) | i <- [4, 5, 6]]\n    ]\n'