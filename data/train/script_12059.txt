b'/*\n * Copyright (C) 2012 Andrew Neal\n * Copyright (C) 2014 The CyanogenMod Project\n * Copyright (C) 2015 Naman Dwivedi\n *\n * Licensed under the Apache License, Version 2.0\n * (the "License"); you may not use this file except in compliance with the\n * License. You may obtain a copy of the License at\n * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law\n * or agreed to in writing, software distributed under the License is\n * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\npackage com.naman14.timber.activities;\n\nimport android.content.BroadcastReceiver;\nimport android.content.ComponentName;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.IntentFilter;\nimport android.content.ServiceConnection;\nimport android.media.AudioManager;\nimport android.os.AsyncTask;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.os.IBinder;\nimport androidx.annotation.Nullable;\nimport androidx.fragment.app.FragmentManager;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.widget.Toast;\n\nimport com.afollestad.appthemeengine.ATE;\nimport com.afollestad.appthemeengine.ATEActivity;\nimport com.google.android.gms.cast.framework.CastButtonFactory;\nimport com.google.android.gms.cast.framework.CastContext;\nimport com.google.android.gms.cast.framework.CastSession;\nimport com.google.android.gms.cast.framework.Session;\nimport com.google.android.gms.cast.framework.SessionManager;\nimport com.google.android.gms.cast.framework.SessionManagerListener;\nimport com.google.android.gms.common.ConnectionResult;\nimport com.google.android.gms.common.GoogleApiAvailability;\nimport com.naman14.timber.ITimberService;\nimport com.naman14.timber.MusicPlayer;\nimport com.naman14.timber.MusicService;\nimport com.naman14.timber.R;\nimport com.naman14.timber.cast.SimpleSessionManagerListener;\nimport com.naman14.timber.cast.WebServer;\nimport com.naman14.timber.listeners.MusicStateListener;\nimport com.naman14.timber.slidinguppanel.SlidingUpPanelLayout;\nimport com.naman14.timber.subfragments.QuickControlsFragment;\nimport com.naman14.timber.utils.Helpers;\nimport com.naman14.timber.utils.NavigationUtils;\nimport com.naman14.timber.utils.TimberUtils;\n\nimport java.io.IOException;\nimport java.lang.ref.WeakReference;\nimport java.util.ArrayList;\n\nimport static com.naman14.timber.MusicPlayer.mService;\n\npublic class BaseActivity extends ATEActivity implements ServiceConnection, MusicStateListener {\n\n    private final ArrayList<MusicStateListener> mMusicStateListener = new ArrayList<>();\n    private MusicPlayer.ServiceToken mToken;\n    private PlaybackStatus mPlaybackStatus;\n\n    private CastSession mCastSession;\n    private SessionManager mSessionManager;\n    private final SessionManagerListener mSessionManagerListener =\n            new SessionManagerListenerImpl();\n    private WebServer castServer;\n\n    public boolean playServicesAvailable = false;\n\n    private class SessionManagerListenerImpl extends SimpleSessionManagerListener {\n        @Override\n        public void onSessionStarting(Session session) {\n            super.onSessionStarting(session);\n            startCastServer();\n        }\n\n        @Override\n        public void onSessionStarted(Session session, String sessionId) {\n            invalidateOptionsMenu();\n            mCastSession = mSessionManager.getCurrentCastSession();\n            showCastMiniController();\n        }\n        @Override\n        public void onSessionResumed(Session session, boolean wasSuspended) {\n            invalidateOptionsMenu();\n            mCastSession = mSessionManager.getCurrentCastSession();\n        }\n        @Override\n        public void onSessionEnded(Session session, int error) {\n            mCastSession = null;\n            hideCastMiniController();\n            stopCastServer();\n        }\n\n        @Override\n        public void onSessionResuming(Session session, String s) {\n            super.onSessionResuming(session, s);\n            startCastServer();\n        }\n\n        @Override\n        public void onSessionSuspended(Session session, int i) {\n            super.onSessionSuspended(session, i);\n            stopCastServer();\n        }\n    }\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        mToken = MusicPlayer.bindToService(this, this);\n\n        mPlaybackStatus = new PlaybackStatus(this);\n        //make volume keys change multimedia volume even if music is not playing now\n        setVolumeControlStream(AudioManager.STREAM_MUSIC);\n\n        try {\n            playServicesAvailable = GoogleApiAvailability\n                    .getInstance().isGooglePlayServicesAvailable(this) == ConnectionResult.SUCCESS;\n        } catch (Exception ignored) {\n\n        }\n\n        if (playServicesAvailable)\n            initCast();\n    }\n\n    @Override\n    protected void onStart() {\n        super.onStart();\n\n        final IntentFilter filter = new IntentFilter();\n        // Play and pause changes\n        filter.addAction(MusicService.PLAYSTATE_CHANGED);\n        // Track changes\n        filter.addAction(MusicService.META_CHANGED);\n        // Update a list, probably the playlist fragment\'s\n        filter.addAction(MusicService.REFRESH);\n        // If a playlist has changed, notify us\n        filter.addAction(MusicService.PLAYLIST_CHANGED);\n        // If there is an error playing a track\n        filter.addAction(MusicService.TRACK_ERROR);\n\n        registerReceiver(mPlaybackStatus, filter);\n\n    }\n\n    @Override\n    protected void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onResume() {\n        if (playServicesAvailable) {\n            mCastSession = mSessionManager.getCurrentCastSession();\n            mSessionManager.addSessionManagerListener(mSessionManagerListener);\n        }\n        //For Android 8.0+: service may get destroyed if in background too long\n        if(mService == null){\n            mToken = MusicPlayer.bindToService(this, this);\n        }\n        onMetaChanged();\n        super.onResume();\n    }\n\n    @Override\n    protected void onPause() {\n        super.onPause();\n        if (playServicesAvailable) {\n            mSessionManager.removeSessionManagerListener(mSessionManagerListener);\n            mCastSession = null;\n        }\n    }\n\n    @Override\n    public void onServiceConnected(final ComponentName name, final IBinder service) {\n        mService = ITimberService.Stub.asInterface(service);\n        onMetaChanged();\n    }\n\n\n    private void initCast() {\n        CastContext castContext = CastContext.getSharedInstance(this);\n        mSessionManager = castContext.getSessionManager();\n    }\n\n    @Override\n    public void onServiceDisconnected(final ComponentName name) {\n        mService = null;\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        // Unbind from the service\n        if (mToken != null) {\n            MusicPlayer.unbindFromService(mToken);\n            mToken = null;\n        }\n\n        try {\n            unregisterReceiver(mPlaybackStatus);\n        } catch (final Throwable e) {\n        }\n        mMusicStateListener.clear();\n    }\n\n    @Override\n    public void onMetaChanged() {\n        // Let the listener know to the meta chnaged\n        for (final MusicStateListener listener : mMusicStateListener) {\n            if (listener != null) {\n                listener.onMetaChanged();\n            }\n        }\n    }\n\n    @Override\n    public void restartLoader() {\n        // Let the listener know to update a list\n        for (final MusicStateListener listener : mMusicStateListener) {\n            if (listener != null) {\n                listener.restartLoader();\n            }\n        }\n    }\n\n    @Override\n    public void onPlaylistChanged() {\n        // Let the listener know to update a list\n        for (final MusicStateListener listener : mMusicStateListener) {\n            if (listener != null) {\n                listener.onPlaylistChanged();\n            }\n        }\n    }\n\n    public void setMusicStateListenerListener(final MusicStateListener status) {\n        if (status == this) {\n            throw new UnsupportedOperationException("Override the method, don\'t add a listener");\n        }\n\n        if (status != null) {\n            mMusicStateListener.add(status);\n        }\n    }\n\n    public void removeMusicStateListenerListener(final MusicStateListener status) {\n        if (status != null) {\n            mMusicStateListener.remove(status);\n        }\n    }\n\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        getMenuInflater().inflate(R.menu.menu_main, menu);\n\n        getMenuInflater().inflate(R.menu.menu_cast, menu);\n\n        if (playServicesAvailable) {\n            CastButtonFactory.setUpMediaRouteButton(getApplicationContext(),\n                    menu,\n                    R.id.media_route_menu_item);\n        }\n\n        if (!TimberUtils.hasEffectsPanel(BaseActivity.this)) {\n            menu.removeItem(R.id.action_equalizer);\n        }\n        ATE.applyMenu(this, getATEKey(), menu);\n        return true;\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        switch (item.getItemId()) {\n            case android.R.id.home:\n                super.onBackPressed();\n                return true;\n            case R.id.action_settings:\n                NavigationUtils.navigateToSettings(this);\n                return true;\n            case R.id.action_shuffle:\n                Handler handler = new Handler();\n                handler.postDelayed(new Runnable() {\n                    @Override\n                    public void run() {\n                        MusicPlayer.shuffleAll(BaseActivity.this);\n                    }\n                }, 80);\n\n                return true;\n            case R.id.action_search:\n                NavigationUtils.navigateToSearch(this);\n                return true;\n            case R.id.action_equalizer:\n                NavigationUtils.navigateToEqualizer(this);\n                return true;\n\n        }\n        return super.onOptionsItemSelected(item);\n    }\n\n    @Nullable\n    @Override\n    public String getATEKey() {\n        return Helpers.getATEKey(this);\n    }\n\n    public void setPanelSlideListeners(SlidingUpPanelLayout panelLayout) {\n        panelLayout.setPanelSlideListener(new SlidingUpPanelLayout.PanelSlideListener() {\n\n            @Override\n            public void onPanelSlide(View panel, float slideOffset) {\n                View nowPlayingCard = QuickControlsFragment.topContainer;\n                if (nowPlayingCard != null)\n                    nowPlayingCard.setAlpha(1 - slideOffset);\n            }\n\n            @Override\n            public void onPanelCollapsed(View panel) {\n                View nowPlayingCard = QuickControlsFragment.topContainer;\n                if (nowPlayingCard != null)\n                    nowPlayingCard.setAlpha(1);\n            }\n\n            @Override\n            public void onPanelExpanded(View panel) {\n                View nowPlayingCard = QuickControlsFragment.topContainer;\n                if (nowPlayingCard != null)\n                    nowPlayingCard.setAlpha(0);\n            }\n\n            @Override\n            public void onPanelAnchored(View panel) {\n\n            }\n\n            @Override\n            public void onPanelHidden(View panel) {\n\n            }\n        });\n    }\n\n    private final static class PlaybackStatus extends BroadcastReceiver {\n\n        private final WeakReference<BaseActivity> mReference;\n\n\n        public PlaybackStatus(final BaseActivity activity) {\n            mReference = new WeakReference<BaseActivity>(activity);\n        }\n\n        @Override\n        public void onReceive(final Context context, final Intent intent) {\n            final String action = intent.getAction();\n            BaseActivity baseActivity = mReference.get();\n            if (baseActivity != null) {\n                if (action.equals(MusicService.META_CHANGED)) {\n                    baseActivity.onMetaChanged();\n                } else if (action.equals(MusicService.PLAYSTATE_CHANGED)) {\n//                    baseActivity.mPlayPauseProgressButton.getPlayPauseButton().updateState();\n                } else if (action.equals(MusicService.REFRESH)) {\n                    baseActivity.restartLoader();\n                } else if (action.equals(MusicService.PLAYLIST_CHANGED)) {\n                    baseActivity.onPlaylistChanged();\n                } else if (action.equals(MusicService.TRACK_ERROR)) {\n                    final String errorMsg = context.getString(R.string.error_playing_track,\n                            intent.getStringExtra(MusicService.TrackErrorExtra.TRACK_NAME));\n                    Toast.makeText(baseActivity, errorMsg, Toast.LENGTH_SHORT).show();\n                }\n            }\n        }\n    }\n\n    public class initQuickControls extends AsyncTask<String, Void, String> {\n\n        @Override\n        protected String doInBackground(String... params) {\n            QuickControlsFragment fragment1 = new QuickControlsFragment();\n            FragmentManager fragmentManager1 = getSupportFragmentManager();\n            fragmentManager1.beginTransaction()\n                    .replace(R.id.quickcontrols_container, fragment1).commitAllowingStateLoss();\n            return "Executed";\n        }\n\n        @Override\n        protected void onPostExecute(String result) {\n        }\n\n        @Override\n        protected void onPreExecute() {\n        }\n    }\n\n    public void showCastMiniController() {\n        //implement by overriding in activities\n    }\n\n    public void hideCastMiniController() {\n        //implement by overriding in activities\n    }\n\n    public CastSession getCastSession() {\n        return mCastSession;\n    }\n\n    private void startCastServer() {\n        castServer = new WebServer(this);\n        try {\n            castServer.start();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void stopCastServer() {\n        if (castServer != null) {\n            castServer.stop();\n        }\n    }\n}\n'