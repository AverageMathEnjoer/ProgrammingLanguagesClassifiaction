b'package com.naman14.timber.utils;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.charset.Charset;\nimport java.util.Arrays;\n\n/**\n * Created by Christoph Walcher on 03.12.16.\n */\n\npublic class LyricsExtractor {\n    public static String getLyrics(File file){\n        String filename = file.getName();\n        String fileending = filename.substring(filename.lastIndexOf(\'.\')+1,filename.length()).toLowerCase();\n        try{\n            switch(fileending){\n                case "mp3":\n                    return getLyricsID3(file);\n                case "mp4":\n                case "m4a":\n                case "aac":\n                    return getLyricsMP4(file);\n                case "ogg":\n                case "oga":\n                    return getLyricsVorbis(file);\n            }\n        }catch(Exception e){}\n        return null;\n    }\n\n    private static int readOgg(byte[] buf, InputStream in, int bytesinpage, int skip) throws IOException {\n        int toread = skip!=-1?skip:buf.length;\n        int offset = 0;\n        while(toread>0){\n            if(bytesinpage==0){\n                byte magic[] = new byte[4];\n                in.read(magic);\n                if(!Arrays.equals(magic,new byte[]{\'O\',\'g\',\'g\',\'S\'})){\n                    in.close();\n                    throw new IOException();\n                }\n                byte header[] = new byte[23];\n                in.read(header);\n                int count = header[22]& 0xFF;\n                while(count-->0){\n                    bytesinpage += in.read();\n                }\n            }\n            int read = toread;\n            if(bytesinpage-toread<0)read = bytesinpage;\n            if(skip != -1)\n                in.skip(read);\n            else\n                in.read(buf, offset, read);\n            offset += read;\n            toread -= read;\n            bytesinpage -= read;\n        }\n        return bytesinpage;\n    }\n\n    private static String getLyricsVorbis(File file) throws Exception{\n        FileInputStream in = new FileInputStream(file);\n        int bytesinpage = 0;\n        byte buffer[] = new byte[7];\n        bytesinpage = readOgg(buffer,in,bytesinpage,-1);\n        if(!Arrays.equals(buffer, new byte[]{1,\'v\',\'o\',\'r\',\'b\',\'i\',\'s\'})){\n            in.close();\n            return null;\n        }\n        bytesinpage = readOgg(null,in,bytesinpage, 23);\n        bytesinpage = readOgg(buffer,in,bytesinpage,-1);\n        if(!Arrays.equals(buffer, new byte[]{3,\'v\',\'o\',\'r\',\'b\',\'i\',\'s\'})){\n            in.close();\n            return null;\n        }\n        byte length[] = new byte[4];\n        bytesinpage = readOgg(length, in, bytesinpage,-1);\n        bytesinpage = readOgg(null, in, bytesinpage, byteArrayToInt(length));\n        bytesinpage = readOgg(length, in, bytesinpage,-1);\n        int count = byteArrayToIntLE(length);\n        while(count-->0){\n            bytesinpage = readOgg(length, in, bytesinpage,-1);\n            int comment_len = byteArrayToIntLE(length);\n            byte lyrics_tag[] = new byte[]{\'L\',\'Y\',\'R\',\'I\',\'C\',\'S\',\'=\'};\n            if(comment_len<=lyrics_tag.length){\n                bytesinpage = readOgg(null, in, bytesinpage, comment_len);\n                continue;\n            }\n            byte comment_probe[] = new byte[lyrics_tag.length];\n            bytesinpage = readOgg(comment_probe, in, bytesinpage,-1);\n            if(Arrays.equals(comment_probe,lyrics_tag)){\n                byte  lyrics[] = new byte[comment_len - lyrics_tag.length];\n                readOgg(lyrics, in, bytesinpage,-1);\n                in.close();\n                return new String(lyrics);\n            }else{\n                bytesinpage = readOgg(null, in, bytesinpage, comment_len - lyrics_tag.length);\n            }\n        }\n        in.close();\n        return null;\n\n    }\n\n\n    private static String getLyricsMP4(File file) throws Exception{\n        FileInputStream in = new FileInputStream(file);\n\n        byte head[] = new byte[4];\n        in.read(head);\n        int len = byteArrayToInt(head);\n        in.read(head);\n        if (!Arrays.equals(head, new byte[]{\'f\',\'t\',\'y\',\'p\'})){\n            in.close();\n            return null;\n        }\n        in.skip(len - 8);\n        final byte path[][] = new byte[][]{{\'m\',\'o\',\'o\',\'v\'},{\'u\',\'d\',\'t\',\'a\'},{\'m\',\'e\',\'t\',\'a\'},{\'i\',\'l\',\'s\',\'t\'},{(byte) \'\xc2\xa9\',\'l\',\'y\',\'r\'},{\'d\',\'a\',\'t\',\'a\'}};\n        int atom_size = Integer.MAX_VALUE;\n        outter:\n        for(byte[] atom: path){\n            while(in.available()>0){\n                byte buffer[] = new byte[4];\n                in.read(buffer);\n                len = byteArrayToInt(buffer);\n                if(len==0)continue;\n                in.read(buffer);\n                if(len>atom_size){\n                    in.close();\n                    return null;\n                }\n                if (Arrays.equals(buffer, atom)){\n                    atom_size = len - 8;\n                    //Found Atom search next atom\n                    continue outter;\n                }else{\n                    //Skip Atom\n                    in.skip(len - 8);\n                    atom_size-=len;\n                }\n            }\n            in.close();\n            return null;\n        }\n        in.skip(8);\n        byte buffer[] = new byte[atom_size-8];\n        in.read(buffer);\n        in.close();\n        return new String(buffer);\n    }\n\n\n    private static String getLyricsID3(File file) throws Exception{\n        FileInputStream in = new FileInputStream(file);\n        byte buffer[] = new byte[4];\n        in.read(buffer, 0, 3);\n        if (!Arrays.equals(buffer, new byte[] { \'I\', \'D\', \'3\', 0 })){\n            in.close();\n            return null;\n        }\n\n        in.read(buffer, 0, 3);\n        boolean ext = (buffer[2] & (byte) 0b0100000) != 0;\n        in.read(buffer);\n        int len = buffer[3] & 0x7F | (buffer[2] & 0x7F) << 7 | (buffer[1] & 0x7F) << 14 | (buffer[0] & 0x7F) << 21;\n        if (ext) {\n            in.read(buffer); len-=4;\n            int ext_len = byteArrayToInt(buffer);\n            in.skip(ext_len); len -= ext_len;\n\n        }\n        while (len > 0) {\n            byte tag_name[] = new byte[4];\n            in.read(tag_name); len-=4;\n            if(tag_name[0]==0)break;\n            in.read(buffer); len -=4;\n            int tag_len = byteArrayToInt(buffer);\n            in.read(buffer,0,2); len-=2;\n            if(Arrays.equals(tag_name, new byte[] { \'U\', \'S\', \'L\', \'T\' })){\n                byte head[] = new byte[4];\n                in.read(head); len -= 4; tag_len -= 4;\n                while(in.read()!=0){\n                    len--;\n                    tag_len--;\n                }\n                if(head[0]==1)in.read();\n                byte tag_value[] = new byte[tag_len];\n                in.read(tag_value); len -= tag_len;\n                in.close();\n                Charset charset = null;\n                switch (head[0]){\n                    case 0: charset = Charset.forName("ISO-8859-1");\n                        break;\n                    case 1: charset = Charset.forName("UTF-16");\n                        break;\n                    case 2: charset = Charset.forName("UTF-16BE");\n                        break;\n                    case 3: charset = Charset.forName("UTF-8");\n                        break;\n                    default:\n                        return null;\n                }\n                return new String(tag_value,charset);\n\n            }else{\n                in.skip(tag_len); len -= tag_len;\n            }\n\n        }\n        in.close();\n        return null;\n\n    }\n\n    private static int byteArrayToInt(byte[] b) {\n        return b[3] & 0xFF | (b[2] & 0xFF) << 8 | (b[1] & 0xFF) << 16 | (b[0] & 0xFF) << 24;\n    }\n\n    private static int byteArrayToIntLE(byte[] b) {\n        return b[0] & 0xFF | (b[1] & 0xFF) << 8 | (b[2] & 0xFF) << 16 | (b[3] & 0xFF) << 24;\n    }\n\n}\n'