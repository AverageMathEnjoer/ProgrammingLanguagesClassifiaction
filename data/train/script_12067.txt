b'package com.rd.draw.controller;\n\nimport android.content.Context;\nimport android.content.res.TypedArray;\nimport android.graphics.Color;\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\nimport android.util.AttributeSet;\nimport android.view.View;\n\nimport com.rd.animation.type.AnimationType;\nimport com.rd.animation.type.BaseAnimation;\nimport com.rd.animation.type.ColorAnimation;\nimport com.rd.animation.type.FillAnimation;\nimport com.rd.animation.type.ScaleAnimation;\nimport com.rd.draw.data.Indicator;\nimport com.rd.draw.data.Orientation;\nimport com.rd.draw.data.RtlMode;\nimport com.rd.pageindicatorview.R;\nimport com.rd.utils.DensityUtils;\n\npublic class AttributeController {\n\n    private Indicator indicator;\n\n    private static final int DEFAULT_IDLE_DURATION = 3000;\n\n    public AttributeController(@NonNull Indicator indicator) {\n        this.indicator = indicator;\n    }\n\n    public void init(@NonNull Context context, @Nullable AttributeSet attrs) {\n        TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.PageIndicatorView, 0, 0);\n        initCountAttribute(typedArray);\n        initColorAttribute(typedArray);\n        initAnimationAttribute(typedArray);\n        initSizeAttribute(typedArray);\n        typedArray.recycle();\n    }\n\n    private void initCountAttribute(@NonNull TypedArray typedArray) {\n        int viewPagerId = typedArray.getResourceId(R.styleable.PageIndicatorView_piv_viewPager, View.NO_ID);\n        boolean autoVisibility = typedArray.getBoolean(R.styleable.PageIndicatorView_piv_autoVisibility, true);\n        boolean dynamicCount = typedArray.getBoolean(R.styleable.PageIndicatorView_piv_dynamicCount, false);\n        int count = typedArray.getInt(R.styleable.PageIndicatorView_piv_count, Indicator.COUNT_NONE);\n\n        if (count == Indicator.COUNT_NONE) {\n            count = Indicator.DEFAULT_COUNT;\n        }\n\n        int position = typedArray.getInt(R.styleable.PageIndicatorView_piv_select, 0);\n        if (position < 0) {\n            position = 0;\n        } else if (count > 0 && position > count - 1) {\n            position = count - 1;\n        }\n\n        indicator.setViewPagerId(viewPagerId);\n        indicator.setAutoVisibility(autoVisibility);\n        indicator.setDynamicCount(dynamicCount);\n        indicator.setCount(count);\n\n        indicator.setSelectedPosition(position);\n        indicator.setSelectingPosition(position);\n        indicator.setLastSelectedPosition(position);\n    }\n\n    private void initColorAttribute(@NonNull TypedArray typedArray) {\n        int unselectedColor = typedArray.getColor(R.styleable.PageIndicatorView_piv_unselectedColor, Color.parseColor(ColorAnimation.DEFAULT_UNSELECTED_COLOR));\n        int selectedColor = typedArray.getColor(R.styleable.PageIndicatorView_piv_selectedColor, Color.parseColor(ColorAnimation.DEFAULT_SELECTED_COLOR));\n\n        indicator.setUnselectedColor(unselectedColor);\n        indicator.setSelectedColor(selectedColor);\n    }\n\n    private void initAnimationAttribute(@NonNull TypedArray typedArray) {\n        boolean interactiveAnimation = typedArray.getBoolean(R.styleable.PageIndicatorView_piv_interactiveAnimation, false);\n        long animationDuration = (long) typedArray.getInt(R.styleable.PageIndicatorView_piv_animationDuration, BaseAnimation.DEFAULT_ANIMATION_TIME);\n        if (animationDuration < 0) {\n            animationDuration = 0;\n        }\n\n        int animIndex = typedArray.getInt(R.styleable.PageIndicatorView_piv_animationType, AnimationType.NONE.ordinal());\n        AnimationType animationType = getAnimationType(animIndex);\n\n        int rtlIndex = typedArray.getInt(R.styleable.PageIndicatorView_piv_rtl_mode, RtlMode.Off.ordinal());\n        RtlMode rtlMode = getRtlMode(rtlIndex);\n\n        boolean fadeOnIdle = typedArray.getBoolean(R.styleable.PageIndicatorView_piv_fadeOnIdle, false);\n        long idleDuration = (long) typedArray.getInt(R.styleable.PageIndicatorView_piv_idleDuration, DEFAULT_IDLE_DURATION);\n\n        indicator.setAnimationDuration(animationDuration);\n        indicator.setInteractiveAnimation(interactiveAnimation);\n        indicator.setAnimationType(animationType);\n        indicator.setRtlMode(rtlMode);\n        indicator.setFadeOnIdle(fadeOnIdle);\n        indicator.setIdleDuration(idleDuration);\n    }\n\n    private void initSizeAttribute(@NonNull TypedArray typedArray) {\n        int orientationIndex = typedArray.getInt(R.styleable.PageIndicatorView_piv_orientation, Orientation.HORIZONTAL.ordinal());\n        Orientation orientation;\n\n        if (orientationIndex == 0) {\n            orientation = Orientation.HORIZONTAL;\n        } else {\n            orientation = Orientation.VERTICAL;\n        }\n\n        int radius = (int) typedArray.getDimension(R.styleable.PageIndicatorView_piv_radius, DensityUtils.dpToPx(Indicator.DEFAULT_RADIUS_DP));\n        if (radius < 0) {\n            radius = 0;\n        }\n\n        int padding = (int) typedArray.getDimension(R.styleable.PageIndicatorView_piv_padding, DensityUtils.dpToPx(Indicator.DEFAULT_PADDING_DP));\n        if (padding < 0) {\n            padding = 0;\n        }\n\n        float scaleFactor = typedArray.getFloat(R.styleable.PageIndicatorView_piv_scaleFactor, ScaleAnimation.DEFAULT_SCALE_FACTOR);\n        if (scaleFactor < ScaleAnimation.MIN_SCALE_FACTOR) {\n            scaleFactor = ScaleAnimation.MIN_SCALE_FACTOR;\n\n        } else if (scaleFactor > ScaleAnimation.MAX_SCALE_FACTOR) {\n            scaleFactor = ScaleAnimation.MAX_SCALE_FACTOR;\n        }\n\n        int stroke = (int) typedArray.getDimension(R.styleable.PageIndicatorView_piv_strokeWidth, DensityUtils.dpToPx(FillAnimation.DEFAULT_STROKE_DP));\n        if (stroke > radius) {\n            stroke = radius;\n        }\n\n        if (indicator.getAnimationType() != AnimationType.FILL) {\n            stroke = 0;\n        }\n\n        indicator.setRadius(radius);\n        indicator.setOrientation(orientation);\n        indicator.setPadding(padding);\n        indicator.setScaleFactor(scaleFactor);\n        indicator.setStroke(stroke);\n    }\n\n    private AnimationType getAnimationType(int index) {\n        switch (index) {\n            case 0:\n                return AnimationType.NONE;\n            case 1:\n                return AnimationType.COLOR;\n            case 2:\n                return AnimationType.SCALE;\n            case 3:\n                return AnimationType.WORM;\n            case 4:\n                return AnimationType.SLIDE;\n            case 5:\n                return AnimationType.FILL;\n            case 6:\n                return AnimationType.THIN_WORM;\n            case 7:\n                return AnimationType.DROP;\n            case 8:\n                return AnimationType.SWAP;\n            case 9:\n                return AnimationType.SCALE_DOWN;\n        }\n\n        return AnimationType.NONE;\n    }\n\n    private RtlMode getRtlMode(int index) {\n        switch (index) {\n            case 0:\n                return RtlMode.On;\n            case 1:\n                return RtlMode.Off;\n            case 2:\n                return RtlMode.Auto;\n        }\n\n        return RtlMode.Auto;\n    }\n}\n'