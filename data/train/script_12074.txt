b'package icu.nullptr.twifucker\n\nimport android.annotation.SuppressLint\nimport android.content.Context\nimport android.content.SharedPreferences\nimport com.github.kyuubiran.ezxhelper.EzXHelper.appContext\nimport com.github.kyuubiran.ezxhelper.EzXHelper.modulePath\nimport com.github.kyuubiran.ezxhelper.HookFactory\nimport com.github.kyuubiran.ezxhelper.Log\nimport com.tencent.mmkv.MMKV\nimport de.robv.android.xposed.XC_MethodHook\nimport org.json.JSONArray\nimport org.json.JSONObject\nimport java.io.File\nimport java.util.*\n\nval reGenericClass by lazy { Regex("""^(\\w+)<(\\w+)>$""") }\n\nval logFileDir by lazy { File(appContext.externalCacheDir?.absolutePath + "/twifucker_log/") }\n\nval logFile by lazy { File(logFileDir, "log.txt") }\n\nval logJsonFile by lazy { File(logFileDir, "log_json.txt") }\n\n@Suppress("DEPRECATION")\nval hostAppLastUpdate by lazy {\n    appContext.packageManager.getPackageInfo(\n        appContext.packageName, 0\n    ).lastUpdateTime\n}\nval moduleLastModify by lazy {\n    File(modulePath).lastModified()\n}\n\nval modulePrefs: MMKV by lazy {\n    nativeLoadPrefs()\n}\n\n@Suppress("DEPRECATION")\nval hostPrefs: SharedPreferences by lazy {\n    appContext.getSharedPreferences(\n        appContext.packageName + "_preferences", Context.MODE_MULTI_PROCESS\n    )\n}\n\n@SuppressLint("DiscouragedApi")\nfun getId(name: String, defType: String): Int {\n    return appContext.resources.getIdentifier(\n        name, defType, appContext.packageName\n    )\n}\n\nexternal fun nativeLoadPrefs(): MMKV\n\nfun writeJsonLog(content: String) {\n    try {\n        if (!logFileDir.exists()) logFileDir.mkdirs()\n        if (!logJsonFile.exists()) logJsonFile.createNewFile()\n        logJsonFile.appendText(content + "\\n")\n    } catch (t: Throwable) {\n        Log.e(t)\n    }\n}\n\nfun isEntryNeedsRemove(entryId: String): Boolean {\n    // promoted tweet\n    if (entryId.startsWith("promotedTweet-") && modulePrefs.getBoolean(\n            "disable_promoted_content", true\n        )\n    ) {\n        return true\n    }\n    // who to follow module\n    if ((entryId.startsWith("whoToFollow-") || entryId.startsWith("who-to-follow-") || entryId.startsWith(\n            "connect-module-"\n        )) && modulePrefs.getBoolean(\n            "disable_who_to_follow", false\n        )\n    ) {\n        return true\n    }\n    // topics to follow module\n    if (entryId.startsWith("TopicsModule-") && modulePrefs.getBoolean(\n            "disable_topics_to_follow", false\n        )\n    ) {\n        return true\n    }\n    // tweet detail related tweets\n    if (entryId.startsWith("tweetdetailrelatedtweets-") && modulePrefs.getBoolean(\n            "disable_tweet_detail_related_tweets", false\n        )\n    ) {\n        return true\n    }\n    return false\n}\n\nfun clearUrlQueries(url: String): String {\n    return url.split("?")[0]\n}\n\nfun getUrlExtension(url: String): String {\n    val urlWithoutQueries = clearUrlQueries(url)\n    return urlWithoutQueries.substring(urlWithoutQueries.lastIndexOf(".") + 1)\n}\n\nfun genOrigUrl(url: String): String {\n    val urlWithoutQueries = clearUrlQueries(url)\n    val urlWithoutExt = urlWithoutQueries.substring(0, urlWithoutQueries.lastIndexOf("."))\n    val ext = getUrlExtension(urlWithoutQueries)\n    return "$urlWithoutExt?format=$ext&name=orig"\n}\n\ninline fun JSONArray.forEach(action: (JSONObject) -> Unit) {\n    (0 until this.length()).forEach { i ->\n        if (this[i] is JSONObject) {\n            action(this[i] as JSONObject)\n        }\n    }\n}\n\ninline fun JSONArray.forEachIndexed(action: (index: Int, JSONObject) -> Unit) {\n    (0 until this.length()).forEach { i ->\n        if (this[i] is JSONObject) {\n            action(i, this[i] as JSONObject)\n        }\n    }\n}\n\ninline fun HookFactory.replaceMeasure(\n    name: String,\n    crossinline block: (XC_MethodHook.MethodHookParam) -> Any?\n) {\n    replace {\n        val start = System.currentTimeMillis()\n        val ret = block(it)\n        val end = System.currentTimeMillis()\n        val elapsed = end - start\n        if (elapsed > 10) {\n            Log.d("$name elapsed: ${System.currentTimeMillis() - start}ms")\n        }\n        return@replace ret\n    }\n}\n\ninline fun HookFactory.beforeMeasure(\n    name: String,\n    crossinline block: (XC_MethodHook.MethodHookParam) -> Unit\n) {\n    before {\n        val start = System.currentTimeMillis()\n        block(it)\n        val end = System.currentTimeMillis()\n        val elapsed = end - start\n        if (elapsed > 10) {\n            Log.d("$name elapsed: ${System.currentTimeMillis() - start}ms")\n        }\n    }\n}\n\ninline fun HookFactory.afterMeasure(\n    name: String,\n    crossinline block: (XC_MethodHook.MethodHookParam) -> Unit\n) {\n    after {\n        val start = System.currentTimeMillis()\n        block(it)\n        val end = System.currentTimeMillis()\n        val elapsed = end - start\n        if (elapsed > 10) {\n            Log.d("$name elapsed: ${System.currentTimeMillis() - start}ms")\n        }\n    }\n}\n'