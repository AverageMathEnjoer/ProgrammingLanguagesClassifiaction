b'module Hoodle.Coroutine.Callback where\n\nimport Control.Concurrent (MVar)\nimport Control.Exception\n  ( ErrorCall,\n    PatternMatchFail,\n    SomeException (..),\n    catch,\n  )\nimport Control.Monad.Trans.Crtn.Driver (Driver)\nimport qualified Control.Monad.Trans.Crtn.EventHandler as E\nimport Hoodle.Util (errorlog)\nimport System.Exit (exitFailure)\nimport Prelude (IO, Maybe (..), show)\n\neventHandler :: MVar (Maybe (Driver e IO ())) -> e -> IO ()\neventHandler evar ev = E.eventHandler evar ev `catch` allexceptionproc\n\nallexceptionproc :: SomeException -> IO ()\nallexceptionproc e = do\n  errorlog (show e)\n  exitFailure\n\nerrorcall :: ErrorCall -> IO ()\nerrorcall e = errorlog (show e)\n\npatternerr :: PatternMatchFail -> IO ()\npatternerr e = errorlog (show e)\n'