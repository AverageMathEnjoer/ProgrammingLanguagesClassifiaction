b'module Rest.Gen.Base.XML\n  ( getXmlSchema\n  , showSchema\n  , showExample\n  ) where\n\nimport Data.List\nimport Text.XML.HXT.Arrow.Pickle\nimport Text.XML.HXT.Arrow.Pickle.Schema\n\ngetXmlSchema :: XmlPickler a => proxy a -> Schema\ngetXmlSchema = theSchema . getPU\n\ngetPU :: XmlPickler a => proxy a -> PU a\ngetPU _ = xpickle\n\nshowSchema :: Schema -> String\nshowSchema sch =\n  case result of\n    []  -> ""\n    [x] -> x\n    xs  -> intercalate "\\n" $\n             ["<complexType name=\'data\'>"]\n          ++ indent xs\n          ++ ["</complexType>"]\n where\n  result = showSchema\' "" sch\n\n  showSchema\' :: String -> Schema -> [String]\n  showSchema\' ats Any              = ["<xs:any" ++ ats ++ "/>"]\n\n  showSchema\' _ (Seq [])           = []\n  showSchema\' ats (Seq [x])        = showSchema\' ats x\n  showSchema\' ats (Seq ss)         = ["<xs:sequence" ++ ats ++ ">"]\n                                  ++ indent (concatMap (showSchema\' "") ss)\n                                  ++ ["</xs:sequence>"]\n\n  showSchema\' _ (Alt [])           = []\n  showSchema\' ats (Alt [x])        = showSchema\' ats x\n  showSchema\' ats (Alt ss)         = ["<xs:choice" ++ ats ++ ">"]\n                                  ++ indent (concatMap (showSchema\' "") ss)\n                                  ++ ["</xs:choice>"]\n\n  showSchema\' ats (Rep _ u s)        = showSchema\' (unwords $ ats : mn ++ mx) s\n        where mn = ["minOccurs=" ++ show u | u >= 0]\n              mx = ["maxOccurs=" ++ show u | u >= 0]\n\n  showSchema\' ats (Element n (CharData dty)) = ["<xs:element name=\'" ++ n ++ "\' type=\'" ++ dataToString dty ++ "\'" ++ ats ++ "/>"]\n  showSchema\' ats (Element n (Seq [])) = ["<xs:element name=\'" ++ n ++ "\'" ++ ats ++ "/>"]\n  showSchema\' ats (Element n s)    = ["<xs:element name=\'" ++ n ++ "\'" ++ ats ++ ">"]\n                                  ++ indent (\n                                         ["<xs:complexType>"]\n                                      ++ indent (showSchema\' "" s)\n                                      ++ ["</xs:complexType>"])\n                                  ++ ["</xs:element>"]\n\n  showSchema\' ats (Attribute n (CharData dty))  = ["<xs:attribute name=\'" ++ n ++ "\' type=\'" ++ dataToString dty ++ "\'" ++ ats ++ "/>"]\n  showSchema\' ats (ElemRef n)     = ["<xs:element ref=\'" ++ n ++ "\'" ++ ats ++ "/>"]\n  showSchema\' _ _                 = []\n\n  dataToString :: DataTypeDescr -> String\n  dataToString (DTDescr _ n _) = "xs:" ++ n\n\nindent :: [String] -> [String]\nindent = map ("  " ++)\n\nshowExample :: Schema -> String\nshowExample sch = intercalate "\\n" $ showExample\' sch\n where\n  showExample\' :: Schema -> [String]\n  showExample\' Any              = ["<anyTag/>"]\n\n  showExample\' (Seq [])         = []\n  showExample\' (Seq [x])        = showExample\' x\n  showExample\' (Seq ss)         = concatMap showExample\' ss\n\n  showExample\' (Alt [])         = []\n  showExample\' (Alt (x : _))    = showExample\' x\n\n  showExample\' (Rep _ _ s)      = showExample\' s\n\n  showExample\' (Element n (CharData _)) = ["<" ++ n ++ ">string</" ++ n ++ ">"]\n  showExample\' (Element n (Seq [])) = ["<" ++ n ++ "/>"]\n  showExample\' (Element n s)    = ["<" ++ n ++ ">"]\n                               ++ indent (showExample\' s)\n                               ++ ["</" ++ n ++ ">"]\n  showExample\' _                = []\n'