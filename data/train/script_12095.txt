b'#define NOMINMAX\n#define WIN32_LEAN_AND_MEAN\n#include <Windows.h>\n#include "../UABE_Win32/Win32PluginManager.h"\n#include "../UABE_Generic/FileContextInfo.h"\n#include "../UABE_Win32/Win32AppContext.h"\n#include "../UABE_Win32/FileDialog.h"\n#include "../AssetsTools/AssetsReplacer.h"\n#include "../libStringConverter/convert.h"\n#include <format>\n\nenum class ResourceRefType\n{\n\tStreamingInfo,\n\tStreamedResource,\n\tOther\n};\nstruct ResourceRef\n{\n\tAssetTypeValueField* pOffsetField = nullptr;\n\tAssetTypeValueField* pSizeField = nullptr;\n\tAssetTypeValueField* pPathField = nullptr;\n\tResourceRefType type = ResourceRefType::Other;\n\tbool Read(AssetTypeValueField* pParentField)\n\t{\n\t\tif (pParentField->GetType() == "StreamingInfo")\n\t\t{\n\t\t\tpOffsetField = pParentField->Get("offset");\n\t\t\tpSizeField = pParentField->Get("size");\n\t\t\tpPathField = pParentField->Get("path");\n\t\t\ttype = ResourceRefType::StreamingInfo;\n\t\t}\n\t\telse if (pParentField->GetType() == "StreamedResource")\n\t\t{\n\t\t\tpOffsetField = pParentField->Get("m_Offset");\n\t\t\tpSizeField = pParentField->Get("m_Size");\n\t\t\tpPathField = pParentField->Get("m_Source");\n\t\t\ttype = ResourceRefType::StreamedResource;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpOffsetField = nullptr;\n\t\t\tpSizeField = nullptr;\n\t\t\tpPathField = nullptr;\n\t\t\ttype = ResourceRefType::Other;\n\t\t}\n\t\tif (!pOffsetField || pOffsetField->IsDummy() || !pOffsetField->GetValue()\n\t\t\t|| !pSizeField || pSizeField->IsDummy() || !pSizeField->GetValue()\n\t\t\t|| !pPathField || pPathField->IsDummy() || !pPathField->GetValue() || pPathField->GetValue()->GetType() != ValueType_String)\n\t\t\treturn false;\n\t\treturn true;\n\t}\n};\n\nstatic void reportError(Win32AppContext& appContext, const char *message)\n{\n\tauto messageT = unique_MultiByteToTCHAR(message);\n\tMessageBox(appContext.getMainWindow().getWindow(),\n\t\tmessageT.get(), TEXT("Asset Bundle Extractor"), MB_ICONERROR);\n}\n\nclass SelectedResourceExportProvider : public IAssetViewEntryOptionProvider\n{\npublic:\n\tEAssetOptionType getType()\n\t{\n\t\treturn EAssetOptionType::Export;\n\t}\n\tstd::unique_ptr<IOptionRunner> prepareForSelection(\n\t\tclass Win32AppContext& appContext, class AssetViewModifyDialog& assetViewDialog,\n\t\tAssetViewModifyDialog::FieldInfo fieldInfo,\n\t\tstd::string& optionName)\n\t{\n\t\tResourceRef resourceRef;\n\t\tif (!resourceRef.Read(fieldInfo.pValueField))\n\t\t\treturn nullptr;\n\t\toptionName = "Export resource to file";\n\t\treturn std::make_unique<OptionRunnerByFn>([&appContext, &assetViewDialog, fieldInfo, resourceRef]()\n\t\t\t{\n\t\t\t\tuint64_t offset = resourceRef.pOffsetField->GetValue()->AsUInt64();\n\t\t\t\tuint64_t size = resourceRef.pSizeField->GetValue()->AsUInt64();\n\t\t\t\tconst char* path = resourceRef.pPathField->GetValue()->AsString();\n\t\t\t\tAssetIdentifier asset(fieldInfo.assetIDs.fileID, fieldInfo.assetIDs.pathID);\n\t\t\t\tif (!asset.resolve(appContext))\n\t\t\t\t{\n\t\t\t\t\treportError(appContext, "Unable to find the asset.");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tstd::shared_ptr<ResourcesFileContextInfo> pResourcesFile = nullptr;\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tpResourcesFile = FindResourcesFile(appContext, path, asset, {});\n\t\t\t\t}\n\t\t\t\tcatch (AssetUtilError e)\n\t\t\t\t{\n\t\t\t\t\treportError(appContext, e.what());\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tassert(pResourcesFile != nullptr); //Should be guaranteed by FindResourcesFile.\n\t\t\t\tstd::shared_ptr<IAssetsReader> pResourceReader = pResourcesFile->getResource(pResourcesFile, offset, size);\n\t\t\t\tif (pResourceReader == nullptr)\n\t\t\t\t{\n\t\t\t\t\treportError(appContext, "Unable to open the resource.");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\twchar_t* saveFilePath = nullptr;\n\t\t\t\tif (SUCCEEDED(ShowFileSaveDialog(appContext.getMainWindow().getWindow(),\n\t\t\t\t\t&saveFilePath, L"*.*|Any file:",\n\t\t\t\t\tnullptr, nullptr, TEXT("Save resource data"),\n\t\t\t\t\tUABE_FILEDIALOG_EXPIMPASSET_GUID)))\n\t\t\t\t{\n\t\t\t\t\tstd::unique_ptr<IAssetsWriter> pWriter(Create_AssetsWriterToFile(saveFilePath, true, true, RWOpenFlags_Immediately));\n\t\t\t\t\tFreeCOMFilePathBuf(&saveFilePath);\n\t\t\t\t\tif (pWriter == nullptr)\n\t\t\t\t\t{\n\t\t\t\t\t\treportError(appContext, "Unable to open the output file.");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tstd::unique_ptr<AssetsEntryReplacer> pCopier(MakeAssetModifierFromReader(0, 0, 0, 0, pResourceReader.get(), size));\n\t\t\t\t\tif (pCopier->Write(0, pWriter.get()) != size)\n\t\t\t\t\t{\n\t\t\t\t\t\treportError(appContext, "Unable to copy the data to the output file.");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t}\n};\n\nclass SelectedResourceImportProvider : public IAssetViewEntryOptionProvider\n{\npublic:\n\tEAssetOptionType getType()\n\t{\n\t\treturn EAssetOptionType::Import;\n\t}\n\tstd::unique_ptr<IOptionRunner> prepareForSelection(\n\t\tclass Win32AppContext& appContext, class AssetViewModifyDialog& assetViewDialog,\n\t\tAssetViewModifyDialog::FieldInfo fieldInfo,\n\t\tstd::string& optionName)\n\t{\n\t\tResourceRef resourceRef;\n\t\tif (!resourceRef.Read(fieldInfo.pValueField))\n\t\t\treturn nullptr;\n\t\toptionName = "Import resource from file";\n\t\treturn std::make_unique<OptionRunnerByFn>([&appContext, &assetViewDialog, fieldInfo, resourceRef]()\n\t\t{\n\t\t\tAssetIdentifier asset(fieldInfo.assetIDs.fileID, fieldInfo.assetIDs.pathID);\n\t\t\tif (!asset.resolve(appContext))\n\t\t\t{\n\t\t\t\treportError(appContext, "Unable to find the asset.");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tstd::string resourcesFileRefPath;\n\t\t\tauto tryFindResourcesFile = [&appContext, &asset, &resourcesFileRefPath](const std::string& path)\n\t\t\t{\n\t\t\t\tstd::shared_ptr<ResourcesFileContextInfo> pResourcesFile = nullptr;\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tpResourcesFile = FindResourcesFile(appContext, path, asset, {});\n\t\t\t\t\tif (pResourcesFile) resourcesFileRefPath = path;\n\t\t\t\t}\n\t\t\t\tcatch (AssetUtilError e) {}\n\t\t\t\treturn pResourcesFile;\n\t\t\t};\n\t\t\tstd::shared_ptr<ResourcesFileContextInfo> pResourcesFile = tryFindResourcesFile(resourceRef.pPathField->GetValue()->AsString());\n\t\t\tif (pResourcesFile == nullptr)\n\t\t\t{\n\t\t\t\tstd::string assetsFileRefName;\n\t\t\t\tauto pParentBundle = std::dynamic_pointer_cast<BundleFileContextInfo>(appContext.getContextInfo(asset.pFile->getParentFileID()));\n\t\t\t\tif (pParentBundle != 0)\n\t\t\t\t{\n\t\t\t\t\tstd::string bundlePathName = pParentBundle->getBundlePathName();\n\t\t\t\t\tif (!bundlePathName.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tassetsFileRefName = std::string("archive:/") + bundlePathName + "/" + asset.pFile->getFileName();\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tassetsFileRefName = asset.pFile->getFileName();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tassetsFileRefName = asset.pFile->getFileName();\n\t\t\t\tif (assetsFileRefName.size() > 7\n\t\t\t\t\t&& !strnicmp(&assetsFileRefName.data()[assetsFileRefName.size() - 7], ".assets", 7))\n\t\t\t\t\tassetsFileRefName.erase(assetsFileRefName.begin() + (assetsFileRefName.size() - 7), assetsFileRefName.end());\n\t\t\t\t//If the string iterator bug strikes again: assetsFileRefName = assetsFileRefName.substr(0, assetsFileRefName.size() - 7);\n\t\t\t\tif (resourceRef.type == ResourceRefType::StreamedResource)\n\t\t\t\t{\n\t\t\t\t\tpResourcesFile = tryFindResourcesFile(assetsFileRefName + ".resources");\n\t\t\t\t\tif (!pResourcesFile)\n\t\t\t\t\t\tpResourcesFile = tryFindResourcesFile(assetsFileRefName + ".resource");\n\t\t\t\t\t//".resources"\n\t\t\t\t}\n\t\t\t\telse //if (resourceRef.type == ResourceRefType::StreamingInfo)\n\t\t\t\t\tpResourcesFile = tryFindResourcesFile(assetsFileRefName + ".resS");\n\t\t\t\tif (pResourcesFile == nullptr)\n\t\t\t\t{\n\t\t\t\t\tstd::string message = std::format("Unable to find the associated resources file.\\n"\n\t\t\t\t\t\t"Make sure the {}{} file exists (or create an empty one) and open it within UABE.",\n\t\t\t\t\t\tasset.pFile->getFileName(),\n\t\t\t\t\t\t(resourceRef.type == ResourceRefType::StreamedResource) ? ".resource" : ".resS");\n\t\t\t\t\treportError(appContext, message.c_str());\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\twchar_t* openFilePath = nullptr;\n\t\t\tif (SUCCEEDED(ShowFileOpenDialog(appContext.getMainWindow().getWindow(),\n\t\t\t\t&openFilePath, L"*.*|Any file:",\n\t\t\t\tnullptr, nullptr, TEXT("Open file to import"),\n\t\t\t\tUABE_FILEDIALOG_EXPIMPASSET_GUID)))\n\t\t\t{\n\t\t\t\tstd::shared_ptr<IAssetsReader> pReader(Create_AssetsReaderFromFile(openFilePath, true, RWOpenFlags_Immediately));\n\t\t\t\tFreeCOMFilePathBuf(&openFilePath);\n\t\t\t\tif (pReader == nullptr)\n\t\t\t\t{\n\t\t\t\t\treportError(appContext, "Unable to open the input file.");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tQWORD importSize = 0;\n\t\t\t\tif (!pReader->Seek(AssetsSeek_End, 0) || !pReader->Tell(importSize) || !pReader->Seek(AssetsSeek_Begin, 0))\n\t\t\t\t{\n\t\t\t\t\treportError(appContext, "Unable to read the input file.");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tuint64_t newOffset = 0;\n\t\t\t\tpResourcesFile->addResource(std::move(pReader), 0, importSize, newOffset);\n\n\t\t\t\tif (!assetViewDialog.setStringValue(resourceRef.pPathField, fieldInfo.assetIDs, resourcesFileRefPath))\n\t\t\t\t{\n\t\t\t\t\t//Shouldn\'t happen.\n\t\t\t\t\treportError(appContext, "Unable to assign the new resource reference.");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tresourceRef.pOffsetField->GetValue()->Set(&newOffset, ValueType_UInt64);\n\t\t\t\tresourceRef.pSizeField->GetValue()->Set(&importSize, ValueType_UInt64);\n\t\t\t\tassetViewDialog.updateValueFieldText(fieldInfo);\n\t\t\t}\n\t\t});\n\t}\n};\n\nclass SelectedByteArrayExportProvider : public IAssetViewEntryOptionProvider\n{\npublic:\n\tEAssetOptionType getType()\n\t{\n\t\treturn EAssetOptionType::Export;\n\t}\n\tstd::unique_ptr<IOptionRunner> prepareForSelection(\n\t\tclass Win32AppContext& appContext, class AssetViewModifyDialog& assetViewDialog,\n\t\tAssetViewModifyDialog::FieldInfo fieldInfo,\n\t\tstd::string& optionName)\n\t{\n\t\tif (fieldInfo.pValueField->GetValue() == nullptr)\n\t\t\treturn nullptr;\n\t\tif (fieldInfo.pValueField->GetValue()->GetType() == ValueType_Array)\n\t\t{\n\t\t\tif (fieldInfo.pValueField->GetTemplateField() == nullptr\n\t\t\t\t|| fieldInfo.pValueField->GetTemplateField()->children.size() != 2\n\t\t\t\t|| fieldInfo.pValueField->GetTemplateField()->children[0].valueType != ValueType_Int32\n\t\t\t\t|| (fieldInfo.pValueField->GetTemplateField()->children[1].valueType != ValueType_UInt8\n\t\t\t\t\t&& fieldInfo.pValueField->GetTemplateField()->children[1].valueType != ValueType_Int8))\n\t\t\t\treturn nullptr;\n\t\t}\n\t\telse if (fieldInfo.pValueField->GetValue()->GetType() != ValueType_ByteArray\n\t\t\t&& fieldInfo.pValueField->GetValue()->GetType() != ValueType_String)\n\t\t\treturn nullptr;\n\t\toptionName = "Export data to file";\n\t\treturn std::make_unique<OptionRunnerByFn>([&appContext, &assetViewDialog, fieldInfo]()\n\t\t\t{\n\t\t\t\tstd::unique_ptr<uint8_t[]> data_raii;\n\t\t\t\tconst uint8_t *data = nullptr;\n\t\t\t\tsize_t size = 0;\n\n\t\t\t\tswitch (fieldInfo.pValueField->GetValue()->GetType())\n\t\t\t\t{\n\t\t\t\t\tcase ValueType_Array:\n\t\t\t\t\t{\n\t\t\t\t\t\tsize = fieldInfo.pValueField->GetChildrenCount();\n\t\t\t\t\t\tdata_raii.reset(new uint8_t[size]);\n\t\t\t\t\t\tdata = data_raii.get();\n\t\t\t\t\t\tAssetTypeValueField** ppChildren = fieldInfo.pValueField->GetChildrenList();\n\t\t\t\t\t\tfor (size_t i = 0; i < size; ++i)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (ppChildren[i]->GetValue() == nullptr)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\treportError(appContext, "Unable to interpret the data.");\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdata_raii[i] = (uint8_t)ppChildren[i]->GetValue()->AsUInt();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t\tcase ValueType_String:\n\t\t\t\t\t{\n\t\t\t\t\t\tdata = reinterpret_cast<const uint8_t*>(fieldInfo.pValueField->GetValue()->AsString());\n\t\t\t\t\t\tif (data == nullptr)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treportError(appContext, "Unable to interpret the data.");\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsize = strlen(fieldInfo.pValueField->GetValue()->AsString());\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t\tcase ValueType_ByteArray:\n\t\t\t\t\t{\n\t\t\t\t\t\tAssetTypeByteArray* pByteArray = fieldInfo.pValueField->GetValue()->AsByteArray();\n\t\t\t\t\t\tif (pByteArray == nullptr)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treportError(appContext, "Unable to interpret the data.");\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdata = pByteArray->data;\n\t\t\t\t\t\tsize = pByteArray->size;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t{\n\t\t\t\t\t\t//Should be excluded by prepareForSelection.\n\t\t\t\t\t\treportError(appContext, "Unable to interpret the data.");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\twchar_t* saveFilePath = nullptr;\n\t\t\t\tif (FAILED(ShowFileSaveDialog(appContext.getMainWindow().getWindow(),\n\t\t\t\t\t&saveFilePath, L"*.*|Any file:",\n\t\t\t\t\tnullptr, nullptr, TEXT("Save resource data"),\n\t\t\t\t\tUABE_FILEDIALOG_EXPIMPASSET_GUID)))\n\t\t\t\t\treturn;\n\t\t\t\tstd::unique_ptr<IAssetsWriter> pWriter(Create_AssetsWriterToFile(saveFilePath, true, true, RWOpenFlags_Immediately));\n\t\t\t\tFreeCOMFilePathBuf(&saveFilePath);\n\t\t\t\tif (pWriter == nullptr)\n\t\t\t\t{\n\t\t\t\t\treportError(appContext, "Unable to open the output file.");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (pWriter->Write(size, data) != size)\n\t\t\t\t{\n\t\t\t\t\treportError(appContext, "Unable to write the data to the output file.");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t});\n\t}\n};\n\nclass SelectedByteArrayImportProvider : public IAssetViewEntryOptionProvider\n{\npublic:\n\tEAssetOptionType getType()\n\t{\n\t\treturn EAssetOptionType::Import;\n\t}\n\tstd::unique_ptr<IOptionRunner> prepareForSelection(\n\t\tclass Win32AppContext& appContext, class AssetViewModifyDialog& assetViewDialog,\n\t\tAssetViewModifyDialog::FieldInfo fieldInfo,\n\t\tstd::string& optionName)\n\t{\n\t\tif (fieldInfo.pValueField->GetValue() == nullptr)\n\t\t\treturn nullptr;\n\t\tif (fieldInfo.pValueField->GetValue()->GetType() == ValueType_Array)\n\t\t{\n\t\t\tif (fieldInfo.pValueField->GetTemplateField() == nullptr\n\t\t\t\t|| fieldInfo.pValueField->GetTemplateField()->children.size() != 2\n\t\t\t\t|| fieldInfo.pValueField->GetTemplateField()->children[0].valueType != ValueType_Int32\n\t\t\t\t|| (fieldInfo.pValueField->GetTemplateField()->children[1].valueType != ValueType_UInt8\n\t\t\t\t\t&& fieldInfo.pValueField->GetTemplateField()->children[1].valueType != ValueType_Int8)\n\t\t\t\t|| fieldInfo.pValueField->GetTemplateField()->children[1].align)\n\t\t\t\treturn nullptr;\n\t\t}\n\t\telse if (fieldInfo.pValueField->GetValue()->GetType() != ValueType_ByteArray\n\t\t\t&& fieldInfo.pValueField->GetValue()->GetType() != ValueType_String)\n\t\t\treturn nullptr;\n\t\toptionName = "Import data from file";\n\t\treturn std::make_unique<OptionRunnerByFn>([&appContext, &assetViewDialog, fieldInfo]()\n\t\t\t{\n\t\t\t\twchar_t* openFilePath = nullptr;\n\t\t\t\tif (FAILED(ShowFileOpenDialog(appContext.getMainWindow().getWindow(),\n\t\t\t\t\t&openFilePath, L"*.*|Any file:",\n\t\t\t\t\tnullptr, nullptr, TEXT("Open file to import"),\n\t\t\t\t\tUABE_FILEDIALOG_EXPIMPASSET_GUID)))\n\t\t\t\t\treturn;\n\t\t\t\tstd::shared_ptr<IAssetsReader> pReader(Create_AssetsReaderFromFile(openFilePath, true, RWOpenFlags_Immediately));\n\t\t\t\tFreeCOMFilePathBuf(&openFilePath);\n\t\t\t\tif (pReader == nullptr)\n\t\t\t\t{\n\t\t\t\t\treportError(appContext, "Unable to open the input file.");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tQWORD importSize = 0;\n\t\t\t\tif (!pReader->Seek(AssetsSeek_End, 0) || !pReader->Tell(importSize) || !pReader->Seek(AssetsSeek_Begin, 0)\n\t\t\t\t\t|| importSize > std::numeric_limits<size_t>::max())\n\t\t\t\t{\n\t\t\t\t\treportError(appContext, "Unable to read the input file.");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tstd::unique_ptr<uint8_t[]> importData(new uint8_t[(size_t)importSize]);\n\t\t\t\tif (pReader->Read(importSize, importData.get()) != importSize)\n\t\t\t\t{\n\t\t\t\t\treportError(appContext, "Unable to read the input file.");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!assetViewDialog.setByteArrayValue(fieldInfo, std::move(importData), (size_t)importSize))\n\t\t\t\t{\n\t\t\t\t\t//Shouldn\'t happen.\n\t\t\t\t\treportError(appContext, "Unable to assign the new data.");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tassetViewDialog.updateValueFieldText(fieldInfo);\n\t\t\t});\n\t}\n};\n\nclass UtilityPluginDesc : public IPluginDesc\n{\n\tstd::vector<std::shared_ptr<IOptionProvider>> pProviders;\npublic:\n\tUtilityPluginDesc()\n\t{\n\t\tpProviders = { \n\t\t\tstd::make_shared<SelectedResourceExportProvider>(), std::make_shared<SelectedResourceImportProvider>(),\n\t\t\tstd::make_shared<SelectedByteArrayExportProvider>(), std::make_shared<SelectedByteArrayImportProvider>()\n\t\t};\n\t}\n\tstd::string getName()\n\t{\n\t\treturn "Utility";\n\t}\n\tstd::string getAuthor()\n\t{\n\t\treturn "";\n\t}\n\tstd::string getDescriptionText()\n\t{\n\t\treturn "Collection of small utility features.";\n\t}\n\t//The IPluginDesc object should keep a reference to the returned options, as the caller may keep only std::weak_ptrs.\n\t//Note: May be called early, e.g. before program UI initialization.\n\tstd::vector<std::shared_ptr<IOptionProvider>> getPluginOptions(class AppContext& appContext)\n\t{\n\t\treturn pProviders;\n\t}\n};\n\nIPluginDesc* GetUABEPluginDesc1(size_t sizeof_AppContext, size_t sizeof_BundleFileContextInfo)\n{\n\tif (sizeof_AppContext != sizeof(AppContext) || sizeof_BundleFileContextInfo != sizeof(BundleFileContextInfo))\n\t{\n\t\tassert(false);\n\t\treturn nullptr;\n\t}\n\treturn new UtilityPluginDesc();\n}\n'