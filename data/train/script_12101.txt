b'/*\n * Copyright (C) 2015 Naman Dwivedi\n *\n * Licensed under the GNU General Public License v3\n *\n * This is free software: you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n */\n\npackage com.naman14.timber.activities;\n\nimport android.annotation.TargetApi;\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.graphics.Color;\nimport android.os.AsyncTask;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.preference.PreferenceManager;\nimport android.provider.MediaStore;\nimport androidx.annotation.NonNull;\nimport androidx.annotation.StyleRes;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.recyclerview.widget.LinearLayoutManager;\nimport androidx.recyclerview.widget.RecyclerView;\nimport androidx.appcompat.widget.Toolbar;\nimport android.transition.Transition;\nimport android.util.Log;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.widget.ImageView;\nimport android.widget.TextView;\n\nimport com.afollestad.appthemeengine.Config;\nimport com.afollestad.appthemeengine.customizers.ATEActivityThemeCustomizer;\nimport com.afollestad.appthemeengine.customizers.ATEToolbarCustomizer;\nimport com.afollestad.materialdialogs.DialogAction;\nimport com.afollestad.materialdialogs.MaterialDialog;\nimport com.naman14.timber.R;\nimport com.naman14.timber.adapters.SongsListAdapter;\nimport com.naman14.timber.dataloaders.LastAddedLoader;\nimport com.naman14.timber.dataloaders.PlaylistLoader;\nimport com.naman14.timber.dataloaders.PlaylistSongLoader;\nimport com.naman14.timber.dataloaders.SongLoader;\nimport com.naman14.timber.dataloaders.TopTracksLoader;\nimport com.naman14.timber.listeners.SimplelTransitionListener;\nimport com.naman14.timber.models.Song;\nimport com.naman14.timber.utils.Constants;\nimport com.naman14.timber.utils.TimberUtils;\nimport com.naman14.timber.widgets.DividerItemDecoration;\nimport com.naman14.timber.widgets.DragSortRecycler;\nimport com.nostra13.universalimageloader.core.DisplayImageOptions;\nimport com.nostra13.universalimageloader.core.ImageLoader;\n\nimport java.util.HashMap;\nimport java.util.List;\n\npublic class PlaylistDetailActivity extends BaseActivity implements ATEActivityThemeCustomizer, ATEToolbarCustomizer {\n\n    private String action;\n    private long playlistID;\n    private HashMap<String, Runnable> playlistsMap = new HashMap<>();\n\n    private AppCompatActivity mContext = PlaylistDetailActivity.this;\n    private SongsListAdapter mAdapter;\n    private RecyclerView recyclerView;\n    private ImageView blurFrame;\n    private TextView playlistname;\n    private View foreground;\n    private boolean animate;\n\n    private Runnable playlistLastAdded = new Runnable() {\n        public void run() {\n            new loadLastAdded().execute("");\n        }\n    };\n    private Runnable playlistRecents = new Runnable() {\n        @Override\n        public void run() {\n            new loadRecentlyPlayed().execute("");\n\n        }\n    };\n    private Runnable playlistToptracks = new Runnable() {\n        @Override\n        public void run() {\n            new loadTopTracks().execute("");\n        }\n    };\n    private Runnable playlistUsercreated = new Runnable() {\n        @Override\n        public void run() {\n            new loadUserCreatedPlaylist().execute("");\n\n        }\n    };\n\n    @TargetApi(21)\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_playlist_detail);\n\n        action = getIntent().getAction();\n\n        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n\n        getSupportActionBar().setDisplayHomeAsUpEnabled(true);\n        getSupportActionBar().setTitle("");\n\n        playlistsMap.put(Constants.NAVIGATE_PLAYLIST_LASTADDED, playlistLastAdded);\n        playlistsMap.put(Constants.NAVIGATE_PLAYLIST_RECENT, playlistRecents);\n        playlistsMap.put(Constants.NAVIGATE_PLAYLIST_TOPTRACKS, playlistToptracks);\n        playlistsMap.put(Constants.NAVIGATE_PLAYLIST_USERCREATED, playlistUsercreated);\n\n        recyclerView = (RecyclerView) findViewById(R.id.recyclerview);\n        blurFrame = (ImageView) findViewById(R.id.blurFrame);\n        playlistname = (TextView) findViewById(R.id.name);\n        foreground = findViewById(R.id.foreground);\n\n        recyclerView.setLayoutManager(new LinearLayoutManager(this));\n\n        setAlbumart();\n\n        animate = getIntent().getBooleanExtra(Constants.ACTIVITY_TRANSITION, false);\n        if (animate && TimberUtils.isLollipop()) {\n            if(savedInstanceState != null && savedInstanceState.containsKey("ROTATION_RECREATION")){\n                setUpSongs();\n            }\n            else{\n                getWindow().getEnterTransition().addListener(new EnterTransitionListener());\n            }\n        } else {\n            setUpSongs();\n        }\n    }\n\n    @Override\n    protected void onSaveInstanceState(Bundle outState) {\n        super.onSaveInstanceState(outState);\n        outState.putString("ROTATION_RECREATION", "Rotacion");\n    }\n\n    private void setAlbumart() {\n        playlistname.setText(getIntent().getExtras().getString(Constants.PLAYLIST_NAME));\n        foreground.setBackgroundColor(getIntent().getExtras().getInt(Constants.PLAYLIST_FOREGROUND_COLOR));\n        loadBitmap(TimberUtils.getAlbumArtUri(getIntent().getExtras().getLong(Constants.ALBUM_ID)).toString());\n    }\n\n    private void setUpSongs() {\n        Runnable navigation = playlistsMap.get(action);\n        if (navigation != null) {\n            navigation.run();\n\n            DragSortRecycler dragSortRecycler = new DragSortRecycler();\n            dragSortRecycler.setViewHandleId(R.id.reorder);\n\n            dragSortRecycler.setOnItemMovedListener(new DragSortRecycler.OnItemMovedListener() {\n                @Override\n                public void onItemMoved(int from, int to) {\n                    Log.d("playlist", "onItemMoved " + from + " to " + to);\n                    Song song = mAdapter.getSongAt(from);\n                    mAdapter.removeSongAt(from);\n                    mAdapter.addSongTo(to, song);\n                    mAdapter.notifyDataSetChanged();\n                    MediaStore.Audio.Playlists.Members.moveItem(getContentResolver(),\n                            playlistID, from, to);\n                }\n            });\n\n            recyclerView.addItemDecoration(dragSortRecycler);\n            recyclerView.addOnItemTouchListener(dragSortRecycler);\n            recyclerView.addOnScrollListener(dragSortRecycler.getScrollListener());\n\n        } else {\n            Log.d("PlaylistDetail", "mo action specified");\n        }\n    }\n\n    private void loadBitmap(String uri) {\n        ImageLoader.getInstance().displayImage(uri, blurFrame,\n                new DisplayImageOptions.Builder().cacheInMemory(true)\n                        .showImageOnFail(R.drawable.ic_empty_music2)\n                        .resetViewBeforeLoading(true)\n                        .build());\n    }\n\n    private void setRecyclerViewAapter() {\n        recyclerView.setAdapter(mAdapter);\n        if (animate && TimberUtils.isLollipop()) {\n            Handler handler = new Handler();\n            handler.postDelayed(new Runnable() {\n                @Override\n                public void run() {\n                    recyclerView.addItemDecoration(new DividerItemDecoration(mContext, DividerItemDecoration.VERTICAL_LIST, R.drawable.item_divider_white));\n                }\n            }, 250);\n        } else\n            recyclerView.addItemDecoration(new DividerItemDecoration(mContext, DividerItemDecoration.VERTICAL_LIST, R.drawable.item_divider_white));\n    }\n\n    @StyleRes\n    @Override\n    public int getActivityTheme() {\n        return PreferenceManager.getDefaultSharedPreferences(this).getBoolean("dark_theme", false) ? R.style.AppTheme_FullScreen_Dark : R.style.AppTheme_FullScreen_Light;\n\n    }\n\n    private class loadLastAdded extends AsyncTask<String, Void, String> {\n\n        @Override\n        protected String doInBackground(String... params) {\n            List<Song> lastadded = LastAddedLoader.getLastAddedSongs(mContext);\n            mAdapter = new SongsListAdapter(mContext, lastadded, true, animate);\n            mAdapter.setPlaylistId(playlistID);\n            return "Executed";\n        }\n\n        @Override\n        protected void onPostExecute(String result) {\n            setRecyclerViewAapter();\n        }\n\n        @Override\n        protected void onPreExecute() {\n        }\n    }\n\n    private class loadRecentlyPlayed extends AsyncTask<String, Void, String> {\n\n        @Override\n        protected String doInBackground(String... params) {\n            TopTracksLoader loader = new TopTracksLoader(mContext, TopTracksLoader.QueryType.RecentSongs);\n            List<Song> recentsongs = SongLoader.getSongsForCursor(TopTracksLoader.getCursor());\n            mAdapter = new SongsListAdapter(mContext, recentsongs, true, animate);\n            mAdapter.setPlaylistId(playlistID);\n            return "Executed";\n        }\n\n        @Override\n        protected void onPostExecute(String result) {\n            setRecyclerViewAapter();\n\n        }\n\n        @Override\n        protected void onPreExecute() {\n        }\n    }\n\n    private class loadTopTracks extends AsyncTask<String, Void, String> {\n\n        @Override\n        protected String doInBackground(String... params) {\n            TopTracksLoader loader = new TopTracksLoader(mContext, TopTracksLoader.QueryType.TopTracks);\n            List<Song> toptracks = SongLoader.getSongsForCursor(TopTracksLoader.getCursor());\n            mAdapter = new SongsListAdapter(mContext, toptracks, true, animate);\n            mAdapter.setPlaylistId(playlistID);\n            return "Executed";\n        }\n\n        @Override\n        protected void onPostExecute(String result) {\n            setRecyclerViewAapter();\n        }\n\n        @Override\n        protected void onPreExecute() {\n        }\n    }\n\n    private class loadUserCreatedPlaylist extends AsyncTask<String, Void, String> {\n\n        @Override\n        protected String doInBackground(String... params) {\n            playlistID = getIntent().getExtras().getLong(Constants.PLAYLIST_ID);\n            List<Song> playlistsongs = PlaylistSongLoader.getSongsInPlaylist(mContext, playlistID);\n            mAdapter = new SongsListAdapter(mContext, playlistsongs, true, animate);\n            mAdapter.setPlaylistId(playlistID);\n            return "Executed";\n        }\n\n        @Override\n        protected void onPostExecute(String result) {\n            setRecyclerViewAapter();\n        }\n\n        @Override\n        protected void onPreExecute() {\n        }\n    }\n\n    private class EnterTransitionListener extends SimplelTransitionListener {\n\n        @TargetApi(21)\n        public void onTransitionEnd(Transition paramTransition) {\n            setUpSongs();\n        }\n\n        public void onTransitionStart(Transition paramTransition) {\n        }\n\n    }\n\n    @Override\n    public boolean onCreateOptionsMenu(final Menu menu) {\n\n        getMenuInflater().inflate(R.menu.menu_playlist_detail, menu);\n        return super.onCreateOptionsMenu(menu);\n    }\n\n    @Override\n    public boolean onPrepareOptionsMenu(Menu menu) {\n        if (action.equals(Constants.NAVIGATE_PLAYLIST_USERCREATED)) {\n            menu.findItem(R.id.action_delete_playlist).setVisible(true);\n            menu.findItem(R.id.action_clear_auto_playlist).setVisible(false);\n        } else {\n            menu.findItem(R.id.action_delete_playlist).setVisible(false);\n            menu.findItem(R.id.action_clear_auto_playlist).setTitle("Clear " + playlistname.getText().toString());\n        }\n\n        return super.onPrepareOptionsMenu(menu);\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(final MenuItem item) {\n        switch (item.getItemId()) {\n            case android.R.id.home:\n                super.onBackPressed();\n                return true;\n            case R.id.action_delete_playlist:\n                showDeletePlaylistDialog();\n                break;\n            case R.id.action_clear_auto_playlist:\n                clearAutoPlaylists();\n                break;\n            default:\n                break;\n        }\n        return super.onOptionsItemSelected(item);\n    }\n\n    private void showDeletePlaylistDialog() {\n        new MaterialDialog.Builder(this)\n                .title("Delete playlist?")\n                .content("Are you sure you want to delete playlist " + playlistname.getText().toString() + " ?")\n                .positiveText("Delete")\n                .negativeText("Cancel")\n                .onPositive(new MaterialDialog.SingleButtonCallback() {\n                    @Override\n                    public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {\n                        PlaylistLoader.deletePlaylists(PlaylistDetailActivity.this, playlistID);\n                        Intent returnIntent = new Intent();\n                        setResult(Activity.RESULT_OK, returnIntent);\n                        finish();\n                    }\n                })\n                .onNegative(new MaterialDialog.SingleButtonCallback() {\n                    @Override\n                    public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {\n                        dialog.dismiss();\n                    }\n                })\n                .show();\n    }\n\n    private void clearAutoPlaylists() {\n        switch (action) {\n            case Constants.NAVIGATE_PLAYLIST_LASTADDED:\n                TimberUtils.clearLastAdded(this);\n                break;\n            case Constants.NAVIGATE_PLAYLIST_RECENT:\n                TimberUtils.clearRecent(this);\n                break;\n            case Constants.NAVIGATE_PLAYLIST_TOPTRACKS:\n                TimberUtils.clearTopTracks(this);\n                break;\n        }\n        Intent returnIntent = new Intent();\n        setResult(Activity.RESULT_OK, returnIntent);\n        finish();\n    }\n\n    @Override\n    public void onMetaChanged() {\n        super.onMetaChanged();\n        if (mAdapter != null)\n            mAdapter.notifyDataSetChanged();\n    }\n\n    @Override\n    public int getToolbarColor() {\n        return Color.TRANSPARENT;\n    }\n\n    @Override\n    public int getLightToolbarMode() {\n        return Config.LIGHT_TOOLBAR_AUTO;\n    }\n}\n'