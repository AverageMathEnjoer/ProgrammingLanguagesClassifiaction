b'/*\n * Copyright (C) 2015 Naman Dwivedi\n *\n * Licensed under the GNU General Public License v3\n *\n * This is free software: you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n */\n\npackage com.naman14.timber.adapters;\n\nimport android.app.Activity;\nimport android.graphics.Bitmap;\nimport androidx.palette.graphics.Palette;\nimport androidx.recyclerview.widget.RecyclerView;\nimport android.util.Pair;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.ImageView;\nimport android.widget.TextView;\n\nimport com.afollestad.appthemeengine.Config;\nimport com.naman14.timber.R;\nimport com.naman14.timber.models.Album;\nimport com.naman14.timber.utils.Helpers;\nimport com.naman14.timber.utils.NavigationUtils;\nimport com.naman14.timber.utils.PreferencesUtility;\nimport com.naman14.timber.utils.TimberUtils;\nimport com.nostra13.universalimageloader.core.DisplayImageOptions;\nimport com.nostra13.universalimageloader.core.ImageLoader;\nimport com.nostra13.universalimageloader.core.assist.FailReason;\nimport com.nostra13.universalimageloader.core.display.FadeInBitmapDisplayer;\nimport com.nostra13.universalimageloader.core.listener.SimpleImageLoadingListener;\n\nimport java.util.List;\n\npublic class AlbumAdapter extends RecyclerView.Adapter<AlbumAdapter.ItemHolder> {\n\n    private List<Album> arraylist;\n    private Activity mContext;\n    private boolean isGrid;\n\n    public AlbumAdapter(Activity context, List<Album> arraylist) {\n        this.arraylist = arraylist;\n        this.mContext = context;\n        this.isGrid = PreferencesUtility.getInstance(mContext).isAlbumsInGrid();\n\n    }\n\n    @Override\n    public ItemHolder onCreateViewHolder(ViewGroup viewGroup, int i) {\n        if (isGrid) {\n            View v = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.item_album_grid, null);\n            ItemHolder ml = new ItemHolder(v);\n            return ml;\n        } else {\n            View v = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.item_album_list, null);\n            ItemHolder ml = new ItemHolder(v);\n            return ml;\n        }\n    }\n\n    @Override\n    public void onBindViewHolder(final ItemHolder itemHolder, int i) {\n        Album localItem = arraylist.get(i);\n\n        itemHolder.title.setText(localItem.title);\n        itemHolder.artist.setText(localItem.artistName);\n\n        ImageLoader.getInstance().displayImage(TimberUtils.getAlbumArtUri(localItem.id).toString(), itemHolder.albumArt,\n                new DisplayImageOptions.Builder().cacheInMemory(true)\n                        .showImageOnLoading(R.drawable.ic_empty_music2)\n                        .resetViewBeforeLoading(true)\n                        .displayer(new FadeInBitmapDisplayer(400))\n                        .build(), new SimpleImageLoadingListener() {\n                    @Override\n                    public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {\n                        if (isGrid) {\n                            new Palette.Builder(loadedImage).generate(new Palette.PaletteAsyncListener() {\n                                @Override\n                                public void onGenerated(Palette palette) {\n                                    Palette.Swatch swatch = palette.getVibrantSwatch();\n                                    if (swatch != null) {\n                                        int color = swatch.getRgb();\n                                        itemHolder.footer.setBackgroundColor(color);\n                                        int textColor = TimberUtils.getBlackWhiteColor(swatch.getTitleTextColor());\n                                        itemHolder.title.setTextColor(textColor);\n                                        itemHolder.artist.setTextColor(textColor);\n                                    } else {\n                                        Palette.Swatch mutedSwatch = palette.getMutedSwatch();\n                                        if (mutedSwatch != null) {\n                                            int color = mutedSwatch.getRgb();\n                                            itemHolder.footer.setBackgroundColor(color);\n                                            int textColor = TimberUtils.getBlackWhiteColor(mutedSwatch.getTitleTextColor());\n                                            itemHolder.title.setTextColor(textColor);\n                                            itemHolder.artist.setTextColor(textColor);\n                                        }\n                                    }\n\n\n                                }\n                            });\n                        }\n\n                    }\n\n                    @Override\n                    public void onLoadingFailed(String imageUri, View view, FailReason failReason) {\n                        if (isGrid) {\n                            itemHolder.footer.setBackgroundColor(0);\n                            if (mContext != null) {\n                                int textColorPrimary = Config.textColorPrimary(mContext, Helpers.getATEKey(mContext));\n                                itemHolder.title.setTextColor(textColorPrimary);\n                                itemHolder.artist.setTextColor(textColorPrimary);\n                            }\n                        }\n                    }\n                });\n\n        if (TimberUtils.isLollipop())\n            itemHolder.albumArt.setTransitionName("transition_album_art" + i);\n\n    }\n\n    @Override\n    public int getItemCount() {\n        return (null != arraylist ? arraylist.size() : 0);\n    }\n\n    public void updateDataSet(List<Album> arraylist) {\n        this.arraylist = arraylist;\n    }\n\n    public class ItemHolder extends RecyclerView.ViewHolder implements View.OnClickListener {\n        protected TextView title, artist;\n        protected ImageView albumArt;\n        protected View footer;\n\n        public ItemHolder(View view) {\n            super(view);\n            this.title = (TextView) view.findViewById(R.id.album_title);\n            this.artist = (TextView) view.findViewById(R.id.album_artist);\n            this.albumArt = (ImageView) view.findViewById(R.id.album_art);\n            this.footer = view.findViewById(R.id.footer);\n            view.setOnClickListener(this);\n        }\n\n        @Override\n        public void onClick(View v) {\n            NavigationUtils.navigateToAlbum(mContext, arraylist.get(getAdapterPosition()).id,\n                    new Pair<View, String>(albumArt, "transition_album_art" + getAdapterPosition()));\n        }\n\n    }\n\n\n}\n\n\n\n'