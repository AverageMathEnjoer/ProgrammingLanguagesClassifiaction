b'{-# LANGUAGE FlexibleInstances #-}\n{-# LANGUAGE MultiParamTypeClasses #-}\n\nmodule Cachix.Types.ContentTypes\n  ( XNixNar,\n    XNixNarInfo,\n    XNixCacheInfo,\n  )\nwhere\n\nimport qualified Cachix.Types.ByteStringStreaming as ByteStringStreaming\nimport qualified Cachix.Types.NarInfo as NarInfo\nimport qualified Cachix.Types.NixCacheInfo as NixCacheInfo\nimport qualified Data.ByteString.Lazy as BSL\nimport Data.Coerce (coerce)\nimport qualified Network.HTTP.Media as M\nimport Protolude\nimport Servant.API\n\ndata XNixNar deriving (Typeable)\n\ndata XNixNarInfo deriving (Typeable)\n\ndata XNixCacheInfo deriving (Typeable)\n\ninstance Accept XNixCacheInfo where\n  contentType _ = "application" M.// "octet-stream"\n\ninstance Accept XNixNarInfo where\n  contentType _ = "text" M.// "x-nix-narinfo"\n\ninstance Accept XNixNar where\n  contentType _ = "application" M.// "octet-stream"\n\ninstance MimeUnrender XNixCacheInfo NixCacheInfo.NixCacheInfo where\n  mimeUnrender _ _ = Left "TODO"\n\ninstance MimeUnrender XNixNarInfo NarInfo.CachixNarInfo where\n  mimeUnrender _ _ = Left "TODO"\n\ninstance MimeRender XNixNar ByteStringStreaming.ByteStringStreaming where\n  mimeRender _ = BSL.fromStrict . coerce\n\ninstance MimeUnrender XNixNar ByteStringStreaming.ByteStringStreaming where\n  mimeUnrender _ = Right . coerce . BSL.toStrict\n\ninstance MimeUnrender XNixNar ByteStringStreaming.LazyByteStringStreaming where\n  mimeUnrender _ = Right . coerce\n\ninstance MimeRender XNixNar ByteStringStreaming.LazyByteStringStreaming where\n  mimeRender _ = coerce\n\ninstance MimeRender PlainText ByteStringStreaming.ByteStringStreaming where\n  mimeRender _ = BSL.fromStrict . coerce\n\ninstance MimeUnrender PlainText ByteStringStreaming.ByteStringStreaming where\n  mimeUnrender _ = Right . coerce . BSL.toStrict\n'