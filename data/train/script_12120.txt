b'const ll is_query = -(1LL<<62);\nstruct Line {\n    ll m, b;\n    mutable function<const Line*()> succ;\n    bool operator<(const Line& rhs) const {\n        if (rhs.b != is_query) return m < rhs.m;\n        const Line* s = succ();\n        if (!s) return 0;\n        ll x = rhs.m;\n        return b - s->b < (s->m - m) * x;\n    }\n};\nstruct HullDynamic : public multiset<Line> { // will maintain upper hull for maximum\n    bool bad(iterator y) {\n        auto z = next(y);\n        if (y == begin()) {\n            if (z == end()) return 0;\n            return y->m == z->m && y->b <= z->b;\n        }\n        auto x = prev(y);\n        if (z == end()) return y->m == x->m && y->b <= x->b;\n        return (x->b - y->b)*(z->m - y->m) >= (y->b - z->b)*(y->m - x->m);\n    }\n    void insert_line(ll m, ll b) {\n        auto y = insert({ m, b });\n        y->succ = [=] { return next(y) == end() ? 0 : &*next(y); };\n        if (bad(y)) { erase(y); return; }\n        while (next(y) != end() && bad(next(y))) erase(next(y));\n        while (y != begin() && bad(prev(y))) erase(prev(y));\n    }\n    ll eval(ll x) {\n        auto l = *lower_bound((Line) { x, is_query });\n        return l.m * x + l.b;\n    }\n};\n'