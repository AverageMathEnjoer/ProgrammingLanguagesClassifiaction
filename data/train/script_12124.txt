b'\xef\xbb\xbfusing System.Collections.Concurrent;\nusing System.Net.Sockets;\nusing System.Net;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing System.Text.Json;\n\nnamespace XboxDownload\n{\n    internal class HttpListen\n    {\n        private readonly Form1 parentForm;\n        private readonly ConcurrentDictionary<String, String> dicAppLocalUploadFile = new();\n        Socket? socket = null;\n\n        public HttpListen(Form1 parentForm)\n        {\n            this.parentForm = parentForm;\n        }\n\n        public void Listen()\n        {\n            int port = 80;\n            IPEndPoint ipe = new(Properties.Settings.Default.ListenIP == 0 ? IPAddress.Parse(Properties.Settings.Default.LocalIP) : IPAddress.Any, port);\n            socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);\n            try\n            {\n                socket.Bind(ipe);\n                socket.Listen(100);\n            }\n            catch (SocketException ex)\n            {\n                parentForm.Invoke(new Action(() =>\n                {\n                    parentForm.pictureBox1.Image = Properties.Resource.Xbox3;\n                    MessageBox.Show($"\xe5\x90\xaf\xe7\x94\xa8HTTP\xe6\x9c\x8d\xe5\x8a\xa1\xe5\xa4\xb1\xe8\xb4\xa5!\\n\xe9\x94\x99\xe8\xaf\xaf\xe4\xbf\xa1\xe6\x81\xaf: {ex.Message}\\n\\n\xe8\xa7\xa3\xe5\x86\xb3\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x9a1\xe3\x80\x81\xe5\x81\x9c\xe7\x94\xa8\xe5\x8d\xa0\xe7\x94\xa8 {port} \xe7\xab\xaf\xe5\x8f\xa3\xe7\x9a\x84\xe6\x9c\x8d\xe5\x8a\xa1\xe3\x80\x822\xe3\x80\x81\xe7\x9b\x91\xe5\x90\xacIP\xe9\x80\x89\xe6\x8b\xa9(Any)", "\xe5\x90\xaf\xe7\x94\xa8HTTP\xe6\x9c\x8d\xe5\x8a\xa1\xe5\xa4\xb1\xe8\xb4\xa5", MessageBoxButtons.OK, MessageBoxIcon.Error);\n                }));\n                return;\n            }\n            while (Form1.bServiceFlag)\n            {\n                try\n                {\n                    Socket mySocket = socket.Accept();\n                    ThreadPool.QueueUserWorkItem(delegate { TcpThread(mySocket); });\n                }\n                catch { }\n            }\n        }\n\n        private void TcpThread(Socket mySocket)\n        {\n            if (mySocket.Connected)\n            {\n                mySocket.SendTimeout = 30000;\n                mySocket.ReceiveTimeout = 30000;\n                while (Form1.bServiceFlag && mySocket.Connected && mySocket.Poll(3000000, SelectMode.SelectRead))\n                {\n                    Byte[] _receive = new Byte[4096];\n                    int _num = mySocket.Receive(_receive, 0, _receive.Length, SocketFlags.None, out _);\n                    string _buffer = Encoding.ASCII.GetString(_receive, 0, _num);\n                    Match result = Regex.Match(_buffer, @"(?<method>GET|OPTIONS|HEAD) (?<path>[^\\s]+)");\n                    if (!result.Success)\n                    {\n                        mySocket.Close();\n                        continue;\n                    }\n                    string _method = result.Groups["method"].Value;\n                    string _filePath = Regex.Replace(result.Groups["path"].Value.Trim(), @"^https?://[^/]+", "");\n                    result = Regex.Match(_buffer, @"Host:(.+)");\n                    if (!result.Success)\n                    {\n                        mySocket.Close();\n                        continue;\n                    }\n\n                    string _hosts = result.Groups[1].Value.Trim().ToLower();\n                    string _tmpPath = Regex.Replace(_filePath, @"\\?.+$", ""), _localPath = string.Empty;\n                    if (Properties.Settings.Default.LocalUpload)\n                    {\n                        if (File.Exists(Properties.Settings.Default.LocalPath + _tmpPath))\n                            _localPath = Properties.Settings.Default.LocalPath + _tmpPath.Replace("/", "\\\\");\n                        else if (File.Exists(Properties.Settings.Default.LocalPath + "\\\\" + Path.GetFileName(_tmpPath)))\n                            _localPath = Properties.Settings.Default.LocalPath + "\\\\" + Path.GetFileName(_tmpPath);\n                        else if (dicAppLocalUploadFile.ContainsKey(_filePath) && File.Exists(Properties.Settings.Default.LocalPath + "\\\\" + dicAppLocalUploadFile[_filePath]))\n                        {\n                            _tmpPath = dicAppLocalUploadFile[_filePath];\n                            _localPath = Properties.Settings.Default.LocalPath + "\\\\" + _tmpPath;\n                        }\n                    }\n                    string _extension = Path.GetExtension(_tmpPath).ToLowerInvariant();\n                    if (Properties.Settings.Default.LocalUpload && !string.IsNullOrEmpty(_localPath))\n                    {\n                        if (Properties.Settings.Default.RecordLog) parentForm.SaveLog("\xe6\x9c\xac\xe5\x9c\xb0\xe4\xb8\x8a\xe4\xbc\xa0", _localPath, mySocket.RemoteEndPoint != null ? ((IPEndPoint)mySocket.RemoteEndPoint).Address.ToString() : string.Empty, 0x008000);\n                        using FileStream fs = new(_localPath, FileMode.Open, FileAccess.Read, FileShare.Read);\n                        using BinaryReader br = new(fs);\n                        string _contentRange = string.Empty, _status = "200 OK";\n                        long _fileLength = br.BaseStream.Length, _startPosition = 0;\n                        long _endPosition = _fileLength;\n                        result = Regex.Match(_buffer, @"Range: bytes=(?<StartPosition>\\d+)(-(?<EndPosition>\\d+))?");\n                        if (result.Success)\n                        {\n                            _startPosition = long.Parse(result.Groups["StartPosition"].Value);\n                            if (_startPosition > br.BaseStream.Length) _startPosition = 0;\n                            if (!string.IsNullOrEmpty(result.Groups["EndPosition"].Value))\n                                _endPosition = long.Parse(result.Groups["EndPosition"].Value) + 1;\n                            _contentRange = "bytes " + _startPosition + "-" + (_endPosition - 1) + "/" + _fileLength;\n                            _status = "206 Partial Content";\n                        }\n\n                        StringBuilder sb = new();\n                        sb.Append("HTTP/1.1 " + _status + "\\r\\n");\n                        sb.Append("Content-Type: " + ClassWeb.GetMimeMapping(_filePath) + "\\r\\n");\n                        sb.Append("Content-Length: " + (_endPosition - _startPosition) + "\\r\\n");\n                        if (_contentRange != null) sb.Append("Content-Range: " + _contentRange + "\\r\\n");\n                        sb.Append("Accept-Ranges: bytes\\r\\n\\r\\n");\n\n                        Byte[] _headers = Encoding.ASCII.GetBytes(sb.ToString());\n                        mySocket.Send(_headers, 0, _headers.Length, SocketFlags.None, out _);\n\n                        br.BaseStream.Position = _startPosition;\n                        int _size = 4096;\n                        while (Form1.bServiceFlag && mySocket.Connected)\n                        {\n                            long _remaining = _endPosition - br.BaseStream.Position;\n                            if (Properties.Settings.Default.Truncation && _extension == ".xcp" && _remaining <= 1048576) //Xbox360\xe4\xb8\xbb\xe6\x9c\xba\xe6\x9c\xac\xe5\x9c\xb0\xe4\xb8\x8a\xe4\xbc\xa0\xe9\x98\xb2\xe7\x88\x86\xe5\xa4\xb4\n                            {\n                                Thread.Sleep(1000);\n                                continue;\n                            }\n                            byte[] _response = new byte[_remaining <= _size ? _remaining : _size];\n                            br.Read(_response, 0, _response.Length);\n                            mySocket.Send(_response, 0, _response.Length, SocketFlags.None, out _);\n                            if (_remaining <= _size) break;\n                        }\n                    }\n                    else\n                    {\n                        bool _redirect = false;\n                        string _newHosts = string.Empty;\n                        switch (_hosts)\n                        {\n                            case "assets1.xboxlive.com":\n                            case "assets2.xboxlive.com":\n                            case "dlassets.xboxlive.com":\n                            case "dlassets2.xboxlive.com":\n                            case "d1.xboxlive.com":\n                            case "d2.xboxlive.com":\n                                if (Properties.Settings.Default.Redirect)\n                                {\n                                    _redirect = true;\n                                    _newHosts = Regex.Replace(_hosts, @"\\.com$", ".cn");\n                                }\n                                if (dicFilePath.TryAdd(_filePath, string.Empty))\n                                    ThreadPool.QueueUserWorkItem(delegate { UpdateGameUrl(_hosts, _filePath, _extension); });\n                                break;\n                            case "xvcf1.xboxlive.com":\n                                if (Properties.Settings.Default.Redirect)\n                                {\n                                    _redirect = true;\n                                    _newHosts = "assets1.xboxlive.cn";\n                                }\n                                if (dicFilePath.TryAdd(_filePath, string.Empty))\n                                    ThreadPool.QueueUserWorkItem(delegate { UpdateGameUrl(_hosts, _filePath, _extension); });\n                                break;\n                            case "xvcf2.xboxlive.com":\n                                if (Properties.Settings.Default.Redirect)\n                                {\n                                    _redirect = true;\n                                    _newHosts = "assets2.xboxlive.cn";\n                                }\n                                if (dicFilePath.TryAdd(_filePath, string.Empty))\n                                    ThreadPool.QueueUserWorkItem(delegate { UpdateGameUrl(_hosts, _filePath, _extension); });\n                                break;\n                            case "us.cdn.blizzard.com":\n                            case "eu.cdn.blizzard.com":\n                            case "kr.cdn.blizzard.com":\n                            case "level3.blizzard.com":\n                                if (Properties.Settings.Default.BattleStore && Properties.Settings.Default.BattleCDN)\n                                {\n                                    _redirect = true;\n                                    _newHosts = "blzddist1-a.akamaihd.net";\n                                }\n                                break;\n                            case "epicgames-download1.akamaized.net":\n                            case "download.epicgames.com":\n                            case "download2.epicgames.com":\n                            case "download3.epicgames.com":\n                            case "download4.epicgames.com":\n                            case "fastly-download.epicgames.com":\n                                if (Properties.Settings.Default.EpicStore && Properties.Settings.Default.EpicCDN)\n                                {\n                                    _redirect = true;\n                                    _newHosts = "epicgames-download1-1251447533.file.myqcloud.com";\n                                }\n                                break;\n                        }\n                        if (_redirect)\n                        {\n                            string _url = "http://" + _newHosts + _filePath;\n                            StringBuilder sb = new();\n                            sb.Append("HTTP/1.1 301 Moved Permanently\\r\\n");\n                            sb.Append("Content-Type: text/html\\r\\n");\n                            sb.Append("Location: " + _url + "\\r\\n");\n                            sb.Append("Content-Length: 0\\r\\n\\r\\n");\n                            Byte[] _headers = Encoding.ASCII.GetBytes(sb.ToString());\n                            mySocket.Send(_headers, 0, _headers.Length, SocketFlags.None, out _);\n                            if (Properties.Settings.Default.RecordLog) parentForm.SaveLog("HTTP 301", _url, mySocket.RemoteEndPoint != null ? ((IPEndPoint)mySocket.RemoteEndPoint).Address.ToString() : string.Empty, 0x008000);\n                        }\n                        else\n                        {\n                            bool bFileNotFound = true;\n                            string _url = "http://" + _hosts + _filePath;\n                            if (_hosts == "dl.delivery.mp.microsoft.com" || _extension == ".phf" || _extension == ".json") //\xe4\xbb\xa3\xe7\x90\x86 Xbox|PS \xe4\xb8\x8b\xe8\xbd\xbd\xe7\xb4\xa2\xe5\xbc\x95\n                            {\n                                string? ip = ClassDNS.DoH(_hosts);\n                                if (!string.IsNullOrEmpty(ip))\n                                {\n                                    var headers = new Dictionary<string, string>() { { "Host", _hosts } };\n                                    using HttpResponseMessage? response = ClassWeb.HttpResponseMessage(_url.Replace(_hosts, ip), "GET", null, null, headers);\n                                    if (response != null && response.IsSuccessStatusCode)\n                                    {\n                                        bFileNotFound = false;\n                                        byte[] buffer = response.Content.ReadAsByteArrayAsync().Result;\n                                        string str = "HTTP/1.1 200 OK\\r\\n" + Regex.Replace(response.Content.Headers.ToString(), @"^Content-Length: .+\\r\\n", "") + "Content-Length: " + buffer.Length + "\\r\\n" + response.Headers;\n                                        Byte[] _headers = Encoding.ASCII.GetBytes(str);\n                                        mySocket.Send(_headers, 0, _headers.Length, SocketFlags.None, out _);\n                                        mySocket.Send(buffer, 0, buffer.Length, SocketFlags.None, out _);\n                                        if (Properties.Settings.Default.RecordLog)\n                                        {\n                                            parentForm.SaveLog("HTTP " + ((int)response.StatusCode), _url, mySocket.RemoteEndPoint != null ? ((IPEndPoint)mySocket.RemoteEndPoint).Address.ToString() : string.Empty);\n                                            if (_hosts.EndsWith(".prod.dl.playstation.net") && _extension == ".json") //\xe5\x88\x86\xe6\x9e\x90PS4\xe6\xb8\xb8\xe6\x88\x8f\xe4\xb8\x8b\xe8\xbd\xbd\xe5\x9c\xb0\xe5\x9d\x80\n                                            {\n                                                string html = response.Content.ReadAsStringAsync().Result;\n                                                if (Regex.IsMatch(html, @"^{.+}$"))\n                                                {\n                                                    try\n                                                    {\n                                                        var json = JsonSerializer.Deserialize<PsGame.Game>(html, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });\n                                                        if (json != null && json.Pieces != null && json.Pieces.Count >= 1)\n                                                        {\n                                                            StringBuilder sbFile = new();\n                                                            sbFile.AppendLine("\xe4\xb8\x8b\xe8\xbd\xbd\xe6\x96\x87\xe4\xbb\xb6\xe6\x80\xbb\xe6\x95\xb0\xef\xbc\x9a" + json.NumberOfSplitFiles + "\xef\xbc\x8c\xe5\xae\xb9\xe9\x87\x8f\xef\xbc\x9a" + ClassMbr.ConvertBytes(Convert.ToUInt64(json.OriginalFileSize)) + "\xef\xbc\x8c\xe4\xb8\x8b\xe8\xbd\xbd\xe5\x9c\xb0\xe5\x9d\x80\xef\xbc\x9a");\n                                                            foreach (var pieces in json.Pieces)\n                                                                sbFile.AppendLine(pieces.Url);\n                                                            parentForm.SaveLog("\xe4\xb8\x8b\xe8\xbd\xbd\xe5\x9c\xb0\xe5\x9d\x80", sbFile.ToString(), mySocket.RemoteEndPoint != null ? ((IPEndPoint)mySocket.RemoteEndPoint).Address.ToString() : string.Empty, 0x008000);\n                                                        }\n                                                    }\n                                                    catch { }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            else if (Properties.Settings.Default.LocalUpload && _hosts == "tlu.dl.delivery.mp.microsoft.com" && !dicAppLocalUploadFile.ContainsKey(_filePath)) //\xe8\xaf\x86\xe5\x88\xab\xe6\x9c\xac\xe5\x9c\xb0\xe4\xb8\x8a\xe4\xbc\xa0\xe5\xba\x94\xe7\x94\xa8\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\n                            {\n                                string? ip = ClassDNS.DoH(_hosts);\n                                if (!string.IsNullOrEmpty(ip))\n                                {\n                                    var headers = new Dictionary<string, string>() { { "Host", _hosts } };\n                                    using HttpResponseMessage? response = ClassWeb.HttpResponseMessage(_url.Replace(_hosts, ip), "HEAD", null, null, headers);\n                                    if (response != null && response.IsSuccessStatusCode)\n                                    {\n                                        if (response.Content.Headers.TryGetValues("Content-Disposition", out IEnumerable<string>? values))\n                                        {\n                                            string filename = Regex.Replace(values.FirstOrDefault() ?? string.Empty, @".+filename=", "");\n                                            dicAppLocalUploadFile.AddOrUpdate(_filePath, filename, (oldkey, oldvalue) => filename);\n                                        }\n                                    }\n                                }\n                            }\n                            else if (_hosts == "www.msftconnecttest.com" && _tmpPath.ToLower() == "/connecttest.txt") // \xe7\xbd\x91\xe7\xbb\x9c\xe8\xbf\x9e\xe6\x8e\xa5 (NCSI)\xef\xbc\x8c\xe4\xbf\xae\xe5\xa4\x8d Xbox\xe3\x80\x81Windows \xe7\xb3\xbb\xe7\xbb\x9f\xe7\xbd\x91\xe7\xbb\x9c\xe6\xad\xa3\xe5\xb8\xb8\xe5\x8d\xb4\xe6\x98\xbe\xe7\xa4\xba\xe7\xa6\xbb\xe7\xba\xbf\n                            {\n                                bFileNotFound = false;\n                                Byte[] _response = Encoding.ASCII.GetBytes("Microsoft Connect Test");\n                                StringBuilder sb = new();\n                                sb.Append("HTTP/1.1 200 OK\\r\\n");\n                                sb.Append("Content-Type: text/plain\\r\\n");\n                                sb.Append("Content-Length: " + _response.Length + "\\r\\n\\r\\n");\n                                Byte[] _headers = Encoding.ASCII.GetBytes(sb.ToString());\n                                mySocket.Send(_headers, 0, _headers.Length, SocketFlags.None, out _);\n                                mySocket.Send(_response, 0, _response.Length, SocketFlags.None, out _);\n                                if (Properties.Settings.Default.RecordLog) parentForm.SaveLog("HTTP 200", _url, mySocket.RemoteEndPoint != null ? ((IPEndPoint)mySocket.RemoteEndPoint).Address.ToString() : string.Empty);\n                            }\n                            else if (_hosts == "ctest.cdn.nintendo.net" && _tmpPath.ToLower() == "/")\n                            {\n                                bFileNotFound = false;\n                                if (Properties.Settings.Default.NSBrowser)\n                                {\n                                    StringBuilder sb = new();\n                                    sb.Append("HTTP/1.1 302 Moved Temporarily\\r\\n");\n                                    sb.Append("Content-Type: text/html\\r\\n");\n                                    sb.Append("Location: " + Properties.Settings.Default.NSHomepage + "\\r\\n");\n                                    sb.Append("Content-Length: 0\\r\\n\\r\\n");\n                                    Byte[] _headers = Encoding.ASCII.GetBytes(sb.ToString());\n                                    mySocket.Send(_headers, 0, _headers.Length, SocketFlags.None, out _);\n                                }\n                                else\n                                {\n                                    Byte[] _response = Encoding.ASCII.GetBytes("ok");\n                                    StringBuilder sb = new();\n                                    sb.Append("HTTP/1.1 200 OK\\r\\n");\n                                    sb.Append("Content-Type: text/plain\\r\\n");\n                                    sb.Append("X-Organization: Nintendo\\r\\n");\n                                    sb.Append("Content-Length: " + _response.Length + "\\r\\n\\r\\n");\n                                    Byte[] _headers = Encoding.ASCII.GetBytes(sb.ToString());\n                                    mySocket.Send(_headers, 0, _headers.Length, SocketFlags.None, out _);\n                                    mySocket.Send(_response, 0, _response.Length, SocketFlags.None, out _);\n                                    if (Properties.Settings.Default.RecordLog) parentForm.SaveLog("HTTP 200", _url, mySocket.RemoteEndPoint != null ? ((IPEndPoint)mySocket.RemoteEndPoint).Address.ToString() : string.Empty);\n                                }\n                            }\n                            if (bFileNotFound)\n                            {\n                                Byte[] _response = Encoding.ASCII.GetBytes("File not found.");\n                                StringBuilder sb = new();\n                                sb.Append("HTTP/1.1 404 Not Found\\r\\n");\n                                sb.Append("Content-Type: text/html\\r\\n");\n                                sb.Append("Content-Length: " + _response.Length + "\\r\\n\\r\\n");\n                                Byte[] _headers = Encoding.ASCII.GetBytes(sb.ToString());\n                                mySocket.Send(_headers, 0, _headers.Length, SocketFlags.None, out _);\n                                mySocket.Send(_response, 0, _response.Length, SocketFlags.None, out _);\n                                if (Properties.Settings.Default.RecordLog)\n                                {\n\n                                    int argb = 0;\n                                    switch (_hosts)\n                                    {\n                                        case "assets1.xboxlive.com":\n                                        case "assets2.xboxlive.com":\n                                        case "dlassets.xboxlive.com":\n                                        case "dlassets2.xboxlive.com":\n                                        case "d1.xboxlive.com":\n                                        case "d2.xboxlive.com":\n                                        case "xvcf1.xboxlive.com":\n                                        case "xvcf2.xboxlive.com":\n                                        case "assets1.xboxlive.cn":\n                                        case "assets2.xboxlive.cn":\n                                        case "dlassets.xboxlive.cn":\n                                        case "dlassets2.xboxlive.cn":\n                                        case "d1.xboxlive.cn":\n                                        case "d2.xboxlive.cn":\n                                            argb = 0x008000;\n                                            if (dicFilePath.TryAdd(_filePath, string.Empty))\n                                                ThreadPool.QueueUserWorkItem(delegate { UpdateGameUrl(_hosts, _filePath, _extension); });\n                                            break;\n                                        case "tlu.dl.delivery.mp.microsoft.com":\n                                        case "download.xbox.com":\n                                        case "download.xbox.com.edgesuite.net":\n                                        case "xbox-ecn102.vo.msecnd.net":\n                                        case "gst.prod.dl.playstation.net":\n                                        case "gs2.ww.prod.dl.playstation.net":\n                                        case "zeus.dl.playstation.net":\n                                        case "ares.dl.playstation.net":\n                                            argb = 0x008000;\n                                            break;\n                                    }\n                                    parentForm.SaveLog("HTTP 404", _url, mySocket.RemoteEndPoint != null ? ((IPEndPoint)mySocket.RemoteEndPoint).Address.ToString() : string.Empty, argb);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            if (mySocket.Connected)\n            {\n                try\n                {\n                    mySocket.Shutdown(SocketShutdown.Both);\n                }\n                finally\n                {\n                    mySocket.Close();\n                }\n            }\n            mySocket.Dispose();\n        }\n\n        public void Close()\n        {\n            if (socket != null)\n            {\n                socket.Close();\n                socket.Dispose();\n                socket = null;\n            }\n        }\n\n        readonly ConcurrentDictionary<String, String> dicFilePath = new();\n        private static void UpdateGameUrl(string _hosts, string _filePath, string _extension)\n        {\n            if (Regex.IsMatch(_extension, @"\\.(phf|xsp)$")) return;\n            Match result = Regex.Match(_filePath, @"/(?<ContentId>\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12})/(?<Version>\\d+\\.\\d+\\.\\d+\\.\\d+)\\.\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}");\n            if (result.Success)\n            {\n                string key = result.Groups["ContentId"].Value.ToLower();\n                if (Regex.IsMatch(_filePath, @"_xs\\.xvc$", RegexOptions.IgnoreCase))\n                    key += "_xs";\n                else if (!Regex.IsMatch(_filePath, @"\\.msixvc$", RegexOptions.IgnoreCase))\n                    key += "_x";\n                Version version = new(result.Groups["Version"].Value);\n                if (XboxGameDownload.dicXboxGame.TryGetValue(key, out XboxGameDownload.Products? XboxGame))\n                {\n                    if (XboxGame.Version >= version) return;\n                }\n                _hosts = _hosts.Replace(".xboxlive.cn", ".xboxlive.com");\n                if (!DnsListen.dicHosts2.TryGetValue(_hosts, out IPAddress? ip))\n                {\n                    if (IPAddress.TryParse(ClassDNS.DoH(_hosts), out ip))\n                    {\n                        DnsListen.dicHosts2.AddOrUpdate(_hosts, ip, (oldkey, oldvalue) => ip);\n                    }\n                }\n                if (ip != null)\n                {\n                    using HttpResponseMessage? response = ClassWeb.HttpResponseMessage("http://" + _hosts + _filePath, "HEAD");\n                    if (response != null && response.IsSuccessStatusCode)\n                    {\n                        if (response.Content.Headers.TryGetValues("Content-Length", out IEnumerable<string>? values))\n                        {\n                            ulong filesize = ulong.Parse(values.FirstOrDefault() ?? "0");\n                            XboxGame = new XboxGameDownload.Products\n                            {\n                                Version = version,\n                                FileSize = filesize,\n                                Url = "http://" + _hosts + _filePath\n                            };\n                            XboxGameDownload.dicXboxGame.AddOrUpdate(key, XboxGame, (oldkey, oldvalue) => XboxGame);\n                            XboxGameDownload.SaveXboxGame();\n                            _ = ClassWeb.HttpResponseContent(UpdateFile.homePage + "/Game/AddGameUrl?url=" + ClassWeb.UrlEncode(XboxGame.Url), "PUT", null, null, null, 30000, "XboxDownload");\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n'