b'package com.quyunshuo.androidbaseframemvvm.base.ktx\n\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport kotlinx.coroutines.*\n\n/**\n * \xe5\xbc\x80\xe5\x90\xaf\xe4\xb8\x80\xe4\xb8\xaa\xe7\xba\xbf\xe7\xa8\x8b\xe8\xb0\x83\xe5\xba\xa6\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\xba[Dispatchers.IO]\xe7\x9a\x84\xe5\x8d\x8f\xe7\xa8\x8b \xe6\x9c\x89\xe9\xbb\x98\xe8\xae\xa4\xe7\x9a\x84\xe5\xbc\x82\xe5\xb8\xb8\xe5\xa4\x84\xe7\x90\x86\xe5\x99\xa8\n *\n * **sample:**\n * ```\n * class SampleViewModel : ViewModel() {\n *\n *     fun sample() {\n *         launchIO {\n *             // \xe5\x8d\x8f\xe7\xa8\x8b\xe4\xbd\x93\n *         }\n *         launchIO(exceptionHandler = CoroutineExceptionHandler { coroutineContext, throwable ->\n *             // exception handling\n *         }) {\n *             // \xe5\x8d\x8f\xe7\xa8\x8b\xe4\xbd\x93\n *         }\n *     }\n * }\n * ```\n *\n * @receiver ViewModel\n *\n * @param exceptionHandler CoroutineExceptionHandler \xe5\xbc\x82\xe5\xb8\xb8\xe5\xa4\x84\xe7\x90\x86\xe5\x99\xa8\n * @param block suspend CoroutineScope.() -> Unit \xe5\x8d\x8f\xe7\xa8\x8b\xe4\xbd\x93\n * @return Job\n */\nfun ViewModel.launchIO(\n    exceptionHandler: CoroutineExceptionHandler = CoroutineExceptionHandler { _, throwable ->\n        throwable.printStackTrace()\n    },\n    block: suspend CoroutineScope.() -> Unit\n): Job = viewModelScope.launch(Dispatchers.IO + exceptionHandler, block = block)\n\n/**\n * \xe5\xbc\x80\xe5\x90\xaf\xe4\xb8\x80\xe4\xb8\xaa\xe7\xba\xbf\xe7\xa8\x8b\xe8\xb0\x83\xe5\xba\xa6\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\xba[Dispatchers.Default]\xe7\x9a\x84\xe5\x8d\x8f\xe7\xa8\x8b \xe6\x9c\x89\xe9\xbb\x98\xe8\xae\xa4\xe7\x9a\x84\xe5\xbc\x82\xe5\xb8\xb8\xe5\xa4\x84\xe7\x90\x86\xe5\x99\xa8\n *\n * **sample:**\n * ```\n * class SampleViewModel : ViewModel() {\n *\n *     fun sample() {\n *         launchDefault {\n *             // \xe5\x8d\x8f\xe7\xa8\x8b\xe4\xbd\x93\n *         }\n *         launchDefault(exceptionHandler = CoroutineExceptionHandler { coroutineContext, throwable ->\n *             // exception handling\n *         }) {\n *             // \xe5\x8d\x8f\xe7\xa8\x8b\xe4\xbd\x93\n *         }\n *     }\n * }\n * ```\n *\n * @receiver ViewModel\n *\n * @param exceptionHandler CoroutineExceptionHandler \xe5\xbc\x82\xe5\xb8\xb8\xe5\xa4\x84\xe7\x90\x86\xe5\x99\xa8\n * @param block suspend CoroutineScope.() -> Unit \xe5\x8d\x8f\xe7\xa8\x8b\xe4\xbd\x93\n * @return Job\n */\nfun ViewModel.launchDefault(\n    exceptionHandler: CoroutineExceptionHandler = CoroutineExceptionHandler { _, throwable ->\n        throwable.printStackTrace()\n    },\n    block: suspend CoroutineScope.() -> Unit\n): Job = viewModelScope.launch(Dispatchers.Default + exceptionHandler, block = block)\n\n/**\n * \xe5\xbc\x80\xe5\x90\xaf\xe4\xb8\x80\xe4\xb8\xaa\xe7\xba\xbf\xe7\xa8\x8b\xe8\xb0\x83\xe5\xba\xa6\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\xba[Dispatchers.Main]\xe7\x9a\x84\xe5\x8d\x8f\xe7\xa8\x8b \xe6\x9c\x89\xe9\xbb\x98\xe8\xae\xa4\xe7\x9a\x84\xe5\xbc\x82\xe5\xb8\xb8\xe5\xa4\x84\xe7\x90\x86\xe5\x99\xa8\n *\n * **sample:**\n * ```\n * class SampleViewModel : ViewModel() {\n *\n *     fun sample() {\n *         launchMain {\n *             // \xe5\x8d\x8f\xe7\xa8\x8b\xe4\xbd\x93\n *         }\n *         launchMain(exceptionHandler = CoroutineExceptionHandler { coroutineContext, throwable ->\n *             // exception handling\n *         }) {\n *             // \xe5\x8d\x8f\xe7\xa8\x8b\xe4\xbd\x93\n *         }\n *     }\n * }\n * ```\n *\n * @receiver ViewModel\n *\n * @param exceptionHandler CoroutineExceptionHandler \xe5\xbc\x82\xe5\xb8\xb8\xe5\xa4\x84\xe7\x90\x86\xe5\x99\xa8\n * @param block suspend CoroutineScope.() -> Unit \xe5\x8d\x8f\xe7\xa8\x8b\xe4\xbd\x93\n * @return Job\n */\nfun ViewModel.launchMain(\n    exceptionHandler: CoroutineExceptionHandler = CoroutineExceptionHandler { _, throwable ->\n        throwable.printStackTrace()\n    },\n    block: suspend CoroutineScope.() -> Unit\n): Job = viewModelScope.launch(Dispatchers.Main + exceptionHandler, block = block)'