b'package droidninja.filepicker\n\nimport android.annotation.SuppressLint\nimport android.app.Activity\nimport android.content.Intent\nimport android.net.Uri\nimport android.os.Bundle\nimport android.text.TextUtils\nimport android.view.Menu\nimport android.view.MenuItem\nimport droidninja.filepicker.fragments.DocFragment\nimport droidninja.filepicker.fragments.DocPickerFragment\nimport droidninja.filepicker.fragments.MediaPickerFragment\nimport droidninja.filepicker.fragments.PhotoPickerFragmentListener\nimport droidninja.filepicker.utils.FragmentUtil\nimport java.util.*\n\nclass FilePickerActivity : BaseFilePickerActivity(), PhotoPickerFragmentListener, DocFragment.DocFragmentListener, DocPickerFragment.DocPickerFragmentListener, MediaPickerFragment.MediaPickerFragmentListener {\n    private var type: Int = 0\n\n    @SuppressLint("MissingSuperCall")\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState, R.layout.activity_file_picker)\n    }\n\n    override fun initView() {\n        val intent = intent\n        if (intent != null) {\n            val selectedPaths: ArrayList<Uri>? = intent.getParcelableArrayListExtra(FilePickerConst.KEY_SELECTED_MEDIA)\n            type = intent.getIntExtra(FilePickerConst.EXTRA_PICKER_TYPE, FilePickerConst.MEDIA_PICKER)\n\n            if (selectedPaths != null) {\n\n                if (PickerManager.getMaxCount() == 1) {\n                    selectedPaths.clear()\n                }\n\n                PickerManager.clearSelections()\n                if (type == FilePickerConst.MEDIA_PICKER) {\n                    PickerManager.add(selectedPaths, FilePickerConst.FILE_TYPE_MEDIA)\n                } else {\n                    PickerManager.add(selectedPaths, FilePickerConst.FILE_TYPE_DOCUMENT)\n                }\n            }\n\n            setToolbarTitle(PickerManager.currentCount)\n            openSpecificFragment(type)\n        }\n    }\n\n    override fun setToolbarTitle(count: Int) {\n        val actionBar = supportActionBar\n        if (actionBar != null) {\n            val maxCount = PickerManager.getMaxCount()\n            if (maxCount == -1 && count > 0) {\n                actionBar.title = String.format(getString(R.string.attachments_num), count)\n            } else if (maxCount > 0 && count > 0) {\n                actionBar.title = String.format(getString(R.string.attachments_title_text), count, maxCount)\n            } else if (!TextUtils.isEmpty(PickerManager.title)) {\n                actionBar.title = PickerManager.title\n            } else {\n                if (type == FilePickerConst.MEDIA_PICKER) {\n                    actionBar.setTitle(R.string.select_photo_text)\n                } else {\n                    actionBar.setTitle(R.string.select_doc_text)\n                }\n            }\n        }\n    }\n\n    private fun openSpecificFragment(type: Int) {\n        if (type == FilePickerConst.MEDIA_PICKER) {\n            val photoFragment = MediaPickerFragment.newInstance()\n            FragmentUtil.replaceFragment(this, R.id.container, photoFragment)\n        } else {\n            if (PickerManager.isDocSupport) PickerManager.addDocTypes()\n\n            val photoFragment = DocPickerFragment.newInstance()\n            FragmentUtil.replaceFragment(this, R.id.container, photoFragment)\n        }\n    }\n\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\n        menuInflater.inflate(R.menu.picker_menu, menu)\n        val menuItem = menu.findItem(R.id.action_done)\n        if (menuItem != null) {\n            menuItem.isVisible = PickerManager.getMaxCount() != 1\n        }\n        return super.onCreateOptionsMenu(menu)\n    }\n\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\n        val i = item.itemId\n        if (i == R.id.action_done) {\n            if (type == FilePickerConst.MEDIA_PICKER) {\n                returnData(PickerManager.selectedPhotos)\n            } else {\n                returnData(PickerManager.selectedFiles)\n            }\n\n            return true\n        } else if (i == android.R.id.home) {\n            onBackPressed()\n            return true\n        }\n        return super.onOptionsItemSelected(item)\n    }\n\n    override fun onBackPressed() {\n        super.onBackPressed()\n        setResult(Activity.RESULT_CANCELED)\n        finish()\n    }\n\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n        super.onActivityResult(requestCode, resultCode, data)\n        when (requestCode) {\n            FilePickerConst.REQUEST_CODE_MEDIA_DETAIL -> if (resultCode == Activity.RESULT_OK) {\n                if (type == FilePickerConst.MEDIA_PICKER) {\n                    returnData(PickerManager.selectedPhotos)\n                } else {\n                    returnData(PickerManager.selectedFiles)\n                }\n            } else {\n                setToolbarTitle(PickerManager.currentCount)\n            }\n        }\n    }\n\n    private fun returnData(paths: ArrayList<Uri>) {\n        val intent = Intent()\n        if (type == FilePickerConst.MEDIA_PICKER) {\n            intent.putParcelableArrayListExtra(FilePickerConst.KEY_SELECTED_MEDIA, paths)\n        } else {\n            intent.putParcelableArrayListExtra(FilePickerConst.KEY_SELECTED_DOCS, paths)\n        }\n\n        setResult(Activity.RESULT_OK, intent)\n        finish()\n    }\n\n    override fun onDestroy() {\n        PickerManager.reset()\n        super.onDestroy()\n    }\n\n    override fun onItemSelected() {\n        val currentCount = PickerManager.currentCount\n        setToolbarTitle(currentCount)\n\n        if (PickerManager.getMaxCount() == 1 && currentCount == 1) {\n            returnData(\n                    if (type == FilePickerConst.MEDIA_PICKER)\n                        PickerManager.selectedPhotos\n                    else\n                        PickerManager.selectedFiles)\n        }\n    }\n\n    companion object {\n\n        private val TAG = FilePickerActivity::class.java.simpleName\n    }\n}\n'