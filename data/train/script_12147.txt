b'/**\n * MIT License\n *\n * Copyright (c) 2017 Thibaut Goetghebuer-Planchon <tessil@gmx.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the "Software"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n#define BOOST_TEST_DYN_LINK\n\n#include <tsl/robin_growth_policy.h>\n\n#include <boost/mpl/list.hpp>\n#include <boost/test/unit_test.hpp>\n#include <cstddef>\n#include <limits>\n#include <ratio>\n#include <stdexcept>\n\n#include "utils.h"\n\nBOOST_AUTO_TEST_SUITE(test_policy)\n\nusing test_types = boost::mpl::list<tsl::rh::power_of_two_growth_policy<2>, tsl::rh::power_of_two_growth_policy<4>,\n                                    tsl::rh::prime_growth_policy, tsl::rh::mod_growth_policy<>,\n                                    tsl::rh::mod_growth_policy<std::ratio<7, 2>>>;\n\nBOOST_AUTO_TEST_CASE_TEMPLATE(test_policy, Policy, test_types)\n{\n    // Call next_bucket_count() on the policy until we reach its\n    // max_bucket_count()\n    std::size_t bucket_count = 0;\n    Policy policy(bucket_count);\n\n    BOOST_CHECK_EQUAL(policy.bucket_for_hash(0), 0);\n    BOOST_CHECK_EQUAL(bucket_count, 0);\n\n#ifndef TSL_RH_NO_EXCEPTIONS\n    bool exception_thrown = false;\n    try {\n        while (true) {\n            const std::size_t previous_bucket_count = bucket_count;\n\n            bucket_count = policy.next_bucket_count();\n            policy = Policy(bucket_count);\n\n            BOOST_CHECK_EQUAL(policy.bucket_for_hash(0), 0);\n            BOOST_CHECK(bucket_count > previous_bucket_count);\n        }\n    } catch (const std::length_error&) {\n        exception_thrown = true;\n    }\n\n    BOOST_CHECK(exception_thrown);\n#endif\n}\n\nBOOST_AUTO_TEST_CASE_TEMPLATE(test_policy_min_bucket_count, Policy, test_types)\n{\n    // Check policy when a bucket_count of 0 is asked.\n    std::size_t bucket_count = 0;\n    Policy policy(bucket_count);\n\n    BOOST_CHECK_EQUAL(policy.bucket_for_hash(0), 0);\n}\n\nBOOST_AUTO_TEST_CASE_TEMPLATE(test_policy_max_bucket_count, Policy, test_types)\n{\n    // Test a bucket_count equals to the max_bucket_count limit and above\n    std::size_t bucket_count = 0;\n    Policy policy(bucket_count);\n\n    bucket_count = policy.max_bucket_count();\n    Policy policy2(bucket_count);\n\n    bucket_count = std::numeric_limits<std::size_t>::max();\n    TSL_RH_CHECK_THROW((Policy(bucket_count)), std::length_error);\n\n    bucket_count = policy.max_bucket_count() + 1;\n    TSL_RH_CHECK_THROW((Policy(bucket_count)), std::length_error);\n}\n\nBOOST_AUTO_TEST_SUITE_END()\n'