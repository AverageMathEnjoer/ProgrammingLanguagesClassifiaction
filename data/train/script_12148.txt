b'\xef\xbb\xbfusing System;\nusing System.Collections.Generic;\nusing System.IdentityModel.Tokens.Jwt;\nusing System.Linq;\nusing System.Security.Claims;\nusing System.Text;\nusing Core.Entities.Concrete;\nusing Core.Extensions;\nusing Core.Utilities.Security.Encyption;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.IdentityModel.Tokens;\n\nnamespace Core.Utilities.Security.Jwt\n{\n    public class JwtHelper:ITokenHelper\n    {\n        public IConfiguration Configuration { get; }\n        private TokenOptions _tokenOptions;\n        private DateTime _accessTokenExpiration;\n        public JwtHelper(IConfiguration configuration)\n        {\n            Configuration = configuration;\n            _tokenOptions = Configuration.GetSection("TokenOptions").Get<TokenOptions>();\n            \n        }\n        public AccessToken CreateToken(User user, List<OperationClaim> operationClaims)\n        {\n            _accessTokenExpiration = DateTime.Now.AddMinutes(_tokenOptions.AccessTokenExpiration);\n            var securityKey = SecurityKeyHelper.CreateSecurityKey(_tokenOptions.SecurityKey);\n            var signingCredentials = SigningCredentialsHelper.CreateSigningCredentials(securityKey);\n            var jwt = CreateJwtSecurityToken(_tokenOptions, user, signingCredentials, operationClaims);\n            var jwtSecurityTokenHandler = new JwtSecurityTokenHandler();\n            var token = jwtSecurityTokenHandler.WriteToken(jwt);\n\n            return new AccessToken\n            {\n                Token = token,\n                Expiration = _accessTokenExpiration\n            };\n\n        }\n\n        public JwtSecurityToken CreateJwtSecurityToken(TokenOptions tokenOptions, User user, \n            SigningCredentials signingCredentials, List<OperationClaim> operationClaims)\n        {\n            var jwt = new JwtSecurityToken(\n                issuer:tokenOptions.Issuer,\n                audience:tokenOptions.Audience,\n                expires:_accessTokenExpiration,\n                notBefore:DateTime.Now,\n                claims: SetClaims(user,operationClaims),\n                signingCredentials:signingCredentials\n            );\n            return jwt;\n        }\n\n        private IEnumerable<Claim> SetClaims(User user, List<OperationClaim> operationClaims)\n        {\n            var claims = new List<Claim>();\n            claims.AddNameIdentifier(user.Id.ToString());\n            claims.AddEmail(user.Email);\n            claims.AddName($"{user.FirstName} {user.LastName}");\n            claims.AddRoles(operationClaims.Select(c=>c.Name).ToArray());\n            \n            return claims;\n        }\n    }\n}\n'