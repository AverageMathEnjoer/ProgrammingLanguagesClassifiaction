b'package effectivejava.chapter2.item2.builder;\n\n// Builder Pattern  (Page 13)\npublic class NutritionFacts {\n    private final int servingSize;\n    private final int servings;\n    private final int calories;\n    private final int fat;\n    private final int sodium;\n    private final int carbohydrate;\n\n    public static class Builder {\n        // Required parameters\n        private final int servingSize;\n        private final int servings;\n\n        // Optional parameters - initialized to default values\n        private int calories      = 0;\n        private int fat           = 0;\n        private int sodium        = 0;\n        private int carbohydrate  = 0;\n\n        public Builder(int servingSize, int servings) {\n            this.servingSize = servingSize;\n            this.servings    = servings;\n        }\n\n        public Builder calories(int val)\n        { calories = val;      return this; }\n        public Builder fat(int val)\n        { fat = val;           return this; }\n        public Builder sodium(int val)\n        { sodium = val;        return this; }\n        public Builder carbohydrate(int val)\n        { carbohydrate = val;  return this; }\n\n        public NutritionFacts build() {\n            return new NutritionFacts(this);\n        }\n    }\n\n    private NutritionFacts(Builder builder) {\n        servingSize  = builder.servingSize;\n        servings     = builder.servings;\n        calories     = builder.calories;\n        fat          = builder.fat;\n        sodium       = builder.sodium;\n        carbohydrate = builder.carbohydrate;\n    }\n\n    public static void main(String[] args) {\n        NutritionFacts cocaCola = new NutritionFacts.Builder(240, 8)\n                .calories(100).sodium(35).carbohydrate(27).build();\n    }\n}'