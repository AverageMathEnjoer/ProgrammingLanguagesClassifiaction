b"{-# LANGUAGE InstanceSigs #-}\n{-# LANGUAGE RecursiveDo  #-}\n{-# OPTIONS_GHC -fno-warn-orphans #-}\n-- |\n-- Copyright  : (c) Ivan Perez and Manuel Baerenz, 2016\n-- License    : BSD3\n-- Maintainer : ivan.perez@keera.co.uk\n--\n-- Instance of 'ArrowLoop' for Monadic Stream Functions ('MSF').\n--\n-- Import this module to include that (orphan) instance.\n--\n-- This is only defined for monads that are instances of 'MonadFix'.\nmodule Data.MonadicStreamFunction.Instances.ArrowLoop where\n\n-- External imports\nimport Control.Arrow     (ArrowLoop (..))\nimport Control.Monad.Fix (MonadFix)\n\n-- Internal imports\nimport Data.MonadicStreamFunction.Core         ()\nimport Data.MonadicStreamFunction.InternalCore (MSF (MSF, unMSF))\n\n-- | 'ArrowLoop' instance for MSFs. The monad must be an instance of\n-- 'MonadFix'.\ninstance MonadFix m => ArrowLoop (MSF m) where\n  loop :: MSF m (b, d) (c, d) -> MSF m b c\n  loop sf = MSF $ \\a -> do\n              rec ((b, c), sf') <- unMSF sf (a, c)\n              return (b, loop sf')\n"