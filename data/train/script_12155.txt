b'makeExpandedModelMatrix <- function(object) {\n  designFactors <- getDesignFactors(object)\n  coldata <- colData(object)\n  coldata <- rbind(coldata,coldata[nrow(coldata),,drop=FALSE])\n  for (f in designFactors) {\n    levels(coldata[[f]]) <- c(levels(coldata[[f]]),"_null_level_")\n    coldata[[f]] <- relevel(coldata[[f]],"_null_level_")\n    coldata[[f]][nrow(coldata)] <- "_null_level_"\n  }\n  mm0 <- stats::model.matrix.default(design(object), data=as.data.frame(coldata))\n  # these can appear when interactions are present without main effect variables\n  nullLvls <- grepl("_null_level_",colnames(mm0))\n  mm <- mm0[-nrow(mm0),!nullLvls,drop=FALSE]\n  attr(mm,"assign") <- attr(mm0,"assign")\n  colnames(mm)[colnames(mm) == "(Intercept)"] <- "Intercept"\n  colnames(mm) <- make.names(colnames(mm))\n  mm\n}\n\naveragePriorsOverLevels <- function(object, betaPriorVar) { \n  expandedModelMatrix <- makeExpandedModelMatrix(object)\n  expandedNames <- colnames(expandedModelMatrix)\n  betaPriorIn <- betaPriorVar\n  betaPriorOut <- numeric(length(expandedNames))\n  names(betaPriorOut) <- expandedNames\n  bpiNms <- names(betaPriorIn)\n  idx <- which(bpiNms %in% expandedNames)\n  betaPriorOut[match(bpiNms[idx],expandedNames)] <- betaPriorIn[idx]\n  designFactors <- getDesignFactors(object)\n  allVars <- all.vars(design(object))\n  coldata <- colData(object)\n  for (f in designFactors) {\n    lvls <- levels(coldata[[f]])\n    mmColnames <- make.names(paste0(f,c(lvls,"Cntrst")))\n    meanPriorVar <- mean(betaPriorIn[names(betaPriorIn) %in% mmColnames])\n    betaPriorOut[expandedNames %in% mmColnames] <- meanPriorVar\n  }\n\n  # pre-v1.10 code regarding interactions and the beta prior:\n  # ------------------------------------------------------------\n  # also set prior for any interactions between design factors\n  # which are new in the expanded model matrix using existing interactions\n  ## termsOrder <- attr(terms.formula(design(object)),"order")\n  ## if (any(termsOrder > 1)) {\n  ##   for (f1 in designFactors) {\n  ##     for (f2 in allVars) {\n  ##       if (f1 == f2) next\n  ##       lvls1 <- levels(coldata[[f1]])\n  ##       # the case where f2 is a factor like f1\n  ##       if (f2 %in% designFactors) {\n  ##         lvls2 <- levels(coldata[[f2]])\n  ##         mmColnames <- make.names(paste0(f1,rep(lvls1,each=length(lvls2)),":",\n  ##                                         f2,rep(lvls2,times=length(lvls1))))\n  ##         meanPriorVar <- mean(betaPriorIn[names(betaPriorIn) %in% mmColnames])\n  ##         betaPriorOut[expandedNames %in% mmColnames] <- meanPriorVar\n  ##       # the case where f2 is not a factor\n  ##       } else {\n  ##         mmColnames <- make.names(c(paste0(f1,lvls1,":",f2),paste0(f2,":",f1,lvls1)))\n  ##         meanPriorVar <- mean(betaPriorIn[names(betaPriorIn) %in% mmColnames])\n  ##         betaPriorOut[expandedNames %in% mmColnames] <- meanPriorVar\n  ##       }\n  ##     }\n  ##   }\n  ## }\n  \n  if (any(is.na(betaPriorOut))) {\n    stop(paste("beta prior for",paste(names(betaPriorOut)[is.na(betaPriorOut)],collapse=","),"is NA"))\n  }\n  if (!all(betaPriorOut > 0)) {\n    stop(paste("beta prior for",paste(names(betaPriorOut)[betaPriorOut <= 0],collapse=","),"is not greater than 0"))\n  }\n  betaPriorOut\n}\n\n# adds all first order contrasts\naddAllContrasts <- function(object, betaMatrix) { \n  designFactors <- getDesignFactors(object)\n  coldata <- colData(object)\n  for (f in designFactors) {\n    lvls <- levels(coldata[[f]])\n    mmColnames <- make.names(paste0(f,lvls))\n    M <- betaMatrix[,colnames(betaMatrix) %in% mmColnames,drop=FALSE]\n    n <- ncol(M)\n    if (n > 1) {\n      if (n == 2) {\n        is <- 2\n        js <- 1\n      } else {\n        is <- do.call(c,sapply(seq_len(n-1)+1, function(k) seq(from=k,to=n)))\n        js <- rep(seq_len(n-1),rev(seq_len(n-1)))\n      }\n      contrastCols <- mapply(function(i,j) M[,i] - M[,j], i=is, j=js)\n      colnames(contrastCols) <- rep(make.names(paste0(f,"Cntrst")),ncol(contrastCols))\n      betaMatrix <- cbind(betaMatrix, contrastCols)\n    }\n  }\n  betaMatrix\n}\n  \n\n'