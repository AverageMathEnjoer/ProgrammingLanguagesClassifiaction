b'import com.github.eprendre.tingshu.utils.Book\nimport com.github.eprendre.tingshu.utils.Episode\nimport org.jsoup.Jsoup\nimport org.junit.Test\n\nclass IFishTest {\n\n    @Test\n    fun bookDetail() {\n        val doc = Jsoup.connect("https://ifish.fun/music/luoo/996").testConfig(false).get()\n        val episodes = doc.select(".player-list > ol > li").map {\n            var url = it.selectFirst(".player-list-url").text()\n            url = "https://ifish.fun${url}"\n            val title = it.selectFirst(".player-list-name").text() + " - " + it.selectFirst(".player-list-author").text()\n            Episode(title, url)\n        }\n        val intro = doc.selectFirst(".text-center")?.outerHtml() ?: ""\n        println(intro)\n        episodes.take(10).forEach {\n            println(it)\n        }\n        assert(episodes.isNotEmpty())\n    }\n\n    @Test\n    fun categoryList() {\n        val doc = Jsoup.connect("https://ifish.fun/music/fish").testConfig(false).get()\n        val pages = doc.select(".page-navigator > li > a")\n        val nextPage = pages.first { it.text().contains("\xe4\xb8\x8b\xe4\xb8\x80\xe9\xa1\xb5") }\n        var nextUrl = nextPage.absUrl("href")\n        if (nextPage.hasClass("disabled")) {\n            nextUrl = ""\n        }\n        val currentPage = pages.first { it.hasClass("current") }.text().toInt()\n        val totalPage = pages.last().absUrl("href").split("p=")[1].toInt()\n\n        val list = ArrayList<Book>()\n        val elementList = doc.select(".daily-list > div > div")\n        elementList.forEach { element ->\n            val bookUrl = element.selectFirst("a").absUrl("href")\n            val coverStyle = element.selectFirst("a > .item-thumb").attr("style")\n            val coverUrl = Regex("url\\\\((.+)\\\\);").find(coverStyle)!!.groupValues[1]\n            val children = element.selectFirst("a > .item-title").children()\n            val title = children.first().text()\n            var status = ""\n            if (children.size > 1) {\n                status = children[1].text()\n            }\n            var intro = ""\n            element.selectFirst(".item-summary")?.let {\n                intro = it.text()\n            }\n            list.add(Book(coverUrl, bookUrl, title, "", "").apply {\n                this.intro = intro\n                this.status = status\n            })\n        }\n        println(nextUrl)\n        println("$currentPage / $totalPage")\n        list.take(5).forEach { println(it) }\n        assert(list.isNotEmpty())\n    }\n}'