b'context("weights")\ntest_that("weights work", {\n  set.seed(1)\n  dds <- makeExampleDESeqDataSet(n=10)\n\n  # check that weight to 0 is like a removed samples\n  dds <- DESeq(dds, quiet=TRUE)\n  dds2 <- dds\n  w <- matrix(1, nrow=nrow(dds), ncol=ncol(dds))\n  w[1,1] <- 0\n  assays(dds2, withDimnames=FALSE)[["weights"]] <- w\n  dds2 <- nbinomWaldTest(dds2)\n  dds3 <- dds[,-1]\n  dds3 <- nbinomWaldTest(dds3)\n\n  # in terms of LFC, SE and deviance\n  expect_equal(results(dds2)$log2FoldChange[1], results(dds3)$log2FoldChange[1])\n  expect_equal(results(dds2)$lfcSE[1], results(dds3)$lfcSE[1])\n  expect_equal(mcols(dds2)[1,"deviance"],mcols(dds3)[1,"deviance"])\n\n  # check weights working in the optim code\n  \n  nf <- matrix(sizeFactors(dds),nrow=nrow(dds),ncol=ncol(dds),byrow=TRUE)\n  \n  o <- fitNbinomGLMsOptim(object=dds,\n                          modelMatrix=model.matrix(design(dds), colData(dds)),\n                          lambda=rep(1e-6, 2),\n                          rowsForOptim=1,\n                          rowStable=TRUE,\n                          normalizationFactors=nf,\n                          alpha_hat=dispersions(dds),\n                          weights=w,\n                          useWeights=TRUE,\n                          betaMatrix=matrix(0,nrow=nrow(dds),ncol=2),\n                          betaSE=matrix(0,nrow=nrow(dds),ncol=2),\n                          betaConv=rep(FALSE,nrow(dds)),\n                          beta_mat=matrix(0,nrow=nrow(dds),ncol=2),\n                          mu=matrix(0,nrow=nrow(dds),ncol=ncol(dds)),\n                          logLike=rep(0,nrow(dds)))\n\n  expect_equal(results(dds3)$log2FoldChange[1], o$betaMatrix[1,2], tolerance=1e-4)\n\n  # can use weights with betaPrior=TRUE\n  \n  set.seed(1)\n  dds <- makeExampleDESeqDataSet(n=10)\n  w <- matrix(1, nrow=nrow(dds), ncol=ncol(dds))\n  w[1,1] <- 0\n  assays(dds, withDimnames=FALSE)[["weights"]] <- w\n  dds <- DESeq(dds, betaPrior=TRUE, quiet=TRUE)\n\n  # check weights working for intercept only\n  \n  design(dds) <- ~1\n  suppressWarnings({ dds <- DESeq(dds, quiet=TRUE) })\n  dds2 <- dds\n  assays(dds2, withDimnames=FALSE)[["weights"]] <- w\n  dds2 <- nbinomWaldTest(dds2)\n  dds3 <- dds[,-1]\n  dds3 <- nbinomWaldTest(dds3)\n\n  expect_equal(results(dds2)$log2FoldChange[1], results(dds3)$log2FoldChange[1])\n  expect_equal(results(dds2)$lfcSE[1], results(dds3)$lfcSE[1])\n  expect_equal(mcols(dds2)[1,"deviance"],mcols(dds3)[1,"deviance"])\n\n  # check that weights downweight outlier in dispersion estimation\n  \n  set.seed(1)\n  dds <- makeExampleDESeqDataSet(n=10)\n  counts(dds)[1,1] <- 100L\n  sizeFactors(dds) <- rep(1,ncol(dds))\n  dds <- estimateDispersions(dds)\n  dds2 <- dds\n  w <- matrix(1, nrow=nrow(dds), ncol=ncol(dds))\n  w[1,1] <- 0\n  assays(dds2, withDimnames=FALSE)[["weights"]] <- w\n  dds2 <- estimateDispersions(dds2)\n  dds3 <- dds[,-1]\n  dds3 <- estimateDispersions(dds3)\n  \n  expect_equal(mcols(dds2)[1,"dispGeneEst"],mcols(dds3)[1,"dispGeneEst"],tolerance=1e-3)\n  # MAP estimates won\'t be equal because of different dispersion prior widths...\n  expect_true(mcols(dds)[1,"dispMAP"] > mcols(dds2)[1,"dispMAP"])\n  \n})\n\ntest_that("weights failing check gives warning, passes them through", {\n\n  set.seed(1)\n  dds <- makeExampleDESeqDataSet(n=10)\n  w <- matrix(1, nrow=nrow(dds), ncol=ncol(dds))\n  w[1,1:6] <- 0\n  assays(dds, withDimnames=FALSE)[["weights"]] <- w\n  expect_warning(dds <- DESeq(dds))\n  expect_true(mcols(dds)$allZero[1])\n  expect_true(mcols(dds)$weightsFail[1])\n  res <- results(dds)\n  \n})\n\ntest_that("weights with and without CR term included", {\n\n  set.seed(1); alpha <- .25\n  dmr <- function(x) alpha\n  dds <- makeExampleDESeqDataSet(n=50, m=100, betaSD=1, interceptMean=10, interceptSD=.5, dispMeanRel=dmr)\n  dds$group <- factor(rep(1:50,2)); design(dds) <- ~0 + group + condition\n  w <- matrix(1, nrow=nrow(dds), ncol=ncol(dds))\n  o <- 35\n  w[,c(1:o, 50 + 1:o)] <- 1e-6\n  assays(dds, withDimnames=FALSE)[["weights"]] <- w\n  counts(dds)[,c(1:o, 50 + 1:o)] <- 1L\n  sizeFactors(dds) <- 1\n  dds <- estimateDispersions(dds, fitType="mean")\n  dds2 <- estimateDispersions(dds, fitType="mean", useCR=FALSE)\n  ## dds3 <- estimateDispersions(dds, fitType="mean", weightThreshold=0)\n  ## par(mfcol=c(3,2), mar=c(4.5,4.5,1,1), cex=1.1)\n  ## for (col in c("dispGeneEst","dispersion")) {\n  ##   plot(mcols(dds)$trueBeta, mcols(dds)[[col]], ylim=c(0,2*alpha));abline(h=alpha,col="blue")\n  ##   plot(mcols(dds2)$trueBeta, mcols(dds2)[[col]], ylim=c(0,2*alpha));abline(h=alpha,col="blue")\n  ##   plot(mcols(dds3)$trueBeta, mcols(dds3)[[col]], ylim=c(0,10));abline(h=alpha,col="blue")\n  ## }\n  \n})\n'