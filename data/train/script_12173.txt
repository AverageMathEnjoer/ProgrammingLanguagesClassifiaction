b'/*\n * Copyright (C) 2015 Naman Dwivedi\n *\n * Licensed under the GNU General Public License v3\n *\n * This is free software: you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n */\n\npackage com.naman14.timber.adapters;\n\nimport android.app.Activity;\nimport android.graphics.Rect;\nimport android.os.Handler;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.recyclerview.widget.LinearLayoutManager;\nimport androidx.recyclerview.widget.RecyclerView;\nimport android.view.LayoutInflater;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.ImageView;\nimport android.widget.PopupMenu;\nimport android.widget.TextView;\n\nimport com.naman14.timber.MusicPlayer;\nimport com.naman14.timber.R;\nimport com.naman14.timber.dataloaders.ArtistAlbumLoader;\nimport com.naman14.timber.dialogs.AddPlaylistDialog;\nimport com.naman14.timber.models.Song;\nimport com.naman14.timber.utils.NavigationUtils;\nimport com.naman14.timber.utils.TimberUtils;\nimport com.nostra13.universalimageloader.core.DisplayImageOptions;\nimport com.nostra13.universalimageloader.core.ImageLoader;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ArtistSongAdapter extends BaseSongAdapter<ArtistSongAdapter.ItemHolder> {\n\n    private List<Song> arraylist;\n    private Activity mContext;\n    private long artistID;\n    private long[] songIDs;\n\n    public ArtistSongAdapter(Activity context, List<Song> arraylist, long artistID) {\n        this.arraylist = arraylist;\n        this.mContext = context;\n        this.artistID = artistID;\n        this.songIDs = getSongIds();\n    }\n\n    @Override\n    public ItemHolder onCreateViewHolder(ViewGroup viewGroup, int viewType) {\n        if (viewType == 0) {\n            View v0 = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.artist_detail_albums_header, null);\n            ItemHolder ml = new ItemHolder(v0);\n            return ml;\n        } else {\n            View v2 = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.item_artist_song, null);\n            ItemHolder ml = new ItemHolder(v2);\n            return ml;\n        }\n    }\n\n    @Override\n    public void onBindViewHolder(ItemHolder itemHolder, int i) {\n\n        if (getItemViewType(i) == 0) {\n            //nothing\n            setUpAlbums(itemHolder.albumsRecyclerView);\n        } else {\n            Song localItem = arraylist.get(i);\n            itemHolder.title.setText(localItem.title);\n            itemHolder.album.setText(localItem.albumName);\n\n            ImageLoader.getInstance().displayImage(TimberUtils.getAlbumArtUri(localItem.albumId).toString(),\n                    itemHolder.albumArt, new DisplayImageOptions.Builder()\n                            .cacheInMemory(true).showImageOnLoading(R.drawable.ic_empty_music2).resetViewBeforeLoading(true).build());\n            setOnPopupMenuListener(itemHolder, i - 1);\n        }\n\n    }\n\n    @Override\n    public void onViewRecycled(ItemHolder itemHolder) {\n\n        if (itemHolder.getItemViewType() == 0)\n            clearExtraSpacingBetweenCards(itemHolder.albumsRecyclerView);\n\n    }\n\n    @Override\n    public int getItemCount() {\n        return (null != arraylist ? arraylist.size() : 0);\n    }\n\n    private void setOnPopupMenuListener(ItemHolder itemHolder, final int position) {\n\n        itemHolder.menu.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n\n                final PopupMenu menu = new PopupMenu(mContext, v);\n                menu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {\n                    @Override\n                    public boolean onMenuItemClick(MenuItem item) {\n                        switch (item.getItemId()) {\n                            case R.id.popup_song_play:\n                                MusicPlayer.playAll(mContext, songIDs, position + 1, -1, TimberUtils.IdType.NA, false);\n                                break;\n                            case R.id.popup_song_play_next:\n                                long[] ids = new long[1];\n                                ids[0] = arraylist.get(position + 1).id;\n                                MusicPlayer.playNext(mContext, ids, -1, TimberUtils.IdType.NA);\n                                break;\n                            case R.id.popup_song_goto_album:\n                                NavigationUtils.goToAlbum(mContext, arraylist.get(position + 1).albumId);\n                                break;\n                            case R.id.popup_song_goto_artist:\n                                NavigationUtils.goToArtist(mContext, arraylist.get(position + 1).artistId);\n                                break;\n                            case R.id.popup_song_addto_queue:\n                                long[] id = new long[1];\n                                id[0] = arraylist.get(position + 1).id;\n                                MusicPlayer.addToQueue(mContext, id, -1, TimberUtils.IdType.NA);\n                                break;\n                            case R.id.popup_song_addto_playlist:\n                                AddPlaylistDialog.newInstance(arraylist.get(position + 1)).show(((AppCompatActivity) mContext).getSupportFragmentManager(), "ADD_PLAYLIST");\n                                break;\n                            case R.id.popup_song_share:\n                                TimberUtils.shareTrack(mContext, arraylist.get(position + 1).id);\n                                break;\n                            case R.id.popup_song_delete:\n                                long[] deleteIds = {arraylist.get(position + 1).id};\n                                TimberUtils.showDeleteDialog(mContext,arraylist.get(position + 1).title, deleteIds, ArtistSongAdapter.this, position + 1);\n                                break;\n                        }\n                        return false;\n                    }\n                });\n                menu.inflate(R.menu.popup_song);\n                menu.show();\n            }\n        });\n    }\n\n    private void setUpAlbums(RecyclerView albumsRecyclerview) {\n\n        albumsRecyclerview.setLayoutManager(new LinearLayoutManager(mContext, LinearLayoutManager.HORIZONTAL, false));\n        albumsRecyclerview.setHasFixedSize(true);\n\n        //to add spacing between cards\n        int spacingInPixels = mContext.getResources().getDimensionPixelSize(R.dimen.spacing_card);\n        albumsRecyclerview.addItemDecoration(new SpacesItemDecoration(spacingInPixels));\n        albumsRecyclerview.setNestedScrollingEnabled(false);\n\n\n        ArtistAlbumAdapter mAlbumAdapter = new ArtistAlbumAdapter(mContext, ArtistAlbumLoader.getAlbumsForArtist(mContext, artistID));\n        albumsRecyclerview.setAdapter(mAlbumAdapter);\n    }\n\n    private void clearExtraSpacingBetweenCards(RecyclerView albumsRecyclerview) {\n        //to clear any extra spacing between cards\n        int spacingInPixelstoClear = -(mContext.getResources().getDimensionPixelSize(R.dimen.spacing_card));\n        albumsRecyclerview.addItemDecoration(new SpacesItemDecoration(spacingInPixelstoClear));\n\n    }\n\n    public long[] getSongIds() {\n        List<Song> actualArraylist = new ArrayList<Song>(arraylist);\n        //actualArraylist.remove(0);\n        long[] ret = new long[actualArraylist.size()];\n        for (int i = 0; i < actualArraylist.size(); i++) {\n            ret[i] = actualArraylist.get(i).id;\n        }\n        return ret;\n    }\n\n    @Override\n    public void removeSongAt(int i){\n        arraylist.remove(i);\n        updateDataSet(arraylist);\n    }\n\n    @Override\n    public void updateDataSet(List<Song> arraylist) {\n        this.arraylist = arraylist;\n        this.songIDs = getSongIds();\n    }\n\n    @Override\n    public int getItemViewType(int position) {\n        int viewType;\n        if (position == 0) {\n            viewType = 0;\n        } else viewType = 1;\n        return viewType;\n    }\n\n    public class ItemHolder extends RecyclerView.ViewHolder implements View.OnClickListener {\n        protected TextView title, album;\n        protected ImageView albumArt, menu;\n        protected RecyclerView albumsRecyclerView;\n\n        public ItemHolder(View view) {\n            super(view);\n\n            this.albumsRecyclerView = (RecyclerView) view.findViewById(R.id.recycler_view_album);\n\n            this.title = (TextView) view.findViewById(R.id.song_title);\n            this.album = (TextView) view.findViewById(R.id.song_album);\n            this.albumArt = (ImageView) view.findViewById(R.id.albumArt);\n            this.menu = (ImageView) view.findViewById(R.id.popup_menu);\n\n\n            view.setOnClickListener(this);\n        }\n\n        @Override\n        public void onClick(View v) {\n            Handler handler = new Handler();\n            handler.postDelayed(new Runnable() {\n                @Override\n                public void run() {\n                    playAll(mContext, songIDs, getAdapterPosition(), artistID,\n                            TimberUtils.IdType.Artist, false,\n                            arraylist.get(getAdapterPosition()), true);\n                }\n            }, 100);\n\n        }\n\n    }\n\n    public class SpacesItemDecoration extends RecyclerView.ItemDecoration {\n        private int space;\n\n        public SpacesItemDecoration(int space) {\n            this.space = space;\n        }\n\n        @Override\n        public void getItemOffsets(Rect outRect, View view,\n                                   RecyclerView parent, RecyclerView.State state) {\n\n            //the padding from left\n            outRect.left = space;\n\n\n        }\n    }\n}\n\n\n\n\n'