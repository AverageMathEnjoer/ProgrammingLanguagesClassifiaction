b'{-# LANGUAGE TypeSynonymInstances #-}\n\nimport System.IO.Unsafe\n\ntype Prog a =\n  Int -> (Int, a)\n\nrunProg :: Prog a -> (Int, a)\nrunProg p = p 0\n\npureProgram x = \n  (\\n -> (n, x))\n\nexec :: Prog a -> (a -> Prog b) -> Prog b\nexec p1 p2 = \n  (\\n -> let (n1,a1) = p1    n\n             (n2,b1) = p2 a1 n1 in \n         (n2,b1))\n\nget :: Prog String\nget = \n  \\n -> (n+1, unsafePerformIO getLine)\n\nput :: String -> Prog ()\nput str = \n  \\n -> (n+1, unsafePerformIO $ putStrLn str)\n\n\nmain = print $ runProg $ \n  put "May I have your name?" `exec`\n  (\\() -> get `exec` \n  (\\name -> put $ name ++ " Nice to meet you!"))\n'