b'package com.github.eprendre.sources_by_eprendre\n\nimport com.github.eprendre.tingshu.extensions.config\nimport com.github.eprendre.tingshu.extensions.getMobileUA\nimport com.github.eprendre.tingshu.sources.AudioUrlDirectExtractor\nimport com.github.eprendre.tingshu.sources.AudioUrlExtractor\nimport com.github.eprendre.tingshu.sources.TingShu\nimport com.github.eprendre.tingshu.utils.*\nimport com.github.kittinunf.fuel.Fuel\nimport com.github.kittinunf.fuel.json.responseJson\nimport org.jsoup.Jsoup\nimport java.lang.Exception\nimport kotlin.math.ceil\n\nobject JiHe: TingShu(){\n    private val headers = mapOf(\n        "User-Agent" to getMobileUA()\n    )\n\n    override fun getSourceId(): String {\n        return "c6672f095d1248b58898c379d8989306"\n    }\n\n    override fun getUrl(): String {\n        return "https://www.gcores.com/radios"\n    }\n\n    override fun getName(): String {\n        return "\xe6\x9c\xba\xe6\xa0\xb8 GCORES"\n    }\n\n    override fun getDesc(): String {\n        return "\xe6\x8e\xa8\xe8\x8d\x90\xe6\x8c\x87\xe6\x95\xb0:2\xe6\x98\x9f \xe2\xad\x90\xe2\xad\x90\\n\xe6\x9c\xba\xe6\xa0\xb8\xe4\xbb\x8e2010\xe5\xb9\xb4\xe5\xbc\x80\xe5\xa7\x8b\xe4\xb8\x80\xe7\x9b\xb4\xe8\x87\xb4\xe5\x8a\x9b\xe4\xba\x8e\xe5\x88\x86\xe4\xba\xab\xe6\xb8\xb8\xe6\x88\x8f\xe7\x8e\xa9\xe5\xae\xb6\xe7\x9a\x84\xe7\x94\x9f\xe6\xb4\xbb\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a\xe6\xb7\xb1\xe5\x85\xa5\xe6\x8e\xa2\xe8\xae\xa8\xe6\xb8\xb8\xe6\x88\x8f\xe7\x9b\xb8\xe5\x85\xb3\xe7\x9a\x84\xe6\x96\x87\xe5\x8c\x96\xe3\x80\x82\xe6\x88\x91\xe4\xbb\xac\xe5\xbc\x80\xe5\x8f\x91\xe5\x8e\x9f\xe5\x88\x9b\xe7\x9a\x84\xe7\x94\xb5\xe5\x8f\xb0\xe4\xbb\xa5\xe5\x8f\x8a\xe8\xa7\x86\xe9\xa2\x91\xe8\x8a\x82\xe7\x9b\xae\xef\xbc\x8c\xe4\xb8\x80\xe7\x9b\xb4\xe5\x9c\xa8\xe4\xb8\x8d\xe6\x96\xad\xe5\xaf\xbb\xe6\x89\xbe\xe6\xb0\x91\xe9\x97\xb4\xe9\xab\x98\xe8\xb4\xa8\xe9\x87\x8f\xe7\x9a\x84\xe5\x86\x85\xe5\xae\xb9\xe5\x88\x9b\xe4\xbd\x9c\xe8\x80\x85\xe3\x80\x82 \xe6\x88\x91\xe4\xbb\xac\xe5\x9d\x9a\xe4\xbf\xa1\xe6\xb8\xb8\xe6\x88\x8f\xe4\xb8\x8d\xe6\xad\xa2\xe6\x98\xaf\xe6\xb8\xb8\xe6\x88\x8f\xef\xbc\x8c\xe6\xb8\xb8\xe6\x88\x8f\xe4\xb8\xad\xe5\x8c\x85\xe5\x90\xab\xe7\x9a\x84\xe7\xa7\x91\xe5\xad\xa6\xef\xbc\x8c\xe6\x96\x87\xe5\x8c\x96\xef\xbc\x8c\xe5\x8e\x86\xe5\x8f\xb2\xe7\xad\x89\xe5\x90\x84\xe4\xb8\xaa\xe5\xb1\x82\xe9\x9d\xa2\xe7\x9a\x84\xe7\x9f\xa5\xe8\xaf\x86\xe5\x92\x8c\xe6\x95\x85\xe4\xba\x8b\xef\xbc\x8c\xe5\xae\x83\xe4\xbb\xac\xe5\x90\x8c\xe6\x97\xb6\xe4\xb9\x9f\xe4\xbc\x9a\xe8\xbe\x90\xe5\xb0\x84\xe5\x88\xb0\xe4\xba\x8c\xe6\xac\xa1\xe5\x85\x83\xe7\x94\x9a\xe8\x87\xb3\xe7\x94\xb5\xe5\xbd\xb1\xe7\x9a\x84\xe9\xa2\x86\xe5\x9f\x9f\xef\xbc\x8c\xe8\xbf\x99\xe4\xba\x9b\xe5\x86\x85\xe5\xae\xb9\xe9\x9d\x9e\xe5\xb8\xb8\xe5\x80\xbc\xe5\xbe\x97\xe5\x88\x86\xe4\xba\xab\xe7\xbb\x99\xe7\x83\xad\xe7\x88\xb1\xe6\xb8\xb8\xe6\x88\x8f\xe7\x9a\x84\xe6\x82\xa8\xe3\x80\x82"\n    }\n\n    override fun isSearchable(): Boolean {\n        return false\n    }\n\n    override fun search(keywords: String, page: Int): Pair<List<Book>, Int> {\n        return Pair(emptyList(), 1)\n    }\n\n    override fun getAudioUrlExtractor(): AudioUrlExtractor {\n        return AudioUrlDirectExtractor\n    }\n\n    override fun getCategoryMenus(): List<CategoryMenu> {\n        val menu1 = CategoryMenu(\n            "\xe6\x9c\xba\xe6\xa0\xb8", listOf(\n                CategoryTab("\xe7\x94\xb5\xe5\x8f\xb0", "https://www.gcores.com/radios?page=1"),\n                CategoryTab("\xe6\x92\xad\xe5\x8d\x95", "https://www.gcores.com/gapi/v1/albums?page[limit]=12&page[offset]=0&sort=-updated-at&filter[is-on-sale]=0"),\n            )\n        )\n\n        return listOf(menu1)\n    }\n\n    override fun getCategoryList(url: String): Category {\n        if (url.contains("/radios")) {\n            val doc = Jsoup.connect(url).config(false).get()\n            val totalPage = 132\n            val currentPage = doc.selectFirst(".pagination_item.is_active > a").text().toInt()\n            val nextUrl = doc.selectFirst(".pagination_next > a").absUrl("href")\n\n            val list = ArrayList<Book>()\n            val elementList = doc.select(".original-radio")\n            elementList.forEach { element ->\n                val coverUrl = element.selectFirst(".original_imgArea").attr("style")\n                    .replace("background-image:url(", "")\n                    .replace(")", "")\n                val bookUrl = element.selectFirst(".am_card_inner > a").absUrl("href")\n                val title = element.selectFirst(".am_card_title").text()\n                val author = ""\n                val artist = ""\n                val status = element.selectFirst(".avatar_text > h3").text()\n                list.add(Book(coverUrl, bookUrl, title, author, artist).apply {\n                    this.status = status\n                    this.sourceId = getSourceId()\n                })\n            }\n\n            return Category(list, currentPage, totalPage, url, nextUrl)\n        } else {\n            val jsonObject = Fuel.get(url).header(headers).responseJson().third.get().obj()\n            val totalPage = ceil(jsonObject.getJSONObject("meta").getInt("record-count") / 12.0).toInt()\n            val currentPage = Regex("\\\\[offset\\\\]=(\\\\d+)").find(url)!!.groupValues[1].toInt() / 12 + 1\n            var nextUrl = ""\n            if (currentPage < totalPage) {\n                nextUrl = "https://www.gcores.com/gapi/v1/albums?page[limit]=12&page[offset]=${currentPage * 12}&sort=-updated-at&filter[is-on-sale]=0"\n            }\n\n            val list = ArrayList<Book>()\n            val results = jsonObject.getJSONArray("data")\n            (0 until results.length()).forEach {\n                val result = results.getJSONObject(it)\n                val id = result.getString("id")\n                val attributes = result.getJSONObject("attributes")\n                val coverUrl = "https://image.gcores.com/${attributes.getString("cover")}?x-oss-process=image/resize,limit_1,m_fill,w_360,h_360/quality,q_90"\n                val bookUrl = "https://www.gcores.com/gapi/v1/albums/${id}/published-radios?page[limit]=100&page[offset]=0&include=media,category,albums"\n                val author = ""\n                val artist = ""\n                val title = attributes.getString("title")\n                list.add(Book(coverUrl, bookUrl, title, author, artist).apply {\n                    this.sourceId = getSourceId()\n                })\n            }\n            return Category(list, currentPage, totalPage, url, nextUrl)\n        }\n    }\n\n    override fun getBookDetailInfo(bookUrl: String, loadEpisodes: Boolean, loadFullPages: Boolean): BookDetail {\n        val episodes = ArrayList<Episode>()\n        if (loadEpisodes) {\n            if (bookUrl.contains("/radios")) {\n                val doc = Jsoup.connect(bookUrl).config(false).get()\n                val downloadUrl = doc.selectFirst("svg[data-icon=download]").parent().absUrl("href")\n                Episode("1", downloadUrl).apply {\n                    episodes.add(this)\n                }\n            } else {\n                val jsonObject = Fuel.get(bookUrl).header(headers).responseJson().third.get().obj()\n                val data = jsonObject.getJSONArray("data")\n                val included = jsonObject.getJSONArray("included")\n                val count = jsonObject.getJSONObject("meta").getInt("record-count")\n\n                val audioUrlMap = HashMap<String, String>()\n                (0 until included.length()).forEach {\n                    val jsonObj = included.getJSONObject(it)\n                    val id = jsonObj.getString("id")\n                    val attributes = jsonObj.getJSONObject("attributes")\n                    if (attributes.has("audio")) {\n                        val audio = attributes.getString("audio")\n                        val audioUrl = if (audio.contains("http")) {\n                            audio\n                        } else {\n                            "https://alioss.gcores.com/uploads/audio/${audio}"\n                        }\n                        audioUrlMap[id] = audioUrl\n                    }\n                }\n                (0 until data.length()).forEach {\n                    try {\n                        val jsonObj = data.getJSONObject(it)\n                        val id = jsonObj.getString("id")\n                        val attributes = jsonObj.getJSONObject("attributes")\n                        val title = attributes.getString("title")\n                        val mediaId = jsonObj.getJSONObject("relationships")\n                            .getJSONObject("media")\n                            .getJSONObject("data")\n                            .getString("id")\n                        Episode(title, audioUrlMap[mediaId]!!).apply {\n                            episodes.add(this)\n                        }\n                    } catch (e: Exception) {\n                        e.printStackTrace()\n                    }\n                }\n            }\n        }\n        return BookDetail(episodes)\n    }\n}'