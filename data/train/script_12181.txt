b'package com.github.eprendre.sources_by_eprendre\n\nimport com.github.eprendre.tingshu.extensions.config\nimport com.github.eprendre.tingshu.extensions.getMobileUA\nimport com.github.eprendre.tingshu.sources.*\nimport com.github.eprendre.tingshu.utils.*\nimport com.github.kittinunf.fuel.Fuel\nimport com.github.kittinunf.fuel.json.responseJson\nimport com.google.gson.Gson\nimport org.jsoup.Jsoup\nimport java.net.URLEncoder\nimport kotlin.math.ceil\n\nobject ZhongBanYouSheng : TingShu() {\n    override fun getSourceId(): String {\n        return "e6b1890ef87e4f3682c68de3359a1397"\n    }\n\n    override fun getUrl(): String {\n        return "http://guotu.audio.3eol.com.cn"\n    }\n\n    override fun getName(): String {\n        return "\xe4\xb8\xad\xe7\x89\x88\xe6\x9c\x89\xe5\xa3\xb0\xe4\xb9\xa6"\n    }\n\n    override fun getDesc(): String {\n        return "\xe6\x8e\xa8\xe8\x8d\x90\xe6\x8c\x87\xe6\x95\xb0:3\xe6\x98\x9f \xe2\xad\x90\xe2\xad\x90\xe2\xad\x90\\n\xe6\x9c\x89\xe4\xb8\x8d\xe5\xb0\x91\xe5\x87\xba\xe7\x89\x88\xe4\xb9\xa6"\n    }\n\n    override fun isWebViewNotRequired(): Boolean {\n        return true\n    }\n\n    override fun search(keywords: String, page: Int): Pair<List<Book>, Int> {\n        val encodedKeywords = URLEncoder.encode(keywords, "utf-8")\n        val url = "http://guotu.audio.3eol.com.cn/Mobile/GetBooks?Resid=17&catid=0&pageIndex=$page&pageSize=9&keyword=$encodedKeywords"\n        val result = Fuel.get(url)\n            .header("X-Requested-With" to "XMLHttpRequest")\n            .header("User-Agent" to getMobileUA())\n            .responseJson()\n        val jsonObject = result.third.get().obj()\n        val body = jsonObject.getJSONObject("body")\n        val totalAudio = body.getInt("totalAudio")\n        val totalPage = ceil(totalAudio / 9.0).toInt()\n\n        val audioList = body.getJSONArray("AudioList")\n\n        val list = ArrayList<Book>()\n        (0 until audioList.length()).forEach { index ->\n            val audioObj = audioList.getJSONObject(index)\n            try {\n                val coverUrl = audioObj.getString("fullCoverImagePath")\n                val bookUrl = "http://guotu.audio.3eol.com.cn/Mobile/Reader?id=${audioObj.getInt("id")}"\n                val title = audioObj.getString("name")\n                val author = audioObj.getString("publisher")\n                val status = audioObj.getString("pubdate")\n                val artist = "\xe4\xbd\x9c\xe8\x80\x85: ${audioObj.getString("author").replace("\\\\n", "")}"\n                val intro = audioObj.getString("summary").replace("\\\\n", "").replace("<.+?>".toRegex(), "")\n                list.add(Book(coverUrl, bookUrl, title, author, artist).apply {\n                    this.intro = intro\n                    this.status = status\n                    this.sourceId = getSourceId()\n                })\n            } catch (e: Exception) {\n                e.printStackTrace()\n            }\n        }\n\n        return Pair(list, totalPage)\n    }\n\n    override fun getBookDetailInfo(bookUrl: String, loadEpisodes: Boolean, loadFullPages: Boolean): BookDetail {\n        val doc = Jsoup.connect(bookUrl).config().get()\n\n        val script = doc.select("script").first { it.html().contains("audio.audioSrcArr = ") }.html().trim()\n        val srcJson = Regex("audioSrcArr = (\\\\[.+])").find(script)!!.groupValues[1]\n        val titleJson = Regex("audioTitleArr = (\\\\[.+])").find(script)!!.groupValues[1]\n        val srcArray = Gson().fromJson(srcJson, Array<String>::class.java)\n        val titleArray = Gson().fromJson(titleJson, Array<String>::class.java)\n        val episodes = ArrayList<Episode>()\n        titleArray.forEachIndexed  { index, title ->\n            val episode = Episode(title, "http://ebook.3eol.com.cn${srcArray[index]}")\n            episodes.add(episode)\n        }\n        episodes.sortWith(EpisodeComparator())\n        return BookDetail(episodes, "")\n    }\n\n    override fun getAudioUrlExtractor(): AudioUrlExtractor {\n        return AudioUrlDirectExtractor\n    }\n\n    override fun getCategoryMenus(): List<CategoryMenu> {\n        val menu1 = CategoryMenu(\n            "\xe9\xa6\x96\xe9\xa1\xb5", listOf(\n//                CategoryTab("\xe5\xa4\x96\xe5\x9b\xbd\xe6\x96\x87\xe5\xad\xa6", "http://guotu.audio.3eol.com.cn/Mobile/GetBooks?ResID=17&catid=1&pageIndex=1&pageSize=18"),\n                CategoryTab("\xe6\x8e\xa8\xe7\x90\x86\xe6\x82\xac\xe7\x96\x91", "http://guotu.audio.3eol.com.cn/Mobile/GetBooks?ResID=17&catid=2&pageIndex=1&pageSize=18"),\n                CategoryTab("\xe6\x97\xb6\xe4\xba\x8b\xe6\x88\x98\xe4\xba\x89", "http://guotu.audio.3eol.com.cn/Mobile/GetBooks?ResID=17&catid=3&pageIndex=1&pageSize=18"),\n                CategoryTab("\xe5\xae\x98\xe5\x9c\xba\xe5\x95\x86\xe6\x88\x98", "http://guotu.audio.3eol.com.cn/Mobile/GetBooks?ResID=17&catid=4&pageIndex=1&pageSize=18"),\n                CategoryTab("\xe5\xbd\x93\xe4\xbb\xa3\xe6\x96\x87\xe5\xad\xa6", "http://guotu.audio.3eol.com.cn/Mobile/GetBooks?ResID=17&catid=5&pageIndex=1&pageSize=18"),\n                CategoryTab("\xe7\xba\xaa\xe5\xae\x9e\xe6\x96\x87\xe5\xad\xa6", "http://guotu.audio.3eol.com.cn/Mobile/GetBooks?ResID=17&catid=6&pageIndex=1&pageSize=18"),\n                CategoryTab("\xe9\x83\xbd\xe5\xb8\x82\xe7\x94\x9f\xe6\xb4\xbb", "http://guotu.audio.3eol.com.cn/Mobile/GetBooks?ResID=17&catid=7&pageIndex=1&pageSize=18"),\n                CategoryTab("\xe4\xba\xba\xe6\x96\x87\xe6\x97\x85\xe6\xb8\xb8", "http://guotu.audio.3eol.com.cn/Mobile/GetBooks?ResID=17&catid=8&pageIndex=1&pageSize=18"),\n                CategoryTab("\xe4\xba\xba\xe7\x89\xa9\xe4\xbc\xa0\xe8\xae\xb0", "http://guotu.audio.3eol.com.cn/Mobile/GetBooks?ResID=17&catid=9&pageIndex=1&pageSize=18"),\n                CategoryTab("\xe8\xaf\x84\xe8\xae\xba\xe8\xae\xbf\xe8\xb0\x88", "http://guotu.audio.3eol.com.cn/Mobile/GetBooks?ResID=17&catid=10&pageIndex=1&pageSize=18"),\n                CategoryTab("\xe5\x84\xbf\xe7\xab\xa5\xe6\x96\x87\xe5\xad\xa6", "http://guotu.audio.3eol.com.cn/Mobile/GetBooks?ResID=17&catid=11&pageIndex=1&pageSize=18"),\n                CategoryTab("\xe5\x8e\x86\xe5\x8f\xb2\xe5\x86\x9b\xe4\xba\x8b", "http://guotu.audio.3eol.com.cn/Mobile/GetBooks?ResID=17&catid=12&pageIndex=1&pageSize=18"),\n                CategoryTab("\xe6\x83\x85\xe6\x84\x9f\xe6\x95\x85\xe4\xba\x8b", "http://guotu.audio.3eol.com.cn/Mobile/GetBooks?ResID=17&catid=13&pageIndex=1&pageSize=18"),\n                CategoryTab("\xe8\x81\x8c\xe5\x9c\xba\xe5\x8a\xb1\xe5\xbf\x97", "http://guotu.audio.3eol.com.cn/Mobile/GetBooks?ResID=17&catid=14&pageIndex=1&pageSize=18"),\n                CategoryTab("\xe5\xbd\xb1\xe8\xa7\x86\xe5\x8e\x9f\xe8\x91\x97", "http://guotu.audio.3eol.com.cn/Mobile/GetBooks?ResID=17&catid=15&pageIndex=1&pageSize=18"),\n                CategoryTab("\xe7\x94\x9f\xe6\xb4\xbb\xe7\x99\xbe\xe7\xa7\x91", "http://guotu.audio.3eol.com.cn/Mobile/GetBooks?ResID=17&catid=16&pageIndex=1&pageSize=18")\n            )\n        )\n        return listOf(menu1)\n    }\n\n    override fun getCategoryList(url: String): Category {\n        val result = Fuel.get(url)\n            .header("X-Requested-With" to "XMLHttpRequest")\n            .header("User-Agent" to getMobileUA())\n            .responseJson()\n        val jsonObject = result.third.get().obj()\n        val body = jsonObject.getJSONObject("body")\n        val totalAudio = body.getInt("totalAudio")\n        val totalPage = ceil(totalAudio / 9.0).toInt()\n        val currentPage = Regex("pageIndex=(\\\\d+)").find(url)?.groupValues?.get(1)?.toInt() ?: 0\n        val nextUrl = url.replace("pageIndex=(\\\\d+)".toRegex(), "pageIndex=${currentPage + 1}")\n\n        val audioList = body.getJSONArray("AudioList")\n\n        val list = ArrayList<Book>()\n        (0 until audioList.length()).forEach { index ->\n            val audioObj = audioList.getJSONObject(index)\n            try {\n                val coverUrl = audioObj.getString("fullCoverImagePath")\n                val bookUrl = "http://guotu.audio.3eol.com.cn/Mobile/Reader?id=${audioObj.getInt("id")}"\n                val title = audioObj.getString("name")\n                val author = audioObj.getString("publisher")\n                val status = audioObj.getString("pubdate")\n                val artist = "\xe4\xbd\x9c\xe8\x80\x85: ${audioObj.getString("author").replace("\\\\n", "")}"\n                val intro = audioObj.getString("summary").replace("<.+?>|\\\\\\\\n".toRegex(), "")\n                list.add(Book(coverUrl, bookUrl, title, author, artist).apply {\n                    this.intro = intro\n                    this.status = status\n                    this.sourceId = getSourceId()\n                })\n            } catch (e: Exception) {\n                e.printStackTrace()\n            }\n        }\n\n        return Category(list, currentPage, totalPage, url, nextUrl)\n    }\n\n    class EpisodeComparator : Comparator<Episode> {\n        private fun isDigit(ch: Char): Boolean {\n            return ch.toInt() in 48..57\n        }\n\n        private fun getChunk(s: String, slength: Int, _marker: Int): String {\n            var marker = _marker\n            val chunk = StringBuilder()\n            var c = s[marker]\n            chunk.append(c)\n            marker++\n            if (isDigit(c)) {\n                while (marker < slength) {\n                    c = s[marker]\n                    if (!isDigit(c)) break\n                    chunk.append(c)\n                    marker++\n                }\n            } else {\n                while (marker < slength) {\n                    c = s[marker]\n                    if (isDigit(c)) break\n                    chunk.append(c)\n                    marker++\n                }\n            }\n            return chunk.toString()\n        }\n\n        override fun compare(e1: Episode, e2: Episode): Int {\n            val s1 = e1.title\n            val s2 = e2.title\n            var thisMarker = 0\n            var thatMarker = 0\n            val s1Length = s1.length\n            val s2Length = s2.length\n            while (thisMarker < s1Length && thatMarker < s2Length) {\n                val thisChunk = getChunk(s1, s1Length, thisMarker)\n                thisMarker += thisChunk.length\n                val thatChunk = getChunk(s2, s2Length, thatMarker)\n                thatMarker += thatChunk.length\n\n                // If both chunks contain numeric characters, sort them numerically\n                var result = 0\n                if (isDigit(thisChunk[0]) && isDigit(thatChunk[0])) {\n                    result = thisChunk.toInt().compareTo(thatChunk.toInt())\n                } else {\n                    result = thisChunk.compareTo(thatChunk)\n                }\n                if (result != 0) return result\n            }\n            return s1Length - s2Length\n        }\n    }\n}'