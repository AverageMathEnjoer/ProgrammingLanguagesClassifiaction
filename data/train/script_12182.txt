b'package icu.nullptr.twifucker.hook\n\nimport com.github.kyuubiran.ezxhelper.ClassUtils.loadClass\nimport com.github.kyuubiran.ezxhelper.HookFactory.`-Static`.createHook\nimport com.github.kyuubiran.ezxhelper.Log\nimport com.github.kyuubiran.ezxhelper.finders.FieldFinder\nimport com.github.kyuubiran.ezxhelper.finders.MethodFinder\nimport icu.nullptr.twifucker.afterMeasure\nimport icu.nullptr.twifucker.modulePrefs\n\nobject SensitiveMediaWarningHook : BaseHook() {\n    override val name: String\n        get() = "SensitiveMediaWarningHook"\n\n    override fun init() {\n        if (!modulePrefs.getBoolean("disable_sensitive_media_warning", false)) return\n\n        val jsonSensitiveMediaWarningClass =\n            loadClass("com.twitter.model.json.core.JsonSensitiveMediaWarning")\n        val jsonSensitiveMediaWarningMapperClass =\n            loadClass("com.twitter.model.json.core.JsonSensitiveMediaWarning\\$\\$JsonObjectMapper")\n\n        val warningFields =\n            FieldFinder.fromClass(jsonSensitiveMediaWarningClass).filterByType(Boolean::class.java)\n\n        MethodFinder.fromClass(jsonSensitiveMediaWarningMapperClass).filterByName("_parse")\n            .filterByReturnType(jsonSensitiveMediaWarningClass).first().createHook {\n                afterMeasure(name) { param ->\n                    param.result ?: return@afterMeasure\n                    var count = 0\n                    warningFields.forEach { field ->\n                        field.get(param.result).let { value ->\n                            if ((value as Boolean)) {\n                                field.set(param.result, false)\n                                count++\n                            }\n                        }\n                    }\n                    if (count > 0) {\n                        Log.d("Set $count sensitive media warning field(s) to false")\n                    }\n                }\n            }\n    }\n}\n'