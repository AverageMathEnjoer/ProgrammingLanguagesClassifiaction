b'\xef\xbb\xbf//  Copyright 2019 Google Inc. All Rights Reserved.\n//\n//  Licensed under the Apache License, Version 2.0 (the "License");\n//  you may not use this file except in compliance with the License.\n//  You may obtain a copy of the License at\n//\n//  http://www.apache.org/licenses/LICENSE-2.0\n//\n//  Unless required by applicable law or agreed to in writing, software\n//  distributed under the License is distributed on an "AS IS" BASIS,\n//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n//  See the License for the specific language governing permissions and\n//  limitations under the License.\n\nusing System;\n\nnamespace Rubeus.Ndr.Marshal\n{\n    /// <summary>\n    /// A class which represents an embedded pointer.\n    /// </summary>\n    /// <typeparam name="T">The underlying type.</typeparam>\n    public class NdrEmbeddedPointer<T>\n    {\n        private T _value;\n\n        private NdrEmbeddedPointer(T value)\n        {\n            _value = value;\n        }\n\n        /// <summary>\n        /// Operator to convert from a value to an embedded pointer.\n        /// </summary>\n        /// <param name="value">The value to point to.</param>\n        public static implicit operator NdrEmbeddedPointer<T>(T value)\n        {\n            return new NdrEmbeddedPointer<T>(value);\n        }\n\n        /// <summary>\n        /// Operator to convert from an embedded pointer to a value.\n        /// </summary>\n        /// <param name="pointer">The embedded pointer.</param>\n        public static implicit operator T (NdrEmbeddedPointer<T> pointer)\n        {\n            if (pointer == null)\n            {\n                return default;\n            }\n            return pointer._value;\n        }\n\n        /// <summary>\n        /// Overridden ToString method.\n        /// </summary>\n        /// <returns>The string form of the value.</returns>\n        public override string ToString()\n        {\n            return _value.ToString();\n        }\n\n        /// <summary>\n        /// Get the value from the embedded pointer.\n        /// </summary>\n        /// <returns>The value of the pointer.</returns>\n        public T GetValue()\n        {\n            return _value;\n        }\n\n        internal static Tuple<NdrEmbeddedPointer<T>, Action> CreateDeferredReader(Func<T> unmarshal_func)\n        {\n            NdrEmbeddedPointer<T> ret = new NdrEmbeddedPointer<T>(default);\n            return Tuple.Create(ret, new Action(() => ret._value = unmarshal_func()));\n        }\n\n        internal static Tuple<NdrEmbeddedPointer<T>, Action> CreateDeferredReader<U>(Func<U, T> unmarshal_func, U arg)\n        {\n            NdrEmbeddedPointer<T> ret = new NdrEmbeddedPointer<T>(default);\n            return Tuple.Create(ret, new Action(() => ret._value = unmarshal_func(arg)));\n        }\n\n        internal static Tuple<NdrEmbeddedPointer<T>, Action> CreateDeferredReader<U, V>(Func<U, V, T> unmarshal_func, U arg, V arg2)\n        {\n            NdrEmbeddedPointer<T> ret = new NdrEmbeddedPointer<T>(default);\n            return Tuple.Create(ret, new Action(() => ret._value = unmarshal_func(arg, arg2)));\n        }\n    }\n}\n'