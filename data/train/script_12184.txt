b"-- |\n-- Copyright  : (c) Ivan Perez and Manuel Baerenz, 2016\n-- License    : BSD3\n-- Maintainer : ivan.perez@keera.co.uk\n--\n-- 'MSF's with a 'Reader' monadic layer.\n--\n-- This module contains functions to work with 'MSF's that include a 'Reader'\n-- monadic layer. This includes functions to create new 'MSF's that include an\n-- additional layer, and functions to flatten that layer out of the 'MSF`'s\n-- transformer stack.\nmodule Control.Monad.Trans.MSF.Reader\n    ( module Control.Monad.Trans.Reader\n    -- * 'Reader' 'MSF' running and wrapping.\n    , readerS\n    , runReaderS\n    , runReaderS_\n    )\n  where\n\n-- External imports\nimport Control.Arrow              (arr, (>>>))\nimport Control.Monad.Trans.Reader hiding (liftCallCC, liftCatch)\n\n-- Internal imports\nimport Data.MonadicStreamFunction (MSF, morphGS)\n\n-- * Reader 'MSF' running and wrapping\n\n-- | Build an 'MSF' in the 'Reader' monad from one that takes the reader\n-- environment as an extra input. This is the opposite of 'runReaderS'.\nreaderS :: Monad m => MSF m (r, a) b -> MSF (ReaderT r m) a b\nreaderS = morphGS $ \\f a -> ReaderT $ \\r -> f (r, a)\n\n-- | Build an 'MSF' that takes an environment as an extra input from one on the\n-- 'Reader' monad. This is the opposite of 'readerS'.\nrunReaderS :: Monad m => MSF (ReaderT r m) a b -> MSF m (r, a) b\nrunReaderS = morphGS $ \\f (r, a) -> runReaderT (f a) r\n\n-- | Build an 'MSF' /function/ that takes a fixed environment as additional\n-- input, from an MSF in the 'Reader' monad.\nrunReaderS_ :: Monad m => MSF (ReaderT s m) a b -> s -> MSF m a b\nrunReaderS_ msf s = arr (\\a -> (s, a)) >>> runReaderS msf\n"