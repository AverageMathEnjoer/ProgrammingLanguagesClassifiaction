b'{-# LANGUAGE MultiParamTypeClasses #-}\n\n-- ! BUILD_OPTIONS: -fglasgow-exts -XTypeFamilies -XOverloadedStrings -XPartialTypeSignatures -XTypeApplications -XStandaloneDeriving -XFlexibleInstances -XMultiParamTypeClasses -XDeriveGeneric -XFlexibleContexts -fno-warn-partial-type-signatures -i$$BEAM_SOURCE$$/beam-sqlite/examples/\n-- ! BUILD_DIR: beam-sqlite/examples/\nmodule Main where\n\nimport Database.Beam\nimport Database.Beam.Backend.Types\nimport qualified Database.Beam.Query.Adhoc as Adhoc\nimport qualified Database.Beam.Backend.SQL.BeamExtensions as BeamExtensions\nBEAM_MODULE_IMPORT\n\nimport Control.Monad\nimport Control.Exception\n\nimport Data.IORef\nimport Data.Monoid ((<>))\nimport Data.Scientific (Scientific)\nimport Data.Int\nimport Data.Text\n\nimport Chinook.Schema\n\ndata BeamDone = BeamDone\n  deriving (Show)\ninstance Exception BeamDone\n\nBEAM_BACKEND_EXTRA\n\nexampleQuery :: (String -> BEAM_BACKEND_MONAD ()) -> BEAM_BACKEND_MONAD ()\nexampleQuery putStrLn = do\n  BEAM_PLACEHOLDER\n\nmain :: IO ()\nmain =\n  do\n     BEAM_OPEN_DATABASE\n\n     stmts <- newIORef id\n\n     let onStmt s = modifyIORef stmts (. (s:))\n\n         record :: BEAM_BACKEND_MONAD a -> IO a\n         record a = BEAM_WITH_DATABASE_DEBUG (onStmt . (++ ";")) chinook a\n\n     handle (\\BeamDone -> pure ()) $\n       docsWithTransaction chinook $ do\n         record $ exampleQuery (liftIO . onStmt . ("-- Output: " ++))\n         throwIO BeamDone\n\n     mkStmtList <- readIORef stmts\n     let stmtList = mkStmtList []\n\n     forM_ stmtList $ \\stmt -> do\n       putStrLn stmt\n'