b'/*\nA simple sound library for CSE 20211 by Douglas Thain (dthain@nd.edu).\nThis work is made available under the Creative Commons Attribution license.\nhttps://creativecommons.org/licenses/by/4.0/\n\nFor course assignments, you should not change this file.\nFor complete documentation, see:\nhttp://www.nd.edu/~dthain/courses/cse20211/fall2013/wavfile\n*/\n//Changes for integration in the UABE AudioClip plugin:\n// - Use IAssetsWriter instead of FILE* as an abstraction.\n// - Allow different formats based on WAVFILE_SOUND_FORMAT.\n\n#include "wavfile.h"\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#pragma pack(push, 1)\nstruct wavfile_header {\n\tchar      riff_tag[4];\n\tuint32_t  riff_length;\n\tchar      wave_tag[4];\n\tchar      fmt_tag[4];\n\tuint32_t  fmt_length;\n\tuint16_t  audio_format;\n\tuint16_t  num_channels;\n\tuint32_t  sample_rate;\n\tuint32_t  byte_rate;\n\tuint16_t  block_align;\n\tuint16_t  bits_per_sample;\n\tchar      data_tag[4];\n\tuint32_t  data_length;\n};\n#pragma pack(pop)\nenum EnumWaveFormats\n{\n\tWaveFmt_PCM=1,\n\tWaveFmt_FLOAT=3,\n\tWaveFmt_IMAADPCM=17,\n\tWaveFMT_MP1_2=80,\n\tWaveFMT_MP3=85,\n};\n\nIAssetsWriter *wavfile_open( IAssetsWriter *file, WAVFILE_SOUND_FORMAT format, uint32_t sampleRate, uint32_t channelCount )\n{\n\tstruct wavfile_header header;\n\tint bits_per_sample;\n\tswitch (format)\n\t{\n\t\tcase WAVFILE_SOUND_FORMAT::PCM_8bit:\n\t\t\tbits_per_sample = 8;\n\t\t\theader.audio_format = WaveFmt_PCM;\n\t\t\tbreak;\n\t\tcase WAVFILE_SOUND_FORMAT::PCM_16bit:\n\t\t\tbits_per_sample = 16;\n\t\t\theader.audio_format = WaveFmt_PCM;\n\t\t\tbreak;\n\t\tcase WAVFILE_SOUND_FORMAT::PCM_24bit:\n\t\t\tbits_per_sample = 24;\n\t\t\theader.audio_format = WaveFmt_PCM;\n\t\t\tbreak;\n\t\tcase WAVFILE_SOUND_FORMAT::PCM_32bit:\n\t\t\tbits_per_sample = 32;\n\t\t\theader.audio_format = WaveFmt_PCM;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn NULL;\n\t}\n\n\n\tstrncpy(header.riff_tag,"RIFF",4);\n\tstrncpy(header.wave_tag,"WAVE",4);\n\tstrncpy(header.fmt_tag,"fmt ",4);\n\tstrncpy(header.data_tag,"data",4);\n\n\theader.riff_length = 0;\n\theader.fmt_length = 16;\n\theader.num_channels = (uint16_t)channelCount;\n\theader.sample_rate = sampleRate;\n\theader.block_align = channelCount*((bits_per_sample+7)/8);\n\theader.byte_rate = sampleRate*header.block_align;\n\theader.bits_per_sample = bits_per_sample;\n\theader.data_length = 0;\n\n\tfile->Write(0x2C, &header);\n\tfile->Flush();\n\n\treturn file;\n}\n\nvoid wavfile_write( IAssetsWriter *file, void *data, uint32_t byteLen )\n{\n\tfile->Write(byteLen, data);\n}\n\nvoid wavfile_close( IAssetsWriter *file )\n{\n\tQWORD file_length = 0;\n\tfile->Tell(file_length);\n\tif (file_length < 0x7FFFFFFF)\n\t{\n\t\tuint32_t data_length = file_length - sizeof(struct wavfile_header);\n\t\tif (data_length < file_length)\n\t\t{\n\t\t\tfile->Seek(AssetsSeek_Begin, sizeof(struct wavfile_header) - sizeof(int));\n\t\t\tfile->Write(sizeof(data_length), &data_length);\n\n\t\t\tuint32_t riff_length = file_length - 8;\n\t\t\tfile->Seek(AssetsSeek_Begin, 4);\n\t\t\tfile->Write(sizeof(riff_length), &riff_length);\n\t\t}\n\t}\n}\n'