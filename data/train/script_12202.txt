b'package com.db.williamchart.view\n\nimport android.content.Context\nimport android.content.res.TypedArray\nimport android.graphics.Color\nimport android.graphics.Paint\nimport android.graphics.Path\nimport android.util.AttributeSet\nimport androidx.annotation.DrawableRes\nimport androidx.annotation.Size\nimport com.db.williamchart.ChartContract\nimport com.db.williamchart.R\nimport com.db.williamchart.animation.NoAnimation\nimport com.db.williamchart.data.configuration.ChartConfiguration\nimport com.db.williamchart.data.DataPoint\nimport com.db.williamchart.data.Frame\nimport com.db.williamchart.data.Label\nimport com.db.williamchart.data.configuration.LineChartConfiguration\nimport com.db.williamchart.data.Paddings\nimport com.db.williamchart.data.toLinearGradient\nimport com.db.williamchart.data.toRect\nimport com.db.williamchart.extensions.centerAt\nimport com.db.williamchart.extensions.getDrawable\nimport com.db.williamchart.extensions.obtainStyledAttributes\nimport com.db.williamchart.extensions.toLinePath\nimport com.db.williamchart.extensions.toPx\nimport com.db.williamchart.extensions.toSmoothLinePath\nimport com.db.williamchart.renderer.LineChartRenderer\n\nclass LineChartView @JvmOverloads constructor(\n    context: Context,\n    attrs: AttributeSet? = null,\n    defStyleAttr: Int = 0\n) :\n    AxisChartView(context, attrs, defStyleAttr),\n    ChartContract.LineView {\n\n    @Suppress("MemberVisibilityCanBePrivate")\n    var smooth: Boolean = defaultSmooth\n\n    @Suppress("MemberVisibilityCanBePrivate")\n    var lineThickness: Float = defaultLineThickness\n\n    @Suppress("MemberVisibilityCanBePrivate")\n    var fillColor: Int = defaultFillColor\n\n    @Suppress("MemberVisibilityCanBePrivate")\n    var lineColor: Int = defaultLineColor\n\n    @Size(2)\n    @Suppress("MemberVisibilityCanBePrivate")\n    var gradientFillColors: IntArray = intArrayOf(0, 0)\n\n    @DrawableRes\n    @Suppress("MemberVisibilityCanBePrivate")\n    var pointsDrawableRes = -1\n\n    override val chartConfiguration: ChartConfiguration\n        get() =\n            LineChartConfiguration(\n                width = measuredWidth,\n                height = measuredHeight,\n                paddings = Paddings(\n                    paddingLeft.toFloat(),\n                    paddingTop.toFloat(),\n                    paddingRight.toFloat(),\n                    paddingBottom.toFloat()\n                ),\n                axis = axis,\n                labelsSize = labelsSize,\n                lineThickness = lineThickness,\n                scale = scale,\n                pointsDrawableWidth = if (pointsDrawableRes != -1)\n                    getDrawable(pointsDrawableRes)!!.intrinsicWidth else -1,\n                pointsDrawableHeight = if (pointsDrawableRes != -1)\n                    getDrawable(pointsDrawableRes)!!.intrinsicHeight else -1,\n                fillColor = fillColor,\n                gradientFillColors = gradientFillColors,\n                labelsFormatter = labelsFormatter,\n                clickableRadius = defaultClickableArea.toPx()\n            )\n\n    init {\n        renderer = LineChartRenderer(this, painter, NoAnimation())\n        handleAttributes(obtainStyledAttributes(attrs, R.styleable.LineChartAttrs))\n        handleEditMode()\n    }\n\n    override fun drawLine(points: List<DataPoint>) {\n\n        val linePath =\n            if (!smooth) points.toLinePath()\n            else points.toSmoothLinePath(defaultSmoothFactor)\n\n        painter.prepare(color = lineColor, style = Paint.Style.STROKE, strokeWidth = lineThickness)\n        canvas.drawPath(linePath, painter.paint)\n    }\n\n    override fun drawLineBackground(innerFrame: Frame, points: List<DataPoint>) {\n\n        val linePath =\n            if (!smooth) points.toLinePath()\n            else points.toSmoothLinePath(defaultSmoothFactor)\n        val backgroundPath = createBackgroundPath(linePath, points, innerFrame.bottom)\n\n        if (fillColor != 0)\n            painter.prepare(color = fillColor, style = Paint.Style.FILL)\n        else\n            painter.prepare(\n                shader = innerFrame.toLinearGradient(gradientFillColors),\n                style = Paint.Style.FILL\n            )\n\n        canvas.drawPath(backgroundPath, painter.paint)\n    }\n\n    override fun drawLabels(xLabels: List<Label>) {\n        painter.prepare(textSize = labelsSize, color = labelsColor, font = labelsFont)\n        labels.draw(canvas, painter.paint, xLabels)\n    }\n\n    override fun drawGrid(\n        innerFrame: Frame,\n        xLabelsPositions: List<Float>,\n        yLabelsPositions: List<Float>\n    ) {\n        grid.draw(canvas, innerFrame, xLabelsPositions, yLabelsPositions)\n    }\n\n    override fun drawPoints(points: List<DataPoint>) {\n        if (pointsDrawableRes != -1) {\n            points.forEach { dataPoint ->\n                getDrawable(pointsDrawableRes)?.let {\n                    it.centerAt(dataPoint.screenPositionX, dataPoint.screenPositionY)\n                    it.draw(canvas)\n                }\n            }\n        }\n    }\n\n    override fun drawDebugFrame(frames: List<Frame>) {\n        painter.prepare(color = -0x1000000, style = Paint.Style.STROKE)\n        frames.forEach { canvas.drawRect(it.toRect(), painter.paint) }\n    }\n\n    private fun createBackgroundPath(\n        path: Path,\n        points: List<DataPoint>,\n        innerFrameBottom: Float\n    ): Path {\n\n        val res = Path(path)\n\n        res.lineTo(points.last().screenPositionX, innerFrameBottom)\n        res.lineTo(points.first().screenPositionX, innerFrameBottom)\n        res.close()\n\n        return res\n    }\n\n    private fun handleAttributes(typedArray: TypedArray) {\n        typedArray.apply {\n            lineColor = getColor(R.styleable.LineChartAttrs_chart_lineColor, lineColor)\n            lineThickness =\n                getDimension(R.styleable.LineChartAttrs_chart_lineThickness, lineThickness)\n            smooth = getBoolean(R.styleable.LineChartAttrs_chart_smoothLine, smooth)\n            pointsDrawableRes =\n                getResourceId(R.styleable.LineChartAttrs_chart_pointsDrawable, pointsDrawableRes)\n            recycle()\n        }\n    }\n\n    companion object {\n        private const val defaultSmoothFactor = 0.20f\n        private const val defaultSmooth = false\n        private const val defaultLineThickness = 4F\n        private const val defaultFillColor = 0\n        private const val defaultLineColor = Color.BLACK\n        private const val defaultClickableArea = 24 // dp\n    }\n}\n'