b'{-# LANGUAGE CPP #-}\n{-# LANGUAGE OverloadedStrings #-}\n\nmodule Graphics.Hoodle.Render.Type.Background where\n\nimport Data.ByteString (ByteString)\nimport Data.Hoodle.BBox (BBox)\nimport Data.Hoodle.Simple (Background (..))\nimport Graphics.Hoodle.Render.Type.Renderer (SurfaceID)\n-- import qualified Graphics.UI.Gtk.Poppler.Document as Poppler\n--\nimport Prelude hiding (mapM_)\n\n-- |\ndata Context = Context\n  { ctxt_domain :: ByteString,\n    ctxt_filename :: ByteString,\n    ctxt_doc :: Maybe (), -- Maybe Poppler.Document,\n    ctxt_embeddeddoc :: Maybe () -- Poppler.Document\n  }\n\n-- |\ndata RBackground\n  = RBkgSmpl\n      { rbkg_color :: ByteString,\n        rbkg_style :: ByteString,\n        rbkg_surfaceid :: SurfaceID -- UUID\n      }\n  | RBkgPDF\n      { rbkg_domain :: Maybe ByteString,\n        rbkg_filename :: ByteString,\n        rbkg_pageno :: Int,\n        rbkg_popplerpage :: Maybe (), -- Maybe Poppler.Page,\n        rbkg_surfaceid :: SurfaceID -- UUID\n      }\n  | RBkgEmbedPDF\n      { rbkg_pageno :: Int,\n        rbkg_popplerpage :: Maybe (), -- Maybe Poppler.Page,\n        rbkg_surfaceid :: SurfaceID -- UUID\n      }\n\ninstance Show RBackground where\n  show _ = "RBackground"\n\nisRBkgSmpl :: RBackground -> Bool\nisRBkgSmpl RBkgSmpl {} = True\nisRBkgSmpl _ = False\n\ndata RBkgOpt\n  = RBkgDrawPDF\n  | RBkgDrawWhite\n  | RBkgDrawBuffer\n  | RBkgDrawPDFInBBox (Maybe BBox)\n\n-- |\nrbkg2Bkg :: RBackground -> Background\nrbkg2Bkg (RBkgSmpl c s _) = Background "solid" c s\nrbkg2Bkg (RBkgPDF d f n _ _) = BackgroundPdf "pdf" d (Just f) n\nrbkg2Bkg (RBkgEmbedPDF n _ _) = BackgroundEmbedPdf "embedpdf" n\n'