b'package io.github.javiewer.util;\n\nimport android.content.Context;\nimport android.net.Uri;\nimport android.os.Handler;\nimport android.util.Log;\nimport android.view.Surface;\n\nimport com.google.android.exoplayer2.C;\nimport com.google.android.exoplayer2.DefaultLoadControl;\nimport com.google.android.exoplayer2.DefaultRenderersFactory;\nimport com.google.android.exoplayer2.ExoPlaybackException;\nimport com.google.android.exoplayer2.ExoPlayerFactory;\nimport com.google.android.exoplayer2.LoadControl;\nimport com.google.android.exoplayer2.PlaybackParameters;\nimport com.google.android.exoplayer2.Player;\nimport com.google.android.exoplayer2.RenderersFactory;\nimport com.google.android.exoplayer2.SimpleExoPlayer;\nimport com.google.android.exoplayer2.Timeline;\nimport com.google.android.exoplayer2.source.ExtractorMediaSource;\nimport com.google.android.exoplayer2.source.MediaSource;\nimport com.google.android.exoplayer2.source.TrackGroupArray;\nimport com.google.android.exoplayer2.source.hls.HlsMediaSource;\nimport com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection;\nimport com.google.android.exoplayer2.trackselection.DefaultTrackSelector;\nimport com.google.android.exoplayer2.trackselection.TrackSelection;\nimport com.google.android.exoplayer2.trackselection.TrackSelectionArray;\nimport com.google.android.exoplayer2.trackselection.TrackSelector;\nimport com.google.android.exoplayer2.upstream.BandwidthMeter;\nimport com.google.android.exoplayer2.upstream.DataSource;\nimport com.google.android.exoplayer2.upstream.DefaultAllocator;\nimport com.google.android.exoplayer2.upstream.DefaultBandwidthMeter;\nimport com.google.android.exoplayer2.upstream.DefaultDataSourceFactory;\nimport com.google.android.exoplayer2.upstream.DefaultHttpDataSource;\nimport com.google.android.exoplayer2.upstream.DefaultHttpDataSourceFactory;\nimport com.google.android.exoplayer2.util.Util;\nimport com.google.android.exoplayer2.video.VideoListener;\n\nimport cn.jzvd.JZMediaInterface;\nimport cn.jzvd.JZMediaManager;\nimport cn.jzvd.JZVideoPlayerManager;\nimport io.github.javiewer.R;\n\npublic class ExoPlayerImpl extends JZMediaInterface implements Player.EventListener, VideoListener {\n    private SimpleExoPlayer simpleExoPlayer;\n    private Handler mainHandler;\n    private Runnable callback;\n    private String TAG = "JZExoPlayer";\n    private MediaSource videoSource;\n    private long previousSeek = 0;\n\n\n    @Override\n    public void start() {\n        simpleExoPlayer.setPlayWhenReady(true);\n    }\n\n    @Override\n    public void prepare() {\n        Log.e(TAG, "prepare");\n        mainHandler = new Handler();\n        Context context = JZVideoPlayerManager.getCurrentJzvd().getContext();\n\n        BandwidthMeter bandwidthMeter = new DefaultBandwidthMeter();\n        TrackSelection.Factory videoTrackSelectionFactory =\n                new AdaptiveTrackSelection.Factory(bandwidthMeter);\n        TrackSelector trackSelector =\n                new DefaultTrackSelector(videoTrackSelectionFactory);\n\n        LoadControl loadControl = new DefaultLoadControl(new DefaultAllocator(true, C.DEFAULT_BUFFER_SEGMENT_SIZE),\n                360000, 600000, 1000, 5000,\n                C.LENGTH_UNSET,\n                false);\n\n        // 2. Create the player\n\n        RenderersFactory renderersFactory = new DefaultRenderersFactory(context);\n        simpleExoPlayer = ExoPlayerFactory.newSimpleInstance(renderersFactory, trackSelector, loadControl);\n        // Produces DataSource instances through which media data is loaded.\n        DataSource.Factory dataSourceFactory = new DefaultDataSourceFactory(\n                context,\n                null,\n                new DefaultHttpDataSourceFactory(\n                        Util.getUserAgent(context, context.getResources().getString(R.string.app_name)),\n                        null,\n                        DefaultHttpDataSource.DEFAULT_CONNECT_TIMEOUT_MILLIS,\n                        DefaultHttpDataSource.DEFAULT_READ_TIMEOUT_MILLIS,\n                        true\n                )\n        );\n\n\n        String currUrl = currentDataSource.toString();\n        Log.i("CURR URL", currUrl);\n        if (currUrl.contains(".m3u8") || currUrl.contains("api.rekonquer.com/psvs")) {\n            videoSource = new HlsMediaSource.Factory(dataSourceFactory)\n                    .createMediaSource(Uri.parse(currUrl), mainHandler, null);\n        } else {\n            videoSource = new ExtractorMediaSource.Factory(dataSourceFactory)\n                    .createMediaSource(Uri.parse(currUrl));\n        }\n        simpleExoPlayer.addVideoListener(this);\n\n        Log.e(TAG, "URL Link = " + currUrl);\n\n        simpleExoPlayer.addListener(this);\n\n        simpleExoPlayer.prepare(videoSource);\n        simpleExoPlayer.setPlayWhenReady(true);\n        callback = new onBufferingUpdate();\n    }\n\n    @Override\n    public void onVideoSizeChanged(int width, int height, int unappliedRotationDegrees, float pixelWidthHeightRatio) {\n        JZMediaManager.instance().currentVideoWidth = width;\n        JZMediaManager.instance().currentVideoHeight = height;\n        JZMediaManager.instance().mainThreadHandler.post(new Runnable() {\n            @Override\n            public void run() {\n                if (JZVideoPlayerManager.getCurrentJzvd() != null) {\n                    JZVideoPlayerManager.getCurrentJzvd().onVideoSizeChanged();\n                }\n            }\n        });\n    }\n\n    @Override\n    public void onRenderedFirstFrame() {\n        Log.e(TAG, "onRenderedFirstFrame");\n    }\n\n    @Override\n    public void pause() {\n        simpleExoPlayer.setPlayWhenReady(false);\n    }\n\n    @Override\n    public boolean isPlaying() {\n        return simpleExoPlayer.getPlayWhenReady();\n    }\n\n    @Override\n    public void seekTo(long time) {\n        if (time != previousSeek) {\n            simpleExoPlayer.seekTo(time);\n            previousSeek = time;\n            JZVideoPlayerManager.getCurrentJzvd().seekToInAdvance = time;\n        }\n    }\n\n    @Override\n    public void release() {\n        if (simpleExoPlayer != null) {\n            simpleExoPlayer.release();\n        }\n        if (mainHandler != null)\n            mainHandler.removeCallbacks(callback);\n    }\n\n    @Override\n    public long getCurrentPosition() {\n        if (simpleExoPlayer != null)\n            return simpleExoPlayer.getCurrentPosition();\n        else return 0;\n    }\n\n    @Override\n    public long getDuration() {\n        if (simpleExoPlayer != null)\n            return simpleExoPlayer.getDuration();\n        else return 0;\n    }\n\n    @Override\n    public void setSurface(Surface surface) {\n        simpleExoPlayer.setVideoSurface(surface);\n        Log.e(TAG, "setSurface");\n    }\n\n    @Override\n    public void setVolume(float leftVolume, float rightVolume) {\n        simpleExoPlayer.setVolume(leftVolume);\n        simpleExoPlayer.setVolume(rightVolume);\n    }\n\n    @Override\n    public void onTimelineChanged(final Timeline timeline, Object manifest, final int reason) {\n        Log.e(TAG, "onTimelineChanged");\n//        JZMediaManager.instance().mainThreadHandler.post(new Runnable() {\n//\n//            @Override\n//            public void run() {\n//                if (reason == 0) {\n//\n//                    JZVideoPlayerManager.getCurrentJzvd().onInfo(reason, timeline.getPeriodCount());\n//                }\n//            }\n//        });\n    }\n\n    @Override\n    public void onTracksChanged(TrackGroupArray trackGroups, TrackSelectionArray trackSelections) {\n\n    }\n\n    @Override\n    public void onLoadingChanged(boolean isLoading) {\n        Log.e(TAG, "onLoadingChanged");\n    }\n\n    @Override\n    public void onPlayerStateChanged(final boolean playWhenReady, final int playbackState) {\n        Log.e(TAG, "onPlayerStateChanged" + playbackState + "/ready=" + String.valueOf(playWhenReady));\n        JZMediaManager.instance().mainThreadHandler.post(new Runnable() {\n            @Override\n            public void run() {\n                if (JZVideoPlayerManager.getCurrentJzvd() != null) {\n                    switch (playbackState) {\n                        case Player.STATE_IDLE: {\n                        }\n                        break;\n                        case Player.STATE_BUFFERING: {\n                            mainHandler.post(callback);\n                        }\n                        break;\n                        case Player.STATE_READY: {\n                            if (playWhenReady) {\n                                JZVideoPlayerManager.getCurrentJzvd().onPrepared();\n                            } else {\n                            }\n                        }\n                        break;\n                        case Player.STATE_ENDED: {\n                            JZVideoPlayerManager.getCurrentJzvd().onAutoCompletion();\n                        }\n                        break;\n                    }\n                }\n            }\n        });\n    }\n\n    @Override\n    public void onRepeatModeChanged(int repeatMode) {\n\n    }\n\n    @Override\n    public void onShuffleModeEnabledChanged(boolean shuffleModeEnabled) {\n\n    }\n\n    @Override\n    public void onPlayerError(ExoPlaybackException error) {\n        Log.e(TAG, "onPlayerError" + error.toString());\n        JZMediaManager.instance().mainThreadHandler.post(new Runnable() {\n            @Override\n            public void run() {\n                if (JZVideoPlayerManager.getCurrentJzvd() != null) {\n                    JZVideoPlayerManager.getCurrentJzvd().onError(1000, 1000);\n                }\n            }\n        });\n    }\n\n    @Override\n    public void onPositionDiscontinuity(int reason) {\n\n    }\n\n    @Override\n    public void onPlaybackParametersChanged(PlaybackParameters playbackParameters) {\n\n    }\n\n    @Override\n    public void onSeekProcessed() {\n        JZMediaManager.instance().mainThreadHandler.post(new Runnable() {\n            @Override\n            public void run() {\n                if (JZVideoPlayerManager.getCurrentJzvd() != null) {\n                    JZVideoPlayerManager.getCurrentJzvd().onSeekComplete();\n                }\n            }\n        });\n    }\n\n    private class onBufferingUpdate implements Runnable {\n        @Override\n        public void run() {\n            final int percent = simpleExoPlayer.getBufferedPercentage();\n            JZMediaManager.instance().mainThreadHandler.post(new Runnable() {\n                @Override\n                public void run() {\n                    if (JZVideoPlayerManager.getCurrentJzvd() != null) {\n                        JZVideoPlayerManager.getCurrentJzvd().setBufferProgress(percent);\n                    }\n                }\n            });\n            if (percent < 100) {\n                mainHandler.postDelayed(callback, 300);\n            } else {\n                mainHandler.removeCallbacks(callback);\n            }\n        }\n    }\n}\n'