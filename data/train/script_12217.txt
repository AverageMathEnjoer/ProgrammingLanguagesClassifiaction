b'package icu.nullptr.twifucker.ui\n\nimport android.content.Context\nimport android.graphics.Color\nimport android.util.TypedValue\nimport android.view.ViewGroup.LayoutParams.WRAP_CONTENT\nimport android.widget.ImageButton\nimport android.widget.TextView\nimport icu.nullptr.twifucker.R\n\nclass DownloadItem(context: Context) : CustomLayout(context) {\n\n    private val selectableItemBackground = TypedValue().also {\n        context.theme.resolveAttribute(android.R.attr.selectableItemBackground, it, true)\n    }\n\n    private val itemText = TextView(context).apply {\n        setTextAppearance(android.R.style.TextAppearance_DeviceDefault_Medium)\n        layoutParams = LayoutParams(WRAP_CONTENT, WRAP_CONTENT).also {\n            it.marginStart = 24.dp\n            setPadding(18.dp, 0, 18.dp, 0)\n        }\n        addView(this)\n    }\n\n    private val btnCopy = ImageButton(context).apply {\n        setImageResource(R.drawable.baseline_copy_24)\n        setBackgroundColor(Color.TRANSPARENT)\n        foreground = context.getDrawable(selectableItemBackground.resourceId)\n        layoutParams = LayoutParams(96.dp, 96.dp).also {\n            it.marginStart = 8.dp\n        }\n        addView(this)\n    }\n\n    private val btnDownload = ImageButton(context).apply {\n        setImageResource(R.drawable.baseline_download_24)\n        setBackgroundColor(Color.TRANSPARENT)\n        foreground = context.getDrawable(selectableItemBackground.resourceId)\n        layoutParams = LayoutParams(96.dp, 96.dp).also {\n            it.marginStart = 8.dp\n            it.marginEnd = 24.dp\n        }\n        addView(this)\n    }\n\n    fun setTitle(title: String) {\n        itemText.text = title\n    }\n\n    fun setOnCopy(onCopy: () -> Unit) {\n        btnCopy.setOnClickListener { onCopy() }\n    }\n\n    fun setOnDownload(onDownload: () -> Unit) {\n        btnDownload.setOnClickListener { onDownload() }\n    }\n\n    override fun onMeasure(widthMeasureSpec: Int, heightMeasureSpec: Int) {\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec)\n        btnCopy.autoMeasure()\n        btnDownload.autoMeasure()\n\n        val itemTextWidth =\n            measuredWidth - itemText.marginStart - itemText.paddingLeft - itemText.paddingRight - itemText.marginEnd - btnCopy.measuredWidthWithMargins - btnDownload.measuredWidthWithMargins\n        itemText.measure(\n            itemTextWidth.toExactlyMeasureSpec(), itemText.defaultHeightMeasureSpec(this)\n        )\n\n        val maxWidth =\n            (itemTextWidth + btnCopy.measuredWidthWithMargins + btnDownload.measuredWidthWithMargins).coerceAtLeast(\n                measuredWidth\n            )\n        val maxHeight = (itemText.measuredHeightWithMargins).coerceAtLeast(\n            btnCopy.measuredHeightWithMargins\n        )\n        setMeasuredDimension(maxWidth, maxHeight)\n    }\n\n    override fun onLayout(changed: Boolean, l: Int, t: Int, r: Int, b: Int) {\n        if (!isRTL) {\n            itemText.let {\n                it.layout(\n                    x = it.marginStart, y = (this.measuredHeight / 2) - (it.measuredHeight / 2)\n                )\n            }\n            btnCopy.let {\n                it.layout(x = itemText.right + it.marginStart, y = 0)\n            }\n            btnDownload.let {\n                it.layout(x = btnCopy.right + it.marginStart, y = 0)\n            }\n        } else {\n            itemText.let {\n                it.layout(\n                    x = it.marginEnd,\n                    y = (this.measuredHeight / 2) - (it.measuredHeight / 2),\n                    fromRight = true\n                )\n            }\n            btnDownload.let {\n                it.layout(x = it.marginStart, y = 0)\n            }\n            btnCopy.let {\n                it.layout(x = it.marginStart + btnDownload.right, y = 0)\n            }\n        }\n\n\n    }\n}'