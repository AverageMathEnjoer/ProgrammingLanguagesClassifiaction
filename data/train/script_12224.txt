b'package io.github.javiewer.view;\n\n/**\n * Project: JAViewer\n */\n\n\nimport android.animation.ValueAnimator;\nimport android.content.Context;\nimport android.graphics.Canvas;\nimport android.graphics.Matrix;\nimport android.graphics.PointF;\nimport android.graphics.RectF;\nimport android.util.AttributeSet;\nimport android.view.GestureDetector;\nimport android.view.MotionEvent;\n\nimport java.util.ArrayList;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Queue;\n\n/**\n * \xe6\x89\x8b\xe5\x8a\xbf\xe5\x9b\xbe\xe7\x89\x87\xe6\x8e\xa7\xe4\xbb\xb6\n *\n * @author clifford\n */\npublic class PinchImageView extends androidx.appcompat.widget.AppCompatImageView {\n\n\n    ////////////////////////////////\xe9\x85\x8d\xe7\xbd\xae\xe5\x8f\x82\xe6\x95\xb0////////////////////////////////\n\n    /**\n     * \xe5\x9b\xbe\xe7\x89\x87\xe7\xbc\xa9\xe6\x94\xbe\xe5\x8a\xa8\xe7\x94\xbb\xe6\x97\xb6\xe9\x97\xb4\n     */\n    public static final int SCALE_ANIMATOR_DURATION = 200;\n\n    /**\n     * \xe6\x83\xaf\xe6\x80\xa7\xe5\x8a\xa8\xe7\x94\xbb\xe8\xa1\xb0\xe5\x87\x8f\xe5\x8f\x82\xe6\x95\xb0\n     */\n    public static final float FLING_DAMPING_FACTOR = 0.9f;\n    /**\n     * \xe6\x89\x8b\xe5\x8a\xbf\xe7\x8a\xb6\xe6\x80\x81\xef\xbc\x9a\xe8\x87\xaa\xe7\x94\xb1\xe7\x8a\xb6\xe6\x80\x81\n     *\n     * @see #getPinchMode()\n     */\n    public static final int PINCH_MODE_FREE = 0;\n\n\n    ////////////////////////////////\xe7\x9b\x91\xe5\x90\xac\xe5\x99\xa8////////////////////////////////\n    /**\n     * \xe6\x89\x8b\xe5\x8a\xbf\xe7\x8a\xb6\xe6\x80\x81\xef\xbc\x9a\xe5\x8d\x95\xe6\x8c\x87\xe6\xbb\x9a\xe5\x8a\xa8\xe7\x8a\xb6\xe6\x80\x81\n     *\n     * @see #getPinchMode()\n     */\n    public static final int PINCH_MODE_SCROLL = 1;\n    /**\n     * \xe6\x89\x8b\xe5\x8a\xbf\xe7\x8a\xb6\xe6\x80\x81\xef\xbc\x9a\xe5\x8f\x8c\xe6\x8c\x87\xe7\xbc\xa9\xe6\x94\xbe\xe7\x8a\xb6\xe6\x80\x81\n     *\n     * @see #getPinchMode()\n     */\n    public static final int PINCH_MODE_SCALE = 2;\n    /**\n     * \xe5\x9b\xbe\xe7\x89\x87\xe6\x9c\x80\xe5\xa4\xa7\xe6\x94\xbe\xe5\xa4\xa7\xe6\xaf\x94\xe4\xbe\x8b\n     */\n    private static final float MAX_SCALE = 4f;\n    /**\n     * \xe5\xa4\x96\xe7\x95\x8c\xe7\x82\xb9\xe5\x87\xbb\xe4\xba\x8b\xe4\xbb\xb6\n     *\n     * @see #setOnClickListener(OnClickListener)\n     */\n    private OnClickListener mOnClickListener;\n\n\n    ////////////////////////////////\xe5\x85\xac\xe5\x85\xb1\xe7\x8a\xb6\xe6\x80\x81\xe8\x8e\xb7\xe5\x8f\x96////////////////////////////////\n    /**\n     * \xe5\xa4\x96\xe7\x95\x8c\xe9\x95\xbf\xe6\x8c\x89\xe4\xba\x8b\xe4\xbb\xb6\n     *\n     * @see #setOnLongClickListener(OnLongClickListener)\n     */\n    private OnLongClickListener mOnLongClickListener;\n    /**\n     * \xe5\xa4\x96\xe5\xb1\x82\xe5\x8f\x98\xe6\x8d\xa2\xe7\x9f\xa9\xe9\x98\xb5\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe5\x8d\x95\xe4\xbd\x8d\xe7\x9f\xa9\xe9\x98\xb5\xef\xbc\x8c\xe9\x82\xa3\xe4\xb9\x88\xe5\x9b\xbe\xe7\x89\x87\xe6\x98\xaffit center\xe7\x8a\xb6\xe6\x80\x81\n     *\n     * @see #getOuterMatrix(Matrix)\n     * @see #outerMatrixTo(Matrix, long)\n     */\n    private Matrix mOuterMatrix = new Matrix();\n    /**\n     * \xe7\x9f\xa9\xe5\xbd\xa2\xe9\x81\xae\xe7\xbd\xa9\n     *\n     * @see #getMask()\n     * @see #zoomMaskTo(RectF, long)\n     */\n    private RectF mMask;\n    /**\n     * \xe5\xbd\x93\xe5\x89\x8d\xe6\x89\x8b\xe5\x8a\xbf\xe7\x8a\xb6\xe6\x80\x81\n     *\n     * @see #getPinchMode()\n     * @see #PINCH_MODE_FREE\n     * @see #PINCH_MODE_SCROLL\n     * @see #PINCH_MODE_SCALE\n     */\n    private int mPinchMode = PINCH_MODE_FREE;\n    /**\n     * \xe6\x89\x80\xe6\x9c\x89OuterMatrixChangedListener\xe7\x9b\x91\xe5\x90\xac\xe5\x88\x97\xe8\xa1\xa8\n     *\n     * @see #addOuterMatrixChangedListener(OuterMatrixChangedListener)\n     * @see #removeOuterMatrixChangedListener(OuterMatrixChangedListener)\n     */\n    private List<OuterMatrixChangedListener> mOuterMatrixChangedListeners;\n    /**\n     * \xe5\xbd\x93mOuterMatrixChangedListeners\xe8\xa2\xab\xe9\x94\x81\xe5\xae\x9a\xe4\xb8\x8d\xe5\x85\x81\xe8\xae\xb8\xe4\xbf\xae\xe6\x94\xb9\xe6\x97\xb6,\xe4\xb8\xb4\xe6\x97\xb6\xe5\xb0\x86\xe4\xbf\xae\xe6\x94\xb9\xe5\x86\x99\xe5\x88\xb0\xe8\xbf\x99\xe4\xb8\xaa\xe5\x89\xaf\xe6\x9c\xac\xe4\xb8\xad\n     *\n     * @see #mOuterMatrixChangedListeners\n     */\n    private List<OuterMatrixChangedListener> mOuterMatrixChangedListenersCopy;\n    /**\n     * mOuterMatrixChangedListeners\xe7\x9a\x84\xe4\xbf\xae\xe6\x94\xb9\xe9\x94\x81\xe5\xae\x9a\n     * <p>\n     * \xe5\xbd\x93\xe8\xbf\x9b\xe5\x85\xa5dispatchOuterMatrixChanged\xe6\x96\xb9\xe6\xb3\x95\xe6\x97\xb6,\xe8\xa2\xab\xe5\x8a\xa01,\xe9\x80\x80\xe5\x87\xba\xe5\x89\x8d\xe8\xa2\xab\xe5\x87\x8f1\n     *\n     * @see #dispatchOuterMatrixChanged()\n     * @see #addOuterMatrixChangedListener(OuterMatrixChangedListener)\n     * @see #removeOuterMatrixChangedListener(OuterMatrixChangedListener)\n     */\n    private int mDispatchOuterMatrixChangedLock;\n    /**\n     * mask\xe4\xbf\xae\xe6\x94\xb9\xe7\x9a\x84\xe5\x8a\xa8\xe7\x94\xbb\n     * <p>\n     * \xe5\x92\x8c\xe5\x9b\xbe\xe7\x89\x87\xe7\x9a\x84\xe5\x8a\xa8\xe7\x94\xbb\xe7\x9b\xb8\xe4\xba\x92\xe7\x8b\xac\xe7\xab\x8b.\n     *\n     * @see #zoomMaskTo(RectF, long)\n     */\n    private MaskAnimator mMaskAnimator;\n    /**\n     * \xe5\x9c\xa8\xe5\x8d\x95\xe6\x8c\x87\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\x8b:\n     * \xe8\xae\xb0\xe5\xbd\x95\xe4\xb8\x8a\xe4\xb8\x80\xe6\xac\xa1\xe6\x89\x8b\xe6\x8c\x87\xe7\x9a\x84\xe4\xbd\x8d\xe7\xbd\xae,\xe7\x94\xa8\xe4\xba\x8e\xe8\xae\xa1\xe7\xae\x97\xe6\x96\xb0\xe7\x9a\x84\xe4\xbd\x8d\xe7\xbd\xae\xe5\x92\x8c\xe4\xb8\x8a\xe4\xb8\x80\xe6\xac\xa1\xe4\xbd\x8d\xe7\xbd\xae\xe7\x9a\x84\xe5\xb7\xae\xe5\x80\xbc.\n     * <p>\n     * \xe5\x8f\x8c\xe6\x8c\x87\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\x8b:\n     * \xe8\xae\xb0\xe5\xbd\x95\xe4\xb8\xa4\xe4\xb8\xaa\xe6\x89\x8b\xe6\x8c\x87\xe7\x9a\x84\xe4\xb8\xad\xe7\x82\xb9,\xe4\xbd\x9c\xe4\xb8\xba\xe5\x92\x8cmScaleCenter\xe7\xbb\x91\xe5\xae\x9a\xe7\x9a\x84\xe7\x82\xb9.\n     * \xe8\xbf\x99\xe4\xb8\xaa\xe7\xbb\x91\xe5\xae\x9a\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbf\x9d\xe8\xaf\x81mScaleCenter\xe6\x97\xa0\xe8\xae\xba\xe5\xa6\x82\xe4\xbd\x95\xe9\x83\xbd\xe4\xbc\x9a\xe8\xb7\x9f\xe9\x9a\x8f\xe8\xbf\x99\xe4\xb8\xaa\xe4\xb8\xad\xe7\x82\xb9.\n     *\n     * @see #mScaleCenter\n     * @see #scale(PointF, float, float, PointF)\n     * @see #scaleEnd()\n     */\n    private PointF mLastMovePoint = new PointF();\n    /**\n     * \xe7\xbc\xa9\xe6\x94\xbe\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\x8b\xe5\x9b\xbe\xe7\x89\x87\xe7\x9a\x84\xe7\xbc\xa9\xe6\x94\xbe\xe4\xb8\xad\xe7\x82\xb9.\n     * <p>\n     * \xe4\xb8\xba\xe5\x85\xb6\xe6\x8c\x87\xe4\xbb\xa3\xe7\x9a\x84\xe7\x82\xb9\xe7\xbb\x8f\xe8\xbf\x87innerMatrix\xe5\x8f\x98\xe6\x8d\xa2\xe4\xb9\x8b\xe5\x90\x8e\xe7\x9a\x84\xe5\x80\xbc.\n     * \xe5\x85\xb6\xe6\x8c\x87\xe4\xbb\xa3\xe7\x9a\x84\xe7\x82\xb9\xe5\x9c\xa8\xe6\x89\x8b\xe5\x8a\xbf\xe8\xbf\x87\xe7\xa8\x8b\xe4\xb8\xad\xe5\xa7\x8b\xe7\xbb\x88\xe8\xb7\x9f\xe9\x9a\x8fmLastMovePoint.\n     * \xe9\x80\x9a\xe8\xbf\x87\xe5\x8f\x8c\xe6\x8c\x87\xe7\xbc\xa9\xe6\x94\xbe\xe6\x97\xb6,\xe5\x85\xb6\xe4\xb8\xba\xe7\xbc\xa9\xe6\x94\xbe\xe4\xb8\xad\xe5\xbf\x83\xe7\x82\xb9.\n     *\n     * @see #saveScaleContext(float, float, float, float)\n     * @see #mLastMovePoint\n     * @see #scale(PointF, float, float, PointF)\n     */\n    private PointF mScaleCenter = new PointF();\n    /**\n     * \xe7\xbc\xa9\xe6\x94\xbe\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\x8b\xe7\x9a\x84\xe5\x9f\xba\xe7\xa1\x80\xe7\xbc\xa9\xe6\x94\xbe\xe6\xaf\x94\xe4\xbe\x8b\n     * <p>\n     * \xe4\xb8\xba\xe5\xa4\x96\xe5\xb1\x82\xe7\xbc\xa9\xe6\x94\xbe\xe5\x80\xbc\xe9\x99\xa4\xe4\xbb\xa5\xe5\xbc\x80\xe5\xa7\x8b\xe7\xbc\xa9\xe6\x94\xbe\xe6\x97\xb6\xe4\xb8\xa4\xe6\x8c\x87\xe8\xb7\x9d\xe7\xa6\xbb.\n     * \xe5\x85\xb6\xe5\x80\xbc\xe4\xb9\x98\xe4\xb8\x8a\xe6\x9c\x80\xe6\x96\xb0\xe7\x9a\x84\xe4\xb8\xa4\xe6\x8c\x87\xe4\xb9\x8b\xe9\x97\xb4\xe8\xb7\x9d\xe7\xa6\xbb\xe4\xb8\xba\xe6\x9c\x80\xe6\x96\xb0\xe7\x9a\x84\xe5\x9b\xbe\xe7\x89\x87\xe7\xbc\xa9\xe6\x94\xbe\xe6\xaf\x94\xe4\xbe\x8b.\n     *\n     * @see #saveScaleContext(float, float, float, float)\n     * @see #scale(PointF, float, float, PointF)\n     */\n    private float mScaleBase = 0;\n    /**\n     * \xe5\x9b\xbe\xe7\x89\x87\xe7\xbc\xa9\xe6\x94\xbe\xe5\x8a\xa8\xe7\x94\xbb\n     * <p>\n     * \xe7\xbc\xa9\xe6\x94\xbe\xe6\xa8\xa1\xe5\xbc\x8f\xe6\x8a\x8a\xe5\x9b\xbe\xe7\x89\x87\xe7\x9a\x84\xe4\xbd\x8d\xe7\xbd\xae\xe5\xa4\xa7\xe5\xb0\x8f\xe8\xb6\x85\xe5\x87\xba\xe9\x99\x90\xe5\x88\xb6\xe4\xb9\x8b\xe5\x90\x8e\xe8\xa7\xa6\xe5\x8f\x91.\n     * \xe5\x8f\x8c\xe5\x87\xbb\xe5\x9b\xbe\xe7\x89\x87\xe6\x94\xbe\xe5\xa4\xa7\xe6\x88\x96\xe7\xbc\xa9\xe5\xb0\x8f\xe6\x97\xb6\xe8\xa7\xa6\xe5\x8f\x91.\n     * \xe6\x89\x8b\xe5\x8a\xa8\xe8\xb0\x83\xe7\x94\xa8outerMatrixTo\xe8\xa7\xa6\xe5\x8f\x91.\n     *\n     * @see #scaleEnd()\n     * @see #doubleTap(float, float)\n     * @see #outerMatrixTo(Matrix, long)\n     */\n    private ScaleAnimator mScaleAnimator;\n    /**\n     * \xe6\xbb\x91\xe5\x8a\xa8\xe4\xba\xa7\xe7\x94\x9f\xe7\x9a\x84\xe6\x83\xaf\xe6\x80\xa7\xe5\x8a\xa8\xe7\x94\xbb\n     *\n     * @see #fling(float, float)\n     */\n    private FlingAnimator mFlingAnimator;\n    /**\n     * \xe5\xb8\xb8\xe7\x94\xa8\xe6\x89\x8b\xe5\x8a\xbf\xe5\xa4\x84\xe7\x90\x86\n     * <p>\n     * \xe5\x9c\xa8onTouchEvent\xe6\x9c\xab\xe5\xb0\xbe\xe8\xa2\xab\xe6\x89\xa7\xe8\xa1\x8c.\n     */\n    private GestureDetector mGestureDetector = new GestureDetector(PinchImageView.this.getContext(), new GestureDetector.SimpleOnGestureListener() {\n\n        public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {\n            //\xe5\x8f\xaa\xe6\x9c\x89\xe5\x9c\xa8\xe5\x8d\x95\xe6\x8c\x87\xe6\xa8\xa1\xe5\xbc\x8f\xe7\xbb\x93\xe6\x9d\x9f\xe4\xb9\x8b\xe5\x90\x8e\xe6\x89\x8d\xe5\x85\x81\xe8\xae\xb8\xe6\x89\xa7\xe8\xa1\x8cfling\n            if (mPinchMode == PINCH_MODE_FREE && !(mScaleAnimator != null && mScaleAnimator.isRunning())) {\n                fling(velocityX, velocityY);\n            }\n            return true;\n        }\n\n        public void onLongPress(MotionEvent e) {\n            //\xe8\xa7\xa6\xe5\x8f\x91\xe9\x95\xbf\xe6\x8c\x89\n            if (mOnLongClickListener != null) {\n                mOnLongClickListener.onLongClick(PinchImageView.this);\n            }\n        }\n\n        public boolean onDoubleTap(MotionEvent e) {\n            //\xe5\xbd\x93\xe6\x89\x8b\xe6\x8c\x87\xe5\xbf\xab\xe9\x80\x9f\xe7\xac\xac\xe4\xba\x8c\xe6\xac\xa1\xe6\x8c\x89\xe4\xb8\x8b\xe8\xa7\xa6\xe5\x8f\x91,\xe6\xad\xa4\xe6\x97\xb6\xe5\xbf\x85\xe9\xa1\xbb\xe6\x98\xaf\xe5\x8d\x95\xe6\x8c\x87\xe6\xa8\xa1\xe5\xbc\x8f\xe6\x89\x8d\xe5\x85\x81\xe8\xae\xb8\xe6\x89\xa7\xe8\xa1\x8cdoubleTap\n            if (mPinchMode == PINCH_MODE_SCROLL && !(mScaleAnimator != null && mScaleAnimator.isRunning())) {\n                doubleTap(e.getX(), e.getY());\n            }\n            return true;\n        }\n\n        public boolean onSingleTapConfirmed(MotionEvent e) {\n            //\xe8\xa7\xa6\xe5\x8f\x91\xe7\x82\xb9\xe5\x87\xbb\n            if (mOnClickListener != null) {\n                mOnClickListener.onClick(PinchImageView.this);\n            }\n            return true;\n        }\n    });\n\n\n    ////////////////////////////////\xe5\x85\xac\xe5\x85\xb1\xe7\x8a\xb6\xe6\x80\x81\xe8\xae\xbe\xe7\xbd\xae////////////////////////////////\n\n    public PinchImageView(Context context) {\n        super(context);\n        initView();\n    }\n\n    public PinchImageView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        initView();\n    }\n\n    public PinchImageView(Context context, AttributeSet attrs, int defStyle) {\n        super(context, attrs, defStyle);\n        initView();\n    }\n\n\n    ////////////////////////////////\xe5\xaf\xb9\xe5\xa4\x96\xe5\xb9\xbf\xe6\x92\xad\xe4\xba\x8b\xe4\xbb\xb6////////////////////////////////\n\n    @Override\n    public void setOnClickListener(OnClickListener l) {\n        //\xe9\xbb\x98\xe8\xae\xa4\xe7\x9a\x84click\xe4\xbc\x9a\xe5\x9c\xa8\xe4\xbb\xbb\xe4\xbd\x95\xe7\x82\xb9\xe5\x87\xbb\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe9\x83\xbd\xe4\xbc\x9a\xe8\xa7\xa6\xe5\x8f\x91\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe6\x90\x9e\xe6\x88\x90\xe8\x87\xaa\xe5\xb7\xb1\xe7\x9a\x84\n        mOnClickListener = l;\n    }\n\n    @Override\n    public void setOnLongClickListener(OnLongClickListener l) {\n        //\xe9\xbb\x98\xe8\xae\xa4\xe7\x9a\x84long click\xe4\xbc\x9a\xe5\x9c\xa8\xe4\xbb\xbb\xe4\xbd\x95\xe9\x95\xbf\xe6\x8c\x89\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe9\x83\xbd\xe4\xbc\x9a\xe8\xa7\xa6\xe5\x8f\x91\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe6\x90\x9e\xe6\x88\x90\xe8\x87\xaa\xe5\xb7\xb1\xe7\x9a\x84\n        mOnLongClickListener = l;\n    }\n\n    /**\n     * \xe8\x8e\xb7\xe5\x8f\x96\xe5\xa4\x96\xe9\x83\xa8\xe5\x8f\x98\xe6\x8d\xa2\xe7\x9f\xa9\xe9\x98\xb5.\n     * <p>\n     * \xe5\xa4\x96\xe9\x83\xa8\xe5\x8f\x98\xe6\x8d\xa2\xe7\x9f\xa9\xe9\x98\xb5\xe8\xae\xb0\xe5\xbd\x95\xe4\xba\x86\xe5\x9b\xbe\xe7\x89\x87\xe6\x89\x8b\xe5\x8a\xbf\xe6\x93\x8d\xe4\xbd\x9c\xe7\x9a\x84\xe6\x9c\x80\xe7\xbb\x88\xe7\xbb\x93\xe6\x9e\x9c,\xe6\x98\xaf\xe7\x9b\xb8\xe5\xaf\xb9\xe4\xba\x8e\xe5\x9b\xbe\xe7\x89\x87fit center\xe7\x8a\xb6\xe6\x80\x81\xe7\x9a\x84\xe5\x8f\x98\xe6\x8d\xa2.\n     * \xe9\xbb\x98\xe8\xae\xa4\xe5\x80\xbc\xe4\xb8\xba\xe5\x8d\x95\xe4\xbd\x8d\xe7\x9f\xa9\xe9\x98\xb5,\xe6\xad\xa4\xe6\x97\xb6\xe5\x9b\xbe\xe7\x89\x87\xe4\xb8\xbafit center\xe7\x8a\xb6\xe6\x80\x81.\n     *\n     * @param matrix \xe7\x94\xa8\xe4\xba\x8e\xe5\xa1\xab\xe5\x85\x85\xe7\xbb\x93\xe6\x9e\x9c\xe7\x9a\x84\xe5\xaf\xb9\xe8\xb1\xa1\n     * @return \xe5\xa6\x82\xe6\x9e\x9c\xe4\xbc\xa0\xe4\xba\x86matrix\xe5\x8f\x82\xe6\x95\xb0\xe5\x88\x99\xe5\xb0\x86matrix\xe5\xa1\xab\xe5\x85\x85\xe5\x90\x8e\xe8\xbf\x94\xe5\x9b\x9e, \xe5\x90\xa6\xe5\x88\x99new\xe4\xb8\x80\xe4\xb8\xaa\xe5\xa1\xab\xe5\x85\x85\xe8\xbf\x94\xe5\x9b\x9e\n     */\n    public Matrix getOuterMatrix(Matrix matrix) {\n        if (matrix == null) {\n            matrix = new Matrix(mOuterMatrix);\n        } else {\n            matrix.set(mOuterMatrix);\n        }\n        return matrix;\n    }\n\n    /**\n     * \xe8\x8e\xb7\xe5\x8f\x96\xe5\x86\x85\xe9\x83\xa8\xe5\x8f\x98\xe6\x8d\xa2\xe7\x9f\xa9\xe9\x98\xb5.\n     * <p>\n     * \xe5\x86\x85\xe9\x83\xa8\xe5\x8f\x98\xe6\x8d\xa2\xe7\x9f\xa9\xe9\x98\xb5\xe6\x98\xaf\xe5\x8e\x9f\xe5\x9b\xbe\xe5\x88\xb0fit center\xe7\x8a\xb6\xe6\x80\x81\xe7\x9a\x84\xe5\x8f\x98\xe6\x8d\xa2,\xe5\xbd\x93\xe5\x8e\x9f\xe5\x9b\xbe\xe5\xb0\xba\xe5\xaf\xb8\xe5\x8f\x98\xe5\x8c\x96\xe6\x88\x96\xe8\x80\x85\xe6\x8e\xa7\xe4\xbb\xb6\xe5\xa4\xa7\xe5\xb0\x8f\xe5\x8f\x98\xe5\x8c\x96\xe9\x83\xbd\xe4\xbc\x9a\xe5\x8f\x91\xe7\x94\x9f\xe6\x94\xb9\xe5\x8f\x98\n     * \xe5\xbd\x93\xe5\xb0\x9a\xe6\x9c\xaa\xe5\xb8\x83\xe5\xb1\x80\xe6\x88\x96\xe8\x80\x85\xe5\x8e\x9f\xe5\x9b\xbe\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\xe6\x97\xb6,\xe5\x85\xb6\xe5\x80\xbc\xe6\x97\xa0\xe6\x84\x8f\xe4\xb9\x89.\xe6\x89\x80\xe4\xbb\xa5\xe5\x9c\xa8\xe8\xb0\x83\xe7\x94\xa8\xe5\x89\x8d\xe9\x9c\x80\xe8\xa6\x81\xe7\xa1\xae\xe4\xbf\x9d\xe5\x89\x8d\xe7\xbd\xae\xe6\x9d\xa1\xe4\xbb\xb6\xe6\x9c\x89\xe6\x95\x88,\xe5\x90\xa6\xe5\x88\x99\xe5\xb0\x86\xe5\xbd\xb1\xe5\x93\x8d\xe8\xae\xa1\xe7\xae\x97\xe7\xbb\x93\xe6\x9e\x9c.\n     *\n     * @param matrix \xe7\x94\xa8\xe4\xba\x8e\xe5\xa1\xab\xe5\x85\x85\xe7\xbb\x93\xe6\x9e\x9c\xe7\x9a\x84\xe5\xaf\xb9\xe8\xb1\xa1\n     * @return \xe5\xa6\x82\xe6\x9e\x9c\xe4\xbc\xa0\xe4\xba\x86matrix\xe5\x8f\x82\xe6\x95\xb0\xe5\x88\x99\xe5\xb0\x86matrix\xe5\xa1\xab\xe5\x85\x85\xe5\x90\x8e\xe8\xbf\x94\xe5\x9b\x9e, \xe5\x90\xa6\xe5\x88\x99new\xe4\xb8\x80\xe4\xb8\xaa\xe5\xa1\xab\xe5\x85\x85\xe8\xbf\x94\xe5\x9b\x9e\n     */\n    public Matrix getInnerMatrix(Matrix matrix) {\n        if (matrix == null) {\n            matrix = new Matrix();\n        } else {\n            matrix.reset();\n        }\n        if (isReady()) {\n            //\xe5\x8e\x9f\xe5\x9b\xbe\xe5\xa4\xa7\xe5\xb0\x8f\n            RectF tempSrc = MathUtils.rectFTake(0, 0, getDrawable().getIntrinsicWidth(), getDrawable().getIntrinsicHeight());\n            //\xe6\x8e\xa7\xe4\xbb\xb6\xe5\xa4\xa7\xe5\xb0\x8f\n            RectF tempDst = MathUtils.rectFTake(0, 0, getWidth(), getHeight());\n            //\xe8\xae\xa1\xe7\xae\x97fit center\xe7\x9f\xa9\xe9\x98\xb5\n            matrix.setRectToRect(tempSrc, tempDst, Matrix.ScaleToFit.CENTER);\n            //\xe9\x87\x8a\xe6\x94\xbe\xe4\xb8\xb4\xe6\x97\xb6\xe5\xaf\xb9\xe8\xb1\xa1\n            MathUtils.rectFGiven(tempDst);\n            MathUtils.rectFGiven(tempSrc);\n        }\n        return matrix;\n    }\n\n    /**\n     * \xe8\x8e\xb7\xe5\x8f\x96\xe5\x9b\xbe\xe7\x89\x87\xe6\x80\xbb\xe5\x8f\x98\xe6\x8d\xa2\xe7\x9f\xa9\xe9\x98\xb5.\n     * <p>\n     * \xe6\x80\xbb\xe5\x8f\x98\xe6\x8d\xa2\xe7\x9f\xa9\xe9\x98\xb5\xe4\xb8\xba\xe5\x86\x85\xe9\x83\xa8\xe5\x8f\x98\xe6\x8d\xa2\xe7\x9f\xa9\xe9\x98\xb5x\xe5\xa4\x96\xe9\x83\xa8\xe5\x8f\x98\xe6\x8d\xa2\xe7\x9f\xa9\xe9\x98\xb5,\xe5\x86\xb3\xe5\xae\x9a\xe4\xba\x86\xe5\x8e\x9f\xe5\x9b\xbe\xe5\x88\xb0\xe6\x89\x80\xe8\xa7\x81\xe6\x9c\x80\xe7\xbb\x88\xe7\x8a\xb6\xe6\x80\x81\xe7\x9a\x84\xe5\x8f\x98\xe6\x8d\xa2\n     * \xe5\xbd\x93\xe5\xb0\x9a\xe6\x9c\xaa\xe5\xb8\x83\xe5\xb1\x80\xe6\x88\x96\xe8\x80\x85\xe5\x8e\x9f\xe5\x9b\xbe\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\xe6\x97\xb6,\xe5\x85\xb6\xe5\x80\xbc\xe6\x97\xa0\xe6\x84\x8f\xe4\xb9\x89.\xe6\x89\x80\xe4\xbb\xa5\xe5\x9c\xa8\xe8\xb0\x83\xe7\x94\xa8\xe5\x89\x8d\xe9\x9c\x80\xe8\xa6\x81\xe7\xa1\xae\xe4\xbf\x9d\xe5\x89\x8d\xe7\xbd\xae\xe6\x9d\xa1\xe4\xbb\xb6\xe6\x9c\x89\xe6\x95\x88,\xe5\x90\xa6\xe5\x88\x99\xe5\xb0\x86\xe5\xbd\xb1\xe5\x93\x8d\xe8\xae\xa1\xe7\xae\x97\xe7\xbb\x93\xe6\x9e\x9c.\n     *\n     * @param matrix \xe7\x94\xa8\xe4\xba\x8e\xe5\xa1\xab\xe5\x85\x85\xe7\xbb\x93\xe6\x9e\x9c\xe7\x9a\x84\xe5\xaf\xb9\xe8\xb1\xa1\n     * @return \xe5\xa6\x82\xe6\x9e\x9c\xe4\xbc\xa0\xe4\xba\x86matrix\xe5\x8f\x82\xe6\x95\xb0\xe5\x88\x99\xe5\xb0\x86matrix\xe5\xa1\xab\xe5\x85\x85\xe5\x90\x8e\xe8\xbf\x94\xe5\x9b\x9e, \xe5\x90\xa6\xe5\x88\x99new\xe4\xb8\x80\xe4\xb8\xaa\xe5\xa1\xab\xe5\x85\x85\xe8\xbf\x94\xe5\x9b\x9e\n     * @see #getOuterMatrix(Matrix)\n     * @see #getInnerMatrix(Matrix)\n     */\n    public Matrix getCurrentImageMatrix(Matrix matrix) {\n        //\xe8\x8e\xb7\xe5\x8f\x96\xe5\x86\x85\xe9\x83\xa8\xe5\x8f\x98\xe6\x8d\xa2\xe7\x9f\xa9\xe9\x98\xb5\n        matrix = getInnerMatrix(matrix);\n        //\xe4\xb9\x98\xe4\xb8\x8a\xe5\xa4\x96\xe9\x83\xa8\xe5\x8f\x98\xe6\x8d\xa2\xe7\x9f\xa9\xe9\x98\xb5\n        matrix.postConcat(mOuterMatrix);\n        return matrix;\n    }\n\n    /**\n     * \xe8\x8e\xb7\xe5\x8f\x96\xe5\xbd\x93\xe5\x89\x8d\xe5\x8f\x98\xe6\x8d\xa2\xe5\x90\x8e\xe7\x9a\x84\xe5\x9b\xbe\xe7\x89\x87\xe4\xbd\x8d\xe7\xbd\xae\xe5\x92\x8c\xe5\xb0\xba\xe5\xaf\xb8\n     * <p>\n     * \xe5\xbd\x93\xe5\xb0\x9a\xe6\x9c\xaa\xe5\xb8\x83\xe5\xb1\x80\xe6\x88\x96\xe8\x80\x85\xe5\x8e\x9f\xe5\x9b\xbe\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\xe6\x97\xb6,\xe5\x85\xb6\xe5\x80\xbc\xe6\x97\xa0\xe6\x84\x8f\xe4\xb9\x89.\xe6\x89\x80\xe4\xbb\xa5\xe5\x9c\xa8\xe8\xb0\x83\xe7\x94\xa8\xe5\x89\x8d\xe9\x9c\x80\xe8\xa6\x81\xe7\xa1\xae\xe4\xbf\x9d\xe5\x89\x8d\xe7\xbd\xae\xe6\x9d\xa1\xe4\xbb\xb6\xe6\x9c\x89\xe6\x95\x88,\xe5\x90\xa6\xe5\x88\x99\xe5\xb0\x86\xe5\xbd\xb1\xe5\x93\x8d\xe8\xae\xa1\xe7\xae\x97\xe7\xbb\x93\xe6\x9e\x9c.\n     *\n     * @param rectF \xe7\x94\xa8\xe4\xba\x8e\xe5\xa1\xab\xe5\x85\x85\xe7\xbb\x93\xe6\x9e\x9c\xe7\x9a\x84\xe5\xaf\xb9\xe8\xb1\xa1\n     * @return \xe5\xa6\x82\xe6\x9e\x9c\xe4\xbc\xa0\xe4\xba\x86rectF\xe5\x8f\x82\xe6\x95\xb0\xe5\x88\x99\xe5\xb0\x86rectF\xe5\xa1\xab\xe5\x85\x85\xe5\x90\x8e\xe8\xbf\x94\xe5\x9b\x9e, \xe5\x90\xa6\xe5\x88\x99new\xe4\xb8\x80\xe4\xb8\xaa\xe5\xa1\xab\xe5\x85\x85\xe8\xbf\x94\xe5\x9b\x9e\n     * @see #getCurrentImageMatrix(Matrix)\n     */\n    public RectF getImageBound(RectF rectF) {\n        if (rectF == null) {\n            rectF = new RectF();\n        } else {\n            rectF.setEmpty();\n        }\n        if (!isReady()) {\n            return rectF;\n        } else {\n            //\xe7\x94\xb3\xe8\xaf\xb7\xe4\xb8\x80\xe4\xb8\xaa\xe7\xa9\xbamatrix\n            Matrix matrix = MathUtils.matrixTake();\n            //\xe8\x8e\xb7\xe5\x8f\x96\xe5\xbd\x93\xe5\x89\x8d\xe6\x80\xbb\xe5\x8f\x98\xe6\x8d\xa2\xe7\x9f\xa9\xe9\x98\xb5\n            getCurrentImageMatrix(matrix);\n            //\xe5\xaf\xb9\xe5\x8e\x9f\xe5\x9b\xbe\xe7\x9f\xa9\xe5\xbd\xa2\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8f\x98\xe6\x8d\xa2\xe5\xbe\x97\xe5\x88\xb0\xe5\xbd\x93\xe5\x89\x8d\xe6\x98\xbe\xe7\xa4\xba\xe7\x9f\xa9\xe5\xbd\xa2\n            rectF.set(0, 0, getDrawable().getIntrinsicWidth(), getDrawable().getIntrinsicHeight());\n            matrix.mapRect(rectF);\n            //\xe9\x87\x8a\xe6\x94\xbe\xe4\xb8\xb4\xe6\x97\xb6matrix\n            MathUtils.matrixGiven(matrix);\n            return rectF;\n        }\n    }\n\n    /**\n     * \xe8\x8e\xb7\xe5\x8f\x96\xe5\xbd\x93\xe5\x89\x8d\xe8\xae\xbe\xe7\xbd\xae\xe7\x9a\x84mask\n     *\n     * @return \xe8\xbf\x94\xe5\x9b\x9e\xe5\xbd\x93\xe5\x89\x8d\xe7\x9a\x84mask\xe5\xaf\xb9\xe8\xb1\xa1\xe5\x89\xaf\xe6\x9c\xac, \xe5\xa6\x82\xe6\x9e\x9c\xe5\xbd\x93\xe5\x89\x8d\xe6\xb2\xa1\xe6\x9c\x89\xe8\xae\xbe\xe7\xbd\xaemask\xe5\x88\x99\xe8\xbf\x94\xe5\x9b\x9enull\n     */\n    public RectF getMask() {\n        if (mMask != null) {\n            return new RectF(mMask);\n        } else {\n            return null;\n        }\n    }\n\n\n    ////////////////////////////////\xe7\x94\xa8\xe4\xba\x8e\xe9\x87\x8d\xe8\xbd\xbd\xe5\xae\x9a\xe5\x88\xb6////////////////////////////////\n\n    /**\n     * \xe8\x8e\xb7\xe5\x8f\x96\xe5\xbd\x93\xe5\x89\x8d\xe6\x89\x8b\xe5\x8a\xbf\xe7\x8a\xb6\xe6\x80\x81\n     *\n     * @see #PINCH_MODE_FREE\n     * @see #PINCH_MODE_SCROLL\n     * @see #PINCH_MODE_SCALE\n     */\n    public int getPinchMode() {\n        return mPinchMode;\n    }\n\n    /**\n     * \xe4\xb8\x8eViewPager\xe7\xbb\x93\xe5\x90\x88\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99\xe4\xbd\xbf\xe7\x94\xa8\n     *\n     * @param direction\n     * @return\n     */\n    @Override\n    public boolean canScrollHorizontally(int direction) {\n        if (mPinchMode == PinchImageView.PINCH_MODE_SCALE) {\n            return true;\n        }\n        RectF bound = getImageBound(null);\n        if (bound == null) {\n            return false;\n        }\n        if (bound.isEmpty()) {\n            return false;\n        }\n        if (direction > 0) {\n            return bound.right > getWidth();\n        } else {\n            return bound.left < 0;\n        }\n    }\n\n\n    ////////////////////////////////\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96////////////////////////////////\n\n    /**\n     * \xe4\xb8\x8eViewPager\xe7\xbb\x93\xe5\x90\x88\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99\xe4\xbd\xbf\xe7\x94\xa8\n     *\n     * @param direction\n     * @return\n     */\n    @Override\n    public boolean canScrollVertically(int direction) {\n        if (mPinchMode == PinchImageView.PINCH_MODE_SCALE) {\n            return true;\n        }\n        RectF bound = getImageBound(null);\n        if (bound == null) {\n            return false;\n        }\n        if (bound.isEmpty()) {\n            return false;\n        }\n        if (direction > 0) {\n            return bound.bottom > getHeight();\n        } else {\n            return bound.top < 0;\n        }\n    }\n\n    /**\n     * \xe6\x89\xa7\xe8\xa1\x8c\xe5\xbd\x93\xe5\x89\x8douterMatrix\xe5\x88\xb0\xe6\x8c\x87\xe5\xae\x9aouterMatrix\xe6\xb8\x90\xe5\x8f\x98\xe7\x9a\x84\xe5\x8a\xa8\xe7\x94\xbb\n     * <p>\n     * \xe8\xb0\x83\xe7\x94\xa8\xe6\xad\xa4\xe6\x96\xb9\xe6\xb3\x95\xe4\xbc\x9a\xe5\x81\x9c\xe6\xad\xa2\xe6\xad\xa3\xe5\x9c\xa8\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xb8\xad\xe7\x9a\x84\xe6\x89\x8b\xe5\x8a\xbf\xe4\xbb\xa5\xe5\x8f\x8a\xe6\x89\x8b\xe5\x8a\xbf\xe5\x8a\xa8\xe7\x94\xbb.\n     * \xe5\xbd\x93duration\xe4\xb8\xba0\xe6\x97\xb6,outerMatrix\xe5\x80\xbc\xe4\xbc\x9a\xe8\xa2\xab\xe7\xab\x8b\xe5\x8d\xb3\xe8\xae\xbe\xe7\xbd\xae\xe8\x80\x8c\xe4\xb8\x8d\xe4\xbc\x9a\xe5\x90\xaf\xe5\x8a\xa8\xe5\x8a\xa8\xe7\x94\xbb.\n     *\n     * @param endMatrix \xe5\x8a\xa8\xe7\x94\xbb\xe7\x9b\xae\xe6\xa0\x87\xe7\x9f\xa9\xe9\x98\xb5\n     * @param duration  \xe5\x8a\xa8\xe7\x94\xbb\xe6\x8c\x81\xe7\xbb\xad\xe6\x97\xb6\xe9\x97\xb4\n     * @see #getOuterMatrix(Matrix)\n     */\n    public void outerMatrixTo(Matrix endMatrix, long duration) {\n        if (endMatrix == null) {\n            return;\n        }\n        //\xe5\xb0\x86\xe6\x89\x8b\xe5\x8a\xbf\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xbaPINCH_MODE_FREE\xe5\xb0\x86\xe5\x81\x9c\xe6\xad\xa2\xe5\x90\x8e\xe7\xbb\xad\xe6\x89\x8b\xe5\x8a\xbf\xe7\x9a\x84\xe8\xa7\xa6\xe5\x8f\x91\n        mPinchMode = PINCH_MODE_FREE;\n        //\xe5\x81\x9c\xe6\xad\xa2\xe6\x89\x80\xe6\x9c\x89\xe6\xad\xa3\xe5\x9c\xa8\xe8\xbf\x9b\xe8\xa1\x8c\xe7\x9a\x84\xe5\x8a\xa8\xe7\x94\xbb\n        cancelAllAnimator();\n        //\xe5\xa6\x82\xe6\x9e\x9c\xe6\x97\xb6\xe9\x97\xb4\xe4\xb8\x8d\xe5\x90\x88\xe6\xb3\x95\xe7\xab\x8b\xe5\x8d\xb3\xe6\x89\xa7\xe8\xa1\x8c\xe7\xbb\x93\xe6\x9e\x9c\n        if (duration <= 0) {\n            mOuterMatrix.set(endMatrix);\n            dispatchOuterMatrixChanged();\n            invalidate();\n        } else {\n            //\xe5\x88\x9b\xe5\xbb\xba\xe7\x9f\xa9\xe9\x98\xb5\xe5\x8f\x98\xe5\x8c\x96\xe5\x8a\xa8\xe7\x94\xbb\n            mScaleAnimator = new ScaleAnimator(mOuterMatrix, endMatrix, duration);\n            mScaleAnimator.start();\n        }\n    }\n\n    /**\n     * \xe6\x89\xa7\xe8\xa1\x8c\xe5\xbd\x93\xe5\x89\x8dmask\xe5\x88\xb0\xe6\x8c\x87\xe5\xae\x9amask\xe7\x9a\x84\xe5\x8f\x98\xe5\x8c\x96\xe5\x8a\xa8\xe7\x94\xbb\n     * <p>\n     * \xe8\xb0\x83\xe7\x94\xa8\xe6\xad\xa4\xe6\x96\xb9\xe6\xb3\x95\xe4\xb8\x8d\xe4\xbc\x9a\xe5\x81\x9c\xe6\xad\xa2\xe6\x89\x8b\xe5\x8a\xbf\xe4\xbb\xa5\xe5\x8f\x8a\xe6\x89\x8b\xe5\x8a\xbf\xe7\x9b\xb8\xe5\x85\xb3\xe5\x8a\xa8\xe7\x94\xbb,\xe4\xbd\x86\xe4\xbc\x9a\xe5\x81\x9c\xe6\xad\xa2\xe6\xad\xa3\xe5\x9c\xa8\xe8\xbf\x9b\xe8\xa1\x8c\xe7\x9a\x84mask\xe5\x8a\xa8\xe7\x94\xbb.\n     * \xe5\xbd\x93\xe5\x89\x8dmask\xe4\xb8\xbanull\xe6\x97\xb6,\xe5\x88\x99\xe4\xb8\x8d\xe6\x89\xa7\xe8\xa1\x8c\xe5\x8a\xa8\xe7\x94\xbb\xe7\xab\x8b\xe5\x8d\xb3\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xba\xe7\x9b\xae\xe6\xa0\x87mask.\n     * \xe5\xbd\x93duration\xe4\xb8\xba0\xe6\x97\xb6,\xe7\xab\x8b\xe5\x8d\xb3\xe5\xb0\x86\xe5\xbd\x93\xe5\x89\x8dmask\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xba\xe7\x9b\xae\xe6\xa0\x87mask,\xe4\xb8\x8d\xe4\xbc\x9a\xe6\x89\xa7\xe8\xa1\x8c\xe5\x8a\xa8\xe7\x94\xbb.\n     *\n     * @param mask     \xe5\x8a\xa8\xe7\x94\xbb\xe7\x9b\xae\xe6\xa0\x87mask\n     * @param duration \xe5\x8a\xa8\xe7\x94\xbb\xe6\x8c\x81\xe7\xbb\xad\xe6\x97\xb6\xe9\x97\xb4\n     * @see #getMask()\n     */\n    public void zoomMaskTo(RectF mask, long duration) {\n        if (mask == null) {\n            return;\n        }\n        //\xe5\x81\x9c\xe6\xad\xa2mask\xe5\x8a\xa8\xe7\x94\xbb\n        if (mMaskAnimator != null) {\n            mMaskAnimator.cancel();\n            mMaskAnimator = null;\n        }\n        //\xe5\xa6\x82\xe6\x9e\x9cduration\xe4\xb8\xba0\xe6\x88\x96\xe8\x80\x85\xe4\xb9\x8b\xe5\x89\x8d\xe6\xb2\xa1\xe6\x9c\x89\xe8\xae\xbe\xe7\xbd\xae\xe8\xbf\x87mask,\xe4\xb8\x8d\xe6\x89\xa7\xe8\xa1\x8c\xe5\x8a\xa8\xe7\x94\xbb,\xe7\xab\x8b\xe5\x8d\xb3\xe8\xae\xbe\xe7\xbd\xae\n        if (duration <= 0 || mMask == null) {\n            if (mMask == null) {\n                mMask = new RectF();\n            }\n            mMask.set(mask);\n            invalidate();\n        } else {\n            //\xe6\x89\xa7\xe8\xa1\x8cmask\xe5\x8a\xa8\xe7\x94\xbb\n            mMaskAnimator = new MaskAnimator(mMask, mask, duration);\n            mMaskAnimator.start();\n        }\n    }\n\n    /**\n     * \xe9\x87\x8d\xe7\xbd\xae\xe6\x89\x80\xe6\x9c\x89\xe7\x8a\xb6\xe6\x80\x81\n     * <p>\n     * \xe9\x87\x8d\xe7\xbd\xae\xe4\xbd\x8d\xe7\xbd\xae\xe5\x88\xb0fit center\xe7\x8a\xb6\xe6\x80\x81,\xe6\xb8\x85\xe7\xa9\xbamask,\xe5\x81\x9c\xe6\xad\xa2\xe6\x89\x80\xe6\x9c\x89\xe6\x89\x8b\xe5\x8a\xbf,\xe5\x81\x9c\xe6\xad\xa2\xe6\x89\x80\xe6\x9c\x89\xe5\x8a\xa8\xe7\x94\xbb.\n     * \xe4\xbd\x86\xe4\xb8\x8d\xe6\xb8\x85\xe7\xa9\xbadrawable,\xe4\xbb\xa5\xe5\x8f\x8a\xe4\xba\x8b\xe4\xbb\xb6\xe7\xbb\x91\xe5\xae\x9a\xe7\x9b\xb8\xe5\x85\xb3\xe6\x95\xb0\xe6\x8d\xae.\n     */\n    public void reset() {\n        //\xe9\x87\x8d\xe7\xbd\xae\xe4\xbd\x8d\xe7\xbd\xae\xe5\x88\xb0fit\n        mOuterMatrix.reset();\n        dispatchOuterMatrixChanged();\n        //\xe6\xb8\x85\xe7\xa9\xbamask\n        mMask = null;\n        //\xe5\x81\x9c\xe6\xad\xa2\xe6\x89\x80\xe6\x9c\x89\xe6\x89\x8b\xe5\x8a\xbf\n        mPinchMode = PINCH_MODE_FREE;\n        mLastMovePoint.set(0, 0);\n        mScaleCenter.set(0, 0);\n        mScaleBase = 0;\n        //\xe5\x81\x9c\xe6\xad\xa2\xe6\x89\x80\xe6\x9c\x89\xe5\x8a\xa8\xe7\x94\xbb\n        if (mMaskAnimator != null) {\n            mMaskAnimator.cancel();\n            mMaskAnimator = null;\n        }\n        cancelAllAnimator();\n        //\xe9\x87\x8d\xe7\xbb\x98\n        invalidate();\n    }\n\n    /**\n     * \xe6\xb7\xbb\xe5\x8a\xa0\xe5\xa4\x96\xe9\x83\xa8\xe7\x9f\xa9\xe9\x98\xb5\xe5\x8f\x98\xe5\x8c\x96\xe7\x9b\x91\xe5\x90\xac\n     *\n     * @param listener\n     */\n    public void addOuterMatrixChangedListener(OuterMatrixChangedListener listener) {\n        if (listener == null) {\n            return;\n        }\n        //\xe5\xa6\x82\xe6\x9e\x9c\xe7\x9b\x91\xe5\x90\xac\xe5\x88\x97\xe8\xa1\xa8\xe6\xb2\xa1\xe6\x9c\x89\xe8\xa2\xab\xe4\xbf\xae\xe6\x94\xb9\xe9\x94\x81\xe5\xae\x9a\xe7\x9b\xb4\xe6\x8e\xa5\xe5\xb0\x86\xe7\x9b\x91\xe5\x90\xac\xe6\xb7\xbb\xe5\x8a\xa0\xe5\x88\xb0\xe7\x9b\x91\xe5\x90\xac\xe5\x88\x97\xe8\xa1\xa8\n        if (mDispatchOuterMatrixChangedLock == 0) {\n            if (mOuterMatrixChangedListeners == null) {\n                mOuterMatrixChangedListeners = new ArrayList<OuterMatrixChangedListener>();\n            }\n            mOuterMatrixChangedListeners.add(listener);\n        } else {\n            //\xe5\xa6\x82\xe6\x9e\x9c\xe7\x9b\x91\xe5\x90\xac\xe5\x88\x97\xe8\xa1\xa8\xe4\xbf\xae\xe6\x94\xb9\xe8\xa2\xab\xe9\x94\x81\xe5\xae\x9a,\xe9\x82\xa3\xe4\xb9\x88\xe5\xb0\x9d\xe8\xaf\x95\xe5\x9c\xa8\xe7\x9b\x91\xe5\x90\xac\xe5\x88\x97\xe8\xa1\xa8\xe5\x89\xaf\xe6\x9c\xac\xe4\xb8\x8a\xe6\xb7\xbb\xe5\x8a\xa0\n            //\xe7\x9b\x91\xe5\x90\xac\xe5\x88\x97\xe8\xa1\xa8\xe5\x89\xaf\xe6\x9c\xac\xe5\xb0\x86\xe4\xbc\x9a\xe5\x9c\xa8\xe9\x94\x81\xe5\xae\x9a\xe8\xa2\xab\xe8\xa7\xa3\xe9\x99\xa4\xe6\x97\xb6\xe6\x9b\xbf\xe6\x8d\xa2\xe5\x88\xb0\xe7\x9b\x91\xe5\x90\xac\xe5\x88\x97\xe8\xa1\xa8\xe9\x87\x8c\n            if (mOuterMatrixChangedListenersCopy == null) {\n                if (mOuterMatrixChangedListeners != null) {\n                    mOuterMatrixChangedListenersCopy = new ArrayList<OuterMatrixChangedListener>(mOuterMatrixChangedListeners);\n                } else {\n                    mOuterMatrixChangedListenersCopy = new ArrayList<OuterMatrixChangedListener>();\n                }\n            }\n            mOuterMatrixChangedListenersCopy.add(listener);\n        }\n    }\n\n\n    ////////////////////////////////\xe7\xbb\x98\xe5\x88\xb6////////////////////////////////\n\n    /**\n     * \xe5\x88\xa0\xe9\x99\xa4\xe5\xa4\x96\xe9\x83\xa8\xe7\x9f\xa9\xe9\x98\xb5\xe5\x8f\x98\xe5\x8c\x96\xe7\x9b\x91\xe5\x90\xac\n     *\n     * @param listener\n     */\n    public void removeOuterMatrixChangedListener(OuterMatrixChangedListener listener) {\n        if (listener == null) {\n            return;\n        }\n        //\xe5\xa6\x82\xe6\x9e\x9c\xe7\x9b\x91\xe5\x90\xac\xe5\x88\x97\xe8\xa1\xa8\xe6\xb2\xa1\xe6\x9c\x89\xe8\xa2\xab\xe4\xbf\xae\xe6\x94\xb9\xe9\x94\x81\xe5\xae\x9a\xe7\x9b\xb4\xe6\x8e\xa5\xe5\x9c\xa8\xe7\x9b\x91\xe5\x90\xac\xe5\x88\x97\xe8\xa1\xa8\xe6\x95\xb0\xe6\x8d\xae\xe7\xbb\x93\xe6\x9e\x84\xe4\xb8\x8a\xe4\xbf\xae\xe6\x94\xb9\n        if (mDispatchOuterMatrixChangedLock == 0) {\n            if (mOuterMatrixChangedListeners != null) {\n                mOuterMatrixChangedListeners.remove(listener);\n            }\n        } else {\n            //\xe5\xa6\x82\xe6\x9e\x9c\xe7\x9b\x91\xe5\x90\xac\xe5\x88\x97\xe8\xa1\xa8\xe8\xa2\xab\xe4\xbf\xae\xe6\x94\xb9\xe9\x94\x81\xe5\xae\x9a,\xe9\x82\xa3\xe4\xb9\x88\xe5\xb0\xb1\xe5\x9c\xa8\xe5\x85\xb6\xe5\x89\xaf\xe6\x9c\xac\xe4\xb8\x8a\xe4\xbf\xae\xe6\x94\xb9\n            //\xe5\x85\xb6\xe5\x89\xaf\xe6\x9c\xac\xe5\xb0\x86\xe4\xbc\x9a\xe5\x9c\xa8\xe9\x94\x81\xe5\xae\x9a\xe8\xa7\xa3\xe9\x99\xa4\xe6\x97\xb6\xe6\x9b\xbf\xe6\x8d\xa2\xe5\x9b\x9e\xe7\x9b\x91\xe5\x90\xac\xe5\x88\x97\xe8\xa1\xa8\n            if (mOuterMatrixChangedListenersCopy == null) {\n                if (mOuterMatrixChangedListeners != null) {\n                    mOuterMatrixChangedListenersCopy = new ArrayList<OuterMatrixChangedListener>(mOuterMatrixChangedListeners);\n                }\n            }\n            if (mOuterMatrixChangedListenersCopy != null) {\n                mOuterMatrixChangedListenersCopy.remove(listener);\n            }\n        }\n    }\n\n\n    ////////////////////////////////\xe6\x9c\x89\xe6\x95\x88\xe6\x80\xa7\xe5\x88\xa4\xe6\x96\xad////////////////////////////////\n\n    /**\n     * \xe8\xa7\xa6\xe5\x8f\x91\xe5\xa4\x96\xe9\x83\xa8\xe7\x9f\xa9\xe9\x98\xb5\xe4\xbf\xae\xe6\x94\xb9\xe4\xba\x8b\xe4\xbb\xb6\n     * <p>\n     * \xe9\x9c\x80\xe8\xa6\x81\xe5\x9c\xa8\xe6\xaf\x8f\xe6\xac\xa1\xe7\xbb\x99\xe5\xa4\x96\xe9\x83\xa8\xe7\x9f\xa9\xe9\x98\xb5\xe8\xae\xbe\xe7\xbd\xae\xe5\x80\xbc\xe6\x97\xb6\xe9\x83\xbd\xe8\xb0\x83\xe7\x94\xa8\xe6\xad\xa4\xe6\x96\xb9\xe6\xb3\x95.\n     *\n     * @see #mOuterMatrix\n     */\n    private void dispatchOuterMatrixChanged() {\n        if (mOuterMatrixChangedListeners == null) {\n            return;\n        }\n        //\xe5\xa2\x9e\xe5\x8a\xa0\xe9\x94\x81\n        //\xe8\xbf\x99\xe9\x87\x8c\xe4\xb9\x8b\xe6\x89\x80\xe4\xbb\xa5\xe7\x94\xa8\xe8\xae\xa1\xe6\x95\xb0\xe5\x99\xa8\xe5\x81\x9a\xe9\x94\x81\xe5\xae\x9a\xe6\x98\xaf\xe5\x9b\xa0\xe4\xb8\xba\xe5\x8f\xaf\xe8\x83\xbd\xe5\x9c\xa8\xe9\x94\x81\xe5\xae\x9a\xe6\x9c\x9f\xe9\x97\xb4\xe5\x8f\x88\xe9\x97\xb4\xe6\x8e\xa5\xe8\xb0\x83\xe7\x94\xa8\xe4\xba\x86\xe6\xad\xa4\xe6\x96\xb9\xe6\xb3\x95\xe4\xba\xa7\xe7\x94\x9f\xe9\x80\x92\xe5\xbd\x92\n        //\xe4\xbd\xbf\xe7\x94\xa8boolean\xe6\x97\xa0\xe6\xb3\x95\xe5\x88\xa4\xe6\x96\xad\xe9\x80\x92\xe5\xbd\x92\xe7\xbb\x93\xe6\x9d\x9f\n        mDispatchOuterMatrixChangedLock++;\n        //\xe5\x9c\xa8\xe5\x88\x97\xe8\xa1\xa8\xe5\xbe\xaa\xe7\x8e\xaf\xe8\xbf\x87\xe7\xa8\x8b\xe4\xb8\xad\xe4\xb8\x8d\xe5\x85\x81\xe8\xae\xb8\xe4\xbf\xae\xe6\x94\xb9\xe5\x88\x97\xe8\xa1\xa8,\xe5\x90\xa6\xe5\x88\x99\xe5\xb0\x86\xe5\xbc\x95\xe5\x8f\x91\xe5\xb4\xa9\xe6\xba\x83\n        for (OuterMatrixChangedListener listener : mOuterMatrixChangedListeners) {\n            listener.onOuterMatrixChanged(this);\n        }\n        //\xe5\x87\x8f\xe9\x94\x81\n        mDispatchOuterMatrixChangedLock--;\n        //\xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe9\x80\x92\xe5\xbd\x92\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5,mDispatchOuterMatrixChangedLock\xe5\x8f\xaf\xe8\x83\xbd\xe5\xa4\xa7\xe4\xba\x8e1,\xe5\x8f\xaa\xe6\x9c\x89\xe5\x87\x8f\xe5\x88\xb00\xe6\x89\x8d\xe8\x83\xbd\xe7\xae\x97\xe5\x88\x97\xe8\xa1\xa8\xe7\x9a\x84\xe9\x94\x81\xe5\xae\x9a\xe8\xa7\xa3\xe9\x99\xa4\n        if (mDispatchOuterMatrixChangedLock == 0) {\n            //\xe5\xa6\x82\xe6\x9e\x9c\xe6\x9c\x9f\xe9\x97\xb4\xe6\x9c\x89\xe4\xbf\xae\xe6\x94\xb9\xe5\x88\x97\xe8\xa1\xa8,\xe9\x82\xa3\xe4\xb9\x88\xe5\x89\xaf\xe6\x9c\xac\xe5\xb0\x86\xe4\xb8\x8d\xe4\xb8\xbanull\n            if (mOuterMatrixChangedListenersCopy != null) {\n                //\xe5\xb0\x86\xe5\x89\xaf\xe6\x9c\xac\xe6\x9b\xbf\xe6\x8d\xa2\xe6\x8e\x89\xe6\xad\xa3\xe5\xbc\x8f\xe7\x9a\x84\xe5\x88\x97\xe8\xa1\xa8\n                mOuterMatrixChangedListeners = mOuterMatrixChangedListenersCopy;\n                //\xe6\xb8\x85\xe7\xa9\xba\xe5\x89\xaf\xe6\x9c\xac\n                mOuterMatrixChangedListenersCopy = null;\n            }\n        }\n    }\n\n\n    ////////////////////////////////mask\xe5\x8a\xa8\xe7\x94\xbb\xe5\xa4\x84\xe7\x90\x86////////////////////////////////\n\n    /**\n     * \xe8\x8e\xb7\xe5\x8f\x96\xe5\x9b\xbe\xe7\x89\x87\xe6\x9c\x80\xe5\xa4\xa7\xe5\x8f\xaf\xe6\x94\xbe\xe5\xa4\xa7\xe7\x9a\x84\xe6\xaf\x94\xe4\xbe\x8b\n     * <p>\n     * \xe5\xa6\x82\xe6\x9e\x9c\xe6\x94\xbe\xe5\xa4\xa7\xe5\xa4\xa7\xe4\xba\x8e\xe8\xbf\x99\xe4\xb8\xaa\xe6\xaf\x94\xe4\xbe\x8b\xe5\x88\x99\xe4\xb8\x8d\xe8\xa2\xab\xe5\x85\x81\xe8\xae\xb8.\n     * \xe5\x9c\xa8\xe5\x8f\x8c\xe6\x89\x8b\xe7\xbc\xa9\xe6\x94\xbe\xe8\xbf\x87\xe7\xa8\x8b\xe4\xb8\xad\xe5\xa6\x82\xe6\x9e\x9c\xe5\x9b\xbe\xe7\x89\x87\xe6\x94\xbe\xe5\xa4\xa7\xe6\xaf\x94\xe4\xbe\x8b\xe5\xa4\xa7\xe4\xba\x8e\xe8\xbf\x99\xe4\xb8\xaa\xe5\x80\xbc,\xe6\x89\x8b\xe6\x8c\x87\xe9\x87\x8a\xe6\x94\xbe\xe5\xb0\x86\xe5\x9b\x9e\xe5\xbc\xb9\xe5\x88\xb0\xe8\xbf\x99\xe4\xb8\xaa\xe6\xaf\x94\xe4\xbe\x8b.\n     * \xe5\x9c\xa8\xe5\x8f\x8c\xe5\x87\xbb\xe6\x94\xbe\xe5\xa4\xa7\xe8\xbf\x87\xe7\xa8\x8b\xe4\xb8\xad\xe4\xb8\x8d\xe5\x85\x81\xe8\xae\xb8\xe6\x94\xbe\xe5\xa4\xa7\xe6\xaf\x94\xe4\xbe\x8b\xe5\xa4\xa7\xe4\xba\x8e\xe8\xbf\x99\xe4\xb8\xaa\xe5\x80\xbc.\n     * \xe8\xa6\x86\xe7\x9b\x96\xe6\xad\xa4\xe6\x96\xb9\xe6\xb3\x95\xe5\x8f\xaf\xe4\xbb\xa5\xe5\xae\x9a\xe5\x88\xb6\xe4\xb8\x8d\xe5\x90\x8c\xe6\x83\x85\xe5\x86\xb5\xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84\xe6\x9c\x80\xe5\xa4\xa7\xe5\x8f\xaf\xe6\x94\xbe\xe5\xa4\xa7\xe6\xaf\x94\xe4\xbe\x8b.\n     *\n     * @return \xe7\xbc\xa9\xe6\x94\xbe\xe6\xaf\x94\xe4\xbe\x8b\n     * @see #scaleEnd()\n     * @see #doubleTap(float, float)\n     */\n    protected float getMaxScale() {\n        return MAX_SCALE;\n    }\n\n    /**\n     * \xe8\xae\xa1\xe7\xae\x97\xe5\x8f\x8c\xe5\x87\xbb\xe4\xb9\x8b\xe5\x90\x8e\xe5\x9b\xbe\xe7\x89\x87\xe6\x8e\xa5\xe4\xb8\x8b\xe6\x9d\xa5\xe5\xba\x94\xe8\xaf\xa5\xe8\xa2\xab\xe7\xbc\xa9\xe6\x94\xbe\xe7\x9a\x84\xe6\xaf\x94\xe4\xbe\x8b\n     * <p>\n     * \xe5\xa6\x82\xe6\x9e\x9c\xe5\x80\xbc\xe5\xa4\xa7\xe4\xba\x8egetMaxScale\xe6\x88\x96\xe8\x80\x85\xe5\xb0\x8f\xe4\xba\x8efit center\xe5\xb0\xba\xe5\xaf\xb8\xef\xbc\x8c\xe5\x88\x99\xe5\xae\x9e\xe9\x99\x85\xe4\xbd\xbf\xe7\x94\xa8\xe5\x8f\x96\xe8\xbe\xb9\xe7\x95\x8c\xe5\x80\xbc.\n     * \xe9\x80\x9a\xe8\xbf\x87\xe8\xa6\x86\xe7\x9b\x96\xe6\xad\xa4\xe6\x96\xb9\xe6\xb3\x95\xe5\x8f\xaf\xe4\xbb\xa5\xe5\xae\x9a\xe5\x88\xb6\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84\xe5\x9b\xbe\xe7\x89\x87\xe8\xa2\xab\xe5\x8f\x8c\xe5\x87\xbb\xe6\x97\xb6\xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84\xe6\x94\xbe\xe5\xa4\xa7\xe7\xad\x96\xe7\x95\xa5.\n     *\n     * @param innerScale \xe5\xbd\x93\xe5\x89\x8d\xe5\x86\x85\xe9\x83\xa8\xe7\x9f\xa9\xe9\x98\xb5\xe7\x9a\x84\xe7\xbc\xa9\xe6\x94\xbe\xe5\x80\xbc\n     * @param outerScale \xe5\xbd\x93\xe5\x89\x8d\xe5\xa4\x96\xe9\x83\xa8\xe7\x9f\xa9\xe9\x98\xb5\xe7\x9a\x84\xe7\xbc\xa9\xe6\x94\xbe\xe5\x80\xbc\n     * @return \xe6\x8e\xa5\xe4\xb8\x8b\xe6\x9d\xa5\xe7\x9a\x84\xe7\xbc\xa9\xe6\x94\xbe\xe6\xaf\x94\xe4\xbe\x8b\n     * @see #doubleTap(float, float)\n     * @see #getMaxScale()\n     */\n    protected float calculateNextScale(float innerScale, float outerScale) {\n        float currentScale = innerScale * outerScale;\n        if (currentScale < MAX_SCALE) {\n            return MAX_SCALE;\n        } else {\n            return innerScale;\n        }\n    }\n\n\n    ////////////////////////////////\xe6\x89\x8b\xe5\x8a\xbf\xe5\x8a\xa8\xe7\x94\xbb\xe5\xa4\x84\xe7\x90\x86////////////////////////////////\n\n    private void initView() {\n        //\xe5\xbc\xba\xe5\x88\xb6\xe8\xae\xbe\xe7\xbd\xae\xe5\x9b\xbe\xe7\x89\x87scaleType\xe4\xb8\xbamatrix\n        super.setScaleType(ScaleType.MATRIX);\n    }\n\n    //\xe4\xb8\x8d\xe5\x85\x81\xe8\xae\xb8\xe8\xae\xbe\xe7\xbd\xaescaleType\xef\xbc\x8c\xe5\x8f\xaa\xe8\x83\xbd\xe7\x94\xa8\xe5\x86\x85\xe9\x83\xa8\xe8\xae\xbe\xe7\xbd\xae\xe7\x9a\x84matrix\n    @Override\n    public void setScaleType(ScaleType scaleType) {\n    }\n\n    @Override\n    protected void onDraw(Canvas canvas) {\n        //\xe5\x9c\xa8\xe7\xbb\x98\xe5\x88\xb6\xe5\x89\x8d\xe8\xae\xbe\xe7\xbd\xae\xe5\x8f\x98\xe6\x8d\xa2\xe7\x9f\xa9\xe9\x98\xb5\n        if (isReady()) {\n            Matrix matrix = MathUtils.matrixTake();\n            setImageMatrix(getCurrentImageMatrix(matrix));\n            MathUtils.matrixGiven(matrix);\n        }\n        //\xe5\xaf\xb9\xe5\x9b\xbe\xe5\x83\x8f\xe5\x81\x9a\xe9\x81\xae\xe7\xbd\xa9\xe5\xa4\x84\xe7\x90\x86\n        if (mMask != null) {\n            canvas.save();\n            canvas.clipRect(mMask);\n            super.onDraw(canvas);\n            canvas.restore();\n        } else {\n            super.onDraw(canvas);\n        }\n    }\n\n    /**\n     * \xe5\x88\xa4\xe6\x96\xad\xe5\xbd\x93\xe5\x89\x8d\xe6\x83\x85\xe5\x86\xb5\xe6\x98\xaf\xe5\x90\xa6\xe8\x83\xbd\xe6\x89\xa7\xe8\xa1\x8c\xe6\x89\x8b\xe5\x8a\xbf\xe7\x9b\xb8\xe5\x85\xb3\xe8\xae\xa1\xe7\xae\x97\n     * <p>\n     * \xe5\x8c\x85\xe6\x8b\xac:\xe6\x98\xaf\xe5\x90\xa6\xe6\x9c\x89\xe5\x9b\xbe\xe7\x89\x87,\xe5\x9b\xbe\xe7\x89\x87\xe6\x98\xaf\xe5\x90\xa6\xe6\x9c\x89\xe5\xb0\xba\xe5\xaf\xb8,\xe6\x8e\xa7\xe4\xbb\xb6\xe6\x98\xaf\xe5\x90\xa6\xe6\x9c\x89\xe5\xb0\xba\xe5\xaf\xb8.\n     *\n     * @return \xe6\x98\xaf\xe5\x90\xa6\xe8\x83\xbd\xe6\x89\xa7\xe8\xa1\x8c\xe6\x89\x8b\xe5\x8a\xbf\xe7\x9b\xb8\xe5\x85\xb3\xe8\xae\xa1\xe7\xae\x97\n     */\n    private boolean isReady() {\n        return getDrawable() != null && getDrawable().getIntrinsicWidth() > 0 && getDrawable().getIntrinsicHeight() > 0\n                && getWidth() > 0 && getHeight() > 0;\n    }\n\n    @Override\n    public boolean onTouchEvent(MotionEvent event) {\n        super.onTouchEvent(event);\n        int action = event.getAction() & MotionEvent.ACTION_MASK;\n        //\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaa\xe7\x82\xb9\xe6\x8a\xac\xe8\xb5\xb7\xe6\x88\x96\xe8\x80\x85\xe5\x8f\x96\xe6\xb6\x88\xef\xbc\x8c\xe7\xbb\x93\xe6\x9d\x9f\xe6\x89\x80\xe6\x9c\x89\xe6\xa8\xa1\xe5\xbc\x8f\n        if (action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_CANCEL) {\n            //\xe5\xa6\x82\xe6\x9e\x9c\xe4\xb9\x8b\xe5\x89\x8d\xe6\x98\xaf\xe7\xbc\xa9\xe6\x94\xbe\xe6\xa8\xa1\xe5\xbc\x8f,\xe8\xbf\x98\xe9\x9c\x80\xe8\xa6\x81\xe8\xa7\xa6\xe5\x8f\x91\xe4\xb8\x80\xe4\xb8\x8b\xe7\xbc\xa9\xe6\x94\xbe\xe7\xbb\x93\xe6\x9d\x9f\xe5\x8a\xa8\xe7\x94\xbb\n            if (mPinchMode == PINCH_MODE_SCALE) {\n                scaleEnd();\n            }\n            mPinchMode = PINCH_MODE_FREE;\n        } else if (action == MotionEvent.ACTION_POINTER_UP) {\n            //\xe5\xa4\x9a\xe4\xb8\xaa\xe6\x89\x8b\xe6\x8c\x87\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe6\x8a\xac\xe8\xb5\xb7\xe4\xb8\x80\xe4\xb8\xaa\xe6\x89\x8b\xe6\x8c\x87,\xe6\xad\xa4\xe6\x97\xb6\xe9\x9c\x80\xe8\xa6\x81\xe6\x98\xaf\xe7\xbc\xa9\xe6\x94\xbe\xe6\xa8\xa1\xe5\xbc\x8f\xe6\x89\x8d\xe8\xa7\xa6\xe5\x8f\x91\n            if (mPinchMode == PINCH_MODE_SCALE) {\n                //\xe6\x8a\xac\xe8\xb5\xb7\xe7\x9a\x84\xe7\x82\xb9\xe5\xa6\x82\xe6\x9e\x9c\xe5\xa4\xa7\xe4\xba\x8e2\xef\xbc\x8c\xe9\x82\xa3\xe4\xb9\x88\xe7\xbc\xa9\xe6\x94\xbe\xe6\xa8\xa1\xe5\xbc\x8f\xe8\xbf\x98\xe6\x9c\x89\xe6\x95\x88\xef\xbc\x8c\xe4\xbd\x86\xe6\x98\xaf\xe6\x9c\x89\xe5\x8f\xaf\xe8\x83\xbd\xe5\x88\x9d\xe5\xa7\x8b\xe7\x82\xb9\xe5\x8f\x98\xe4\xba\x86\xef\xbc\x8c\xe9\x87\x8d\xe6\x96\xb0\xe6\xb5\x8b\xe9\x87\x8f\xe5\x88\x9d\xe5\xa7\x8b\xe7\x82\xb9\n                if (event.getPointerCount() > 2) {\n                    //\xe5\xa6\x82\xe6\x9e\x9c\xe8\xbf\x98\xe6\xb2\xa1\xe7\xbb\x93\xe6\x9d\x9f\xe7\xbc\xa9\xe6\x94\xbe\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x8c\xe4\xbd\x86\xe6\x98\xaf\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe7\x82\xb9\xe6\x8a\xac\xe8\xb5\xb7\xe4\xba\x86\xef\xbc\x8c\xe9\x82\xa3\xe4\xb9\x88\xe8\xae\xa9\xe7\xac\xac\xe4\xba\x8c\xe4\xb8\xaa\xe7\x82\xb9\xe5\x92\x8c\xe7\xac\xac\xe4\xb8\x89\xe4\xb8\xaa\xe7\x82\xb9\xe4\xbd\x9c\xe4\xb8\xba\xe7\xbc\xa9\xe6\x94\xbe\xe6\x8e\xa7\xe5\x88\xb6\xe7\x82\xb9\n                    if (event.getAction() >> 8 == 0) {\n                        saveScaleContext(event.getX(1), event.getY(1), event.getX(2), event.getY(2));\n                        //\xe5\xa6\x82\xe6\x9e\x9c\xe8\xbf\x98\xe6\xb2\xa1\xe7\xbb\x93\xe6\x9d\x9f\xe7\xbc\xa9\xe6\x94\xbe\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x8c\xe4\xbd\x86\xe6\x98\xaf\xe7\xac\xac\xe4\xba\x8c\xe4\xb8\xaa\xe7\x82\xb9\xe6\x8a\xac\xe8\xb5\xb7\xe4\xba\x86\xef\xbc\x8c\xe9\x82\xa3\xe4\xb9\x88\xe8\xae\xa9\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe7\x82\xb9\xe5\x92\x8c\xe7\xac\xac\xe4\xb8\x89\xe4\xb8\xaa\xe7\x82\xb9\xe4\xbd\x9c\xe4\xb8\xba\xe7\xbc\xa9\xe6\x94\xbe\xe6\x8e\xa7\xe5\x88\xb6\xe7\x82\xb9\n                    } else if (event.getAction() >> 8 == 1) {\n                        saveScaleContext(event.getX(0), event.getY(0), event.getX(2), event.getY(2));\n                    }\n                }\n                //\xe5\xa6\x82\xe6\x9e\x9c\xe6\x8a\xac\xe8\xb5\xb7\xe7\x9a\x84\xe7\x82\xb9\xe7\xad\x89\xe4\xba\x8e2,\xe9\x82\xa3\xe4\xb9\x88\xe6\xad\xa4\xe6\x97\xb6\xe5\x8f\xaa\xe5\x89\xa9\xe4\xb8\x8b\xe4\xb8\x80\xe4\xb8\xaa\xe7\x82\xb9,\xe4\xb9\x9f\xe4\xb8\x8d\xe5\x85\x81\xe8\xae\xb8\xe8\xbf\x9b\xe5\x85\xa5\xe5\x8d\x95\xe6\x8c\x87\xe6\xa8\xa1\xe5\xbc\x8f,\xe5\x9b\xa0\xe4\xb8\xba\xe6\xad\xa4\xe6\x97\xb6\xe5\x8f\xaf\xe8\x83\xbd\xe5\x9b\xbe\xe7\x89\x87\xe6\xb2\xa1\xe6\x9c\x89\xe5\x9c\xa8\xe6\xad\xa3\xe7\xa1\xae\xe7\x9a\x84\xe4\xbd\x8d\xe7\xbd\xae\xe4\xb8\x8a\n            }\n            //\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe7\x82\xb9\xe6\x8c\x89\xe4\xb8\x8b\xef\xbc\x8c\xe5\xbc\x80\xe5\x90\xaf\xe6\xbb\x9a\xe5\x8a\xa8\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x8c\xe8\xae\xb0\xe5\xbd\x95\xe5\xbc\x80\xe5\xa7\x8b\xe6\xbb\x9a\xe5\x8a\xa8\xe7\x9a\x84\xe7\x82\xb9\n        } else if (action == MotionEvent.ACTION_DOWN) {\n            //\xe5\x9c\xa8\xe7\x9f\xa9\xe9\x98\xb5\xe5\x8a\xa8\xe7\x94\xbb\xe8\xbf\x87\xe7\xa8\x8b\xe4\xb8\xad\xe4\xb8\x8d\xe5\x85\x81\xe8\xae\xb8\xe5\x90\xaf\xe5\x8a\xa8\xe6\xbb\x9a\xe5\x8a\xa8\xe6\xa8\xa1\xe5\xbc\x8f\n            if (!(mScaleAnimator != null && mScaleAnimator.isRunning())) {\n                //\xe5\x81\x9c\xe6\xad\xa2\xe6\x89\x80\xe6\x9c\x89\xe5\x8a\xa8\xe7\x94\xbb\n                cancelAllAnimator();\n                //\xe5\x88\x87\xe6\x8d\xa2\xe5\x88\xb0\xe6\xbb\x9a\xe5\x8a\xa8\xe6\xa8\xa1\xe5\xbc\x8f\n                mPinchMode = PINCH_MODE_SCROLL;\n                //\xe4\xbf\x9d\xe5\xad\x98\xe8\xa7\xa6\xe5\x8f\x91\xe7\x82\xb9\xe7\x94\xa8\xe4\xba\x8emove\xe8\xae\xa1\xe7\xae\x97\xe5\xb7\xae\xe5\x80\xbc\n                mLastMovePoint.set(event.getX(), event.getY());\n            }\n            //\xe9\x9d\x9e\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe7\x82\xb9\xe6\x8c\x89\xe4\xb8\x8b\xef\xbc\x8c\xe5\x85\xb3\xe9\x97\xad\xe6\xbb\x9a\xe5\x8a\xa8\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x8c\xe5\xbc\x80\xe5\x90\xaf\xe7\xbc\xa9\xe6\x94\xbe\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x8c\xe8\xae\xb0\xe5\xbd\x95\xe7\xbc\xa9\xe6\x94\xbe\xe6\xa8\xa1\xe5\xbc\x8f\xe7\x9a\x84\xe4\xb8\x80\xe4\xba\x9b\xe5\x88\x9d\xe5\xa7\x8b\xe6\x95\xb0\xe6\x8d\xae\n        } else if (action == MotionEvent.ACTION_POINTER_DOWN) {\n            //\xe5\x81\x9c\xe6\xad\xa2\xe6\x89\x80\xe6\x9c\x89\xe5\x8a\xa8\xe7\x94\xbb\n            cancelAllAnimator();\n            //\xe5\x88\x87\xe6\x8d\xa2\xe5\x88\xb0\xe7\xbc\xa9\xe6\x94\xbe\xe6\xa8\xa1\xe5\xbc\x8f\n            mPinchMode = PINCH_MODE_SCALE;\n            //\xe4\xbf\x9d\xe5\xad\x98\xe7\xbc\xa9\xe6\x94\xbe\xe7\x9a\x84\xe4\xb8\xa4\xe4\xb8\xaa\xe6\x89\x8b\xe6\x8c\x87\n            saveScaleContext(event.getX(0), event.getY(0), event.getX(1), event.getY(1));\n        } else if (action == MotionEvent.ACTION_MOVE) {\n            if (!(mScaleAnimator != null && mScaleAnimator.isRunning())) {\n                //\xe5\x9c\xa8\xe6\xbb\x9a\xe5\x8a\xa8\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\x8b\xe7\xa7\xbb\xe5\x8a\xa8\n                if (mPinchMode == PINCH_MODE_SCROLL) {\n                    //\xe6\xaf\x8f\xe6\xac\xa1\xe7\xa7\xbb\xe5\x8a\xa8\xe4\xba\xa7\xe7\x94\x9f\xe4\xb8\x80\xe4\xb8\xaa\xe5\xb7\xae\xe5\x80\xbc\xe7\xb4\xaf\xe7\xa7\xaf\xe5\x88\xb0\xe5\x9b\xbe\xe7\x89\x87\xe4\xbd\x8d\xe7\xbd\xae\xe4\xb8\x8a\n                    scrollBy(event.getX() - mLastMovePoint.x, event.getY() - mLastMovePoint.y);\n                    //\xe8\xae\xb0\xe5\xbd\x95\xe6\x96\xb0\xe7\x9a\x84\xe7\xa7\xbb\xe5\x8a\xa8\xe7\x82\xb9\n                    mLastMovePoint.set(event.getX(), event.getY());\n                    //\xe5\x9c\xa8\xe7\xbc\xa9\xe6\x94\xbe\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\x8b\xe7\xa7\xbb\xe5\x8a\xa8\n                } else if (mPinchMode == PINCH_MODE_SCALE && event.getPointerCount() > 1) {\n                    //\xe4\xb8\xa4\xe4\xb8\xaa\xe7\xbc\xa9\xe6\x94\xbe\xe7\x82\xb9\xe9\x97\xb4\xe7\x9a\x84\xe8\xb7\x9d\xe7\xa6\xbb\n                    float distance = MathUtils.getDistance(event.getX(0), event.getY(0), event.getX(1), event.getY(1));\n                    //\xe4\xbf\x9d\xe5\xad\x98\xe7\xbc\xa9\xe6\x94\xbe\xe7\x82\xb9\xe4\xb8\xad\xe7\x82\xb9\n                    float[] lineCenter = MathUtils.getCenterPoint(event.getX(0), event.getY(0), event.getX(1), event.getY(1));\n                    mLastMovePoint.set(lineCenter[0], lineCenter[1]);\n                    //\xe5\xa4\x84\xe7\x90\x86\xe7\xbc\xa9\xe6\x94\xbe\n                    scale(mScaleCenter, mScaleBase, distance, mLastMovePoint);\n                }\n            }\n        }\n        //\xe6\x97\xa0\xe8\xae\xba\xe5\xa6\x82\xe4\xbd\x95\xe9\x83\xbd\xe5\xa4\x84\xe7\x90\x86\xe5\x90\x84\xe7\xa7\x8d\xe5\xa4\x96\xe9\x83\xa8\xe6\x89\x8b\xe5\x8a\xbf\n        mGestureDetector.onTouchEvent(event);\n        return true;\n    }\n\n    /**\n     * \xe8\xae\xa9\xe5\x9b\xbe\xe7\x89\x87\xe7\xa7\xbb\xe5\x8a\xa8\xe4\xb8\x80\xe6\xae\xb5\xe8\xb7\x9d\xe7\xa6\xbb\n     * <p>\n     * \xe4\xb8\x8d\xe8\x83\xbd\xe7\xa7\xbb\xe5\x8a\xa8\xe8\xb6\x85\xe8\xbf\x87\xe5\x8f\xaf\xe7\xa7\xbb\xe5\x8a\xa8\xe8\x8c\x83\xe5\x9b\xb4,\xe8\xb6\x85\xe8\xbf\x87\xe4\xba\x86\xe5\xb0\xb1\xe5\x88\xb0\xe5\x8f\xaf\xe7\xa7\xbb\xe5\x8a\xa8\xe8\x8c\x83\xe5\x9b\xb4\xe8\xbe\xb9\xe7\x95\x8c\xe4\xb8\xba\xe6\xad\xa2.\n     *\n     * @param xDiff \xe7\xa7\xbb\xe5\x8a\xa8\xe8\xb7\x9d\xe7\xa6\xbb\n     * @param yDiff \xe7\xa7\xbb\xe5\x8a\xa8\xe8\xb7\x9d\xe7\xa6\xbb\n     * @return \xe6\x98\xaf\xe5\x90\xa6\xe6\x94\xb9\xe5\x8f\x98\xe4\xba\x86\xe4\xbd\x8d\xe7\xbd\xae\n     */\n    private boolean scrollBy(float xDiff, float yDiff) {\n        if (!isReady()) {\n            return false;\n        }\n        //\xe5\x8e\x9f\xe5\x9b\xbe\xe6\x96\xb9\xe6\xa1\x86\n        RectF bound = MathUtils.rectFTake();\n        getImageBound(bound);\n        //\xe6\x8e\xa7\xe4\xbb\xb6\xe5\xa4\xa7\xe5\xb0\x8f\n        float displayWidth = getWidth();\n        float displayHeight = getHeight();\n        //\xe5\xa6\x82\xe6\x9e\x9c\xe5\xbd\x93\xe5\x89\x8d\xe5\x9b\xbe\xe7\x89\x87\xe5\xae\xbd\xe5\xba\xa6\xe5\xb0\x8f\xe4\xba\x8e\xe6\x8e\xa7\xe4\xbb\xb6\xe5\xae\xbd\xe5\xba\xa6\xef\xbc\x8c\xe5\x88\x99\xe4\xb8\x8d\xe8\x83\xbd\xe7\xa7\xbb\xe5\x8a\xa8\n        if (bound.right - bound.left < displayWidth) {\n            xDiff = 0;\n            //\xe5\xa6\x82\xe6\x9e\x9c\xe5\x9b\xbe\xe7\x89\x87\xe5\xb7\xa6\xe8\xbe\xb9\xe5\x9c\xa8\xe7\xa7\xbb\xe5\x8a\xa8\xe5\x90\x8e\xe8\xb6\x85\xe5\x87\xba\xe6\x8e\xa7\xe4\xbb\xb6\xe5\xb7\xa6\xe8\xbe\xb9\n        } else if (bound.left + xDiff > 0) {\n            //\xe5\xa6\x82\xe6\x9e\x9c\xe5\x9c\xa8\xe7\xa7\xbb\xe5\x8a\xa8\xe4\xb9\x8b\xe5\x89\x8d\xe6\x98\xaf\xe6\xb2\xa1\xe8\xb6\x85\xe5\x87\xba\xe7\x9a\x84\xef\xbc\x8c\xe8\xae\xa1\xe7\xae\x97\xe5\xba\x94\xe8\xaf\xa5\xe7\xa7\xbb\xe5\x8a\xa8\xe7\x9a\x84\xe8\xb7\x9d\xe7\xa6\xbb\n            if (bound.left < 0) {\n                xDiff = -bound.left;\n                //\xe5\x90\xa6\xe5\x88\x99\xe6\x97\xa0\xe6\xb3\x95\xe7\xa7\xbb\xe5\x8a\xa8\n            } else {\n                xDiff = 0;\n            }\n            //\xe5\xa6\x82\xe6\x9e\x9c\xe5\x9b\xbe\xe7\x89\x87\xe5\x8f\xb3\xe8\xbe\xb9\xe5\x9c\xa8\xe7\xa7\xbb\xe5\x8a\xa8\xe5\x90\x8e\xe8\xb6\x85\xe5\x87\xba\xe6\x8e\xa7\xe4\xbb\xb6\xe5\x8f\xb3\xe8\xbe\xb9\n        } else if (bound.right + xDiff < displayWidth) {\n            //\xe5\xa6\x82\xe6\x9e\x9c\xe5\x9c\xa8\xe7\xa7\xbb\xe5\x8a\xa8\xe4\xb9\x8b\xe5\x89\x8d\xe6\x98\xaf\xe6\xb2\xa1\xe8\xb6\x85\xe5\x87\xba\xe7\x9a\x84\xef\xbc\x8c\xe8\xae\xa1\xe7\xae\x97\xe5\xba\x94\xe8\xaf\xa5\xe7\xa7\xbb\xe5\x8a\xa8\xe7\x9a\x84\xe8\xb7\x9d\xe7\xa6\xbb\n            if (bound.right > displayWidth) {\n                xDiff = displayWidth - bound.right;\n                //\xe5\x90\xa6\xe5\x88\x99\xe6\x97\xa0\xe6\xb3\x95\xe7\xa7\xbb\xe5\x8a\xa8\n            } else {\n                xDiff = 0;\n            }\n        }\n        //\xe4\xbb\xa5\xe4\xb8\x8b\xe5\x90\x8c\xe7\x90\x86\n        if (bound.bottom - bound.top < displayHeight) {\n            yDiff = 0;\n        } else if (bound.top + yDiff > 0) {\n            if (bound.top < 0) {\n                yDiff = -bound.top;\n            } else {\n                yDiff = 0;\n            }\n        } else if (bound.bottom + yDiff < displayHeight) {\n            if (bound.bottom > displayHeight) {\n                yDiff = displayHeight - bound.bottom;\n            } else {\n                yDiff = 0;\n            }\n        }\n        MathUtils.rectFGiven(bound);\n        //\xe5\xba\x94\xe7\x94\xa8\xe7\xa7\xbb\xe5\x8a\xa8\xe5\x8f\x98\xe6\x8d\xa2\n        mOuterMatrix.postTranslate(xDiff, yDiff);\n        dispatchOuterMatrixChanged();\n        //\xe8\xa7\xa6\xe5\x8f\x91\xe9\x87\x8d\xe7\xbb\x98\n        invalidate();\n        //\xe6\xa3\x80\xe6\x9f\xa5\xe6\x98\xaf\xe5\x90\xa6\xe6\x9c\x89\xe5\x8f\x98\xe5\x8c\x96\n        if (xDiff != 0 || yDiff != 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * \xe8\xae\xb0\xe5\xbd\x95\xe7\xbc\xa9\xe6\x94\xbe\xe5\x89\x8d\xe7\x9a\x84\xe4\xb8\x80\xe4\xba\x9b\xe4\xbf\xa1\xe6\x81\xaf\n     * <p>\n     * \xe4\xbf\x9d\xe5\xad\x98\xe5\x9f\xba\xe7\xa1\x80\xe7\xbc\xa9\xe6\x94\xbe\xe5\x80\xbc.\n     * \xe4\xbf\x9d\xe5\xad\x98\xe5\x9b\xbe\xe7\x89\x87\xe7\xbc\xa9\xe6\x94\xbe\xe4\xb8\xad\xe7\x82\xb9.\n     *\n     * @param x1 \xe7\xbc\xa9\xe6\x94\xbe\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe6\x89\x8b\xe6\x8c\x87\n     * @param y1 \xe7\xbc\xa9\xe6\x94\xbe\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe6\x89\x8b\xe6\x8c\x87\n     * @param x2 \xe7\xbc\xa9\xe6\x94\xbe\xe7\xac\xac\xe4\xba\x8c\xe4\xb8\xaa\xe6\x89\x8b\xe6\x8c\x87\n     * @param y2 \xe7\xbc\xa9\xe6\x94\xbe\xe7\xac\xac\xe4\xba\x8c\xe4\xb8\xaa\xe6\x89\x8b\xe6\x8c\x87\n     */\n    private void saveScaleContext(float x1, float y1, float x2, float y2) {\n        //\xe8\xae\xb0\xe5\xbd\x95\xe5\x9f\xba\xe7\xa1\x80\xe7\xbc\xa9\xe6\x94\xbe\xe5\x80\xbc,\xe5\x85\xb6\xe4\xb8\xad\xe5\x9b\xbe\xe7\x89\x87\xe7\xbc\xa9\xe6\x94\xbe\xe6\xaf\x94\xe4\xbe\x8b\xe6\x8c\x89\xe7\x85\xa7x\xe6\x96\xb9\xe5\x90\x91\xe6\x9d\xa5\xe8\xae\xa1\xe7\xae\x97\n        //\xe7\x90\x86\xe8\xae\xba\xe4\xb8\x8a\xe5\x9b\xbe\xe7\x89\x87\xe5\xba\x94\xe8\xaf\xa5\xe6\x98\xaf\xe7\xad\x89\xe6\xaf\x94\xe7\x9a\x84,x\xe5\x92\x8cy\xe6\x96\xb9\xe5\x90\x91\xe6\xaf\x94\xe4\xbe\x8b\xe7\x9b\xb8\xe5\x90\x8c\n        //\xe4\xbd\x86\xe6\x98\xaf\xe6\x9c\x89\xe5\x8f\xaf\xe8\x83\xbd\xe5\xa4\x96\xe9\x83\xa8\xe8\xae\xbe\xe5\xae\x9a\xe4\xba\x86\xe4\xb8\x8d\xe8\xa7\x84\xe8\x8c\x83\xe7\x9a\x84\xe5\x80\xbc.\n        //\xe4\xbd\x86\xe6\x98\xaf\xe5\x90\x8e\xe7\xbb\xad\xe7\x9a\x84scale\xe6\x93\x8d\xe4\xbd\x9c\xe4\xbc\x9a\xe5\xb0\x86xy\xe4\xb8\x8d\xe7\xad\x89\xe7\x9a\x84\xe7\xbc\xa9\xe6\x94\xbe\xe5\x80\xbc\xe7\xba\xa0\xe6\xad\xa3,\xe6\x94\xb9\xe6\x88\x90\xe5\x92\x8cx\xe6\x96\xb9\xe5\x90\x91\xe7\x9b\xb8\xe5\x90\x8c\n        mScaleBase = MathUtils.getMatrixScale(mOuterMatrix)[0] / MathUtils.getDistance(x1, y1, x2, y2);\n        //\xe4\xb8\xa4\xe6\x89\x8b\xe6\x8c\x87\xe7\x9a\x84\xe4\xb8\xad\xe7\x82\xb9\xe5\x9c\xa8\xe5\xb1\x8f\xe5\xb9\x95\xe4\xb8\x8a\xe8\x90\xbd\xe5\x9c\xa8\xe4\xba\x86\xe5\x9b\xbe\xe7\x89\x87\xe7\x9a\x84\xe6\x9f\x90\xe4\xb8\xaa\xe7\x82\xb9\xe4\xb8\x8a,\xe5\x9b\xbe\xe7\x89\x87\xe4\xb8\x8a\xe7\x9a\x84\xe8\xbf\x99\xe4\xb8\xaa\xe7\x82\xb9\xe5\x9c\xa8\xe7\xbb\x8f\xe8\xbf\x87\xe6\x80\xbb\xe7\x9f\xa9\xe9\x98\xb5\xe5\x8f\x98\xe6\x8d\xa2\xe5\x90\x8e\xe5\x92\x8c\xe6\x89\x8b\xe6\x8c\x87\xe4\xb8\xad\xe7\x82\xb9\xe7\x9b\xb8\xe5\x90\x8c\n        //\xe7\x8e\xb0\xe5\x9c\xa8\xe6\x88\x91\xe4\xbb\xac\xe9\x9c\x80\xe8\xa6\x81\xe5\xbe\x97\xe5\x88\xb0\xe5\x9b\xbe\xe7\x89\x87\xe4\xb8\x8a\xe8\xbf\x99\xe4\xb8\xaa\xe7\x82\xb9\xe5\x9c\xa8\xe5\x9b\xbe\xe7\x89\x87\xe6\x98\xaffit center\xe7\x8a\xb6\xe6\x80\x81\xe4\xb8\x8b\xe5\x9c\xa8\xe5\xb1\x8f\xe5\xb9\x95\xe4\xb8\x8a\xe7\x9a\x84\xe4\xbd\x8d\xe7\xbd\xae\n        //\xe5\x9b\xa0\xe4\xb8\xba\xe5\x90\x8e\xe7\xbb\xad\xe7\x9a\x84\xe8\xae\xa1\xe7\xae\x97\xe9\x83\xbd\xe6\x98\xaf\xe5\x9f\xba\xe4\xba\x8e\xe5\x9b\xbe\xe7\x89\x87\xe6\x98\xaffit center\xe7\x8a\xb6\xe6\x80\x81\xe4\xb8\x8b\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8f\x98\xe6\x8d\xa2\n        //\xe6\x89\x80\xe4\xbb\xa5\xe9\x9c\x80\xe8\xa6\x81\xe6\x8a\x8a\xe4\xb8\xa4\xe6\x89\x8b\xe6\x8c\x87\xe4\xb8\xad\xe7\x82\xb9\xe9\x99\xa4\xe4\xbb\xa5\xe5\xa4\x96\xe5\xb1\x82\xe5\x8f\x98\xe6\x8d\xa2\xe7\x9f\xa9\xe9\x98\xb5\xe5\xbe\x97\xe5\x88\xb0mScaleCenter\n        float[] center = MathUtils.inverseMatrixPoint(MathUtils.getCenterPoint(x1, y1, x2, y2), mOuterMatrix);\n        mScaleCenter.set(center[0], center[1]);\n    }\n\n    /**\n     * \xe5\xaf\xb9\xe5\x9b\xbe\xe7\x89\x87\xe6\x8c\x89\xe7\x85\xa7\xe4\xb8\x80\xe4\xba\x9b\xe6\x89\x8b\xe5\x8a\xbf\xe4\xbf\xa1\xe6\x81\xaf\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xbc\xa9\xe6\x94\xbe\n     *\n     * @param scaleCenter mScaleCenter\n     * @param scaleBase   mScaleBase\n     * @param distance    \xe6\x89\x8b\xe6\x8c\x87\xe4\xb8\xa4\xe7\x82\xb9\xe4\xb9\x8b\xe9\x97\xb4\xe8\xb7\x9d\xe7\xa6\xbb\n     * @param lineCenter  \xe6\x89\x8b\xe6\x8c\x87\xe4\xb8\xa4\xe7\x82\xb9\xe4\xb9\x8b\xe9\x97\xb4\xe4\xb8\xad\xe7\x82\xb9\n     * @see #mScaleCenter\n     * @see #mScaleBase\n     */\n    private void scale(PointF scaleCenter, float scaleBase, float distance, PointF lineCenter) {\n        if (!isReady()) {\n            return;\n        }\n        //\xe8\xae\xa1\xe7\xae\x97\xe5\x9b\xbe\xe7\x89\x87\xe4\xbb\x8efit center\xe7\x8a\xb6\xe6\x80\x81\xe5\x88\xb0\xe7\x9b\xae\xe6\xa0\x87\xe7\x8a\xb6\xe6\x80\x81\xe7\x9a\x84\xe7\xbc\xa9\xe6\x94\xbe\xe6\xaf\x94\xe4\xbe\x8b\n        float scale = scaleBase * distance;\n        Matrix matrix = MathUtils.matrixTake();\n        //\xe6\x8c\x89\xe7\x85\xa7\xe5\x9b\xbe\xe7\x89\x87\xe7\xbc\xa9\xe6\x94\xbe\xe4\xb8\xad\xe5\xbf\x83\xe7\xbc\xa9\xe6\x94\xbe\xef\xbc\x8c\xe5\xb9\xb6\xe4\xb8\x94\xe8\xae\xa9\xe7\xbc\xa9\xe6\x94\xbe\xe4\xb8\xad\xe5\xbf\x83\xe5\x9c\xa8\xe7\xbc\xa9\xe6\x94\xbe\xe7\x82\xb9\xe4\xb8\xad\xe7\x82\xb9\xe4\xb8\x8a\n        matrix.postScale(scale, scale, scaleCenter.x, scaleCenter.y);\n        //\xe8\xae\xa9\xe5\x9b\xbe\xe7\x89\x87\xe7\x9a\x84\xe7\xbc\xa9\xe6\x94\xbe\xe4\xb8\xad\xe7\x82\xb9\xe8\xb7\x9f\xe9\x9a\x8f\xe6\x89\x8b\xe6\x8c\x87\xe7\xbc\xa9\xe6\x94\xbe\xe4\xb8\xad\xe7\x82\xb9\n        matrix.postTranslate(lineCenter.x - scaleCenter.x, lineCenter.y - scaleCenter.y);\n        //\xe5\xba\x94\xe7\x94\xa8\xe5\x8f\x98\xe6\x8d\xa2\n        mOuterMatrix.set(matrix);\n        MathUtils.matrixGiven(matrix);\n        dispatchOuterMatrixChanged();\n        //\xe9\x87\x8d\xe7\xbb\x98\n        invalidate();\n    }\n\n    /**\n     * \xe5\x8f\x8c\xe5\x87\xbb\xe5\x90\x8e\xe6\x94\xbe\xe5\xa4\xa7\xe6\x88\x96\xe8\x80\x85\xe7\xbc\xa9\xe5\xb0\x8f\n     * <p>\n     * \xe5\xb0\x86\xe5\x9b\xbe\xe7\x89\x87\xe7\xbc\xa9\xe6\x94\xbe\xe6\xaf\x94\xe4\xbe\x8b\xe7\xbc\xa9\xe6\x94\xbe\xe5\x88\xb0nextScale\xe6\x8c\x87\xe5\xae\x9a\xe7\x9a\x84\xe5\x80\xbc.\n     * \xe4\xbd\x86nextScale\xe5\x80\xbc\xe4\xb8\x8d\xe8\x83\xbd\xe5\xa4\xa7\xe4\xba\x8e\xe6\x9c\x80\xe5\xa4\xa7\xe7\xbc\xa9\xe6\x94\xbe\xe5\x80\xbc\xe4\xb8\x8d\xe8\x83\xbd\xe5\xb0\x8f\xe4\xba\x8efit center\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe7\x9a\x84\xe7\xbc\xa9\xe6\x94\xbe\xe5\x80\xbc.\n     * \xe5\xb0\x86\xe5\x8f\x8c\xe5\x87\xbb\xe7\x9a\x84\xe7\x82\xb9\xe5\xb0\xbd\xe9\x87\x8f\xe7\xa7\xbb\xe5\x8a\xa8\xe5\x88\xb0\xe6\x8e\xa7\xe4\xbb\xb6\xe4\xb8\xad\xe5\xbf\x83.\n     *\n     * @param x \xe5\x8f\x8c\xe5\x87\xbb\xe7\x9a\x84\xe7\x82\xb9\n     * @param y \xe5\x8f\x8c\xe5\x87\xbb\xe7\x9a\x84\xe7\x82\xb9\n     * @see #calculateNextScale(float, float)\n     * @see #getMaxScale()\n     */\n    private void doubleTap(float x, float y) {\n        if (!isReady()) {\n            return;\n        }\n        //\xe8\x8e\xb7\xe5\x8f\x96\xe7\xac\xac\xe4\xb8\x80\xe5\xb1\x82\xe5\x8f\x98\xe6\x8d\xa2\xe7\x9f\xa9\xe9\x98\xb5\n        Matrix innerMatrix = MathUtils.matrixTake();\n        getInnerMatrix(innerMatrix);\n        //\xe5\xbd\x93\xe5\x89\x8d\xe6\x80\xbb\xe7\x9a\x84\xe7\xbc\xa9\xe6\x94\xbe\xe6\xaf\x94\xe4\xbe\x8b\n        float innerScale = MathUtils.getMatrixScale(innerMatrix)[0];\n        float outerScale = MathUtils.getMatrixScale(mOuterMatrix)[0];\n        float currentScale = innerScale * outerScale;\n        //\xe6\x8e\xa7\xe4\xbb\xb6\xe5\xa4\xa7\xe5\xb0\x8f\n        float displayWidth = getWidth();\n        float displayHeight = getHeight();\n        //\xe6\x9c\x80\xe5\xa4\xa7\xe6\x94\xbe\xe5\xa4\xa7\xe5\xa4\xa7\xe5\xb0\x8f\n        float maxScale = getMaxScale();\n        //\xe6\x8e\xa5\xe4\xb8\x8b\xe6\x9d\xa5\xe8\xa6\x81\xe6\x94\xbe\xe5\xa4\xa7\xe7\x9a\x84\xe5\xa4\xa7\xe5\xb0\x8f\n        float nextScale = calculateNextScale(innerScale, outerScale);\n        //\xe5\xa6\x82\xe6\x9e\x9c\xe6\x8e\xa5\xe4\xb8\x8b\xe6\x9d\xa5\xe6\x94\xbe\xe5\xa4\xa7\xe5\xa4\xa7\xe4\xba\x8e\xe6\x9c\x80\xe5\xa4\xa7\xe5\x80\xbc\xe6\x88\x96\xe8\x80\x85\xe5\xb0\x8f\xe4\xba\x8efit center\xe5\x80\xbc\xef\xbc\x8c\xe5\x88\x99\xe5\x8f\x96\xe8\xbe\xb9\xe7\x95\x8c\n        if (nextScale > maxScale) {\n            nextScale = maxScale;\n        }\n        if (nextScale < innerScale) {\n            nextScale = innerScale;\n        }\n        //\xe5\xbc\x80\xe5\xa7\x8b\xe8\xae\xa1\xe7\xae\x97\xe7\xbc\xa9\xe6\x94\xbe\xe5\x8a\xa8\xe7\x94\xbb\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xe7\x9f\xa9\xe9\x98\xb5\n        Matrix animEnd = MathUtils.matrixTake(mOuterMatrix);\n        //\xe8\xae\xa1\xe7\xae\x97\xe8\xbf\x98\xe9\x9c\x80\xe7\xbc\xa9\xe6\x94\xbe\xe7\x9a\x84\xe5\x80\x8d\xe6\x95\xb0\n        animEnd.postScale(nextScale / currentScale, nextScale / currentScale, x, y);\n        //\xe5\xb0\x86\xe6\x94\xbe\xe5\xa4\xa7\xe7\x82\xb9\xe7\xa7\xbb\xe5\x8a\xa8\xe5\x88\xb0\xe6\x8e\xa7\xe4\xbb\xb6\xe4\xb8\xad\xe5\xbf\x83\n        animEnd.postTranslate(displayWidth / 2f - x, displayHeight / 2f - y);\n        //\xe5\xbe\x97\xe5\x88\xb0\xe6\x94\xbe\xe5\xa4\xa7\xe4\xb9\x8b\xe5\x90\x8e\xe7\x9a\x84\xe5\x9b\xbe\xe7\x89\x87\xe6\x96\xb9\xe6\xa1\x86\n        Matrix testMatrix = MathUtils.matrixTake(innerMatrix);\n        testMatrix.postConcat(animEnd);\n        RectF testBound = MathUtils.rectFTake(0, 0, getDrawable().getIntrinsicWidth(), getDrawable().getIntrinsicHeight());\n        testMatrix.mapRect(testBound);\n        //\xe4\xbf\xae\xe6\xad\xa3\xe4\xbd\x8d\xe7\xbd\xae\n        float postX = 0;\n        float postY = 0;\n        if (testBound.right - testBound.left < displayWidth) {\n            postX = displayWidth / 2f - (testBound.right + testBound.left) / 2f;\n        } else if (testBound.left > 0) {\n            postX = -testBound.left;\n        } else if (testBound.right < displayWidth) {\n            postX = displayWidth - testBound.right;\n        }\n        if (testBound.bottom - testBound.top < displayHeight) {\n            postY = displayHeight / 2f - (testBound.bottom + testBound.top) / 2f;\n        } else if (testBound.top > 0) {\n            postY = -testBound.top;\n        } else if (testBound.bottom < displayHeight) {\n            postY = displayHeight - testBound.bottom;\n        }\n        //\xe5\xba\x94\xe7\x94\xa8\xe4\xbf\xae\xe6\xad\xa3\xe4\xbd\x8d\xe7\xbd\xae\n        animEnd.postTranslate(postX, postY);\n        //\xe6\xb8\x85\xe7\x90\x86\xe5\xbd\x93\xe5\x89\x8d\xe5\x8f\xaf\xe8\x83\xbd\xe6\xad\xa3\xe5\x9c\xa8\xe6\x89\xa7\xe8\xa1\x8c\xe7\x9a\x84\xe5\x8a\xa8\xe7\x94\xbb\n        cancelAllAnimator();\n        //\xe5\x90\xaf\xe5\x8a\xa8\xe7\x9f\xa9\xe9\x98\xb5\xe5\x8a\xa8\xe7\x94\xbb\n        mScaleAnimator = new ScaleAnimator(mOuterMatrix, animEnd);\n        mScaleAnimator.start();\n        //\xe6\xb8\x85\xe7\x90\x86\xe4\xb8\xb4\xe6\x97\xb6\xe5\x8f\x98\xe9\x87\x8f\n        MathUtils.rectFGiven(testBound);\n        MathUtils.matrixGiven(testMatrix);\n        MathUtils.matrixGiven(animEnd);\n        MathUtils.matrixGiven(innerMatrix);\n    }\n\n    /**\n     * \xe5\xbd\x93\xe7\xbc\xa9\xe6\x94\xbe\xe6\x93\x8d\xe4\xbd\x9c\xe7\xbb\x93\xe6\x9d\x9f\xe5\x8a\xa8\xe7\x94\xbb\n     * <p>\n     * \xe5\xa6\x82\xe6\x9e\x9c\xe5\x9b\xbe\xe7\x89\x87\xe8\xb6\x85\xe8\xbf\x87\xe8\xbe\xb9\xe7\x95\x8c,\xe6\x89\xbe\xe5\x88\xb0\xe6\x9c\x80\xe8\xbf\x91\xe7\x9a\x84\xe4\xbd\x8d\xe7\xbd\xae\xe5\x8a\xa8\xe7\x94\xbb\xe6\x81\xa2\xe5\xa4\x8d.\n     * \xe5\xa6\x82\xe6\x9e\x9c\xe5\x9b\xbe\xe7\x89\x87\xe7\xbc\xa9\xe6\x94\xbe\xe5\xb0\xba\xe5\xaf\xb8\xe8\xb6\x85\xe8\xbf\x87\xe6\x9c\x80\xe5\xa4\xa7\xe5\x80\xbc\xe6\x88\x96\xe8\x80\x85\xe6\x9c\x80\xe5\xb0\x8f\xe5\x80\xbc,\xe6\x89\xbe\xe5\x88\xb0\xe6\x9c\x80\xe8\xbf\x91\xe7\x9a\x84\xe5\x80\xbc\xe5\x8a\xa8\xe7\x94\xbb\xe6\x81\xa2\xe5\xa4\x8d.\n     */\n    private void scaleEnd() {\n        if (!isReady()) {\n            return;\n        }\n        //\xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\xae\xe6\xad\xa3\xe4\xba\x86\xe4\xbd\x8d\xe7\xbd\xae\n        boolean change = false;\n        //\xe8\x8e\xb7\xe5\x8f\x96\xe5\x9b\xbe\xe7\x89\x87\xe6\x95\xb4\xe4\xbd\x93\xe7\x9a\x84\xe5\x8f\x98\xe6\x8d\xa2\xe7\x9f\xa9\xe9\x98\xb5\n        Matrix currentMatrix = MathUtils.matrixTake();\n        getCurrentImageMatrix(currentMatrix);\n        //\xe6\x95\xb4\xe4\xbd\x93\xe7\xbc\xa9\xe6\x94\xbe\xe6\xaf\x94\xe4\xbe\x8b\n        float currentScale = MathUtils.getMatrixScale(currentMatrix)[0];\n        //\xe7\xac\xac\xe4\xba\x8c\xe5\xb1\x82\xe7\xbc\xa9\xe6\x94\xbe\xe6\xaf\x94\xe4\xbe\x8b\n        float outerScale = MathUtils.getMatrixScale(mOuterMatrix)[0];\n        //\xe6\x8e\xa7\xe4\xbb\xb6\xe5\xa4\xa7\xe5\xb0\x8f\n        float displayWidth = getWidth();\n        float displayHeight = getHeight();\n        //\xe6\x9c\x80\xe5\xa4\xa7\xe7\xbc\xa9\xe6\x94\xbe\xe6\xaf\x94\xe4\xbe\x8b\n        float maxScale = getMaxScale();\n        //\xe6\xaf\x94\xe4\xbe\x8b\xe4\xbf\xae\xe6\xad\xa3\n        float scalePost = 1f;\n        //\xe4\xbd\x8d\xe7\xbd\xae\xe4\xbf\xae\xe6\xad\xa3\n        float postX = 0;\n        float postY = 0;\n        //\xe5\xa6\x82\xe6\x9e\x9c\xe6\x95\xb4\xe4\xbd\x93\xe7\xbc\xa9\xe6\x94\xbe\xe6\xaf\x94\xe4\xbe\x8b\xe5\xa4\xa7\xe4\xba\x8e\xe6\x9c\x80\xe5\xa4\xa7\xe6\xaf\x94\xe4\xbe\x8b\xef\xbc\x8c\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xbc\xa9\xe6\x94\xbe\xe4\xbf\xae\xe6\xad\xa3\n        if (currentScale > maxScale) {\n            scalePost = maxScale / currentScale;\n        }\n        //\xe5\xa6\x82\xe6\x9e\x9c\xe7\xbc\xa9\xe6\x94\xbe\xe4\xbf\xae\xe6\xad\xa3\xe5\x90\x8e\xe6\x95\xb4\xe4\xbd\x93\xe5\xaf\xbc\xe8\x87\xb4\xe7\xac\xac\xe4\xba\x8c\xe5\xb1\x82\xe7\xbc\xa9\xe6\x94\xbe\xe5\xb0\x8f\xe4\xba\x8e1\xef\xbc\x88\xe5\xb0\xb1\xe6\x98\xaf\xe5\x9b\xbe\xe7\x89\x87\xe6\xaf\x94fit center\xe7\x8a\xb6\xe6\x80\x81\xe8\xbf\x98\xe5\xb0\x8f\xef\xbc\x89\xef\xbc\x8c\xe9\x87\x8d\xe6\x96\xb0\xe4\xbf\xae\xe6\xad\xa3\xe7\xbc\xa9\xe6\x94\xbe\n        if (outerScale * scalePost < 1f) {\n            scalePost = 1f / outerScale;\n        }\n        //\xe5\xa6\x82\xe6\x9e\x9c\xe7\xbc\xa9\xe6\x94\xbe\xe4\xbf\xae\xe6\xad\xa3\xe4\xb8\x8d\xe4\xb8\xba1\xef\xbc\x8c\xe8\xaf\xb4\xe6\x98\x8e\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xba\x86\xe4\xbf\xae\xe6\xad\xa3\n        if (scalePost != 1f) {\n            change = true;\n        }\n        //\xe5\xb0\x9d\xe8\xaf\x95\xe6\xa0\xb9\xe6\x8d\xae\xe7\xbc\xa9\xe6\x94\xbe\xe7\x82\xb9\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xbc\xa9\xe6\x94\xbe\xe4\xbf\xae\xe6\xad\xa3\n        Matrix testMatrix = MathUtils.matrixTake(currentMatrix);\n        testMatrix.postScale(scalePost, scalePost, mLastMovePoint.x, mLastMovePoint.y);\n        RectF testBound = MathUtils.rectFTake(0, 0, getDrawable().getIntrinsicWidth(), getDrawable().getIntrinsicHeight());\n        //\xe8\x8e\xb7\xe5\x8f\x96\xe7\xbc\xa9\xe6\x94\xbe\xe4\xbf\xae\xe6\xad\xa3\xe5\x90\x8e\xe7\x9a\x84\xe5\x9b\xbe\xe7\x89\x87\xe6\x96\xb9\xe6\xa1\x86\n        testMatrix.mapRect(testBound);\n        //\xe6\xa3\x80\xe6\xb5\x8b\xe7\xbc\xa9\xe6\x94\xbe\xe4\xbf\xae\xe6\xad\xa3\xe5\x90\x8e\xe4\xbd\x8d\xe7\xbd\xae\xe6\x9c\x89\xe6\x97\xa0\xe8\xb6\x85\xe5\x87\xba\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe8\xb6\x85\xe5\x87\xba\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xbd\x8d\xe7\xbd\xae\xe4\xbf\xae\xe6\xad\xa3\n        if (testBound.right - testBound.left < displayWidth) {\n            postX = displayWidth / 2f - (testBound.right + testBound.left) / 2f;\n        } else if (testBound.left > 0) {\n            postX = -testBound.left;\n        } else if (testBound.right < displayWidth) {\n            postX = displayWidth - testBound.right;\n        }\n        if (testBound.bottom - testBound.top < displayHeight) {\n            postY = displayHeight / 2f - (testBound.bottom + testBound.top) / 2f;\n        } else if (testBound.top > 0) {\n            postY = -testBound.top;\n        } else if (testBound.bottom < displayHeight) {\n            postY = displayHeight - testBound.bottom;\n        }\n        //\xe5\xa6\x82\xe6\x9e\x9c\xe4\xbd\x8d\xe7\xbd\xae\xe4\xbf\xae\xe6\xad\xa3\xe4\xb8\x8d\xe4\xb8\xba0\xef\xbc\x8c\xe8\xaf\xb4\xe6\x98\x8e\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xba\x86\xe4\xbf\xae\xe6\xad\xa3\n        if (postX != 0 || postY != 0) {\n            change = true;\n        }\n        //\xe5\x8f\xaa\xe6\x9c\x89\xe6\x9c\x89\xe6\x89\xa7\xe8\xa1\x8c\xe4\xbf\xae\xe6\xad\xa3\xe6\x89\x8d\xe6\x89\xa7\xe8\xa1\x8c\xe5\x8a\xa8\xe7\x94\xbb\n        if (change) {\n            //\xe8\xae\xa1\xe7\xae\x97\xe7\xbb\x93\xe6\x9d\x9f\xe7\x9f\xa9\xe9\x98\xb5\n            Matrix animEnd = MathUtils.matrixTake(mOuterMatrix);\n            animEnd.postScale(scalePost, scalePost, mLastMovePoint.x, mLastMovePoint.y);\n            animEnd.postTranslate(postX, postY);\n            //\xe6\xb8\x85\xe7\x90\x86\xe5\xbd\x93\xe5\x89\x8d\xe5\x8f\xaf\xe8\x83\xbd\xe6\xad\xa3\xe5\x9c\xa8\xe6\x89\xa7\xe8\xa1\x8c\xe7\x9a\x84\xe5\x8a\xa8\xe7\x94\xbb\n            cancelAllAnimator();\n            //\xe5\x90\xaf\xe5\x8a\xa8\xe7\x9f\xa9\xe9\x98\xb5\xe5\x8a\xa8\xe7\x94\xbb\n            mScaleAnimator = new ScaleAnimator(mOuterMatrix, animEnd);\n            mScaleAnimator.start();\n            //\xe6\xb8\x85\xe7\x90\x86\xe4\xb8\xb4\xe6\x97\xb6\xe5\x8f\x98\xe9\x87\x8f\n            MathUtils.matrixGiven(animEnd);\n        }\n        //\xe6\xb8\x85\xe7\x90\x86\xe4\xb8\xb4\xe6\x97\xb6\xe5\x8f\x98\xe9\x87\x8f\n        MathUtils.rectFGiven(testBound);\n        MathUtils.matrixGiven(testMatrix);\n        MathUtils.matrixGiven(currentMatrix);\n    }\n\n    /**\n     * \xe6\x89\xa7\xe8\xa1\x8c\xe6\x83\xaf\xe6\x80\xa7\xe5\x8a\xa8\xe7\x94\xbb\n     * <p>\n     * \xe5\x8a\xa8\xe7\x94\xbb\xe5\x9c\xa8\xe9\x81\x87\xe5\x88\xb0\xe4\xb8\x8d\xe8\x83\xbd\xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb0\xb1\xe5\x81\x9c\xe6\xad\xa2.\n     * \xe5\x8a\xa8\xe7\x94\xbb\xe9\x80\x9f\xe5\xba\xa6\xe8\xa1\xb0\xe5\x87\x8f\xe5\x88\xb0\xe5\xbe\x88\xe5\xb0\x8f\xe5\xb0\xb1\xe5\x81\x9c\xe6\xad\xa2.\n     * <p>\n     * \xe5\x85\xb6\xe4\xb8\xad\xe5\x8f\x82\xe6\x95\xb0\xe9\x80\x9f\xe5\xba\xa6\xe5\x8d\x95\xe4\xbd\x8d\xe4\xb8\xba \xe5\x83\x8f\xe7\xb4\xa0/\xe7\xa7\x92\n     *\n     * @param vx x\xe6\x96\xb9\xe5\x90\x91\xe9\x80\x9f\xe5\xba\xa6\n     * @param vy y\xe6\x96\xb9\xe5\x90\x91\xe9\x80\x9f\xe5\xba\xa6\n     */\n    private void fling(float vx, float vy) {\n        if (!isReady()) {\n            return;\n        }\n        //\xe6\xb8\x85\xe7\x90\x86\xe5\xbd\x93\xe5\x89\x8d\xe5\x8f\xaf\xe8\x83\xbd\xe6\xad\xa3\xe5\x9c\xa8\xe6\x89\xa7\xe8\xa1\x8c\xe7\x9a\x84\xe5\x8a\xa8\xe7\x94\xbb\n        cancelAllAnimator();\n        //\xe5\x88\x9b\xe5\xbb\xba\xe6\x83\xaf\xe6\x80\xa7\xe5\x8a\xa8\xe7\x94\xbb\n        //FlingAnimator\xe5\x8d\x95\xe4\xbd\x8d\xe4\xb8\xba \xe5\x83\x8f\xe7\xb4\xa0/\xe5\xb8\xa7,\xe4\xb8\x80\xe7\xa7\x9260\xe5\xb8\xa7\n        mFlingAnimator = new FlingAnimator(vx / 60f, vy / 60f);\n        mFlingAnimator.start();\n    }\n\n    /**\n     * \xe5\x81\x9c\xe6\xad\xa2\xe6\x89\x80\xe6\x9c\x89\xe6\x89\x8b\xe5\x8a\xbf\xe5\x8a\xa8\xe7\x94\xbb\n     */\n    private void cancelAllAnimator() {\n        if (mScaleAnimator != null) {\n            mScaleAnimator.cancel();\n            mScaleAnimator = null;\n        }\n        if (mFlingAnimator != null) {\n            mFlingAnimator.cancel();\n            mFlingAnimator = null;\n        }\n    }\n\n    /**\n     * \xe5\xa4\x96\xe9\x83\xa8\xe7\x9f\xa9\xe9\x98\xb5\xe5\x8f\x98\xe5\x8c\x96\xe4\xba\x8b\xe4\xbb\xb6\xe9\x80\x9a\xe7\x9f\xa5\xe7\x9b\x91\xe5\x90\xac\xe5\x99\xa8\n     */\n    public interface OuterMatrixChangedListener {\n\n        /**\n         * \xe5\xa4\x96\xe9\x83\xa8\xe7\x9f\xa9\xe9\x98\xb5\xe5\x8f\x98\xe5\x8c\x96\xe5\x9b\x9e\xe8\xb0\x83\n         * <p>\n         * \xe5\xa4\x96\xe9\x83\xa8\xe7\x9f\xa9\xe9\x98\xb5\xe7\x9a\x84\xe4\xbb\xbb\xe4\xbd\x95\xe5\x8f\x98\xe5\x8c\x96\xe5\x90\x8e\xe9\x83\xbd\xe6\x94\xb6\xe5\x88\xb0\xe6\xad\xa4\xe5\x9b\x9e\xe8\xb0\x83.\n         * \xe5\xa4\x96\xe9\x83\xa8\xe7\x9f\xa9\xe9\x98\xb5\xe5\x8f\x98\xe5\x8c\x96\xe5\x90\x8e,\xe6\x80\xbb\xe5\x8f\x98\xe5\x8c\x96\xe7\x9f\xa9\xe9\x98\xb5,\xe5\x9b\xbe\xe7\x89\x87\xe7\x9a\x84\xe5\xb1\x95\xe7\xa4\xba\xe4\xbd\x8d\xe7\xbd\xae\xe9\x83\xbd\xe5\xb0\x86\xe5\x8f\x91\xe7\x94\x9f\xe5\x8f\x98\xe5\x8c\x96.\n         *\n         * @param pinchImageView\n         * @see #getOuterMatrix(Matrix)\n         * @see #getCurrentImageMatrix(Matrix)\n         * @see #getImageBound(RectF)\n         */\n        void onOuterMatrixChanged(PinchImageView pinchImageView);\n    }\n\n    /**\n     * \xe5\xaf\xb9\xe8\xb1\xa1\xe6\xb1\xa0\n     * <p>\n     * \xe9\x98\xb2\xe6\xad\xa2\xe9\xa2\x91\xe7\xb9\x81new\xe5\xaf\xb9\xe8\xb1\xa1\xe4\xba\xa7\xe7\x94\x9f\xe5\x86\x85\xe5\xad\x98\xe6\x8a\x96\xe5\x8a\xa8.\n     * \xe7\x94\xb1\xe4\xba\x8e\xe5\xaf\xb9\xe8\xb1\xa1\xe6\xb1\xa0\xe6\x9c\x80\xe5\xa4\xa7\xe9\x95\xbf\xe5\xba\xa6\xe9\x99\x90\xe5\x88\xb6,\xe5\xa6\x82\xe6\x9e\x9c\xe5\x90\x9e\xe5\xba\xa6\xe9\x87\x8f\xe8\xb6\x85\xe8\xbf\x87\xe5\xaf\xb9\xe8\xb1\xa1\xe6\xb1\xa0\xe5\xae\xb9\xe9\x87\x8f,\xe4\xbb\x8d\xe7\x84\xb6\xe4\xbc\x9a\xe5\x8f\x91\xe7\x94\x9f\xe6\x8a\x96\xe5\x8a\xa8.\n     * \xe6\xad\xa4\xe6\x97\xb6\xe9\x9c\x80\xe8\xa6\x81\xe5\xa2\x9e\xe5\xa4\xa7\xe5\xaf\xb9\xe8\xb1\xa1\xe6\xb1\xa0\xe5\xae\xb9\xe9\x87\x8f,\xe4\xbd\x86\xe6\x98\xaf\xe4\xbc\x9a\xe5\x8d\xa0\xe7\x94\xa8\xe6\x9b\xb4\xe5\xa4\x9a\xe5\x86\x85\xe5\xad\x98.\n     *\n     * @param <T> \xe5\xaf\xb9\xe8\xb1\xa1\xe6\xb1\xa0\xe5\xae\xb9\xe7\xba\xb3\xe7\x9a\x84\xe5\xaf\xb9\xe8\xb1\xa1\xe7\xb1\xbb\xe5\x9e\x8b\n     */\n    private static abstract class ObjectsPool<T> {\n\n        /**\n         * \xe5\xaf\xb9\xe8\xb1\xa1\xe6\xb1\xa0\xe7\x9a\x84\xe6\x9c\x80\xe5\xa4\xa7\xe5\xae\xb9\xe9\x87\x8f\n         */\n        private int mSize;\n\n        /**\n         * \xe5\xaf\xb9\xe8\xb1\xa1\xe6\xb1\xa0\xe9\x98\x9f\xe5\x88\x97\n         */\n        private Queue<T> mQueue;\n\n        /**\n         * \xe5\x88\x9b\xe5\xbb\xba\xe4\xb8\x80\xe4\xb8\xaa\xe5\xaf\xb9\xe8\xb1\xa1\xe6\xb1\xa0\n         *\n         * @param size \xe5\xaf\xb9\xe8\xb1\xa1\xe6\xb1\xa0\xe6\x9c\x80\xe5\xa4\xa7\xe5\xae\xb9\xe9\x87\x8f\n         */\n        public ObjectsPool(int size) {\n            mSize = size;\n            mQueue = new LinkedList<T>();\n        }\n\n        /**\n         * \xe8\x8e\xb7\xe5\x8f\x96\xe4\xb8\x80\xe4\xb8\xaa\xe7\xa9\xba\xe9\x97\xb2\xe7\x9a\x84\xe5\xaf\xb9\xe8\xb1\xa1\n         * <p>\n         * \xe5\xa6\x82\xe6\x9e\x9c\xe5\xaf\xb9\xe8\xb1\xa1\xe6\xb1\xa0\xe4\xb8\xba\xe7\xa9\xba,\xe5\x88\x99\xe5\xaf\xb9\xe8\xb1\xa1\xe6\xb1\xa0\xe8\x87\xaa\xe5\xb7\xb1\xe4\xbc\x9anew\xe4\xb8\x80\xe4\xb8\xaa\xe8\xbf\x94\xe5\x9b\x9e.\n         * \xe5\xa6\x82\xe6\x9e\x9c\xe5\xaf\xb9\xe8\xb1\xa1\xe6\xb1\xa0\xe5\x86\x85\xe6\x9c\x89\xe5\xaf\xb9\xe8\xb1\xa1,\xe5\x88\x99\xe5\x8f\x96\xe4\xb8\x80\xe4\xb8\xaa\xe5\xb7\xb2\xe5\xad\x98\xe5\x9c\xa8\xe7\x9a\x84\xe8\xbf\x94\xe5\x9b\x9e.\n         * take\xe5\x87\xba\xe6\x9d\xa5\xe7\x9a\x84\xe5\xaf\xb9\xe8\xb1\xa1\xe7\x94\xa8\xe5\xae\x8c\xe8\xa6\x81\xe8\xae\xb0\xe5\xbe\x97\xe8\xb0\x83\xe7\x94\xa8given\xe5\xbd\x92\xe8\xbf\x98.\n         * \xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x8d\xe5\xbd\x92\xe8\xbf\x98,\xe8\xae\xa9\xe7\x84\xb6\xe4\xbc\x9a\xe5\x8f\x91\xe7\x94\x9f\xe5\x86\x85\xe5\xad\x98\xe6\x8a\x96\xe5\x8a\xa8,\xe4\xbd\x86\xe4\xb8\x8d\xe4\xbc\x9a\xe5\xbc\x95\xe8\xb5\xb7\xe6\xb3\x84\xe6\xbc\x8f.\n         *\n         * @return \xe5\x8f\xaf\xe7\x94\xa8\xe7\x9a\x84\xe5\xaf\xb9\xe8\xb1\xa1\n         * @see #given(Object)\n         */\n        public T take() {\n            //\xe5\xa6\x82\xe6\x9e\x9c\xe6\xb1\xa0\xe5\x86\x85\xe4\xb8\xba\xe7\xa9\xba\xe5\xb0\xb1\xe5\x88\x9b\xe5\xbb\xba\xe4\xb8\x80\xe4\xb8\xaa\n            if (mQueue.size() == 0) {\n                return newInstance();\n            } else {\n                //\xe5\xaf\xb9\xe8\xb1\xa1\xe6\xb1\xa0\xe9\x87\x8c\xe6\x9c\x89\xe5\xb0\xb1\xe4\xbb\x8e\xe9\xa1\xb6\xe7\xab\xaf\xe6\x8b\xbf\xe5\x87\xba\xe6\x9d\xa5\xe4\xb8\x80\xe4\xb8\xaa\xe8\xbf\x94\xe5\x9b\x9e\n                return resetInstance(mQueue.poll());\n            }\n        }\n\n        /**\n         * \xe5\xbd\x92\xe8\xbf\x98\xe5\xaf\xb9\xe8\xb1\xa1\xe6\xb1\xa0\xe5\x86\x85\xe7\x94\xb3\xe8\xaf\xb7\xe7\x9a\x84\xe5\xaf\xb9\xe8\xb1\xa1\n         * <p>\n         * \xe5\xa6\x82\xe6\x9e\x9c\xe5\xbd\x92\xe8\xbf\x98\xe7\x9a\x84\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x95\xb0\xe9\x87\x8f\xe8\xb6\x85\xe8\xbf\x87\xe5\xaf\xb9\xe8\xb1\xa1\xe6\xb1\xa0\xe5\xae\xb9\xe9\x87\x8f,\xe9\x82\xa3\xe4\xb9\x88\xe5\xbd\x92\xe8\xbf\x98\xe7\x9a\x84\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xb0\xb1\xe4\xbc\x9a\xe8\xa2\xab\xe4\xb8\xa2\xe5\xbc\x83.\n         *\n         * @param obj \xe5\xbd\x92\xe8\xbf\x98\xe7\x9a\x84\xe5\xaf\xb9\xe8\xb1\xa1\n         * @see #take()\n         */\n        public void given(T obj) {\n            //\xe5\xa6\x82\xe6\x9e\x9c\xe5\xaf\xb9\xe8\xb1\xa1\xe6\xb1\xa0\xe8\xbf\x98\xe6\x9c\x89\xe7\xa9\xba\xe4\xbd\x8d\xe5\xad\x90\xe5\xb0\xb1\xe5\xbd\x92\xe8\xbf\x98\xe5\xaf\xb9\xe8\xb1\xa1\n            if (obj != null && mQueue.size() < mSize) {\n                mQueue.offer(obj);\n            }\n        }\n\n        /**\n         * \xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\xaf\xb9\xe8\xb1\xa1\n         *\n         * @return \xe5\x88\x9b\xe5\xbb\xba\xe7\x9a\x84\xe5\xaf\xb9\xe8\xb1\xa1\n         */\n        abstract protected T newInstance();\n\n        /**\n         * \xe9\x87\x8d\xe7\xbd\xae\xe5\xaf\xb9\xe8\xb1\xa1\n         * <p>\n         * \xe6\x8a\x8a\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x95\xb0\xe6\x8d\xae\xe6\xb8\x85\xe7\xa9\xba\xe5\x88\xb0\xe5\xb0\xb1\xe5\x83\x8f\xe5\x88\x9a\xe5\x88\x9b\xe5\xbb\xba\xe7\x9a\x84\xe4\xb8\x80\xe6\xa0\xb7.\n         *\n         * @param obj \xe9\x9c\x80\xe8\xa6\x81\xe8\xa2\xab\xe9\x87\x8d\xe7\xbd\xae\xe7\x9a\x84\xe5\xaf\xb9\xe8\xb1\xa1\n         * @return \xe8\xa2\xab\xe9\x87\x8d\xe7\xbd\xae\xe4\xb9\x8b\xe5\x90\x8e\xe7\x9a\x84\xe5\xaf\xb9\xe8\xb1\xa1\n         */\n        abstract protected T resetInstance(T obj);\n    }\n\n    /**\n     * \xe7\x9f\xa9\xe9\x98\xb5\xe5\xaf\xb9\xe8\xb1\xa1\xe6\xb1\xa0\n     */\n    private static class MatrixPool extends ObjectsPool<Matrix> {\n\n        public MatrixPool(int size) {\n            super(size);\n        }\n\n        @Override\n        protected Matrix newInstance() {\n            return new Matrix();\n        }\n\n        @Override\n        protected Matrix resetInstance(Matrix obj) {\n            obj.reset();\n            return obj;\n        }\n    }\n\n    /**\n     * \xe7\x9f\xa9\xe5\xbd\xa2\xe5\xaf\xb9\xe8\xb1\xa1\xe6\xb1\xa0\n     */\n    private static class RectFPool extends ObjectsPool<RectF> {\n\n        public RectFPool(int size) {\n            super(size);\n        }\n\n        @Override\n        protected RectF newInstance() {\n            return new RectF();\n        }\n\n        @Override\n        protected RectF resetInstance(RectF obj) {\n            obj.setEmpty();\n            return obj;\n        }\n    }\n\n\n    ////////////////////////////////\xe9\x98\xb2\xe6\xad\xa2\xe5\x86\x85\xe5\xad\x98\xe6\x8a\x96\xe5\x8a\xa8\xe5\xa4\x8d\xe7\x94\xa8\xe5\xaf\xb9\xe8\xb1\xa1////////////////////////////////\n\n    /**\n     * \xe6\x95\xb0\xe5\xad\xa6\xe8\xae\xa1\xe7\xae\x97\xe5\xb7\xa5\xe5\x85\xb7\xe7\xb1\xbb\n     */\n    public static class MathUtils {\n\n        /**\n         * \xe7\x9f\xa9\xe9\x98\xb5\xe5\xaf\xb9\xe8\xb1\xa1\xe6\xb1\xa0\n         */\n        private static MatrixPool mMatrixPool = new MatrixPool(16);\n        /**\n         * \xe7\x9f\xa9\xe5\xbd\xa2\xe5\xaf\xb9\xe8\xb1\xa1\xe6\xb1\xa0\n         */\n        private static RectFPool mRectFPool = new RectFPool(16);\n\n        /**\n         * \xe8\x8e\xb7\xe5\x8f\x96\xe7\x9f\xa9\xe9\x98\xb5\xe5\xaf\xb9\xe8\xb1\xa1\n         */\n        public static Matrix matrixTake() {\n            return mMatrixPool.take();\n        }\n\n        /**\n         * \xe8\x8e\xb7\xe5\x8f\x96\xe6\x9f\x90\xe4\xb8\xaa\xe7\x9f\xa9\xe9\x98\xb5\xe7\x9a\x84copy\n         */\n        public static Matrix matrixTake(Matrix matrix) {\n            Matrix result = mMatrixPool.take();\n            if (matrix != null) {\n                result.set(matrix);\n            }\n            return result;\n        }\n\n        /**\n         * \xe5\xbd\x92\xe8\xbf\x98\xe7\x9f\xa9\xe9\x98\xb5\xe5\xaf\xb9\xe8\xb1\xa1\n         */\n        public static void matrixGiven(Matrix matrix) {\n            mMatrixPool.given(matrix);\n        }\n\n        /**\n         * \xe8\x8e\xb7\xe5\x8f\x96\xe7\x9f\xa9\xe5\xbd\xa2\xe5\xaf\xb9\xe8\xb1\xa1\n         */\n        public static RectF rectFTake() {\n            return mRectFPool.take();\n        }\n\n        /**\n         * \xe6\x8c\x89\xe7\x85\xa7\xe6\x8c\x87\xe5\xae\x9a\xe5\x80\xbc\xe8\x8e\xb7\xe5\x8f\x96\xe7\x9f\xa9\xe5\xbd\xa2\xe5\xaf\xb9\xe8\xb1\xa1\n         */\n        public static RectF rectFTake(float left, float top, float right, float bottom) {\n            RectF result = mRectFPool.take();\n            result.set(left, top, right, bottom);\n            return result;\n        }\n\n        /**\n         * \xe8\x8e\xb7\xe5\x8f\x96\xe6\x9f\x90\xe4\xb8\xaa\xe7\x9f\xa9\xe5\xbd\xa2\xe7\x9a\x84\xe5\x89\xaf\xe6\x9c\xac\n         */\n        public static RectF rectFTake(RectF rectF) {\n            RectF result = mRectFPool.take();\n            if (rectF != null) {\n                result.set(rectF);\n            }\n            return result;\n        }\n\n        /**\n         * \xe5\xbd\x92\xe8\xbf\x98\xe7\x9f\xa9\xe5\xbd\xa2\xe5\xaf\xb9\xe8\xb1\xa1\n         */\n        public static void rectFGiven(RectF rectF) {\n            mRectFPool.given(rectF);\n        }\n\n        /**\n         * \xe8\x8e\xb7\xe5\x8f\x96\xe4\xb8\xa4\xe7\x82\xb9\xe4\xb9\x8b\xe9\x97\xb4\xe8\xb7\x9d\xe7\xa6\xbb\n         *\n         * @param x1 \xe7\x82\xb91\n         * @param y1 \xe7\x82\xb91\n         * @param x2 \xe7\x82\xb92\n         * @param y2 \xe7\x82\xb92\n         * @return \xe8\xb7\x9d\xe7\xa6\xbb\n         */\n        public static float getDistance(float x1, float y1, float x2, float y2) {\n            float x = x1 - x2;\n            float y = y1 - y2;\n            return (float) Math.sqrt(x * x + y * y);\n        }\n\n        /**\n         * \xe8\x8e\xb7\xe5\x8f\x96\xe4\xb8\xa4\xe7\x82\xb9\xe7\x9a\x84\xe4\xb8\xad\xe7\x82\xb9\n         *\n         * @param x1 \xe7\x82\xb91\n         * @param y1 \xe7\x82\xb91\n         * @param x2 \xe7\x82\xb92\n         * @param y2 \xe7\x82\xb92\n         * @return float[]{x, y}\n         */\n        public static float[] getCenterPoint(float x1, float y1, float x2, float y2) {\n            return new float[]{(x1 + x2) / 2f, (y1 + y2) / 2f};\n        }\n\n        /**\n         * \xe8\x8e\xb7\xe5\x8f\x96\xe7\x9f\xa9\xe9\x98\xb5\xe7\x9a\x84\xe7\xbc\xa9\xe6\x94\xbe\xe5\x80\xbc\n         *\n         * @param matrix \xe8\xa6\x81\xe8\xae\xa1\xe7\xae\x97\xe7\x9a\x84\xe7\x9f\xa9\xe9\x98\xb5\n         * @return float[]{scaleX, scaleY}\n         */\n        public static float[] getMatrixScale(Matrix matrix) {\n            if (matrix != null) {\n                float[] value = new float[9];\n                matrix.getValues(value);\n                return new float[]{value[0], value[4]};\n            } else {\n                return new float[2];\n            }\n        }\n\n        /**\n         * \xe8\xae\xa1\xe7\xae\x97\xe7\x82\xb9\xe9\x99\xa4\xe4\xbb\xa5\xe7\x9f\xa9\xe9\x98\xb5\xe7\x9a\x84\xe5\x80\xbc\n         * <p>\n         * matrix.mapPoints(unknownPoint) -> point\n         * \xe5\xb7\xb2\xe7\x9f\xa5point\xe5\x92\x8cmatrix,\xe6\xb1\x82unknownPoint\xe7\x9a\x84\xe5\x80\xbc.\n         *\n         * @param point\n         * @param matrix\n         * @return unknownPoint\n         */\n        public static float[] inverseMatrixPoint(float[] point, Matrix matrix) {\n            if (point != null && matrix != null) {\n                float[] dst = new float[2];\n                //\xe8\xae\xa1\xe7\xae\x97matrix\xe7\x9a\x84\xe9\x80\x86\xe7\x9f\xa9\xe9\x98\xb5\n                Matrix inverse = matrixTake();\n                matrix.invert(inverse);\n                //\xe7\x94\xa8\xe9\x80\x86\xe7\x9f\xa9\xe9\x98\xb5\xe5\x8f\x98\xe6\x8d\xa2point\xe5\x88\xb0dst,dst\xe5\xb0\xb1\xe6\x98\xaf\xe7\xbb\x93\xe6\x9e\x9c\n                inverse.mapPoints(dst, point);\n                //\xe6\xb8\x85\xe9\x99\xa4\xe4\xb8\xb4\xe6\x97\xb6\xe5\x8f\x98\xe9\x87\x8f\n                matrixGiven(inverse);\n                return dst;\n            } else {\n                return new float[2];\n            }\n        }\n\n        /**\n         * \xe8\xae\xa1\xe7\xae\x97\xe4\xb8\xa4\xe4\xb8\xaa\xe7\x9f\xa9\xe5\xbd\xa2\xe4\xb9\x8b\xe9\x97\xb4\xe7\x9a\x84\xe5\x8f\x98\xe6\x8d\xa2\xe7\x9f\xa9\xe9\x98\xb5\n         * <p>\n         * unknownMatrix.mapRect(to, from)\n         * \xe5\xb7\xb2\xe7\x9f\xa5from\xe7\x9f\xa9\xe5\xbd\xa2\xe5\x92\x8cto\xe7\x9f\xa9\xe5\xbd\xa2,\xe6\xb1\x82unknownMatrix\n         *\n         * @param from\n         * @param to\n         * @param result unknownMatrix\n         */\n        public static void calculateRectTranslateMatrix(RectF from, RectF to, Matrix result) {\n            if (from == null || to == null || result == null) {\n                return;\n            }\n            if (from.width() == 0 || from.height() == 0) {\n                return;\n            }\n            result.reset();\n            result.postTranslate(-from.left, -from.top);\n            result.postScale(to.width() / from.width(), to.height() / from.height());\n            result.postTranslate(to.left, to.top);\n        }\n\n        /**\n         * \xe8\xae\xa1\xe7\xae\x97\xe5\x9b\xbe\xe7\x89\x87\xe5\x9c\xa8\xe6\x9f\x90\xe4\xb8\xaaImageView\xe4\xb8\xad\xe7\x9a\x84\xe6\x98\xbe\xe7\xa4\xba\xe7\x9f\xa9\xe5\xbd\xa2\n         *\n         * @param container ImageView\xe7\x9a\x84Rect\n         * @param srcWidth  \xe5\x9b\xbe\xe7\x89\x87\xe7\x9a\x84\xe5\xae\xbd\xe5\xba\xa6\n         * @param srcHeight \xe5\x9b\xbe\xe7\x89\x87\xe7\x9a\x84\xe9\xab\x98\xe5\xba\xa6\n         * @param scaleType \xe5\x9b\xbe\xe7\x89\x87\xe5\x9c\xa8ImageView\xe4\xb8\xad\xe7\x9a\x84ScaleType\n         * @param result    \xe5\x9b\xbe\xe7\x89\x87\xe5\xba\x94\xe8\xaf\xa5\xe5\x9c\xa8ImageView\xe4\xb8\xad\xe5\xb1\x95\xe7\xa4\xba\xe7\x9a\x84\xe7\x9f\xa9\xe5\xbd\xa2\n         */\n        public static void calculateScaledRectInContainer(RectF container, float srcWidth, float srcHeight, ScaleType scaleType, RectF result) {\n            if (container == null || result == null) {\n                return;\n            }\n            if (srcWidth == 0 || srcHeight == 0) {\n                return;\n            }\n            //\xe9\xbb\x98\xe8\xae\xa4scaleType\xe4\xb8\xbafit center\n            if (scaleType == null) {\n                scaleType = ScaleType.FIT_CENTER;\n            }\n            result.setEmpty();\n            if (ScaleType.FIT_XY.equals(scaleType)) {\n                result.set(container);\n            } else if (ScaleType.CENTER.equals(scaleType)) {\n                Matrix matrix = matrixTake();\n                RectF rect = rectFTake(0, 0, srcWidth, srcHeight);\n                matrix.setTranslate((container.width() - srcWidth) * 0.5f, (container.height() - srcHeight) * 0.5f);\n                matrix.mapRect(result, rect);\n                rectFGiven(rect);\n                matrixGiven(matrix);\n                result.left += container.left;\n                result.right += container.left;\n                result.top += container.top;\n                result.bottom += container.top;\n            } else if (ScaleType.CENTER_CROP.equals(scaleType)) {\n                Matrix matrix = matrixTake();\n                RectF rect = rectFTake(0, 0, srcWidth, srcHeight);\n                float scale;\n                float dx = 0;\n                float dy = 0;\n                if (srcWidth * container.height() > container.width() * srcHeight) {\n                    scale = container.height() / srcHeight;\n                    dx = (container.width() - srcWidth * scale) * 0.5f;\n                } else {\n                    scale = container.width() / srcWidth;\n                    dy = (container.height() - srcHeight * scale) * 0.5f;\n                }\n                matrix.setScale(scale, scale);\n                matrix.postTranslate(dx, dy);\n                matrix.mapRect(result, rect);\n                rectFGiven(rect);\n                matrixGiven(matrix);\n                result.left += container.left;\n                result.right += container.left;\n                result.top += container.top;\n                result.bottom += container.top;\n            } else if (ScaleType.CENTER_INSIDE.equals(scaleType)) {\n                Matrix matrix = matrixTake();\n                RectF rect = rectFTake(0, 0, srcWidth, srcHeight);\n                float scale;\n                float dx;\n                float dy;\n                if (srcWidth <= container.width() && srcHeight <= container.height()) {\n                    scale = 1f;\n                } else {\n                    scale = Math.min(container.width() / srcWidth, container.height() / srcHeight);\n                }\n                dx = (container.width() - srcWidth * scale) * 0.5f;\n                dy = (container.height() - srcHeight * scale) * 0.5f;\n                matrix.setScale(scale, scale);\n                matrix.postTranslate(dx, dy);\n                matrix.mapRect(result, rect);\n                rectFGiven(rect);\n                matrixGiven(matrix);\n                result.left += container.left;\n                result.right += container.left;\n                result.top += container.top;\n                result.bottom += container.top;\n            } else if (ScaleType.FIT_CENTER.equals(scaleType)) {\n                Matrix matrix = matrixTake();\n                RectF rect = rectFTake(0, 0, srcWidth, srcHeight);\n                RectF tempSrc = rectFTake(0, 0, srcWidth, srcHeight);\n                RectF tempDst = rectFTake(0, 0, container.width(), container.height());\n                matrix.setRectToRect(tempSrc, tempDst, Matrix.ScaleToFit.CENTER);\n                matrix.mapRect(result, rect);\n                rectFGiven(tempDst);\n                rectFGiven(tempSrc);\n                rectFGiven(rect);\n                matrixGiven(matrix);\n                result.left += container.left;\n                result.right += container.left;\n                result.top += container.top;\n                result.bottom += container.top;\n            } else if (ScaleType.FIT_START.equals(scaleType)) {\n                Matrix matrix = matrixTake();\n                RectF rect = rectFTake(0, 0, srcWidth, srcHeight);\n                RectF tempSrc = rectFTake(0, 0, srcWidth, srcHeight);\n                RectF tempDst = rectFTake(0, 0, container.width(), container.height());\n                matrix.setRectToRect(tempSrc, tempDst, Matrix.ScaleToFit.START);\n                matrix.mapRect(result, rect);\n                rectFGiven(tempDst);\n                rectFGiven(tempSrc);\n                rectFGiven(rect);\n                matrixGiven(matrix);\n                result.left += container.left;\n                result.right += container.left;\n                result.top += container.top;\n                result.bottom += container.top;\n            } else if (ScaleType.FIT_END.equals(scaleType)) {\n                Matrix matrix = matrixTake();\n                RectF rect = rectFTake(0, 0, srcWidth, srcHeight);\n                RectF tempSrc = rectFTake(0, 0, srcWidth, srcHeight);\n                RectF tempDst = rectFTake(0, 0, container.width(), container.height());\n                matrix.setRectToRect(tempSrc, tempDst, Matrix.ScaleToFit.END);\n                matrix.mapRect(result, rect);\n                rectFGiven(tempDst);\n                rectFGiven(tempSrc);\n                rectFGiven(rect);\n                matrixGiven(matrix);\n                result.left += container.left;\n                result.right += container.left;\n                result.top += container.top;\n                result.bottom += container.top;\n            } else {\n                result.set(container);\n            }\n        }\n    }\n\n    /**\n     * mask\xe5\x8f\x98\xe6\x8d\xa2\xe5\x8a\xa8\xe7\x94\xbb\n     * <p>\n     * \xe5\xb0\x86mask\xe4\xbb\x8e\xe4\xb8\x80\xe4\xb8\xaarect\xe5\x8a\xa8\xe7\x94\xbb\xe5\x88\xb0\xe5\x8f\xa6\xe5\xa4\x96\xe4\xb8\x80\xe4\xb8\xaarect\n     */\n    private class MaskAnimator extends ValueAnimator implements ValueAnimator.AnimatorUpdateListener {\n\n        /**\n         * \xe5\xbc\x80\xe5\xa7\x8bmask\n         */\n        private float[] mStart = new float[4];\n\n        /**\n         * \xe7\xbb\x93\xe6\x9d\x9fmask\n         */\n        private float[] mEnd = new float[4];\n\n        /**\n         * \xe4\xb8\xad\xe9\x97\xb4\xe7\xbb\x93\xe6\x9e\x9cmask\n         */\n        private float[] mResult = new float[4];\n\n        /**\n         * \xe5\x88\x9b\xe5\xbb\xbamask\xe5\x8f\x98\xe6\x8d\xa2\xe5\x8a\xa8\xe7\x94\xbb\n         *\n         * @param start    \xe5\x8a\xa8\xe7\x94\xbb\xe8\xb5\xb7\xe5\xa7\x8b\xe7\x8a\xb6\xe6\x80\x81\n         * @param end      \xe5\x8a\xa8\xe7\x94\xbb\xe7\xbb\x88\xe7\x82\xb9\xe7\x8a\xb6\xe6\x80\x81\n         * @param duration \xe5\x8a\xa8\xe7\x94\xbb\xe6\x8c\x81\xe7\xbb\xad\xe6\x97\xb6\xe9\x97\xb4\n         */\n        public MaskAnimator(RectF start, RectF end, long duration) {\n            super();\n            setFloatValues(0, 1f);\n            setDuration(duration);\n            addUpdateListener(this);\n            //\xe5\xb0\x86\xe8\xb5\xb7\xe7\x82\xb9\xe7\xbb\x88\xe7\x82\xb9\xe6\x8b\xb7\xe8\xb4\x9d\xe5\x88\xb0\xe6\x95\xb0\xe7\xbb\x84\xe6\x96\xb9\xe4\xbe\xbf\xe8\xae\xa1\xe7\xae\x97\n            mStart[0] = start.left;\n            mStart[1] = start.top;\n            mStart[2] = start.right;\n            mStart[3] = start.bottom;\n            mEnd[0] = end.left;\n            mEnd[1] = end.top;\n            mEnd[2] = end.right;\n            mEnd[3] = end.bottom;\n        }\n\n        @Override\n        public void onAnimationUpdate(ValueAnimator animation) {\n            //\xe8\x8e\xb7\xe5\x8f\x96\xe5\x8a\xa8\xe7\x94\xbb\xe8\xbf\x9b\xe5\xba\xa6,0-1\xe8\x8c\x83\xe5\x9b\xb4\n            float value = (Float) animation.getAnimatedValue();\n            //\xe6\xa0\xb9\xe6\x8d\xae\xe8\xbf\x9b\xe5\xba\xa6\xe5\xaf\xb9\xe8\xb5\xb7\xe7\x82\xb9\xe7\xbb\x88\xe7\x82\xb9\xe4\xb9\x8b\xe9\x97\xb4\xe5\x81\x9a\xe6\x8f\x92\xe5\x80\xbc\n            for (int i = 0; i < 4; i++) {\n                mResult[i] = mStart[i] + (mEnd[i] - mStart[i]) * value;\n            }\n            //\xe6\x9c\x9f\xe9\x97\xb4mask\xe6\x9c\x89\xe5\x8f\xaf\xe8\x83\xbd\xe8\xa2\xab\xe7\xbd\xae\xe7\xa9\xba\xe4\xba\x86,\xe6\x89\x80\xe4\xbb\xa5\xe5\x88\xa4\xe6\x96\xad\xe4\xb8\x80\xe4\xb8\x8b\n            if (mMask == null) {\n                mMask = new RectF();\n            }\n            //\xe8\xae\xbe\xe7\xbd\xae\xe6\x96\xb0\xe7\x9a\x84mask\xe5\xb9\xb6\xe7\xbb\x98\xe5\x88\xb6\n            mMask.set(mResult[0], mResult[1], mResult[2], mResult[3]);\n            invalidate();\n        }\n    }\n\n    /**\n     * \xe6\x83\xaf\xe6\x80\xa7\xe5\x8a\xa8\xe7\x94\xbb\n     * <p>\n     * \xe9\x80\x9f\xe5\xba\xa6\xe9\x80\x90\xe6\xb8\x90\xe8\xa1\xb0\xe5\x87\x8f,\xe6\xaf\x8f\xe5\xb8\xa7\xe9\x80\x9f\xe5\xba\xa6\xe8\xa1\xb0\xe5\x87\x8f\xe4\xb8\xba\xe5\x8e\x9f\xe6\x9d\xa5\xe7\x9a\x84FLING_DAMPING_FACTOR,\xe5\xbd\x93\xe9\x80\x9f\xe5\xba\xa6\xe8\xa1\xb0\xe5\x87\x8f\xe5\x88\xb0\xe5\xb0\x8f\xe4\xba\x8e1\xe6\x97\xb6\xe5\x81\x9c\xe6\xad\xa2.\n     * \xe5\xbd\x93\xe5\x9b\xbe\xe7\x89\x87\xe4\xb8\x8d\xe8\x83\xbd\xe7\xa7\xbb\xe5\x8a\xa8\xe6\x97\xb6,\xe5\x8a\xa8\xe7\x94\xbb\xe5\x81\x9c\xe6\xad\xa2.\n     */\n    private class FlingAnimator extends ValueAnimator implements ValueAnimator.AnimatorUpdateListener {\n\n        /**\n         * \xe9\x80\x9f\xe5\xba\xa6\xe5\x90\x91\xe9\x87\x8f\n         */\n        private float[] mVector;\n\n        /**\n         * \xe5\x88\x9b\xe5\xbb\xba\xe6\x83\xaf\xe6\x80\xa7\xe5\x8a\xa8\xe7\x94\xbb\n         * <p>\n         * \xe5\x8f\x82\xe6\x95\xb0\xe5\x8d\x95\xe4\xbd\x8d\xe4\xb8\xba \xe5\x83\x8f\xe7\xb4\xa0/\xe5\xb8\xa7\n         *\n         * @param vectorX \xe9\x80\x9f\xe5\xba\xa6\xe5\x90\x91\xe9\x87\x8f\n         * @param vectorY \xe9\x80\x9f\xe5\xba\xa6\xe5\x90\x91\xe9\x87\x8f\n         */\n        public FlingAnimator(float vectorX, float vectorY) {\n            super();\n            setFloatValues(0, 1f);\n            setDuration(1000000);\n            addUpdateListener(this);\n            mVector = new float[]{vectorX, vectorY};\n        }\n\n        @Override\n        public void onAnimationUpdate(ValueAnimator animation) {\n            //\xe7\xa7\xbb\xe5\x8a\xa8\xe5\x9b\xbe\xe5\x83\x8f\xe5\xb9\xb6\xe7\xbb\x99\xe5\x87\xba\xe7\xbb\x93\xe6\x9e\x9c\n            boolean result = scrollBy(mVector[0], mVector[1]);\n            //\xe8\xa1\xb0\xe5\x87\x8f\xe9\x80\x9f\xe5\xba\xa6\n            mVector[0] *= FLING_DAMPING_FACTOR;\n            mVector[1] *= FLING_DAMPING_FACTOR;\n            //\xe9\x80\x9f\xe5\xba\xa6\xe5\xa4\xaa\xe5\xb0\x8f\xe6\x88\x96\xe8\x80\x85\xe4\xb8\x8d\xe8\x83\xbd\xe7\xa7\xbb\xe5\x8a\xa8\xe4\xba\x86\xe5\xb0\xb1\xe7\xbb\x93\xe6\x9d\x9f\n            if (!result || MathUtils.getDistance(0, 0, mVector[0], mVector[1]) < 1f) {\n                animation.cancel();\n            }\n        }\n    }\n\n\n    ////////////////////////////////\xe6\x95\xb0\xe5\xad\xa6\xe8\xae\xa1\xe7\xae\x97\xe5\xb7\xa5\xe5\x85\xb7\xe7\xb1\xbb////////////////////////////////\n\n    /**\n     * \xe7\xbc\xa9\xe6\x94\xbe\xe5\x8a\xa8\xe7\x94\xbb\n     * <p>\n     * \xe5\x9c\xa8\xe7\xbb\x99\xe5\xae\x9a\xe6\x97\xb6\xe9\x97\xb4\xe5\x86\x85\xe4\xbb\x8e\xe4\xb8\x80\xe4\xb8\xaa\xe7\x9f\xa9\xe9\x98\xb5\xe7\x9a\x84\xe5\x8f\x98\xe5\x8c\x96\xe9\x80\x90\xe6\xb8\x90\xe5\x8a\xa8\xe7\x94\xbb\xe5\x88\xb0\xe5\x8f\xa6\xe4\xb8\x80\xe4\xb8\xaa\xe7\x9f\xa9\xe9\x98\xb5\xe7\x9a\x84\xe5\x8f\x98\xe5\x8c\x96\n     */\n    private class ScaleAnimator extends ValueAnimator implements ValueAnimator.AnimatorUpdateListener {\n\n        /**\n         * \xe5\xbc\x80\xe5\xa7\x8b\xe7\x9f\xa9\xe9\x98\xb5\n         */\n        private float[] mStart = new float[9];\n\n        /**\n         * \xe7\xbb\x93\xe6\x9d\x9f\xe7\x9f\xa9\xe9\x98\xb5\n         */\n        private float[] mEnd = new float[9];\n\n        /**\n         * \xe4\xb8\xad\xe9\x97\xb4\xe7\xbb\x93\xe6\x9e\x9c\xe7\x9f\xa9\xe9\x98\xb5\n         */\n        private float[] mResult = new float[9];\n\n        /**\n         * \xe6\x9e\x84\xe5\xbb\xba\xe4\xb8\x80\xe4\xb8\xaa\xe7\xbc\xa9\xe6\x94\xbe\xe5\x8a\xa8\xe7\x94\xbb\n         * <p>\n         * \xe4\xbb\x8e\xe4\xb8\x80\xe4\xb8\xaa\xe7\x9f\xa9\xe9\x98\xb5\xe5\x8f\x98\xe6\x8d\xa2\xe5\x88\xb0\xe5\x8f\xa6\xe5\xa4\x96\xe4\xb8\x80\xe4\xb8\xaa\xe7\x9f\xa9\xe9\x98\xb5\n         *\n         * @param start \xe5\xbc\x80\xe5\xa7\x8b\xe7\x9f\xa9\xe9\x98\xb5\n         * @param end   \xe7\xbb\x93\xe6\x9d\x9f\xe7\x9f\xa9\xe9\x98\xb5\n         */\n        public ScaleAnimator(Matrix start, Matrix end) {\n            this(start, end, SCALE_ANIMATOR_DURATION);\n        }\n\n        /**\n         * \xe6\x9e\x84\xe5\xbb\xba\xe4\xb8\x80\xe4\xb8\xaa\xe7\xbc\xa9\xe6\x94\xbe\xe5\x8a\xa8\xe7\x94\xbb\n         * <p>\n         * \xe4\xbb\x8e\xe4\xb8\x80\xe4\xb8\xaa\xe7\x9f\xa9\xe9\x98\xb5\xe5\x8f\x98\xe6\x8d\xa2\xe5\x88\xb0\xe5\x8f\xa6\xe5\xa4\x96\xe4\xb8\x80\xe4\xb8\xaa\xe7\x9f\xa9\xe9\x98\xb5\n         *\n         * @param start    \xe5\xbc\x80\xe5\xa7\x8b\xe7\x9f\xa9\xe9\x98\xb5\n         * @param end      \xe7\xbb\x93\xe6\x9d\x9f\xe7\x9f\xa9\xe9\x98\xb5\n         * @param duration \xe5\x8a\xa8\xe7\x94\xbb\xe6\x97\xb6\xe9\x97\xb4\n         */\n        public ScaleAnimator(Matrix start, Matrix end, long duration) {\n            super();\n            setFloatValues(0, 1f);\n            setDuration(duration);\n            addUpdateListener(this);\n            start.getValues(mStart);\n            end.getValues(mEnd);\n        }\n\n        @Override\n        public void onAnimationUpdate(ValueAnimator animation) {\n            //\xe8\x8e\xb7\xe5\x8f\x96\xe5\x8a\xa8\xe7\x94\xbb\xe8\xbf\x9b\xe5\xba\xa6\n            float value = (Float) animation.getAnimatedValue();\n            //\xe6\xa0\xb9\xe6\x8d\xae\xe5\x8a\xa8\xe7\x94\xbb\xe8\xbf\x9b\xe5\xba\xa6\xe8\xae\xa1\xe7\xae\x97\xe7\x9f\xa9\xe9\x98\xb5\xe4\xb8\xad\xe9\x97\xb4\xe6\x8f\x92\xe5\x80\xbc\n            for (int i = 0; i < 9; i++) {\n                mResult[i] = mStart[i] + (mEnd[i] - mStart[i]) * value;\n            }\n            //\xe8\xae\xbe\xe7\xbd\xae\xe7\x9f\xa9\xe9\x98\xb5\xe5\xb9\xb6\xe9\x87\x8d\xe7\xbb\x98\n            mOuterMatrix.setValues(mResult);\n            dispatchOuterMatrixChanged();\n            invalidate();\n        }\n    }\n}'