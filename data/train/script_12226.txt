b'\n// query l to r range for the no of integers between x and y\n#include <iostream>\nusing namespace std;\nint T = 1;\nconst int N = 1e6;\nconst int MX = N;\nstruct node{\n\tint l, r, cnt;\t\n}t[100*MX];\nint root[N], a[N];\nint build(int lo, int hi){\n\tint id = T++;\n\tif(lo == hi) return id;\n\tint  mid = (lo+hi)/2;\n\tt[id].l = build(lo, mid);\n\tt[id].r = build(mid+1, hi);\n\treturn id;\n}\nint update(int rt, int lo, int hi, int val){\n\tint id = T++;\n\tt[id] = t[rt]; t[id].cnt++;\n\tif(lo == hi) return id;\n\tint mid = (lo+hi)/2;\n\tif(val <= mid) t[id].l = update(t[rt].l, lo, mid, val);\n\telse t[id].r = update(t[rt].r, mid+1, hi, val);\n\treturn id;\n}\nint query(int rt, int lo, int hi, int x, int y){\n\tif(x==lo and y==hi) return t[rt].cnt;\n\tint mid = (lo+hi)/2;\n\tif(y <= mid) return query(t[rt].l, lo, mid, x, y);\n\telse if (x > mid) return query(t[rt].r, mid+1, hi, x, y);\n\treturn query(t[rt].l, lo, mid, x, mid)\t+ query(t[rt].r, mid+1, hi, mid+1, y);\n}\nint main() {\n\tint i, n, q;\n\tcin >> n >> q;\n\tfor(i = 0; i < n; i++) cin >> a[i+1];\n\troot[0] = build(0, MX);\n\tfor(i = 1; i <= n; i++){\n\t\troot[i] = update(root[i-1], 0, MX, a[i]);\n\t}\n\twhile(q--){\n\t\tint l, r, x, y;\n\t\tcin >> l >> r >> x >> y;\n\t\tcout << query(root[r], 0, MX, x, y) - query(root[l-1], 0, MX, x, y) << endl;\n\t}\n\treturn 0;\n}'