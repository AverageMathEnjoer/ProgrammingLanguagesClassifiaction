b'package com.naman14.timber.subfragments;\n\nimport android.content.CursorLoader;\nimport android.database.Cursor;\nimport android.graphics.Color;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.provider.MediaStore;\nimport androidx.annotation.Nullable;\nimport androidx.fragment.app.Fragment;\nimport androidx.appcompat.app.ActionBar;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.appcompat.widget.Toolbar;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.TextView;\n\nimport com.naman14.timber.MusicPlayer;\nimport com.naman14.timber.R;\nimport com.naman14.timber.utils.LyricsExtractor;\nimport com.naman14.timber.utils.LyricsLoader;\n\nimport java.io.File;\n\nimport retrofit.Callback;\nimport retrofit.RetrofitError;\nimport retrofit.client.Response;\n\n/**\n * Created by christoph on 10.12.16.\n */\n\npublic class LyricsFragment extends Fragment {\n\n    private String lyrics = null;\n    private Toolbar toolbar;\n    private View rootView;\n\n    @Nullable\n    @Override\n    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n        rootView = inflater.inflate(R.layout.fragment_lyrics,container,false);\n\n        toolbar = (Toolbar) rootView.findViewById(R.id.toolbar);\n        setupToolbar();\n\n        loadLyrics();\n\n        return rootView;\n    }\n\n    private void loadLyrics() {\n\n        final View lyricsView = rootView.findViewById(R.id.lyrics);\n        final TextView poweredbyTextView = (TextView) lyricsView.findViewById(R.id.lyrics_makeitpersonal);\n        poweredbyTextView.setVisibility(View.GONE);\n        final TextView lyricsTextView = (TextView) lyricsView.findViewById(R.id.lyrics_text);\n        lyricsTextView.setText(getString(R.string.lyrics_loading));\n        String filename = getRealPathFromURI(Uri.parse(MediaStore.Audio.Media.EXTERNAL_CONTENT_URI + "/" + MusicPlayer.getCurrentAudioId()));\n        if (filename != null && lyrics == null) {\n            lyrics = LyricsExtractor.getLyrics(new File(filename));\n        }\n\n        if (lyrics != null) {\n            lyricsTextView.setText(lyrics);\n        } else {\n            String artist = MusicPlayer.getArtistName();\n            if (artist != null) {\n                int i = artist.lastIndexOf(" feat");\n                if (i != -1) {\n                    artist = artist.substring(0, i);\n                }\n\n                LyricsLoader.getInstance(this.getContext()).getLyrics(artist, MusicPlayer.getTrackName(), new Callback<String>() {\n                    @Override\n                    public void success(String s, Response response) {\n                        lyrics = s;\n                        if (s.equals("Sorry, We don\'t have lyrics for this song yet.\\n")) {\n                            lyricsTextView.setText(R.string.no_lyrics);\n                        } else {\n                            lyricsTextView.setText(s);\n                            poweredbyTextView.setVisibility(View.VISIBLE);\n                        }\n                    }\n\n                    @Override\n                    public void failure(RetrofitError error) {\n                        lyricsTextView.setText(R.string.no_lyrics);\n                    }\n                });\n\n            } else {\n                lyricsTextView.setText(R.string.no_lyrics);\n            }\n        }\n    }\n\n    private void setupToolbar() {\n\n        ((AppCompatActivity) getActivity()).setSupportActionBar(toolbar);\n\n        final ActionBar ab = ((AppCompatActivity) getActivity()).getSupportActionBar();\n        ab.setDisplayHomeAsUpEnabled(true);\n        if (MusicPlayer.getTrackName() != null) {\n            ab.setTitle(MusicPlayer.getTrackName());\n        }\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n        toolbar.setBackgroundColor(Color.TRANSPARENT);\n    }\n\n    private String getRealPathFromURI(Uri contentUri) {\n        String[] proj = {MediaStore.Audio.Media.DATA};\n        CursorLoader loader = new CursorLoader(this.getContext(), contentUri, proj, null, null, null);\n        Cursor cursor = loader.loadInBackground();\n        int column_index = cursor.getColumnIndexOrThrow(MediaStore.Audio.Media.DATA);\n        cursor.moveToFirst();\n        String result = cursor.getString(column_index);\n        cursor.close();\n        return result;\n    }\n}\n'