b'{-# LANGUAGE CPP #-}\n{-# LANGUAGE BangPatterns #-}\n\nimport qualified Data.List as List\nimport Test.Tasty\nimport Test.Tasty.QuickCheck\nimport Utils.Containers.Internal.BitUtil (wordSize)\nimport Utils.Containers.Internal.BitQueue\n    ( BitQueue\n    , emptyQB\n    , snocQB\n    , buildQ\n    , toListQ )\n\ndefault (Int)\n\nmain :: IO ()\nmain = defaultMain $ testGroup "bitqueue-properties" $ map testNum [0..(wordSize - 2)]\n\ntestNum :: Int -> TestTree\ntestNum n = testProperty ("Size "++show n) (prop_n n)\n\nprop_n :: Int -> Gen Bool\nprop_n n = checkList <$> vectorOf n (arbitrary :: Gen Bool)\n  where\n    checkList :: [Bool] -> Bool\n    checkList values = toListQ q == values\n      where\n        q :: BitQueue\n        !q = buildQ $ List.foldl\' snocQB emptyQB values\n'