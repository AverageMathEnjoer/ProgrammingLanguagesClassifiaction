b'package co.joebirch.composeplayground.graphics\n\nimport androidx.compose.foundation.background\nimport androidx.compose.material.Text\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.rememberScrollState\nimport androidx.compose.foundation.verticalScroll\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.unit.dp\nimport co.joebirch.composeplayground.ComposableLayout\n\nobject ColorView : ComposableLayout {\n\n    @Composable\n    override fun build() {\n        Column(\n            modifier = Modifier\n                .fillMaxSize()\n                .padding(32.dp)\n                .verticalScroll(rememberScrollState()),\n            verticalArrangement = Arrangement.SpaceEvenly,\n            horizontalAlignment = Alignment.CenterHorizontally\n        ) {\n            ColorObject()\n            Spacer(modifier = Modifier.height(48.dp))\n            ColorFromLong()\n            Spacer(modifier = Modifier.height(48.dp))\n            ColorFromFloats()\n            Spacer(modifier = Modifier.height(48.dp))\n            ColorFromIntRange()\n        }\n    }\n}\n\n@Composable\nfun ColorObject() {\n    val selectedColor = remember { mutableStateOf(0) }\n    val colors = listOf(\n        Color.Red,\n        Color.Green,\n        Color.LightGray,\n        Color.DarkGray,\n        Color.Black,\n        Color.White,\n        Color.Cyan,\n        Color.Blue,\n        Color.Gray,\n        Color.Magenta,\n        Color.Transparent,\n        Color.Yellow,\n        Color.Unspecified\n    )\n    Column(\n        modifier = Modifier\n            .fillMaxSize()\n            .clickable(onClick = {\n                if (selectedColor.value < colors.count() - 1) selectedColor.value =\n                    selectedColor.value + 1 else selectedColor.value = 0\n            }),\n        verticalArrangement = Arrangement.SpaceEvenly,\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        Box(\n            modifier = Modifier.fillMaxWidth().height(16.dp)\n                .background(colors[selectedColor.value])\n        )\n        Text(\n            textAlign = TextAlign.Center,\n            text = "Click to change",\n            modifier = Modifier.padding(16.dp)\n        )\n    }\n}\n\n@Composable\nfun ColorFromLong() {\n    val color = Color(0xFF000080)\n\n    Box(\n        modifier = Modifier.fillMaxWidth().height(16.dp)\n            .background(color = color)\n    )\n}\n\n@Composable\nfun ColorFromFloats() {\n    val color = Color(\n        red = 1.0f,\n        green = 0f,\n        blue = 0f,\n        alpha = 1f\n    )\n\n    Box(\n        modifier = Modifier.fillMaxWidth().height(16.dp)\n            .background(color)\n    )\n}\n\n@Composable\nfun ColorFromIntRange() {\n    val color = Color(\n        red = 255,\n        green = 0,\n        blue = 0,\n        alpha = 1\n    )\n\n    Box(\n        modifier = Modifier.fillMaxWidth().height(16.dp)\n            .background(color)\n    )\n}\n'