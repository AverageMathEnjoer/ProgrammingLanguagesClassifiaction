b'// I2Cdev library collection - AD7746 I2C device class\r\n// Based on Analog Devices AD7746 Datasheet, Revision 0, 2005\r\n// 2012-04-01 by Peteris Skorovs <pskorovs@gmail.com>\r\n//\r\n// This I2C device library is using (and submitted as a part of) Jeff Rowberg\'s I2Cdevlib library,\r\n// which should (hopefully) always be available at https://github.com/jrowberg/i2cdevlib\r\n//\r\n// Changelog:\r\n//     2012-04-01 - initial release\r\n\r\n/* ============================================\r\nI2Cdev device library code is placed under the MIT license\r\nCopyright (c) 2012 Peteris Skorovs\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the "Software"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n===============================================\r\n*/\r\n\r\n#include "AD7746.h"\r\n\r\n/** Default constructor, uses default I2C address.\r\n * @see AD7746_DEFAULT_ADDRESS\r\n */\r\nAD7746::AD7746() {\r\n    devAddr = AD7746_DEFAULT_ADDRESS;\r\n}\r\n\r\n/** Specific address constructor.\r\n * @param address I2C address\r\n * @see AD7746_DEFAULT_ADDRESS\r\n * @see AD7746_ADDRESS\r\n */\r\nAD7746::AD7746(uint8_t address) {\r\n    devAddr = address;\r\n}\r\n\r\n/** Power on and prepare for general usage.\r\n */\r\nvoid AD7746::initialize() {\r\n    reset();\r\n}\r\n\r\n/** Verify the I2C connection.\r\n * Make sure the device is connected and responds as expected.\r\n * @return True if connection is valid, false otherwise\r\n */\r\nbool AD7746::testConnection() {\r\n    if (I2Cdev::readByte(devAddr, AD7746_RA_STATUS, buffer)) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nvoid AD7746::reset() {   \r\n    \r\n#ifdef I2CDEV_SERIAL_DEBUG\r\n    Serial.print("I2C (0x");\r\n    Serial.print(devAddr, HEX);\r\n    Serial.print(") resetting");\r\n    Serial.print("...");\r\n#endif    \r\n\r\n#if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)\r\n    Wire.beginTransmission(devAddr);\r\n    Wire.send((uint8_t) AD7746_RESET); // send reset\r\n#elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100)\r\n    Wire.beginTransmission(devAddr);\r\n    Wire.write((uint8_t) AD7746_RESET); // send reset\r\n#endif\r\n#if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)\r\n    Wire.endTransmission();\r\n#elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100)\r\n    Wire.endTransmission();\r\n#endif\r\n    \r\n#ifdef I2CDEV_SERIAL_DEBUG\r\n    Serial.println(". Done.");\r\n#endif\r\n    \r\ndelay(1); //wait a tad for reboot\r\n}\r\n\r\n\r\nuint32_t AD7746::getCapacitance() {\r\n    uint32_t capacitance;\r\n    I2Cdev::readBytes(devAddr, 0, 4, buffer);\r\n    capacitance = ((uint32_t)buffer[1] << 16) | ((uint32_t)buffer[2] << 8) | (uint32_t)buffer[3];\r\n    \r\n    return capacitance;\r\n}\r\n\r\n\r\nvoid AD7746::writeCapSetupRegister(uint8_t data) {\r\n    I2Cdev::writeByte(devAddr, AD7746_RA_CAP_SETUP, data);\r\n}\r\n\r\nvoid AD7746::writeVtSetupRegister(uint8_t data) {\r\n    I2Cdev::writeByte(devAddr, AD7746_RA_VT_SETUP, data);\r\n}\r\n\r\n\r\nvoid AD7746::writeExcSetupRegister(uint8_t data) {\r\n    I2Cdev::writeByte(devAddr, AD7746_RA_EXC_SETUP, data);\r\n}\r\n\r\n\r\nvoid AD7746::writeConfigurationRegister(uint8_t data) {\r\n    I2Cdev::writeByte(devAddr, AD7746_RA_CONFIGURATION, data);\r\n}\r\n\r\n\r\nvoid AD7746::writeCapDacARegister(uint8_t data) {\r\n    I2Cdev::writeByte(devAddr, AD7746_RA_CAP_DAC_A, data);\r\n}\r\n\r\nvoid AD7746::writeCapDacBRegister(uint8_t data) {\r\n    I2Cdev::writeByte(devAddr, AD7746_RA_CAP_DAC_B, data);\r\n}\r\n\r\nvoid AD7746::write_register(uint8_t addr,uint8_t data) {\r\n    I2Cdev::writeByte(devAddr, addr, data);\r\n}\r\n'