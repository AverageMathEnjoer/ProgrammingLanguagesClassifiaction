b'{-# LANGUAGE OverloadedStrings #-}\n\nmodule Test.Object.Builder\n(\n  spec,\n)\nwhere\n\nimport Pdf.Core.Object\nimport Pdf.Core.Object.Builder\n\nimport qualified Data.ByteString.Builder as Builder\nimport qualified Data.Vector as Vector\nimport qualified Data.HashMap.Strict as HashMap\nimport Test.Hspec\n\nspec :: Spec\nspec = describe "Object.Builder" $ do\n  buildBoolSpec\n  buildStringSpec\n  buildNameSpec\n  buildNumberSpec\n  buildArraySpec\n  buildDictSpec\n  buildRefSpec\n  buildStreamSpec\n\nbuildBoolSpec :: Spec\nbuildBoolSpec = describe "buildBool" $ do\n  it "should build \'true\' for True" $ do\n    let res = buildBool True \n    Builder.toLazyByteString res `shouldBe` "true"\n\n  it "should build \'false\' for False" $ do\n    let res = buildBool False\n    Builder.toLazyByteString res `shouldBe` "false"\n\nbuildStringSpec :: Spec\nbuildStringSpec = describe "buildString" $ do\n  it "should produce literal string when all chars are printable" $ do\n    let res = buildString "hello"\n    Builder.toLazyByteString res `shouldBe` "(hello)"\n\n  it "should produce hex string when there are not printable chars" $ do\n    let res = buildString "\\NUL\\255"\n    Builder.toLazyByteString res `shouldBe` "<00ff>"\n\n  it "should escape special chars" $ do\n    let res = buildString "()\\\\"\n    Builder.toLazyByteString res `shouldBe` "(\\\\(\\\\)\\\\\\\\)"\n\nbuildNameSpec :: Spec\nbuildNameSpec = describe "buildName" $ do\n  it "should build a name" $ do\n    let res = buildName "hello"\n    Builder.toLazyByteString res `shouldBe` "/hello"\n\nbuildNumberSpec :: Spec\nbuildNumberSpec = describe "buildNumber" $ do\n  it "should build int" $ do\n    let res = buildNumber 42\n    Builder.toLazyByteString res `shouldBe` "42"\n\n  it "should build float" $ do\n    let res = buildNumber 42.4\n    Builder.toLazyByteString res `shouldBe` "42.4"\n\nbuildArraySpec :: Spec\nbuildArraySpec = describe "buildArray" $ do\n  it "should build an array" $ do\n    let res = buildArray (Vector.fromList [Number 42, Bool False])\n    Builder.toLazyByteString res `shouldBe` "[42 false]"\n\n  it "should build empty array" $ do\n    let res = buildArray Vector.empty\n    Builder.toLazyByteString res `shouldBe` "[]"\n\nbuildDictSpec :: Spec\nbuildDictSpec = describe "buildDict" $ do\n  it "should build a dictionary" $ do\n    let res = buildDict (HashMap.fromList [("hello", Bool False)])\n    Builder.toLazyByteString res `shouldBe` "<</hello false>>"\n\nbuildRefSpec :: Spec\nbuildRefSpec = describe "buildRef" $ do\n  it "should build a ref" $ do\n    let res = buildRef (R 42 24)\n    Builder.toLazyByteString res `shouldBe` "42 24 R"\n\nbuildStreamSpec :: Spec\nbuildStreamSpec = describe "buildStream" $ do\n  it "should build a stream" $ do\n    let res = buildStream dict "hello"\n        dict = HashMap.fromList [("a", String "b")]\n    Builder.toLazyByteString res\n      `shouldBe` "<</a (b)>>stream\\nhello\\nendstream"\n'