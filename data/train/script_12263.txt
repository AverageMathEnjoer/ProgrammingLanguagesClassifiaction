b'{-# LANGUAGE FlexibleContexts #-}\n{-# LANGUAGE FlexibleInstances #-}\n{-# LANGUAGE TupleSections #-}\n{-# LANGUAGE TypeFamilies #-}\n\nmodule Graphics.Hoodle.Render.Generic where\n\nimport Control.Lens (set, view, _1)\nimport Data.Hoodle.BBox\n  ( BBoxed (..),\n  )\nimport Data.Hoodle.Generic\n  ( GPage,\n    gbackground,\n    gdimension,\n    glayers,\n  )\nimport Data.Hoodle.Simple\n  ( Background,\n    Dimension,\n    Stroke,\n  )\nimport Data.Kind (Type)\nimport Graphics.Hoodle.Render\n  ( Xform4Page,\n    renderBkg,\n    renderRBkg,\n    renderRBkgBuf,\n    renderRBkgInBBox,\n    renderRLayerInBBox,\n    renderRLayerInBBoxBuf,\n    renderStrk,\n  )\nimport Graphics.Hoodle.Render.Type\n  ( CanvasId,\n    InBBox (..),\n    InBBoxBkgBuf (..),\n    InBBoxOption (..),\n    RBackground (..),\n    RBkgOpt (..),\n    RLayer,\n    RPage,\n    RenderCache,\n  )\nimport qualified Graphics.Rendering.Cairo as Cairo\n\n-- | temporary util\npassarg :: (Monad m) => (CanvasId -> a -> m ()) -> CanvasId -> a -> m a\npassarg f i a = f i a >> return a\n\npassarg1 :: (Monad m) => (a -> m ()) -> a -> m a\npassarg1 f a = f a >> return a\n\nconst2 :: c -> a -> b -> c\nconst2 f _x _y = f\n\n-- |\nclass Renderable a where\n  cairoRender :: RenderCache -> CanvasId -> a -> Cairo.Render a\n\n-- |\ninstance Renderable (Background, Dimension) where\n  cairoRender = const2 (passarg1 renderBkg)\n\n-- |\ninstance Renderable Stroke where\n  cairoRender = const2 (passarg1 renderStrk)\n\n-- |\ninstance Renderable (BBoxed Stroke) where\n  cairoRender = const2 (passarg1 (renderStrk . bbxed_content))\n\n-- |\ninstance Renderable (RLayer, Dimension, Maybe Xform4Page) where\n  cairoRender cache cid = renderRLayerInBBox cache cid Nothing\n\n-- |\nclass RenderOptionable a where\n  type RenderOption a :: Type\n  cairoRenderOption :: RenderOption a -> RenderCache -> CanvasId -> a -> Cairo.Render a\n\n-- |\ninstance RenderOptionable (Background, Dimension) where\n  type RenderOption (Background, Dimension) = ()\n  cairoRenderOption () = cairoRender\n\n-- |\ninstance RenderOptionable Stroke where\n  type RenderOption Stroke = ()\n  cairoRenderOption () = cairoRender\n\n-- |\ndata StrokeBBoxOption = DrawFull | DrawBoxOnly\n\n-- |\ninstance RenderOptionable (BBoxed Stroke) where\n  type RenderOption (BBoxed Stroke) = StrokeBBoxOption\n  cairoRenderOption DrawFull = cairoRender\n  cairoRenderOption DrawBoxOnly = error "BBoxed Stroke.cairoRenderOption: DrawBoxOnly deprecated"\n\n-- |\ninstance RenderOptionable (RBackground, Dimension, Maybe Xform4Page) where\n  type RenderOption (RBackground, Dimension, Maybe Xform4Page) = RBkgOpt\n  cairoRenderOption RBkgDrawPDF cache cid = renderRBkg cache cid\n  cairoRenderOption RBkgDrawWhite _cache _cid = error "RBackground...cairoRenderOption: RBkgDrawWhite deprecated"\n  cairoRenderOption RBkgDrawBuffer cache cid = renderRBkgBuf cache cid\n  cairoRenderOption (RBkgDrawPDFInBBox mbbox) cache cid = renderRBkgInBBox cache cid mbbox\n\n-- |\ninstance RenderOptionable (RLayer, Dimension, Maybe Xform4Page) where\n  type RenderOption (RLayer, Dimension, Maybe Xform4Page) = StrokeBBoxOption\n  cairoRenderOption DrawFull cache cid = cairoRender cache cid\n  cairoRenderOption DrawBoxOnly _cache _cid = error "RLayer.cairoRenderOption: DrawBoxOnly deprecated"\n\n-- |\ninstance RenderOptionable (InBBox (RLayer, Dimension, Maybe Xform4Page)) where\n  type RenderOption (InBBox (RLayer, Dimension, Maybe Xform4Page)) = InBBoxOption\n  cairoRenderOption (InBBoxOption mbbox) cache cid (InBBox lyrinfo) =\n    InBBox <$> renderRLayerInBBoxBuf cache cid mbbox lyrinfo\n\n-- |\ncairoOptionPage ::\n  ( RenderOptionable (b, Dimension, Maybe Xform4Page),\n    RenderOptionable (a, Dimension, Maybe Xform4Page),\n    Foldable s,\n    Functor s\n  ) =>\n  ( RenderOption (b, Dimension, Maybe Xform4Page),\n    RenderOption (a, Dimension, Maybe Xform4Page)\n  ) ->\n  RenderCache ->\n  CanvasId ->\n  (GPage b s a, Maybe Xform4Page) ->\n  Cairo.Render (GPage b s a, Maybe Xform4Page)\ncairoOptionPage (optb, opta) cache cid (p, mx) = do\n  let (bkg, dim) = (view gbackground p, view gdimension p)\n  _ <- cairoRenderOption optb cache cid (bkg, dim, mx)\n  mapM_ (cairoRenderOption opta cache cid) . fmap (,dim,mx) $ view glayers p\n  return (p, mx)\n\n-- |\ninstance\n  ( RenderOptionable (b, Dimension, Maybe Xform4Page),\n    RenderOptionable (a, Dimension, Maybe Xform4Page),\n    Foldable s,\n    Functor s\n  ) =>\n  RenderOptionable (GPage b s a, Maybe Xform4Page)\n  where\n  type RenderOption (GPage b s a, Maybe Xform4Page) = (RenderOption (b, Dimension, Maybe Xform4Page), RenderOption (a, Dimension, Maybe Xform4Page))\n  cairoRenderOption = cairoOptionPage\n\n-- |\ninstance RenderOptionable (InBBox RPage, Maybe Xform4Page) where\n  type RenderOption (InBBox RPage, Maybe Xform4Page) = InBBoxOption\n  cairoRenderOption (InBBoxOption mbbox) cache cid (InBBox page, mx) = do\n    let (bkg, dim) = (view gbackground page, view gdimension page)\n    _ <- cairoRenderOption (RBkgDrawPDFInBBox mbbox) cache cid (bkg, dim, mx)\n    let lyrs = view glayers page\n    nlyrs <- mapM (fmap unInBBox . cairoRenderOption (InBBoxOption mbbox) cache cid . InBBox) . fmap (,dim,mx) $ lyrs\n    let npage = set glayers (fmap (view _1) nlyrs) page\n    return (InBBox npage, mx)\n\n-- |\ninstance RenderOptionable (InBBoxBkgBuf RPage, Maybe Xform4Page) where\n  type RenderOption (InBBoxBkgBuf RPage, Maybe Xform4Page) = InBBoxOption\n  cairoRenderOption (InBBoxOption mbbox) cache cid (InBBoxBkgBuf page, mx) = do\n    let bkg = view gbackground page\n        dim = view gdimension page\n    _ <- cairoRenderOption (RBkgDrawPDFInBBox mbbox) cache cid (bkg, dim, mx)\n    let lyrs = view glayers page\n    nlyrs <- mapM (renderRLayerInBBox cache cid mbbox) . fmap (,dim,mx) $ lyrs\n    let npage = set glayers (fmap (view _1) nlyrs) page\n    return (InBBoxBkgBuf npage, mx)\n'