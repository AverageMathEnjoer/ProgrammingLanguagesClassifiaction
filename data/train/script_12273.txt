b'\nmodule Main where\n\nimport Data.Char (toUpper)\nimport Data.Bits (complement, xor)\nimport System.Random (getStdGen, StdGen, randomR)\nimport Data.List (nub)\nimport qualified Data.ByteString as ByteString (readFile, map)\nimport Data.ByteString (ByteString)\nimport Data.ByteString.UTF8 (toString)\n\ndecrypt :: ByteString -> ByteString\ndecrypt = ByteString.map ((+256) . xor 0xa6 . complement)\n\ncover :: String -> [Char] -> String\ncover str letters = map (\\c -> if c `elem` letters then c else \'*\') str\n\nload_wordlist :: FilePath -> IO [String]\nload_wordlist fn = do\n  rawcontent <- ByteString.readFile fn\n  return $ (filter (/= "") . lines . map toUpper . toString . decrypt) rawcontent\n\nget_answer :: (String -> Bool) -> IO String\nget_answer allowed = do\n  input <- getLine >>= return . map toUpper\n  if allowed input\n     then return input\n     else get_answer allowed\n\nplay :: [String] -> StdGen -> IO ()\nplay wordlist rgen =\n  let (wordn, nextgen) = randomR (0, length wordlist - 1) rgen\n      word = wordlist !! wordn\n      in do\n        game word []\n        putStrLn $ "Ordet var " ++ word\n        putStrLn $ "Vill du spela igen? [Y]es eller [N]o"\n        input <- get_answer (`elem` ["Y", "N"])\n        case input of\n             "Y" -> play wordlist nextgen\n             "N" -> return ()\n\ngame :: String -> [Char] -> IO ()\ngame word guessed\n  | word == cover word guessed = putStrLn $ "Du vann!!!!!!!~~~"\n  | length guessed > 10        = putStrLn $ "Du f\xc3\xb6rlorade. :("\n  | otherwise                  = do\n    putStrLn $ "Avt\xc3\xa4ckt \xc3\xa4r " ++ cover word guessed ++ "!!"\n    putStrLn $ "Gissat \xc3\xa4r " ++ guessed ++ "."\n    putStrLn $ "Ny gissning?"\n    input <- get_answer (\\s -> length s == 1 || s == "QUIT")\n    case input of\n         "QUIT" -> return ()\n         _ -> game word . reverse . nub . reverse $ head input : guessed\n                  \n\nmain :: IO ()\nmain = do\n  wordlist <- load_wordlist "../wordlist/ordlista_krypt.dat"\n  rgen <- getStdGen\n  play wordlist rgen\n\n'