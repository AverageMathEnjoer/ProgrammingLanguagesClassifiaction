b'/*\n    SPDX-FileCopyrightText: 2021 Milian Wolff <milian.wolff@kdab.com>\n\n    SPDX-License-Identifier: LGPL-2.1-or-later\n*/\n\n#include "suppressionsmodel.h"\n\n#include <analyze/suppressions.h>\n\n#include <summarydata.h>\n#include <util.h>\n\nSuppressionsModel::SuppressionsModel(QObject* parent)\n    : QAbstractTableModel(parent)\n{\n}\n\nSuppressionsModel::~SuppressionsModel() = default;\n\nvoid SuppressionsModel::setSuppressions(const SummaryData& summaryData)\n{\n    beginResetModel();\n    m_suppressions = summaryData.suppressions;\n    m_totalAllocations = summaryData.cost.allocations;\n    m_totalLeaked = summaryData.cost.leaked;\n    endResetModel();\n}\n\nint SuppressionsModel::columnCount(const QModelIndex& parent) const\n{\n    if (parent.isValid() || m_suppressions.empty()) {\n        return 0;\n    }\n    return static_cast<int>(Columns::COLUMN_COUNT);\n}\n\nint SuppressionsModel::rowCount(const QModelIndex& parent) const\n{\n    return parent.isValid() ? 0 : static_cast<int>(m_suppressions.size());\n}\n\nQVariant SuppressionsModel::headerData(int section, Qt::Orientation orientation, int role) const\n{\n    if (section < 0 || section >= columnCount() || orientation != Qt::Horizontal || role != Qt::DisplayRole) {\n        return {};\n    }\n\n    switch (static_cast<Columns>(section)) {\n    case Columns::Matches:\n        return tr("Matches");\n    case Columns::Leaked:\n        return tr("Leaked");\n    case Columns::Pattern:\n        return tr("Pattern");\n    case Columns::COLUMN_COUNT:\n        break;\n    }\n    return {};\n}\n\nQVariant SuppressionsModel::data(const QModelIndex& index, int role) const\n{\n    if (!index.isValid() || index.parent().isValid() || index.column() >= columnCount() || index.row() >= rowCount()) {\n        return {};\n    }\n\n    const auto& suppression = m_suppressions[index.row()];\n\n    if (role == Qt::ToolTipRole) {\n        return tr("<qt>Suppression rule: <code>%1</code><br/>"\n                  "Matched Allocations: %2<br/>&nbsp;&nbsp;%3% out of %4 total<br/>"\n                  "Suppressed Leaked Memory: %5<br/>&nbsp;&nbsp;%6% out of %7 total</qt>")\n            .arg(QString::fromStdString(suppression.pattern), QString::number(suppression.matches),\n                 Util::formatCostRelative(suppression.matches, m_totalAllocations), QString::number(m_totalAllocations),\n                 Util::formatBytes(suppression.leaked), Util::formatCostRelative(suppression.leaked, m_totalLeaked),\n                 Util::formatBytes(m_totalLeaked));\n    }\n\n    switch (static_cast<Columns>(index.column())) {\n    case Columns::Matches:\n        if (role == Qt::DisplayRole || role == SortRole) {\n            return static_cast<quint64>(suppression.matches);\n        } else if (role == Qt::InitialSortOrderRole) {\n            return Qt::DescendingOrder;\n        } else if (role == TotalCostRole) {\n            return m_totalAllocations;\n        }\n        break;\n    case Columns::Leaked:\n        if (role == Qt::DisplayRole) {\n            return Util::formatBytes(suppression.leaked);\n        } else if (role == SortRole) {\n            return static_cast<qint64>(suppression.leaked);\n        } else if (role == Qt::InitialSortOrderRole) {\n            return Qt::DescendingOrder;\n        } else if (role == TotalCostRole) {\n            return m_totalLeaked;\n        }\n        break;\n    case Columns::Pattern:\n        if (role == Qt::DisplayRole || role == SortRole) {\n            return QString::fromStdString(suppression.pattern);\n        } else if (role == Qt::InitialSortOrderRole) {\n            return Qt::AscendingOrder;\n        }\n        break;\n    case Columns::COLUMN_COUNT:\n        break;\n    }\n\n    return {};\n}\n'