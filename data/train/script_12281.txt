b'package effectivejava.chapter7.item42;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\nimport static java.util.Comparator.*;\n\nimport static java.util.Comparator.comparingInt;\n\n// Sorting with function objects (Pages 193-4)\npublic class SortFourWays {\n    public static void main(String[] args) {\n        List<String> words = Arrays.asList(args);\n\n        // Anonymous class instance as a function object - obsolete! (Page 193)\n        Collections.sort(words, new Comparator<String>() {\n            public int compare(String s1, String s2) {\n                return Integer.compare(s1.length(), s2.length());\n            }\n        });\n        System.out.println(words);\n        Collections.shuffle(words);\n\n        // Lambda expression as function object (replaces anonymous class) (Page 194)\n        Collections.sort(words,\n                (s1, s2) -> Integer.compare(s1.length(), s2.length()));\n        System.out.println(words);\n        Collections.shuffle(words);\n\n        // Comparator construction method (with method reference) in place of lambda (Page 194)\n        Collections.sort(words, comparingInt(String::length));\n        System.out.println(words);\n        Collections.shuffle(words);\n\n        // Default method List.sort in conjunction with comparator construction method (Page 194)\n        words.sort(comparingInt(String::length));\n        System.out.println(words);\n    }\n}\n'