b'module Network.Server.Chat.Chat where\n\nimport Network.Server.Common.Line\nimport Network.Server.Chat.Loop\nimport Data.Maybe(fromMaybe)\nimport Data.Foldable(msum)\nimport Data.IORef(atomicModifyIORef)\nimport Control.Applicative((<$), (<$>))\nimport Control.Monad.Trans(MonadIO(..))\n\ntype Chat a =\n  IORefLoop Integer a\n\ndata ChatCommand =\n  Chat String\n  | Incr\n  | Unknown String\n  deriving (Eq, Show)\n\nincr ::\n  Chat Integer\nincr =\n  do e <- readEnvval\n     liftIO $ atomicModifyIORef e (\\n -> (n + 1, n + 1))\n\nchat ::\n  IO a\nchat =\n  iorefLoop 0 (readIOEnvval >>= pPutStrLn . show) (process . chatCommand)\n\n-- |\n--\n-- >>> chatCommand "CHAT hi"\n-- Chat "hi"\n--\n-- >>> chatCommand "Chat bye"\n-- Chat "bye"\n--\n-- >>> chatCommand "INCR"\n-- Incr\n--\n-- >>> chatCommand "Nothing"\n-- UNKNOWN "Nothing"\nchatCommand ::\n  String\n  -> ChatCommand\nchatCommand z =\n  Unknown z `fromMaybe` msum [\n                               Chat <$> trimPrefixThen "CHAT" z\n                             , Incr <$ trimPrefixThen "INCR" z\n                             ]\n\nprocess ::\n  ChatCommand\n  -> Chat ()\nprocess =\n  error "todo"\n'