b'\xef\xbb\xbf\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Drawing;\nusing System.Runtime.InteropServices;\nusing System.Text;\n\nnamespace Aerial\n{\n    internal static class NativeMethods\n    {\n        public const int HT_CAPTION = 0x2;\n        public const int WM_NCLBUTTONDOWN = 0xA1;\n        public const int WM_LBUTTONUP = 0x202;\n        public const int WM_LBUTTONDBLCLK = 0x203;\n        public const int WM_RBUTTONDOWN = 0x204;\n        public const int WM_RBUTTONUP = 0x205;\n        \n        [DllImport("kernel32.dll")]\n        internal static extern uint SetThreadExecutionState(uint esFlags);\n        \n        [DllImport("user32.dll")]\n        internal static extern IntPtr SetParent(IntPtr hWndChild, IntPtr hWndNewParent);\n\n        [DllImport("user32.dll")]\n        internal static extern int SetWindowLong(IntPtr hWnd, int nIndex, IntPtr dwNewLong);\n\n        [DllImport("user32.dll", SetLastError = true)]\n        internal static extern int GetWindowLong(IntPtr hWnd, int nIndex);\n\n        [DllImport("user32.dll")]\n        internal static extern bool GetClientRect(IntPtr hWnd, out Rectangle lpRect);\n        \n        [DllImportAttribute("user32.dll")]\n        public static extern int SendMessage(IntPtr hWnd, int Msg, int wParam, int lParam);\n        [DllImportAttribute("user32.dll")]\n        public static extern bool ReleaseCapture();\n        [DllImportAttribute("user32.dll")]\n        public static extern bool SetCapture();\n\n        [DllImport("Shlwapi.dll", CharSet = CharSet.Auto)]\n        public static extern long StrFormatByteSize(\n        long fileSize\n        , [MarshalAs(UnmanagedType.LPTStr)] StringBuilder buffer\n        , int bufferSize);\n\n        [DllImport("shlwapi.dll", CharSet = CharSet.Unicode)]\n        public static extern int StrCmpLogicalW(string psz1, string psz2);\n\n        /// <summary>\n        /// Converts a numeric value into a string that represents the number expressed as a size value in bytes, kilobytes, megabytes, or gigabytes, depending on the size.\n        /// </summary>\n        /// <param name="filelength">The numeric value to be converted.</param>\n        /// <returns>the converted string</returns>\n        public static string GetExplorerFileSize(long filesize)\n        {\n            StringBuilder sb = new StringBuilder(11);\n            StrFormatByteSize(filesize, sb, sb.Capacity);\n            return sb.ToString();\n        }\n\n        const uint ES_CONTINUOUS = 0x80000000;\n        const uint ES_SYSTEM_REQUIRED = 0x00000001;\n\n        \n        internal static void EnableMonitorSleep()\n        {\n            Trace.WriteLine("EnableMonitorSleep()");\n            SetThreadExecutionState(ES_CONTINUOUS);\n        }\n\n        internal static void DragWindow(IntPtr handle)\n        {\n            Trace.WriteLine("DragWindow()");\n            ReleaseCapture();\n            SendMessage(handle, WM_NCLBUTTONDOWN, HT_CAPTION, 0);\n\n            CaptureMouseUpAndClick(handle);\n        }\n\n        internal static void ResizeWindow(IntPtr handle, bool? toTop, bool? toLeft)\n        {\n            Trace.WriteLine("ResizeWindow()");\n            var SC_SIZE = 0xF000;\n            var WM_SYSCOMMAND = 0x0112;\n\n            //var directions = new List<Tuple<bool?,bool?,SysCommandSize>>();\n            var enumName = "SC_SIZE_HT" + \n                (toTop == true ? "TOP" : toTop == false? "BOTTOM" : "") +\n                (toLeft == true ? "LEFT" : toLeft == false ? "RIGHT" : "");\n            SysCommandSize direction = (SysCommandSize) Enum.Parse(typeof(SysCommandSize), enumName);\n            \n            SendMessage(handle, WM_SYSCOMMAND, SC_SIZE + (int)direction, 0);\n\n            CaptureMouseUpAndClick(handle);\n        }\n\n        internal static void CaptureMouseUpAndClick(IntPtr handle)\n        {\n            Trace.WriteLine("CaptureMouseUpAndClick()");\n            // Set capture back to the form\n            ReleaseCapture();\n            // Send the form a MouseUp message\n            SendMessage(handle, WM_LBUTTONUP, 0, 0);\n        }\n\n        enum SysCommandSize : int\n        {\n            SC_SIZE_HTLEFT = 1,\n            SC_SIZE_HTRIGHT = 2,\n            SC_SIZE_HTTOP = 3,\n            SC_SIZE_HTTOPLEFT = 4,\n            SC_SIZE_HTTOPRIGHT = 5,\n            SC_SIZE_HTBOTTOM = 6,\n            SC_SIZE_HTBOTTOMLEFT = 7,\n            SC_SIZE_HTBOTTOMRIGHT = 8\n        }\n    }\n\n}\n'