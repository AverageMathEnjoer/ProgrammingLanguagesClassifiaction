b'package com.github.razir.progressexample\n\nimport android.content.Context\nimport android.content.Intent\nimport android.graphics.Color\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.lifecycle.LifecycleOwner\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport androidx.recyclerview.widget.RecyclerView\nimport com.github.razir.progressbutton.attachTextChangeAnimator\nimport com.github.razir.progressbutton.bindProgressButton\nimport com.github.razir.progressbutton.cleanUpDrawable\nimport com.github.razir.progressbutton.showProgress\nimport kotlinx.android.synthetic.main.activity_rv.*\nimport kotlinx.android.synthetic.main.item_button.view.*\n\nclass RecyclerViewActivity : AppCompatActivity() {\n\n    companion object {\n        fun getStartIntent(context: Context): Intent {\n            return Intent(context, RecyclerViewActivity::class.java)\n        }\n    }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_rv)\n        rv.apply {\n            layoutManager = LinearLayoutManager(context)\n            adapter = ButtonsAdapter(this@RecyclerViewActivity)\n        }\n    }\n}\n\n\nclass ButtonsAdapter(private val lifecycleOwner: LifecycleOwner) : RecyclerView.Adapter<ButtonsAdapter.Holder>() {\n\n    var inProgress = mutableSetOf<Int>()\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): Holder {\n        val view = LayoutInflater.from(parent.context).inflate(R.layout.item_button, parent, false)\n        return Holder(view)\n    }\n\n    override fun getItemCount() = 100\n\n    override fun onBindViewHolder(holder: Holder, position: Int) {\n        holder.bind(position)\n    }\n\n    inner class Holder(view: View) : RecyclerView.ViewHolder(view) {\n        init {\n            itemView.apply {\n                buttonProgress.attachTextChangeAnimator()\n                lifecycleOwner.bindProgressButton(buttonProgress)\n                buttonProgress.setOnClickListener {\n                    inProgress.add(adapterPosition)\n                    buttonProgress.showProgress {\n                        progressColor = Color.WHITE\n                    }\n                }\n            }\n        }\n\n        fun bind(position: Int) {\n\n            itemView.apply {\n                number.text = "position #$position"\n                buttonProgress.cleanUpDrawable()\n                if (!inProgress.contains(position)) {\n                    buttonProgress.setText(R.string.submit)\n                } else {\n                    buttonProgress.showProgress {\n                        progressColor = Color.WHITE\n                    }\n                }\n            }\n        }\n    }\n}'