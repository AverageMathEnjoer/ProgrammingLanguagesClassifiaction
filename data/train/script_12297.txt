b'{-# LANGUAGE NoImplicitPrelude #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n\nmodule Course.ExactlyOne where\n\nimport qualified Control.Applicative as A\nimport qualified Control.Monad as M\nimport Course.Core\nimport qualified Prelude as P\n\ndata ExactlyOne a = ExactlyOne a deriving (Eq, Show)\n\nrunExactlyOne :: ExactlyOne a -> a\nrunExactlyOne (ExactlyOne a) = a\n\nmapExactlyOne :: (a -> b) -> ExactlyOne a -> ExactlyOne b\nmapExactlyOne f (ExactlyOne a)    = ExactlyOne (f a)\n\nbindExactlyOne :: (a -> ExactlyOne b) -> ExactlyOne a -> ExactlyOne b\nbindExactlyOne f (ExactlyOne a) = f a\n\ninstance P.Functor ExactlyOne where\n  fmap =\n    M.liftM\n\ninstance A.Applicative ExactlyOne where\n  (<*>) =\n    M.ap\n  pure =\n    ExactlyOne\n\ninstance P.Monad ExactlyOne where\n  (>>=) =\n    flip bindExactlyOne\n  return =\n    ExactlyOne\n\n'