b'#\' Obtain Extended Properties of Objects\n#\'\n#\' Combination of most common \\dQuote{macro-level} functions that describe an \n#\' object.\n#\'\n#\' An alternative to calling in turn \\code{\\link{class}}, \\code{\\link{typeof}},\n#\' \\code{\\link{dim}}, and so on. A call to this function will readily give all\n#\' this information at once.\n#\'\n#\' @param x Any object.\n#\' @param \\dots Included for backward-compatibility only. Has no real use.\n#\'   \n#\' @return A list with following elements: \n#\' \\describe{\n#\'   \\item{properties}{A data frame with the class(es), type, mode and storage\n#\'     mode of the object as well as the dim, length and object.size.}\n#\'   \\item{attributes.lengths}{A named character vector giving all attributes\n#\'     (\\emph{c.f.} \\dQuote{names}, \\dQuote{row.names}, \\dQuote{class},\n#\'     \\dQuote{dim}, and so forth) along with their length.}\n#\'   \\item{extensive.is}{A character vector of all the \n#\'     \\emph{identifier functions.} (starting with \\dQuote{is.}) that yield \n#\'     \\code{TRUE} when used with \\code{x} as argument.}\n#\'   \\item{function.type}{When x is a function, results of \n#\'   \\code{\\link[pryr]{ftype}} are added.}\n#\' }\n#\' @author Dominic Comtois, \\email{dominic.comtois@@gmail.com}\n#\'\n#\' @examples\n#\' what.is(1)\n#\' what.is(NaN)\n#\' what.is(iris3)\n#\' what.is(print)\n#\' what.is(what.is)\n#\'\n#\' @seealso \\code{\\link{class}}, \\code{\\link{typeof}}, \\code{\\link{mode}},\n#\' \\code{\\link{storage.mode}}, \\code{\\link{dim}}, \\code{\\link{length}},\n#\' \\code{\\link{is.object}}, \\code{\\link[pryr]{otype}},\n#\' \\code{\\link{object.size}}, \\code{\\link[pryr]{ftype}}\n#\'\n#\' @keywords attribute classes utilities\n#\'\n#\' @importFrom utils methods object.size setTxtProgressBar txtProgressBar\n#\' @importFrom methods is\n#\' @importFrom pryr ftype otype\n#\' @export\nwhat.is <- function(x, ...) {\n\n  if ("ignore.size.warn" %in% names(list(...))) {\n    message("ignore.size.warn is deprecated. The function has been modified ",\n            "in such a way that objects of any size should be processed ",\n            "rapidly")\n  }\n  \n  if ("show.all" %in% names(list(...))) {\n    message("show.all is deprecated.")\n  }\n  \n  # set the warn option to -1 to temporarily ignore warnings\n  op <- options("warn")\n  options(warn = -1)\n  on.exit(options(op))\n\n  # Part 1. Data Properties - class, typeof, mode, storage.mode\n  properties <- \n    data.frame(\n      property = c("class", "typeof", "mode", "storage.mode", "dim", "length",\n                   "is.object","object.type","object.size"),\n      value = c(paste(class(x),collapse=" "), typeof(x), mode(x), \n                storage.mode(x), paste(dim(x), collapse = " x "), length(x),\n                is.object(x), pryr::otype(x), paste(object.size(x), "Bytes")),\n      stringsAsFactors = FALSE)\n  \n  \n  # Part 2. Make a list of all x\'s attribute and their length\n  attributes.lengths <- \n    vapply(X = attributes(x), FUN = length, FUN.VALUE = numeric(1))\n  \n  if(length(attributes.lengths)==0) {\n    attributes.lengths <- NULL\n  }\n\n  # Part 3. Test object against all "is[...]" functions\n  # Look for all relevant functions\n  list.id.fun <- grep(methods(is), pattern = "<-", invert = TRUE, value = TRUE)\n\n  # Remove functions which are not essential AND use a lot of time\n  list.id.fun <- setdiff(list.id.fun, c("is.R", "is.single", "is.na.data.frame",\n                                        "is.na.POSIXlt"))\n\n  # loop over "is" functions with x as argument, and store the results\n  extensive.is <- c()\n  cat("Checking object against known \'is...\' functions (", \n      length(list.id.fun), ")", sep = "")\n      \n  # create progress bar if large object\n  if (as.numeric(object.size(x)) > 500000 && length(list.id.fun) >= 10) {\n    pb <- txtProgressBar(min = 0, max = length(list.id.fun), style = 3)\n  } else {\n    pb <- NA\n  }\n  \n  for(i in seq_along(list.id.fun)) {\n    # update progress bar\n    if (!identical(pb, NA))\n      setTxtProgressBar(pb, i)\n    fun <- list.id.fun[i]\n    if (fun == "is.symmetric" && !is.matrix(x))\n      next\n    res <- try(eval(call(fun, x)), silent=TRUE)\n    if(isTRUE(res))\n      extensive.is <- append(extensive.is, fun)\n  }\n  if (!identical(pb, NA))\n    close(pb)\n  \n  # Part 4. Get info on the type of object - S3, S4, attributes / slots\n\n  if(is.function(x)) {\n  \tfunction.type <- pryr::ftype(x)\n  } else {\n    function.type <- NULL\n  }\n\n  output <- list()\n  output$properties         <- properties\n  output$attributes.lengths <- attributes.lengths\n  output$extensive.is       <- extensive.is\n  output$function.type      <- function.type\n\n  return(output)\n}\n'