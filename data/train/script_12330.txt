b'{-# LANGUAGE MultiParamTypeClasses #-}\n{-# LANGUAGE OverloadedStrings #-}\n{-# LANGUAGE TypeFamilies #-}\n\n-----------------------------------------------------------------------------\n\n-----------------------------------------------------------------------------\n\n-- |\n-- Module      : Data.Hoodle.Generic\n-- Copyright   : (c) 2011,2012,2014 Ian-Woo Kim\n--\n-- License     : BSD3\n-- Maintainer  : Ian-Woo Kim <ianwookim@gmail.com>\n-- Stability   : experimental\n-- Portability : GHC\nmodule Data.Hoodle.Generic where\n\nimport Control.Category (id, (.))\nimport Data.ByteString.Char8 (ByteString, pack)\nimport Data.Hoodle.Simple (Dimension, Revision)\nimport qualified Data.IntMap as IM\nimport qualified Data.Sequence as Seq\nimport qualified Data.Text as T\nimport Data.UUID.V4 (nextRandom)\nimport Lens.Micro (Lens\', lens)\nimport Prelude hiding (id, (.))\n\ndata PDFData = PDFData\n  { pdfBase64 :: ByteString,\n    pdfNumPages :: Int\n  }\n\n-- | Generic Hoodle data having generic pages\ndata GHoodle cntnr pg = GHoodle\n  { ghoodle_id :: ByteString,\n    ghoodle_ttl :: ByteString,\n    ghoodle_revisions :: [Revision],\n    ghoodle_embeddedpdf :: Maybe PDFData,\n    ghoodle_embeddedtext :: Maybe T.Text,\n    ghoodle_pgs :: cntnr pg\n  }\n\n-- | Generic page data having dimension, generic background\n--   and generic layers\ndata GPage bkg cntnr lyr = GPage\n  { gpage_dim :: Dimension,\n    gpage_bkg :: bkg,\n    gpage_lyrs :: cntnr lyr\n  }\n\n-- | Generic buffered layer having generic items\ndata GLayer buf cntnr itm = GLayer\n  { glayer_buf :: buf,\n    glayer_itms :: cntnr itm\n  }\n\n-- |\ninstance (Functor cntnr) => Functor (GLayer buf cntnr) where\n  fmap f (GLayer buf itms) = GLayer buf (fmap f itms)\n\n-- |\ninstance (Functor cntnr) => Functor (GPage bkg cntnr) where\n  fmap f (GPage dim bkg lyrs) = GPage dim bkg (fmap f lyrs)\n\n-- |\ninstance (Functor cntnr) => Functor (GHoodle cntnr) where\n  fmap f (GHoodle hid ttl revs pdf txt pgs) = GHoodle hid ttl revs pdf txt (fmap f pgs)\n\n------------------------------\n-- lenses for Generic types --\n------------------------------\n\n-- |\nghoodleID :: Lens\' (GHoodle cntnr pg) ByteString\nghoodleID = lens ghoodle_id (\\f a -> f {ghoodle_id = a})\n\n-- |\ngtitle :: Lens\' (GHoodle cntnr pg) ByteString\ngtitle = lens ghoodle_ttl (\\f a -> f {ghoodle_ttl = a})\n\n-- |\ngrevisions :: Lens\' (GHoodle cntnr pg) [Revision]\ngrevisions = lens ghoodle_revisions (\\f a -> f {ghoodle_revisions = a})\n\n-- |\ngembeddedpdf :: Lens\' (GHoodle cntnr pg) (Maybe PDFData)\ngembeddedpdf = lens ghoodle_embeddedpdf (\\f a -> f {ghoodle_embeddedpdf = a})\n\n-- |\ngembeddedtext :: Lens\' (GHoodle cntnr pg) (Maybe T.Text)\ngembeddedtext = lens ghoodle_embeddedtext (\\f a -> f {ghoodle_embeddedtext = a})\n\n-- |\ngpages :: Lens\' (GHoodle cntnr pg) (cntnr pg)\ngpages = lens ghoodle_pgs (\\f a -> f {ghoodle_pgs = a})\n\n-- |\ngdimension :: Lens\' (GPage bkg cntnr pg) Dimension\ngdimension = lens gpage_dim (\\f a -> f {gpage_dim = a})\n\n-- |\ngbackground :: Lens\' (GPage bkg cntnr lyr) bkg\ngbackground = lens gpage_bkg (\\f a -> f {gpage_bkg = a})\n\n-- |\nglayers :: Lens\' (GPage bkg cntnr lyr) (cntnr lyr)\nglayers = lens gpage_lyrs (\\f a -> f {gpage_lyrs = a})\n\n-- |\ngitems :: Lens\' (GLayer buf cntnr itm) (cntnr itm)\ngitems = lens glayer_itms (\\f a -> f {glayer_itms = a})\n\n-- |\ngbuffer :: Lens\' (GLayer buf cntnr itm) buf\ngbuffer = lens glayer_buf (\\f a -> f {glayer_buf = a})\n\n-- |\nclass (Foldable s) => Listable s where\n  fromList :: [a] -> s a\n\n-- |\ninstance Listable [] where\n  fromList = id\n\n-- |\ninstance Listable IM.IntMap where\n  fromList = IM.fromList . zip [0 ..]\n\n-- |\ninstance Listable Seq.Seq where\n  fromList = Seq.fromList\n\n-- |\nemptyGHoodle :: (Listable m) => IO (GHoodle m a)\nemptyGHoodle = do\n  uuid <- nextRandom\n  return $ GHoodle ((pack . show) uuid) "" [] Nothing Nothing (fromList [])\n\n-- |\nemptyGPage :: (Listable cntnr) => Dimension -> bkg -> GPage bkg cntnr a\nemptyGPage dim bkg = GPage dim bkg (fromList [])\n'