b'\xef\xbb\xbfusing System;\nusing System.IO;\nusing System.Linq;\nusing Asn1;\nusing Rubeus.lib.Interop;\n\n\nnamespace Rubeus\n{\n    public class Renew\n    {\n        public static void TGTAutoRenew(KRB_CRED kirbi, string domainController = "", bool display = true)\n        {\n            KRB_CRED currentKirbi = kirbi;\n\n            while (true)\n            {\n                // extract out the info needed for the TGS-REQ/AP-REQ renewal\n                string userName = currentKirbi.enc_part.ticket_info[0].pname.name_string[0];\n                string domain = currentKirbi.enc_part.ticket_info[0].prealm;\n                Console.WriteLine("\\r\\n\\r\\n[*] User       : {0}@{1}", userName, domain);\n\n                DateTime endTime = TimeZone.CurrentTimeZone.ToLocalTime(currentKirbi.enc_part.ticket_info[0].endtime);\n                DateTime renewTill = TimeZone.CurrentTimeZone.ToLocalTime(currentKirbi.enc_part.ticket_info[0].renew_till);\n                Console.WriteLine("[*] endtime    : {0}", endTime);\n                Console.WriteLine("[*] renew-till : {0}", renewTill);\n\n                if (endTime > renewTill)\n                {\n                    Console.WriteLine("\\r\\n[*] renew-till window ({0}) has passed.\\r\\n", renewTill);\n                    return;\n                }\n                else\n                {\n                    double ticks = (endTime - DateTime.Now).Ticks;\n                    if (ticks < 0)\n                    {\n                        Console.WriteLine("\\r\\n[*] endtime is ({0}) has passed, no renewal possible.\\r\\n", endTime);\n                        return;\n                    }\n\n                    // get the window to sleep until the next endtime for the ticket, -30 minutes for a window\n                    double sleepMinutes = TimeSpan.FromTicks((endTime - DateTime.Now).Ticks).TotalMinutes - 30;\n\n                    Console.WriteLine("[*] Sleeping for {0} minutes (endTime-30) before the next renewal", (int)sleepMinutes);\n                    System.Threading.Thread.Sleep((int)sleepMinutes * 60 * 1000);\n\n                    Console.WriteLine("[*] Renewing TGT for {0}@{1}\\r\\n", userName, domain);\n                    byte[] bytes = TGT(currentKirbi, null, false, domainController, true);\n                    currentKirbi = new KRB_CRED(bytes);\n                }\n            }\n        }\n\n        public static byte[] TGT(KRB_CRED kirbi, string outfile = "", bool ptt = false, string domainController = "", bool display = true)\n        {\n            // extract out the info needed for the TGS-REQ/AP-REQ renewal\n            string userName = kirbi.enc_part.ticket_info[0].pname.name_string[0];\n            string domain = kirbi.enc_part.ticket_info[0].prealm;\n            Ticket ticket = kirbi.tickets[0];\n            byte[] clientKey = kirbi.enc_part.ticket_info[0].key.keyvalue;\n            Interop.KERB_ETYPE etype = (Interop.KERB_ETYPE)kirbi.enc_part.ticket_info[0].key.keytype;\n\n            // request the new TGT renewal\n            return TGT(userName, domain, ticket, clientKey, etype, outfile, ptt, domainController, display);\n        }\n\n        public static byte[] TGT(string userName, string domain, Ticket providedTicket, byte[] clientKey, Interop.KERB_ETYPE etype, string outfile, bool ptt, string domainController = "", bool display = true)\n        {\n            string dcIP = Networking.GetDCIP(domainController, display);\n            if (String.IsNullOrEmpty(dcIP)) { return null; }\n\n            if (display)\n            {\n                Console.WriteLine("[*] Building TGS-REQ renewal for: \'{0}\\\\{1}\'", domain, userName);\n            }\n\n            byte[] tgsBytes = TGS_REQ.NewTGSReq(userName, domain, "krbtgt", providedTicket, clientKey, etype, Interop.KERB_ETYPE.subkey_keymaterial, true, "");\n\n            byte[] response = Networking.SendBytes(dcIP.ToString(), 88, tgsBytes);\n            if(response == null)\n            {\n                return null;\n            }\n\n            // decode the supplied bytes to an AsnElt object\n            //  false == ignore trailing garbage\n            AsnElt responseAsn = AsnElt.Decode(response, false);\n\n            // check the response value\n            int responseTag = responseAsn.TagValue;\n\n            if (responseTag == 13)\n            {\n                Console.WriteLine("[+] TGT renewal request successful!");\n\n                // parse the response to an TGS-REP\n                TGS_REP rep = new TGS_REP(responseAsn);\n\n                // https://github.com/gentilkiwi/kekeo/blob/master/modules/asn1/kull_m_kerberos_asn1.h#L62\n                byte[] outBytes = Crypto.KerberosDecrypt(etype, 8, clientKey, rep.enc_part.cipher);\n                AsnElt ae = AsnElt.Decode(outBytes, false);\n                EncKDCRepPart encRepPart = new EncKDCRepPart(ae.Sub[0]);\n\n                // now build the final KRB-CRED structure\n                KRB_CRED cred = new KRB_CRED();\n\n                // add the ticket\n                cred.tickets.Add(rep.ticket);\n\n                // build the EncKrbCredPart/KrbCredInfo parts from the ticket and the data in the encRepPart\n\n                KrbCredInfo info = new KrbCredInfo();\n\n                // [0] add in the session key\n                info.key.keytype = encRepPart.key.keytype;\n                info.key.keyvalue = encRepPart.key.keyvalue;\n\n                // [1] prealm (domain)\n                info.prealm = encRepPart.realm;\n\n                // [2] pname (user)\n                info.pname.name_type = rep.cname.name_type;\n                info.pname.name_string = rep.cname.name_string;\n\n                // [3] flags\n                info.flags = encRepPart.flags;\n\n                // [4] authtime (not required)\n\n                // [5] starttime\n                info.starttime = encRepPart.starttime;\n\n                // [6] endtime\n                info.endtime = encRepPart.endtime;\n\n                // [7] renew-till\n                info.renew_till = encRepPart.renew_till;\n\n                // [8] srealm\n                info.srealm = encRepPart.realm;\n\n                // [9] sname\n                info.sname.name_type = encRepPart.sname.name_type;\n                info.sname.name_string = encRepPart.sname.name_string;\n\n                // add the ticket_info into the cred object\n                cred.enc_part.ticket_info.Add(info);\n\n                byte[] kirbiBytes = cred.Encode().Encode();\n\n                string kirbiString = Convert.ToBase64String(kirbiBytes);\n\n                if (display)\n                {\n                    Console.WriteLine("[*] base64(ticket.kirbi):\\r\\n", kirbiString);\n                    if (false)\n                    {\n                        // display the .kirbi base64, columns of 80 chararacters\n                        foreach (string line in Helpers.Split(kirbiString, 80))\n                        {\n                            Console.WriteLine("      {0}", line);\n                        }\n                    }\n                    else\n                    {\n                        Console.WriteLine("      {0}", kirbiString);\n                    }\n                }\n\n                if (!String.IsNullOrEmpty(outfile))\n                {\n                    outfile = Helpers.MakeValidFileName(outfile);\n                    if (Helpers.WriteBytesToFile(outfile, kirbiBytes))\n                    {\n                        if (display)\n                        {\n                            Console.WriteLine("\\r\\n[*] Ticket written to {0}\\r\\n", outfile);\n                        }\n                    }\n                }\n\n                if (ptt)\n                {\n                    // pass-the-ticket -> import into LSASS\n                    LSA.ImportTicket(kirbiBytes, new LUID());\n                }\n                return kirbiBytes;\n            }\n            else if (responseTag == 30)\n            {\n                // parse the response to an KRB-ERROR\n                KRB_ERROR error = new KRB_ERROR(responseAsn.Sub[0]);\n                Console.WriteLine("\\r\\n[X] KRB-ERROR ({0}) : {1}\\r\\n", error.error_code, (Interop.KERBEROS_ERROR)error.error_code);\n            }\n            else\n            {\n                Console.WriteLine("\\r\\n[X] Unknown application tag: {0}", responseTag);\n            }\n            return null;\n        }\n    }\n}'