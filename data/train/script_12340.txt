b'{-# LANGUAGE OverloadedStrings #-}\n\n{-\n - Desktop skype has ridiculously slow searching, so when I had to use Skype\n - professionally I needed a faster way to search through conversation\n - history. This is not user friendly, but it is fast.\n -}\n\nmodule Main where\n\nimport           Data.Maybe                  (catMaybes)\nimport           Data.Monoid                 ((<>), mconcat)\nimport           Data.Text                   (pack, isSuffixOf)\nimport qualified Data.Text.IO           as T (putStrLn, getLine)\nimport           Database.SQLite.Simple      (open, query, query_, fromOnly)\nimport           System.Environment          (getEnv)\n\n\n{-\n - MISSING\n -----------\n - List possible usernames based on directories?\n - show sent/received markers\n - strip xml?\n - show list in pager?\n - don\'t limit to OS X\n -----------\n -}\n\n\nmain = do\n    db <- open =<< findDb\n\n    partner <- getPartner =<< availablePartners db\n    needle <- T.getLine << putStrLn "Search for?..."\n\n    hits <- searchIn db partner needle\n    mapM_ T.putStrLn hits\n\n\nfindDb = do\n  homeDir <- getEnv "HOME"\n  putStrLn "What is your skype username?"\n  username <- getLine\n  return $ mconcat\n      [ homeDir\n      , "/Library/Application Support/Skype/"\n      , username\n      , "/main.db"\n      ]\n\n\n\navailablePartners db =\n    let\n        candidates = query_ db $ mconcat\n            [ "SELECT DISTINCT dialog_partner "\n            , "FROM Messages "\n            , "ORDER BY dialog_partner"\n            ]\n        validUsers = filter (not . isSuffixOf "thread.skype")\n    in\n        fmap (validUsers . catMaybes . map fromOnly) candidates\n\n\ngetPartner partners = do\n    listAlternatives partners\n    T.putStrLn "Which conversation?"\n    pick <- readLn\n    return (partners !! pick)\n\n\nlistAlternatives xs =\n    let\n        indexed = zip [0..] xs\n        formatIxed (i, x) = pack (show i) <> ") " <> x\n    in\n        mapM (T.putStrLn . formatIxed) indexed\n\n\nsearchIn db partner needle =\n    let\n        searchQuery = mconcat\n            [ "SELECT body_xml "\n            , "FROM Messages "\n            , "WHERE dialog_partner=? AND body_xml LIKE ? "\n            , "ORDER BY timestamp ASC"\n            ]\n        arguments = (partner, "%" <> needle <> "%")\n        results = query db searchQuery arguments\n    in\n        fmap (map fromOnly) results\n\n'