b'{-# LANGUAGE CPP #-}\n-- -*- haskell -*-\n--\n-- ADT of a binary tree (values only in leaves).\n-- Parallel functions use par and seq directly.\n-- ---------------------------------------------------------------------------\n\nmodule Tree(Tree, \n            list2tree, tree2list, (^:), \n            tree_map, tree_fold, \n\t    depth, create_forest, \n            force_tree, par_tree_map) where\n\nimport Control.Parallel\nimport Control.Parallel.Strategies\n#ifdef PARSCHED \nimport PARSCHED\n#else\nimport Control.Monad.Par\n#endif\n\ninfixl 2 ^:\n\ndata Tree a = Leaf a\n\t    | Node (Tree a) (Tree a)\n\t    deriving (Eq, Read, Show)\n\n\t\t\ntree_map :: (Integral a, Integral b) => (a -> b) -> Tree a -> Tree b\ntree_map f (Leaf x) \t\t= Leaf (f x)\ntree_map f (Node left right) \t= Node (tree_map f left) (tree_map f right)\n\n\npar_tree_map :: (Integral a, Integral b) => (a -> b) -> Tree a -> Tree b\npar_tree_map f t =\n    runPar $ par_tree_map\' f t\n\npar_tree_map\' :: (Integral a, Integral b) => (a -> b) -> Tree a -> Par (Tree b)\npar_tree_map\' f (Leaf x) = return $ Leaf (f x)\npar_tree_map\' f (Node left right) = \n    do l\' <- spawn_ $ par_tree_map\' f left\n       r  <- par_tree_map\' f right\n       l  <- get l\'\n       return (Node l r)\n\n-- force evaluation of tree (could use Strategies module instead!)\nforce_tree :: (Integral a) => Tree a -> ()\nforce_tree t@(Leaf x) = x `seq` ()\nforce_tree t@(Node left right) = (force_tree left) `seq` \n\t                         (force_tree right) `seq` \n\t\t\t\t ()\n-- just would you\'d expect\ntree_fold :: (Integral a) => (a -> a -> a) -> a -> Tree a -> a\ntree_fold o z (Leaf x) \t\t= z `o` x\ntree_fold o z (Node left right) = tree_fold o z\' right\n\t\t\t\t  where z\' = tree_fold o z left\n\nlist2tree :: (Integral a) => [a] -> Tree a \nlist2tree [] \t= error "list2tree: empty list"\nlist2tree [x] \t= Leaf x\nlist2tree l     = Node (list2tree left) (list2tree right)\n\t\t  where (left,right) = splitAt ((length l) `div` 2 ) l\n\ntree2list :: (Integral a) => Tree a -> [a]\ntree2list (Leaf x) \t= [x]\ntree2list (Node left right) = tree2list left ++ tree2list right\n\n-- combine 2 trees\n(^:) :: (Integral a) => Tree a -> Tree a -> Tree a\nt1 ^: t2 = Node t1 t2\n\ndepth :: Tree a -> Int\ndepth (Leaf _)\t\t= 0\ndepth (Node left right) = max (depth left) (depth right) + 1\n\n-- The following functions are useful for heavily heap allocating test fcts\ncreate_forest :: (Integral a) => Tree a -> [Tree a] \ncreate_forest (Leaf x) \t\t= [ (Leaf y) | y <- [2..x], gcd x y == 1 ]\ncreate_forest (Node left right) = [ (Node left\' right\') \n\t\t\t\t  | left\' <- create_forest left,\n\t\t\t\t    right\' <- create_forest right]\n\n{-\nOn a Harpertown Windows machine with 4 cores (8 threads), using\nHaskell Platform 2011.2.0.0. \nNote the CPU utilization rates (elapsed time * num_of_threads/CPU time)\nrange between 70% and 77% when -N > 1. \n\nCompare that with Strategies, which has a higher CPU utilization rate\n(> 95%) and a smaller user time for -N > 1.\n\nE:\\cchen15\\icfp\\partree-mp>timeit partree.exe 1000 10 +RTS -N1\npartree 1000 10 = 23712\n\nFri Mar 18 13:56:45 2011\nCmd: partree.exe 1000 10 +RTS -N1\nElapsed:   4.898 sec\nUser       4.867 sec\nSystem     0.016 sec\nTotal CPU  4.883 sec\nPeak WorkingSet Size:     7229440\nPeak Pagefile Usage:      5836800\nPage Fault Count:         1806\nPeak Paged Pool usage:    85688\nPeak NonPaged Pool usage: 5568\n\nE:\\cchen15\\icfp\\partree-mp>timeit partree.exe 1000 10 +RTS -N2\npartree 1000 10 = 23712\n\nFri Mar 18 13:56:54 2011\nCmd: partree.exe 1000 10 +RTS -N2\nElapsed:   9.313 sec\nUser       12.605 sec\nSystem     1.841 sec\nTotal CPU  14.446 sec\nPeak WorkingSet Size:     12619776\nPeak Pagefile Usage:      10133504\nPage Fault Count:         3122\nPeak Paged Pool usage:    85688\nPeak NonPaged Pool usage: 6048\n\nE:\\cchen15\\icfp\\partree-mp>timeit partree.exe 1000 10 +RTS -N4\npartree 1000 10 = 23712\n\nFri Mar 18 13:57:07 2011\nCmd: partree.exe 1000 10 +RTS -N4\nElapsed:   9.968 sec\nUser       22.761 sec\nSystem     5.756 sec\nTotal CPU  28.517 sec\nPeak WorkingSet Size:     13414400\nPeak Pagefile Usage:      11677696\nPage Fault Count:         3317\nPeak Paged Pool usage:    85688\nPeak NonPaged Pool usage: 6720\n\nE:\\cchen15\\icfp\\partree-mp>timeit partree.exe 1000 10 +RTS -N8\npartree 1000 10 = 23712\n\nFri Mar 18 13:57:25 2011\nCmd: partree.exe 1000 10 +RTS -N8\nElapsed:   9.843 sec\nUser       46.239 sec\nSystem     11.029 sec\nTotal CPU  57.268 sec\nPeak WorkingSet Size:     14729216\nPeak Pagefile Usage:      15175680\nPage Fault Count:         3637\nPeak Paged Pool usage:    85688\nPeak NonPaged Pool usage: 7968\n-}'