b'module ArrayInsertionSort (sort) where\n\nimport Control.Monad (unless)\nimport Control.Monad.ST (ST, runST)\nimport Data.Array.ST (STUArray, getElems, newListArray, readArray, writeArray)\nimport Data.Foldable (forM_)\n\ntype IntArray s = STUArray s Int Int\n\nsort :: [Int] -> [Int]  -- sort on mutable arrays\nsort list = runST $ do\n    let listSize = length list\n    arr <- newListArray (0, listSize - 1) list :: ST s (IntArray s)\n\n    forM_ [1..listSize - 1] $ \\i ->\n        forM_ [i-1, i-2..0] $ \\j -> do\n            cur  <- readArray arr j\n            next <- readArray arr (j + 1)\n            unless (cur <= next) $ do writeArray arr j next\n                                      writeArray arr (j + 1) cur\n\n    getElems arr\n'