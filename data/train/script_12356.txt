b'package com.github.eprendre.sources_by_eprendre\n\nimport com.github.eprendre.tingshu.extensions.config\nimport com.github.eprendre.tingshu.sources.*\nimport com.github.eprendre.tingshu.utils.*\nimport org.jsoup.Jsoup\nimport java.net.URL\nimport java.net.URLEncoder\n\nobject WoAiTingPingShu : TingShu(), AudioUrlExtraHeaders {\n    override fun getSourceId(): String {\n        return "cc41d56926064805b0393780ec758e2a"\n    }\n\n    override fun getUrl(): String {\n        return "https://m.tpsge.com"\n    }\n\n    override fun getName(): String {\n        return "\xe6\x88\x91\xe7\x88\xb1\xe5\x90\xac\xe8\xaf\x84\xe4\xb9\xa6\xe7\xbd\x91"\n    }\n\n    override fun isDiscoverable(): Boolean {\n        return false\n    }\n\n    override fun isSearchable(): Boolean {\n        return false\n    }\n\n    override fun getDesc(): String {\n        return "\xe6\x8e\xa8\xe8\x8d\x90\xe6\x8c\x87\xe6\x95\xb0:3\xe6\x98\x9f \xe2\xad\x90\xe2\xad\x90\xe2\xad\x90\\n\xe7\xbd\x91\xe7\xab\x99\xe5\xb7\xb2\xe8\xbd\xac\xe4\xb8\xba\xe9\x98\x85\xe8\xaf\xbb\xe7\xb1\xbb\xe7\xab\x99\xe7\x82\xb9\xef\xbc\x8c\xe6\x9c\x89\xe5\xa3\xb0\xe8\xb5\x84\xe6\xba\x90\xe5\x85\xa8\xe9\x83\xa8\xe5\xa4\xb1\xe6\x95\x88\xef\xbc\x8c\xe8\xaf\xb7\xe7\xa6\x81\xe7\x94\xa8\xe6\xad\xa4\xe6\xba\x90"\n    }\n\n    override fun search(keywords: String, page: Int): Pair<List<Book>, Int> {\n        val encodedKeywords = URLEncoder.encode(keywords, "utf-8")\n        val url = "https://m.tpsge.com/so?sid=1&q=$encodedKeywords"\n        val doc = Jsoup.connect(url).config().get()\n\n        val totalPage = 1\n        val list = ArrayList<Book>()\n        val elementList = doc.select(".story_list_class > dd")\n        elementList.forEach { element ->\n            val a = element.selectFirst("a")\n            val bookUrl = a.absUrl("href")\n            val coverUrl = ""\n            val title = a.text()\n            val author = ""\n            val span = element.selectFirst("span")\n            if (span != null && a.selectFirst("font") != null) {\n                val artist = span.text()\n                list.add(Book(coverUrl, bookUrl, title, author, artist).apply {\n                    this.sourceId = getSourceId()\n                })\n            }\n        }\n\n        return Pair(list, totalPage)\n    }\n\n    override fun getBookDetailInfo(bookUrl: String, loadEpisodes: Boolean, loadFullPages: Boolean): BookDetail {\n        val episodes = ArrayList<Episode>()\n        val doc = Jsoup.connect(bookUrl).config().get()\n        val text = doc.selectFirst("#story_msg").ownText()\n        val author = Regex("\xe4\xbd\x9c\xe8\x80\x85\xef\xbc\x9a(.*?) ").find(text)?.groupValues?.get(1) ?: ""\n        val intro = doc.selectFirst(".desc").children().last().text()\n        val coverUrl = doc.selectFirst(".desc > table > tbody > tr > .tl > img").absUrl("src")\n\n        episodes.addAll(doc.select(".mp3_list > dd  > a").map {\n            Episode(it.text(), it.absUrl("href"))\n        })\n\n        return BookDetail(episodes, intro, author = author, coverUrl = coverUrl)\n    }\n\n    override fun getAudioUrlExtractor(): AudioUrlExtractor {\n        AudioUrlWebViewExtractor.setUp { str ->\n            val doc = Jsoup.parse(str)\n            val audioElement = doc.selectFirst("#jp_audio_0")\n            return@setUp audioElement?.attr("src")?.replace("http://", "https://")\n        }\n        return AudioUrlWebViewExtractor\n    }\n\n    override fun getCategoryMenus(): List<CategoryMenu> {\n        val menu1 =\n            CategoryMenu("\xe8\xaf\x84\xe4\xb9\xa6\xe5\x88\x86\xe7\xb1\xbb", listOf(\n                CategoryTab("\xe5\x8d\x95\xe7\x94\xb0\xe8\x8a\xb3", "https://m.tpsge.com/boyin/hot/dantianfang"),\n                CategoryTab("\xe8\xa2\x81\xe9\x98\x94\xe6\x88\x90", "https://m.tpsge.com/boyin/hot/yuankuocheng"),\n                CategoryTab("\xe5\xad\x99\xe5\xb2\xa9", "https://m.tpsge.com/boyin/hot/sunyan"),\n                CategoryTab("\xe5\x88\x98\xe5\x85\xb0\xe8\x8a\xb3", "https://m.tpsge.com/boyin/hot/liulanfang"),\n                CategoryTab("\xe8\xbf\x9e\xe4\xb8\xbd\xe5\xa6\x82", "https://m.tpsge.com/boyin/hot/lianliru"),\n                CategoryTab("\xe5\x88\x98\xe7\xba\xaa\xe5\x90\x8c", "https://m.tpsge.com/boyin/hot/liujitong"),\n                CategoryTab("\xe5\xbc\xa0\xe5\xb0\x91\xe4\xbd\x90", "https://m.tpsge.com/boyin/hot/zhangshaozuo"),\n                CategoryTab("\xe5\x91\xa8\xe5\xbb\xba\xe9\xbe\x99", "https://m.tpsge.com/boyin/hot/zhoujianlong"),\n                CategoryTab("\xe7\x94\xb0\xe8\xbf\x9e\xe5\x85\x83", "https://m.tpsge.com/boyin/hot/tianlianyuan"),\n                CategoryTab("\xe7\x9f\xb3\xe8\xbf\x9e\xe5\xa3\x81", "https://m.tpsge.com/boyin/hot/shilianbi"),\n                CategoryTab("\xe5\x85\xb3\xe6\xb0\xb8\xe8\xb6\x85", "https://m.tpsge.com/boyin/hot/guanyongchao"),\n                CategoryTab("\xe5\xad\x99\xe4\xb8\x80", "https://m.tpsge.com/boyin/hot/sunyi"),\n                CategoryTab("\xe9\x83\xad\xe5\xbe\xb7\xe7\xba\xb2", "https://m.tpsge.com/boyin/hot/guodegang"),\n                CategoryTab("\xe8\xb5\xb5\xe7\xbb\xb4\xe8\x8e\x89", "https://m.tpsge.com/boyin/hot/zhaoweili"),\n                CategoryTab("\xe4\xbb\xb2\xe7\xbb\xb4\xe7\xbb\xb4", "https://m.tpsge.com/boyin/hot/zhongweiwei"),\n                CategoryTab("\xe5\xad\x99\xe5\x88\x9a", "https://m.tpsge.com/boyin/hot/sungang"),\n                CategoryTab("\xe7\x8e\x8b\xe7\x8e\xa5\xe6\xb3\xa2", "https://m.tpsge.com/boyin/hot/wangyuebo"),\n                CategoryTab("\xe7\x94\xb0\xe6\x88\x98\xe4\xb9\x89", "https://m.tpsge.com/boyin/hot/tianzhanyi"))\n            )\n\n        val menu2 = CategoryMenu("\xe6\x9c\x89\xe5\xa3\xb0\xe5\xb0\x8f\xe8\xaf\xb4", listOf(\n            CategoryTab("\xe7\xbd\x91\xe7\xbb\x9c\xe7\x8e\x84\xe5\xb9\xbb", "https://m.tpsge.com/fenlei/hot/wlxh"),\n            CategoryTab("\xe5\x88\x91\xe4\xbe\xa6\xe6\x8e\xa8\xe7\x90\x86", "https://m.tpsge.com/fenlei/hot/xztl"),\n            CategoryTab("\xe5\x8e\x86\xe5\x8f\xb2\xe5\x86\x9b\xe4\xba\x8b", "https://m.tpsge.com/fenlei/hot/lsjs"),\n            CategoryTab("\xe5\xae\x98\xe5\x9c\xba\xe5\x95\x86\xe6\x88\x98", "https://m.tpsge.com/fenlei/hot/gcsz"),\n            CategoryTab("\xe4\xba\xba\xe7\x89\xa9\xe7\xba\xaa\xe5\xae\x9e", "https://m.tpsge.com/fenlei/hot/rwjs"),\n            CategoryTab("\xe9\x83\xbd\xe5\xb8\x82\xe8\xa8\x80\xe6\x83\x85", "https://m.tpsge.com/fenlei/hot/dsyq"),\n            CategoryTab("\xe5\x84\xbf\xe7\xab\xa5\xe8\xaf\xbb\xe7\x89\xa9", "https://m.tpsge.com/fenlei/hot/etdw"),\n            CategoryTab("\xe7\x9b\xb8\xe5\xa3\xb0\xe5\xb0\x8f\xe5\x93\x81", "https://m.tpsge.com/fenlei/hot/xsxp"),\n            CategoryTab("\xe6\xad\xa6\xe4\xbe\xa0\xe5\xb0\x8f\xe8\xaf\xb4", "https://m.tpsge.com/fenlei/hot/wxxs"),\n            CategoryTab("\xe6\x81\x90\xe6\x80\x96\xe6\x82\xac\xe7\x96\x91", "https://m.tpsge.com/fenlei/hot/kbxy"),\n            CategoryTab("\xe7\x99\xbe\xe5\xae\xb6\xe8\xae\xb2\xe5\x9d\x9b", "https://m.tpsge.com/fenlei/hot/bjjt"),\n            CategoryTab("\xe7\xb2\xa4\xe8\xaf\xad\xe8\xaf\x84\xe4\xb9\xa6", "https://m.tpsge.com/fenlei/hot/yyps"),\n            CategoryTab("\xe6\x9c\x89\xe5\xa3\xb0\xe6\x96\x87\xe5\xad\xa6", "https://m.tpsge.com/fenlei/hot/yswx"),\n            CategoryTab("\xe8\x8b\xb1\xe6\x96\x87\xe8\xaf\xbb\xe7\x89\xa9", "https://m.tpsge.com/fenlei/hot/ywdw"),\n            CategoryTab("\xe5\xb9\xbf\xe6\x92\xad\xe5\x89\xa7", "https://m.tpsge.com/fenlei/hot/gbj"),\n            CategoryTab("\xe6\x88\x8f\xe6\x9b\xb2", "https://m.tpsge.com/fenlei/hot/xq"),\n            CategoryTab("\xe7\xbb\xbc\xe8\x89\xba", "https://m.tpsge.com/fenlei/hot/zy"),\n            CategoryTab("\xe5\x85\xbb\xe7\x94\x9f", "https://m.tpsge.com/fenlei/hot/ys"))\n            )\n\n        return listOf(menu1, menu2)\n    }\n\n    override fun getCategoryList(url: String): Category {\n        val doc = Jsoup.connect(url).config().get()\n        val nextUrl = doc.select(".page > a").firstOrNull { it.text().contains("\xe4\xb8\x8b\xe4\xb8\x80\xe9\xa1\xb5") }?.absUrl("href") ?: ""\n        val currentPage = doc.selectFirst(".page > font")?.text()?.toInt() ?: 1\n        val totalPage = doc.selectFirst(".page").ownText().split("/")[1].toInt()\n\n        val list = ArrayList<Book>()\n        val elementList = doc.select(".story_list_class > dd > a")\n        elementList.forEach { element ->\n            val bookUrl = element.absUrl("href")\n            val coverUrl = ""\n            val title = element.ownText()\n            val author = ""\n            val span = element.selectFirst("span")\n            val array = span.text().split("\xef\xbc\x8f")\n            val artist = array[0]\n            val status = array[1]\n            list.add(Book(coverUrl, bookUrl, title, author, artist).apply {\n                this.status = status\n                this.sourceId = getSourceId()\n            })\n        }\n\n        return Category(list, currentPage, totalPage, url, nextUrl)\n    }\n\n    override fun headers(audioUrl: String): Map<String, String> {\n        val hashMap = hashMapOf<String, String>()\n        if (audioUrl.contains("tpsge.com")) {\n            hashMap["Host"] = URL(audioUrl).host\n        }\n        return hashMap\n    }\n\n}'