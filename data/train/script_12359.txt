b'{-# LANGUAGE BangPatterns #-}\nmodule Main where\n\nimport Data.List (foldl\')\nimport Control.Applicative ((<$>))\nimport Data.Set (Set, size, empty, insert)\n\nimport Data.Char (ord)\nimport Data.Bits (shiftL, xor)\n\n\n\n\n---------------------------------------------------\n-- Parameters that might be interesting to change\nfn = "cropus.txt"\nhashSize = 2\nusedHasher = xorHasher hashSize\n---------------------------------------------------\n\n\n\n\n---------------------------------------------------\n-- Space for so much activities! (hash functions)\n\n\n\n\n\n-- Reference word-wise xor hash function. Reaaaally crummy.\nxorHasher bytes = fst . foldl\' combine (0, 0)\n  where combine (acc, curPos) c = (shiftL (ord c) (8*curPos) `xor` acc, succ curPos `mod` bytes)\n---------------------------------------------------\n\n\n\n\n\nmain = do\n  ws <- words <$> readFile fn\n  let !(u, h) = countCollisions ws\n      collisions = u - h\n      utilisation = fromIntegral h/2^(hashSize*8)\n\n  putStrLn $ "Unique words: " ++ show u\n  putStrLn $ "Collisions: " ++ show collisions\n  putStrLn $ "Hash space utilised: " ++ show utilisation\n\n\ncountCollisions ws = f ws empty empty\n  where f []      unique  hashed = (size unique, size hashed)\n        f (w:ws) !unique !hashed = f ws (insert w unique) (insert (usedHasher w) hashed)\n\n '