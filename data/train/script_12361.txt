b'#\' Export statistical output to a table in Microsoft Office / LibreOffice format\n#\' \n#\' Export currently showing R stats object or stats object obj to a Microsoft\n#\' Office / LibreOffice table\n#\' \n#\' @importFrom utils methods \n#\' @import stats  \n#\' @importFrom xtable xtable\n#\' @importFrom broom tidy\n#\' @import officer\n#\' @import flextable\n#\' @aliases table2office table2doc table2ppt\n#\' @param x given R stats object to export; if set to \\code{NULL} the output of the \n#\' previous R command will be exported. \n#\' @param file name of output file. The .pptx or .docx extension is added automatically.\n#\' @param type desired output type - \\code{"PPT"} for PowerPoint and \\code{"DOC"} for Word.\n#\' @param append logical value - if \\code{TRUE} and \\code{type="PPT"} or \\code{"DOC"} it will\n#\' append the table to the given file, where file can also be a given corporate.  If \n#\' \\code{append=FALSE} any existing file will be overwritten. \n#\' @param digits number of digits after the comma (for all numeric columns \n#\' except p-values or degrees of freedom)\n#\' @param digitspvals number of digits after the comma (for p-values only). The\n#\' default is equal to \\code{digits}.\n#\' @param trim.pval a threshold below which the p-values are trimmed as \n#\' "< \\code{trim.pval}".\n#\' @param width desired width of table in inches. If the given width exceeds the page or slide \n#\' width, the table width becomes the page/slide width.\n#\' @param height desired height of table in inches. If the given height exceeds the page or slide \n#\' height, the table height becomes the page/slide height.\n#\' @param offx x offset in inches to specify horizontal location of table (only for \\code{type=="PPT"}).\n#\' @param offy y offset in inches to specify vertical location of table (only for \\code{type=="PPT"}).\n#\' @param font desired font to use for output table; defaults to \\code{"Arial"} on Windows\n#\' systems and to \\code{"Helvetica"} on other systems.\n#\' @param pointsize desired font point size.\n#\' @param add.rownames logical specifying whether or not to add row names.\n#\' @param \\dots Further arguments to be passed to \\code{table2office}.\n#\' @return \\code{\\link[flextable]{flextable}} object\n#\' @details Columns corresponding to degrees of freedom (with header "Df" or "df")\n#\' are always given as integers. Objects that can be exported with \\code{\\link{table2office}} are \n#\' all those supported by \\code{\\link[xtable]{xtable}} and \\code{\\link{tidy}}. The function will\n#\' first use \\code{\\link[xtable]{xtable}} to format the data. If the data class is not supported by \n#\' \\code{\\link[xtable]{xtable}} the function will then use \\code{\\link{tidy}}. \n#\' The data classes suported by \\code{\\link[xtable]{xtable}} are: \n#\' \\itemize{\n#\'    \\item \\code{anova} \n#\'    \\item \\code{aov} \n#\'    \\item \\code{aovlist} \n#\'    \\item \\code{data.frame} \n#\'    \\item \\code{glm} \n#\'    \\item \\code{gmsar} \n#\'    \\item \\code{lagImpact} \n#\'    \\item \\code{lm} \n#\'    \\item \\code{matrix} \n#\'    \\item \\code{prcomp} \n#\'    \\item \\code{sarlm} \n#\'    \\item \\code{sarlm.pred} \n#\'    \\item \\code{spautolm} \n#\'    \\item \\code{sphet} \n#\'    \\item \\code{splm} \n#\'    \\item \\code{stsls} \n#\'    \\item \\code{summary.aov} \n#\'    \\item \\code{summary.aovlist} \n#\'    \\item \\code{summary.glm} \n#\'    \\item \\code{summary.gmsar} \n#\'    \\item \\code{summary.lm} \n#\'    \\item \\code{summary.prcomp} \n#\'    \\item \\code{summary.sarlm} \n#\'    \\item \\code{summary.spautolm} \n#\'    \\item \\code{summary.sphet} \n#\'    \\item \\code{summary.splm} \n#\'    \\item \\code{summary.stsls} \n#\'    \\item \\code{table} \n#\'    \\item \\code{ts} \n#\'    \\item \\code{zoo}\n#\'    } \n#\' The data classes suported by \\code{\\link{tidy}} are: \n#\' \\itemize{\n#\'    \\item \\code{aareg} \n#\'    \\item \\code{acf} \n#\'    \\item \\code{Arima} \n#\'    \\item \\code{betareg} \n#\'    \\item \\code{biglm} \n#\'    \\item \\code{binDesign} \n#\'    \\item \\code{binWidth} \n#\'    \\item \\code{brmsfit} \n#\'    \\item \\code{btergm} \n#\'    \\item \\code{cch} \n#\'    \\item \\code{character} \n#\'    \\item \\code{cld} \n#\'    \\item \\code{coeftest} \n#\'    \\item \\code{confint.glht} \n#\'    \\item \\code{cv.glmnet} \n#\'    \\item \\code{default} \n#\'    \\item \\code{density} \n#\'    \\item \\code{dgCMatrix} \n#\'    \\item \\code{dgTMatrix} \n#\'    \\item \\code{dist} \n#\'    \\item \\code{emmGrid} \n#\'    \\item \\code{ergm} \n#\'    \\item \\code{felm} \n#\'    \\item \\code{fitdistr} \n#\'    \\item \\code{ftable} \n#\'    \\item \\code{gam} \n#\'    \\item \\code{Gam} \n#\'    \\item \\code{gamlss} \n#\'    \\item \\code{geeglm} \n#\'    \\item \\code{glht} \n#\'    \\item \\code{glmnet} \n#\'    \\item \\code{glmRob} \n#\'    \\item \\code{gmm} \n#\'    \\item \\code{htest} \n#\'    \\item \\code{ivreg} \n#\'    \\item \\code{kappa} \n#\'    \\item \\code{kde} \n#\'    \\item \\code{kmeans} \n#\'    \\item \\code{Line} \n#\'    \\item \\code{Lines} \n#\'    \\item \\code{list} \n#\'    \\item \\code{lme} \n#\'    \\item \\code{lmodel2} \n#\'    \\item \\code{lmRob} \n#\'    \\item \\code{logical} \n#\'    \\item \\code{lsmobj} \n#\'    \\item \\code{manova} \n#\'    \\item \\code{map} \n#\'    \\item \\code{Mclust} \n#\'    \\item \\code{merMod} \n#\'    \\item \\code{mle2} \n#\'    \\item \\code{muhaz} \n#\'    \\item \\code{multinom} \n#\'    \\item \\code{nlrq} \n#\'    \\item \\code{nls} \n#\'    \\item \\code{NULL} \n#\'    \\item \\code{numeric} \n#\'    \\item \\code{orcutt} \n#\'    \\item \\code{pairwise.htest} \n#\'    \\item \\code{plm} \n#\'    \\item \\code{poLCA} \n#\'    \\item \\code{Polygon} \n#\'    \\item \\code{Polygons} \n#\'    \\item \\code{power.htest} \n#\'    \\item \\code{pyears} \n#\'    \\item \\code{rcorr} \n#\'    \\item \\code{ref.grid}\n#\'    \\item \\code{ridgelm} \n#\'    \\item \\code{rjags} \n#\'    \\item \\code{roc} \n#\'    \\item \\code{rowwise_df} \n#\'    \\item \\code{rq} \n#\'    \\item \\code{rqs} \n#\'    \\item \\code{sparseMatrix} \n#\'    \\item \\code{SpatialLinesDataFrame} \n#\'    \\item \\code{SpatialPolygons} \n#\'    \\item \\code{SpatialPolygonsDataFrame} \n#\'    \\item \\code{spec} \n#\'    \\item \\code{speedlm} \n#\'    \\item \\code{stanfit} \n#\'    \\item \\code{stanreg} \n#\'    \\item \\code{summary.glht} \n#\'    \\item \\code{summaryDefault} \n#\'    \\item \\code{survdiff} \n#\'    \\item \\code{survexp} \n#\'    \\item \\code{survfit} \n#\'    \\item \\code{survreg} \n#\'    \\item \\code{tbl_df} \n#\'    \\item \\code{TukeyHSD}\n#\'    }\n#\' @author Tom Wenseleers, Christophe Vanderaa\n#\' @example examples/table2office.R\n#\' @seealso \\code{\\link{table2tex}}, \\code{\\link{table2html}}, \\code{\\link{table2spreadsheet}}\n#\' @export\n#\' \ntable2office = function(x = NULL, file = "Rtable", type = c("PPT","DOC"), append = FALSE, digits = 2, \n                     digitspvals = NULL, trim.pval = 1E-16, width = NULL, height = NULL, offx = 1, offy = 1, \n                     font = ifelse(Sys.info()["sysname"]=="Windows","Arial","Helvetica")[[1]], pointsize = 12, \n                     add.rownames = FALSE) {\n  \n  if(is.null(digitspvals)) digitspvals <- digits\n  obj=x\n  if (is.null(obj)) {\n    outp = .Last.value # capture previously shown output or use passed object\n  } else {\n    outp = obj\n  }\n  if (is.null(outp)) stop("no R stats object available to export")\n  supobjects = unique(c(as.character(gsub("xtable.", "", methods(xtable))), \n                        as.character(gsub("tidy.", "", methods(tidy))),\n                        "xtabs"))\n  if (length(intersect(class(outp), supobjects)) == 0) stop(paste0(class(outp), " is currently not supported by table2office"))\n  \n  \n  type=toupper(type)\n  type=match.arg(type,c("PPT","DOC"))\n  \n  ext <- if(type=="PPT"){ \n    ".pptx"\n  } else if(type == "DOC"){\n    ".docx"\n  } \n  file = sub("^(.*)[.].*", "\\\\1", file)  # remove extension if given\n  file = paste0(file, ext)  # add extension\n  \n  if(type == "PPT"){\n    if (append & file.exists(file)) { \n      doc = read_pptx(path = file) \n    } else { \n      doc = read_pptx() \n    }\n    doc <- add_slide(doc, layout = "Blank", master = "Office Theme")\n    pagesize <- get.slide.size(doc)\n  } else if(type == "DOC"){\n    if (append & file.exists(file)) { \n      doc = read_docx(path = file) \n      doc = body_add_break(doc, pos = "after")\n    } else { \n      doc = read_docx() \n    }\n    pagesize <- (doc$sect_dim$page - doc$sect_dim$margins[c(3,2)])/1440 # 1440 is a factor to convert to inches\n  } \n  \n  \n  # deal with specific classes of objects \n  if (inherits(outp, "summary.merMod")) {\n    outp <- data.frame(coef(summary(outp)), check.names = F)\n  } else if(inherits(outp, "Matrix")) {\n    outp <- as.data.frame(as.matrix(x))\n  } else if (inherits(outp, c("xtabs", "ftable"))) {\n    outp <- ftable(outp)\n  } \n  \n  # Depending on the data class, call xtable or tidy\n  if (length(intersect(class(outp), as.character(gsub("xtable.", "", methods(xtable))))) >= 1) {\n    tab <- xtable2(x=outp, ndigits = digits, ndigitspvals = digitspvals, trim.pval = trim.pval)\n  } else if (length(intersect(class(outp), as.character(gsub("tidy.", "", methods(tidy))))) >= 1) {\n    tab <- tidy2(x=outp, ndigits = digits, ndigitspvals = digitspvals, trim.pval = trim.pval)\n  } else { # should not occur\n    tab <- data.frame2(x=outp, ndigits = digits, ndigitspvals = digitspvals, trim.pval = trim.pval)\n  }\n  \n  nc <- ncol(tab)\n  nr <- nrow(tab)\n  tblaspectr = nc / nr * 2  # guess table aspect ratio\n  pageaspectr = pagesize["width"]/pagesize["height"]\n  if (pageaspectr > tblaspectr) {\n    xf = tblaspectr/pageaspectr\n    yf = 1\n  } else {\n    xf = 1\n    yf = pageaspectr/tblaspectr\n  }\n  w = pagesize["width"] * xf\n  h = pagesize["height"] * yf\n  # if width and height is given override other scaling params\n  if (!is.null(width)) w = width  \n  if (!is.null(height)) h = height\n  \n  \n  # Avoid bug in flextable: when one of the colnames = x, flextable returns an empty table\n  x.col <- which(colnames(tab) == "x")\n  if(length(x.col)>0) colnames(tab)[x.col]<- "x "\n  \n  # Issues\n  # - Deal with ftable \n  # - use margins ?\n  cell.height <- min(h, pagesize["height"] - offy)/(nr+1)\n  cell.width <- min(w, pagesize["width"] - offx)/(nc+1)\n  \n  if(inherits(tab,"xtable")){\n    tab <- as_flextable(tab, include.rownames = add.rownames, rowname_col = ".")\n    tab <- width(tab, width=cell.width)\n    tab <- height(tab, height=cell.height)\n  } else {\n    if(add.rownames) x <- cbind(" " = rownames(x), x)\n    tab <- flextable(tab, cheight = cell.height, cwidth = cell.width)\n  }\n  \n  # Format the digits \n  col.pval <- grep("\\\\QPr(\\\\E|\\\\Qp-value\\\\E|\\\\Qp value\\\\E|\\\\Qpadj\\\\E|^p$|^padj$|p[.]value", tab$col_keys, value = TRUE)\n  col.df <- grep("^df$", tab$col_keys, value = TRUE, ignore.case = TRUE) \n  col.other <- tab$col_keys[! tab$col_keys %in% c(col.pval, col.df)]\n  tab <- colformat_double(x = tab, j = col.other, digits = digits)\n  tab <- colformat_int(x = tab, j = col.df)\n  tab <- colformat_double(x = tab, j = col.pval)\n  tab <- bold(tab, part = "header") # bold header\n  tab <- fontsize(tab, part = "all", size = pointsize) \n  tab <- font(tab, part = "all", fontname = font)\n  \n  \n  if(type=="PPT"){\n    doc <- ph_with(doc, value = tab , location = ph_location(left = offx, top = offy))\n  } else if(type == "DOC"){\n    doc <- body_add_flextable(doc, value = tab)\n  } \n  \n  print(doc, target = file)\n  message(paste0("Exported table as ",file))\n  return(tab)\n}\n\n#\' @describeIn table2office\n#\' Export statistical output to a table in a Microsoft Office PowerPoint/ LibreOffice Impress presentation\n#\' @export\ntable2ppt = function(...) table2office(type = "PPT", ...)\n\n#\' @describeIn table2office\n#\' Export statistical output to a table in a Microsoft Office Word/ LibreOffice Writer document\n#\' @export\ntable2doc = function(...) table2office(type = "DOC", ...)\n\n\n\n'