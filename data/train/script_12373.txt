b'/*\n * Copyright (C) 2015 Naman Dwivedi\n *\n * Licensed under the GNU General Public License v3\n *\n * This is free software: you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n */\n\npackage com.naman14.timber.activities;\n\nimport android.content.Context;\nimport android.os.AsyncTask;\nimport android.os.Bundle;\nimport androidx.annotation.Nullable;\nimport androidx.core.view.MenuItemCompat;\nimport androidx.recyclerview.widget.LinearLayoutManager;\nimport androidx.recyclerview.widget.RecyclerView;\nimport androidx.appcompat.widget.SearchView;\nimport androidx.appcompat.widget.Toolbar;\nimport android.util.Log;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.MotionEvent;\nimport android.view.View;\nimport android.view.inputmethod.InputMethodManager;\n\nimport com.naman14.timber.R;\nimport com.naman14.timber.adapters.SearchAdapter;\nimport com.naman14.timber.dataloaders.AlbumLoader;\nimport com.naman14.timber.dataloaders.ArtistLoader;\nimport com.naman14.timber.dataloaders.SongLoader;\nimport com.naman14.timber.models.Album;\nimport com.naman14.timber.models.Artist;\nimport com.naman14.timber.models.Song;\nimport com.naman14.timber.provider.SearchHistory;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.concurrent.Executor;\nimport java.util.concurrent.Executors;\n\npublic class SearchActivity extends BaseActivity implements SearchView.OnQueryTextListener, View.OnTouchListener {\n\n    private final Executor mSearchExecutor = Executors.newSingleThreadExecutor();\n    @Nullable\n    private AsyncTask mSearchTask = null;\n\n    private SearchView mSearchView;\n    private InputMethodManager mImm;\n    private String queryString;\n\n    private SearchAdapter adapter;\n    private RecyclerView recyclerView;\n\n    private List<Object> searchResults = Collections.emptyList();\n\n    Bundle bundle;\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_search);\n\n        mImm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);\n\n        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n        getSupportActionBar().setDisplayHomeAsUpEnabled(true);\n\n        recyclerView = (RecyclerView) findViewById(R.id.recyclerview);\n        recyclerView.setLayoutManager(new LinearLayoutManager(this));\n        adapter = new SearchAdapter(this);\n        recyclerView.setAdapter(adapter);\n\n        if(savedInstanceState != null && savedInstanceState.containsKey("QUERY_STRING")){\n            bundle = savedInstanceState;\n        }\n    }\n\n    @Override\n    protected void onSaveInstanceState(Bundle outState) {\n        super.onSaveInstanceState(outState);\n        if (queryString != null){\n            outState.putString("QUERY_STRING", queryString);\n        }\n    }\n\n\n    @Override\n    public boolean onCreateOptionsMenu(final Menu menu) {\n\n        getMenuInflater().inflate(R.menu.menu_search, menu);\n\n        mSearchView = (SearchView) MenuItemCompat.getActionView(menu.findItem(R.id.menu_search));\n\n        mSearchView.setOnQueryTextListener(this);\n        mSearchView.setQueryHint(getString(R.string.search_library));\n\n        mSearchView.setIconifiedByDefault(false);\n        mSearchView.setIconified(false);\n\n        MenuItemCompat.setOnActionExpandListener(menu.findItem(R.id.menu_search), new MenuItemCompat.OnActionExpandListener() {\n            @Override\n            public boolean onMenuItemActionExpand(MenuItem item) {\n                return true;\n            }\n\n            @Override\n            public boolean onMenuItemActionCollapse(MenuItem item) {\n                finish();\n                return false;\n            }\n        });\n\n        menu.findItem(R.id.menu_search).expandActionView();\n\n        if(bundle != null && bundle.containsKey("QUERY_STRING")){\n            mSearchView.setQuery(bundle.getString("QUERY_STRING"), true);\n        }\n\n        return super.onCreateOptionsMenu(menu);\n    }\n\n\n\n    @Override\n    public boolean onPrepareOptionsMenu(Menu menu) {\n        MenuItem item = menu.findItem(R.id.action_search);\n        item.setVisible(false);\n        return true;\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(final MenuItem item) {\n        switch (item.getItemId()) {\n            case android.R.id.home:\n                finish();\n                return true;\n            default:\n                break;\n        }\n        return super.onOptionsItemSelected(item);\n    }\n\n    @Override\n    public boolean onQueryTextSubmit(final String query) {\n        onQueryTextChange(query);\n        hideInputManager();\n\n        return true;\n    }\n\n    @Override\n    public boolean onQueryTextChange(final String newText) {\n\n        if (newText.equals(queryString)) {\n            return true;\n        }\n        if (mSearchTask != null) {\n            mSearchTask.cancel(false);\n            mSearchTask = null;\n        }\n        queryString = newText;\n        if (queryString.trim().equals("")) {\n            searchResults.clear();\n            adapter.updateSearchResults(searchResults);\n            adapter.notifyDataSetChanged();\n        } else {\n            mSearchTask = new SearchTask().executeOnExecutor(mSearchExecutor, queryString);\n            Log.d("AAAABBBBBB", "TaskCanelled? " + (mSearchTask.isCancelled()));\n        }\n\n        return true;\n    }\n\n    @Override\n    public boolean onTouch(View v, MotionEvent event) {\n        hideInputManager();\n        return false;\n    }\n\n    @Override\n    protected void onDestroy() {\n        if (mSearchTask != null && mSearchTask.getStatus() != AsyncTask.Status.FINISHED) {\n            mSearchTask.cancel(false);\n        }\n        super.onDestroy();\n    }\n\n    public void hideInputManager() {\n        if (mSearchView != null) {\n            if (mImm != null) {\n                mImm.hideSoftInputFromWindow(mSearchView.getWindowToken(), 0);\n            }\n            mSearchView.clearFocus();\n\n            SearchHistory.getInstance(this).addSearchString(queryString);\n        }\n    }\n\n    private class SearchTask extends AsyncTask<String,Void,ArrayList<Object>> {\n\n        @Override\n        protected ArrayList<Object> doInBackground(String... params) {\n            ArrayList<Object> results = new ArrayList<>(27);\n            List<Song> songList = SongLoader.searchSongs(SearchActivity.this, params[0], 10);\n            if (!songList.isEmpty()) {\n                results.add(getString(R.string.songs));\n                results.addAll(songList);\n            }\n            boolean canceled = isCancelled();\n            if (canceled) {\n                return null;\n            }\n            List<Album> albumList = AlbumLoader.getAlbums(SearchActivity.this, params[0], 7);\n            if (!albumList.isEmpty()) {\n                results.add(getString(R.string.albums));\n                results.addAll(albumList);\n            }\n\n            canceled = isCancelled();\n            if (canceled) {\n                return null;\n            }\n            List<Artist> artistList = ArtistLoader.getArtists(SearchActivity.this, params[0], 7);\n            if (!artistList.isEmpty()) {\n                results.add(getString(R.string.artists));\n                results.addAll(artistList);\n            }\n            if (results.size() == 0) {\n                results.add(getString(R.string.nothing_found));\n            }\n            return results;\n        }\n\n        @Override\n        protected void onPostExecute(ArrayList<Object> objects) {\n            super.onPostExecute(objects);\n            mSearchTask = null;\n            if (objects != null) {\n                adapter.updateSearchResults(objects);\n                adapter.notifyDataSetChanged();\n            }\n        }\n    }\n}\n'