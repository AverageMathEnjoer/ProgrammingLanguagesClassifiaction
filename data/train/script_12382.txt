b'/**\n * Copyright (C) 2020 Fernando Cejas Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.fernandocejas.sample.features.movies\n\nimport android.os.Bundle\nimport android.view.View\nimport androidx.core.os.bundleOf\nimport androidx.fragment.app.viewModels\nimport com.fernandocejas.sample.R\nimport com.fernandocejas.sample.core.exception.Failure\nimport com.fernandocejas.sample.core.exception.Failure.NetworkConnection\nimport com.fernandocejas.sample.core.exception.Failure.ServerError\nimport com.fernandocejas.sample.core.extension.*\nimport com.fernandocejas.sample.core.platform.BaseFragment\nimport com.fernandocejas.sample.features.movies.MovieFailure.NonExistentMovie\nimport dagger.hilt.android.AndroidEntryPoint\nimport kotlinx.android.synthetic.main.fragment_movie_details.*\nimport kotlinx.android.synthetic.main.toolbar.*\nimport javax.inject.Inject\n\n@AndroidEntryPoint\nclass MovieDetailsFragment : BaseFragment() {\n\n    companion object {\n        private const val PARAM_MOVIE = "param_movie"\n\n        fun forMovie(movie: MovieView?) = MovieDetailsFragment().apply {\n            arguments = bundleOf(PARAM_MOVIE to movie)\n        }\n    }\n\n    @Inject\n    lateinit var movieDetailsAnimator: MovieDetailsAnimator\n\n    private val movieDetailsViewModel by viewModels<MovieDetailsViewModel>()\n\n    override fun layoutId() = R.layout.fragment_movie_details\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        activity?.let { movieDetailsAnimator.postponeEnterTransition(it) }\n\n        with(movieDetailsViewModel) {\n            observe(movieDetails, ::renderMovieDetails)\n            failure(failure, ::handleFailure)\n        }\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        if (firstTimeCreated(savedInstanceState)) {\n            movieDetailsViewModel.loadMovieDetails((arguments?.get(PARAM_MOVIE) as MovieView).id)\n        } else {\n            movieDetailsAnimator.scaleUpView(moviePlay)\n            movieDetailsAnimator.cancelTransition(moviePoster)\n            moviePoster.loadFromUrl((requireArguments()[PARAM_MOVIE] as MovieView).poster)\n        }\n    }\n\n    override fun onBackPressed() {\n        movieDetailsAnimator.fadeInvisible(scrollView, movieDetails)\n        if (moviePlay.isVisible())\n            movieDetailsAnimator.scaleDownView(moviePlay)\n        else\n            movieDetailsAnimator.cancelTransition(moviePoster)\n    }\n\n    private fun renderMovieDetails(movie: MovieDetailsView?) {\n        movie?.let {\n            with(movie) {\n                activity?.let {\n                    moviePoster.loadUrlAndPostponeEnterTransition(poster, it)\n                    it.toolbar.title = title\n                }\n                movieSummary.text = summary\n                movieCast.text = cast\n                movieDirector.text = director\n                movieYear.text = year.toString()\n                moviePlay.setOnClickListener { movieDetailsViewModel.playMovie(trailer) }\n            }\n        }\n        movieDetailsAnimator.fadeVisible(scrollView, movieDetails)\n        movieDetailsAnimator.scaleUpView(moviePlay)\n    }\n\n    private fun handleFailure(failure: Failure?) {\n        when (failure) {\n            is NetworkConnection -> {\n                notify(R.string.failure_network_connection); close()\n            }\n            is ServerError -> {\n                notify(R.string.failure_server_error); close()\n            }\n            is NonExistentMovie -> {\n                notify(R.string.failure_movie_non_existent); close()\n            }\n            else -> {\n                notify(R.string.failure_server_error); close()\n            }\n        }\n    }\n}\n'