b'package effectivejava.chapter5.item31;\nimport java.util.*;\n\n// Generic union method with wildcard types for enhanced flexibility (Pages 142-3)\npublic class Union {\n    public static <E> Set<E> union(Set<? extends E> s1,\n                                   Set<? extends E> s2) {\n        Set<E> result = new HashSet<E>(s1);\n        result.addAll(s2);\n        return result;\n    }\n\n    // Simple program to exercise flexible generic staticfactory\n    public static void main(String[] args) {\n        Set<Integer> integers = new HashSet<>();\n        integers.add(1); \n        integers.add(3); \n        integers.add(5); \n\n        Set<Double> doubles =  new HashSet<>();\n        doubles.add(2.0); \n        doubles.add(4.0); \n        doubles.add(6.0); \n\n        Set<Number> numbers = union(integers, doubles);\n\n//      // Explicit type parameter - required prior to Java 8\n//      Set<Number> numbers = Union.<Number>union(integers, doubles);\n\n        System.out.println(numbers);\n    }\n}\n'