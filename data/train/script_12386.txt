b'// Listing 16.1\nlet numbers = [ 1 .. 10 ]\nlet timesTwo n = n * 2\n\nlet outputImperative = ResizeArray()\nfor number in numbers do\n    outputImperative.Add (number |> timesTwo)\n\nlet outputFunctional = numbers |> List.map timesTwo\n\n// Listing 16.2\ntype Order = { OrderId : int }\ntype Customer = { CustomerId : int; Orders : Order list; Town : string }\nlet customers : Customer list = []\nlet orders : Order list = customers |> List.collect(fun c -> c.Orders)\n\n// Listing 16.3\nopen System\n\n[ DateTime(2010,5,1); DateTime(2010,6,1); DateTime(2010,6,12); DateTime(2010,7,3) ]\n|> List.pairwise\n|> List.map(fun (a, b) -> b - a)\n|> List.map(fun time -> time.TotalDays)\n\n// Listing 16.4\nlet londonCustomers, otherCustomers =\n    customers\n    |> List.partition(fun c -> c.Town = "London")\n\n// Listing 16.5\ndo\n    let numbers = [ 1.0 .. 10.0 ]\n    let total = numbers |> List.sum\n    let average = numbers |> List.average\n    let max = numbers |> List.max\n    let min = numbers |> List.min\n    ()\n\n// Listing 16.6\nlet numberOne =\n    [ 1 .. 5 ]\n    |> List.toArray\n    |> Seq.ofArray\n    |> Seq.head\n'