b'import com.github.eprendre.tingshu.utils.Book\nimport com.github.eprendre.tingshu.utils.Episode\nimport org.jsoup.Jsoup\nimport org.junit.Test\nimport java.net.URLEncoder\n\n/**\n * 56\xe5\x90\xac\xe4\xb9\xa6\xe7\xbd\x91\xe6\xb5\x8b\xe8\xaf\x95\n */\nclass M56TingShuTest {\n    val userAgent = "Mozilla/5.0 (Android 4.4; Mobile; rv:46.0) Gecko/46.0 Firefox/46.0"\n\n    /**\n     * \xe6\xba\x90\xe7\x9a\x84\xe5\x90\x8d\xe5\xad\x97\n     */\n    @Test\n    fun name() {\n        println("56\xe5\x90\xac\xe4\xb9\xa6\xe7\xbd\x91")\n    }\n\n    /**\n     * \xe5\x8f\x91\xe7\x8e\xb0\xe5\x88\x86\xe7\xb1\xbb\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe6\xb2\xa1\xe6\x9c\x89\xe5\x88\x99\xe4\xb8\x8d\xe7\x94\xa8\xe6\x8f\x90\xe4\xbe\x9b\n     */\n    @Test\n    fun categories() {\n        val doc = Jsoup.connect("http://m.ting56.com/mulu.html").testConfig(false).get()\n        doc.select(".chan_box").forEach { box ->\n            val title = box.selectFirst("h2").text()\n            println("title: $title")\n            box.select("ul > li > a").forEach { category ->\n                println(category.text())\n                println(category.absUrl("href"))\n            }\n        }\n\n//        val cat1 = mapOf(\n//            "\xe7\x8e\x84\xe5\xb9\xbb\xe6\xad\xa6\xe4\xbe\xa0" to  "http://m.ting56.com/book/1.html",\n//            "\xe9\x83\xbd\xe5\xb8\x82\xe8\xa8\x80\xe6\x83\x85" to  "http://m.ting56.com/book/2.html",\n//            "\xe6\x81\x90\xe6\x80\x96\xe6\x82\xac\xe7\x96\x91" to  "http://m.ting56.com/book/3.html",\n//            "\xe7\xbb\xbc\xe8\x89\xba\xe5\xa8\xb1\xe4\xb9\x90" to  "http://m.ting56.com/book/45.html",\n//            "\xe7\xbd\x91\xe6\xb8\xb8\xe7\xab\x9e\xe6\x8a\x80" to  "http://m.ting56.com/book/4.html",\n//            "\xe5\x86\x9b\xe4\xba\x8b\xe5\x8e\x86\xe5\x8f\xb2" to  "http://m.ting56.com/book/6.html",\n//            "\xe5\x88\x91\xe4\xbe\xa6\xe6\x8e\xa8\xe7\x90\x86" to  "http://m.ting56.com/book/41.html"\n//        )\n//        println("\xe6\x9c\x89\xe5\xa3\xb0\xe5\xb0\x8f\xe8\xaf\xb4: $cat1")\n//        val cat2 = mapOf(\n//            "\xe5\x8d\x95\xe7\x94\xb0\xe8\x8a\xb3" to  "http://m.ting56.com/byy/shantianfang.html",\n//            "\xe5\x88\x98\xe5\x85\xb0\xe8\x8a\xb3" to  "http://m.ting56.com/byy/liulanfang.html",\n//            "\xe8\xa2\x81\xe9\x98\x94\xe6\x88\x90" to  "http://m.ting56.com/byy/yuankuocheng.html",\n//            "\xe7\x94\xb0\xe8\xbf\x9e\xe5\x85\x83" to  "http://m.ting56.com/byy/tianlianyuan.html",\n//            "\xe8\xbf\x9e\xe4\xb8\xbd\xe5\xa6\x82" to  "http://m.ting56.com/byy/lianliru.html",\n//            "\xe7\x8e\x8b\xe7\x8e\xa5\xe6\xb3\xa2" to  "http://m.ting56.com/byy/wangyuebo.html",\n//            "\xe5\xad\x99\xe4\xb8\x80" to "http://m.ting56.com/byy/sunyi.html",\n//            "\xe6\x9b\xb4\xe5\xa4\x9a" to "http://m.ting56.com/book/9.html"\n//        )\n//        println("\xe8\xaf\x84\xe4\xb9\xa6: $cat2")\n    }\n\n    /**\n     * \xe6\x90\x9c\xe7\xb4\xa2\n     * \xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x94\xe5\x9b\x9e\xef\xbc\x9a1.\xe7\xbb\x93\xe6\x9e\x9clist\xef\xbc\x8c 2.\xe6\x80\xbb\xe9\xa1\xb5\xe6\x95\xb0\n     */\n    @Test\n    fun search() {\n        val keywords = "\xe4\xbb\x99" //\xe6\x90\x9c\xe7\xb4\xa2\xe5\x85\xb3\xe9\x94\xae\xe8\xaf\x8d\n        val page = 1 //\xe5\xbd\x93\xe5\x89\x8d\xe9\xa1\xb5\xe6\x95\xb0\n        val encodedKeywords = URLEncoder.encode(keywords, "gb2312") //\xe7\xbc\x96\xe7\xa0\x81\n        val url = "http://m.ting56.com/search.asp?searchword=$encodedKeywords&page=$page"\n\n        val list = ArrayList<Book>()\n        var totalPage = 1\n\n        val doc = Jsoup.connect(url).userAgent(userAgent).get()\n        totalPage = doc.selectFirst("#page_num1").text().split("/")[1].toInt()\n        val elementList = doc.select(".xsdz > .list-ov-tw")\n        elementList.forEach { item ->\n            val coverUrl = item.selectFirst(".list-ov-t a img").attr("original")\n            val ov = item.selectFirst(".list-ov-w")\n            val bookUrl = ov.selectFirst(".bt a").attr("abs:href")\n            val title = ov.selectFirst(".bt a").text()\n            val (author, artist) = ov.select(".zz").let { element ->\n                Pair(element[0].text(), element[1].text())\n            }\n            val status = ""\n            val intro = ov.selectFirst(".nr").text()\n            list.add(\n                Book(\n                    coverUrl,\n                    bookUrl,\n                    title,\n                    author,\n                    artist\n                )\n            )\n        }\n\n        println("\xe6\x80\xbb\xe9\xa1\xb5\xe6\x95\xb0: $totalPage")\n        list.take(5).forEach {\n            println(it)\n        }\n        assert(list.size > 0)\n    }\n\n    /**\n     * \xe4\xb9\xa6\xe7\xb1\x8d\xe8\xaf\xa6\xe6\x83\x85\xe9\xa1\xb5\xef\xbc\x8c\xe5\x8c\x85\xe5\x90\xab\xe6\x9b\xb4\xe5\xa4\x9a\xe7\x9a\x84\xe4\xb9\xa6\xe7\xb1\x8d\xe4\xbf\xa1\xe6\x81\xaf\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a\xe7\xab\xa0\xe8\x8a\x82\xe5\x88\x97\xe8\xa1\xa8\xe3\x80\x82\n     * \xe7\xab\xa0\xe8\x8a\x82\xe5\x88\x97\xe8\xa1\xa8\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x94\xe5\x9b\x9e\xef\xbc\x8c\xe5\x85\xb6\xe5\xae\x83\xe4\xb9\xa6\xe7\xb1\x8d\xe4\xbf\xa1\xe6\x81\xaf\xe7\x9c\x8b\xe6\x83\x85\xe5\x86\xb5\xe8\xbf\x94\xe5\x9b\x9e\n     */\n    @Test\n    fun bookDetail() {\n        val bookUrl = "http://m.ting56.com/mp3/4826.html"\n        val doc = Jsoup.connect(bookUrl).userAgent(userAgent).get()\n\n        //\xe8\x8e\xb7\xe5\x8f\x96\xe7\xab\xa0\xe8\x8a\x82\xe5\x88\x97\xe8\xa1\xa8\n        val episodes = doc.getElementById("playlist")\n            .getElementsByTag("a")\n            .map {\n                Episode(it.text(), it.attr("abs:href"))\n            }\n        val intro = doc.selectFirst(".book_intro").ownText()\n        episodes.take(10).forEach {\n            println(it)\n        }\n        println("\xe8\xaf\xa6\xe7\xbb\x86\xe7\xae\x80\xe4\xbb\x8b:$intro")\n        assert(episodes.isNotEmpty())\n    }\n\n    /**\n     * 56\xe5\x90\xac\xe4\xb9\xa6\xe7\xbd\x91\xe4\xb8\x8d\xe8\x83\xbd\xe7\x9b\xb4\xe6\x8e\xa5\xe9\x80\x9a\xe8\xbf\x87jsoup\xe8\x8e\xb7\xe5\x8f\x96\xe9\x9f\xb3\xe9\xa2\x91\xe5\x9c\xb0\xe5\x9d\x80\xef\xbc\x8c\xe4\xbd\x86\xe6\x9c\x80\xe5\xa5\xbd\xe4\xb9\x9f\xe6\x8f\x8f\xe8\xbf\xb0\xe4\xb8\x80\xe4\xb8\x8b\xe9\x9f\xb3\xe9\xa2\x91\xe5\x9c\xb0\xe5\x9d\x80\xe6\x89\x80\xe5\x9c\xa8\xe7\x9a\x84\xe4\xbd\x8d\xe7\xbd\xae\n     */\n    @Test\n    fun audioUrl() {\n        val doc = Jsoup.connect("blablabla").get()\n        val audioUrl = doc.selectFirst("#jp_audio_0")?.attr("src")\n    }\n\n    /**\n     * \xe5\x88\x86\xe7\xb1\xbb\xe5\x88\x97\xe8\xa1\xa8\xe8\x8e\xb7\xe5\x8f\x96\n     * \xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x94\xe5\x9b\x9e\xef\xbc\x9a1. \xe4\xb8\x8b\xe4\xb8\x80\xe9\xa1\xb5\xe5\x9c\xb0\xe5\x9d\x80 2. \xe5\xbd\x93\xe5\x89\x8d\xe9\xa1\xb5\xe6\x95\xb0 3. \xe6\x80\xbb\xe9\xa1\xb5\xe6\x95\xb0 4. \xe4\xb9\xa6\xe7\xb1\x8dlist\n     */\n    @Test\n    fun categoryList() {\n        val url = "http://m.ting56.com/book/1.html"\n        var currentPage = 1\n        var totalPage = 1\n\n        val list = ArrayList<Book>()\n        val doc = Jsoup.connect(url).userAgent(userAgent).get()\n        doc.getElementById("page_num1")?.text()?.split("/")?.let {\n            currentPage = it[0].toInt()\n            totalPage = it[1].toInt()\n        }\n        val nextUrl = doc.getElementById("page_next1")?.attr("abs:href") ?: ""\n        val elementList = doc.getElementsByClass("list-ov-tw")\n        elementList.forEach { item ->\n            var coverUrl = item.selectFirst(".list-ov-t a img").attr("original")\n            if (coverUrl.startsWith("/")) {//\xe6\x9c\x89\xe4\xba\x9b\xe7\xbd\x91\xe5\x9d\x80\xe5\xb7\xb2\xe6\x8b\xbc\xe6\x8e\xa5\xe5\xa5\xbd\xef\xbc\x8c\xe6\x9c\x89\xe4\xba\x9b\xe6\xb2\xa1\xe6\x9c\x89\xe6\x8b\xbc\xe6\x8e\xa5\n                //\xe8\xbf\x99\xe9\x87\x8c\xe7\x94\xa8\xe4\xb8\xbb\xe7\xab\x99\xe5\x8e\xbb\xe6\x8b\xbc\xe6\x8e\xa5\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe7\x94\xa8http://m.ting56.com/\xe6\x8b\xbc\xe6\x8e\xa5\xe6\x97\xb6\xe7\xbb\x8f\xe5\xb8\xb8\xe5\xb0\x81\xe9\x9d\xa2\xe6\x8a\xa5\xe9\x94\x99\n                coverUrl = "http://www.ting56.com$coverUrl"\n            }\n            val ov = item.selectFirst(".list-ov-w")\n            val bookUrl = ov.selectFirst(".bt a").attr("abs:href")\n            val title = ov.selectFirst(".bt a").text()\n            val (author, artist) = ov.select(".zz").let { element ->\n                Pair(element[0].text(), element[1].text())\n            }\n            val status = ""\n            val intro = ov.selectFirst(".nr").text()\n            list.add(\n                Book(\n                    coverUrl,\n                    bookUrl,\n                    title,\n                    author,\n                    artist\n                )\n            )\n        }\n        println(nextUrl)\n        println("$currentPage / $totalPage")\n        list.take(5).forEach { println(it) }\n        assert(list.isNotEmpty())\n    }\n}'