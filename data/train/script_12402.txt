b'\xef\xbb\xbfusing RonSijm.ButtFish.Devices;\n\nnamespace RonSijm.ButtFish.InputLoops;\n\npublic class FENBasedLoop : IInputLoop\n{\n    private readonly DeviceBroadcaster _deviceBroadcaster;\n    private readonly Options _options;\n\n    private IUCIEngine _iuciEngine;\n    private readonly (string Name, string Path) _enginePath;\n\n    public FENBasedLoop(DeviceBroadcaster deviceBroadcaster, Options options)\n    {\n        _options = options;\n        _deviceBroadcaster = deviceBroadcaster;\n\n        _enginePath = EngineSelector.SelectEngine(_options.Engines);\n\n        if (_enginePath.Name == null)\n        {\n            // Engine Selector has shown error already.\n            return;\n        }\n\n        _iuciEngine = new UCIEngine(_enginePath.Path);\n\n        Console.WriteLine($"Using engine: {_enginePath.Name}");\n    }\n\n\n    public async Task Start(IList<IDeviceAbstraction> devices)\n    {\n        do\n        {\n            try\n            {\n                Console.WriteLine("Set the current chess FEN Position - then press enter.", Color.Green);\n                var fenPosition = Console.ReadLine();\n\n                // If you just send a whitespace, the engine keeps waiting for the rest of the command\n                if (string.IsNullOrWhiteSpace(fenPosition))\n                {\n                    Console.WriteLine("You didn\'t have to press enter there...", Color.Orange);\n                    continue;\n                }\n\n                var success = FENToOutputFacade.PaintBoard(fenPosition);\n\n                if (success)\n                {\n                    _iuciEngine.StartNewGame();\n                    _iuciEngine.SetFenPosition(fenPosition);\n                    Console.WriteLine();\n\n                    Console.WriteLine();\n                    Console.WriteLine("Next Best Position:");\n\n                    var nextPosition = _iuciEngine.GetBestMove();\n\n                    if (nextPosition == null)\n                    {\n                        Console.WriteLine("Engine was not able to find a next best move", Color.Orange);\n                        continue;\n                    }\n\n                    if (_options.EndPositionOnly)\n                    {\n                        nextPosition = nextPosition.Substring(2, 2);\n                    }\n\n                    await _deviceBroadcaster.SendNextMoveToDevice(nextPosition, devices);\n                    Console.WriteLine();\n                }\n                else\n                {\n                    Console.WriteLine("That doesn\'t look right to me...", Color.Red);\n                    Console.Write("Try Again - ", Color.Green);\n                }\n            }\n            // Error that happens when the chess-engine gets fucked up somehow.\n            catch (MaxTriesException e)\n            {\n                Console.WriteLine("Error occurred.", Color.Red);\n                Console.WriteLine(e, Color.Red);\n\n                Console.WriteLine("Recycling chess engine...", Color.Green);\n                _iuciEngine = new UCIEngine(_enginePath.Path);\n\n                // We don\'t automatically set the old FEN code, otherwise if you added a broken\n                // FEN code, the engine gets in a broken loop\n                Console.WriteLine("Please try again", Color.Green);\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(); // Blank line because chess moves were not placed on a new line.\n                Console.WriteLine("Error occurred.", Color.Red);\n                Console.WriteLine(e, Color.Red);\n\n                if (!string.IsNullOrWhiteSpace(e.Source))\n                {\n                    Console.WriteLine($"Source:{e.Source}", Color.Red);\n                }\n\n                Console.WriteLine("Sometimes the program can recover, otherwise it\'s probably better to restart.");\n            }\n        } while (true);\n        // ReSharper disable once FunctionNeverReturns\n    }\n}'