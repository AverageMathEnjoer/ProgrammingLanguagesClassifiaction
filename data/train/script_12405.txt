b'package com.zzg.mybatis.generator.controller;\n\nimport com.zzg.mybatis.generator.model.UITableColumnVO;\nimport javafx.collections.ObservableList;\nimport javafx.fxml.FXML;\nimport javafx.scene.control.TableColumn;\nimport javafx.scene.control.TableView;\nimport javafx.scene.control.cell.CheckBoxTableCell;\nimport javafx.scene.control.cell.PropertyValueFactory;\nimport javafx.scene.control.cell.TextFieldTableCell;\nimport org.mybatis.generator.config.ColumnOverride;\nimport org.mybatis.generator.config.IgnoredColumn;\n\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.ResourceBundle;\n\n/**\n * Created by Owen on 6/20/16.\n */\npublic class SelectTableColumnController extends BaseFXController {\n\n    @FXML\n    private TableView<UITableColumnVO> columnListView;\n    @FXML\n    private TableColumn<UITableColumnVO, Boolean> checkedColumn;\n    @FXML\n    private TableColumn<UITableColumnVO, String> columnNameColumn;\n    @FXML\n    private TableColumn<UITableColumnVO, String> jdbcTypeColumn;\n    @FXML\n    private TableColumn<UITableColumnVO, String> javaTypeColumn;\n    @FXML\n    private TableColumn<UITableColumnVO, String> propertyNameColumn;\n    @FXML\n    private TableColumn<UITableColumnVO, String> typeHandlerColumn;\n\n    private MainUIController mainUIController;\n\n    private String tableName;\n\n    @Override\n    public void initialize(URL location, ResourceBundle resources) {\n        // cellvaluefactory\n        checkedColumn.setCellValueFactory(new PropertyValueFactory<>("checked"));\n        columnNameColumn.setCellValueFactory(new PropertyValueFactory<>("columnName"));\n        jdbcTypeColumn.setCellValueFactory(new PropertyValueFactory<>("jdbcType"));\n        propertyNameColumn.setCellValueFactory(new PropertyValueFactory<>("propertyName"));\n        typeHandlerColumn.setCellValueFactory(new PropertyValueFactory<>("typeHandler"));\n        // Cell Factory that customize how the cell should render\n        checkedColumn.setCellFactory(CheckBoxTableCell.forTableColumn(checkedColumn));\n        jdbcTypeColumn.setCellFactory(TextFieldTableCell.forTableColumn());\n        // handle commit event to save the user input data\n        jdbcTypeColumn.setOnEditCommit(event -> {\n            event.getTableView().getItems().get(event.getTablePosition().getRow()).setJdbcType(event.getNewValue());\n        });\n        javaTypeColumn.setCellFactory(TextFieldTableCell.forTableColumn());\n        // handle commit event to save the user input data\n        javaTypeColumn.setOnEditCommit(event -> {\n            event.getTableView().getItems().get(event.getTablePosition().getRow()).setJavaType(event.getNewValue());\n        });\n        propertyNameColumn.setCellFactory(TextFieldTableCell.forTableColumn());\n        propertyNameColumn.setOnEditCommit(event -> {\n            event.getTableView().getItems().get(event.getTablePosition().getRow()).setPropertyName(event.getNewValue());\n        });\n        typeHandlerColumn.setCellFactory(TextFieldTableCell.forTableColumn());\n        typeHandlerColumn.setOnEditCommit(event -> {\n            event.getTableView().getItems().get(event.getTablePosition().getRow()).setTypeHandle(event.getNewValue());\n        });\n    }\n\n    @FXML\n    public void ok() {\n        ObservableList<UITableColumnVO> items = columnListView.getItems();\n        if (items != null && items.size() > 0) {\n            List<IgnoredColumn> ignoredColumns = new ArrayList<>();\n            List<ColumnOverride> columnOverrides = new ArrayList<>();\n            items.stream().forEach(item -> {\n                if (!item.getChecked()) {\n                    IgnoredColumn ignoredColumn = new IgnoredColumn(item.getColumnName());\n                    ignoredColumns.add(ignoredColumn);\n                } else if (item.getTypeHandle() != null || item.getJavaType() != null || item.getPropertyName() != null) { // unchecked and have typeHandler value\n                    ColumnOverride columnOverride = new ColumnOverride(item.getColumnName());\n                    columnOverride.setTypeHandler(item.getTypeHandle());\n                    columnOverride.setJdbcType(item.getJdbcType());\n                    columnOverride.setJavaProperty(item.getPropertyName());\n                    columnOverride.setJavaType(item.getJavaType());\n                    columnOverrides.add(columnOverride);\n                }\n            });\n            mainUIController.setIgnoredColumns(ignoredColumns);\n            mainUIController.setColumnOverrides(columnOverrides);\n        }\n        getDialogStage().close();\n    }\n\n    @FXML\n    public void cancel() {\n        getDialogStage().close();\n    }\n\n    @FXML\n    public void configAction() {\n        TableColumnConfigsController controller = (TableColumnConfigsController) loadFXMLPage("\xe5\xae\x9a\xe5\x88\xb6\xe5\x88\x97\xe9\x85\x8d\xe7\xbd\xae", FXMLPage.TABLE_COLUMN_CONFIG,true);\n        controller.setColumnListView(this.columnListView);\n        controller.setTableName(this.tableName);\n        controller.showDialogStage();\n    }\n\n    public void setColumnList(ObservableList<UITableColumnVO> columns) {\n        columnListView.setItems(columns);\n    }\n\n    public void setMainUIController(MainUIController mainUIController) {\n        this.mainUIController = mainUIController;\n    }\n\n    public String getTableName() {\n        return tableName;\n    }\n\n    public void setTableName(String tableName) {\n        this.tableName = tableName;\n    }\n\n\n}\n'