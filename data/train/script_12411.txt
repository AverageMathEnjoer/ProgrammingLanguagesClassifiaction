b'/*\n    SPDX-FileCopyrightText: 2015-2019 Milian Wolff <mail@milianw.de>\n\n    SPDX-License-Identifier: LGPL-2.1-or-later\n*/\n\n#include "mainwindow.h"\n\n#include <ui_mainwindow.h>\n\n#include <cmath>\n\n#include <KConfigGroup>\n#include <KLocalizedString>\n#include <KShell>\n#include <KStandardAction>\n\n#include <QAction>\n#include <QClipboard>\n#include <QDebug>\n#include <QDesktopServices>\n#include <QFileDialog>\n#include <QMenu>\n#include <QShortcut>\n#include <QStatusBar>\n#include <QProcess>\n#include <QInputDialog>\n\n#include "analyze/suppressions.h"\n\n#include "callercalleemodel.h"\n#include "costdelegate.h"\n#include "costheaderview.h"\n#include "parser.h"\n#include "stacksmodel.h"\n#include "suppressionsmodel.h"\n#include "topproxy.h"\n#include "treemodel.h"\n#include "treeproxy.h"\n\n#include "gui_config.h"\n\n#if KChart_FOUND\n#include "chartmodel.h"\n#include "chartproxy.h"\n#include "chartwidget.h"\n#include "histogrammodel.h"\n#include "histogramwidget.h"\n#endif\n\nusing namespace std;\n\nnamespace {\nconst int MAINWINDOW_VERSION = 1;\n\nnamespace Config {\nnamespace Groups {\nconst char MainWindow[] = "MainWindow";\nconst char CodeNavigation[] = "CodeNavigation";\n}\nnamespace Entries {\nconst char State[] = "State";\nconst char CustomCommand[] = "CustomCommand";\nconst char IDE[] = "IDE";\n}\n}\n\nenum IDE\n{\n    KDevelop,\n    Kate,\n    KWrite,\n    GEdit,\n    GVim,\n    QtCreator,\n    LAST_IDE\n};\nstruct IdeSettings\n{\n    QString app;\n    QString args;\n    QString name;\n\n    bool isAppAvailable() const\n    {\n        return !QStandardPaths::findExecutable(app).isEmpty();\n    }\n};\n\nIdeSettings ideSettings(IDE ide)\n{\n    switch (ide) {\n    case KDevelop:\n        return {QStringLiteral("kdevelop"), QStringLiteral("%f:%l:%c"), MainWindow::tr("KDevelop")};\n    case Kate:\n        return {QStringLiteral("kate"), QStringLiteral("%f --line %l --column %c"), MainWindow::tr("Kate")};\n    case KWrite:\n        return {QStringLiteral("kwrite"), QStringLiteral("%f --line %l --column %c"), MainWindow::tr("KWrite")};\n    case GEdit:\n        return {QStringLiteral("gedit"), QStringLiteral("%f +%l:%c"), MainWindow::tr("gedit")};\n    case GVim:\n        return {QStringLiteral("gvim"), QStringLiteral("%f +%l"), MainWindow::tr("gvim")};\n    case QtCreator:\n        return {QStringLiteral("qtcreator"), QStringLiteral("-client %f:%l"), MainWindow::tr("Qt Creator")};\n    case LAST_IDE:\n        break;\n    };\n    Q_UNREACHABLE();\n};\n\nint firstAvailableIde()\n{\n    for (int i = 0; i < LAST_IDE; ++i) {\n        if (ideSettings(static_cast<IDE>(i)).isAppAvailable()) {\n            return i;\n        }\n    }\n    return -1;\n}\n\ntemplate <typename T>\nvoid setupContextMenu(QTreeView* view, T callback)\n{\n    view->setContextMenuPolicy(Qt::CustomContextMenu);\n    QObject::connect(view, &QTreeView::customContextMenuRequested, view, [view, callback](const QPoint& point) {\n        const auto index = view->indexAt(point);\n        if (!index.isValid()) {\n            return;\n        }\n\n        callback(index);\n    });\n}\n\ntemplate <typename T>\nvoid setupTreeContextMenu(QTreeView* view, T callback)\n{\n    setupContextMenu(view, [callback](const QModelIndex& index) {\n        QMenu contextMenu;\n        auto* viewCallerCallee = contextMenu.addAction(i18n("View Caller/Callee"));\n        auto* action = contextMenu.exec(QCursor::pos());\n        if (action == viewCallerCallee) {\n            const auto symbol = index.data(TreeModel::SymbolRole).value<Symbol>();\n\n            if (symbol.isValid()) {\n                callback(symbol);\n            }\n        }\n    });\n}\n\nvoid addLocationContextMenu(QTreeView* treeView, MainWindow* window)\n{\n    treeView->setContextMenuPolicy(Qt::CustomContextMenu);\n    QObject::connect(treeView, &QTreeView::customContextMenuRequested, treeView, [treeView, window](const QPoint& pos) {\n        auto index = treeView->indexAt(pos);\n        if (!index.isValid()) {\n            return;\n        }\n        const auto resultData = index.data(SourceMapModel::ResultDataRole).value<const ResultData*>();\n        Q_ASSERT(resultData);\n        const auto location = index.data(SourceMapModel::LocationRole).value<FileLine>();\n        const auto file = resultData->string(location.fileId);\n        if (!QFile::exists(file)) {\n            return;\n        }\n        auto menu = new QMenu(treeView);\n        auto openFile =\n            new QAction(QIcon::fromTheme(QStringLiteral("document-open")), i18n("Open file in editor"), menu);\n        QObject::connect(openFile, &QAction::triggered, openFile,\n                         [file, line = location.line, window] { window->navigateToCode(file, line); });\n        menu->addAction(openFile);\n        menu->popup(treeView->mapToGlobal(pos));\n    });\n    QObject::connect(treeView, &QTreeView::activated, window, [window](const QModelIndex& index) {\n        const auto resultData = index.data(SourceMapModel::ResultDataRole).value<const ResultData*>();\n        Q_ASSERT(resultData);\n        const auto location = index.data(SourceMapModel::LocationRole).value<FileLine>();\n        const auto file = resultData->string(location.fileId);\n        if (QFile::exists(file))\n            window->navigateToCode(file, location.line);\n    });\n}\n\nQt::SortOrder defaultSortOrder(QAbstractItemModel* model, int column)\n{\n    auto initialSortOrder = model->headerData(column, Qt::Horizontal, Qt::InitialSortOrderRole);\n    if (initialSortOrder.canConvert<Qt::SortOrder>())\n        return initialSortOrder.value<Qt::SortOrder>();\n    return Qt::AscendingOrder;\n}\n\nvoid sortByColumn(QTreeView* view, int column)\n{\n    view->sortByColumn(column, defaultSortOrder(view->model(), column));\n}\n\ntemplate <typename T>\nvoid setupTopView(TreeModel* source, QTreeView* view, TopProxy::Type type, T callback)\n{\n    auto proxy = new TopProxy(type, source);\n    proxy->setSourceModel(source);\n    proxy->setSortRole(TreeModel::SortRole);\n    view->setModel(proxy);\n    sortByColumn(view, 1);\n    view->header()->setStretchLastSection(true);\n    setupTreeContextMenu(view, callback);\n}\n\n#if KChart_FOUND\nChartWidget* addChartTab(QTabWidget* tabWidget, const QString& title, ChartModel::Type type, const Parser* parser,\n                         void (Parser::*dataReady)(const ChartData&), MainWindow* window)\n{\n    auto tab = new ChartWidget(tabWidget->parentWidget());\n    QObject::connect(parser, &Parser::summaryAvailable, tab, &ChartWidget::setSummaryData);\n    tabWidget->addTab(tab, title);\n    tabWidget->setTabEnabled(tabWidget->indexOf(tab), false);\n    auto model = new ChartModel(type, tab);\n    tab->setModel(model);\n    QObject::connect(parser, dataReady, tab, [=](const ChartData& data) {\n        model->resetData(data);\n        tabWidget->setTabEnabled(tabWidget->indexOf(tab), true);\n    });\n    QObject::connect(window, &MainWindow::clearData, model, &ChartModel::clearData);\n    QObject::connect(window, &MainWindow::clearData, tab, [tab]() { tab->setSelection({}); });\n    QObject::connect(tab, &ChartWidget::filterRequested, window, &MainWindow::reparse);\n    return tab;\n}\n#endif\n\ntemplate <typename T>\nvoid setupTreeModel(TreeModel* model, QTreeView* view, CostDelegate* costDelegate, QLineEdit* filterFunction,\n                    QLineEdit* filterModule, T callback)\n{\n    auto proxy = new TreeProxy(TreeModel::SymbolRole, TreeModel::ResultDataRole, model);\n    proxy->setSourceModel(model);\n    proxy->setSortRole(TreeModel::SortRole);\n\n    view->setModel(proxy);\n    sortByColumn(view, TreeModel::PeakColumn);\n    view->setItemDelegateForColumn(TreeModel::PeakColumn, costDelegate);\n    view->setItemDelegateForColumn(TreeModel::LeakedColumn, costDelegate);\n    view->setItemDelegateForColumn(TreeModel::AllocationsColumn, costDelegate);\n    view->setItemDelegateForColumn(TreeModel::TemporaryColumn, costDelegate);\n    view->setHeader(new CostHeaderView(view));\n\n    QObject::connect(filterFunction, &QLineEdit::textChanged, proxy, &TreeProxy::setFunctionFilter);\n    QObject::connect(filterModule, &QLineEdit::textChanged, proxy, &TreeProxy::setModuleFilter);\n    setupTreeContextMenu(view, callback);\n}\n\nvoid setupCallerCallee(CallerCalleeModel* model, QTreeView* view, QLineEdit* filterFunction, QLineEdit* filterModule)\n{\n    auto costDelegate = new CostDelegate(CallerCalleeModel::SortRole, CallerCalleeModel::TotalCostRole, view);\n    auto callerCalleeProxy = new TreeProxy(CallerCalleeModel::SymbolRole, CallerCalleeModel::ResultDataRole, model);\n    callerCalleeProxy->setSourceModel(model);\n    callerCalleeProxy->setSortRole(CallerCalleeModel::SortRole);\n    view->setModel(callerCalleeProxy);\n    sortByColumn(view, CallerCalleeModel::InclusivePeakColumn);\n    view->setItemDelegateForColumn(CallerCalleeModel::SelfPeakColumn, costDelegate);\n    view->setItemDelegateForColumn(CallerCalleeModel::SelfLeakedColumn, costDelegate);\n    view->setItemDelegateForColumn(CallerCalleeModel::SelfAllocationsColumn, costDelegate);\n    view->setItemDelegateForColumn(CallerCalleeModel::SelfTemporaryColumn, costDelegate);\n    view->setItemDelegateForColumn(CallerCalleeModel::InclusivePeakColumn, costDelegate);\n    view->setItemDelegateForColumn(CallerCalleeModel::InclusiveLeakedColumn, costDelegate);\n    view->setItemDelegateForColumn(CallerCalleeModel::InclusiveAllocationsColumn, costDelegate);\n    view->setItemDelegateForColumn(CallerCalleeModel::InclusiveTemporaryColumn, costDelegate);\n    view->setHeader(new CostHeaderView(view));\n    QObject::connect(filterFunction, &QLineEdit::textChanged, callerCalleeProxy, &TreeProxy::setFunctionFilter);\n    QObject::connect(filterModule, &QLineEdit::textChanged, callerCalleeProxy, &TreeProxy::setModuleFilter);\n}\n\ntemplate <typename Model>\nModel* setupModelAndProxyForView(QTreeView* view)\n{\n    auto model = new Model(view);\n    auto proxy = new QSortFilterProxyModel(model);\n    proxy->setSourceModel(model);\n    proxy->setSortRole(Model::SortRole);\n    view->setModel(proxy);\n    sortByColumn(view, Model::InitialSortColumn);\n    auto costDelegate = new CostDelegate(Model::SortRole, Model::TotalCostRole, view);\n    for (int i = 1; i < Model::NUM_COLUMNS; ++i) {\n        view->setItemDelegateForColumn(i, costDelegate);\n    }\n\n    view->setHeader(new CostHeaderView(view));\n\n    return model;\n}\n\ntemplate <typename Model, typename Handler>\nvoid connectCallerOrCalleeModel(QTreeView* view, CallerCalleeModel* callerCalleeCostModel, Handler handler)\n{\n    QObject::connect(view, &QTreeView::activated, view, [callerCalleeCostModel, handler](const QModelIndex& index) {\n        const auto symbol = index.data(Model::SymbolRole).template value<Symbol>();\n        auto sourceIndex = callerCalleeCostModel->indexForKey(symbol);\n        handler(sourceIndex);\n    });\n}\n\nQString insertWordWrapMarkers(QString text)\n{\n    // insert zero-width spaces after every 50 word characters to enable word wrap in the middle of words\n    static const QRegularExpression pattern(QStringLiteral("(\\\\w{50})"));\n    return text.replace(pattern, QStringLiteral("\\\\1\\u200B"));\n}\n}\n\nMainWindow::MainWindow(QWidget* parent)\n    : QMainWindow(parent)\n    , m_ui(new Ui::MainWindow)\n    , m_parser(new Parser(this))\n    , m_config(KSharedConfig::openConfig(QStringLiteral("heaptrack_gui")))\n{\n    m_ui->setupUi(this);\n\n    auto group = m_config->group(Config::Groups::MainWindow);\n    auto state = group.readEntry(Config::Entries::State, QByteArray());\n    restoreState(state, MAINWINDOW_VERSION);\n\n    m_ui->pages->setCurrentWidget(m_ui->openPage);\n    // TODO: proper progress report\n    m_ui->loadingProgress->setMinimum(0);\n    m_ui->loadingProgress->setMaximum(1000); // range is set as 0 to 1000 for fractional % bar display\n    m_ui->loadingProgress->setValue(0);\n\n    auto bottomUpModel = new TreeModel(this);\n    auto topDownModel = new TreeModel(this);\n    auto callerCalleeModel = new CallerCalleeModel(this);\n    connect(this, &MainWindow::clearData, bottomUpModel, &TreeModel::clearData);\n    connect(this, &MainWindow::clearData, topDownModel, &TreeModel::clearData);\n    connect(this, &MainWindow::clearData, callerCalleeModel, &CallerCalleeModel::clearData);\n    connect(this, &MainWindow::clearData, m_ui->flameGraphTab, &FlameGraph::clearData);\n\n    m_ui->tabWidget->setTabEnabled(m_ui->tabWidget->indexOf(m_ui->callerCalleeTab), false);\n    m_ui->tabWidget->setTabEnabled(m_ui->tabWidget->indexOf(m_ui->topDownTab), false);\n    m_ui->tabWidget->setTabEnabled(m_ui->tabWidget->indexOf(m_ui->flameGraphTab), false);\n\n    auto* suppressionsModel = new SuppressionsModel(this);\n    {\n        auto* proxy = new QSortFilterProxyModel(this);\n        proxy->setSourceModel(suppressionsModel);\n        m_ui->suppressionsView->setModel(proxy);\n        auto* delegate = new CostDelegate(SuppressionsModel::SortRole, SuppressionsModel::TotalCostRole, this);\n        m_ui->suppressionsView->setItemDelegateForColumn(static_cast<int>(SuppressionsModel::Columns::Leaked),\n                                                         delegate);\n        m_ui->suppressionsView->setItemDelegateForColumn(static_cast<int>(SuppressionsModel::Columns::Matches),\n                                                         delegate);\n\n        auto margins = m_ui->suppressionBox->contentsMargins();\n        margins.setLeft(0);\n        m_ui->suppressionBox->setContentsMargins(margins);\n    }\n\n    connect(m_parser, &Parser::bottomUpDataAvailable, this, [=](const TreeData& data) {\n        bottomUpModel->resetData(data);\n        if (!m_diffMode) {\n            m_ui->flameGraphTab->setBottomUpData(data);\n        }\n        m_ui->progressLabel->setAlignment(Qt::AlignVCenter | Qt::AlignRight);\n        statusBar()->addWidget(m_ui->progressLabel, 1);\n        statusBar()->addWidget(m_ui->loadingProgress);\n        m_ui->pages->setCurrentWidget(m_ui->resultsPage);\n        m_ui->tabWidget->setTabEnabled(m_ui->tabWidget->indexOf(m_ui->bottomUpTab), true);\n    });\n    connect(m_parser, &Parser::callerCalleeDataAvailable, this, [=](const CallerCalleeResults& data) {\n        callerCalleeModel->setResults(data);\n        m_ui->tabWidget->setTabEnabled(m_ui->tabWidget->indexOf(m_ui->callerCalleeTab), true);\n    });\n    connect(m_parser, &Parser::topDownDataAvailable, this, [=](const TreeData& data) {\n        topDownModel->resetData(data);\n        m_ui->tabWidget->setTabEnabled(m_ui->tabWidget->indexOf(m_ui->topDownTab), true);\n        if (!m_diffMode) {\n            m_ui->flameGraphTab->setTopDownData(data);\n        }\n        m_ui->tabWidget->setTabEnabled(m_ui->tabWidget->indexOf(m_ui->flameGraphTab), !m_diffMode);\n    });\n    connect(m_parser, &Parser::summaryAvailable, this, [=](const SummaryData& data) {\n        bottomUpModel->setSummary(data);\n        topDownModel->setSummary(data);\n        suppressionsModel->setSuppressions(data);\n        m_ui->suppressionBox->setVisible(suppressionsModel->rowCount() > 0);\n        const auto isFiltered = data.filterParameters.isFilteredByTime(data.totalTime);\n        QString textLeft;\n        QString textCenter;\n        QString textRight;\n        {\n            QTextStream stream(&textLeft);\n            const auto debuggee = insertWordWrapMarkers(data.debuggee);\n            stream << "<qt><dl>"\n                   << (data.fromAttached ? i18n("<dt><b>debuggee</b>:</dt><dd "\n                                                "style=\'font-family:monospace;\'>%1 <i>(attached)</i></dd>",\n                                                debuggee)\n                                         : i18n("<dt><b>debuggee</b>:</dt><dd "\n                                                "style=\'font-family:monospace;\'>%1</dd>",\n                                                debuggee));\n            if (isFiltered) {\n                stream << i18n("<dt><b>total runtime</b>:</dt><dd>%1, filtered from %2 to %3 (%4)</dd>",\n                               Util::formatTime(data.totalTime), Util::formatTime(data.filterParameters.minTime),\n                               Util::formatTime(data.filterParameters.maxTime),\n                               Util::formatTime(data.filterParameters.maxTime - data.filterParameters.minTime));\n            } else {\n                stream << i18n("<dt><b>total runtime</b>:</dt><dd>%1</dd>", Util::formatTime(data.totalTime));\n            }\n            stream << i18n("<dt><b>total system memory</b>:</dt><dd>%1</dd>", Util::formatBytes(data.totalSystemMemory))\n                   << "</dl></qt>";\n        }\n        {\n            QTextStream stream(&textCenter);\n            const double totalTimeS = 0.001 * (data.filterParameters.maxTime - data.filterParameters.minTime);\n            stream << "<qt><dl>"\n                   << i18n("<dt><b>calls to allocation functions</b>:</dt><dd>%1 "\n                           "(%2/s)</dd>",\n                           data.cost.allocations, qint64(data.cost.allocations / totalTimeS))\n                   << i18n("<dt><b>temporary allocations</b>:</dt><dd>%1 (%2%, "\n                           "%3/s)</dd>",\n                           data.cost.temporary,\n                           std::round(float(data.cost.temporary) * 100.f * 100.f / data.cost.allocations) / 100.f,\n                           qint64(data.cost.temporary / totalTimeS))\n                   << "</dl></qt>";\n        }\n        {\n            QTextStream stream(&textRight);\n            stream << "<qt><dl>"\n                   << i18n("<dt><b>peak heap memory consumption</b>:</dt><dd>%1 "\n                           "after %2</dd>",\n                           Util::formatBytes(data.cost.peak), Util::formatTime(data.peakTime))\n                   << i18n("<dt><b>peak RSS</b> (including heaptrack "\n                           "overhead):</dt><dd>%1</dd>",\n                           Util::formatBytes(data.peakRSS));\n            if (isFiltered) {\n                stream << i18n("<dt><b>memory consumption delta</b>:</dt><dd>%1</dd>",\n                               Util::formatBytes(data.cost.leaked));\n            } else {\n                if (data.totalLeakedSuppressed) {\n                    stream << i18n("<dt><b>total memory leaked</b>:</dt><dd>%1 (%2 suppressed)</dd>",\n                                   Util::formatBytes(data.cost.leaked), Util::formatBytes(data.totalLeakedSuppressed));\n                } else {\n                    stream << i18n("<dt><b>total memory leaked</b>:</dt><dd>%1</dd>",\n                                   Util::formatBytes(data.cost.leaked));\n                }\n            }\n            stream << "</dl></qt>";\n        }\n\n        m_ui->summaryLeft->setText(textLeft);\n        m_ui->summaryCenter->setText(textCenter);\n        m_ui->summaryRight->setText(textRight);\n        m_ui->tabWidget->setTabEnabled(m_ui->tabWidget->indexOf(m_ui->summaryTab), true);\n    });\n    connect(m_parser, &Parser::progressMessageAvailable, m_ui->progressLabel, &QLabel::setText);\n    connect(m_parser, &Parser::progress, m_ui->loadingProgress, &QProgressBar::setValue);\n    auto removeProgress = [this] {\n        auto layout = qobject_cast<QVBoxLayout*>(m_ui->loadingPage->layout());\n        Q_ASSERT(layout);\n        const auto idx = layout->indexOf(m_ui->loadingLabel) + 1;\n        layout->insertWidget(idx, m_ui->loadingProgress);\n        layout->insertWidget(idx + 1, m_ui->progressLabel);\n        m_ui->progressLabel->setAlignment(Qt::AlignVCenter | Qt::AlignHCenter);\n        m_closeAction->setEnabled(true);\n        m_openAction->setEnabled(true);\n    };\n    connect(m_parser, &Parser::finished, this, removeProgress);\n    connect(m_parser, &Parser::failedToOpen, this, [this, removeProgress](const QString& failedFile) {\n        removeProgress();\n        m_ui->pages->setCurrentWidget(m_ui->openPage);\n        showError(i18n("Failed to parse file %1.", failedFile));\n    });\n    m_ui->messages->hide();\n\n#if KChart_FOUND\n    auto consumedTab = addChartTab(m_ui->tabWidget, i18n("Consumed"), ChartModel::Consumed, m_parser,\n                                   &Parser::consumedChartDataAvailable, this);\n    auto allocationsTab = addChartTab(m_ui->tabWidget, i18n("Allocations"), ChartModel::Allocations, m_parser,\n                                      &Parser::allocationsChartDataAvailable, this);\n    auto temporaryAllocationsTab = addChartTab(m_ui->tabWidget, i18n("Temporary Allocations"), ChartModel::Temporary,\n                                               m_parser, &Parser::temporaryChartDataAvailable, this);\n    auto syncSelection = [=](const ChartWidget::Range& selection) {\n        consumedTab->setSelection(selection);\n        allocationsTab->setSelection(selection);\n        temporaryAllocationsTab->setSelection(selection);\n    };\n    connect(consumedTab, &ChartWidget::selectionChanged, syncSelection);\n    connect(allocationsTab, &ChartWidget::selectionChanged, syncSelection);\n    connect(temporaryAllocationsTab, &ChartWidget::selectionChanged, syncSelection);\n\n    auto sizesTab = new HistogramWidget(this);\n    m_ui->tabWidget->addTab(sizesTab, i18n("Sizes"));\n    m_ui->tabWidget->setTabEnabled(m_ui->tabWidget->indexOf(sizesTab), false);\n    auto sizeHistogramModel = new HistogramModel(this);\n    sizesTab->setModel(sizeHistogramModel);\n    connect(this, &MainWindow::clearData, sizeHistogramModel, &HistogramModel::clearData);\n\n    connect(m_parser, &Parser::sizeHistogramDataAvailable, this, [=](const HistogramData& data) {\n        sizeHistogramModel->resetData(data);\n        m_ui->tabWidget->setTabEnabled(m_ui->tabWidget->indexOf(sizesTab), true);\n    });\n#endif\n\n    auto calleesModel = setupModelAndProxyForView<CalleeModel>(m_ui->calleeView);\n    auto callersModel = setupModelAndProxyForView<CallerModel>(m_ui->callerView);\n    auto sourceMapModel = setupModelAndProxyForView<SourceMapModel>(m_ui->locationView);\n\n    auto selectCallerCaleeeIndex = [callerCalleeModel, calleesModel, callersModel, sourceMapModel,\n                                    this](const QModelIndex& index) {\n        const auto resultData = callerCalleeModel->results().resultData;\n        const auto callees = index.data(CallerCalleeModel::CalleesRole).value<CalleeMap>();\n        calleesModel->setResults(callees, resultData);\n        const auto callers = index.data(CallerCalleeModel::CallersRole).value<CallerMap>();\n        callersModel->setResults(callers, resultData);\n        const auto sourceMap = index.data(CallerCalleeModel::SourceMapRole).value<LocationCostMap>();\n        sourceMapModel->setResults(sourceMap, resultData);\n        if (index.model() != m_ui->callerCalleeResults->model()) {\n            m_ui->callerCalleeResults->setCurrentIndex(\n                qobject_cast<QSortFilterProxyModel*>(m_ui->callerCalleeResults->model())->mapFromSource(index));\n        }\n    };\n    auto showSymbolInCallerCallee = [this, callerCalleeModel, selectCallerCaleeeIndex](const Symbol& symbol) {\n        m_ui->tabWidget->setCurrentWidget(m_ui->callerCalleeTab);\n        selectCallerCaleeeIndex(callerCalleeModel->indexForSymbol(symbol));\n    };\n    connect(m_ui->flameGraphTab, &FlameGraph::callerCalleeViewRequested, this, showSymbolInCallerCallee);\n\n    auto costDelegate = new CostDelegate(TreeModel::SortRole, TreeModel::MaxCostRole, this);\n    setupTreeModel(bottomUpModel, m_ui->bottomUpResults, costDelegate, m_ui->bottomUpFilterFunction,\n                   m_ui->bottomUpFilterModule, showSymbolInCallerCallee);\n\n    setupTreeModel(topDownModel, m_ui->topDownResults, costDelegate, m_ui->topDownFilterFunction,\n                   m_ui->topDownFilterModule, showSymbolInCallerCallee);\n\n    setupCallerCallee(callerCalleeModel, m_ui->callerCalleeResults, m_ui->callerCalleeFilterFunction,\n                      m_ui->callerCalleeFilterModule);\n\n    connectCallerOrCalleeModel<CalleeModel>(m_ui->calleeView, callerCalleeModel, selectCallerCaleeeIndex);\n    connectCallerOrCalleeModel<CallerModel>(m_ui->callerView, callerCalleeModel, selectCallerCaleeeIndex);\n    addLocationContextMenu(m_ui->locationView, this);\n\n    connect(m_ui->callerCalleeResults->selectionModel(), &QItemSelectionModel::currentRowChanged, this,\n            [selectCallerCaleeeIndex](const QModelIndex& current, const QModelIndex&) {\n                if (current.isValid()) {\n                    selectCallerCaleeeIndex(current);\n                }\n            });\n\n    auto validateInputFile = [this](const QString& path, bool allowEmpty) -> bool {\n        if (path.isEmpty()) {\n            return allowEmpty;\n        }\n\n        const auto file = QFileInfo(path);\n        if (!file.exists()) {\n            showError(i18n("Input data %1 does not exist.", path));\n        } else if (!file.isFile()) {\n            showError(i18n("Input data %1 is not a file.", path));\n        } else if (!file.isReadable()) {\n            showError(i18n("Input data %1 is not readable.", path));\n        } else {\n            return true;\n        }\n        return false;\n    };\n\n    auto validateInput = [this, validateInputFile]() {\n        m_ui->messages->hide();\n        m_ui->buttonBox->setEnabled(validateInputFile(m_ui->openFile->url().toLocalFile(), false)\n                                    && validateInputFile(m_ui->compareTo->url().toLocalFile(), true)\n                                    && validateInputFile(m_ui->suppressions->url().toLocalFile(), true));\n    };\n\n    connect(m_ui->openFile, &KUrlRequester::textChanged, this, validateInput);\n    connect(m_ui->compareTo, &KUrlRequester::textChanged, this, validateInput);\n    connect(m_ui->suppressions, &KUrlRequester::textChanged, this, validateInput);\n    connect(m_ui->buttonBox, &QDialogButtonBox::accepted, this, [this]() {\n        const auto path = m_ui->openFile->url().toLocalFile();\n        Q_ASSERT(!path.isEmpty());\n        const auto base = m_ui->compareTo->url().toLocalFile();\n\n        bool parsedOk = false;\n        m_lastFilterParameters.suppressions =\n            parseSuppressions(m_ui->suppressions->url().toLocalFile().toStdString(), &parsedOk);\n        if (parsedOk) {\n            loadFile(path, base);\n        } else {\n            showError(i18n("Failed to parse suppression file."));\n        }\n    });\n\n    setupStacks();\n\n    setupTopView(bottomUpModel, m_ui->topPeak, TopProxy::Peak, showSymbolInCallerCallee);\n    m_ui->topPeak->setItemDelegate(costDelegate);\n    setupTopView(bottomUpModel, m_ui->topLeaked, TopProxy::Leaked, showSymbolInCallerCallee);\n    m_ui->topLeaked->setItemDelegate(costDelegate);\n    setupTopView(bottomUpModel, m_ui->topAllocations, TopProxy::Allocations, showSymbolInCallerCallee);\n    m_ui->topAllocations->setItemDelegate(costDelegate);\n    setupTopView(bottomUpModel, m_ui->topTemporary, TopProxy::Temporary, showSymbolInCallerCallee);\n    m_ui->topTemporary->setItemDelegate(costDelegate);\n\n    setWindowTitle(i18n("Heaptrack"));\n    // closing the current file shows the stack page to open a new one\n    m_openAction = KStandardAction::open(this, SLOT(closeFile()), this);\n    m_openAction->setEnabled(false);\n    m_ui->menu_File->addAction(m_openAction);\n    m_openNewAction = KStandardAction::openNew(this, SLOT(openNewFile()), this);\n    m_ui->menu_File->addAction(m_openNewAction);\n    m_closeAction = KStandardAction::close(this, SLOT(close()), this);\n    m_ui->menu_File->addAction(m_closeAction);\n    m_quitAction = KStandardAction::quit(qApp, SLOT(quit()), this);\n    m_ui->menu_File->addAction(m_quitAction);\n    QShortcut* shortcut = new QShortcut(QKeySequence(QKeySequence::Copy), m_ui->stacksTree);\n    connect(shortcut, &QShortcut::activated, this, [this]() {\n        QTreeView* view = m_ui->stacksTree;\n        if (view->selectionModel()->hasSelection()) {\n            QString text;\n            const auto range = view->selectionModel()->selection().first();\n            for (auto i = range.top(); i <= range.bottom(); ++i) {\n                QStringList rowContents;\n                for (auto j = range.left(); j <= range.right(); ++j)\n                    rowContents << view->model()->index(i, j).data().toString();\n                text += rowContents.join(QLatin1Char(\'\\t\'));\n                text += QLatin1Char(\'\\n\');\n            }\n            QApplication::clipboard()->setText(text);\n        }\n    });\n\n    m_disableEmbeddedSuppressions = m_ui->menu_Settings->addAction(i18n("Disable Embedded Suppressions"));\n    m_disableEmbeddedSuppressions->setToolTip(\n        i18n("Ignore suppression definitions that are embedded into the heaptrack data file. By default, heaptrack "\n             "will copy the suppressions optionally defined via a `const char *__lsan_default_suppressions()` symbol "\n             "in the debuggee application.  These are then always applied when analyzing the data, unless this feature "\n             "is explicitly disabled using this command line option."));\n    m_disableEmbeddedSuppressions->setCheckable(true);\n    connect(m_disableEmbeddedSuppressions, &QAction::toggled, this, [this]() {\n        m_lastFilterParameters.disableEmbeddedSuppressions = m_disableEmbeddedSuppressions->isChecked();\n        reparse(m_lastFilterParameters.minTime, m_lastFilterParameters.maxTime);\n    });\n\n    m_disableBuiltinSuppressions = m_ui->menu_Settings->addAction(i18n("Disable Builtin Suppressions"));\n    m_disableBuiltinSuppressions->setToolTip(i18n(\n        "Ignore suppression definitions that are built into heaptrack. By default, heaptrack will suppress certain "\n        "known leaks from common system libraries."));\n    m_disableBuiltinSuppressions->setCheckable(true);\n    connect(m_disableBuiltinSuppressions, &QAction::toggled, this, [this]() {\n        m_lastFilterParameters.disableBuiltinSuppressions = m_disableBuiltinSuppressions->isChecked();\n        reparse(m_lastFilterParameters.minTime, m_lastFilterParameters.maxTime);\n    });\n\n    setupCodeNavigationMenu();\n\n    m_ui->actionResetFilter->setEnabled(false);\n    connect(m_ui->actionResetFilter, &QAction::triggered, this,\n            [this]() { reparse(0, std::numeric_limits<int64_t>::max()); });\n    QObject::connect(m_parser, &Parser::finished, this,\n                     [this]() { m_ui->actionResetFilter->setEnabled(m_parser->isFiltered()); });\n}\n\nMainWindow::~MainWindow()\n{\n    auto state = saveState(MAINWINDOW_VERSION);\n    auto group = m_config->group(Config::Groups::MainWindow);\n    group.writeEntry(Config::Entries::State, state);\n}\n\nvoid MainWindow::loadFile(const QString& file, const QString& diffBase)\n{\n    // TODO: support canceling of ongoing parse jobs\n    m_closeAction->setEnabled(false);\n    m_ui->loadingLabel->setText(i18n("Loading file %1, please wait...", file));\n    if (diffBase.isEmpty()) {\n        setWindowTitle(i18nc("%1: file name that is open", "Heaptrack - %1", QFileInfo(file).fileName()));\n        m_diffMode = false;\n    } else {\n        setWindowTitle(i18nc("%1, %2: file names that are open", "Heaptrack - %1 compared to %2",\n                             QFileInfo(file).fileName(), QFileInfo(diffBase).fileName()));\n        m_diffMode = true;\n    }\n    m_ui->pages->setCurrentWidget(m_ui->loadingPage);\n    m_parser->parse(file, diffBase, m_lastFilterParameters);\n}\n\nvoid MainWindow::reparse(int64_t minTime, int64_t maxTime)\n{\n    if (m_ui->pages->currentWidget() != m_ui->resultsPage) {\n        return;\n    }\n\n    m_closeAction->setEnabled(false);\n    m_ui->flameGraphTab->clearData();\n    m_ui->loadingLabel->setText(i18n("Reparsing file, please wait..."));\n    m_ui->pages->setCurrentWidget(m_ui->loadingPage);\n    m_lastFilterParameters.minTime = minTime;\n    m_lastFilterParameters.maxTime = maxTime;\n    m_parser->reparse(m_lastFilterParameters);\n}\n\nvoid MainWindow::openNewFile()\n{\n    auto window = new MainWindow;\n    window->setAttribute(Qt::WA_DeleteOnClose, true);\n    window->show();\n    window->setDisableEmbeddedSuppressions(m_lastFilterParameters.disableEmbeddedSuppressions);\n    window->setSuppressions(m_lastFilterParameters.suppressions);\n}\n\nvoid MainWindow::closeFile()\n{\n    m_ui->pages->setCurrentWidget(m_ui->openPage);\n\n    m_ui->tabWidget->setCurrentIndex(m_ui->tabWidget->indexOf(m_ui->summaryTab));\n    for (int i = 0, c = m_ui->tabWidget->count(); i < c; ++i) {\n        m_ui->tabWidget->setTabEnabled(i, false);\n    }\n\n    m_openAction->setEnabled(false);\n    emit clearData();\n}\n\nvoid MainWindow::showError(const QString& message)\n{\n    m_ui->messages->setText(message);\n    m_ui->messages->show();\n}\n\nvoid MainWindow::setupStacks()\n{\n    auto stacksModel = new StacksModel(this);\n    m_ui->stacksTree->setModel(stacksModel);\n    m_ui->stacksTree->setRootIsDecorated(false);\n\n    auto updateStackSpinner = [this](int stacks) {\n        m_ui->stackSpinner->setMinimum(min(stacks, 1));\n        m_ui->stackSpinner->setSuffix(i18n(" / %1", stacks));\n        m_ui->stackSpinner->setMaximum(stacks);\n    };\n    updateStackSpinner(0);\n    connect(stacksModel, &StacksModel::stacksFound, this, updateStackSpinner);\n    connect(m_ui->stackSpinner, static_cast<void (QSpinBox::*)(int)>(&QSpinBox::valueChanged), stacksModel,\n            &StacksModel::setStackIndex);\n\n    auto fillFromIndex = [stacksModel](const QModelIndex& current) {\n        if (!current.isValid()) {\n            stacksModel->clear();\n        } else {\n            auto proxy = qobject_cast<const TreeProxy*>(current.model());\n            Q_ASSERT(proxy);\n            auto leaf = proxy->mapToSource(current);\n            stacksModel->fillFromIndex(leaf);\n        }\n    };\n    connect(m_ui->bottomUpResults->selectionModel(), &QItemSelectionModel::currentChanged, this, fillFromIndex);\n    connect(m_ui->topDownResults->selectionModel(), &QItemSelectionModel::currentChanged, this, fillFromIndex);\n\n    auto tabChanged = [this, fillFromIndex](int tabIndex) {\n        const auto widget = m_ui->tabWidget->widget(tabIndex);\n        const bool showDocks = (widget == m_ui->topDownTab || widget == m_ui->bottomUpTab);\n        m_ui->stacksDock->setVisible(showDocks);\n        if (showDocks) {\n            auto tree = (widget == m_ui->topDownTab) ? m_ui->topDownResults : m_ui->bottomUpResults;\n            fillFromIndex(tree->selectionModel()->currentIndex());\n        }\n    };\n    connect(m_ui->tabWidget, &QTabWidget::currentChanged, this, tabChanged);\n    connect(m_parser, &Parser::bottomUpDataAvailable, this, [tabChanged]() { tabChanged(0); });\n\n    m_ui->stacksDock->setVisible(false);\n}\n\n\nvoid MainWindow::setupCodeNavigationMenu()\n{\n    // Code Navigation\n    QAction* configAction =\n        new QAction(QIcon::fromTheme(QStringLiteral("applications-development")), i18n("Code Navigation"), this);\n    auto menu = new QMenu(this);\n    auto group = new QActionGroup(this);\n    group->setExclusive(true);\n\n    const auto settings = m_config->group(Config::Groups::CodeNavigation);\n    const auto currentIdx = settings.readEntry(Config::Entries::IDE, firstAvailableIde());\n\n    for (int i = 0; i < LAST_IDE; ++i) {\n        auto action = new QAction(menu);\n        auto ide = ideSettings(static_cast<IDE>(i));\n        action->setText(ide.name);\n        auto icon = QIcon::fromTheme(ide.app);\n        if (icon.isNull()) {\n            icon = QIcon::fromTheme(QStringLiteral("application-x-executable"));\n        }\n        action->setIcon(icon);\n        action->setCheckable(true);\n        action->setChecked(currentIdx == i);\n        action->setData(i);\n        action->setEnabled(ide.isAppAvailable());\n        group->addAction(action);\n        menu->addAction(action);\n    }\n    menu->addSeparator();\n\n    QAction* action = new QAction(menu);\n    action->setText(i18n("Custom..."));\n    action->setCheckable(true);\n    action->setChecked(currentIdx == -1);\n    action->setData(-1);\n    action->setIcon(QIcon::fromTheme(QStringLiteral("application-x-executable-script")));\n    group->addAction(action);\n    menu->addAction(action);\n\n#if defined(Q_OS_WIN) || defined(Q_OS_OSX)\n    // This is a workaround for the cases, where we can\'t safely do assumptions\n    // about the install location of the IDE\n    action = new QAction(menu);\n    action->setText(i18n("Automatic (No Line numbers)"));\n    action->setCheckable(true);\n    action->setChecked(currentIdx == -2);\n    action->setData(-2);\n    group->addAction(action);\n    menu->addAction(action);\n#endif\n\n    QObject::connect(group, &QActionGroup::triggered, this, &MainWindow::setCodeNavigationIDE);\n\n    configAction->setMenu(menu);\n    m_ui->menu_Settings->addMenu(menu);\n}\n\nvoid MainWindow::setCodeNavigationIDE(QAction* action)\n{\n    auto settings = m_config->group(Config::Groups::CodeNavigation);\n\n    if (action->data() == -1) {\n        const auto customCmd =\n            QInputDialog::getText(this, i18n("Custom Code Navigation"),\n                                  i18n("Specify command to use for code navigation, \'%f\' will be replaced by the file "\n                                     "name, \'%l\' by the line number and \'%c\' by the column number."),\n                                  QLineEdit::Normal, settings.readEntry(Config::Entries::CustomCommand));\n        if (!customCmd.isEmpty()) {\n            settings.writeEntry(Config::Entries::CustomCommand, customCmd);\n            settings.writeEntry(Config::Entries::IDE, -1);\n        }\n        return;\n    }\n\n    const auto defaultIde = action->data().toInt();\n    settings.writeEntry(Config::Entries::IDE, defaultIde);\n}\n\nvoid MainWindow::navigateToCode(const QString& filePath, int lineNumber, int columnNumber)\n{\n    const auto settings = m_config->group(Config::Groups::CodeNavigation);\n    const auto ideIdx = settings.readEntry(Config::Entries::IDE, firstAvailableIde());\n\n    QString command;\n    if (ideIdx >= 0 && ideIdx < LAST_IDE) {\n        auto ide = ideSettings(static_cast<IDE>(ideIdx));\n        command = ide.app + QLatin1Char(\' \') + ide.args;\n    } else if (ideIdx == -1) {\n        command = settings.readEntry(Config::Entries::CustomCommand);\n    }\n\n    if (!command.isEmpty()) {\n        command.replace(QStringLiteral("%f"), filePath);\n        command.replace(QStringLiteral("%l"), QString::number(std::max(1, lineNumber)));\n        command.replace(QStringLiteral("%c"), QString::number(std::max(1, columnNumber)));\n\n        auto splitted = KShell::splitArgs(command);\n        QProcess::startDetached(splitted.takeFirst(), splitted);\n    } else {\n        QDesktopServices::openUrl(QUrl::fromLocalFile(filePath));\n    }\n}\n\nvoid MainWindow::setDisableEmbeddedSuppressions(bool disable)\n{\n    m_disableEmbeddedSuppressions->setChecked(disable);\n}\n\nvoid MainWindow::setDisableBuiltinSuppressions(bool disable)\n{\n    m_disableBuiltinSuppressions->setChecked(disable);\n}\n\nvoid MainWindow::setSuppressions(std::vector<std::string> suppressions)\n{\n    m_lastFilterParameters.suppressions = std::move(suppressions);\n}\n'