b'// Listing 36.1\nprintfn "Loading data!"\nSystem.Threading.Thread.Sleep(5000)\nprintfn "Loaded Data!"\nprintfn "My name is Simon."\n\nasync {\n    printfn "Loading data!"\n    System.Threading.Thread.Sleep(5000)\n    printfn "Loaded Data!" }\n|> Async.Start\nprintfn "My name is Simon."\n\n// Listing 36.2\nlet asyncHello : Async<string> = async { return "Hello" }\nlet length = asyncHello.Length\nlet text = asyncHello |> Async.RunSynchronously\nlet lengthTwo = text.Length\n\n// Listing 36.3\nopen System.Threading\nlet printThread text = printfn "THREAD %d: %s" Thread.CurrentThread.ManagedThreadId text\nlet doWork() =\n    printThread "Starting long running work!"\n    Thread.Sleep 5000\n    "HELLO"\n\nlet asyncLength =\n    printThread "Creating async block"\n    let asyncBlock =\n        async {\n            printThread "In block!"\n            let text = doWork()\n            return (text + " WORLD").Length }\n    printThread "Created async block"\n    asyncBlock\n\nasyncLength |> Async.RunSynchronously\n\n// Listing 36.4\nlet getTextAsync = async { return "HELLO" }\nlet printHelloWorld =\n    async {\n        let! text = getTextAsync\n        return printf "%s WORLD" text }\n\nprintHelloWorld |> Async.Start\n\n// Listing 36.5\nlet random = System.Random()\nlet pickANumberAsync =\n    async { return random.Next(10) }\n\nlet createFiftyNumbers =\n    let workflows = [ for _ in 1 .. 50 -> pickANumberAsync ]\n    async {\n        let! numbers = workflows |> Async.Parallel\n        printfn "Total is %d" (numbers |> Array.sum) }\n    \ncreateFiftyNumbers |> Async.Start\n\n// Listing 36.6\nlet urls = [| "http://www.fsharp.org"; "http://microsoft.com"; "http://fsharpforfunandprofit.com" |]\nlet downloadData url = async {\n    use wc = new System.Net.WebClient()\n    printfn "Downloading data on thread %d" System.Threading.Thread.CurrentThread.ManagedThreadId\n    let! data = wc.AsyncDownloadData(System.Uri url)\n    return data.Length }\n\nlet downloadedBytes =\n    urls\n    |> Array.map downloadData\n    |> Async.Parallel\n    |> Async.RunSynchronously\n    \nprintfn "You downloaded %d characters" (Array.sum downloadedBytes)\n\n// Listing 36.7\nlet downloadData url = async {\n    use wc = new System.Net.WebClient()\n    printfn "Downloading data on thread %d" System.Threading.Thread.CurrentThread.ManagedThreadId\n    let! data = wc.DownloadDataTaskAsync(System.Uri url) |> Async.AwaitTask\n    return data.Length }\n\nlet downloadedBytes =\n    urls\n    |> Array.map downloadData\n    |> Async.Parallel\n    |> Async.StartAsTask\n    \nprintfn "You downloaded %d characters" (Array.sum downloadedBytes.Result)\n\n// Bonus - custom computation expression!\ntype Maybe() =\n    member __.Bind(opt, func) = opt |> Option.bind func\n    member __.Return v = Some v\n\nlet maybe = Maybe()\n\nlet rateCustomer name =\n    match name with\n    | "isaac" -> Some 3\n    | "mike" -> Some 2\n    | _ -> None\nlet answer =\n    maybe {\n        let! first = rateCustomer "isaac"\n        let! second = rateCustomer "mike"\n        return first + second }'