b'using choice = vector<int>;\nvector<int> arr = {};\n\n// returning all possible choices to make target sum by using suffix of array [curIndex, ...]\nvector<choice> getAllChoices(int curIndex, int target) {\n    // base case\n    if(target < 0) return {}; // no valid choice\n    if(target == 0) return {{}}; // one choice, and you chose nothing\n    if(curIndex == arr.size()) return {};\n    \n    int curNumber = arr[curIndex];\n    \n    vector<choice> ans = getAllChoices(curIndex+1, target); // curNumber is not used at all\n    \n    vector<choice> other = getAllChoices(curIndex, target - curNumber); // using it once\n    for(choice c: other) {\n        c.push_back(curNumber);\n        // now c is a valid choice \n        ans.push_back(c);\n    }\n    \n    return ans;\n}\n\nclass Solution {\n    \npublic:\n    vector<choice> combinationSum(vector<int>& candidates, int target) {\n        arr = candidates;\n        return getAllChoices(0, target);\n    }\n};\n'