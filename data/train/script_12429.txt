b'/*\n * Copyright (C) 2015 Naman Dwivedi\n *\n * Licensed under the GNU General Public License v3\n *\n * This is free software: you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n */\n\npackage com.naman14.timber.adapters;\n\nimport android.app.Activity;\nimport android.graphics.Bitmap;\nimport android.graphics.Color;\nimport androidx.annotation.ColorInt;\nimport androidx.palette.graphics.Palette;\nimport androidx.recyclerview.widget.RecyclerView;\nimport android.util.Pair;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.ImageView;\nimport android.widget.TextView;\n\nimport com.afollestad.appthemeengine.Config;\nimport com.naman14.timber.R;\nimport com.naman14.timber.lastfmapi.LastFmClient;\nimport com.naman14.timber.lastfmapi.callbacks.ArtistInfoListener;\nimport com.naman14.timber.lastfmapi.models.ArtistQuery;\nimport com.naman14.timber.lastfmapi.models.LastfmArtist;\nimport com.naman14.timber.models.Artist;\nimport com.naman14.timber.utils.Helpers;\nimport com.naman14.timber.utils.NavigationUtils;\nimport com.naman14.timber.utils.PreferencesUtility;\nimport com.naman14.timber.utils.TimberUtils;\nimport com.naman14.timber.widgets.BubbleTextGetter;\nimport com.nostra13.universalimageloader.core.DisplayImageOptions;\nimport com.nostra13.universalimageloader.core.ImageLoader;\nimport com.nostra13.universalimageloader.core.assist.FailReason;\nimport com.nostra13.universalimageloader.core.display.FadeInBitmapDisplayer;\nimport com.nostra13.universalimageloader.core.listener.SimpleImageLoadingListener;\n\nimport java.util.List;\n\npublic class ArtistAdapter extends RecyclerView.Adapter<ArtistAdapter.ItemHolder> implements BubbleTextGetter {\n\n    private List<Artist> arraylist;\n    private Activity mContext;\n    private boolean isGrid;\n\n    public ArtistAdapter(Activity context, List<Artist> arraylist) {\n        this.arraylist = arraylist;\n        this.mContext = context;\n        this.isGrid = PreferencesUtility.getInstance(mContext).isArtistsInGrid();\n    }\n\n    public static int getOpaqueColor(@ColorInt int paramInt) {\n        return 0xFF000000 | paramInt;\n    }\n\n    @Override\n    public ItemHolder onCreateViewHolder(ViewGroup viewGroup, int i) {\n        if (isGrid) {\n            View v = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.item_artist_grid, null);\n            ItemHolder ml = new ItemHolder(v);\n            return ml;\n        } else {\n            View v = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.item_artist, null);\n            ItemHolder ml = new ItemHolder(v);\n            return ml;\n        }\n    }\n\n    @Override\n    public void onBindViewHolder(final ItemHolder itemHolder, int i) {\n        final Artist localItem = arraylist.get(i);\n\n        itemHolder.name.setText(localItem.name);\n        String albumNmber = TimberUtils.makeLabel(mContext, R.plurals.Nalbums, localItem.albumCount);\n        String songCount = TimberUtils.makeLabel(mContext, R.plurals.Nsongs, localItem.songCount);\n        itemHolder.albums.setText(TimberUtils.makeCombinedString(mContext, albumNmber, songCount));\n\n\n        LastFmClient.getInstance(mContext).getArtistInfo(new ArtistQuery(localItem.name), new ArtistInfoListener() {\n            @Override\n            public void artistInfoSucess(LastfmArtist artist) {\n                if (artist != null && artist.mArtwork != null) {\n                    if (isGrid) {\n                        ImageLoader.getInstance().displayImage(artist.mArtwork.get(2).mUrl, itemHolder.artistImage,\n                                new DisplayImageOptions.Builder().cacheInMemory(true)\n                                        .cacheOnDisk(true)\n                                        .showImageOnLoading(R.drawable.ic_empty_music2)\n                                        .resetViewBeforeLoading(true)\n                                        .displayer(new FadeInBitmapDisplayer(400))\n                                        .build(), new SimpleImageLoadingListener() {\n                                    @Override\n                                    public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {\n                                        if (isGrid && loadedImage != null) {\n                                            new Palette.Builder(loadedImage).generate(new Palette.PaletteAsyncListener() {\n                                                @Override\n                                                public void onGenerated(Palette palette) {\n                                                    int color = palette.getVibrantColor(Color.parseColor("#66000000"));\n                                                    itemHolder.footer.setBackgroundColor(color);\n                                                    Palette.Swatch swatch = palette.getVibrantSwatch();\n                                                    int textColor;\n                                                    if (swatch != null) {\n                                                        textColor = getOpaqueColor(swatch.getTitleTextColor());\n                                                    } else textColor = Color.parseColor("#ffffff");\n\n                                                    itemHolder.name.setTextColor(textColor);\n                                                    itemHolder.albums.setTextColor(textColor);\n                                                }\n                                            });\n                                        }\n\n                                    }\n\n                                    @Override\n                                    public void onLoadingFailed(String imageUri, View view, FailReason failReason) {\n                                        if (isGrid) {\n                                            itemHolder.footer.setBackgroundColor(0);\n                                            if (mContext != null) {\n                                                int textColorPrimary = Config.textColorPrimary(mContext, Helpers.getATEKey(mContext));\n                                                itemHolder.name.setTextColor(textColorPrimary);\n                                                itemHolder.albums.setTextColor(textColorPrimary);\n                                            }\n                                        }\n                                    }\n                                });\n                    } else {\n                        ImageLoader.getInstance().displayImage(artist.mArtwork.get(1).mUrl, itemHolder.artistImage,\n                                new DisplayImageOptions.Builder().cacheInMemory(true)\n                                        .cacheOnDisk(true)\n                                        .showImageOnLoading(R.drawable.ic_empty_music2)\n                                        .resetViewBeforeLoading(true)\n                                        .displayer(new FadeInBitmapDisplayer(400))\n                                        .build());\n                    }\n                }\n            }\n\n            @Override\n            public void artistInfoFailed() {\n\n            }\n        });\n\n        if (TimberUtils.isLollipop())\n            itemHolder.artistImage.setTransitionName("transition_artist_art" + i);\n\n    }\n\n    @Override\n    public long getItemId(int position) {\n        return arraylist.get(position).id;\n    }\n\n    @Override\n    public int getItemCount() {\n        return (null != arraylist ? arraylist.size() : 0);\n    }\n\n    @Override\n    public String getTextToShowInBubble(final int pos) {\n        if (arraylist == null || arraylist.size() == 0)\n            return "";\n        return Character.toString(arraylist.get(pos).name.charAt(0));\n    }\n\n    public void updateDataSet(List<Artist> arrayList) {\n        this.arraylist = arrayList;\n    }\n\n    public class ItemHolder extends RecyclerView.ViewHolder implements View.OnClickListener {\n        protected TextView name, albums;\n        protected ImageView artistImage;\n        protected View footer;\n\n        public ItemHolder(View view) {\n            super(view);\n            this.name = (TextView) view.findViewById(R.id.artist_name);\n            this.albums = (TextView) view.findViewById(R.id.album_song_count);\n            this.artistImage = (ImageView) view.findViewById(R.id.artistImage);\n            this.footer = view.findViewById(R.id.footer);\n            view.setOnClickListener(this);\n        }\n\n        @Override\n        public void onClick(View v) {\n            NavigationUtils.navigateToArtist(mContext, arraylist.get(getAdapterPosition()).id,\n                    new Pair<View, String>(artistImage, "transition_artist_art" + getAdapterPosition()));\n        }\n\n    }\n}\n\n\n\n\n'