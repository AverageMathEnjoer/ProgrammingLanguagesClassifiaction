b'context("edge_case")\ntest_that("edge cases work or throw proper errors", {\n  # one row\n  set.seed(1)\n  dds <- makeExampleDESeqDataSet(n=1)\n  sizeFactors(dds) <- rep(1,ncol(dds))\n  dispersions(dds) <- .5\n  dds <- nbinomWaldTest(dds)\n  res <- results(dds)\n  dds <- nbinomLRT(dds, reduced=~1)\n  res <- results(dds)\n\n\n  # only intercept\n  set.seed(1)\n  dds <- makeExampleDESeqDataSet(n=100)\n  design(dds) <- ~ 1\n  expect_warning({dds <- DESeq(dds)})\n  res <- results(dds)\n\n\n  # metadata insertion\n  dds <- makeExampleDESeqDataSet(n=50,m=4)\n\n  dds2 <- DESeqDataSetFromMatrix( counts(dds), colData(dds), design(dds) )\n  mcols(dds2)$foo <- paste( "bar", 1:nrow(dds2) )\n  dds2 <- DESeq(dds2)\n  results(dds2)\n  expect_true(class(mcols(mcols(dds2))$type) == "character")\n\n  dds3 <- DESeqDataSetFromMatrix( counts(dds), DataFrame(row.names=colnames(dds)), ~ 1 )\n  dds3$test <- 1:ncol(dds3)\n  dds3 <- estimateSizeFactors(dds3)\n  expect_true(class(mcols(colData(dds3))$type) == "character")\n\n\n  # underscores\n  dds <- makeExampleDESeqDataSet(n=50,m=4)\n  levels(dds$condition) <- c("A_1","B_2")\n  dds$exp_cond <- dds$condition\n  design(dds) <- ~ exp_cond\n  dds <- DESeq(dds)\n  results(dds)\n\n  # NA in colData\n  dds <- makeExampleDESeqDataSet(n=50,m=4)\n  colData(dds)$condition[4] <- NA\n  expect_error(DESeq(dds))\n})\n'