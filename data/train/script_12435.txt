b'import System.Environment (getArgs)\nimport Data.Set\n\nnub\' :: Ord a => [a] -> [a]\nnub\' = hub empty . preprocess\n\npreprocess :: Ord a => [a] -> [(a, Set a)]\npreprocess xs = zip xs (tail (scanr insert empty xs))\n\nhub :: Ord a => Set a -> [(a, Set a)] -> [a]\nhub ws [] = []\nhub ws ((x,xs) : xss) = case (member x xs, member x ws) of\n    (False,False)   -> eus ++ [x] ++ hub empty yss\n    (False,True)    -> eus ++ [x] ++ hub vs yss\n    (True,False)    -> hub (insert x us) xss\n    (True,True)     -> hub ws xss\n    where (us,vs) = split x ws\n          eus = elems us\n          yss = [(x, xs) | (x, xs) <- xss, not (member x us)]\n\nmain = do\n    args <- getArgs\n    let word = case args of\n                    [] -> "calculus"\n                    (x:_) -> x\n    putStrLn $ show $ nub\' word\n\n'