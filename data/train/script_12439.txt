b'#include "stdafx.h"\n#include "resource.h"\n#include "TypeDbPackageEditor.h"\n\n#include "Win32AppContext.h"\n#include "FileDialog.h"\n\n#include "../AssetsTools/ClassDatabaseFile.h"\n#include "../AssetsTools/AssetsFileReader.h"\n\n#include <WindowsX.h>\n\nINT_PTR CALLBACK TypeDbPackageEditor(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam);\n\nstruct TypePkEditDialog\n{\n\tHINSTANCE hInst = NULL;\n\tint selectedDbIndex = -1;\n\tWCHAR *filePath = nullptr;\n\tClassDatabasePackage classPackage;\n} typePkEditDialog;\nvoid OpenTypeDbPackageEditor(HINSTANCE hInstance, HWND hParent)\n{\n\ttypePkEditDialog.hInst = hInstance;\n\tDialogBox(hInstance, MAKEINTRESOURCE(IDD_EDITTYPEPAK), hParent, TypeDbPackageEditor);\n}\n\nstatic char *GetEditTextA(HWND hEdit)\n{\n\tchar *cNameBuf;\n\t#ifdef _UNICODE\n\t\tint wcTextLen = Edit_GetTextLength(hEdit);\n\t\tWCHAR *wcNameBuf = (WCHAR*)malloc((wcTextLen+1) * sizeof(WCHAR));\n\t\t__checkoutofmemory(wcNameBuf==NULL);\n\t\tEdit_GetText(hEdit, wcNameBuf, wcTextLen+1);\n\t\twcNameBuf[wcTextLen] = 0;\n\n\t\tint cTextLen = WideCharToMultiByte(CP_UTF8, 0, wcNameBuf, wcTextLen, NULL, 0, NULL, NULL);\n\t\tcNameBuf = (char*)malloc((cTextLen+1) * sizeof(char));\n\t\t__checkoutofmemory(cNameBuf==NULL);\n\t\tWideCharToMultiByte(CP_UTF8, 0, wcNameBuf, wcTextLen, cNameBuf, cTextLen, NULL, NULL);\n\t\tcNameBuf[cTextLen] = 0;\n\t\tfree(wcNameBuf);\n\t#else\n\t\tint cTextLen = Edit_GetTextLength(hEdit);\n\t\tcNameBuf = (char*)malloc(cTextLen+1);\n\t\t__checkoutofmemory(cNameBuf==NULL);\n\t\tEdit_GetText(hEdit, cNameBuf, cTextLen+1);\n\t\tcNameBuf[cTextLen] = 0;\n\t#endif\n\treturn cNameBuf;\n}\nstatic void SetEditTextA(HWND hEdit, char *text)\n{\n\t#ifdef _UNICODE\n\t\tsize_t textLen = strlen(text);\n\t\tint wcharCount = MultiByteToWideChar(CP_UTF8, 0, text, (int)textLen, NULL, 0);\n\t\tWCHAR *wcTextBuf = (WCHAR*)malloc((wcharCount+1) * sizeof(WCHAR));\n\t\t__checkoutofmemory(wcTextBuf==NULL);\n\t\tMultiByteToWideChar(CP_UTF8, 0, text, (int)textLen, wcTextBuf, wcharCount);\n\t\twcTextBuf[wcharCount] = 0;\n\t\tEdit_SetText(hEdit, wcTextBuf);\n\t\tfree(wcTextBuf);\n\t#else\n\t\tEdit_SetText(hNameEdit, text);\n\t#endif\n}\n\nINT_PTR CALLBACK TypeDbPackageEditor(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)\n{\n\tint wmId, wmEvent;\n\tint moveDirection = 0; //only used for the Up/Down buttons\n\tUNREFERENCED_PARAMETER(lParam);\n\tswitch (message)\n\t{\n\tcase WM_INITDIALOG:\n\t\t{\n\t\t\tHWND hOptimizeFastCB = GetDlgItem(hDlg, IDC_CKOPTIMIZEFAST);\n\t\t\tButton_SetCheck(hOptimizeFastCB, true);\n\t\t\tHWND hOptimizeSlowCB = GetDlgItem(hDlg, IDC_CKOPTIMIZESLOW);\n\t\t\tButton_SetCheck(hOptimizeSlowCB, false);\n\t\t\tHWND hCompressLZ4CB = GetDlgItem(hDlg, IDC_CKCOMPRESSLZ4);\n\t\t\tButton_SetCheck(hCompressLZ4CB, false);\n\t\t\tHWND hCompressLZMACB = GetDlgItem(hDlg, IDC_CKCOMPRESSLZMA);\n\t\t\tButton_SetCheck(hCompressLZMACB, true);\n\n\t\t\tWCHAR *filePathBuf;\n\t\t\tHRESULT hr = ShowFileOpenDialog(hDlg, &filePathBuf, L"*.tpk|Type database package:",\n\t\t\t\tnullptr, nullptr, nullptr,\n\t\t\t\tUABE_FILEDIALOG_CLDB_GUID);\n\t\t\t__checkoutofmemory(hr==E_OUTOFMEMORY);\n\t\t\tif (SUCCEEDED(hr))\n\t\t\t{\n\t\t\t\tIAssetsReader *pDbReader = Create_AssetsReaderFromFile(filePathBuf, true, RWOpenFlags_Immediately);\n\t\t\t\t//FILE *pDbFile = NULL;\n\t\t\t\t//_wfopen_s(&pDbFile, filePathBuf, L"rb");\n\t\t\t\tif (pDbReader != NULL)\n\t\t\t\t{\n\t\t\t\t\tif (!typePkEditDialog.classPackage.Read(pDbReader))\n\t\t\t\t\t{\n\t\t\t\t\t\t//treat it like an empty package\n\t\t\t\t\t\tmemset(&typePkEditDialog.classPackage.header, 0, sizeof(ClassDatabasePackageHeader));\n\t\t\t\t\t\ttypePkEditDialog.classPackage.files = NULL;\n\t\t\t\t\t\ttypePkEditDialog.classPackage.stringTable = NULL;\n\t\t\t\t\t}\n\t\t\t\t\tFree_AssetsReader(pDbReader);\n\t\t\t\t\t//fclose(pDbFile);\n\t\t\t\t\ttypePkEditDialog.filePath = filePathBuf;\n\t\t\t\t\t\n\t\t\t\t\tHWND hDblist = GetDlgItem(hDlg, IDC_DBLIST);\n\t\t\t\t\tfor (DWORD i = 0; i < (DWORD)typePkEditDialog.classPackage.header.files.size(); i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tClassDatabaseFileRef *pFileRef = &typePkEditDialog.classPackage.header.files[i];\n\t\t\t\t\t\tconst char *dbName = pFileRef->name;\n\t\t\t\t\t\tif (dbName != NULL)\n\t\t\t\t\t\t{\n#ifdef _UNICODE\n\t\t\t\t\t\t\tsize_t dbNameLen = strlen(dbName);\n\t\t\t\t\t\t\tint wcharCount = MultiByteToWideChar(CP_UTF8, 0, dbName, (int)dbNameLen, NULL, 0);\n\t\t\t\t\t\t\tWCHAR *wcNameBuf = (WCHAR*)malloc((wcharCount+1) * sizeof(WCHAR));\n\t\t\t\t\t\t\t__checkoutofmemory(wcNameBuf==NULL);\n\t\t\t\t\t\t\tMultiByteToWideChar(CP_UTF8, 0, dbName, (int)dbNameLen, wcNameBuf, wcharCount);\n\t\t\t\t\t\t\twcNameBuf[wcharCount] = 0;\n\t\t\t\t\t\t\tListBox_AddString(hDblist, wcNameBuf);\n\t\t\t\t\t\t\tfree(wcNameBuf);\n#else\n\t\t\t\t\t\t\tListBox_AddString(hDblist, typeName);\n#endif\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tListBox_AddString(hDblist, TEXT(""));\n\t\t\t\t\t}\n\t\t\t\t\ttypePkEditDialog.selectedDbIndex = -1;\n\t\t\t\t\tListBox_SetCurSel(hDblist, 0);\n\t\t\t\t\tgoto DoUpdateDbList;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tFreeCOMFilePathBuf(&filePathBuf);\n\t\t\t\t\tMessageBox(hDlg, TEXT("Unable to open the file!"), TEXT("ERROR"), 16);\n\t\t\t\t\tEndDialog(hDlg, LOWORD(wParam));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t\tEndDialog(hDlg, LOWORD(wParam));\n\t\t}\n\t\treturn (INT_PTR)TRUE;\n\t\t\n\tcase WM_CLOSE:\n\tcase WM_DESTROY:\n\t\tEndDialog(hDlg, LOWORD(wParam));\n\t\tgoto Free_TypePkEditorDialog;\n\tcase WM_COMMAND:\n\t\twmId    = LOWORD(wParam);\n\t\twmEvent = HIWORD(wParam);\n\t\tswitch (wmId)\n\t\t{\n\t\t\tcase IDC_CKCOMPRESSLZ4:\n\t\t\t\t{\n\t\t\t\t\tHWND hCompressLZ4CB = GetDlgItem(hDlg, IDC_CKCOMPRESSLZ4);\n\t\t\t\t\tHWND hCompressLZMACB = GetDlgItem(hDlg, IDC_CKCOMPRESSLZMA);\n\t\t\t\t\tif (Button_GetCheck(hCompressLZ4CB))\n\t\t\t\t\t\tButton_SetCheck(hCompressLZMACB, 0);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase IDC_CKCOMPRESSLZMA:\n\t\t\t\t{\n\t\t\t\t\tHWND hCompressLZ4CB = GetDlgItem(hDlg, IDC_CKCOMPRESSLZ4);\n\t\t\t\t\tHWND hCompressLZMACB = GetDlgItem(hDlg, IDC_CKCOMPRESSLZMA);\n\t\t\t\t\tif (Button_GetCheck(hCompressLZMACB))\n\t\t\t\t\t\tButton_SetCheck(hCompressLZ4CB, 0);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase IDC_CKOPTIMIZEFAST:\n\t\t\t\t{\n\t\t\t\t\tHWND hOptimizeFastCB = GetDlgItem(hDlg, IDC_CKOPTIMIZEFAST);\n\t\t\t\t\tHWND hOptimizeSlowCB = GetDlgItem(hDlg, IDC_CKOPTIMIZESLOW);\n\t\t\t\t\tif (Button_GetCheck(hOptimizeFastCB))\n\t\t\t\t\t\tButton_SetCheck(hOptimizeSlowCB, 0);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase IDC_CKOPTIMIZESLOW:\n\t\t\t\t{\n\t\t\t\t\tHWND hOptimizeFastCB = GetDlgItem(hDlg, IDC_CKOPTIMIZEFAST);\n\t\t\t\t\tHWND hOptimizeSlowCB = GetDlgItem(hDlg, IDC_CKOPTIMIZESLOW);\n\t\t\t\t\tif (Button_GetCheck(hOptimizeSlowCB))\n\t\t\t\t\t\tButton_SetCheck(hOptimizeFastCB, 0);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase IDOK:\n\t\t\t\t{\n\t\t\t\t\tHWND hOptimizeFastCB = GetDlgItem(hDlg, IDC_CKOPTIMIZEFAST);\n\t\t\t\t\tHWND hOptimizeSlowCB = GetDlgItem(hDlg, IDC_CKOPTIMIZESLOW);\n\t\t\t\t\tbool optimizePlacebo = Button_GetCheck(hOptimizeSlowCB)?true:false;\n\t\t\t\t\tbool optimizeFast = (Button_GetCheck(hOptimizeFastCB)?true:false);\n\t\t\t\t\tint optimize = optimizePlacebo ? 2 : (optimizeFast ? 1 : 0);\n\t\t\t\t\tHWND hCompressLZ4CB = GetDlgItem(hDlg, IDC_CKCOMPRESSLZ4);\n\t\t\t\t\tHWND hCompressLZMACB = GetDlgItem(hDlg, IDC_CKCOMPRESSLZMA);\n\t\t\t\t\tDWORD compress = (Button_GetCheck(hCompressLZ4CB) ? 1 : (Button_GetCheck(hCompressLZMACB) ? 2 : 0)) | 0x80;\n\t\t\t\t\tIAssetsWriter *pDbWriter = Create_AssetsWriterToFile(typePkEditDialog.filePath, true, true, RWOpenFlags_Immediately);\n\t\t\t\t\t//FILE *pDbFile = NULL;\n\t\t\t\t\t//_wfopen_s(&pDbFile, typePkEditDialog.filePath, L"wb");\n\t\t\t\t\tif (pDbWriter != NULL)\n\t\t\t\t\t{\n\t\t\t\t\t\ttypePkEditDialog.classPackage.Write(pDbWriter, 0, optimize, compress);\n\t\t\t\t\t\tFree_AssetsWriter(pDbWriter);\n\t\t\t\t\t\t//fclose(pDbFile);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tMessageBox(hDlg, TEXT("Unable to open the file for writing!"), TEXT("ERROR"), 16);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tcase IDCANCEL:\n\t\t\t\tEndDialog(hDlg, LOWORD(wParam));\n\t\t\t\tgoto Free_TypePkEditorDialog;\n\t\t\tcase IDC_BTNDBEXPORT:\n\t\t\t\t{\n\t\t\t\t\tif (typePkEditDialog.selectedDbIndex >= 0 && \n\t\t\t\t\t\ttypePkEditDialog.selectedDbIndex < (int)typePkEditDialog.classPackage.header.fileCount)\n\t\t\t\t\t{\n\t\t\t\t\t\t\n\t\t\t\t\t\tWCHAR *filePathBuf;\n\t\t\t\t\t\tHRESULT hr = ShowFileSaveDialog(hDlg, &filePathBuf, L"*.dat|Type database:",\n\t\t\t\t\t\t\tnullptr, nullptr, nullptr,\n\t\t\t\t\t\t\tUABE_FILEDIALOG_CLDB_GUID);\n\t\t\t\t\t\t__checkoutofmemory(hr==E_OUTOFMEMORY);\n\t\t\t\t\t\tif (SUCCEEDED(hr))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tIAssetsWriter *pDbWriter = Create_AssetsWriterToFile(filePathBuf, true, true, RWOpenFlags_Immediately);\n\t\t\t\t\t\t\t//FILE *pDbFile = NULL;\n\t\t\t\t\t\t\t//_wfopen_s(&pDbFile, filePathBuf, L"wb");\n\t\t\t\t\t\t\tFreeCOMFilePathBuf(&filePathBuf);\n\t\t\t\t\t\t\tif (pDbWriter != NULL)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttypePkEditDialog.classPackage.files[typePkEditDialog.selectedDbIndex]->Write(\n\t\t\t\t\t\t\t\t\tpDbWriter, 0\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tFree_AssetsWriter(pDbWriter);\n\t\t\t\t\t\t\t\t//fclose(pDbFile);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tMessageBox(hDlg, TEXT("Unable to open the file for writing!"), TEXT("ERROR"), 16);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//typeEditDialog.pType = &typeDbEditDialog.classDatabase.classes[typeDbEditDialog.selectedTypeIndex];\n\t\t\t\t\t\t//DialogBox(typeDbEditDialog.hInst, MAKEINTRESOURCE(IDD_EDITTYPE), hDlg, TypeEditor);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase IDC_BTNDBIMPORT:\n\t\t\t\t{\n\t\t\t\t\tWCHAR *filePathBuf;\n\t\t\t\t\tHRESULT hr = ShowFileOpenDialog(hDlg, &filePathBuf, L"*.dat|Type database:",\n\t\t\t\t\t\tnullptr, nullptr, nullptr,\n\t\t\t\t\t\tUABE_FILEDIALOG_CLDB_GUID);\n\t\t\t\t\t__checkoutofmemory(hr==E_OUTOFMEMORY);\n\t\t\t\t\tif (SUCCEEDED(hr))\n\t\t\t\t\t{\n\t\t\t\t\t\tIAssetsReader *pDbReader = Create_AssetsReaderFromFile(filePathBuf, true, RWOpenFlags_Immediately);\n\t\t\t\t\t\t//FILE *pDbFile = NULL;\n\t\t\t\t\t\t//_wfopen_s(&pDbFile, filePathBuf, L"rb");\n\t\t\t\t\t\tFreeCOMFilePathBuf(&filePathBuf);\n\t\t\t\t\t\tif (pDbReader != NULL)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (typePkEditDialog.classPackage.ImportFile(pDbReader))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tHWND hDbList = GetDlgItem(hDlg, IDC_DBLIST);\n\t\t\t\t\t\t\t\tListBox_AddString(hDbList, TEXT(""));\n\t\t\t\t\t\t\t\tListBox_SetCurSel(hDbList, typePkEditDialog.classPackage.header.fileCount - 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tMessageBox(hDlg, TEXT("Unable to import the type database!"), TEXT("ERROR"), 16);\n\t\t\t\t\t\t\tFree_AssetsReader(pDbReader);\n\t\t\t\t\t\t\t//fclose(pDbFile);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tMessageBox(hDlg, TEXT("Unable to open the file for reading!"), TEXT("ERROR"), 16);\n\t\t\t\t\t}\n\t\t\t\t\tgoto DoUpdateDbList;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase IDC_BTNREMOVE:\n\t\t\t\t{\n\t\t\t\t\tif (typePkEditDialog.selectedDbIndex >= 0 && \n\t\t\t\t\t\ttypePkEditDialog.selectedDbIndex < (int)typePkEditDialog.classPackage.header.fileCount)\n\t\t\t\t\t{\n\t\t\t\t\t\tint selection = typePkEditDialog.selectedDbIndex;\n\t\t\t\t\t\tHWND hDbList = GetDlgItem(hDlg, IDC_DBLIST);\n\t\t\t\t\t\tif (typePkEditDialog.classPackage.RemoveFile((DWORD)selection))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tListBox_DeleteString(hDbList, selection);\n\t\t\t\t\t\t\ttypePkEditDialog.selectedDbIndex = -1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (selection < (int)typePkEditDialog.classPackage.header.fileCount)\n\t\t\t\t\t\t\tListBox_SetCurSel(hDbList, selection);\n\t\t\t\t\t\telse if (selection > 0)\n\t\t\t\t\t\t\tListBox_SetCurSel(hDbList, selection-1);\n\t\t\t\t\t\tgoto DoUpdateDbList;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase IDC_EDITNAME:\n\t\t\t\t{\n\t\t\t\t\tif (typePkEditDialog.selectedDbIndex >= 0 && \n\t\t\t\t\t\ttypePkEditDialog.selectedDbIndex < (int)typePkEditDialog.classPackage.header.fileCount)\n\t\t\t\t\t{\n\t\t\t\t\t\tClassDatabaseFileRef *pSelectedRef = &typePkEditDialog.classPackage.header.files[typePkEditDialog.selectedDbIndex];\n\t\t\t\t\t\tHWND hNameEdit = GetDlgItem(hDlg, IDC_EDITNAME);\n\t\t\t\t\t\tHWND hDblist = GetDlgItem(hDlg, IDC_DBLIST);\n\t\t\t\t\t\tchar *cNameBuf;\n\t\t\t\t\t\t#ifdef _UNICODE\n\t\t\t\t\t\t\tint wcTextLen = Edit_GetTextLength(hNameEdit);\n\t\t\t\t\t\t\tWCHAR *wcNameBuf = (WCHAR*)malloc((wcTextLen+1) * sizeof(WCHAR));\n\t\t\t\t\t\t\t__checkoutofmemory(wcNameBuf==NULL);\n\t\t\t\t\t\t\tEdit_GetText(hNameEdit, wcNameBuf, wcTextLen+1);\n\t\t\t\t\t\t\twcNameBuf[wcTextLen] = 0;\n\n\t\t\t\t\t\t\tListBox_DeleteString(hDblist, typePkEditDialog.selectedDbIndex);\n\t\t\t\t\t\t\tListBox_InsertString(hDblist, typePkEditDialog.selectedDbIndex, wcNameBuf);\n\n\t\t\t\t\t\t\tint cTextLen = WideCharToMultiByte(CP_UTF8, 0, wcNameBuf, wcTextLen, NULL, 0, NULL, NULL);\n\t\t\t\t\t\t\tcNameBuf = (char*)malloc((cTextLen+1) * sizeof(char));\n\t\t\t\t\t\t\t__checkoutofmemory(cNameBuf==NULL);\n\t\t\t\t\t\t\tWideCharToMultiByte(CP_UTF8, 0, wcNameBuf, wcTextLen, cNameBuf, cTextLen, NULL, NULL);\n\t\t\t\t\t\t\tcNameBuf[cTextLen] = 0;\n\t\t\t\t\t\t\tfree(wcNameBuf);\n\t\t\t\t\t\t#else\n\t\t\t\t\t\t\tint cTextLen = Edit_GetTextLength(hNameEdit);\n\t\t\t\t\t\t\tcNameBuf = (char*)malloc(cTextLen+1);\n\t\t\t\t\t\t\t__checkoutofmemory(cNameBuf==NULL);\n\t\t\t\t\t\t\tEdit_GetText(hNameEdit, cNameBuf, cTextLen+1);\n\t\t\t\t\t\t\tcNameBuf[cTextLen] = 0;\n\n\t\t\t\t\t\t\tListBox_DeleteString(hAssetlist, typeDbEditDialog.selectedTypeIndex);\n\t\t\t\t\t\t\tListBox_InsertString(hAssetlist, typeDbEditDialog.selectedTypeIndex, cNameBuf);\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\tstrncpy(pSelectedRef->name, cNameBuf, 15);\n\t\t\t\t\t\tpSelectedRef->name[15] = 0;\n\t\t\t\t\t\tListBox_SetCurSel(hDblist, typePkEditDialog.selectedDbIndex);\n\t\t\t\t\t\tfree(cNameBuf);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase IDC_DBLIST:\n\t\t\tDoUpdateDbList:\n\t\t\t\t{\n\t\t\t\t\tHWND hDbList = GetDlgItem(hDlg, IDC_DBLIST);\n\t\t\t\t\tunsigned int selection = (unsigned int)ListBox_GetCurSel(hDbList);\n\t\t\t\t\tif ((selection != typePkEditDialog.selectedDbIndex) && \n\t\t\t\t\t\tselection < typePkEditDialog.classPackage.header.fileCount)\n\t\t\t\t\t{\n\t\t\t\t\t\ttypePkEditDialog.selectedDbIndex = (int)selection;\n\t\t\t\t\t\tHWND hNameEdit = GetDlgItem(hDlg, IDC_EDITNAME);\n\t\t\t\t\t\tClassDatabaseFileRef *pSelectedRef = &typePkEditDialog.classPackage.header.files[typePkEditDialog.selectedDbIndex];\n\t\t\t\t\t\tconst char *dbName = pSelectedRef->name;\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t#ifdef _UNICODE\n\t\t\t\t\t\t\t\tsize_t dbNameLen = strlen(pSelectedRef->name);\n\t\t\t\t\t\t\t\tint wcharCount = MultiByteToWideChar(CP_UTF8, 0, dbName, (int)dbNameLen, NULL, 0);\n\t\t\t\t\t\t\t\tWCHAR *wcNameBuf = (WCHAR*)malloc((wcharCount+1) * sizeof(WCHAR));\n\t\t\t\t\t\t\t\t__checkoutofmemory(wcNameBuf==NULL);\n\t\t\t\t\t\t\t\tMultiByteToWideChar(CP_UTF8, 0, dbName, (int)dbNameLen, wcNameBuf, wcharCount);\n\t\t\t\t\t\t\t\twcNameBuf[wcharCount] = 0;\n\t\t\t\t\t\t\t\tEdit_SetText(hNameEdit, wcNameBuf);\n\t\t\t\t\t\t\t\tfree(wcNameBuf);\n\t\t\t\t\t\t\t#else\n\t\t\t\t\t\t\t\tEdit_SetText(hNameEdit, dbName);\n\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase IDC_BTNMOVEUP:\n\t\t\t\t{\n\t\t\t\t\tmoveDirection = -1;\n\t\t\t\t\tGOTO_HANDLEMOVEBTN:\n\t\t\t\t\tif ((typePkEditDialog.selectedDbIndex + moveDirection) >= 0 && \n\t\t\t\t\t\t(typePkEditDialog.selectedDbIndex + moveDirection) < (int)typePkEditDialog.classPackage.header.fileCount)\n\t\t\t\t\t{\n\t\t\t\t\t\tClassDatabaseFileRef *pSelectedRef = &typePkEditDialog.classPackage.header.files[typePkEditDialog.selectedDbIndex];\n\t\t\t\t\t\tHWND hDblist = GetDlgItem(hDlg, IDC_DBLIST);\n\n\t\t\t\t\t\tint tTextLen = ListBox_GetTextLen(hDblist, typePkEditDialog.selectedDbIndex);\n\t\t\t\t\t\tTCHAR *tNameBuf = (WCHAR*)malloc((tTextLen+1) * sizeof(TCHAR));\n\t\t\t\t\t\t__checkoutofmemory(tNameBuf==NULL);\n\t\t\t\t\t\tListBox_GetText(hDblist, typePkEditDialog.selectedDbIndex, tNameBuf);\n\t\t\t\t\t\ttNameBuf[tTextLen] = 0;\n\n\t\t\t\t\t\tListBox_DeleteString(hDblist, typePkEditDialog.selectedDbIndex);\n\t\t\t\t\t\tListBox_InsertString(hDblist, typePkEditDialog.selectedDbIndex + moveDirection, tNameBuf);\n\t\t\t\t\t\tClassDatabaseFileRef tmpRef = typePkEditDialog.classPackage.header.files[(DWORD)typePkEditDialog.selectedDbIndex];\n\t\t\t\t\t\ttypePkEditDialog.classPackage.header.files.erase(\n\t\t\t\t\t\t\ttypePkEditDialog.classPackage.header.files.begin() + (DWORD)typePkEditDialog.selectedDbIndex);\n\t\t\t\t\t\ttypePkEditDialog.classPackage.header.files.insert(\n\t\t\t\t\t\t\ttypePkEditDialog.classPackage.header.files.begin() + (DWORD)(typePkEditDialog.selectedDbIndex + moveDirection), tmpRef);\n\n\t\t\t\t\t\tfree(tNameBuf);\n\n\t\t\t\t\t\tListBox_SetCurSel(hDblist, typePkEditDialog.selectedDbIndex + moveDirection);\n\t\t\t\t\t\ttypePkEditDialog.selectedDbIndex = typePkEditDialog.selectedDbIndex + moveDirection;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase IDC_BTNMOVEDOWN:\n\t\t\t\t{\n\t\t\t\t\tmoveDirection = 1;\n\t\t\t\t\tgoto GOTO_HANDLEMOVEBTN;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\t}\n\treturn (INT_PTR)FALSE;\nFree_TypePkEditorDialog:\n\ttypePkEditDialog.classPackage.Clear();\n\tFreeCOMFilePathBuf(&typePkEditDialog.filePath);\n\treturn (INT_PTR)TRUE;\n}'