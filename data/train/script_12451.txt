b'import Debug.Trace\nimport Text.Printf\n\nsmallest k ([], ws) = trace ("[], " ++ show ws) ws!!k\nsmallest k (zs, []) = trace (show zs ++ ", []") zs!!k\nsmallest k (zs, ws) =\n    case (a < b, k <= p + q) of\n        (True, True)   -> trace ("TT" ++ dump_vars k zs ws p q a b us vs) smallest k (zs, us)\n        (True, False)  -> trace ("TF" ++ dump_vars k zs ws p q a b us vs) smallest (k - p - 1) (ys, ws)\n        (False, True)  -> trace ("FT" ++ dump_vars k zs ws p q a b us vs) smallest k (xs, ws)\n        (False, False) -> trace ("FF" ++ dump_vars k zs ws p q a b us vs) smallest (k - q - 1) (zs, vs)\n    where p = (length zs) `div` 2\n          q = (length ws) `div` 2\n          (xs, a : ys) = splitAt p zs\n          (us, b : vs) = splitAt q ws\n\ndump_vars k zs ws p q a b us vs =\n    " k = " ++ (printf "%2d" k :: String) ++ " " ++\n    "zs = " ++ (printf "%15s" (show zs) :: String) ++ " " ++\n    "ws = " ++ (printf "%15s" (show ws) :: String) ++ " " ++\n    " p = " ++ (printf "%2d" p :: String) ++ " " ++\n    " q = " ++ (printf "%2d" q :: String) ++ " " ++\n    " a = " ++ (printf "%2d" a :: String) ++ " " ++\n    " b = " ++ (printf "%2d" b :: String) ++ " " ++\n    "us = " ++ (printf "%7s" (show us) :: String) ++ " " ++\n    "vs = " ++ (printf "%7s" (show vs) :: String) ++ " " ++\n    "kd = " ++ (printf "%2d" (p + q) :: String) \n\nxs = [1, 2, 3, 9]\nys = [4, 10, 13, 33, 67]\n\n'