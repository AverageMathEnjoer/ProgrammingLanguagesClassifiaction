b'/*\n * Copyright 2013 - 2016 Mario Arias\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.funktionale.playground.gs\n\n/**\n * Created by IntelliJ IDEA.\n * @author Mario Arias\n * Date: 15/04/15\n * Time: 10:53 PM\n */\n\n\nfun abs(n: Int): Int = if (n < 0) -n else n\n\nprivate fun formatAbs(x: Int) = "The absolute value of $x is ${abs(x)}"\n\n\nfun factorial_(n: Long): Long {\n    var result = 1L\n    (1..n).forEach { result *= it }\n    return result\n}\n\nfun factorial(n: Long): Long {\n    tailrec fun go(n: Long, acc: Long): Long {\n        return if (n <= 0) {\n            acc\n        } else {\n            go(n - 1, n * acc)\n        }\n    }\n    return go(n, 1)\n}\n\n//private fun formatFactorial(n: Long) = "The factorial of $n is ${factorial(n)}"\n\nfun fib_(n: Long): Long = when (n) {\n    0L -> 0\n    1L -> 1\n    else -> {\n        var a = 0L\n        var b = 1L\n        var c = 0L\n        (2..n).forEach {\n            c = a + b\n            a = b\n            b = c\n        }\n        c\n    }\n}\n\nfun fib(n: Long): Long {\n\n    tailrec fun go(n: Long, prev: Long, cur: Long): Long {\n        return if (n == 0L) prev\n        else go(n - 1, cur, prev + cur)\n\n    }\n    return go(n, 0, 1)\n}\n\nfun <T> formatResult(name: String, n: T, f: (T) -> T) = "the $name of $n is ${f(n)}"\n\nfun main(args: Array<String>) {\n\n    println(formatResult("absolute value", -42, ::abs))\n    println(formatResult("factorial", 20, ::factorial_))\n    println(formatResult("factorial", 20, ::factorial))\n    println(formatResult("fibonnaci", 92, ::fib_))\n    println(formatResult("fibonnaci", 92, ::fib))\n    println(formatResult("increment", 9) { x: Int -> x + 1 })\n    println(formatResult("increment", 7) { x:Int -> x + 1 })\n    println(formatResult("increment", 7, { it + 1 }))\n    println(formatResult("increment", 7) { it + 1 })\n}'