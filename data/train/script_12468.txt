b'/**\n * Copyright (C) 2020 Fernando Cejas Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n@file:Suppress("NOTHING_TO_INLINE", "EXTENSION_SHADOWED_BY_MEMBER")\n\npackage com.fernandocejas.sample.core.platform\n\nimport android.os.Parcel\nimport android.os.Parcelable\nimport java.math.BigDecimal\nimport java.math.BigInteger\nimport java.util.*\n\n//Interesting article about Parcelable and Kotlin:\n//https://medium.com/@BladeCoder/reducing-parcelable-boilerplate-code-using-kotlin-741c3124a49a\ninterface KParcelable : Parcelable {\n    override fun describeContents() = 0\n    override fun writeToParcel(dest: Parcel, flags: Int)\n}\n\n// Creator factory functions\ninline fun <reified T> parcelableCreator(crossinline create: (Parcel) -> T) =\n    object : Parcelable.Creator<T> {\n        override fun createFromParcel(source: Parcel) = create(source)\n        override fun newArray(size: Int) = arrayOfNulls<T>(size)\n    }\n\ninline fun <reified T> parcelableClassLoaderCreator(crossinline create: (Parcel, ClassLoader) -> T) =\n    object : Parcelable.ClassLoaderCreator<T> {\n        override fun createFromParcel(source: Parcel, loader: ClassLoader) = create(source, loader)\n        override fun createFromParcel(source: Parcel) = createFromParcel(\n            source, T::class.java.classLoader!!\n        )\n\n        override fun newArray(size: Int) = arrayOfNulls<T>(size)\n    }\n\n// Parcel extensions\n\ninline fun Parcel.readBoolean() = readInt() != 0\n\ninline fun Parcel.writeBoolean(value: Boolean) = writeInt(if (value) 1 else 0)\n\ninline fun <reified T : Enum<T>> Parcel.readEnum() =\n    readInt().let { if (it >= 0) enumValues<T>()[it] else null }\n\ninline fun <T : Enum<T>> Parcel.writeEnum(value: T?) = writeInt(value?.ordinal ?: -1)\n\ninline fun <T> Parcel.readNullable(reader: () -> T) = if (readInt() != 0) reader() else null\n\ninline fun <T> Parcel.writeNullable(value: T?, writer: (T) -> Unit) {\n    if (value != null) {\n        writeInt(1)\n        writer(value)\n    } else {\n        writeInt(0)\n    }\n}\n\nfun Parcel.readDate() = readNullable { Date(readLong()) }\n\nfun Parcel.writeDate(value: Date?) = writeNullable(value) { writeLong(it.time) }\n\nfun Parcel.readBigInteger() = readNullable { BigInteger(createByteArray()) }\n\nfun Parcel.writeBigInteger(value: BigInteger?) =\n    writeNullable(value) { writeByteArray(it.toByteArray()) }\n\nfun Parcel.readBigDecimal() = readNullable { BigDecimal(BigInteger(createByteArray()), readInt()) }\n\nfun Parcel.writeBigDecimal(value: BigDecimal?) = writeNullable(value) {\n    writeByteArray(it.unscaledValue().toByteArray())\n    writeInt(it.scale())\n}\n\nfun <T : Parcelable> Parcel.readTypedObjectCompat(c: Parcelable.Creator<T>) =\n    readNullable { c.createFromParcel(this) }\n\nfun <T : Parcelable> Parcel.writeTypedObjectCompat(value: T?, parcelableFlags: Int) =\n    writeNullable(value) { it.writeToParcel(this, parcelableFlags) }\n'