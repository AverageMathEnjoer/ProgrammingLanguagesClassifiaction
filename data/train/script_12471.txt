b'module Database.Beam.Migrate.Tool.MigrationCmd where\n\nimport           Database.Beam.Migrate.Tool.CmdLine\nimport           Database.Beam.Migrate.Tool.Registry\nimport           Database.Beam.Migrate.Tool.Diff\n\nimport qualified Data.HashSet as S\nimport           Data.Text (Text)\nimport           Data.UUID (UUID)\n\nresolveFormats :: MigrationRegistry -> UUID -> UUID -> [MigrationFormat]\n               -> IO [MigrationFormat]\nresolveFormats reg fromId toId [] = do\n  case (,) <$> lookupSchema fromId [] reg\n           <*> lookupSchema toId [] reg of\n    Nothing -> fail "Could not find schemas"\n    Just (fromSchema, toSchema) ->\n      let fromFormats = S.fromList $ registeredSchemaInfoFormats fromSchema\n          toFormats = S.fromList $ registeredSchemaInfoFormats toSchema\n\n          commonFormats = S.intersection fromFormats toFormats\n      in if S.null commonFormats\n         then fail "The schemas have no formats in common"\n         else pure (S.toList commonFormats)           \n           \nresolveFormats _ _ _ fmts = pure fmts  \n                         \n\nnewMigrationCmd :: MigrateCmdLine -> Text -> Text\n                -> Bool -> Bool -> [MigrationFormat]\n                -> IO ()\nnewMigrationCmd cmdLine from to autoGen leaveOpen fmts\' =\n    updatingRegistry cmdLine $ \\reg -> do\n      fromSrc <- parsePredicateFetchSourceSpec cmdLine reg from\n      toSrc <- parsePredicateFetchSourceSpec cmdLine reg to\n\n      -- TODO parallelize\n      (fromIdMaybe, fromPreds) <- getPredicatesFromSpec cmdLine reg fromSrc\n      (toIdMaybe,   toPreds)   <- getPredicatesFromSpec cmdLine reg toSrc\n\n      case (,) <$> fromIdMaybe <*> toIdMaybe of\n        Nothing -> fail "Could not find schemas"\n        Just (fromId, toId) -> do\n            fmts <- resolveFormats reg fromId toId fmts\'\n\n            case (,) <$> lookupSchema fromId fmts reg\n                     <*> lookupSchema toId   fmts reg of\n              Nothing -> fail "Could not find schemas with the given formats"\n              Just (fromSchema, toSchema) ->\n                  -- For each format, attempt to form a migration.\n                  fail "Unimplemented"\n'