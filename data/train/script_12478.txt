b'\xef\xbb\xbfusing Octokit;\nusing System;\nusing System.IO;\nusing System.Text;\nusing System.Text.RegularExpressions;\n\nnamespace UpdateStars\n{\n    class Program\n    {\n        const string AppName = "xamarin-update-stars";\n        const string GitHubToken = "INSERT YOUR GITHUB TOKEN HERE";\n\n        const string UrlRegex = @"https?:\\/\\/github.com\\/([A-Za-z0-9-.]+\\/[A-Za-z0-9-.]+)";\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine("Star Updater");\n\n            Console.WriteLine("Initialize");\n\n            // Initialize the GitHub client\n            var client = new GitHubClient(new ProductHeaderValue(AppName));\n            var tokenAuth = new Credentials(GitHubToken);\n            client.Credentials = tokenAuth;\n\n            // Read the README.md file\n            var filePath = "../../../../../README.md";\n            string[] lines = File.ReadAllLines(filePath, Encoding.UTF8);\n\n            Regex regex = new Regex(UrlRegex, RegexOptions.IgnoreCase);\n\n            foreach (var line in lines)\n            {\n                MatchCollection matches = regex.Matches(line);\n\n                if (matches.Count > 0)\n                {\n                    // Get repository info (owner and name)\n                    var url = matches[0].Value;\n                    Uri.TryCreate(url, UriKind.Absolute, out Uri uri);\n\n                    if (uri == null)\n                        break;\n\n                    var path = uri.PathAndQuery;\n                    var t1 = path.Split("/");\n                    var owner = t1[1];\n                    var name = t1[2];\n\n                    try\n                    {\n                        // Get repository stars\n                        Repository repository = client.Repository.Get(owner, name).Result;\n                        var stars = repository.StargazersCount;\n\n                        // Update README.md\n                        UpdateStars(filePath, line, name, stars);\n                    }\n                    catch (Exception ex)\n                    {\n                        if (ex.InnerException != null)\n                            Console.WriteLine($"An error has ocurred updating {name}. More information: {ex.InnerException.Message}");\n                        else\n                            Console.WriteLine($"An error has ocurred updating {name}. More information: {ex.Message}");\n                    }\n                }\n            }\n\n            Console.WriteLine("README.md Updated!");\n        }\n\n        static void UpdateStars(string filePath, string line, string name, int stars)\n        {\n            if (stars == 0)\n                return;\n\n            Console.WriteLine($"Updating {name} to add {stars} stars");\n\n            string text = File.ReadAllText(filePath);\n\n            var newLine = line;\n\n            // Remove stars (if exists)\n            if (line.Contains("\xe2\x98\x85"))\n            {\n                var starText = line.Substring(0, line.IndexOf(\']\'));\n                var starIndex = starText.LastIndexOf(" ");\n                var starCount = starText.Length - starIndex;\n                newLine = line.Remove(starIndex, starCount);\n            }\n\n            // Add updated stars\n            var index = newLine.IndexOf(\']\');\n            newLine = newLine.Insert(index, $" \xe2\x98\x85{stars}");\n            text = text.Replace(line, newLine);\n\n            File.WriteAllText(filePath, text);\n        }\n    }\n}'