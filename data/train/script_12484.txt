b'module Database.Beam.Migrate.Tool.Init where\n\nimport           Database.Beam.Migrate.Tool.CmdLine\nimport           Database.Beam.Migrate.Tool.Registry\n\nimport qualified Data.UUID.V4 as UUID\nimport qualified Data.Yaml as Yaml\n\nimport           System.Directory\n\ninitBeamMigrate :: MigrateCmdLine -> InitCommand -> IO ()\ninitBeamMigrate _ initCmd = do\n  alreadyInitialized <- doesPathExist ".beam-migrate"\n\n  if alreadyInitialized then fail ".beam-migrate already exists. Run \'beam-migrate clean\'"\n    else do\n      curDir <- getCurrentDirectory\n      headUuid <- UUID.nextRandom\n\n      let registry\' = MigrationRegistry\n                    { migrationRegistryDatabases = mempty\n                    , migrationRegistryHead      = MigrationHeadBranch "master"\n\n                    , migrationRegistrySchemas   = []\n                    , migrationRegistryMigrations = []\n\n                    , migrationRegistryBranches = [ MigrationBranch "master" headUuid ]\n\n                    , migrationRegistrySrcDir = initModulePath initCmd\n                    , migrationRegistrySchemaModule = initModule initCmd\n\n                    , migrationRegistryUserInfo = Nothing\n\n                    , migrationRegistryMode = BeamMigrateReady }\n\n      Yaml.encodeFile ".beam-migrate" registry\'\n      putStrLn ("Beam migrations initialized in " ++ curDir)\n  where\n'