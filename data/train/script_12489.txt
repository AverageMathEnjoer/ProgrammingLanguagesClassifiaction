b'{-# LANGUAGE BangPatterns #-}\n\nmodule Util.Histo\n  ( aggregateCount,\n    histoAdd,\n  )\nwhere\n\nimport Data.List (group, sort)\nimport Data.Map (Map)\nimport qualified Data.Map as Map\nimport Data.Maybe (mapMaybe)\n\naggregateCount :: [String] -> [(String, Int)]\naggregateCount = mapMaybe count . group . sort\n  where\n    count ys@(x : _) = Just (x, length ys)\n    count [] = Nothing\n\nhistoAdd :: Map String Int -> (String, Int) -> Map String Int\nhistoAdd !hist (key, value) = Map.alter upd key hist\n  where\n    upd Nothing = Just value\n    upd (Just value0) = Just (value0 + value)\n'