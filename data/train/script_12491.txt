b"module Hoodle.Widget.Layer where\n\nimport Control.Lens (over, set, view, (.~))\nimport Control.Monad.State (get, liftIO, modify, put)\nimport Data.Functor.Identity (Identity (..))\nimport Data.Hoodle.BBox (BBox (..))\nimport Data.Hoodle.Simple (Dimension (Dim))\nimport Data.List (delete)\nimport Data.Sequence (fromList)\nimport Data.Time\n  ( UTCTime,\n    getCurrentTime,\n  )\nimport Graphics.Hoodle.Render.Util.HitTest (isPointInBBox)\nimport qualified Graphics.Rendering.Cairo as Cairo\nimport Hoodle.Accessor\n  ( pureUpdateUhdl,\n    renderCache,\n  )\nimport Hoodle.Coroutine.Draw\n  ( invalidate,\n    invalidateInBBox,\n    nextevent,\n  )\nimport Hoodle.Coroutine.Layer\n  ( gotoNextLayer,\n    gotoPrevLayer,\n  )\nimport Hoodle.Coroutine.Pen (processWithDefTimeInterval)\nimport Hoodle.Device (PointerCoord)\nimport Hoodle.HitTest (hitLassoPoint)\nimport Hoodle.Type.Canvas\n  ( CanvasId,\n    CanvasInfo,\n    canvasWidgets,\n    forBoth,\n    forBoth',\n    unboxBiAct,\n    unboxBiXform,\n    unboxLens,\n  )\nimport Hoodle.Type.Coroutine (MainCoroutine)\nimport Hoodle.Type.Enum (DrawFlag (Efficient))\nimport Hoodle.Type.Event (UserEvent (PenMove, PenUp))\nimport Hoodle.Type.HoodleState\n  ( currentCanvasInfo,\n    currentUnit,\n    getCanvasInfo,\n    getHoodle,\n    setCanvasInfo,\n    unitHoodles,\n  )\nimport Hoodle.Type.PageArrangement\n  ( CanvasCoordinate (..),\n    CanvasDimension (..),\n  )\nimport Hoodle.Type.Widget\n  ( WidgetItem (LayerWidget),\n    allWidgets,\n    doesUseLayerWidget,\n    layerWidgetConfig,\n    layerWidgetPosition,\n    layerWidgetShowContent,\n    widgetConfig,\n  )\nimport Hoodle.View.Coordinate\n  ( CanvasGeometry,\n    canvasDim,\n    desktop2Canvas,\n    device2Desktop,\n  )\nimport Hoodle.View.Draw\n  ( canvasImageSurface,\n    doubleBufferFlush,\n    drawLayerWidget,\n    drawWidgets,\n    virtualDoubleBufferDraw,\n  )\n\n-- |\ndata LWAction = Close | ToggleShowContent | Move (CanvasCoordinate, CanvasCoordinate)\n\ncheckPointerInLayer ::\n  (CanvasId, CanvasInfo a, CanvasGeometry) ->\n  PointerCoord ->\n  Maybe LWAction\ncheckPointerInLayer (_cid, cinfo, geometry) pcoord\n  | b =\n    let oxy@(CvsCoord (x, y)) = (desktop2Canvas geometry . device2Desktop geometry) pcoord\n        owxy@(CvsCoord (x0, y0)) = view (canvasWidgets . layerWidgetConfig . layerWidgetPosition) cinfo\n        obbox = BBox (x0, y0) (x0 + 100, y0 + 100)\n        closebbox = BBox (x0, y0) (x0 + 10, y0 + 10)\n        r\n          | isPointInBBox closebbox (x, y) = Just Close\n          | hitLassoPoint (fromList [(x0 + 90, y0 + 40), (x0 + 100, y0 + 50), (x0 + 90, y0 + 60)]) (x, y) = Just ToggleShowContent\n          | isPointInBBox obbox (x, y) = Just (Move (oxy, owxy))\n          | otherwise = Nothing\n     in r\n  | otherwise = Nothing\n  where\n    b = view (canvasWidgets . widgetConfig . doesUseLayerWidget) cinfo\n\nstartLayerWidget ::\n  (CanvasId, CanvasInfo a, CanvasGeometry) ->\n  LWAction ->\n  MainCoroutine ()\nstartLayerWidget (cid, _cinfo, _geometry) Close = toggleLayer cid\nstartLayerWidget (cid, _cinfo, _geometry) ToggleShowContent = do\n  modify $\n    over (unitHoodles . currentUnit) $\n      over (currentCanvasInfo . unboxLens (canvasWidgets . layerWidgetConfig . layerWidgetShowContent)) not\n  invalidate cid\nstartLayerWidget (cid, cinfo, geometry) (Move (oxy, owxy)) = do\n  xst <- get\n  cache <- renderCache\n  let uhdl = view (unitHoodles . currentUnit) xst\n      hdl = getHoodle uhdl\n  (srcsfc, Dim wsfc hsfc) <- liftIO (canvasImageSurface cache cid Nothing geometry hdl)\n  -- need to draw other widgets here\n  let otherwidgets = delete LayerWidget allWidgets\n  liftIO $ Cairo.renderWith srcsfc (drawWidgets otherwidgets hdl cinfo Nothing)\n  -- end : need to draw other widgets here ^^^\n  tgtsfc <-\n    liftIO $\n      Cairo.createImageSurface\n        Cairo.FormatARGB32\n        (floor wsfc)\n        (floor hsfc)\n  ctime <- liftIO getCurrentTime\n  let CvsCoord (x0, y0) = owxy\n      CvsCoord (x, y) = oxy\n      act\n        | hitLassoPoint (fromList [(x0 + 80, y0), (x0 + 100, y0), (x0 + 100, y0 + 20)]) (x, y) = gotoNextLayer\n        | hitLassoPoint (fromList [(x0, y0 + 80), (x0, y0 + 100), (x0 + 20, y0 + 100)]) (x, y) = gotoPrevLayer\n        | otherwise = manipulateLW cid geometry (srcsfc, tgtsfc) owxy oxy ctime\n  act\n  liftIO $ Cairo.surfaceFinish srcsfc\n  liftIO $ Cairo.surfaceFinish tgtsfc\n\n-- | main event loop for layer widget\nmanipulateLW ::\n  CanvasId ->\n  CanvasGeometry ->\n  (Cairo.Surface, Cairo.Surface) ->\n  CanvasCoordinate ->\n  CanvasCoordinate ->\n  UTCTime ->\n  MainCoroutine ()\nmanipulateLW cid geometry (srcsfc, tgtsfc) owxy oxy otime = do\n  r <- nextevent\n  case r of\n    PenMove _ pcoord -> do\n      processWithDefTimeInterval\n        (manipulateLW cid geometry (srcsfc, tgtsfc) owxy oxy)\n        ( \\ctime ->\n            moveLayerWidget cid geometry (srcsfc, tgtsfc) owxy oxy pcoord\n              >> manipulateLW cid geometry (srcsfc, tgtsfc) owxy oxy ctime\n        )\n        otime\n    PenUp _ _pcoord -> invalidate cid\n    _ -> return ()\n\nmoveLayerWidget ::\n  CanvasId ->\n  CanvasGeometry ->\n  (Cairo.Surface, Cairo.Surface) ->\n  CanvasCoordinate ->\n  CanvasCoordinate ->\n  PointerCoord ->\n  MainCoroutine ()\nmoveLayerWidget cid geometry (srcsfc, tgtsfc) (CvsCoord (xw, yw)) (CvsCoord (x0, y0)) pcoord = do\n  let CvsCoord (x, y) = (desktop2Canvas geometry . device2Desktop geometry) pcoord\n  get >>= \\xst -> do\n    let uhdl = view (unitHoodles . currentUnit) xst\n        CanvasDimension (Dim cw ch) = canvasDim geometry\n        cinfobox = getCanvasInfo cid uhdl\n        nposx\n          | xw + x - x0 < -50 = -50\n          | xw + x - x0 > cw - 50 = cw - 50\n          | otherwise = xw + x - x0\n        nposy\n          | yw + y - y0 < -50 = -50\n          | yw + y - y0 > ch - 50 = ch - 50\n          | otherwise = yw + y - y0\n        nwpos = CvsCoord (nposx, nposy)\n        changeact :: CanvasInfo a -> CanvasInfo a\n        changeact = set (canvasWidgets . layerWidgetConfig . layerWidgetPosition) nwpos\n        ncinfobox = (runIdentity . forBoth unboxBiXform (return . changeact)) cinfobox\n    put $ (unitHoodles . currentUnit .~ setCanvasInfo (cid, ncinfobox) uhdl) xst\n    --\n    xst2 <- get\n    let uhdl2 = view (unitHoodles . currentUnit) xst2\n        hdl2 = getHoodle uhdl2\n        cinfobox2 = getCanvasInfo cid uhdl2\n    liftIO $\n      forBoth'\n        unboxBiAct\n        ( \\cinfo ->\n            virtualDoubleBufferDraw\n              srcsfc\n              tgtsfc\n              (return ())\n              (drawLayerWidget hdl2 cinfo Nothing nwpos)\n              >> doubleBufferFlush tgtsfc cinfo\n        )\n        cinfobox2\n\n-- |\ntoggleLayer :: CanvasId -> MainCoroutine ()\ntoggleLayer cid = do\n  pureUpdateUhdl $ \\uhdl ->\n    let ncinfobox =\n          ( over (unboxLens (canvasWidgets . widgetConfig . doesUseLayerWidget)) not\n              . getCanvasInfo cid\n          )\n            uhdl\n     in setCanvasInfo (cid, ncinfobox) uhdl\n  invalidateInBBox Nothing Efficient cid\n"