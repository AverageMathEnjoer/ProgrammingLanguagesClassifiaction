b'package droidninja.filepicker.fragments\n\nimport android.content.Context\nimport android.os.Bundle\nimport com.google.android.material.tabs.TabLayout\nimport androidx.viewpager.widget.ViewPager\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport droidninja.filepicker.FilePickerConst\nimport droidninja.filepicker.PickerManager\nimport droidninja.filepicker.R\nimport droidninja.filepicker.adapters.SectionsPagerAdapter\n\n\nclass MediaPickerFragment : BaseFragment() {\n\n    lateinit var tabLayout: TabLayout\n\n    lateinit var viewPager: ViewPager\n\n    private var mListener: MediaPickerFragmentListener? = null\n\n\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n                              savedInstanceState: Bundle?): View? {\n        // Inflate the layout for this fragment\n        return inflater.inflate(R.layout.fragment_media_picker, container, false)\n    }\n\n    override fun onAttach(context: Context) {\n        super.onAttach(context)\n        if (context is MediaPickerFragmentListener) {\n            mListener = context\n        } else {\n            throw RuntimeException("$context must implement MediaPickerFragment")\n        }\n    }\n\n    override fun onDetach() {\n        super.onDetach()\n        mListener = null\n    }\n\n    interface MediaPickerFragmentListener\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        initView(view)\n    }\n\n    private fun initView(view: View) {\n        tabLayout = view.findViewById(R.id.tabs)\n        viewPager = view.findViewById(R.id.viewPager)\n        tabLayout.tabGravity = TabLayout.GRAVITY_FILL\n        tabLayout.tabMode = TabLayout.MODE_FIXED\n\n        val adapter = SectionsPagerAdapter(childFragmentManager)\n\n        if (PickerManager.showImages()) {\n            if (PickerManager.isShowFolderView)\n                adapter.addFragment(MediaFolderPickerFragment.newInstance(FilePickerConst.MEDIA_TYPE_IMAGE, PickerManager.imageFileSize, PickerManager.videoFileSize), getString(R.string.images))\n            else\n                adapter.addFragment(MediaDetailPickerFragment.newInstance(FilePickerConst.MEDIA_TYPE_IMAGE, PickerManager.imageFileSize, PickerManager.videoFileSize), getString(R.string.images))\n        } else\n            tabLayout.visibility = View.GONE\n\n        if (PickerManager.showVideo()) {\n            if (PickerManager.isShowFolderView)\n                adapter.addFragment(MediaFolderPickerFragment.newInstance(FilePickerConst.MEDIA_TYPE_VIDEO, PickerManager.imageFileSize, PickerManager.videoFileSize), getString(R.string.videos))\n            else\n                adapter.addFragment(MediaDetailPickerFragment.newInstance(FilePickerConst.MEDIA_TYPE_VIDEO, PickerManager.imageFileSize, PickerManager.videoFileSize), getString(R.string.videos))\n        } else\n            tabLayout.visibility = View.GONE\n\n        viewPager.adapter = adapter\n        tabLayout.setupWithViewPager(viewPager)\n    }\n\n    companion object {\n\n        fun newInstance(): MediaPickerFragment {\n            return MediaPickerFragment()\n        }\n    }\n}// Required empty public constructor\n'