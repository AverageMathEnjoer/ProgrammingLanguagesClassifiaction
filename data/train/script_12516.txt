b'//  $Header$\r\nusing System;\r\nusing System.Data;\r\nusing System.Collections;\r\nusing System.Collections.Generic;\r\nusing System.Threading;\r\nusing System.Security.Cryptography;\r\nusing System.Text;\r\nusing System.Diagnostics;\r\nusing System.Security.Principal;\r\nusing System.IO;\r\nusing System.Reflection;\r\n\r\nnamespace CS_SQLite3\r\n{\r\n\r\n    using sqlite = CSSQLite.sqlite3;\r\n    using Vdbe = CSSQLite.Vdbe;\r\n  /// <summary>\r\n  /// C#-SQLite wrapper with functions for opening, closing and executing queries.\r\n  /// </summary>\r\n    public class SQLiteDatabase\r\n    {\r\n        // pointer to database\r\n        private sqlite db;\r\n\r\n        /// <summary>\r\n        /// Creates new instance of SQLiteBase class with no database attached.\r\n        /// </summary>\r\n        public SQLiteDatabase()\r\n        {\r\n            db = null;\r\n        }\r\n        /// <summary>\r\n        /// Creates new instance of SQLiteDatabase class and opens database with given name.\r\n        /// </summary>\r\n        /// <param name="DatabaseName">Name (and path) to SQLite database file</param>\r\n        public SQLiteDatabase( String DatabaseName )\r\n        {\r\n            OpenDatabase( DatabaseName );\r\n        }\r\n\r\n        /// <summary>\r\n        /// Opens database. \r\n        /// </summary>\r\n        /// <param name="DatabaseName">Name of database file</param>\r\n        public void OpenDatabase( String DatabaseName )\r\n        {\r\n            // opens database \r\n            if ( CSSQLite.sqlite3_open( DatabaseName, ref db ) != CSSQLite.SQLITE_OK )\r\n            {\r\n            // if there is some error, database pointer is set to 0 and exception is throws\r\n            db = null;\r\n            throw new Exception( "Error with opening database " + DatabaseName + "!" );\r\n            }\r\n        }\r\n\r\n        /// <summary>\r\n        /// Closes opened database.\r\n        /// </summary>\r\n        public void CloseDatabase()\r\n        {\r\n            // closes the database if there is one opened\r\n            if ( db != null )\r\n            {\r\n            CSSQLite.sqlite3_close( db );\r\n            }\r\n        }\r\n\r\n        /// <summary>\r\n        /// Returns connection\r\n        /// </summary>\r\n        public sqlite Connection()\r\n        {\r\n            return db;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Returns the list of tables in opened database.\r\n        /// </summary>\r\n        /// <returns></returns>\r\n        public ArrayList GetTables()\r\n        {\r\n            // executes query that select names of all tables in master table of the database\r\n            String query = "SELECT name FROM sqlite_master " +\r\n                                        "WHERE type = \'table\'" +\r\n                                        "ORDER BY 1";\r\n            DataTable table = ExecuteQuery( query );\r\n\r\n            // Return all table names in the ArrayList\r\n            ArrayList list = new ArrayList();\r\n            foreach ( DataRow row in table.Rows )\r\n            {\r\n            list.Add( row.ItemArray[0].ToString() );\r\n            }\r\n            return list;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Executes query that does not return anything (e.g. UPDATE, INSERT, DELETE).\r\n        /// </summary>\r\n        /// <param name="query"></param>\r\n        public void ExecuteNonQuery( String query )\r\n        {\r\n            // calles SQLite function that executes non-query\r\n            CSSQLite.sqlite3_exec( db, query, 0, 0, 0 );\r\n            // if there is error, excetion is thrown\r\n            if ( db.errCode != CSSQLite.SQLITE_OK )\r\n            throw new Exception( "Error with executing non-query: \\"" + query + "\\"!\\n" + CSSQLite.sqlite3_errmsg( db ) );\r\n        }\r\n\r\n        /// <summary>\r\n        /// Executes query that does return something (e.g. SELECT).\r\n        /// </summary>\r\n        /// <param name="query"></param>\r\n        /// <returns></returns>\r\n        public DataTable ExecuteQuery( String query )\r\n        {\r\n            // compiled query\r\n            SQLiteVdbe statement = new SQLiteVdbe(this, query);\r\n\r\n            // table for result of query\r\n            DataTable table = new DataTable();\r\n\r\n            // create new instance of DataTable with name "resultTable"\r\n            table = new DataTable( "resultTable" );\r\n\r\n            // reads rows\r\n            do { } while ( ReadNextRow( statement.VirtualMachine(), table ) == CSSQLite.SQLITE_ROW );\r\n            // finalize executing this query\r\n            statement.Close();\r\n            // returns table\r\n            return table;\r\n        }\r\n\r\n        // private function for reading rows and creating table and columns\r\n        private int ReadNextRow( Vdbe vm, DataTable table )\r\n        {\r\n            int columnCount = table.Columns.Count;\r\n            if ( columnCount == 0 )\r\n            {\r\n            if ( ( columnCount = ReadColumnNames( vm, table ) ) == 0 ) return CSSQLite.SQLITE_ERROR;\r\n            }\r\n\r\n            int resultType;\r\n            if ( ( resultType = CSSQLite.sqlite3_step( vm) ) == CSSQLite.SQLITE_ROW )\r\n            {\r\n            object[] columnValues = new object[columnCount];\r\n\r\n            for ( int i = 0 ; i < columnCount ; i++ )\r\n            {\r\n                int columnType = CSSQLite.sqlite3_column_type( vm, i );\r\n                switch ( columnType )\r\n                {\r\n                case CSSQLite.SQLITE_INTEGER:\r\n                    {\r\n                    columnValues[i] = CSSQLite.sqlite3_column_int( vm, i );\r\n                    break;\r\n                    }\r\n                case CSSQLite.SQLITE_FLOAT:\r\n                    {\r\n                    columnValues[i] = CSSQLite.sqlite3_column_double( vm, i );\r\n                    break;\r\n                    }\r\n                case CSSQLite.SQLITE_TEXT:\r\n                    {\r\n                    columnValues[i] = CSSQLite.sqlite3_column_text( vm, i );\r\n                    break;\r\n                    }\r\n                case CSSQLite.SQLITE_BLOB:\r\n                            {\r\n                                // Something goes wrong between adding this as a column value and converting to a row value.\r\n                                byte[] encBlob = CSSQLite.sqlite3_column_blob(vm, i);\r\n                                string base64 = Convert.ToBase64String(encBlob);\r\n                                //byte[] decPass = ProtectedData.Unprotect(encBlob, null, DataProtectionScope.CurrentUser);\r\n                                //string password = Encoding.ASCII.GetString(decPass);\r\n                                //columnValues[i] = password;\r\n                                columnValues[i] = base64;\r\n                                \r\n                    break;\r\n                    }\r\n                default:\r\n                    {\r\n                    columnValues[i] = "";\r\n                    break;\r\n                    }\r\n                }\r\n            }\r\n            table.Rows.Add( columnValues );\r\n            }\r\n            return resultType;\r\n        }\r\n        // private function for creating Column Names\r\n        // Return number of colums read\r\n        private int ReadColumnNames( Vdbe vm, DataTable table )\r\n        {\r\n\r\n            String columnName = "";\r\n            int columnType = 0;\r\n            // returns number of columns returned by statement\r\n            int columnCount = CSSQLite.sqlite3_column_count( vm );\r\n            object[] columnValues = new object[columnCount];\r\n\r\n            try\r\n            {\r\n            // reads columns one by one\r\n            for ( int i = 0 ; i < columnCount ; i++ )\r\n            {\r\n                columnName = CSSQLite.sqlite3_column_name( vm, i );\r\n                columnType = CSSQLite.sqlite3_column_type( vm, i );\r\n                switch ( columnType )\r\n                {\r\n                case CSSQLite.SQLITE_INTEGER:\r\n                    {\r\n                    // adds new integer column to table\r\n                    table.Columns.Add( columnName, Type.GetType( "System.Int64" ) );\r\n                    break;\r\n                    }\r\n                case CSSQLite.SQLITE_FLOAT:\r\n                    {\r\n                    table.Columns.Add( columnName, Type.GetType( "System.Double" ) );\r\n                    break;\r\n                    }\r\n                case CSSQLite.SQLITE_TEXT:\r\n                    {\r\n                    table.Columns.Add( columnName, typeof(string) );\r\n                    break;\r\n                    }\r\n                case CSSQLite.SQLITE_BLOB:\r\n                    {\r\n                    table.Columns.Add( columnName, typeof(byte[]) );\r\n                    break;\r\n                    }\r\n                default:\r\n                    {\r\n                    table.Columns.Add( columnName, Type.GetType( "System.String" ) );\r\n                    break;\r\n                    }\r\n                }\r\n            }\r\n            }\r\n            catch\r\n            {\r\n            return 0;\r\n            }\r\n            return table.Columns.Count;\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n'