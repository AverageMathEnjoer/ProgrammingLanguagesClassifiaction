b'\xef\xbb\xbfusing System;\nusing System.Collections.Generic;\nusing System.Text;\nusing Castle.DynamicProxy;\n\nnamespace Core.Utilities.Interceptors\n{\n    public abstract class MethodInterception:MethodInterceptionBaseAttribute\n    {\n        protected virtual void OnBefore(IInvocation invocation) { }\n        protected virtual void OnAfter(IInvocation invocation) { }\n        protected virtual void OnException(IInvocation invocation,System.Exception e) { }\n        protected virtual void OnSuccess(IInvocation invocation) { }\n        public override void Intercept(IInvocation invocation)\n        {\n            var isSuccess = true;\n            OnBefore(invocation);\n            try\n            {\n                invocation.Proceed();\n            }\n            catch (Exception e)\n            {\n                isSuccess = false;\n                OnException(invocation,e);\n                throw;\n            }\n            finally\n            {\n                if (isSuccess)\n                {\n                    OnSuccess(invocation);\n                }\n            }\n            OnAfter(invocation);\n        }\n    }\n}\n'