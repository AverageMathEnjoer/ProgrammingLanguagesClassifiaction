b'package droidninja.filepicker\n\nimport android.annotation.SuppressLint\nimport android.app.Activity\nimport android.os.Bundle\nimport androidx.recyclerview.widget.DefaultItemAnimator\nimport androidx.recyclerview.widget.OrientationHelper\nimport androidx.recyclerview.widget.RecyclerView\nimport androidx.recyclerview.widget.StaggeredGridLayoutManager\nimport android.view.Menu\nimport android.view.MenuItem\nimport android.view.View\nimport android.widget.TextView\nimport androidx.lifecycle.Observer\nimport androidx.lifecycle.ViewModelProvider\nimport com.bumptech.glide.Glide\nimport com.bumptech.glide.RequestManager\nimport droidninja.filepicker.adapters.FileAdapterListener\nimport droidninja.filepicker.adapters.PhotoGridAdapter\nimport droidninja.filepicker.models.Media\nimport droidninja.filepicker.models.PhotoDirectory\nimport droidninja.filepicker.utils.AndroidLifecycleUtils\nimport droidninja.filepicker.viewmodels.VMMediaPicker\nimport java.util.ArrayList\nimport java.util.Comparator\n\nclass MediaDetailsActivity : BaseFilePickerActivity(), FileAdapterListener {\n    private var recyclerView: RecyclerView? = null\n    private var emptyView: TextView? = null\n    private lateinit var mGlideRequestManager: RequestManager\n    private var photoGridAdapter: PhotoGridAdapter? = null\n    private var fileType: Int = 0\n    private var imageFileSize: Int = FilePickerConst.DEFAULT_FILE_SIZE\n    private var videoFileSize: Int = FilePickerConst.DEFAULT_FILE_SIZE\n    private var selectAllItem: MenuItem? = null\n    private var photoDirectory: PhotoDirectory? = null\n    lateinit var viewModel: VMMediaPicker\n\n    @SuppressLint("MissingSuperCall")\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState, R.layout.activity_media_details)\n    }\n\n    override fun initView() {\n        viewModel = ViewModelProvider(this, ViewModelProvider.AndroidViewModelFactory(application)).get(VMMediaPicker::class.java)\n        mGlideRequestManager = Glide.with(this)\n        val intent = intent\n        if (intent != null) {\n\n            fileType = intent.getIntExtra(FilePickerConst.EXTRA_FILE_TYPE, FilePickerConst.MEDIA_TYPE_IMAGE)\n            imageFileSize = intent.getIntExtra(FilePickerConst.EXTRA_IMAGE_FILE_SIZE, FilePickerConst.DEFAULT_FILE_SIZE)\n            videoFileSize = intent.getIntExtra(FilePickerConst.EXTRA_VIDEO_FILE_SIZE, FilePickerConst.DEFAULT_FILE_SIZE)\n            photoDirectory = intent.getParcelableExtra(PhotoDirectory::class.java.simpleName)\n            if (photoDirectory != null) {\n                setUpView()\n                setTitle(0)\n            }\n        }\n    }\n\n    override fun setTitle(count: Int) {\n        val actionBar = supportActionBar\n        if (actionBar != null) {\n            actionBar.setDisplayHomeAsUpEnabled(true)\n            val maxCount = PickerManager.getMaxCount()\n            if (maxCount == -1 && count > 0) {\n                actionBar.title = String.format(getString(R.string.attachments_num), count)\n            } else if (maxCount > 0 && count > 0) {\n                actionBar.title = String.format(getString(R.string.attachments_title_text), count, maxCount)\n            } else {\n                actionBar.title = photoDirectory?.name\n            }\n        }\n    }\n\n    private fun setUpView() {\n        recyclerView = findViewById(R.id.recyclerview)\n        emptyView = findViewById(R.id.empty_view)\n\n        val spanCount = PickerManager.spanTypes[FilePickerConst.SPAN_TYPE.DETAIL_SPAN] ?: 3\n        val layoutManager = StaggeredGridLayoutManager(spanCount, OrientationHelper.VERTICAL)\n        layoutManager.gapStrategy = StaggeredGridLayoutManager.GAP_HANDLING_MOVE_ITEMS_BETWEEN_SPANS\n        recyclerView?.layoutManager = layoutManager\n        recyclerView?.itemAnimator = DefaultItemAnimator()\n\n        recyclerView?.addOnScrollListener(object : RecyclerView.OnScrollListener() {\n            override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) {\n                super.onScrolled(recyclerView, dx, dy)\n                // Log.d(">>> Picker >>>", "dy = " + dy);\n                if (Math.abs(dy) > SCROLL_THRESHOLD) {\n                    mGlideRequestManager.pauseRequests()\n                } else {\n                    resumeRequestsIfNotDestroyed()\n                }\n            }\n\n            override fun onScrollStateChanged(recyclerView: RecyclerView, newState: Int) {\n                if (newState == RecyclerView.SCROLL_STATE_IDLE) {\n                    resumeRequestsIfNotDestroyed()\n                }\n            }\n        })\n\n        viewModel.lvMediaData.observe(this, Observer { data ->\n            updateList(data)\n        })\n        viewModel.getMedia(bucketId = photoDirectory?.bucketId, mediaType = fileType, imageFileSize = imageFileSize, videoFileSize = videoFileSize)\n    }\n\n    private fun updateList(medias: List<Media>) {\n        if (medias.isNotEmpty()) {\n            emptyView?.visibility = View.GONE\n            recyclerView?.visibility = View.VISIBLE\n        } else {\n            emptyView?.visibility = View.VISIBLE\n            recyclerView?.visibility = View.GONE\n            return\n        }\n\n        if (photoGridAdapter != null) {\n            photoGridAdapter?.setData(medias, PickerManager.selectedPhotos)\n        } else {\n            photoGridAdapter = PhotoGridAdapter(this, mGlideRequestManager, medias,\n                    PickerManager.selectedPhotos, false, this)\n            recyclerView?.adapter = photoGridAdapter\n        }\n\n        if (PickerManager.getMaxCount() == -1) {\n            if (photoGridAdapter != null && selectAllItem != null) {\n                if (photoGridAdapter?.itemCount == photoGridAdapter?.selectedItemCount) {\n                    selectAllItem?.setIcon(R.drawable.ic_select_all)\n                    selectAllItem?.isChecked = true\n                }\n            }\n            setTitle(PickerManager.currentCount)\n        }\n    }\n\n    private fun resumeRequestsIfNotDestroyed() {\n        if (!AndroidLifecycleUtils.canLoadImage(this)) {\n            return\n        }\n\n        mGlideRequestManager.resumeRequests()\n    }\n\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\n        menuInflater.inflate(R.menu.media_detail_menu, menu)\n        selectAllItem = menu.findItem(R.id.action_select)\n        selectAllItem?.isVisible = PickerManager.hasSelectAll()\n        menu.findItem(R.id.action_done)?.isVisible = PickerManager.getMaxCount() > 1\n\n        return super.onCreateOptionsMenu(menu)\n    }\n\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\n        val itemId = item.itemId\n        if (itemId == R.id.action_done) {\n            setResult(Activity.RESULT_OK, null)\n            finish()\n\n            return true\n        } else if (itemId == R.id.action_select) {\n            selectAllItem?.let {\n                photoGridAdapter?.let { adapter ->\n                    if (it.isChecked) {\n                        PickerManager.deleteMedia(adapter.selectedPaths)\n                        adapter.clearSelection()\n\n                        it.setIcon(R.drawable.ic_deselect_all)\n                    } else {\n                        adapter.selectAll()\n                        PickerManager.add(adapter.selectedPaths, FilePickerConst.FILE_TYPE_MEDIA)\n                        it.setIcon(R.drawable.ic_select_all)\n                    }\n                    it.isChecked = !it.isChecked\n                    setTitle(PickerManager.currentCount)\n                }\n            }\n            return true\n        } else if (itemId == android.R.id.home) {\n            onBackPressed()\n            return true\n        }\n        return super.onOptionsItemSelected(item)\n    }\n\n    override fun onItemSelected() {\n        val maxCount = PickerManager.getMaxCount()\n        if (maxCount == 1) {\n            setResult(Activity.RESULT_OK, null)\n            finish()\n        }\n        setTitle(PickerManager.currentCount)\n    }\n\n    override fun onBackPressed() {\n        setResult(Activity.RESULT_CANCELED, null)\n        finish()\n    }\n\n    companion object {\n\n        private val SCROLL_THRESHOLD = 30\n    }\n}\n'