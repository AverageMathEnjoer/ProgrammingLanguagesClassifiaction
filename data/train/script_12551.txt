b'package com.db.williamchart.view\n\nimport android.content.Context\nimport android.content.res.TypedArray\nimport android.graphics.Paint\nimport android.util.AttributeSet\nimport androidx.annotation.ColorInt\nimport com.db.williamchart.ChartContract\nimport com.db.williamchart.R\nimport com.db.williamchart.animation.DefaultHorizontalAnimation\nimport com.db.williamchart.animation.NoAnimation\nimport com.db.williamchart.data.configuration.BarChartConfiguration\nimport com.db.williamchart.data.configuration.ChartConfiguration\nimport com.db.williamchart.data.Frame\nimport com.db.williamchart.data.Label\nimport com.db.williamchart.data.Paddings\nimport com.db.williamchart.data.toRect\nimport com.db.williamchart.data.toRectF\nimport com.db.williamchart.extensions.obtainStyledAttributes\nimport com.db.williamchart.renderer.HorizontalBarChartRenderer\n\nclass HorizontalBarChartView @JvmOverloads constructor(\n    context: Context,\n    attrs: AttributeSet? = null,\n    defStyleAttr: Int = 0\n) : AxisChartView(context, attrs, defStyleAttr), ChartContract.BarView {\n\n    @Suppress("MemberVisibilityCanBePrivate")\n    var spacing = defaultSpacing\n\n    @ColorInt\n    @Suppress("MemberVisibilityCanBePrivate")\n    var barsColor: Int = defaultBarsColor\n\n    @Suppress("MemberVisibilityCanBePrivate")\n    var barRadius: Float = defaultBarsRadius\n\n    @Suppress("MemberVisibilityCanBePrivate")\n    var barsBackgroundColor: Int = -1\n\n    override val chartConfiguration: ChartConfiguration\n        get() = BarChartConfiguration(\n            measuredWidth,\n            measuredHeight,\n            Paddings(\n                paddingLeft.toFloat(),\n                paddingTop.toFloat(),\n                paddingRight.toFloat(),\n                paddingBottom.toFloat()\n            ),\n            axis,\n            labelsSize,\n            scale,\n            labelsFormatter,\n            barsBackgroundColor,\n            spacing\n        )\n\n    init {\n        renderer = HorizontalBarChartRenderer(this, painter, NoAnimation())\n        animation = DefaultHorizontalAnimation()\n        handleAttributes(obtainStyledAttributes(attrs, R.styleable.BarChartAttrs))\n        handleEditMode()\n    }\n\n    override fun drawBars(frames: List<Frame>) {\n        painter.prepare(color = barsColor, style = Paint.Style.FILL)\n        frames.forEach {\n            canvas.drawRoundRect(\n                it.toRectF(),\n                barRadius,\n                barRadius,\n                painter.paint\n            )\n        }\n    }\n\n    override fun drawBarsBackground(frames: List<Frame>) {\n        painter.prepare(color = barsBackgroundColor, style = Paint.Style.FILL)\n        frames.forEach {\n            canvas.drawRoundRect(\n                it.toRectF(),\n                barRadius,\n                barRadius,\n                painter.paint\n            )\n        }\n    }\n\n    override fun drawLabels(xLabels: List<Label>) {\n        painter.prepare(textSize = labelsSize, color = labelsColor, font = labelsFont)\n        labels.draw(canvas, painter.paint, xLabels)\n    }\n\n    override fun drawGrid(\n        innerFrame: Frame,\n        xLabelsPositions: List<Float>,\n        yLabelsPositions: List<Float>\n    ) {\n        grid.draw(canvas, innerFrame, xLabelsPositions, yLabelsPositions)\n    }\n\n    override fun drawDebugFrame(frames: List<Frame>) {\n        painter.prepare(color = -0x1000000, style = Paint.Style.STROKE)\n        frames.forEach { canvas.drawRect(it.toRect(), painter.paint) }\n    }\n\n    private fun handleAttributes(typedArray: TypedArray) {\n        typedArray.apply {\n            spacing = getDimension(R.styleable.BarChartAttrs_chart_spacing, spacing)\n            barsColor = getColor(R.styleable.BarChartAttrs_chart_barsColor, barsColor)\n            barRadius = getDimension(R.styleable.BarChartAttrs_chart_barsRadius, barRadius)\n            barsBackgroundColor =\n                getColor(R.styleable.BarChartAttrs_chart_barsBackgroundColor, barsBackgroundColor)\n            recycle()\n        }\n    }\n\n    companion object {\n        private const val defaultSpacing = 10f\n        private const val defaultBarsColor = -0x1000000\n        private const val defaultBarsRadius = 0F\n    }\n}\n'