b'\xef\xbb\xbfusing Asn1;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\n\nnamespace Rubeus\n{\n    //AP-REQ          ::= [APPLICATION 14] SEQUENCE {\n    //        pvno            [0] INTEGER (5),\n    //        msg-type        [1] INTEGER (14),\n    //        ap-options      [2] APOptions,\n    //        ticket          [3] Ticket,\n    //        authenticator   [4] EncryptedData -- Authenticator\n    //}\n    \n    public class AP_REQ\n    {\n        public AP_REQ(string crealm, string cname, Ticket providedTicket, byte[] clientKey, Interop.KERB_ETYPE etype, int keyUsageSpec = Interop.KRB_KEY_USAGE_TGS_REQ_PA_AUTHENTICATOR)\n        {\n            pvno = 5;\n\n            msg_type = (long)Interop.KERB_MESSAGE_TYPE.AP_REQ;\n\n            ap_options = 0;\n\n            ticket = providedTicket;\n\n            // KRB_KEY_USAGE_TGS_REQ_PA_AUTHENTICATOR   = 7\n            // KRB_KEY_USAGE_AP_REQ_AUTHENTICATOR       = 11\n            keyUsage = keyUsageSpec;\n\n            enctype = etype;\n            key = clientKey;\n\n            authenticator = new Authenticator();\n            authenticator.crealm = crealm;\n            authenticator.cname = new PrincipalName(cname);\n        }\n\n        public AsnElt Encode()\n        {\n            // pvno            [0] INTEGER (5)\n            AsnElt pvnoASN = AsnElt.MakeInteger(pvno);\n            AsnElt pvnoSeq = AsnElt.Make(AsnElt.SEQUENCE, new[] { pvnoASN });\n            pvnoSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 0, pvnoSeq);\n\n\n            // msg-type        [1] INTEGER (14)\n            AsnElt msg_typeASN = AsnElt.MakeInteger(msg_type);\n            AsnElt msg_typeSeq = AsnElt.Make(AsnElt.SEQUENCE, new[] { msg_typeASN });\n            msg_typeSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 1, msg_typeSeq);\n\n\n            // ap-options      [2] APOptions\n            byte[] ap_optionsBytes = BitConverter.GetBytes(ap_options);\n            AsnElt ap_optionsASN = AsnElt.MakeBitString(ap_optionsBytes);\n            AsnElt ap_optionsSeq = AsnElt.Make(AsnElt.SEQUENCE, new[] { ap_optionsASN });\n            ap_optionsSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 2, ap_optionsSeq);\n\n\n            // ticket          [3] Ticket\n            AsnElt ticketASN = ticket.Encode();\n            AsnElt ticktSeq = AsnElt.Make(AsnElt.SEQUENCE, new[] { ticketASN });\n            ticktSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 3, ticktSeq);\n\n\n            // authenticator   [4] EncryptedData \n            if (key == null)\n            {\n                Console.WriteLine("  [X] A key for the authenticator is needed to build an AP-REQ");\n                return null;\n            }\n\n            byte[] authenticatorBytes = authenticator.Encode().Encode();\n\n            byte[] encBytes = Crypto.KerberosEncrypt(enctype, keyUsage, key, authenticatorBytes);\n\n            // create the EncryptedData structure to hold the authenticator bytes\n            EncryptedData authenticatorEncryptedData = new EncryptedData();\n            authenticatorEncryptedData.etype = (int)enctype;\n            authenticatorEncryptedData.cipher = encBytes;\n\n            AsnElt authenticatorEncryptedDataASN = authenticatorEncryptedData.Encode();\n            AsnElt authenticatorEncryptedDataSeq = AsnElt.Make(AsnElt.SEQUENCE, new[] { authenticatorEncryptedDataASN });\n            authenticatorEncryptedDataSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 4, authenticatorEncryptedDataSeq);\n\n            // encode it all into a sequence\n            AsnElt[] total = new[] { pvnoSeq, msg_typeSeq, ap_optionsSeq, ticktSeq, authenticatorEncryptedDataSeq };\n            AsnElt seq = AsnElt.Make(AsnElt.SEQUENCE, total);\n\n            // AP-REQ          ::= [APPLICATION 14]\n            //  put it all together and tag it with 14\n            AsnElt totalSeq = AsnElt.Make(AsnElt.SEQUENCE, new[] { seq });\n            totalSeq = AsnElt.MakeImplicit(AsnElt.APPLICATION, 14, totalSeq);\n\n            return totalSeq;\n        }\n\n\n        public long pvno { get; set;}\n\n        public long msg_type { get; set; }\n\n        public UInt32 ap_options { get; set; }\n\n        public Ticket ticket { get; set; }\n\n        public Authenticator authenticator { get; set; }\n\n        public byte[] key { get; set; }\n\n        private Interop.KERB_ETYPE enctype;\n\n        private int keyUsage;\n    }\n}'