b"{-# OPTIONS_GHC -fno-warn-orphans #-}\n{-# LANGUAGE\n    CPP\n  , GeneralizedNewtypeDeriving\n  , NoImplicitPrelude\n  , RankNTypes\n  #-}\n#if MIN_VERSION_base(4,9,0)\n{-# OPTIONS_GHC -Wno-redundant-constraints #-}\n#endif\nmodule Rest.Driver.Snap\n  ( apiToHandler\n  , apiToHandler'\n  ) where\n\nimport Prelude.Compat\n\nimport Safe\nimport Snap.Core\nimport Snap.Util.FileServe (defaultMimeTypes)\n\nimport qualified Data.ByteString.Char8 as Char8\nimport qualified Data.ByteString.UTF8  as UTF8\nimport qualified Data.CaseInsensitive  as CI\nimport qualified Data.HashMap.Strict   as M\nimport qualified Network.URI.Encode    as URI\nimport qualified Snap.Core             as Snap\n\nimport Rest.Api (Api)\nimport Rest.Driver.Perform (Rest (..))\nimport Rest.Driver.Types (Run)\n\nimport qualified Rest.Driver.Types as Rest\nimport qualified Rest.Run          as Rest\n\nnewtype Snapped m a = Snapped { unSnapped :: m a }\n  deriving (Applicative, Functor, Monad)\n\napiToHandler :: (MonadSnap m, Rest m, Applicative m, Monad m) => Api m -> m ()\napiToHandler = apiToHandler' id\n\napiToHandler' :: (Applicative m, Monad m, MonadSnap n) => Run m n -> Api m -> n ()\napiToHandler' run api = writeLBS =<< unSnapped (Rest.apiToHandler' (Snapped . run) api)\n\ninstance (MonadSnap m) => Rest (Snapped m) where\n  getHeader nm       = Snapped $ getsRequest (fmap UTF8.toString . Snap.getHeader (CI.mk . UTF8.fromString $ nm))\n  getParameter  nm   = Snapped $ getsRequest (fmap UTF8.toString . (>>= headMay) . rqParam (UTF8.fromString nm))\n  getBody            = Snapped $ readRequestBody (1 * 1024 * 1024)\n  getMethod          = Snapped $ getsRequest (toRestMethod . rqMethod)\n  getPaths           = Snapped $ getsRequest (map (UTF8.toString . URI.decodeByteString) . filter (not . Char8.null) . Char8.split '/' . rqPathInfo)\n  lookupMimeType     = Snapped . return . fmap UTF8.toString . flip M.lookup defaultMimeTypes\n  setHeader nm v     = Snapped $ modifyResponse (Snap.setHeader (CI.mk . UTF8.fromString $ nm) (UTF8.fromString v))\n  setResponseCode cd = Snapped $ modifyResponse (Snap.setResponseCode cd)\n\ntoRestMethod :: Snap.Method -> Maybe Rest.Method\ntoRestMethod Snap.GET    = Just Rest.GET\ntoRestMethod Snap.POST   = Just Rest.POST\ntoRestMethod Snap.PUT    = Just Rest.PUT\ntoRestMethod Snap.DELETE = Just Rest.DELETE\ntoRestMethod _           = Nothing\n"