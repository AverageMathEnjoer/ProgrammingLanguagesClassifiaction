b'package co.joebirch.composeplayground.animation\n\nimport androidx.compose.animation.core.LinearEasing\nimport androidx.compose.animation.core.RepeatMode\nimport androidx.compose.animation.core.animateFloatAsState\nimport androidx.compose.animation.core.infiniteRepeatable\nimport androidx.compose.animation.core.repeatable\nimport androidx.compose.animation.core.tween\nimport androidx.compose.animation.core.updateTransition\nimport androidx.compose.foundation.Canvas\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.drawscope.rotate\nimport androidx.compose.ui.unit.dp\nimport co.joebirch.composeplayground.ComposableLayout\n\nobject RotatingShapeAnimationView : ComposableLayout {\n    @Composable\n    override fun build() {\n        Column(\n            modifier = Modifier.fillMaxSize().padding(32.dp),\n            verticalArrangement = Arrangement.SpaceEvenly,\n            horizontalAlignment = Alignment.CenterHorizontally\n        ) {\n            RotatingSquareComponent()\n        }\n    }\n\n    @Composable\n    fun RotatingSquareComponent() {\n        val rotation: Float by animateFloatAsState(\n            targetValue = 360f,\n            animationSpec = infiniteRepeatable(\n                animation = tween(durationMillis = 3000),\n                repeatMode = RepeatMode.Restart\n            )\n        )\n        Box(modifier = Modifier.fillMaxSize()) {\n            Canvas(modifier = Modifier.size(80.dp).align(Alignment.Center)) {\n                rotate(rotation) {\n                    drawRect(Color.Black, size = size)\n                }\n            }\n        }\n    }\n}'