b'package com.bennyhuo.kotlin.coroutines\n\nimport kotlinx.coroutines.*\nimport kotlin.concurrent.thread\nimport kotlin.coroutines.Continuation\nimport kotlin.coroutines.ContinuationInterceptor\nimport kotlin.coroutines.CoroutineContext\n\n/**\n * Created by benny.\n */\nsuspend fun main() {\n\n    log(1)\n\n    val job = GlobalScope.launch(\n        context = CoroutineName("Hello") + MyNewContinuationInterceptor2() + MyNewContinuationInterceptor1(),\n        start = CoroutineStart.UNDISPATCHED\n    ) {\n        log(2)\n        delay(1000)\n        log(3)\n        log(coroutineContext[ContinuationInterceptor])\n    }\n\n    log(4)\n\n    job.join()\n\n    log(5)\n}\n\nprivate class MyNewContinuationInterceptor1 : ContinuationInterceptor {\n\n    companion object Key : CoroutineContext.Key<MyNewContinuationInterceptor1>\n\n    override val key: CoroutineContext.Key<*> = MyNewContinuationInterceptor1\n\n    override fun <T> interceptContinuation(continuation: Continuation<T>): Continuation<T> {\n        return object : Continuation<T> {\n            override val context: CoroutineContext = continuation.context\n\n            override fun resumeWith(result: Result<T>) {\n                log("<MyContinuation1> $result")\n                thread(name = "MyMain1") {\n                    continuation.resumeWith(result)\n                }\n            }\n        }\n    }\n}\n\nprivate class MyNewContinuationInterceptor2 : ContinuationInterceptor {\n\n    companion object Key : CoroutineContext.Key<MyNewContinuationInterceptor2>\n\n    override val key: CoroutineContext.Key<*> = MyNewContinuationInterceptor2\n\n    override fun <T> interceptContinuation(continuation: Continuation<T>): Continuation<T> {\n        return object : Continuation<T> {\n            override val context: CoroutineContext = continuation.context\n\n            override fun resumeWith(result: Result<T>) {\n                log("<MyContinuation2> $result")\n                thread(name = "MyMain2") {\n                    continuation.resumeWith(result)\n                }\n            }\n        }\n    }\n}\n\nfun log(message: Any?) {\n    println("[${Thread.currentThread().name}] $message")\n}'