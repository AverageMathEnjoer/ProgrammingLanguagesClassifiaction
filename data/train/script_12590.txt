b'\xef\xbb\xbfusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing Core.Utilities.IoC;\nusing Microsoft.Extensions.Caching.Memory;\nusing Microsoft.Extensions.DependencyInjection;\n\nnamespace Core.CrossCuttingConcerns.Caching.Microsoft\n{\n    public class MemoryCacheManager:ICacheManager\n    {\n        private IMemoryCache _cache;\n        public MemoryCacheManager()\n        {\n           _cache =  ServiceTool.ServiceProvider.GetService<IMemoryCache>();\n        }\n        public T Get<T>(string key)\n        {\n            return _cache.Get<T>(key);\n        }\n\n        public object Get(string key)\n        {\n            return _cache.Get(key);\n        }\n\n        public void Add(string key, object data, int duration)\n        {\n            _cache.Set(key, data, TimeSpan.FromMinutes(duration));\n        }\n\n        public bool IsAdd(string key)\n        {\n            return _cache.TryGetValue(key, out _);\n        }\n\n        public void Remove(string key)\n        {\n            _cache.Remove(key);\n        }\n\n        public void RemoveByPattern(string pattern)\n        {\n            var cacheEntriesCollectionDefinition = typeof(MemoryCache).GetProperty("EntriesCollection", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);\n            var cacheEntriesCollection = cacheEntriesCollectionDefinition.GetValue(_cache) as dynamic;\n            List<ICacheEntry> cacheCollectionValues = new List<ICacheEntry>();\n\n            foreach (var cacheItem in cacheEntriesCollection)\n            {\n                ICacheEntry cacheItemValue = cacheItem.GetType().GetProperty("Value").GetValue(cacheItem, null);\n                cacheCollectionValues.Add(cacheItemValue);\n            }\n\n            var regex = new Regex(pattern, RegexOptions.Singleline | RegexOptions.Compiled | RegexOptions.IgnoreCase);\n            var keysToRemove = cacheCollectionValues.Where(d => regex.IsMatch(d.Key.ToString())).Select(d => d.Key).ToList();\n\n            foreach (var key in keysToRemove)\n            {\n                _cache.Remove(key);\n            }\n        }\n    }\n}\n'