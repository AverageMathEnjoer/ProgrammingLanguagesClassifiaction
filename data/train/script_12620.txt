b'{-# LANGUAGE NoImplicitPrelude #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n\nmodule Course.Validation where\n\nimport qualified Prelude as P(String)\nimport Course.Core\n\n--  class Validation<A> {\n--    Validation(String error) {} // Error\n--    Validation(A value) {} // Value\n--  }\n\n-- $setup\n-- >>> import Test.QuickCheck\n-- >>> import qualified Prelude as P(fmap, either)\n-- >>> instance Arbitrary a => Arbitrary (Validation a) where arbitrary = P.fmap (P.either Error Value) arbitrary\ndata Validation a = Error Err | Value a\n  deriving (Eq, Show)\n\ntype Err = P.String\n\n-- | Returns whether or not the given validation is an error.\n--\n-- >>> isError (Error "message")\n-- True\n--\n-- >>> isError (Value 7)\n-- False\n--\n-- prop> \\x -> isError x /= isValue x\nisError :: Validation a -> Bool\nisError (Error _) = True\nisError (Value _) = False\n\n-- | Returns whether or not the given validation is a value.\n--\n-- >>> isValue (Error "message")\n-- False\n--\n-- >>> isValue (Value 7)\n-- True\n--\n-- prop> \\x -> isValue x /= isError x\nisValue :: Validation a -> Bool\nisValue = not . isError\n\n-- | Maps a function on a validation\'s value side.\n--\n-- >>> mapValidation (+10) (Error "message")\n-- Error "message"\n--\n-- >>> mapValidation (+10) (Value 7)\n-- Value 17\n--\n-- prop> \\x -> mapValidation id x == x\nmapValidation :: (a -> b) -> Validation a -> Validation b\nmapValidation _ (Error s) = Error s\nmapValidation f (Value a) = Value (f a)\n\n-- | Binds a function on a validation\'s value side to a new validation.\n--\n-- >>> bindValidation (\\n -> if even n then Value (n + 10) else Error "odd") (Error "message")\n-- Error "message"\n--\n-- >>> bindValidation (\\n -> if even n then Value (n + 10) else Error "odd") (Value 7)\n-- Error "odd"\n--\n-- >>> bindValidation (\\n -> if even n then Value (n + 10) else Error "odd") (Value 8)\n-- Value 18\n--\n-- prop> \\x -> bindValidation Value x == x\nbindValidation :: (a -> Validation b) -> Validation a -> Validation b\nbindValidation _ (Error s) = Error s\nbindValidation f (Value a) = f a\n\n-- | Returns a validation\'s value side or the given default if it is an error.\n--\n-- >>> valueOr (Error "message") 3\n-- 3\n--\n-- >>> valueOr (Value 7) 3\n-- 7\n--\n-- prop> \\x -> isValue x || valueOr x n == n\nvalueOr :: Validation a -> a -> a\nvalueOr (Error _) a = a\nvalueOr (Value a) _ = a\n\n-- | Returns a validation\'s error side or the given default if it is a value.\n--\n-- >>> errorOr (Error "message") "q"\n-- "message"\n--\n-- >>> errorOr (Value 7) "q"\n-- "q"\n--\n-- prop> \\x -> isError x || errorOr x e == e\nerrorOr :: Validation a -> Err -> Err\nerrorOr (Error e) _ = e\nerrorOr (Value _) a = a\n\nvalueValidation :: a -> Validation a\nvalueValidation = Value\n'