b'package com.ethanhua.skeleton;\n\nimport android.support.annotation.ColorRes;\nimport android.support.annotation.IntRange;\nimport android.support.annotation.LayoutRes;\nimport android.support.v4.content.ContextCompat;\nimport android.util.Log;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.view.ViewParent;\n\nimport io.supercharge.shimmerlayout.ShimmerLayout;\n\n/**\n * Created by ethanhua on 2017/7/29.\n */\n\npublic class ViewSkeletonScreen implements SkeletonScreen {\n    private static final String TAG = ViewSkeletonScreen.class.getName();\n    private final ViewReplacer mViewReplacer;\n    private final View mActualView;\n    private final int mSkeletonResID;\n    private final int mShimmerColor;\n    private final boolean mShimmer;\n    private final int mShimmerDuration;\n    private final int mShimmerAngle;\n\n    private ViewSkeletonScreen(Builder builder) {\n        mActualView = builder.mView;\n        mSkeletonResID = builder.mSkeletonLayoutResID;\n        mShimmer = builder.mShimmer;\n        mShimmerDuration = builder.mShimmerDuration;\n        mShimmerAngle = builder.mShimmerAngle;\n        mShimmerColor = builder.mShimmerColor;\n        mViewReplacer = new ViewReplacer(builder.mView);\n    }\n\n    private ShimmerLayout generateShimmerContainerLayout(ViewGroup parentView) {\n        final ShimmerLayout shimmerLayout = (ShimmerLayout) LayoutInflater.from(mActualView.getContext()).inflate(R.layout.layout_shimmer, parentView, false);\n        shimmerLayout.setShimmerColor(mShimmerColor);\n        shimmerLayout.setShimmerAngle(mShimmerAngle);\n        shimmerLayout.setShimmerAnimationDuration(mShimmerDuration);\n        View innerView = LayoutInflater.from(mActualView.getContext()).inflate(mSkeletonResID, shimmerLayout, false);\n        ViewGroup.LayoutParams lp = innerView.getLayoutParams();\n        if (lp != null) {\n            shimmerLayout.setLayoutParams(lp);\n        }\n        shimmerLayout.addView(innerView);\n        shimmerLayout.addOnAttachStateChangeListener(new View.OnAttachStateChangeListener() {\n            @Override\n            public void onViewAttachedToWindow(View v) {\n                shimmerLayout.startShimmerAnimation();\n            }\n\n            @Override\n            public void onViewDetachedFromWindow(View v) {\n                shimmerLayout.stopShimmerAnimation();\n            }\n        });\n        shimmerLayout.startShimmerAnimation();\n        return shimmerLayout;\n    }\n\n    private View generateSkeletonLoadingView() {\n        ViewParent viewParent = mActualView.getParent();\n        if (viewParent == null) {\n            Log.e(TAG, "the source view have not attach to any view");\n            return null;\n        }\n        ViewGroup parentView = (ViewGroup) viewParent;\n        if (mShimmer) {\n            return generateShimmerContainerLayout(parentView);\n        }\n        return LayoutInflater.from(mActualView.getContext()).inflate(mSkeletonResID, parentView, false);\n    }\n\n    @Override\n    public void show() {\n        View skeletonLoadingView = generateSkeletonLoadingView();\n        if (skeletonLoadingView != null) {\n            mViewReplacer.replace(skeletonLoadingView);\n        }\n    }\n\n    @Override\n    public void hide() {\n        if (mViewReplacer.getTargetView() instanceof ShimmerLayout) {\n            ((ShimmerLayout) mViewReplacer.getTargetView()).stopShimmerAnimation();\n        }\n        mViewReplacer.restore();\n    }\n\n    public static class Builder {\n        private final View mView;\n        private int mSkeletonLayoutResID;\n        private boolean mShimmer = true;\n        private int mShimmerColor;\n        private int mShimmerDuration = 1000;\n        private int mShimmerAngle = 20;\n\n        public Builder(View view) {\n            this.mView = view;\n            this.mShimmerColor = ContextCompat.getColor(mView.getContext(), R.color.shimmer_color);\n        }\n\n        /**\n         * @param skeletonLayoutResID the loading skeleton layoutResID\n         */\n        public Builder load(@LayoutRes int skeletonLayoutResID) {\n            this.mSkeletonLayoutResID = skeletonLayoutResID;\n            return this;\n        }\n\n        /**\n         * @param shimmerColor the shimmer color\n         */\n        public Builder color(@ColorRes int shimmerColor) {\n            this.mShimmerColor = ContextCompat.getColor(mView.getContext(), shimmerColor);\n            return this;\n        }\n\n        /**\n         * @param shimmer whether show shimmer animation\n         */\n        public ViewSkeletonScreen.Builder shimmer(boolean shimmer) {\n            this.mShimmer = shimmer;\n            return this;\n        }\n\n        /**\n         * the duration of the animation , the time it will take for the highlight to move from one end of the layout\n         * to the other.\n         *\n         * @param shimmerDuration Duration of the shimmer animation, in milliseconds\n         */\n        public ViewSkeletonScreen.Builder duration(int shimmerDuration) {\n            this.mShimmerDuration = shimmerDuration;\n            return this;\n        }\n\n        /**\n         * @param shimmerAngle the angle of the shimmer effect in clockwise direction in degrees.\n         */\n        public ViewSkeletonScreen.Builder angle(@IntRange(from = 0, to = 30) int shimmerAngle) {\n            this.mShimmerAngle = shimmerAngle;\n            return this;\n        }\n\n        public ViewSkeletonScreen show() {\n            ViewSkeletonScreen skeletonScreen = new ViewSkeletonScreen(this);\n            skeletonScreen.show();\n            return skeletonScreen;\n        }\n\n    }\n}\n'