b'\xef\xbb\xbf// UVa12096 The SetStack Computer\n// Rujia Liu\n#include<iostream>\n#include<string>\n#include<set>\n#include<map>\n#include<stack>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\n#define ALL(x) x.begin(),x.end()\n#define INS(x) inserter(x,x.begin())\n\ntypedef set<int> Set;\nmap<Set,int> IDcache; // \xe6\x8a\x8a\xe9\x9b\x86\xe5\x90\x88\xe6\x98\xa0\xe5\xb0\x84\xe6\x88\x90ID\nvector<Set> Setcache; // \xe6\xa0\xb9\xe6\x8d\xaeID\xe5\x8f\x96\xe9\x9b\x86\xe5\x90\x88\n\n// \xe6\x9f\xa5\xe6\x89\xbe\xe7\xbb\x99\xe5\xae\x9a\xe9\x9b\x86\xe5\x90\x88x\xe7\x9a\x84ID\xe3\x80\x82\xe5\xa6\x82\xe6\x9e\x9c\xe6\x89\xbe\xe4\xb8\x8d\xe5\x88\xb0\xef\xbc\x8c\xe5\x88\x86\xe9\x85\x8d\xe4\xb8\x80\xe4\xb8\xaa\xe6\x96\xb0ID\nint ID (Set x) {\n  if (IDcache.count(x)) return IDcache[x];\n  Setcache.push_back(x); // \xe6\xb7\xbb\xe5\x8a\xa0\xe6\x96\xb0\xe9\x9b\x86\xe5\x90\x88\n  return IDcache[x] = Setcache.size() - 1;\n}\n\nint main () {\n  int T;\n  cin >> T;\n  while(T--) {\n    stack<int> s; // \xe9\xa2\x98\xe7\x9b\xae\xe4\xb8\xad\xe7\x9a\x84\xe6\xa0\x88\n    int n;\n    cin >> n;\n    for(int i = 0; i < n; i++) {\n      string op;\n      cin >> op;\n      if (op[0] == \'P\') s.push(ID(Set()));\n      else if (op[0] == \'D\') s.push(s.top());\n      else {\n        Set x1 = Setcache[s.top()]; s.pop();\n        Set x2 = Setcache[s.top()]; s.pop();\n        Set x;\n        if (op[0] == \'U\') set_union (ALL(x1), ALL(x2), INS(x));\n        if (op[0] == \'I\') set_intersection (ALL(x1), ALL(x2), INS(x));\n        if (op[0] == \'A\') { x = x2; x.insert(ID(x1)); }\n        s.push(ID(x));\n      }      \n      cout << Setcache[s.top()].size() << endl;\n    }\n    cout << "***" << endl;\n  }\n  return 0;  \n}\n'