b'\xef\xbb\xbfusing System;\nusing Asn1;\nusing System.Text;\nusing System.Collections.Generic;\n\nnamespace Rubeus\n{\n    public class KrbCredInfo\n    {\n        //KrbCredInfo     ::= SEQUENCE {\n        //        key             [0] EncryptionKey,\n        //        prealm          [1] Realm OPTIONAL,\n        //        pname           [2] PrincipalName OPTIONAL,\n        //        flags           [3] TicketFlags OPTIONAL,\n        //        authtime        [4] KerberosTime OPTIONAL,\n        //        starttime       [5] KerberosTime OPTIONAL,\n        //        endtime         [6] KerberosTime OPTIONAL,\n        //        renew-till      [7] KerberosTime OPTIONAL,\n        //        srealm          [8] Realm OPTIONAL,\n        //        sname           [9] PrincipalName OPTIONAL,\n        //        caddr           [10] HostAddresses OPTIONAL\n        //}\n\n        public KrbCredInfo()\n        {\n            key = new EncryptionKey();\n\n            prealm = "";\n\n            pname = new PrincipalName();\n\n            flags = 0;\n\n            srealm = "";\n\n            sname = new PrincipalName();\n        }\n\n        public KrbCredInfo(AsnElt body)\n        {\n            foreach (AsnElt s in body.Sub)\n            {\n                switch (s.TagValue)\n                {\n                    case 0:\n                        key = new EncryptionKey(s);\n                        break;\n                    case 1:\n                        prealm = Encoding.ASCII.GetString(s.Sub[0].GetOctetString());\n                        break;\n                    case 2:\n                        pname = new PrincipalName(s.Sub[0]);\n                        break;\n                    case 3:\n                        UInt32 temp = Convert.ToUInt32(s.Sub[0].GetInteger());\n                        byte[] tempBytes = BitConverter.GetBytes(temp);\n                        flags = (Interop.TicketFlags)BitConverter.ToInt32(tempBytes, 0);\n                        break;\n                    case 4:\n                        authtime = s.Sub[0].GetTime();\n                        break;\n                    case 5:\n                        starttime = s.Sub[0].GetTime();\n                        break;\n                    case 6:\n                        endtime = s.Sub[0].GetTime();\n                        break;\n                    case 7:\n                        renew_till = s.Sub[0].GetTime();\n                        break;\n                    case 8:\n                        srealm = Encoding.ASCII.GetString(s.Sub[0].GetOctetString());\n                        break;\n                    case 9:\n                        sname = new PrincipalName(s.Sub[0]);\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }\n\n        public AsnElt Encode()\n        {\n            List<AsnElt> asnElements = new List<AsnElt>();\n\n            // key             [0] EncryptionKey\n            AsnElt keyAsn = key.Encode();\n            keyAsn = AsnElt.MakeImplicit(AsnElt.CONTEXT, 0, keyAsn);\n            asnElements.Add(keyAsn);\n\n\n            // prealm          [1] Realm OPTIONAL\n            if (!String.IsNullOrEmpty(prealm))\n            {\n                AsnElt prealmAsn = AsnElt.MakeString(AsnElt.IA5String, prealm);\n                prealmAsn = AsnElt.MakeImplicit(AsnElt.UNIVERSAL, AsnElt.GeneralString, prealmAsn);\n                AsnElt prealmAsnSeq = AsnElt.Make(AsnElt.SEQUENCE, prealmAsn);\n                prealmAsnSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 1, prealmAsnSeq);\n\n                asnElements.Add(prealmAsnSeq);\n            }\n\n\n            // pname           [2] PrincipalName OPTIONAL\n            if ((pname.name_string != null) && (pname.name_string.Count != 0) && (!String.IsNullOrEmpty(pname.name_string[0])))\n            {\n                AsnElt pnameAsn = pname.Encode();\n                pnameAsn = AsnElt.MakeImplicit(AsnElt.CONTEXT, 2, pnameAsn);\n                asnElements.Add(pnameAsn);\n            }\n\n\n            // pname           [2] PrincipalName OPTIONAL\n            byte[] flagBytes = BitConverter.GetBytes((UInt32)flags);\n            if (BitConverter.IsLittleEndian)\n            {\n                Array.Reverse(flagBytes);\n            }\n            AsnElt flagBytesAsn = AsnElt.MakeBitString(flagBytes);\n            AsnElt flagBytesSeq = AsnElt.Make(AsnElt.SEQUENCE, new[] { flagBytesAsn });\n            flagBytesSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 3, flagBytesSeq);\n            asnElements.Add(flagBytesSeq);\n\n\n            // authtime        [4] KerberosTime OPTIONAL\n            if ((authtime != null) && (authtime != DateTime.MinValue))\n            {\n                AsnElt authtimeAsn = AsnElt.MakeString(AsnElt.GeneralizedTime, authtime.ToString("yyyyMMddHHmmssZ"));\n                AsnElt authtimeSeq = AsnElt.Make(AsnElt.SEQUENCE, new[] { authtimeAsn });\n                authtimeSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 4, authtimeSeq);\n                asnElements.Add(authtimeSeq);\n            }\n\n\n            // starttime       [5] KerberosTime OPTIONAL\n            if ((starttime != null) && (starttime != DateTime.MinValue))\n            {\n                AsnElt starttimeAsn = AsnElt.MakeString(AsnElt.GeneralizedTime, starttime.ToString("yyyyMMddHHmmssZ"));\n                AsnElt starttimeSeq = AsnElt.Make(AsnElt.SEQUENCE, new[] { starttimeAsn });\n                starttimeSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 5, starttimeSeq);\n                asnElements.Add(starttimeSeq);\n            }\n\n\n            // endtime         [6] KerberosTime OPTIONAL\n            if ((endtime != null) && (endtime != DateTime.MinValue))\n            {\n                AsnElt endtimeAsn = AsnElt.MakeString(AsnElt.GeneralizedTime, endtime.ToString("yyyyMMddHHmmssZ"));\n                AsnElt endtimeSeq = AsnElt.Make(AsnElt.SEQUENCE, new[] { endtimeAsn });\n                endtimeSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 6, endtimeSeq);\n                asnElements.Add(endtimeSeq);\n            }\n\n\n            // renew-till      [7] KerberosTime OPTIONAL\n            if ((renew_till != null) && (renew_till != DateTime.MinValue))\n            {\n                AsnElt renew_tillAsn = AsnElt.MakeString(AsnElt.GeneralizedTime, renew_till.ToString("yyyyMMddHHmmssZ"));\n                AsnElt renew_tillSeq = AsnElt.Make(AsnElt.SEQUENCE, new[] { renew_tillAsn });\n                renew_tillSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 7, renew_tillSeq);\n                asnElements.Add(renew_tillSeq);\n            }\n\n\n            // srealm          [8] Realm OPTIONAL\n            if (!String.IsNullOrEmpty(srealm))\n            {\n                AsnElt srealmAsn = AsnElt.MakeString(AsnElt.IA5String, srealm);\n                srealmAsn = AsnElt.MakeImplicit(AsnElt.UNIVERSAL, AsnElt.GeneralString, srealmAsn);\n                AsnElt srealmAsnSeq = AsnElt.Make(AsnElt.SEQUENCE, srealmAsn);\n                srealmAsnSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 8, srealmAsnSeq);\n                asnElements.Add(srealmAsnSeq);\n            }\n\n\n            // sname           [9] PrincipalName OPTIONAL\n            if ((sname.name_string != null) && (sname.name_string.Count != 0) && (!String.IsNullOrEmpty(sname.name_string[0])))\n            {\n                AsnElt pnameAsn = sname.Encode();\n                pnameAsn = AsnElt.MakeImplicit(AsnElt.CONTEXT, 9, pnameAsn);\n                asnElements.Add(pnameAsn);\n            }\n\n\n            // caddr           [10] HostAddresses OPTIONAL\n\n\n            AsnElt seq = AsnElt.Make(AsnElt.SEQUENCE, asnElements.ToArray());\n\n            return seq;\n        }\n\n        public EncryptionKey key { get; set; }\n\n        public string prealm { get; set; }\n\n        public PrincipalName pname { get; set; }\n\n        public Interop.TicketFlags flags { get; set; }\n\n        public DateTime authtime { get; set; }\n\n        public DateTime starttime { get; set; }\n\n        public DateTime endtime { get; set; }\n\n        public DateTime renew_till { get; set; }\n\n        public string srealm { get; set; }\n\n        public PrincipalName sname { get; set; }\n\n        // caddr (optional) - skipping for now\n    }\n}'