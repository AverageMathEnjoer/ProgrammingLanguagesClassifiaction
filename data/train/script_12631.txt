b'(**\n# Tutorial: Functional Reactive Programming in F# and WPF \xe3\x82\x92\xe8\xa9\xa6\xe3\x81\x99\n\n\xe3\x81\x93\xe3\x81\x93\xe3\x81\xa7\xe3\x81\xaf Stephen Elliott \xe6\xb0\x8f\xe3\x81\xab\xe3\x82\x88\xe3\x81\xa3\xe3\x81\xa6\xe6\x9b\xb8\xe3\x81\x8b\xe3\x82\x8c\xe3\x81\x9f\n[Tutorial: Functional Reactive Programming in F# and WPF](http://steellworks.blogspot.jp/2014/03/tutorial-functional-reactive.html)\n\xe3\x82\x92fsi.exe\xe3\x81\xa7\xe5\xae\x9f\xe8\xa1\x8c\xe5\x8f\xaf\xe8\x83\xbd\xe3\x81\xab\xe3\x81\x97\xe3\x81\xa4\xe3\x81\xa4\xe3\x80\x81\n[FSharp.Formatting](http://tpetricek.github.io/FSharp.Formatting/)\n\xe3\x81\xa7\xe6\x96\x87\xe6\x9b\xb8\xe5\x8c\x96\xe3\x81\x97\xe3\x81\x9f\xe3\x82\x8a\xe3\x81\x97\xe3\x81\xbe\xe3\x81\x99\xe3\x80\x82\n\n\xe5\xae\x9f\xe8\xa1\x8c\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x9a\n\n    fsi.exe [-d:VERSIONX] --exec part1.fsx\n\n`VERSIONX` \xe3\x81\xae `X` \xe3\x81\xab\xe3\x81\xaf `1` \xe3\x81\x8b\xe3\x82\x89 `5` \xe3\x81\xbe\xe3\x81\xa7\xe3\x81\xae\xe6\x95\xb0\xe5\xad\x97\xe3\x81\x8c\xe5\x85\xa5\xe3\x82\x8a\xe3\x81\xbe\xe3\x81\x99\xe3\x80\x82\n\n\xe4\xbe\x8b\xef\xbc\x9a\n\n    fsi.exe -d:VERSION5 --exec part1.fsx\n\nTODO: \xe5\xbe\x8c\xe3\x81\xa7\xe6\x9b\xb8\xe3\x81\x8f\n*)\n\n#r "PresentationCore.dll"\n#r "PresentationFramework.dll"\n#r "System.Xaml.dll"\n#r "WindowsBase.dll"\n\nopen System\nopen System.Windows\nopen System.Windows.Controls\nopen System.Xaml\n\nlet xamlString = """<?xml version="1.0" encoding="utf-8"?>\n<Window\n        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\n        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n        Height="600" Width="800">\n\n    <Canvas Name="Canvas" Background="White">\n        <Rectangle Name="Rectangle" Width="100" Height="100" Fill="Black" RadiusY="10" RadiusX="10"/>\n    </Canvas>\n</Window>\n"""\n\nmodule version1 =\n    let handle (canvas:Canvas) (rectangle:Shapes.Rectangle) =\n        let mouse_down_handler (args : Input.MouseButtonEventArgs) =\n            let mouse_position = args.GetPosition canvas\n            Canvas.SetLeft(rectangle, mouse_position.X)\n            Canvas.SetTop(rectangle, mouse_position.Y)\n        let subscription = Observable.subscribe mouse_down_handler canvas.MouseDown\n        subscription\n\nmodule version2 =\n    let handle (canvas:Canvas) (rectangle:Shapes.Rectangle) =\n        let get_canvas_position (args : Input.MouseButtonEventArgs) =\n            args.GetPosition canvas\n\n        let set_rect_position (position : Point) =\n            Canvas.SetLeft(rectangle, position.X)\n            Canvas.SetTop(rectangle, position.Y)\n\n        let subscription =\n            Observable.subscribe\n                set_rect_position\n                (Observable.map get_canvas_position canvas.MouseDown)\n        subscription\n\nmodule version2_5 =\n    let handle (canvas:Canvas) (rectangle:Shapes.Rectangle) =\n        let get_canvas_position (args : Input.MouseButtonEventArgs) =\n            args.GetPosition canvas\n\n        let set_rect_position (position : Point) =\n            Canvas.SetLeft(rectangle, position.X)\n            Canvas.SetTop(rectangle, position.Y)\n\n        let subscription =\n            canvas.MouseDown\n            |> Observable.map get_canvas_position\n            |> Observable.subscribe set_rect_position\n        subscription\n\nmodule version3 =\n    let handle (canvas:Canvas) (rectangle:Shapes.Rectangle) =\n        let get_canvas_position (args : Input.MouseButtonEventArgs) =\n            args.GetPosition canvas\n\n        let set_rect_position (position : Point) =\n            Canvas.SetLeft(rectangle, position.X)\n            Canvas.SetTop(rectangle, position.Y)\n\n        let is_left_click (args : Input.MouseButtonEventArgs) =\n            args.ChangedButton = Input.MouseButton.Left\n\n        let subscription =\n            canvas.MouseDown\n            |> Observable.filter is_left_click\n            |> Observable.map get_canvas_position\n            |> Observable.subscribe set_rect_position\n        subscription\n\nmodule version4 =\n    /// \xe3\x83\x89\xe3\x83\xa9\xe3\x83\x83\xe3\x82\xb0\xe6\x93\x8d\xe4\xbd\x9c\xe3\x81\xae\xe7\x8a\xb6\xe6\x85\x8b\n    type DragState = { \n        /// \xe7\x8f\xbe\xe5\x9c\xa8\xe3\x83\x89\xe3\x83\xa9\xe3\x83\x83\xe3\x82\xb0\xe4\xb8\xad\xef\xbc\x9f\n        dragging : bool;\n\n        /// \xe3\x83\x89\xe3\x83\xa9\xe3\x83\x83\xe3\x82\xb0\xe3\x81\xae\xe7\x8f\xbe\xe5\x9c\xa8\xe4\xbd\x8d\xe7\xbd\xae\n        position : Point }\n\n    /// \xe7\x8f\xbe\xe5\x9c\xa8\xe3\x83\x89\xe3\x83\xa9\xe3\x83\x83\xe3\x82\xb0\xe4\xb8\xad\xef\xbc\x9f\n    let currently_dragging (state : DragState) : bool = state.dragging\n\n    let get_drag_position (state : DragState) : Point = state.position\n\n    /// \xe3\x83\x89\xe3\x83\xa9\xe3\x83\x83\xe3\x82\xb0\xe6\x93\x8d\xe4\xbd\x9c\xe3\x81\xae\xe5\x88\x9d\xe6\x9c\x9f\xe7\x8a\xb6\xe6\x85\x8b\xe3\x80\x82\n    let initial_state = { dragging=false; position=new Point() }\n\n    /// \xe6\x97\xa2\xe5\xad\x98\xe3\x81\xaeDragState\xe3\x81\x8b\xe3\x82\x89\xe3\x83\x89\xe3\x83\xa9\xe3\x83\x83\xe3\x82\xb0\xe4\xb8\xad\xe3\x81\xae\xe3\x83\x95\xe3\x83\xa9\xe3\x82\xb0\xe3\x81\xa0\xe3\x81\x91\xe3\x81\x8c\xe7\x95\xb0\xe3\x81\xaa\xe3\x82\x8b\xe6\x96\xb0\xe3\x81\x97\xe3\x81\x84DragState\xe3\x82\x92\xe4\xbd\x9c\xe3\x82\x8b\xe3\x80\x82\n    let update_dragging (dragging : bool) (op : DragState) : DragState =\n        { op with dragging=dragging }\n\n    /// DragState\xe3\x81\xaePosition\xe3\x82\x92\xe6\x9b\xb4\xe6\x96\xb0\xe3\x81\x99\xe3\x82\x8b\xe3\x80\x82\xe3\x83\x89\xe3\x83\xa9\xe3\x83\x83\xe3\x82\xb0\xe6\x93\x8d\xe4\xbd\x9c\xe4\xb8\xad\xe3\x81\xa7\xe3\x81\xaf\xe7\x84\xa1\xe3\x81\x84\xe5\xa0\xb4\xe5\x90\x88\xe3\x81\xab\xe3\x81\xaf\xe4\xbd\x95\xe3\x82\x82\xe3\x81\x97\xe3\x81\xaa\xe3\x81\x84\xe3\x80\x82\n    let update_drag_pos (position : Point) (op : DragState) : DragState =\n        if currently_dragging op\n        then { op with position=position }\n        else op\n\n    /// DragState\xe3\x81\xab\xe3\x82\x88\xe3\x81\xa3\xe3\x81\xa6\xe8\xb5\xb7\xe3\x81\x93\xe3\x82\x8a\xe3\x81\x86\xe3\x82\x8b\xe5\xa4\x89\xe6\x9b\xb4\xe3\x81\xae\xe7\xa8\xae\xe9\xa1\x9e\xe3\x80\x82\n    type DragChange = \n        /// \xe3\x83\x89\xe3\x83\xa9\xe3\x83\x83\xe3\x82\xb0\xe9\x96\x8b\xe5\xa7\x8b\xe3\x80\x82\n        | StartDrag\n        /// \xe3\x83\x89\xe3\x83\xa9\xe3\x83\x83\xe3\x82\xb0\xe7\xb5\x82\xe4\xba\x86\xe3\x80\x82\n        | StopDrag \n        /// \xe3\x83\x89\xe3\x83\xa9\xe3\x83\x83\xe3\x82\xb0\xe3\x81\xae\xe4\xbd\x8d\xe7\xbd\xae\xe3\x82\x92\xe6\x9b\xb4\xe6\x96\xb0\xe3\x80\x82\n        | UpdatePosition of Point\n\n    /// DragChange\xe3\x81\xab\xe5\xbf\x9c\xe3\x81\x98\xe3\x81\xa6DragState\xe3\x82\x92\xe6\x9b\xb4\xe6\x96\xb0\xe3\x81\x97\xe3\x81\xa6\xe3\x80\x81\xe6\x96\xb0\xe3\x81\x97\xe3\x81\x84DragState\xe3\x82\x92\xe8\xbf\x94\xe3\x81\x99\xe3\x80\x82\n    let update_drag_state (state : DragState) (change : DragChange) : DragState =\n        match change with\n        | StartDrag -> update_dragging true state\n        | StopDrag -> update_dragging false state\n        | UpdatePosition(pos) -> update_drag_pos pos state\n\n    /// \xe3\x83\x9e\xe3\x82\xa6\xe3\x82\xb9\xe3\x82\xa4\xe3\x83\x99\xe3\x83\xb3\xe3\x83\x88\xe3\x81\x8c\xe5\xb7\xa6\xe3\x82\xaf\xe3\x83\xaa\xe3\x83\x83\xe3\x82\xaf\xe3\x81\xab\xe3\x82\x88\xe3\x81\xa3\xe3\x81\xa6\xe7\x99\xba\xe7\x94\x9f\xe3\x81\x97\xe3\x81\x9f\xe3\x81\x8b\xe3\x81\xa9\xe3\x81\x86\xe3\x81\x8b\xe3\x80\x82\n    let is_left_click (args : Input.MouseButtonEventArgs) : bool =\n        args.ChangedButton = Input.MouseButton.Left\n\n    /// \xe3\x83\x9e\xe3\x82\xa6\xe3\x82\xb9\xe3\x82\xa4\xe3\x83\x99\xe3\x83\xb3\xe3\x83\x88\xe6\x99\x82\xe3\x81\xabIInputElement\xe3\x81\x8b\xe3\x82\x89\xe3\x82\xab\xe3\x83\xbc\xe3\x82\xbd\xe3\x83\xab\xe3\x81\xae\xe7\x9b\xb8\xe5\xaf\xbe\xe4\xbd\x8d\xe7\xbd\xae\xe3\x82\x92\xe8\xa8\x88\xe7\xae\x97\xe3\x81\x99\xe3\x82\x8b\xe3\x80\x82\n    let get_mouse_position (relative_to : IInputElement) (args : Input.MouseEventArgs) : Point =\n        args.GetPosition relative_to\n\n    let handle (canvas:Canvas) (rectangle:Shapes.Rectangle) =\n        let set_rect_position (position : Point) =\n            Canvas.SetLeft(rectangle, position.X)\n            Canvas.SetTop(rectangle, position.Y)\n\n        let get_canvas_position = get_mouse_position canvas\n        let get_rectangle_position = get_mouse_position rectangle\n\n        let is_left_click (args : Input.MouseButtonEventArgs) =\n            args.ChangedButton = Input.MouseButton.Left\n\n        let start_stream =\n            rectangle.MouseDown \n            |> Observable.filter is_left_click\n            |> Observable.map (fun _ -> StartDrag)\n        \n        let stop_stream =\n            canvas.MouseUp \n            |> Observable.filter is_left_click\n            |> Observable.map (fun _ -> StopDrag)\n        \n        let move_stream =\n            canvas.MouseMove\n            |> Observable.map (get_canvas_position >> UpdatePosition)\n\n        let subscription =\n            Observable.merge start_stream stop_stream |> Observable.merge move_stream\n            |> Observable.scan update_drag_state initial_state\n            |> Observable.filter currently_dragging\n            |> Observable.map get_drag_position\n            |> Observable.subscribe set_rect_position\n        subscription\n\nmodule version5 =\n    /// \xe3\x83\x89\xe3\x83\xa9\xe3\x83\x83\xe3\x82\xb0\xe6\x93\x8d\xe4\xbd\x9c\xe3\x81\xae\xe7\x8a\xb6\xe6\x85\x8b\n    type DragState = { \n        /// \xe7\x8f\xbe\xe5\x9c\xa8\xe3\x83\x89\xe3\x83\xa9\xe3\x83\x83\xe3\x82\xb0\xe4\xb8\xad\xef\xbc\x9f\n        dragging : bool;\n\n        /// \xe3\x83\x89\xe3\x83\xa9\xe3\x83\x83\xe3\x82\xb0\xe3\x81\xae\xe7\x8f\xbe\xe5\x9c\xa8\xe4\xbd\x8d\xe7\xbd\xae\n        position : Point; \n\n        /// \xe3\x83\x89\xe3\x83\xa9\xe3\x83\x83\xe3\x82\xb0\xe3\x81\xae\xe9\x96\x8b\xe5\xa7\x8b\xe4\xbd\x8d\xe7\xbd\xae\xe3\x81\x8b\xe3\x82\x89\xe3\x81\xae\xe3\x82\xaa\xe3\x83\x95\xe3\x82\xbb\xe3\x83\x83\xe3\x83\x88\n        offset : Point }\n\n    /// \xe7\x8f\xbe\xe5\x9c\xa8\xe3\x83\x89\xe3\x83\xa9\xe3\x83\x83\xe3\x82\xb0\xe4\xb8\xad\xef\xbc\x9f\n    let currently_dragging (state : DragState) : bool = state.dragging\n\n    /// \xe3\x83\x89\xe3\x83\xa9\xe3\x83\x83\xe3\x82\xb0\xe6\x93\x8d\xe4\xbd\x9c\xe3\x81\xae\xe7\x8f\xbe\xe5\x9c\xa8\xe4\xbd\x8d\xe7\xbd\xae\xe3\x82\x92\xe3\x83\x89\xe3\x83\xa9\xe3\x83\x83\xe3\x82\xb0\xe9\x96\x8b\xe5\xa7\x8b\xe4\xbd\x8d\xe7\xbd\xae\xe3\x81\xa8\xe7\x9b\xb8\xe5\xaf\xbe\xe4\xbd\x8d\xe7\xbd\xae\xe3\x81\x8b\xe3\x82\x89\xe8\xa8\x88\xe7\xae\x97\xe3\x81\x99\xe3\x82\x8b\xe3\x80\x82\n    let get_drag_position (state : DragState) : Point = \n        let diff = state.position - state.offset\n        new Point(diff.X, diff.Y)\n\n    /// \xe3\x83\x89\xe3\x83\xa9\xe3\x83\x83\xe3\x82\xb0\xe6\x93\x8d\xe4\xbd\x9c\xe3\x81\xae\xe5\x88\x9d\xe6\x9c\x9f\xe7\x8a\xb6\xe6\x85\x8b\xe3\x80\x82\n    let initial_state = { dragging=false; position=new Point(); offset=new Point() }\n\n    /// \xe6\x97\xa2\xe5\xad\x98\xe3\x81\xaeDragState\xe3\x81\x8b\xe3\x82\x89\xe3\x83\x89\xe3\x83\xa9\xe3\x83\x83\xe3\x82\xb0\xe4\xb8\xad\xe3\x81\xae\xe3\x83\x95\xe3\x83\xa9\xe3\x82\xb0\xe3\x81\xa0\xe3\x81\x91\xe3\x81\x8c\xe7\x95\xb0\xe3\x81\xaa\xe3\x82\x8b\xe6\x96\xb0\xe3\x81\x97\xe3\x81\x84DragState\xe3\x82\x92\xe4\xbd\x9c\xe3\x82\x8b\xe3\x80\x82\n    let update_dragging (dragging : bool) (op : DragState) : DragState =\n        { op with dragging=dragging }\n\n    /// DragState\xe3\x81\xaePosition\xe3\x82\x92\xe6\x9b\xb4\xe6\x96\xb0\xe3\x81\x99\xe3\x82\x8b\xe3\x80\x82\xe3\x83\x89\xe3\x83\xa9\xe3\x83\x83\xe3\x82\xb0\xe6\x93\x8d\xe4\xbd\x9c\xe4\xb8\xad\xe3\x81\xa7\xe3\x81\xaf\xe7\x84\xa1\xe3\x81\x84\xe5\xa0\xb4\xe5\x90\x88\xe3\x81\xab\xe3\x81\xaf\xe4\xbd\x95\xe3\x82\x82\xe3\x81\x97\xe3\x81\xaa\xe3\x81\x84\xe3\x80\x82\n    let update_drag_pos (position : Point) (op : DragState) : DragState =\n        if currently_dragging op\n        then { op with position=position }\n        else op\n\n    /// DragState\xe3\x81\xab\xe3\x82\x88\xe3\x81\xa3\xe3\x81\xa6\xe8\xb5\xb7\xe3\x81\x93\xe3\x82\x8a\xe3\x81\x86\xe3\x82\x8b\xe5\xa4\x89\xe6\x9b\xb4\xe3\x81\xae\xe7\xa8\xae\xe9\xa1\x9e\xe3\x80\x82\n    type DragChange = \n        /// \xe7\x89\xb9\xe5\xae\x9a\xe3\x81\xae\xe3\x82\xaa\xe3\x83\x95\xe3\x82\xbb\xe3\x83\x83\xe3\x83\x88\xe3\x81\x8b\xe3\x82\x89\xe3\x81\xae\xe3\x83\x89\xe3\x83\xa9\xe3\x83\x83\xe3\x82\xb0\xe9\x96\x8b\xe5\xa7\x8b\xe3\x80\x82\n        | StartDrag of Point \n        /// \xe3\x83\x89\xe3\x83\xa9\xe3\x83\x83\xe3\x82\xb0\xe7\xb5\x82\xe4\xba\x86\xe3\x80\x82\n        | StopDrag \n        /// \xe3\x83\x89\xe3\x83\xa9\xe3\x83\x83\xe3\x82\xb0\xe3\x81\xae\xe4\xbd\x8d\xe7\xbd\xae\xe3\x82\x92\xe6\x9b\xb4\xe6\x96\xb0\xe3\x80\x82\n        | UpdatePosition of Point\n\n    /// DragChange\xe3\x81\xab\xe5\xbf\x9c\xe3\x81\x98\xe3\x81\xa6DragState\xe3\x82\x92\xe6\x9b\xb4\xe6\x96\xb0\xe3\x81\x97\xe3\x81\xa6\xe3\x80\x81\xe6\x96\xb0\xe3\x81\x97\xe3\x81\x84DragState\xe3\x82\x92\xe8\xbf\x94\xe3\x81\x99\xe3\x80\x82\n    let update_drag_state (state : DragState) (change : DragChange) : DragState =\n        match change with\n        | StartDrag(offset) -> { state with dragging=true; offset=offset }\n        | StopDrag -> update_dragging false state\n        | UpdatePosition(pos) -> update_drag_pos pos state\n\n    /// \xe3\x83\x9e\xe3\x82\xa6\xe3\x82\xb9\xe3\x82\xa4\xe3\x83\x99\xe3\x83\xb3\xe3\x83\x88\xe3\x81\x8c\xe5\xb7\xa6\xe3\x82\xaf\xe3\x83\xaa\xe3\x83\x83\xe3\x82\xaf\xe3\x81\xab\xe3\x82\x88\xe3\x81\xa3\xe3\x81\xa6\xe7\x99\xba\xe7\x94\x9f\xe3\x81\x97\xe3\x81\x9f\xe3\x81\x8b\xe3\x81\xa9\xe3\x81\x86\xe3\x81\x8b\xe3\x80\x82\n    let is_left_click (args : Input.MouseButtonEventArgs) : bool =\n        args.ChangedButton = Input.MouseButton.Left\n\n    /// \xe3\x83\x9e\xe3\x82\xa6\xe3\x82\xb9\xe3\x82\xa4\xe3\x83\x99\xe3\x83\xb3\xe3\x83\x88\xe6\x99\x82\xe3\x81\xabIInputElement\xe3\x81\x8b\xe3\x82\x89\xe3\x82\xab\xe3\x83\xbc\xe3\x82\xbd\xe3\x83\xab\xe3\x81\xae\xe7\x9b\xb8\xe5\xaf\xbe\xe4\xbd\x8d\xe7\xbd\xae\xe3\x82\x92\xe8\xa8\x88\xe7\xae\x97\xe3\x81\x99\xe3\x82\x8b\xe3\x80\x82\n    let get_mouse_position (relative_to : IInputElement) (args : Input.MouseEventArgs) : Point =\n        args.GetPosition relative_to\n\n    let handle (canvas:Canvas) (rectangle:Shapes.Rectangle) =\n        let set_rect_position (position : Point) =\n            Canvas.SetLeft(rectangle, position.X)\n            Canvas.SetTop(rectangle, position.Y)\n\n        let get_canvas_position = get_mouse_position canvas\n        let get_rectangle_position = get_mouse_position rectangle\n\n        let is_left_click (args : Input.MouseButtonEventArgs) =\n            args.ChangedButton = Input.MouseButton.Left\n\n        let start_stream =\n            rectangle.MouseDown \n            |> Observable.filter is_left_click\n            |> Observable.map (get_rectangle_position >> StartDrag)\n        \n        let stop_stream =\n            canvas.MouseUp \n            |> Observable.filter is_left_click\n            |> Observable.map (fun _ -> StopDrag)\n        \n        let move_stream =\n            canvas.MouseMove\n            |> Observable.map (get_canvas_position >> UpdatePosition)\n\n        let subscription =\n            Observable.merge start_stream stop_stream |> Observable.merge move_stream\n            |> Observable.scan update_drag_state initial_state\n            |> Observable.filter currently_dragging\n            |> Observable.map get_drag_position\n            |> Observable.subscribe set_rect_position\n        subscription\n\nlet loadMainWindowFromXaml() =\n    XamlServices.Parse(xamlString) :?> Window\n\nlet startupAdd e =\n    let window = loadMainWindowFromXaml()\n    \n    let windowCanvas = window.FindName("Canvas") :?> Canvas\n    let windowRectangle = window.FindName("Rectangle") :?> Shapes.Rectangle\n\n    let subscription =\n        windowCanvas.MouseDown\n        |> Observable.subscribe (fun e ->\n#if VERSION2\n            version2.handle windowCanvas windowRectangle |> ignore\n#else\n    #if VERSION3\n            version3.handle windowCanvas windowRectangle |> ignore\n    #else\n        #if VERSION4\n            version4.handle windowCanvas windowRectangle |> ignore\n        #else\n            #if VERSION5\n            version5.handle windowCanvas windowRectangle |> ignore\n            #else\n            version1.handle windowCanvas windowRectangle |> ignore\n            #endif\n        #endif\n    #endif\n#endif\n            )\n\n    window.Show()\n\ntype App() as x =\n    inherit Application()\n    do\n        x.Startup.Add <| startupAdd\n\nlet main() =\n    let app = App()\n    app.Run() |> ignore\n\n[<STAThread>]\ndo\n    main()\n'