b'/*\n * Copyright (C) 2015 Naman Dwivedi\n *\n * Licensed under the GNU General Public License v3\n *\n * This is free software: you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n */\n\npackage com.naman14.timber.subfragments;\n\nimport android.content.Context;\nimport android.graphics.Bitmap;\nimport android.os.AsyncTask;\nimport android.os.Bundle;\nimport androidx.annotation.Nullable;\nimport androidx.fragment.app.Fragment;\nimport android.util.Pair;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.ImageView;\nimport android.widget.TextView;\n\nimport com.naman14.timber.R;\nimport com.naman14.timber.dataloaders.LastAddedLoader;\nimport com.naman14.timber.dataloaders.PlaylistLoader;\nimport com.naman14.timber.dataloaders.PlaylistSongLoader;\nimport com.naman14.timber.dataloaders.SongLoader;\nimport com.naman14.timber.dataloaders.TopTracksLoader;\nimport com.naman14.timber.models.Playlist;\nimport com.naman14.timber.models.Song;\nimport com.naman14.timber.utils.Constants;\nimport com.naman14.timber.utils.NavigationUtils;\nimport com.naman14.timber.utils.PreferencesUtility;\nimport com.naman14.timber.utils.TimberUtils;\nimport com.nostra13.universalimageloader.core.DisplayImageOptions;\nimport com.nostra13.universalimageloader.core.ImageLoader;\nimport com.nostra13.universalimageloader.core.listener.SimpleImageLoadingListener;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\n\npublic class PlaylistPagerFragment extends Fragment {\n\n    private static final String ARG_PAGE_NUMBER = "pageNumber";\n    private int[] foregroundColors = {R.color.pink_transparent, R.color.green_transparent, R.color.blue_transparent, R.color.red_transparent, R.color.purple_transparent};\n    private int pageNumber, songCountInt, totalRuntime;\n    private int foregroundColor;\n    private long firstAlbumID = -1;\n    private Playlist playlist;\n    private TextView playlistame, songcount, playlistnumber, playlisttype, runtime;\n    private ImageView playlistImage;\n    private View foreground;\n    private Context mContext;\n    private boolean showAuto;\n\n    public static PlaylistPagerFragment newInstance(int pageNumber) {\n        PlaylistPagerFragment fragment = new PlaylistPagerFragment();\n        Bundle bundle = new Bundle();\n        bundle.putInt(ARG_PAGE_NUMBER, pageNumber);\n        fragment.setArguments(bundle);\n        return fragment;\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,\n                             @Nullable Bundle savedInstanceState) {\n        showAuto = PreferencesUtility.getInstance(getActivity()).showAutoPlaylist();\n        View rootView = inflater.inflate(R.layout.fragment_playlist_pager, container, false);\n\n        final List<Playlist> playlists = PlaylistLoader.getPlaylists(getActivity(), showAuto);\n\n        pageNumber = getArguments().getInt(ARG_PAGE_NUMBER);\n        playlist = playlists.get(pageNumber);\n\n        playlistame = (TextView) rootView.findViewById(R.id.name);\n        playlistnumber = (TextView) rootView.findViewById(R.id.number);\n        songcount = (TextView) rootView.findViewById(R.id.songcount);\n        runtime = (TextView) rootView.findViewById(R.id.runtime);\n        playlisttype = (TextView) rootView.findViewById(R.id.playlisttype);\n        playlistImage = (ImageView) rootView.findViewById(R.id.playlist_image);\n        foreground = rootView.findViewById(R.id.foreground);\n\n        playlistImage.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                ArrayList<Pair> tranitionViews = new ArrayList<>();\n                tranitionViews.add(0, Pair.create((View) playlistame, "transition_playlist_name"));\n                tranitionViews.add(1, Pair.create((View) playlistImage, "transition_album_art"));\n                tranitionViews.add(2, Pair.create(foreground, "transition_foreground"));\n                NavigationUtils.navigateToPlaylistDetail(getActivity(), getPlaylistType(), firstAlbumID, String.valueOf(playlistame.getText()), foregroundColor, playlist.id, tranitionViews);\n            }\n        });\n\n        mContext = this.getContext();\n        setUpPlaylistDetails();\n        return rootView;\n    }\n\n\n    @Override\n    public void onViewCreated(View view, Bundle savedinstancestate) {\n        new loadPlaylistImage().execute("");\n    }\n\n    private void setUpPlaylistDetails() {\n        playlistame.setText(playlist.name);\n\n        int number = getArguments().getInt(ARG_PAGE_NUMBER) + 1;\n        String playlistnumberstring;\n\n        if (number > 9) {\n            playlistnumberstring = String.valueOf(number);\n        } else {\n            playlistnumberstring = "0" + String.valueOf(number);\n        }\n        playlistnumber.setText(playlistnumberstring);\n\n        Random random = new Random();\n        int rndInt = random.nextInt(foregroundColors.length);\n\n        foregroundColor = foregroundColors[rndInt];\n        foreground.setBackgroundColor(foregroundColor);\n\n        if (showAuto) {\n            if (pageNumber <= 2)\n                playlisttype.setVisibility(View.VISIBLE);\n        }\n\n    }\n\n    private String getPlaylistType() {\n        if (showAuto) {\n            switch (pageNumber) {\n                case 0:\n                    return Constants.NAVIGATE_PLAYLIST_LASTADDED;\n                case 1:\n                    return Constants.NAVIGATE_PLAYLIST_RECENT;\n                case 2:\n                    return Constants.NAVIGATE_PLAYLIST_TOPTRACKS;\n                default:\n                    return Constants.NAVIGATE_PLAYLIST_USERCREATED;\n            }\n        } else return Constants.NAVIGATE_PLAYLIST_USERCREATED;\n    }\n\n\n    private class loadPlaylistImage extends AsyncTask<String, Void, String> {\n\n        @Override\n        protected String doInBackground(String... params) {\n            if (getActivity() != null) {\n                if (showAuto) {\n                    switch (pageNumber) {\n                        case 0:\n                            List<Song> lastAddedSongs = LastAddedLoader.getLastAddedSongs(getActivity());\n                            songCountInt = lastAddedSongs.size();\n                            for(Song song : lastAddedSongs) {\n                                totalRuntime += song.duration / 1000; //for some reason default playlists have songs with durations 1000x larger than they should be\n                            }\n                            if (songCountInt != 0) {\n                                firstAlbumID = lastAddedSongs.get(0).albumId;\n                                return TimberUtils.getAlbumArtUri(firstAlbumID).toString();\n                            } else return "nosongs";\n                        case 1:\n                            TopTracksLoader recentloader = new TopTracksLoader(getActivity(), TopTracksLoader.QueryType.RecentSongs);\n                            List<Song> recentsongs = SongLoader.getSongsForCursor(TopTracksLoader.getCursor());\n                            songCountInt = recentsongs.size();\n                            for(Song song : recentsongs){\n                                    totalRuntime += song.duration / 1000;\n                            }\n\n                            if (songCountInt != 0) {\n                                firstAlbumID = recentsongs.get(0).albumId;\n                                return TimberUtils.getAlbumArtUri(firstAlbumID).toString();\n                            } else return "nosongs";\n                        case 2:\n                            TopTracksLoader topTracksLoader = new TopTracksLoader(getActivity(), TopTracksLoader.QueryType.TopTracks);\n                            List<Song> topsongs = SongLoader.getSongsForCursor(TopTracksLoader.getCursor());\n                            songCountInt = topsongs.size();\n                            for(Song song : topsongs){\n                                    totalRuntime += song.duration / 1000;\n                            }\n                            if (songCountInt != 0) {\n                                firstAlbumID = topsongs.get(0).albumId;\n                                return TimberUtils.getAlbumArtUri(firstAlbumID).toString();\n                            } else return "nosongs";\n                        default:\n                            List<Song> playlistsongs = PlaylistSongLoader.getSongsInPlaylist(getActivity(), playlist.id);\n                            songCountInt = playlistsongs.size();\n                            for(Song song : playlistsongs){\n                                totalRuntime += song.duration;\n                            }\n                            if (songCountInt != 0) {\n                                firstAlbumID = playlistsongs.get(0).albumId;\n                                return TimberUtils.getAlbumArtUri(firstAlbumID).toString();\n                            } else return "nosongs";\n\n                    }\n                } else {\n                    List<Song> playlistsongs = PlaylistSongLoader.getSongsInPlaylist(getActivity(), playlist.id);\n                    songCountInt = playlistsongs.size();\n                    for(Song song : playlistsongs){\n                        totalRuntime += song.duration;\n                    }\n                    if (songCountInt != 0) {\n                        firstAlbumID = playlistsongs.get(0).albumId;\n                        return TimberUtils.getAlbumArtUri(firstAlbumID).toString();\n                    } else return "nosongs";\n                }\n            } else return "context is null";\n\n        }\n\n        @Override\n        protected void onPostExecute(String uri) {\n            ImageLoader.getInstance().displayImage(uri, playlistImage,\n                    new DisplayImageOptions.Builder().cacheInMemory(true)\n                            .showImageOnFail(R.drawable.ic_empty_music2)\n                            .resetViewBeforeLoading(true)\n                            .build(), new SimpleImageLoadingListener() {\n                        @Override\n                        public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {\n                        }\n                    });\n            songcount.setText(" " + String.valueOf(songCountInt) + " " + mContext.getString(R.string.songs));\n            runtime.setText(" " + TimberUtils.makeShortTimeString(mContext, totalRuntime));\n        }\n\n        @Override\n        protected void onPreExecute() {\n        }\n    }\n\n\n}\n\n'