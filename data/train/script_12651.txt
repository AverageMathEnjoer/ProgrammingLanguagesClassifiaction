b"module Control.Monad.TaggingMonad where\n\nimport Control.Applicative\nimport Data.Monoid\n\ndata TaggingMonad t a = TaggingMonad\n  { tag   :: t\n  , value :: a\n  }\n\ninstance Functor (TaggingMonad t) where\n  fmap f (TaggingMonad t v) = TaggingMonad t (f v)\n\ninstance Monoid t => Applicative (TaggingMonad t) where\n  pure f = TaggingMonad mempty f\n  (TaggingMonad t f) <*> (TaggingMonad t' x) =\n    (TaggingMonad (mappend t t') (f x))\n\ninstance Monoid t => Monad (TaggingMonad t) where\n  return x = TaggingMonad mempty x\n  (TaggingMonad t x) >>= f = \n    let TaggingMonad t' x' = f x\n    in TaggingMonad (mappend t t') x'\n\n"