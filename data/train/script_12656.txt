b'import System.Environment (getArgs)\nimport GameCreation (doNewCommand)\nimport GameMove (doMoveCommand)\nimport GameModel\nimport GameIO\nimport GameDisplay\nimport GameUtils\nimport IdrisGen\nimport qualified Data.Map as M\n\nshowUsage :: IO ()\nshowUsage = putStrLn "\\\n  \\Usage: ProofSweeperEngine <subCommand>\\n\\\n  \\  Sub-commands:\\n\\\n  \\    new <n>       Create a new n*n game, replacing current game\\n\\\n  \\    print         Print current status of game\\n\\\n  \\    hint <x> <y>  Get a hint\\n\\\n  \\    move <mine|notmine> <x> <y>\\n\\\n  \\         Check proof that (x,y) is or isn\'t a mine. You must have\\n\\\n  \\         defined mineAt_x_y or noMineAt_x_y in ProofSweeperPlay.idr\\n\\\n  \\         with the type MineFact (MkCoord x y) IsMine (or IsNotMine).\\n"\n\ndoPrintCommand :: IO ()\ndoPrintCommand = do\n  Just game <- loadGame\n  let counts = gameToMineCounts game\n  putStrLn $ displayGame game counts\n  \ndoRegenCommand :: IO ()\ndoRegenCommand = do\n  Just game <- loadGame\n  let counts = gameToMineCounts game\n  saveIdrisGame game counts\n\ndoHintCommand :: String -> String -> IO ()\ndoHintCommand xStr yStr = do\n    Just game <- loadGame\n    case (parseNumber xStr, parseNumber yStr) of\n      (Just x, Just y) ->\n        case M.lookup (Coord x y) (gameStatus game) of\n          Nothing -> putStrLn "No such coordinate found"\n          Just curStatus -> do\n            let counts = gameToMineCounts game\n            let game\' = expandNotMinesWithoutNeighbours\n                          (applyHint game (Coord x y) curStatus) counts\n            saveGame game\'\n            saveIdrisGame game\' counts\n            putStrLn $ displayGame game\' counts\n      (_, _) -> putStrLn "Expected two numbers after hint"\n  where\n    applyHint game coord cellStatus =\n      game { gameStatus = M.insert coord (cellStatus { cellVisibility = CellKnown }) (gameStatus game) }\n\nmain :: IO ()\nmain = do\n  args <- getArgs\n  case args of\n    "new":nStr:_-> doNewCommand nStr\n    "print":_ -> doPrintCommand\n    "regen":_ -> doRegenCommand -- For development.\n    "hint":x:y:_ -> doHintCommand x y\n    "move":moveType:x:y:_ -> doMoveCommand moveType x y\n    _ -> showUsage\n'