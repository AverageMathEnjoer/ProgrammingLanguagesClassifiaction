b'package co.joebirch.composeplayground.material\n\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material.*\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.ArrowBack\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.unit.dp\nimport co.joebirch.composeplayground.ComposableLayout\n\nobject TopAppBarView : ComposableLayout {\n\n    @Composable\n    override fun build() {\n        val selectedLayout = remember { mutableStateOf(0) }\n\n        Column(\n            modifier = Modifier.fillMaxSize(),\n            verticalArrangement = Arrangement.SpaceEvenly,\n            horizontalAlignment = Alignment.CenterHorizontally\n        ) {\n            when (selectedLayout.value) {\n                0 -> MinimalTopAppBar {\n                    Column(\n                        modifier = Modifier.fillMaxSize(),\n                        verticalArrangement = Arrangement.Center\n                    ) {\n                        Button(onClick = {\n                            selectedLayout.value = 1\n                        }, modifier = Modifier.align(Alignment.CenterHorizontally)) {\n                            Text(text = "Switch to Navigation Icon")\n                        }\n                    }\n                }\n                1 -> NavigationIconTopAppBar {\n                    Column(\n                        modifier = Modifier.fillMaxSize(),\n                        verticalArrangement = Arrangement.Center\n                    ) {\n                        Button(onClick = {\n                            selectedLayout.value = 2\n                        }, modifier = Modifier.align(Alignment.CenterHorizontally)) {\n                            Text(text = "Switch to styled TopAppBar")\n                        }\n                    }\n                }\n                /*\n                2 -> StyledTopAppBar {\n                    Column(modifier = Modifier.fillMaxSize(),\n                        verticalArrangement = Arrangement.Center) {\n                        Button(onClick = {\n                            selectedLayout.value = 3\n                        }, modifier = Modifier.align(Alignment.CenterHorizontally)) {\n                            Text(text = "Switch to Actions TopAppBar")\n                        }\n                    }\n                }\n                 */\n                3 -> ActionsTopAppBar {\n                    Column(\n                        modifier = Modifier.fillMaxSize(),\n                        verticalArrangement = Arrangement.Center\n                    ) {\n                        Button(onClick = {\n                            selectedLayout.value = 0\n                        }, modifier = Modifier.align(Alignment.CenterHorizontally)) {\n                            Text(text = "Switch to Minimal TopAppBar")\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n}\n\n@Composable\nfun MinimalTopAppBar(bodyContent: @Composable() () -> Unit) {\n    TopAppBar(\n        title = {\n            Text(text = "Compose Academy")\n        }\n    )\n}\n\n@Composable\nfun MinimalFlexibleTopAppBar(bodyContent: @Composable() () -> Unit) {\n    TopAppBar {\n        Text(text = "Compose Academy")\n    }\n}\n\n@Composable\nfun NavigationIconTopAppBar(bodyContent: @Composable() () -> Unit) {\n    Scaffold(topBar = {\n        TopAppBar(\n            title = {\n                Text(text = "Jetpack Compose")\n            },\n            navigationIcon = {\n                IconButton(onClick = { }) {\n                    Icon(\n                        Icons.Filled.ArrowBack,\n                        contentDescription = "Back arrow"\n                    )\n                }\n            }\n        )\n    }, content = {\n        bodyContent()\n    })\n}\n\n@Composable\nfun ElevationTopAppBar(bodyContent: @Composable() () -> Unit) {\n    TopAppBar(\n        title = {\n            Text(text = "Jetpack Compose")\n        },\n        elevation = 12.dp\n    )\n}\n\n@Composable\nfun BackgroundColorTopAppBar(bodyContent: @Composable() () -> Unit) {\n    TopAppBar(\n        title = {\n            Text(text = "Jetpack Compose")\n        },\n        backgroundColor = Color.Black\n    )\n}\n\n@Composable\nfun ContentColorTopAppBar(bodyContent: @Composable() () -> Unit) {\n    TopAppBar(\n        title = {\n            Text(text = "Jetpack Compose")\n        },\n        contentColor = Color.Black\n    )\n}\n\n@Composable\nfun ActionsTopAppBar(bodyContent: @Composable() () -> Unit) {\n    Scaffold(topBar = {\n        TopAppBar(\n            title = {\n                Text(text = "Compose Academy")\n            },\n            actions = {\n                Text(\n                    text = "Save", modifier = Modifier.padding(16.dp).clickable(onClick = {\n\n                    }),\n                    color = Color.White\n                )\n            }\n        )\n    }, content = {\n        bodyContent()\n    })\n}'