b"import Data.Array\n\ntestData :: [Int]\ntestData = [51, 38, 29, 51, 63, 38]\n\nranking1 :: [Int]\nranking1 = [3, 1, 3, 0, 1] \n\nranking2 :: [Int]\nranking2 = [2, 0, 3, 4, 0]\n\napplyUntil :: (a -> Bool) -> [a -> a] -> a -> a\napplyUntil p (f:fs) x = if p x then x else applyUntil p fs (f x)\n\npsort :: Ord b => [(a, b)] -> [[a]]\npsort xys = pass xys []\n\npass [] xss = xss\npass (e@(x , y):xys) xss = step xys [] [x] [] xss\n    where\n        step [] as bs cs xss = pass as (bs : pass cs xss)\n        step (e@(x, y'):xys) as bs cs xss \n            | y' < y    = step xys (e:as) bs cs xss\n            | y' == y   = step xys as (x:bs) cs xss\n            | y' > y    = step xys as bs (e:cs) xss\n\nsingle :: [a] -> Bool\nsingle xs = length xs == 1\n\nranktails :: Ord a => [a] -> [Int]\nranktails xs = (resort n . concat . label .\n               applyUntil (all single) (repartitions n) .\n               psort . zip [0..]) xs\n               where n = length xs\n\nresort :: Int -> [(Int, Int)] -> [Int]\nresort n = elems . array (0, n - 1)\n\nlabel :: [[a]] -> [[(a, Int)]]\nlabel iss = zipWith tag iss (scanl (+) 0 (map length iss))\n\ntag :: [a] -> b -> [(a, b)]\ntag is j = [(i, j ) | i <- is]\n\nrepartitions :: Int -> [[[Int]] -> [[Int]]]\nrepartitions n = map (repartition n) (iterate (* 2) 1)\n\nrepartition :: Int -> Int -> [[Int]] -> [[Int]]\nrepartition n k iss = concatMap (psort . map install ) iss\n                      where install i = (i, if j < n then k + a!j else n - i - 1)\n                                        where j = i + k\n                            a = array (0, n - 1) (concat (label iss))\n\n\n\n"