b'#\' Save currently active R graph to vector format\n#\' \n#\' Save the currently active R graph or a graph passed as an object or function \n#\' to vector format with sensible defaults\n#\' \n#\' \n#\' @importFrom grDevices dev.size\n#\' @importFrom grDevices svg\n#\' @importFrom grDevices pdf\n#\' @importFrom grDevices postscript\n#\' @importFrom grDevices dev.off\n#\' @importFrom grDevices cairo_pdf\n#\' @importFrom grDevices cairo_ps\n#\' @aliases graph2vector graph2svg graph2pdf graph2eps\n#\' @param x given \\code{ggplot2} plot or \\code{lattice} plot object to export; if\n#\' set to \\code{NULL} the currently active R graph will be exported; not\n#\' supported for base R plots.\n#\' @param file name of output file. Any extension is ignored and added\n#\' according to the requested output type. If file already exists it is overwritten.\n#\' @param fun plot passed on as a function used to create it; useful especially\n#\' for base R plots.\n#\' @param type desired output type - \\code{SVG}, \\code{PDF} or \\code{EPS} are currently supported.\n#\' \\code{SVG} is the preferred format, and good for editing in Inkscape; \\code{PDF} is good\n#\' for printing; \\code{EPS} is sometimes requested by journals, though lower quality,\n#\' especially when semi-transparency is used, as this is rasterized to bitmap. \n#\' \\code{\\link{graph2office}} is recommended for vector output to Microsoft Office.\n#\' @param aspectr desired width to height aspect ratio. If set to \\code{NULL}, the\n#\' aspect ratio of the graphics device is used. Can also be combined with one\n#\' value for either the desired width or height of the graph.\n#\' @param width desired width in inches; can be combined with a desired\n#\' aspect ratio aspectr.\n#\' @param height desired height in inches; can be combined with a desired\n#\' aspect ratio aspectr.\n#\' @param scaling scale width & height by a certain percentage.\n#\' @param font desired font to use for labels; defaults to \\code{"Arial"} on Windows\n#\' systems and to \\code{"Helvetica"} on other systems. Fonts are embedded by default in \\code{EPS} output.\n#\' @param bg desired background colour, e.g. \\code{"white"} or \\code{"transparent"}.\n#\' @param cairo logical indicating whether or not to use the \\code{cairo} graphics\n#\' device for output to \\code{PDF} or \\code{EPS}, defaults to \\code{TRUE}, thereby allowing for\n#\' simulated semi-transparency in \\code{EPS} output, by rasterizing semi-transparent\n#\' sections, and automated font embedding.\n#\' @param fallback_resolution resolution in dpi to use to rasterize non-supported\n#\' vector graphics (e.g. semi-transparent vector elements in \\code{EPS}) output).\n#\' @param colormodel desired colormodel in \\code{pdf} or \\code{eps} output when \\code{cairo=FALSE};\n#\' currently allowed values are \\code{"rgb"} (default), \\code{"cmyk"}, \\code{"srgb"}, \\code{"srgb+gray"}, \\code{"rgb-nogray"}, \n#\' and \\code{"gray"} (or \\code{"grey"}). \n#\' @param \\dots any other options are passed on to \\code{\\link{svg}}, \\code{\\link{cairo_pdf}}, \\code{\\link{cairo_ps}}, \\code{\\link{pdf}} or\n#\' postscript.\n#\' @return No return value\n#\' @author Tom Wenseleers\n#\' @example examples/graph2vector.R\n#\' @seealso \\code{\\link{graph2office}}, \\code{\\link{graph2bitmap}}, \\code{\\link{graph2png}}, \\code{\\link{graph2tif}}, \\code{\\link{graph2jpg}} \n#\' @export\n#\' \ngraph2vector = function(x = NULL, file = "Rplot", fun = NULL, type = "SVG", \n                        aspectr = NULL, width = NULL, height = NULL, scaling = 100, \n                        font = ifelse(Sys.info()["sysname"]=="Windows","Arial",\n                                      "Helvetica")[[1]], bg = "white", colormodel="rgb", \n                        cairo = TRUE, fallback_resolution = 600, ...) {\n  type = toupper(type)\n  type = match.arg(type,c("SVG","PDF","EPS"))\n  ext = paste0(".", tolower(type))\n  file = sub("^(.*)[.].*", "\\\\1", file)  # remove extension if given\n  file = paste0(file, ext)  # add extension\n  obj=x\n  if (is.null(obj) & is.null(fun)) p = captureplot() else p = obj\n  if (inherits(p,"list")) \n    stop("base R plots cannot be passed as objects, use ggplot2 or lattice plots instead")\n  myplot = if (is.null(fun)) function(pl = p) print(pl) else fun\n  \n  if(!identical(options()$device, FALSE)){\n    plotsize = dev.size()\n  } else {\n    plotsize = c(7,5) # default device size: 10 inch x 10 inch\n  }\n  \n  w = plotsize[[1]]\n  h = plotsize[[2]]\n  plotaspectr = plotsize[[1]]/plotsize[[2]]\n  if ((!is.null(aspectr))&is.null(height)&is.null(width)) { plotaspectr = aspectr\n  if (plotaspectr >= 1) { \n    h = w/plotaspectr } else { w = h*plotaspectr } \n  }\n  if ((is.null(height))&(!is.null(width))) { w = width; h = w / plotaspectr }\n  if ((is.null(width))&(!is.null(height))) { h = height; w = h / plotaspectr } \n  # if width and height is given override other scaling params\n  if ((!is.null(width))&(!is.null(height))) { w = width; h = height }  \n  w = w*scaling/100; h = h*scaling/100;\n  \n  if (type == "SVG") {\n    svg(filename = file, \n        height = h, \n        width = w,\n        family = font,\n        onefile = FALSE,\n        bg = bg,\n        ... )\n    myplot()\n    dev.off()\n  }\n  \n  if (type == "PDF") {\n    #cairo_surface_set_fallback_resolution() # check cairoSurfaceSetFallbackResolution in library(RGtk2)\n    if (!cairo) { \n      pdf(file = file,  # also check cairo_pdf\n          height = h, \n          width = w,\n          family = font,\n          onefile = FALSE,\n          bg = bg,\n          colormodel = colormodel, \n          useDingbats = FALSE,\n          ... ) \n    } else { \n      if ("fallback_resolution" %in% names(formals(fun=cairo_ps))) {\n        cairo_pdf(filename = file,  \n                  height = h, \n                  width = w,\n                  family = font, \n                  onefile = FALSE,\n                  bg = bg,\n                  fallback_resolution = fallback_resolution,\n                  ... ) \n      } else {\n        cairo_pdf(filename = file,  # also check cairo_pdf\n                  height = h, \n                  width = w,\n                  family = font, \n                  onefile = FALSE,\n                  bg = bg,\n                  ... )\n      }\n    }\n    myplot()\n    dev.off()\n  }\n  \n  if (type == "EPS") { \n    if (!cairo) { postscript(file = file, \n                             height = h, \n                             width = w,\n                             family = font,\n                             onefile = FALSE,\n                             bg = bg,\n                             colormodel = colormodel, \n                             ... ) \n    } else { \n      if ("fallback_resolution" %in% names(formals(fun=cairo_ps)))  {\n        cairo_ps(filename = file, \n                 height = h, \n                 width = w,\n                 family = font,\n                 onefile = FALSE,\n                 bg = bg,\n                 fallback_resolution = fallback_resolution,\n                 ... )\n      } else {\n        cairo_ps(filename = file, \n                 height = h, \n                 width = w,\n                 family = font,\n                 onefile = FALSE,\n                 bg = bg,\n                 ... )\n      }\n    }\n    myplot()\n    dev.off()\n  }\n  \n  message(paste0("Exported graph as ",file))\n  \n}\n\n\n\n#\' @describeIn graph2vector\n#\' Save currently active R graph to SVG format\n#\' @export\ngraph2svg = function(...) graph2vector(type = "SVG", ...)\n\n#\' @describeIn graph2vector\n#\' Save currently active R graph to PDF format\n#\' @export\ngraph2pdf = function(...) graph2vector(type = "PDF", ...)\n\n#\' @describeIn graph2vector\n#\' Save currently active R graph to EPS format\n#\' @export\ngraph2eps = function(...) graph2vector(type = "EPS", ...)\n\n'