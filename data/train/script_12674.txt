b'{-# LANGUAGE NoImplicitPrelude #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n\nmodule Course.Compose where\n\nimport Course.Core\nimport Course.Functor\nimport Course.Applicative\nimport Course.Monad\n\n-- Exactly one of these exercises will not be possible to achieve. Determine which.\n\nnewtype Compose f g a =\n  Compose (f (g a))\n\n-- Implement a Functor instance for Compose\ninstance (Functor f, Functor g) =>\n    Functor (Compose f g) where\n  (<$>) =\n    error "todo: Course.Compose (<$>)#instance (Compose f g)"\n\ninstance (Applicative f, Applicative g) =>\n  Applicative (Compose f g) where\n-- Implement the pure function for an Applicative instance for Compose\n  pure =\n    error "todo: Course.Compose pure#instance (Compose f g)"\n-- Implement the (<*>) function for an Applicative instance for Compose\n  (<*>) =\n    error "todo: Course.Compose (<*>)#instance (Compose f g)"\n\ninstance (Monad f, Monad g) =>\n  Monad (Compose f g) where\n-- Implement the (=<<) function for a Monad instance for Compose\n  (=<<) =\n    error "todo: Course.Compose (<<=)#instance (Compose f g)"\n'