b'import assertk.assertThat\nimport assertk.assertions.isGreaterThan\nimport com.github.eprendre.tingshu.utils.Book\nimport com.github.eprendre.tingshu.utils.Episode\nimport org.jsoup.Jsoup\nimport org.junit.Test\nimport java.net.URLEncoder\n\n/**\n * 6\xe5\x90\xac\xe7\xbd\x91\xe6\xb5\x8b\xe8\xaf\x95\n */\nclass LiuTingUnitTest {\n\n    /**\n     * \xe6\xb5\x8b\xe8\xaf\x95\xe6\x90\x9c\xe7\xb4\xa2\n     */\n    @Test\n    fun search() {\n        val keywords = "\xe6\x9d\xa5\xe8\x87\xaa\xe9\x98\xb4\xe9\x97\xb4"\n        val encodedKeywords = URLEncoder.encode(keywords, "utf-8")\n        val page = 1\n        val url = "http://www.6ting.cn/search.php?page=${page}&searchword=${encodedKeywords}"\n        val doc = Jsoup.connect(url).testConfig(false).get()\n\n        val pager = doc.select(".pager > li")\n        var totalPage = page\n        if (pager.size > 0) {\n            pager.firstOrNull { it.text().equals("\xe4\xb8\x8b\xe4\xb8\x80\xe9\xa1\xb5") }?.let {\n                totalPage = page + 1\n            }\n        }\n\n        println(totalPage)\n        val list = ArrayList<Book>()\n        val elementList = doc.select(".list-unstyled > li.ting-col")\n        elementList.forEach { element ->\n            val coverUrl = element.selectFirst("img").absUrl("src")\n            val bookUrl = element.selectFirst("h4 > a").absUrl("href")\n            val title = element.selectFirst("h4 > a").text()\n            val l = element.select("h6 > a")\n            val author = l.first().text()\n            val artist = l.last().text()\n            list.add(Book(coverUrl, bookUrl, title, author, artist).apply {\n\n            })\n        }\n        list.forEach { println(it) }\n        assertThat(list.size).isGreaterThan(0)\n    }\n\n    /**\n     * \xe4\xb9\xa6\xe7\xb1\x8d\xe8\xaf\xa6\xe7\xbb\x86\n     */\n    @Test\n    fun bookDetail() {\n        val episodes = ArrayList<Episode>()\n        val doc = Jsoup.connect("http://www.6ting.cn/books/4896.html").testConfig(false).get()\n        val playlists = doc.select("#ting-tab-content > div > .play-list")\n        playlists.forEach { element ->\n            val l = element.select("li > a").map {\n                Episode(it.text(), it.absUrl("href"))\n            }\n            if (l.size > episodes.size) {\n                episodes.clear()\n                episodes.addAll(l)\n            }\n        }\n\n\n//        val episodes = doc.select(".play-list > li > a").map {\n//            Episode(it.text(), it.absUrl("href"))\n//        }\n        println(episodes.size)\n        episodes.take(20).forEach { println(it) }\n        assertThat(episodes.size).isGreaterThan(0)\n    }\n\n    /**\n     * \xe5\x88\x86\xe7\xb1\xbb\n     */\n    @Test\n    fun category() {\n        val doc = Jsoup.connect("http://www.6ting.cn/booklist/1.html").testConfig(false).get()\n\n        val pager = doc.select(".pager > li > a")\n        var currentPage = 1\n        var totalPage = 1\n        var nextUrl = ""\n        if (pager.size > 0) {\n            pager.firstOrNull { it.text().equals("\xe4\xb8\x8b\xe4\xb8\x80\xe9\xa1\xb5") }?.let {\n                totalPage = currentPage + 1\n                nextUrl = it.absUrl("href")\n            }\n        }\n\n        println("$currentPage/$totalPage")\n        println("nextUrl: $nextUrl")\n        val list = ArrayList<Book>()\n        val elementList = doc.select(".list-unstyled > li.ting-col")\n        elementList.forEach { element ->\n            val coverUrl = element.selectFirst("img").absUrl("src")\n            val bookUrl = element.selectFirst("h4 > a").absUrl("href")\n            val title = element.selectFirst("h4 > a").text()\n            val l = element.select("h6 > a")\n            val author = l.first().text()\n            val artist = l.last().text()\n            list.add(Book(coverUrl, bookUrl, title, author, artist).apply {\n\n            })\n        }\n\n        list.take(5).forEach { println(it) }\n        assertThat(list.size).isGreaterThan(0)\n    }\n\n    @Test\n    fun fetchCategory() {\n        val doc = Jsoup.connect("http://www.6ting.cn/booklist/1.html").testConfig(false).get()\n        val navs = doc.select("#sx > .list-unstyled > li > a")\n            val sb = StringBuilder()\n\n            val list = navs.map { a ->\n                val href = a.absUrl("href")\n                val text = a.text()\n                return@map "CategoryTab(\\"$text\\", \\"$href\\")"\n            }.joinToString(",\\n")\n\n            sb.append(list)\n            println(sb.toString())\n    }\n}\n'