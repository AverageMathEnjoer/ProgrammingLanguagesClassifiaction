b'package effectivejava.chapter3.item10.composition;\n\nimport effectivejava.chapter3.item10.Color;\nimport effectivejava.chapter3.item10.Point;\n\nimport java.util.Objects;\n\n// Adds a value component without violating the equals contract (page 44)\npublic class ColorPoint {\n    private final Point point;\n    private final Color color;\n\n    public ColorPoint(int x, int y, Color color) {\n        point = new Point(x, y);\n        this.color = Objects.requireNonNull(color);\n    }\n\n    /**\n     * Returns the point-view of this color point.\n     */\n    public Point asPoint() {\n        return point;\n    }\n\n    @Override public boolean equals(Object o) {\n        if (!(o instanceof ColorPoint))\n            return false;\n        ColorPoint cp = (ColorPoint) o;\n        return cp.point.equals(point) && cp.color.equals(color);\n    }\n\n    @Override public int hashCode() {\n        return 31 * point.hashCode() + color.hashCode();\n    }\n}'