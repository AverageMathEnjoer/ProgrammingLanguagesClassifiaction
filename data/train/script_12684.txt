b'\xef\xbb\xbfusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Text;\nusing Castle.DynamicProxy;\nusing Core.Utilities.Interceptors;\nusing Core.Utilities.IoC;\nusing Microsoft.Extensions.DependencyInjection;\n\nnamespace Core.Aspects.Autofac.Performance\n{\n    public class PerformanceAspect:MethodInterception\n    {\n        private int _interval;\n        private Stopwatch _stopwatch;\n\n        public PerformanceAspect(int interval)\n        {\n            _interval = interval;\n            _stopwatch = ServiceTool.ServiceProvider.GetService<Stopwatch>();\n        }\n\n\n        protected override void OnBefore(IInvocation invocation)\n        {\n            _stopwatch.Start();\n        }\n\n        protected override void OnAfter(IInvocation invocation)\n        {\n            if (_stopwatch.Elapsed.TotalSeconds>_interval)\n            {\n                Debug.WriteLine($"Performance : {invocation.Method.DeclaringType.FullName}.{invocation.Method.Name}-->{_stopwatch.Elapsed.TotalSeconds}");\n            }\n            _stopwatch.Reset();\n        }\n    }\n}\n'