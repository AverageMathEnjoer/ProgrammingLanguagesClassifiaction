b'{-# LANGUAGE MultiParamTypeClasses #-}\n{-# LANGUAGE TypeFamilies #-}\n{-# LANGUAGE TypeOperators #-}\n\nmodule Data.Xournal.Generic where\n\nimport Control.Category (id, (.))\nimport Data.ByteString.Char8 (ByteString)\nimport Data.IntMap\n  ( IntMap,\n    elems,\n    fromList,\n  )\nimport Data.Xournal.Simple\n  ( Background (..),\n    Dimension (..),\n    Layer (..),\n    Page (..),\n    Stroke (..),\n    Xournal (..),\n  )\nimport Lens.Micro (Lens\', lens, (^.))\nimport Prelude hiding (id, (.))\n\n-- |\ndata GXournal s a = GXournal\n  { gtitle :: ByteString,\n    gpages :: s a\n  }\n\n-- |\ndata GPage b s a = GPage\n  { gdimension :: Dimension,\n    gbackground :: b,\n    glayers :: s a\n  }\n\n-- |\ndata GLayer s a = GLayer {gstrokes :: s a}\n\n-- |\ndata GLayerBuf b s a = GLayerBuf\n  { gbuffer :: b,\n    gbstrokes :: s a\n  }\n\n-- |\ninstance (Functor s) => Functor (GLayer s) where\n  fmap f (GLayer strs) = GLayer (fmap f strs)\n\n-- |\ninstance (Functor s) => Functor (GLayerBuf b s) where\n  fmap f (GLayerBuf b strs) = GLayerBuf b (fmap f strs)\n\n-- |\ninstance (Functor s) => Functor (GPage b s) where\n  fmap f (GPage d b ls) = GPage d b (fmap f ls)\n\n-- |\ninstance (Functor s) => Functor (GXournal s) where\n  fmap f (GXournal t ps) = GXournal t (fmap f ps)\n\n-- |\nclass GCast a b where\n  gcast :: a -> b\n\n-- |\ndata GSelect a b = GSelect\n  { gselectTitle :: ByteString,\n    gselectAll :: a,\n    gselectSelected :: b\n  }\n\n-- |\ntype TLayerSimple = GLayer [] Stroke\n\n-- |\ntype TPageSimple = GPage Background [] TLayerSimple\n\n-- |\ntype TXournalSimple = GXournal [] TPageSimple\n\n-- |\nclass GStrokeable a where\n  gFromStroke :: Stroke -> a\n  gToStroke :: a -> Stroke\n\n-- |\ninstance GStrokeable Stroke where\n  gFromStroke = id\n  gToStroke = id\n\n-- |\nclass GListable s where\n  gFromList :: [a] -> s a\n  gToList :: s a -> [a]\n\n-- |\ninstance GListable [] where\n  gFromList = id\n  gToList = id\n\n-- |\ninstance GListable IntMap where\n  gFromList = Data.IntMap.fromList . zip [0 ..]\n  gToList = Data.IntMap.elems\n\n-- |\nclass GBackgroundable b where\n  gFromBackground :: Background -> b\n  gToBackground :: b -> Background\n\n-- |\ninstance GBackgroundable Background where\n  gFromBackground = id\n  gToBackground = id\n\n-- |\nfromLayer :: (GStrokeable a, GListable s) => Layer -> GLayer s a\nfromLayer = GLayer . gFromList . fmap gFromStroke . layer_strokes\n\n-- |\nfromPage ::\n  ( GStrokeable a,\n    GBackgroundable b,\n    GListable s,\n    GListable s\'\n  ) =>\n  Page ->\n  GPage b s\' (GLayer s a)\nfromPage p =\n  let bkg = gFromBackground $ page_bkg p\n      dim = page_dim p\n      ls = gFromList . fmap fromLayer . page_layers $ p\n   in GPage dim bkg ls\n\n-- |\nclass SListable m where\n  chgStreamToList :: (GListable s) => m s a -> m [] a\n\n-- |\ninstance SListable GLayer where\n  chgStreamToList (GLayer xs) = GLayer (gToList xs)\n\n-- |\ninstance SListable (GPage b) where\n  chgStreamToList (GPage d b ls) = GPage d b (gToList ls)\n\n-- |\ninstance SListable GXournal where\n  chgStreamToList (GXournal t ps) = GXournal t (gToList ps)\n\n-- |\ng_title :: Lens\' (GXournal s a) ByteString\ng_title = lens gtitle (\\f a -> f {gtitle = a})\n\n-- |\ng_pages :: Lens\' (GXournal s a) (s a)\ng_pages = lens gpages (\\f a -> f {gpages = a})\n\n-- |\ng_dimension :: Lens\' (GPage b s a) Dimension\ng_dimension = lens gdimension (\\f a -> f {gdimension = a})\n\n-- |\ng_background :: Lens\' (GPage b s a) b\ng_background = lens gbackground (\\f a -> f {gbackground = a})\n\n-- |\ng_layers :: Lens\' (GPage b s a) (s a)\ng_layers = lens glayers (\\f a -> f {glayers = a})\n\n-- |\ng_strokes :: Lens\' (GLayer s a) (s a)\ng_strokes = lens gstrokes (\\f a -> f {gstrokes = a})\n\n-- |\ng_bstrokes :: Lens\' (GLayerBuf b s a) (s a)\ng_bstrokes = lens gbstrokes (\\f a -> f {gbstrokes = a})\n\n-- |\ng_buffer :: Lens\' (GLayerBuf b s a) b\ng_buffer = lens gbuffer (\\f a -> f {gbuffer = a})\n\n-- |\ng_selectTitle :: Lens\' (GSelect a b) ByteString\ng_selectTitle = lens gselectTitle (\\f a -> f {gselectTitle = a})\n\n-- |\ng_selectAll :: Lens\' (GSelect a b) a\ng_selectAll = lens gselectAll (\\f a -> f {gselectAll = a})\n\n-- |\ng_selectSelected :: Lens\' (GSelect a b) b\ng_selectSelected = lens gselectSelected (\\f a -> f {gselectSelected = a})\n\n-- |\ntoLayer :: (GStrokeable a, GListable s) => GLayer s a -> Layer\ntoLayer = layerFromTLayerSimple . fmap gToStroke . chgStreamToList\n\n-- |\ntoNoBufferLayer :: GLayerBuf b s a -> GLayer s a\ntoNoBufferLayer (GLayerBuf _b s) = GLayer s\n\n-- |\ntoPage ::\n  (GStrokeable a, GBackgroundable b, GListable s, GListable s\', Functor s\') =>\n  (b -> Background) ->\n  GPage b s\' (GLayer s a) ->\n  Page\ntoPage f = pageFromTPageSimple . bkgchange f . chgStreamToList . fmap (fmap gToStroke . chgStreamToList)\n\n-- |\ntoPageFromBuf ::\n  (GStrokeable a, GBackgroundable b, GListable s, GListable s\', Functor s\') =>\n  (b -> Background) ->\n  GPage b s\' (GLayerBuf buf s a) ->\n  Page\ntoPageFromBuf f = pageFromTPageSimple . bkgchange f . chgStreamToList . fmap (fmap gToStroke . chgStreamToList . toNoBufferLayer)\n\n-- |\nbkgchange :: (b -> b\') -> GPage b s a -> GPage b\' s a\nbkgchange f p = p {gbackground = f (gbackground p)}\n\n-- |\nmkTLayerSimpleFromLayer :: Layer -> TLayerSimple\nmkTLayerSimpleFromLayer = GLayer <$> layer_strokes\n\n-- |\nmkTPageSimpleFromPage :: Page -> TPageSimple\nmkTPageSimpleFromPage = GPage <$> page_dim <*> page_bkg <*> map mkTLayerSimpleFromLayer . page_layers\n\n-- |\nmkTXournalSimpleFromXournal :: Xournal -> TXournalSimple\nmkTXournalSimpleFromXournal = GXournal <$> xoj_title <*> map mkTPageSimpleFromPage . xoj_pages\n\n-- |\nlayerFromTLayerSimple :: TLayerSimple -> Layer\nlayerFromTLayerSimple = Layer <$> gstrokes\n\n-- |\npageFromTPageSimple :: TPageSimple -> Page\npageFromTPageSimple = Page <$> gdimension <*> gbackground <*> map layerFromTLayerSimple . glayers\n\n-- |\nxournalFromTXournalSimple :: TXournalSimple -> Xournal\nxournalFromTXournalSimple = Xournal <$> gtitle <*> map pageFromTPageSimple . gpages\n\n----\n\n-- |\nemptyPageFromOldPage :: (GListable s) => GPage b s a -> GPage b s a\nemptyPageFromOldPage =\n  GPage\n    <$> (^. g_dimension)\n    <*> (^. g_background)\n    <*> pure (gFromList [])\n\n--  (get g_dimension p) (get g_background p) (gFromList [] )\n\n----\n\n-- |\nprintLayerStructureInPage ::\n  (GListable s) =>\n  GPage b s (GLayerBuf buf [] a) ->\n  IO ()\nprintLayerStructureInPage page = do\n  let lyrs = page ^. g_layers\n      lst = fmap (Prelude.length . (^. g_bstrokes)) (gToList lyrs)\n  (Prelude.putStrLn . ("num of layers = " ++) . show . Prelude.length . gToList) lyrs\n  Prelude.putStrLn $ "layer strokes = " ++ show lst\n'