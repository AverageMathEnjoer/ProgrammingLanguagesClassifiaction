b'#\' Get confusion table for fastLink objects\n#\'\n#\' Calculate confusion table after running fastLink().\n#\'\n#\' @usage confusion(object, threshold)\n#\'\n#\' @param object A \'fastLink\' object or list of fastLink objects. Can only be run if \'return.all = TRUE\' in \'fastLink().\'\n#\' @param threshold The matching threshold above which a pair is a true match. Default is .85\n#\'\n#\' @return \'confusion()\' returns two tables - one calculating the confusion table, and another\n#\' calculating a series of additional summary statistics.\n#\'\n#\' @author Ted Enamorado <ted.enamorado@gmail.com> and Ben Fifield <benfifield@gmail.com>\n#\'\n#\' @examples\n#\' \\dontrun{\n#\'  out <- fastLink(\n#\'  dfA = dfA, dfB = dfB,\n#\'  varnames = c("firstname", "middlename", "lastname"),\n#\'  stringdist.match = c("firstname", "middlename", "lastname"),\n#\'  partial.match = c("firstname", "lastname", "streetname"),\n#\'  return.all = TRUE)\n#\'\n#\'  ct <- confusion(out)\n#\' }\n#\' \n#\' @export\nconfusion <- function(object, threshold = .85) {\n\n    ## Check classes\n    if(inherits(object, "list")){\n        classcheck_list <- unlist(lapply(object, function(x){inherits(x, "confusionTable")}))\n        if(sum(classcheck_list) < length(classcheck_list)){\n            stop("You can only run \'confusion()\' if every fastLink object was run with \'return.all = TRUE\' in \'fastLink()\'.")\n        }\n    }else if(!inherits(object, "confusionTable")){\n        stop("You can only run \'confusion()\' if \'return.all = TRUE\' in \'fastLink()\'.")\n    }\n\n    ## Format things\n    if(inherits(object, "list")){\n        nobs.a <- sum(unlist(lapply(object, "[[", "nobs.a")))\n        nobs.b <- sum(unlist(lapply(object, "[[", "nobs.b")))\n        posterior <- unlist(lapply(object, "[[", "posterior"))\n    }else{\n        nobs.a <- object$nobs.a\n        nobs.b <- object$nobs.b\n        posterior <- object$posterior\n    }\n\n    ## TM\n    D <- sum(posterior * ifelse(posterior >= threshold, 1, 0))\n    ## FP\n    B <- sum(ifelse(posterior >= threshold, 1, 0)) - D\n    ## TNM\n    A.1 <- sum((1 - posterior) * ifelse(posterior < threshold, 1, 0))\n    A <- A.1 + (min(nobs.a, nobs.b) - D - B - A.1) * (1 - 0.001)\n    ## FN\n    C <- (min(nobs.a, nobs.b) - D - B) - A\n    \n    t1 <- round(rbind(c(D, B), c(C, A)), 2)\n    colnames(t1) <- c("\'True\' Matches", "\'True\' Non-Matches")\n    rownames(t1) <- c("Declared Matches", "Declared Non-Matches")\n    \n    N    = A + B + C + D\n    sens = 100 * D/(C + D)\n    spec = 100 * A/(A + B)\n    ppv  = 100 * D/(B + D)\n    npv  = 100 * A/(A + C)\n    fpr  = 100 * B/(A + B)\n    fnr  = 100 * C/(C + D)\n    acc  = 100 * (A + D)/N\n    f1 = (2 * ppv * sens) / (ppv + sens)\n\n    t2 <- round(as.matrix(c(N, sens, spec, ppv, npv, fpr, fnr, acc, f1)), digits = 4)\n\n    rownames(t2) <- c("Max Number of Obs to be Matched", \n                      "Sensitivity (%)",\n                      "Specificity (%)",\n                      "Positive Predicted Value (%)",\n                      "Negative Predicted Value (%)",\n                      "False Positive Rate (%)",\n                      "False Negative Rate (%)",\n                      "Correctly Classified (%)",\n                      "F1 Score (%)")\n    colnames(t2) <- "results"\n    results <- list()\t\t\t\t \n    results$confusion.table <- t1\n    options(digits = 6)\n    results$addition.info <- round(t2, digits = 2)\n    return(results)\n}\n'