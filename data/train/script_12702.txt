b'package com.db.williamchart.renderer\n\nimport com.db.williamchart.ChartContract\nimport com.db.williamchart.Painter\nimport com.db.williamchart.animation.ChartAnimation\nimport com.db.williamchart.data.DataPoint\nimport com.db.williamchart.data.Frame\nimport com.db.williamchart.data.Label\nimport com.db.williamchart.data.configuration.ChartConfiguration\nimport com.db.williamchart.data.configuration.LineChartConfiguration\nimport com.db.williamchart.data.configuration.toOuterFrame\nimport com.db.williamchart.data.contains\nimport com.db.williamchart.data.notInitialized\nimport com.db.williamchart.data.shouldDisplayAxisX\nimport com.db.williamchart.data.shouldDisplayAxisY\nimport com.db.williamchart.data.withPaddings\nimport com.db.williamchart.extensions.maxValueBy\nimport com.db.williamchart.extensions.toDataPoints\nimport com.db.williamchart.extensions.toLabels\nimport com.db.williamchart.extensions.toScale\nimport com.db.williamchart.renderer.executor.DebugWithLabelsFrame\nimport com.db.williamchart.renderer.executor.DefineDataPointsClickableFrames\nimport com.db.williamchart.renderer.executor.DefineVerticalTouchableFrames\nimport com.db.williamchart.renderer.executor.MeasureLineChartPaddings\n\nclass LineChartRenderer(\n    private val view: ChartContract.LineView,\n    private val painter: Painter,\n    private var animation: ChartAnimation<DataPoint>\n) : ChartContract.Renderer {\n\n    private var data = emptyList<DataPoint>()\n\n    private lateinit var outerFrame: Frame\n\n    private lateinit var innerFrame: Frame\n\n    private lateinit var chartConfiguration: LineChartConfiguration\n\n    private lateinit var xLabels: List<Label>\n\n    private lateinit var yLabels: List<Label>\n\n    override fun preDraw(configuration: ChartConfiguration): Boolean {\n\n        if (data.isEmpty()) return true\n\n        this.chartConfiguration = configuration as LineChartConfiguration\n\n        if (chartConfiguration.scale.notInitialized())\n            chartConfiguration = chartConfiguration.copy(scale = data.toScale())\n\n        xLabels = data.toLabels()\n        val scaleStep = chartConfiguration.scale.size / RendererConstants.defaultScaleNumberOfSteps\n        yLabels = List(RendererConstants.defaultScaleNumberOfSteps + 1) {\n            val scaleValue = chartConfiguration.scale.min + scaleStep * it\n            Label(\n                label = chartConfiguration.labelsFormatter(scaleValue),\n                screenPositionX = 0F,\n                screenPositionY = 0F\n            )\n        }\n\n        val longestChartLabelWidth =\n            yLabels.maxValueBy {\n                painter.measureLabelWidth(\n                    it.label,\n                    chartConfiguration.labelsSize\n                )\n            }\n                ?: throw IllegalArgumentException("Looks like there\'s no labels to find the longest width.")\n\n        val paddings = MeasureLineChartPaddings()(\n            axisType = chartConfiguration.axis,\n            labelsHeight = painter.measureLabelHeight(chartConfiguration.labelsSize),\n            longestLabelWidth = longestChartLabelWidth,\n            labelsPaddingToInnerChart = RendererConstants.labelsPaddingToInnerChart,\n            lineThickness = chartConfiguration.lineThickness,\n            pointsDrawableWidth = chartConfiguration.pointsDrawableWidth,\n            pointsDrawableHeight = chartConfiguration.pointsDrawableHeight\n        )\n\n        outerFrame = chartConfiguration.toOuterFrame()\n        innerFrame = outerFrame.withPaddings(paddings)\n\n        placeLabelsX(innerFrame)\n        placeLabelsY(innerFrame)\n        placeDataPoints(innerFrame)\n\n        animation.animateFrom(innerFrame.bottom, data) { view.postInvalidate() }\n\n        return false\n    }\n\n    override fun draw() {\n\n        if (data.isEmpty()) return\n\n        if (chartConfiguration.axis.shouldDisplayAxisX())\n            view.drawLabels(xLabels)\n\n        if (chartConfiguration.axis.shouldDisplayAxisY())\n            view.drawLabels(yLabels)\n\n        view.drawGrid(\n            innerFrame,\n            xLabels.map { it.screenPositionX },\n            yLabels.map { it.screenPositionY }\n        )\n\n        if (chartConfiguration.fillColor != 0 ||\n            chartConfiguration.gradientFillColors.isNotEmpty()\n        )\n            view.drawLineBackground(innerFrame, data)\n\n        view.drawLine(data)\n\n        if (chartConfiguration.pointsDrawableWidth != -1)\n            view.drawPoints(data)\n\n        if (RendererConstants.inDebug) {\n            view.drawDebugFrame(\n                listOf(outerFrame, innerFrame) +\n                    DebugWithLabelsFrame()(\n                        painter = painter,\n                        axisType = chartConfiguration.axis,\n                        xLabels = xLabels,\n                        yLabels = yLabels,\n                        labelsSize = chartConfiguration.labelsSize\n                    ) +\n                    DefineDataPointsClickableFrames()(\n                        innerFrame = innerFrame,\n                        datapointsCoordinates = data.map {\n                            Pair(\n                                it.screenPositionX,\n                                it.screenPositionY\n                            )\n                        },\n                        clickableRadius = chartConfiguration.clickableRadius\n                    )\n            )\n        }\n    }\n\n    override fun render(entries: List<Pair<String, Float>>) {\n        data = entries.toDataPoints()\n        view.postInvalidate()\n    }\n\n    override fun anim(entries: List<Pair<String, Float>>, animation: ChartAnimation<DataPoint>) {\n        data = entries.toDataPoints()\n        this.animation = animation\n        view.postInvalidate()\n    }\n\n    override fun processClick(x: Float?, y: Float?): Triple<Int, Float, Float> {\n\n        if (x == null || y == null || data.isEmpty())\n            return Triple(-1, -1f, -1f)\n\n        val index =\n            DefineDataPointsClickableFrames()(\n                innerFrame,\n                data.map { Pair(it.screenPositionX, it.screenPositionY) },\n                chartConfiguration.clickableRadius\n            ).indexOfFirst { it.contains(x, y) }\n\n        return if (index != -1)\n            Triple(index, data[index].screenPositionX, data[index].screenPositionY)\n        else Triple(-1, -1f, -1f)\n    }\n\n    override fun processTouch(x: Float?, y: Float?): Triple<Int, Float, Float> {\n\n        if (x == null || y == null)\n            return Triple(-1, -1f, -1f)\n\n        val index =\n            DefineVerticalTouchableFrames()(\n                innerFrame,\n                data.map { Pair(it.screenPositionX, it.screenPositionY) }\n            )\n                .indexOfFirst { it.contains(x, y) }\n\n        return if (index != -1)\n            Triple(index, data[index].screenPositionX, data[index].screenPositionY)\n        else Triple(-1, -1f, -1f)\n    }\n\n    private fun placeLabelsX(innerFrame: Frame) {\n\n        val labelsLeftPosition =\n            innerFrame.left +\n                painter.measureLabelWidth(xLabels.first().label, chartConfiguration.labelsSize) / 2\n        val labelsRightPosition =\n            innerFrame.right -\n                painter.measureLabelWidth(xLabels.last().label, chartConfiguration.labelsSize) / 2\n        val widthBetweenLabels = (labelsRightPosition - labelsLeftPosition) / (xLabels.size - 1)\n        val xLabelsVerticalPosition =\n            innerFrame.bottom -\n                painter.measureLabelAscent(chartConfiguration.labelsSize) +\n                RendererConstants.labelsPaddingToInnerChart\n\n        xLabels.forEachIndexed { index, label ->\n            label.screenPositionX = labelsLeftPosition + (widthBetweenLabels * index)\n            label.screenPositionY = xLabelsVerticalPosition\n        }\n    }\n\n    private fun placeLabelsY(innerFrame: Frame) {\n\n        val heightBetweenLabels =\n            (innerFrame.bottom - innerFrame.top) / RendererConstants.defaultScaleNumberOfSteps\n        val labelsBottomPosition =\n            innerFrame.bottom + painter.measureLabelHeight(chartConfiguration.labelsSize) / 2\n\n        yLabels.forEachIndexed { index, label ->\n            label.screenPositionX =\n                innerFrame.left -\n                    RendererConstants.labelsPaddingToInnerChart -\n                    painter.measureLabelWidth(label.label, chartConfiguration.labelsSize) / 2\n            label.screenPositionY = labelsBottomPosition - heightBetweenLabels * index\n        }\n    }\n\n    private fun placeDataPoints(innerFrame: Frame) {\n\n        val scaleSize = chartConfiguration.scale.size\n        val chartHeight = innerFrame.bottom - innerFrame.top\n        val widthBetweenLabels = (innerFrame.right - innerFrame.left) / (xLabels.size - 1)\n\n        data.forEachIndexed { index, dataPoint ->\n            dataPoint.screenPositionX = innerFrame.left + (widthBetweenLabels * index)\n            dataPoint.screenPositionY =\n                innerFrame.bottom -\n                    (chartHeight * (dataPoint.value - chartConfiguration.scale.min) / scaleSize)\n        }\n    }\n}\n'