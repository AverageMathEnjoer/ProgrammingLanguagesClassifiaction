b'context("nbinomWald")\ntest_that("nbinomWald throws various errors and works with edge cases",{\n  dds <- makeExampleDESeqDataSet(n=100, m=4)\n  expect_error(nbinomWaldTest(dds))\n  expect_error(nbinomLRT(dds))\n  dds <- estimateSizeFactors(dds)\n  dds <- estimateDispersions(dds)\n  mm <- model.matrix(~ condition, colData(dds))\n  mm0 <- model.matrix(~ 1, colData(dds))\n  expect_error(nbinomWaldTest(dds, betaPrior=TRUE, modelMatrix=mm))\n  expect_error(nbinomLRT(dds, betaPrior=TRUE, full=mm, reduced=mm0))\n  expect_error(nbinomWaldTest(dds, betaPrior=FALSE, modelMatrixType="expanded"))\n  expect_error(nbinomLRT(dds, betaPrior=FALSE, modelMatrixType="expanded"))\n  dds2 <- estimateMLEForBetaPriorVar(dds)\n  estimateBetaPriorVar(dds2, betaPriorMethod="quantile")\n  dds <- nbinomWaldTest(dds, modelMatrixType="standard")\n  covarianceMatrix(dds, 1)\n\n  # changing \'df\'\n  dds <- makeExampleDESeqDataSet(n=100, m=4)\n  counts(dds)[1:4,] <- rep(0L, 16)\n  dds <- estimateSizeFactors(dds)\n  dds <- estimateDispersions(dds)\n  dds <- nbinomWaldTest(dds)\n  round(head(results(dds)$pvalue,8),3)\n  dds <- nbinomWaldTest(dds, useT=TRUE, df=rep(1,100))\n  round(head(results(dds)$pvalue,8),3)\n  \n  # try nbinom after no fitted dispersions\n  dds <- makeExampleDESeqDataSet(n=100, m=4)\n  dds <- estimateSizeFactors(dds)\n  dds <- estimateDispersionsGeneEst(dds)\n  dispersions(dds) <- mcols(dds)$dispGeneEst\n  dds <- nbinomWaldTest(dds)\n})\n\ntest_that("useT uses proper degrees of freedom", {\n\n  set.seed(1)\n  dds <- makeExampleDESeqDataSet(n=200, m=15)\n  counts(dds)[101:105,] <- 0L\n  dds$condition <- factor(rep(c("A","B","C"),each=5))\n  dds <- DESeq(dds, useT=TRUE)\n  dds <- removeResults(dds)\n  w <- matrix(1, nrow=nrow(dds), ncol=ncol(dds))\n  w[1:100,1] <- 0\n  w[1,c(1:4,6:9,11:14)] <- 0\n  assays(dds, withDimnames=FALSE)[["weights"]] <- w\n  dds <- DESeq(dds, useT=TRUE)\n  res <- results(dds)\n  expect_true(is.na(res$pvalue[1]))\n  expect_true(mcols(dds)$tDegreesFreedom[2] == 15-1-3)\n  expect_true(res$pvalue[2] == 2*pt(abs(res$stat[2]), df=15-1-3, lower.tail=FALSE))\n\n  # also lfcThreshold\n  res <- results(dds, lfcThreshold=1, altHypothesis="greaterAbs")\n  idx <- which(res$log2FoldChange > 1 & !is.na(res$pvalue))[1]\n  expect_true(res$pvalue[idx] == 2 * pt(res$stat[idx], df=15-1-3, lower.tail=FALSE))\n  #\n  res <- results(dds, lfcThreshold=1, altHypothesis="greater")\n  idx <- which(res$log2FoldChange > 1 & !is.na(res$pvalue))[1]\n  expect_true(res$pvalue[idx] == pt(res$stat[idx], df=15-1-3, lower.tail=FALSE))\n  #\n  res <- results(dds, lfcThreshold=1, altHypothesis="less")\n  idx <- which(res$log2FoldChange < -1 & !is.na(res$pvalue))[1]\n  expect_true(res$pvalue[idx] == pt(-1 * res$stat[idx], df=15-1-3, lower.tail=FALSE))\n  #\n  res <- results(dds, lfcThreshold=1, altHypothesis="lessAbs")\n  idx <- which(abs(res$log2FoldChange) < 1 & !is.na(res$pvalue))[1]\n  expect_true(res$pvalue[idx] == pt(res$stat[idx], df=15-1-3, lower.tail=FALSE))    \n  \n  # also novel contrasts\n  res <- results(dds, contrast=c("condition","C","B"))\n  expect_true(is.na(res$pvalue[1]))\n  expect_true(mcols(dds)$tDegreesFreedom[2] == 15-1-3)\n  expect_true(res$pvalue[2] == 2*pt(abs(res$stat[2]), df=15-1-3, lower.tail=FALSE))\n  \n})\n'