b'{-# LANGUAGE CPP #-}\n\n\nimport Control.Monad.Cont as C\nimport qualified Control.Monad.Reader as R\nimport Data.IORef\nimport Text.Printf\n\ntype M a = R.ReaderT Int ContIO a\ntype ContIO = C.ContT () IO\n\ntest ref = do \n  x <- R.ask \n  liftIO$ printf "Observed value %d before callCC\\n" x \n  callCC$ \\cont -> do\n     y <- R.ask \n     liftIO$ writeIORef ref cont\n     liftIO$ printf "Observed value %d inside callCC\\n" y\n  z <- R.ask \n  liftIO$ printf "Observed value %d in invoked continuation\\n" z\n  return ()\n\nmain = do ref <- newIORef (error "unused")\n          let test\' = do test ref\n\t      m1 = do R.runReaderT test\' (100::Int)\n\n          C.runContT m1 (\\ () -> return ())\n          k <- readIORef ref\n          let m2 = do w <- R.ask \n\t\t      liftIO$ putStrLn ("  In new runReader instance: observed " ++ show w)\n\t\t      k ()\n\t\t      liftIO$ putStrLn " !! Should not reach here..."\n\n          C.runContT (R.runReaderT m2 200) (\\ () -> return ())\n          putStrLn "Done with main."\n'