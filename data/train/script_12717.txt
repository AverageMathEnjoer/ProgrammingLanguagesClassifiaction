b'{-# OPTIONS_GHC -fno-warn-type-defaults #-}\n{-# LANGUAGE NoImplicitPrelude #-}\n\nmodule Course.MonadSpec where\n\nimport           Test.Hspec        (Spec, describe, it, shouldBe)\n\nimport           Course.Core\nimport           Course.ExactlyOne (ExactlyOne (..))\nimport           Course.List       (List (..))\nimport           Course.Monad      (join, (<**>), (=<<), (>>=), (<=<))\nimport           Course.Optional   (Optional (..))\n\nspec :: Spec\nspec = do\n  describe "Bind tests" $ do\n    it "(=<<) for ExactlyOne" $\n      ((\\x -> ExactlyOne(x+1)) =<< ExactlyOne 2) `shouldBe` ExactlyOne 3\n\n    it "(=<<) for List" $\n      ((\\n -> n :. n :. Nil) =<< (1 :. 2 :. 3 :. Nil)) `shouldBe` (1:.1:.2:.2:.3:.3:.Nil)\n\n    it "(=<<) for Optional" $\n      ((\\n -> Full (n + n)) =<< Full 7) `shouldBe` Full 14\n\n    it "(=<<) for (->)" $\n      ((*) =<< (+10)) 7 `shouldBe` 119\n\n  describe "<**>" $ do\n    it "ExactlyOne" $\n      ExactlyOne (+10) <**> ExactlyOne 8 `shouldBe` ExactlyOne 18\n    it "List" $\n      (+1) :. (*2) :. Nil <**> 1 :. 2 :. 3 :. Nil `shouldBe` (2:.3:.4:.2:.4:.6:.Nil)\n    it "Optional" $\n      Full (+8) <**> Full 7 `shouldBe` Full 15\n    it "Optional - empty function" $\n      Empty <**> Full 7 `shouldBe` (Empty :: Optional Integer)\n    it "Optional - empty value" $\n      Full (+8) <**> Empty `shouldBe` Empty\n    it "(->) 1" $\n      ((+) <**> (+10)) 3 `shouldBe` 16\n    it "(->) 2" $\n      ((+) <**> (+5)) 3 `shouldBe` 11\n    it "(->) 3" $\n      ((+) <**> (+5)) 1 `shouldBe` 7\n    it "(->) 4" $\n      ((*) <**> (+10)) 3 `shouldBe` 39\n    it "(->) 5" $\n      ((*) <**> (+2)) 3 `shouldBe` 15\n\n  describe "join" $ do\n    it "List" $\n      join ((1 :. 2 :. 3 :. Nil) :. (1 :. 2 :. Nil) :. Nil) `shouldBe` (1:.2:.3:.1:.2:.Nil)\n    it "Optional with Empty" $\n      join (Full Empty) `shouldBe` (Empty :: Optional Integer)\n    it "Optional all Full" $\n      join (Full (Full 7)) `shouldBe` Full 7\n    it "(->)" $\n      join (+) 7 `shouldBe` 14\n\n  describe "bindFlipped" $ do\n    it "(>>=)" $\n      ((+10) >>= (*)) 7 `shouldBe` 119\n\n  describe "Kleisli Composition" $ do\n    it "kleisliComposition" $\n      ((\\n -> n :. n :. Nil) <=< (\\n -> n+1 :. n+2 :. Nil)) 1\n        `shouldBe`\n          (2:.2:.3:.3:.Nil)\n'