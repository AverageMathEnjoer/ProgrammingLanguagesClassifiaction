b'@file:Suppress("DEPRECATION")\n\npackage icu.nullptr.twifucker.ui\n\nimport android.app.AlertDialog\nimport android.app.ProgressDialog\nimport android.content.ClipData\nimport android.content.ClipboardManager\nimport android.content.Context\nimport android.content.Context.CLIPBOARD_SERVICE\nimport android.media.MediaScannerConnection\nimport android.net.Uri\nimport android.os.Environment\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.BaseAdapter\nimport androidx.documentfile.provider.DocumentFile\nimport com.github.kyuubiran.ezxhelper.AndroidLogger\nimport com.github.kyuubiran.ezxhelper.EzXHelper.addModuleAssetPath\nimport com.github.kyuubiran.ezxhelper.EzXHelper.appContext\nimport com.github.kyuubiran.ezxhelper.Log\nimport icu.nullptr.twifucker.R\nimport icu.nullptr.twifucker.modulePrefs\nimport java.io.File\nimport java.io.FileOutputStream\nimport java.net.HttpURLConnection\nimport java.net.URL\n\nclass DownloadDialog(\n    context: Context, private val tweetId: Long, downloadUrls: List<String>, onDismiss: () -> Unit,\n) : AlertDialog.Builder(context) {\n    companion object {\n        private fun contentTypeToExt(contentType: String): String {\n            return when {\n                contentType.contains("image/jpeg") -> ".jpg"\n                contentType.contains("image/png") -> ".png"\n                contentType.contains("video/mp4") -> ".mp4"\n                contentType.contains("video/webm") -> ".webm"\n                contentType.contains("application/x-mpegURL") -> ".m3u8"\n                else -> ""\n            }\n        }\n\n        private fun copyFileUri(\n            context: Context, fileName: String, outputDirectory: String, contentType: String\n        ) {\n            DocumentFile.fromTreeUri(context, Uri.parse(outputDirectory))\n                ?.createFile(contentType, fileName)?.uri?.let { uri2 ->\n                    context.contentResolver.openOutputStream(uri2)?.use { out ->\n                        val inputStream = File(appContext.cacheDir, fileName).inputStream()\n                        inputStream.copyTo(out)\n                    }\n                }\n        }\n\n        private fun copyFile(fileName: String): String {\n            val downloadPath = File(\n                Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS),\n                "TwiFucker"\n            )\n            if (!downloadPath.exists()) {\n                downloadPath.mkdirs()\n            }\n            val outputFile = File(downloadPath, fileName)\n            val inputStream = File(appContext.cacheDir, fileName).inputStream()\n            val outputStream = outputFile.outputStream()\n            inputStream.copyTo(outputStream)\n\n            return outputFile.absolutePath\n        }\n\n        private fun download(\n            context: Context,\n            tweetId: Long,\n            index: Int,\n            url: String,\n            onDownloadCompleted: (() -> Unit)? = null\n        ) {\n            val progressDialog = ProgressDialog(context)\n            progressDialog.setTitle(R.string.downloading)\n            progressDialog.setCancelable(false)\n            progressDialog.show()\n\n            Thread {\n                try {\n                    val downloadUrl = URL(url)\n                    val httpConnection = downloadUrl.openConnection() as HttpURLConnection\n                    httpConnection.connectTimeout = 15000\n                    httpConnection.readTimeout = 15000\n                    httpConnection.connect()\n                    val inputStream = httpConnection.inputStream\n                    val buffer = ByteArray(1024)\n                    var len = inputStream.read(buffer)\n\n                    val contentType = httpConnection.contentType\n                    val file = File(\n                        appContext.cacheDir,\n                        "" + tweetId + "_" + index + contentTypeToExt(contentType)\n                    )\n\n                    val outputStream = FileOutputStream(file)\n                    while (len != -1) {\n                        outputStream.write(buffer, 0, len)\n                        len = inputStream.read(buffer)\n                    }\n\n                    outputStream.close()\n                    inputStream.close()\n                    httpConnection.disconnect()\n\n                    val downloadDirectory = modulePrefs.getString("download_directory", null) ?: ""\n                    if (downloadDirectory != "") {\n                        copyFileUri(context, file.name, downloadDirectory, contentType)\n                    } else {\n                        val outputPath = copyFile(file.name)\n                        MediaScannerConnection.scanFile(\n                            context, arrayOf(outputPath), null, null\n                        )\n                    }\n                    file.delete()\n\n                    onDownloadCompleted?.invoke()\n                } catch (t: Throwable) {\n                    Log.e(t)\n                    AndroidLogger.toast(appContext.getString(R.string.download_failed))\n                }\n                progressDialog.cancel()\n            }.start()\n        }\n\n        private fun toClipboard(text: String) {\n            val clipboardManager =\n                appContext.getSystemService(CLIPBOARD_SERVICE) as ClipboardManager\n            val clip = ClipData.newPlainText("label", text)\n            clipboardManager.setPrimaryClip(clip)\n            AndroidLogger.toast(appContext.getString(R.string.download_link_copied))\n        }\n    }\n\n    private class DownloadMediaAdapter(\n        val context: Context,\n        val tweetId: Long,\n        val urls: List<String>\n    ) : BaseAdapter() {\n\n        override fun getCount(): Int {\n            return urls.size\n        }\n\n        override fun getItem(position: Int): Any {\n            return urls[position]\n        }\n\n        override fun getItemId(position: Int): Long {\n            return position.toLong()\n        }\n\n        override fun getView(position: Int, convertView: View?, parent: ViewGroup?): View {\n            val view = convertView ?: DownloadItem(context).apply {\n                setTitle(context.getString(R.string.download_media, position + 1))\n                setOnCopy {\n                    toClipboard(urls[position])\n                }\n                setOnDownload {\n                    download(context, tweetId, position + 1, urls[position]) {\n                        AndroidLogger.toast(context.getString(R.string.download_completed))\n                    }\n                }\n            }\n            return view\n        }\n    }\n\n    init {\n        addModuleAssetPath(context)\n\n        val adapter = DownloadMediaAdapter(context, tweetId, downloadUrls)\n        setAdapter(adapter, null)\n\n        setNeutralButton(R.string.download_all) { _, _ ->\n            downloadUrls.forEachIndexed { i, j ->\n                download(context, tweetId, i + 1, j) {\n                    if (i == downloadUrls.size - 1) {\n                        AndroidLogger.toast(context.getString(R.string.download_completed))\n                    }\n                }\n            }\n        }\n        setNegativeButton(R.string.settings_dismiss) { _, _ ->\n            onDismiss()\n        }\n        setOnDismissListener { onDismiss() }\n\n        setTitle(R.string.download_or_copy)\n        show()\n    }\n}'