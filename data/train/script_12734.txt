b'package org.sang.config;\n\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.stereotype.Component;\nimport org.springframework.util.DigestUtils;\n\n/**\n * @\xe4\xbd\x9c\xe8\x80\x85 \xe6\xb1\x9f\xe5\x8d\x97\xe4\xb8\x80\xe7\x82\xb9\xe9\x9b\xa8\n * @\xe5\xbe\xae\xe4\xbf\xa1\xe5\x85\xac\xe4\xbc\x97\xe5\x8f\xb7 \xe6\xb1\x9f\xe5\x8d\x97\xe4\xb8\x80\xe7\x82\xb9\xe9\x9b\xa8\n * @\xe7\xbd\x91\xe7\xab\x99 http://www.itboyhub.com\n * @\xe5\x9b\xbd\xe9\x99\x85\xe7\xab\x99 http://www.javaboy.org\n * @\xe5\xbe\xae\xe4\xbf\xa1 a_java_boy\n * @GitHub https://github.com/lenve\n * @Gitee https://gitee.com/lenve\n */\n@Component\npublic class MyPasswordEncoder implements PasswordEncoder {\n    @Override\n    public String encode(CharSequence rawPassword) {\n        return DigestUtils.md5DigestAsHex(rawPassword.toString().getBytes());\n    }\n\n    @Override\n    public boolean matches(CharSequence rawPassword, String encodedPassword) {\n        return encodedPassword.equals(DigestUtils.md5DigestAsHex(rawPassword.toString().getBytes()));\n    }\n}\n'