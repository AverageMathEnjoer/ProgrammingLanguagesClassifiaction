b'/**\n * Copyright (C) 2020 Fernando Cejas Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.fernandocejas.sample.core.extension\n\nimport android.graphics.drawable.Drawable\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.ImageView\nimport androidx.annotation.LayoutRes\nimport androidx.fragment.app.FragmentActivity\nimport com.bumptech.glide.Glide\nimport com.bumptech.glide.load.resource.drawable.DrawableTransitionOptions\nimport com.bumptech.glide.request.target.BaseTarget\nimport com.bumptech.glide.request.target.SizeReadyCallback\nimport com.bumptech.glide.request.target.Target\nimport com.bumptech.glide.request.transition.Transition\n\nfun View.cancelTransition() {\n    transitionName = null\n}\n\nfun View.isVisible() = this.visibility == View.VISIBLE\n\nfun View.visible() {\n    this.visibility = View.VISIBLE\n}\n\nfun View.invisible() {\n    this.visibility = View.GONE\n}\n\nfun ViewGroup.inflate(@LayoutRes layoutRes: Int): View =\n    LayoutInflater.from(context).inflate(layoutRes, this, false)\n\nfun ImageView.loadFromUrl(url: String) =\n    Glide.with(this.context.applicationContext)\n        .load(url)\n        .transition(DrawableTransitionOptions.withCrossFade())\n        .into(this)\n\nfun ImageView.loadUrlAndPostponeEnterTransition(url: String, activity: FragmentActivity) {\n    val target: Target<Drawable> = ImageViewBaseTarget(this, activity)\n    Glide.with(context.applicationContext).load(url).into(target)\n}\n\nprivate class ImageViewBaseTarget(var imageView: ImageView?, var activity: FragmentActivity?) :\n    BaseTarget<Drawable>() {\n    override fun onLoadFailed(errorDrawable: Drawable?) {\n        super.onLoadFailed(errorDrawable)\n        activity?.supportStartPostponedEnterTransition()\n    }\n\n    override fun getSize(cb: SizeReadyCallback) = cb.onSizeReady(SIZE_ORIGINAL, SIZE_ORIGINAL)\n\n    override fun removeCallback(cb: SizeReadyCallback) {\n        imageView = null\n        activity = null\n    }\n\n    override fun onResourceReady(resource: Drawable, transition: Transition<in Drawable>?) {\n        imageView?.setImageDrawable(resource)\n        activity?.supportStartPostponedEnterTransition()\n    }\n}\n'