b'package droidninja.filepicker.fragments\n\nimport android.content.Context\nimport android.os.Bundle\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport androidx.recyclerview.widget.RecyclerView\nimport androidx.appcompat.widget.SearchView\nimport android.view.LayoutInflater\nimport android.view.Menu\nimport android.view.MenuInflater\nimport android.view.MenuItem\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.TextView\nimport droidninja.filepicker.FilePickerConst\nimport droidninja.filepicker.PickerManager\nimport droidninja.filepicker.R\nimport droidninja.filepicker.adapters.FileAdapterListener\nimport droidninja.filepicker.adapters.FileListAdapter\nimport droidninja.filepicker.models.Document\nimport droidninja.filepicker.models.FileType\n\nclass DocFragment : BaseFragment(), FileAdapterListener {\n    lateinit var recyclerView: RecyclerView\n\n    lateinit var emptyView: TextView\n\n    private var mListener: DocFragmentListener? = null\n    private var selectAllItem: MenuItem? = null\n    private var fileListAdapter: FileListAdapter? = null\n\n    val fileType: FileType?\n        get() = arguments?.getParcelable(BaseFragment.Companion.FILE_TYPE)\n\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n                              savedInstanceState: Bundle?): View? {\n        // Inflate the layout for this fragment\n        return inflater.inflate(R.layout.fragment_photo_picker, container, false)\n    }\n\n    override fun onAttach(context: Context) {\n        super.onAttach(context)\n        if (context is DocFragmentListener) {\n            mListener = context\n        } else {\n            throw RuntimeException(\n                    "$context must implement PhotoPickerFragmentListener")\n        }\n    }\n\n    override fun onDetach() {\n        super.onDetach()\n        mListener = null\n    }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setHasOptionsMenu(true)\n    }\n\n    override fun onItemSelected() {\n        mListener?.onItemSelected()\n        fileListAdapter?.let { adapter->\n            selectAllItem?.let { menuItem ->\n                if (adapter.itemCount == adapter.selectedItemCount) {\n                    menuItem.setIcon(R.drawable.ic_select_all)\n                    menuItem.isChecked = true\n                }\n            }\n        }\n    }\n\n    interface DocFragmentListener {\n        fun onItemSelected()\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        initView(view)\n    }\n\n    private fun initView(view: View) {\n        recyclerView = view.findViewById(R.id.recyclerview)\n        emptyView = view.findViewById(R.id.empty_view)\n        recyclerView.layoutManager = LinearLayoutManager(activity)\n        recyclerView.visibility = View.GONE\n    }\n\n    fun updateList(dirs: List<Document>) {\n        view?.let {\n            if (dirs.isNotEmpty()) {\n                recyclerView.visibility = View.VISIBLE\n                emptyView.visibility = View.GONE\n\n                context?.let {\n                    fileListAdapter = recyclerView.adapter as? FileListAdapter\n                    if (fileListAdapter == null) {\n                        fileListAdapter = FileListAdapter(it, dirs, PickerManager.selectedFiles,\n                                this)\n\n                        recyclerView.adapter = fileListAdapter\n                    } else {\n                        fileListAdapter?.setData(dirs, PickerManager.selectedFiles)\n                    }\n                    onItemSelected()\n                }\n            } else {\n                recyclerView.visibility = View.GONE\n                emptyView.visibility = View.VISIBLE\n            }\n        }\n    }\n\n    override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {\n        inflater.inflate(R.menu.doc_picker_menu, menu)\n        selectAllItem = menu.findItem(R.id.action_select)\n        if (PickerManager.hasSelectAll()) {\n            selectAllItem?.isVisible = true\n            onItemSelected()\n        } else {\n            selectAllItem?.isVisible = false\n        }\n\n        val search = menu.findItem(R.id.search)\n        val searchView = search?.actionView as SearchView\n        searchView.setOnQueryTextListener(object : SearchView.OnQueryTextListener {\n            override fun onQueryTextSubmit(query: String): Boolean {\n\n                return false\n            }\n\n            override fun onQueryTextChange(newText: String): Boolean {\n                    fileListAdapter?.filter?.filter(newText)\n                return true\n            }\n        })\n\n        super.onCreateOptionsMenu(menu, inflater)\n    }\n\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\n        val itemId = item.itemId\n        if (itemId == R.id.action_select) {\n            fileListAdapter?.let { adapter->\n                selectAllItem?.let { menuItem ->\n                    if (menuItem.isChecked) {\n                        adapter.clearSelection()\n                        PickerManager.clearSelections()\n\n                        menuItem.setIcon(R.drawable.ic_deselect_all)\n                    } else {\n                        adapter.selectAll()\n                        PickerManager\n                                .add(adapter.selectedPaths, FilePickerConst.FILE_TYPE_DOCUMENT)\n                        menuItem.setIcon(R.drawable.ic_select_all)\n                    }\n\n                    menuItem.isChecked = !menuItem.isChecked\n                    mListener?.onItemSelected()\n                }\n            }\n            return true\n        } else {\n            return super.onOptionsItemSelected(item)\n        }\n    }\n\n    companion object {\n\n        private val TAG = DocFragment::class.java.simpleName\n\n        fun newInstance(fileType: FileType): DocFragment {\n            val photoPickerFragment = DocFragment()\n            val bun = Bundle()\n            bun.putParcelable(BaseFragment.Companion.FILE_TYPE, fileType)\n            photoPickerFragment.arguments = bun\n            return photoPickerFragment\n        }\n    }\n}// Required empty public constructor\n'