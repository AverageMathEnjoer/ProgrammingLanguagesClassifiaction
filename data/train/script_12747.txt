b'// UVa12099 The Bookcase\n// Rujia Liu\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\n\nconst int maxn = 70 + 5;\nconst int maxw = 30;\nconst int INF = 1000000000;\n\nstruct Book {\n  int h, w;\n  bool operator < (const Book& rhs) const {\n    return h > rhs.h || (h == rhs.h && w > rhs.w);\n  }\n} books[maxn];\n\n// We sort books in decreasing order of heights and place them one by one\n// So level 1\'s height is book 1\'s height\n// dp[i][j][k] is the minimal total heights of level 2 and 3 when we used i books, level 2 and 3\'s total widths are j and k,\n// level 1\'s width is (sumw[n] - j - k)\nint dp[2][maxn*maxw][maxn*maxw];\nint sumw[maxn]; // sum[i] is the sum of widths of first i books. sum[0] = 0.\n\n// increased height if you place a book with height h to a level with width w\n// if w == 0, that means the level if empty, so height is increased by h\n// otherwise, the height is unchanged because we\'re adding books in decreasing order of height\ninline int f(int w, int h) {\n  return w == 0 ? h : 0;\n}\n\ninline void update(int& newd, int d) {\n  if(newd < 0 || d < newd) newd = d;\n}\n\nint main () {\n  int T;\n  scanf("%d", &T);\n  while(T--) {\n    int n;\n    scanf("%d", &n);\n    for(int i = 0; i < n; i++)\n      scanf("%d%d", &books[i].h, &books[i].w);\n    sort(books, books+n);\n\n    sumw[0] = 0;\n    for(int i = 1; i <= n; i++)\n      sumw[i] = sumw[i-1] + books[i-1].w;\n    \n    dp[0][0][0] = 0;\n    int t = 0;\n    for(int i = 0; i < n; i++) {\n      // Don\'t use memset. It\'s too slow\n      for(int j = 0; j <= sumw[i+1]; j++)\n        for(int k = 0; k <= sumw[i+1]-j; k++) dp[t^1][j][k] = -1;\n\n      for(int j = 0; j <= sumw[i]; j++)\n        for(int k = 0; k <= sumw[i]-j; k++) if(dp[t][j][k] >= 0) {\n          update(dp[t^1][j][k], dp[t][j][k]); // level 1\n          update(dp[t^1][j+books[i].w][k], dp[t][j][k] + f(j,books[i].h)); // level 2\n          update(dp[t^1][j][k+books[i].w], dp[t][j][k] + f(k,books[i].h)); // level 3\n        }\n      t ^= 1;\n    }\n\n    int ans = INF;\n    for(int j = 1; j <= sumw[n]; j++) // each level has at least one book\n      for(int k = 1; k <= sumw[n]-j; k++) if(dp[t][j][k] >= 0) {\n        int w = max(max(j, k), sumw[n]-j-k);\n        int h = books[0].h + dp[t][j][k];\n        ans = min(ans, w * h);\n      }\n    printf("%d\\n", ans);\n  }\n  return 0;\n}\n'