b'{-# LANGUAGE OverloadedStrings #-}\n\nmodule Graphics.Hoodle.Render.Highlight where\n\nimport Data.Hoodle.BBox (BBox (..), BBoxed (..), getBBox)\nimport Data.Hoodle.Predefined (predefinedPencolor)\nimport Data.Hoodle.Simple (Stroke (..))\nimport qualified Data.Map as M\nimport Graphics.Hoodle.Render.Primitive\n  ( drawStrokeCurve,\n    drawVWStrokeCurve,\n  )\nimport Graphics.Hoodle.Render.Type.Item (RItem (..))\nimport qualified Graphics.Rendering.Cairo as Cairo\nimport Prelude hiding (concatMap, curry, fst, mapM_, snd, uncurry)\n\n-- |\nrenderStrkHltd :: BBoxed Stroke -> Cairo.Render ()\nrenderStrkHltd sbbox = do\n  let s = bbxed_content sbbox\n  case M.lookup (stroke_color s) predefinedPencolor of\n    Just (r, g, b, a) -> Cairo.setSourceRGBA r g b a\n    Nothing -> Cairo.setSourceRGBA 0 0 0 1\n  case s of\n    Stroke _ _ w d -> do\n      Cairo.setLineWidth (w * 4.0)\n      Cairo.setLineCap Cairo.LineCapRound\n      Cairo.setLineJoin Cairo.LineJoinRound\n      drawStrokeCurve d\n      Cairo.stroke\n      Cairo.setSourceRGBA 1 1 1 1\n      Cairo.setLineWidth w\n      drawStrokeCurve . stroke_data $ s\n      Cairo.stroke\n    VWStroke _ _ d -> do\n      Cairo.setFillRule Cairo.FillRuleWinding\n      drawVWStrokeCurve $ map (\\(x, y, z) -> (x, y, 4 * z)) d\n      Cairo.fill\n      Cairo.setSourceRGBA 1 1 1 1\n      drawVWStrokeCurve d\n      Cairo.fill\n\n-- | render items highlighted\nrenderRItemHltd :: RItem -> Cairo.Render ()\nrenderRItemHltd (RItemStroke strk) = renderStrkHltd strk\nrenderRItemHltd (RItemImage img _) = (renderHltBBox . getBBox) img\nrenderRItemHltd (RItemSVG svg _) = (renderHltBBox . getBBox) svg\nrenderRItemHltd (RItemLink lnk _) = (renderHltBBox . getBBox) lnk\nrenderRItemHltd (RItemAnchor anc _) = (renderHltBBox . getBBox) anc\n\n-- |\nrenderHltBBox :: BBox -> Cairo.Render ()\nrenderHltBBox (BBox (x1, y1) (x2, y2)) = do\n  Cairo.setSourceRGBA 0 0 0 1\n  Cairo.setLineWidth 10\n  Cairo.rectangle x1 y1 (x2 - x1) (y2 - y1)\n  Cairo.stroke\n\n{-\n-- |\nrenderHighlightedBBoxedItem :: (GetBBoxable a) => a -> Cairo.Render ()\nrenderHighlinetedBBoxedItem x = renderHltBBox . getBBox\n  Cairo.setSourceRGBA 0 0 0 1\n  Cairo.setLineWidth 10\n  let BBox (x1,y1) (x2,y2) = getBBox x\n  Cairo.rectangle x1 y1 (x2-x1) (y2-y1)\n  Cairo.stroke\n-}\n'