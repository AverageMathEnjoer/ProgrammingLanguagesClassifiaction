b"/*\n * Copyright (C) 2015 Naman Dwivedi\n *\n * Licensed under the GNU General Public License v3\n *\n * This is free software: you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n */\n\npackage com.naman14.timber.adapters;\n\nimport android.app.Activity;\nimport android.os.Handler;\nimport androidx.recyclerview.widget.RecyclerView;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.view.animation.Animation;\nimport android.view.animation.AnimationUtils;\nimport android.widget.ImageView;\n\nimport com.naman14.timber.MusicPlayer;\nimport com.naman14.timber.R;\nimport com.naman14.timber.models.Song;\nimport com.naman14.timber.utils.TimberUtils;\nimport com.nostra13.universalimageloader.core.DisplayImageOptions;\nimport com.nostra13.universalimageloader.core.ImageLoader;\n\nimport java.util.List;\n\npublic class SlidingQueueAdapter extends RecyclerView.Adapter<SlidingQueueAdapter.ItemHolder> {\n\n    public static int currentlyPlayingPosition;\n    private List<Song> arraylist;\n    private Activity mContext;\n    private int lastPosition = -1;\n\n    public SlidingQueueAdapter(Activity context, List<Song> arraylist) {\n        this.arraylist = arraylist;\n        this.mContext = context;\n        currentlyPlayingPosition = MusicPlayer.getQueuePosition();\n    }\n\n    @Override\n    public ItemHolder onCreateViewHolder(ViewGroup viewGroup, int i) {\n        View v = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.item_song_sliding_queue, null);\n        ItemHolder ml = new ItemHolder(v);\n        return ml;\n    }\n\n    @Override\n    public void onBindViewHolder(ItemHolder itemHolder, int i) {\n\n//        setAnimation(itemHolder.itemView, i);\n        Song localItem = arraylist.get(i);\n\n        ImageLoader.getInstance().displayImage(TimberUtils.getAlbumArtUri(localItem.albumId).toString(),\n                itemHolder.albumArt, new DisplayImageOptions.Builder().cacheInMemory(true)\n                        .showImageOnLoading(R.drawable.ic_empty_music2).resetViewBeforeLoading(true).build());\n\n    }\n\n    @Override\n    public int getItemCount() {\n        return (null != arraylist ? arraylist.size() : 0);\n    }\n\n    public long[] getSongIds() {\n        long[] ret = new long[getItemCount()];\n        for (int i = 0; i < getItemCount(); i++) {\n            ret[i] = arraylist.get(i).id;\n        }\n\n        return ret;\n    }\n\n    private void setAnimation(View viewToAnimate, int position) {\n        // If the bound view wasn't previously displayed on screen, it's animated\n        if (position > lastPosition) {\n            Animation animation = AnimationUtils.loadAnimation(mContext, R.anim.scale);\n            viewToAnimate.startAnimation(animation);\n            lastPosition = position;\n        }\n    }\n\n    public class ItemHolder extends RecyclerView.ViewHolder implements View.OnClickListener {\n        protected ImageView albumArt;\n\n        public ItemHolder(View view) {\n            super(view);\n            this.albumArt = (ImageView) view.findViewById(R.id.album_art);\n            view.setOnClickListener(this);\n        }\n\n        @Override\n        public void onClick(View v) {\n            final Handler handler = new Handler();\n            handler.postDelayed(new Runnable() {\n                @Override\n                public void run() {\n                    MusicPlayer.setQueuePosition(getAdapterPosition());\n                    Handler handler1 = new Handler();\n                    handler1.postDelayed(new Runnable() {\n                        @Override\n                        public void run() {\n                            notifyItemChanged(currentlyPlayingPosition);\n                            notifyItemChanged(getAdapterPosition());\n                            Handler handler2 = new Handler();\n                            handler2.postDelayed(new Runnable() {\n                                @Override\n                                public void run() {\n                                }\n                            }, 50);\n                        }\n                    }, 50);\n                }\n            }, 100);\n\n        }\n\n    }\n\n\n}\n\n\n\n\n"