b'package id.zelory.compressor.constraint\n\nimport android.graphics.Bitmap\nimport com.natpryce.hamkrest.assertion.assertThat\nimport com.natpryce.hamkrest.equalTo\nimport com.natpryce.hamkrest.isA\nimport id.zelory.compressor.loadBitmap\nimport id.zelory.compressor.overWrite\nimport io.mockk.every\nimport io.mockk.mockk\nimport io.mockk.mockkStatic\nimport io.mockk.unmockkAll\nimport io.mockk.verify\nimport org.junit.After\nimport org.junit.Test\nimport java.io.File\n\n/**\n * Created on : January 25, 2020\n * Author     : zetbaitsu\n * Name       : Zetra\n * GitHub     : https://github.com/zetbaitsu\n */\nclass FormatConstraintTest {\n\n    @After\n    fun teardown() {\n        unmockkAll()\n    }\n\n    @Test\n    fun `when extension is not equal with format, constraint should not satisfied`() {\n        // Given\n        val constraint = FormatConstraint(Bitmap.CompressFormat.JPEG)\n\n        // When + Then\n        assertThat(constraint.isSatisfied(File("a_file.webp")), equalTo(false))\n    }\n\n    @Test\n    fun `when extension is equal with format, constraint should satisfied`() {\n        // Given\n        val constraint = FormatConstraint(Bitmap.CompressFormat.WEBP)\n\n        // When + Then\n        assertThat(constraint.isSatisfied(File("a_file.webp")), equalTo(true))\n    }\n\n    @Test\n    fun `when trying satisfy constraint, it should save image with selected format`() {\n        // Given\n        mockkStatic("id.zelory.compressor.UtilKt")\n        every { loadBitmap(any()) } returns mockk()\n        every { overWrite(any(), any(), any(), any()) } returns mockk()\n\n        val imageFile = mockk<File>()\n        val format = Bitmap.CompressFormat.PNG\n        val constraint = FormatConstraint(format)\n\n        // When\n        constraint.satisfy(imageFile)\n\n        // Then\n        verify { overWrite(imageFile, any(), format, any()) }\n    }\n\n    @Test\n    fun `verify extension`() {\n        // Given\n        val compression = Compression()\n\n        // When\n        compression.format(Bitmap.CompressFormat.PNG)\n\n        // Then\n        assertThat(compression.constraints.first(), isA<FormatConstraint>())\n    }\n}'