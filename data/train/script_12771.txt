b'package com.naman14.timber.widgets;\n\nimport android.content.Context;\nimport android.content.res.TypedArray;\nimport android.graphics.Point;\nimport androidx.viewpager.widget.ViewPager;\nimport android.util.AttributeSet;\nimport android.view.View;\n\nimport com.naman14.timber.R;\n\npublic class MultiViewPager extends ViewPager {\n\n    private final Point size;\n    private final Point maxSize;\n    /**\n     * Maximum size.\n     */\n    private int mMaxWidth = -1;\n    /**\n     * Maximum size.\n     */\n    private int mMaxHeight = -1;\n    /**\n     * Child view inside a page to match the page size against.\n     */\n    private int mMatchWidthChildResId;\n    /**\n     * Internal state to schedule a new measurement pass.\n     */\n    private boolean mNeedsMeasurePage;\n\n    public MultiViewPager(Context context) {\n        super(context);\n        size = new Point();\n        maxSize = new Point();\n    }\n\n    public MultiViewPager(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        init(context, attrs);\n        size = new Point();\n        maxSize = new Point();\n    }\n\n    private static void constrainTo(Point size, Point maxSize) {\n        if (maxSize.x >= 0) {\n            if (size.x > maxSize.x) {\n                size.x = maxSize.x;\n            }\n        }\n        if (maxSize.y >= 0) {\n            if (size.y > maxSize.y) {\n                size.y = maxSize.y;\n            }\n        }\n    }\n\n    private void init(Context context, AttributeSet attrs) {\n        setClipChildren(false);\n        TypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.MultiViewPager);\n        setMaxWidth(ta.getDimensionPixelSize(R.styleable.MultiViewPager_android_maxWidth, -1));\n        setMaxHeight(ta.getDimensionPixelSize(R.styleable.MultiViewPager_android_maxHeight, -1));\n        setMatchChildWidth(ta.getResourceId(R.styleable.MultiViewPager_matchChildWidth, 0));\n        ta.recycle();\n    }\n\n    @Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        size.set(MeasureSpec.getSize(widthMeasureSpec),\n                MeasureSpec.getSize(heightMeasureSpec));\n        if (mMaxWidth >= 0 || mMaxHeight >= 0) {\n            maxSize.set(mMaxWidth, mMaxHeight);\n            constrainTo(size, maxSize);\n            widthMeasureSpec = MeasureSpec.makeMeasureSpec(\n                    size.x,\n                    MeasureSpec.EXACTLY);\n            heightMeasureSpec = MeasureSpec.makeMeasureSpec(\n                    size.y,\n                    MeasureSpec.EXACTLY);\n        }\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n        onMeasurePage(widthMeasureSpec, heightMeasureSpec);\n    }\n\n    protected void onMeasurePage(int widthMeasureSpec, int heightMeasureSpec) {\n        // Only measure if a measurement pass was scheduled\n        if (!mNeedsMeasurePage) {\n            return;\n        }\n        if (mMatchWidthChildResId == 0) {\n            mNeedsMeasurePage = false;\n        } else if (getChildCount() > 0) {\n            View child = getChildAt(0);\n            child.measure(widthMeasureSpec, heightMeasureSpec);\n            int pageWidth = child.getMeasuredWidth();\n            View match = child.findViewById(mMatchWidthChildResId);\n            if (match == null) {\n                throw new NullPointerException(\n                        "MatchWithChildResId did not find that ID in the first fragment of the ViewPager; "\n                                + "is that view defined in the child view\'s layout? Note that MultiViewPager "\n                                + "only measures the child for index 0.");\n            }\n            int childWidth = match.getMeasuredWidth();\n            // Check that the measurement was successful\n            if (childWidth > 0) {\n                mNeedsMeasurePage = false;\n                int difference = pageWidth - childWidth;\n                setPageMargin(-difference);\n                int offscreen = (int) Math.ceil((float) pageWidth / (float) childWidth) + 1;\n                setOffscreenPageLimit(offscreen);\n                requestLayout();\n            }\n        }\n    }\n\n    @Override\n    protected void onSizeChanged(int w, int h, int oldw, int oldh) {\n        super.onSizeChanged(w, h, oldw, oldh);\n        // Schedule a new measurement pass as the dimensions have changed\n        mNeedsMeasurePage = true;\n    }\n\n    /**\n     * Sets the child view inside a page to match the page size against.\n     *\n     * @param matchChildWidthResId the child id\n     */\n    public void setMatchChildWidth(int matchChildWidthResId) {\n        if (mMatchWidthChildResId != matchChildWidthResId) {\n            mMatchWidthChildResId = matchChildWidthResId;\n            mNeedsMeasurePage = true;\n        }\n    }\n\n    /**\n     * Sets the maximum size.\n     *\n     * @param width in pixels\n     */\n    public void setMaxWidth(int width) {\n        mMaxWidth = width;\n    }\n\n    /**\n     * Sets the maximum size.\n     *\n     * @param height in pixels\n     */\n    public void setMaxHeight(int height) {\n        mMaxHeight = height;\n    }\n\n}'