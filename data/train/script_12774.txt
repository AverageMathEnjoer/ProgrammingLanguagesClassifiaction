b'#\' inspectEM\n#\'\n#\' Inspect EM objects to analyze successfully and\n#\' unsuccessfully matched patterns.\n#\'\n#\' @usage inspectEM(object, posterior.range, digits)\n#\' @param object The output from either \\code{fastLink} or \\code{emlinkMARmov}.\n#\' @param posterior.range The range of posterior probabilities to display.\n#\' Default is c(0.85, 1).\n#\' @param digits How many digits to include in inspectEM dataframe. Default is 3.\n#\'\n#\' @return \\code{inspectEM} returns a data frame with information\n#\' about patterns around the provided threshold.\n#\'\n#\' @author Ben Fifield <bfifield@princeton.edu>\n#\' @export\ninspectEM <- function(object, posterior.range = c(0.85, 1), digits = 3){\n\n    ## Extract EM object\n    if("fastLink.EM" %in% class(object)){\n        em <- object\n    }else if(length(class(object)) == 1 & "fastLink" %in% class(object)){\n        em <- object$EM\n    }else if(!("fastLink" %in% class(object))){\n        stop("inspectEM() is not compatible with the input object.")\n    }\n\n    if(min(posterior.range) < 0 | max(posterior.range) > 1){\n        stop("Please make sure that posterior.range is between 0 and 1.")\n    }\n    if(length(posterior.range) == 1){\n        posterior.range <- c(posterior.range, 1)\n    }\n\n    ## ---------------\n    ## Output patterns\n    ## ---------------\n    ## Clean up object\n    em.ins <- data.frame(em$patterns.w)\n    em.ins$zeta.j <- em$zeta.j\n    em.ins <- em.ins[order(em.ins[, "zeta.j"]), ]\n    \n    ## Which pattern is closest to the threshold?\n    min <- which.min(abs(em.ins$zeta.j - min(posterior.range)))\n    max <- which.min(abs(em.ins$zeta.j - max(posterior.range)))\n    em.ins <- em.ins[min:max,]\n\n    ## Clean up outputted object\n    inds.gamma <- grep("gamma.[[:digit:]]", colnames(em.ins))\n    em.ins[,inds.gamma] <- ifelse(em.ins[,inds.gamma] == 2, "M",\n                           ifelse(em.ins[,inds.gamma] == 1, "PM",\n                           ifelse(em.ins[,inds.gamma] == 0, "NM", NA)))\n    em.ins[,(max(inds.gamma)+1):ncol(em.ins)] <- round(em.ins[,(max(inds.gamma)+1):ncol(em.ins)], digits)\n    if(is.null(em$varnames)){\n        varnames <- paste0("gamma.", 1:max(inds.gamma))\n    }else{\n        varnames <- em$varnames\n    }\n    colnames(em.ins)[inds.gamma] <- varnames\n\n    ## ------------------------\n    ## Output other information\n    ## ------------------------\n    ## Number of matches\n    num.matches <- sum(em.ins$counts * em.ins$zeta.j)\n\n    ## Gammas\n    gammaprob <- em$p.gamma.k.m\n    names(gammaprob) <- varnames\n    gammaprob <- lapply(gammaprob, function(x){round(x, digits)})\n    out <- list(match.patterns = em.ins, matchprob.by.variable = gammaprob,\n                num.matches = num.matches, posterior.range = posterior.range,\n                nobs.a = em$nobs.a, nobs.b = em$nobs.b, iter.converge = em$iter.converge,\n                lambda = em$p.m)\n    class(out) <- c("fastLink", "inspectEM")\n    \n    return(out)\n    \n}\n'