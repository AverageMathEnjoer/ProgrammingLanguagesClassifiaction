b'context("size_factor")\ntest_that("size factor works", {\n  \n  # size factor error checking\n  m <- matrix(1:16, ncol=4)\n  expect_error(estimateSizeFactorsForMatrix(m, geoMeans=1:5))\n  expect_error(estimateSizeFactorsForMatrix(m, geoMeans=rep(0,4)))\n  expect_error(estimateSizeFactorsForMatrix(m, controlGenes="foo"))\n  estimateSizeFactorsForMatrix(m, geoMeans=1:4)\n  estimateSizeFactorsForMatrix(m, controlGenes=1:2)\n\n  # norm matrix works\n  nm <- m / exp(rowMeans(log(m))) # divide out the geometric mean\n  true.sf <- c(2,1,1,.5)\n  counts <- sweep(2*m, 2, true.sf, "*")\n  dds <- DESeqDataSetFromMatrix(counts, data.frame(x=1:4), ~1)\n  dds <- estimateSizeFactors(dds, normMatrix=nm)\n  expect_equal((normalizationFactors(dds)/nm)[1,], true.sf)\n  \n  # make some counts with zeros\n  set.seed(1)\n  true.sf <- 2^(rep(c(-2,-1,0,0,1,2),each=2))\n  dmr <- function(x) 0.01\n  dds <- makeExampleDESeqDataSet(sizeFactors=true.sf, n=100, dispMeanRel=dmr)\n  cts <- counts(dds)\n  idx <- cbind(seq_len(nrow(cts)), sample(ncol(dds), nrow(cts), replace=TRUE))\n  cts[idx] <- 0L\n  cts[1,1] <- 1000000L # an outlier\n  counts(dds) <- cts\n\n  # positive counts method\n  dds <- estimateSizeFactors(dds, type="poscounts")\n  sf <- sizeFactors(dds)\n  #plot(true.sf, sf);abline(0,1)\n  coefs <- coef(lm(sf ~ true.sf))\n  expect_true(abs(coefs[1]) < .1)\n  expect_true(abs(coefs[2] - 1) < .1)\n  \n  # iterate method\n  dds <- estimateSizeFactors(dds, type="iterate")\n  sf <- sizeFactors(dds)\n  #plot(true.sf, sf);abline(0,1)\n  coefs <- coef(lm(sf ~ true.sf))\n  expect_true(abs(coefs[1]) < .1)\n  expect_true(abs(coefs[2] - 1) < .1)\n\n})\n'