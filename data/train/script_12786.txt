b'summarize.em <- function(x, thresholds){\n\n    if("fastLink.EM" %in% class(x)){\n        em.out <- x\n        EM <- data.frame(em.out$patterns.w)\n        EM$zeta.j <- em.out$zeta.j\n        EM <- EM[order(EM[, "weights"]), ]\n        n1 <- em.out$nobs.a; n2 <- em.out$nobs.b\n    }else{\n        em.out <- x$EM\n        EM <- data.frame(em.out$patterns.w)\n        EM$zeta.j <- em.out$zeta.j\n        EM <- EM[order(EM[, "weights"]), ]\n        n1 <- x$nobs.a; n2 <- x$nobs.b\n    }\n\n    count <- min(n1, n2)\n    \n    ## Containers for thresholds\n    tmc <- rep(NA, length(thresholds))\n    tpc <- rep(NA, length(thresholds))\n    fpc <- rep(NA, length(thresholds))\n    fnc <- rep(NA, length(thresholds))\n    for(i in 1:length(thresholds)){\n        tmc[i] <- sum(EM$counts[EM$zeta.j >= thresholds[i]] * EM$zeta.j[EM$zeta.j >= thresholds[i]])\n        tpc[i] <- min(sum(EM$counts[EM$zeta.j >= thresholds[i]]), min(n1, n2))\n        fpc[i] <- sum(EM$counts[EM$zeta.j >= thresholds[i]] * (1 - EM$zeta.j[EM$zeta.j >= thresholds[i]]))\n        fnc[i] <- sum(EM$counts[EM$zeta.j < thresholds[i]] * (EM$zeta.j[EM$zeta.j < thresholds[i]]))\n    }\n\n    ## Expected match rate\n    exp.match <- sum(EM$counts * EM$zeta.j)\n\n    ## Expected number of exact matches\n    gamma.ind <- grep("gamma.[[:digit:]]", names(EM))\n    exact.match.ind <- which(rowSums(EM[,gamma.ind]) == length(gamma.ind)*2)\n    if(length(exact.match.ind) == 0){\n        exact.matches <- 0\n    }else{\n        exact.matches <- EM$counts[exact.match.ind]\n    }\n    \n    out <- data.frame(t(c(count, tmc, tpc, fpc, fnc, exp.match, exact.matches, n1, n2)))\n    names(out) <- c("count", paste0("tmc.", thresholds*100), paste0("tpc.", thresholds*100), paste0("fpc.", thresholds*100),  \n                    paste0("fnc.", thresholds*100),  "exp.match", "exact.matches", "nobs.a", "nobs.b")\n\n    return(out)\n    \n}\n\nsummarize.agg <- function(x, num.comparisons, weighted){\n    \n    s.calc <- function(y){\n        ## Match rate\n        matches <- 100 * (y[,grep("tmc.", names(y))]) / min(y$nobs.a, y$nobs.b)\n        ## Exact match rate\n        matches.E <- 100 * (y$exact.matches) / min(y$nobs.a, y$nobs.b)\n        matches <- cbind(matches, matches.E)\n        colnames(matches) <- c(names(y)[grep("tmc.", names(y))], "matches.E")\n        ## Match count\n        matchcount <- y[,grep("tpc.", names(y))]\n        matchcount.E <- y$exact.matches\n        matchcount <- cbind(matchcount, matchcount.E)\n        colnames(matchcount) <- c(names(y)[grep("tpc.", names(y))], "matchcount.E")\n        ## FDR\n        fdr <- 100 * (y[,grep("fpc.", names(y))]) * 1 / (y[,grep("tpc.", names(y))])\n        names(fdr) <- names(y)[grep("fpc.", names(y))]\n        ## FNR\n        fnr <- 100 * (y[,grep("fnc.", names(y))]) / y$exp.match ## min(y$nobs.a, y$nobs.b)\n        names(fnr) <- names(y)[grep("fnc.", names(y))]\n        return(list(fdr = fdr, fnr = fnr, matches = matches, matchcount = matchcount))\n    }\n    \n    if(class(x) == "data.frame"){\n        out <- s.calc(x)\n    }else{\n        out <- list()\n        out[["within"]] <- s.calc(x[["within"]])\n        out[["across"]] <- s.calc(x[["across"]])\n        ## -------\n        ## Pooling\n        ## -------\n        ## Matches\n        matches <- 100 * (x$within[,grep("tmc.", names(x$within))] + x$across[,grep("tmc.", names(x$across))]) /\n            min(x$within$nobs.a, x$within$nobs.b)\n        matches.E <- 100 * (x$within$exact.matches + x$across$exact.matches) / min(x$within$nobs.a, x$within$nobs.b)\n        matches <- cbind(matches, matches.E)\n        colnames(matches) <- c(names(x$within)[grep("tmc.", names(x$within))], "matches.E")\n        ## Match count\n        matchcount <- out$within$matchcount + out$across$matchcount\n        ## FDR\n        fdr <- 100 * (x$within[,grep("fpc.", names(x$across))] + x$across[,grep("fpc.", names(x$across))]) /\n            (x$within[,grep("tpc.", names(x$within))] + x$across[,grep("tpc.", names(x$across))])\n        names(fdr) <- names(x$within)[grep("fpc.", names(x$within))]\n        ## FNR\n        fnr <- 100 * (x$within[,grep("fnc.", names(x$across))] + (x$across[,grep("fnc.", names(x$across))] / num.comparisons)) /\n            x$within$exp.match ## min(x$within$nobs.a, x$within$nobs.b)\n        names(fnr) <- names(x$within)[grep("fnc.", names(x$within))]\n        ## Return object\n        out[["pooled"]] <- list(fdr = fdr, fnr = fnr, matches = matches, matchcount = matchcount)\n        ## ------\n        ## Weight \n        ## ------\n        if(weighted){\n            ## Across-unit matches\n            wm <- 100 * (x$within[,grep("tmc.", names(x$within))]) /\n                min(x$within$nobs.a, x$within$nobs.b)\n            wm.E <- 100 * (x$within$exact.matches) / min(x$within$nobs.a, x$within$nobs.b)\n            out$within$matches <- cbind(wm, wm.E)\n            wm <- 100 * (x$across[,grep("tmc.", names(x$across))]) /\n                min(x$within$nobs.a, x$within$nobs.b)\n            wm.E <- 100 * (x$across$exact.matches) / min(x$within$nobs.a, x$within$nobs.b)\n            out$across$matches <- cbind(wm, wm.E)\n            ## Across and within-unit FDR\n            fdr.a <- 100 * (x$across[, grep("fpc.", names(x$across))]) / \n                (x$across[,grep("tmc.", names(x$across))] + x$within[, grep("tmc.", names(x$within))])\n            names(fdr.a) <- names(x$across)[grep("fd.", names(x$across))]\n            out$across$fdr <- fdr.a\n            fdr.w <- 100 * (x$within[, grep("fpc.", names(x$within))]) / \n                (x$across[,grep("tpc.", names(x$across))] + x$within[, grep("tpc.", names(x$within))])\n            names(fdr.w) <- names(x$within)[grep("fd.", names(x$within))]\n            out$within$fdr <- fdr.w\n            ## Across and within-unit FNR\n            fnr.a <- 100 * (x$across[,grep("fnc.", names(x$across))] / num.comparisons) /\n                x$within$exp.match ## min(x$within$nobs.a, x$within$nobs.b)\n            names(fnr.a) <- names(x$across)[grep("fnc.", names(x$across))]\n            out$across$fnr <- fnr.a\n            fnr.w <- 100 * (x$within[,grep("fnc.", names(x$across))]) /\n                x$within$exp.match ## min(x$within$nobs.a, x$within$nobs.b)\n            names(fnr.w) <- names(x$within)[grep("fnc.", names(x$within))]\n            out$within$fnr <- fnr.w\n        }\n    }\n\n    return(out)\n\n}\n\n#\' Get summaries of fastLink() objects\n#\'\n#\' \\code{summary.fastLink()} calculates and outputs FDR, FNR, match counts, and match rates for\n#\' estimated matches from a fastLink() object.\n#\'\n#\' @usage \\method{summary}{fastLink}(object, num.comparisons = 1,\n#\' thresholds = c(.95, .85, .75), weighted = TRUE, digits = 3, ...)\n#\' @param object Either a single `fastLink` or `fastLink.EM` object, or a list of `fastLink` or `fastLink.EM` objects\n#\' to be aggregated together produced  by `aggregateEM`.\n#\' @param num.comparisons The number of comparisons attempted for each observation in the across-geography match step.\n#\' A correction factor to avoid multiple-counting. Default is NULL\n#\' @param thresholds A vector of posterior probabilities to calculate the summary statistics.\n#\' @param weighted Whether to weight the cross-geography matches on FDR and FNR.\n#\' @param digits How many digits to include in summary object. Default is 3.\n#\' @param ... Further arguments to be passed to \\code{summary.fastLink()}.\n#\'\n#\' @export\n#\' @method summary fastLink\nsummary.fastLink <- function(object, num.comparisons = 1, thresholds = c(.95, .85, .75), weighted = TRUE, digits = 3, ...){\n    \n    round.pct <- function(x){\n      a <- unlist(x)\n      b <- round(a, digits)\n      c <- paste0(b, "%")\n      return(c)\n    }\n    \n    if("fastLink.agg" %in% class(object) & !("across.geo" %in% names(object))){\n        ## Extract and calculate counts\n        out <- as.data.frame(do.call(rbind, lapply(object, function(x){summarize.em(x, thresholds = thresholds)})))\n        out <- data.frame(t(colSums(out)))\n        out.agg <- summarize.agg(out, num.comparisons = num.comparisons, weighted = weighted)\n    }else if("fastLink.agg" %in% class(object) & "across.geo" %in% names(object)){\n        ## Extract and calculate counts\n        out.w <- as.data.frame(do.call(rbind, lapply(object[["within.geo"]], function(x){summarize.em(x, thresholds = thresholds)})))\n        out.a <- as.data.frame(do.call(rbind, lapply(object[["across.geo"]], function(x){summarize.em(x, thresholds = thresholds)})))\n        out <- list(within = data.frame(t(colSums(out.w))), across = data.frame(t(colSums(out.a))))\n        out.agg <- summarize.agg(out, num.comparisons = num.comparisons, weighted = weighted)\n    }else if("fastLink" %in% class(object) | "fastLink.EM" %in% class(object)){\n        out <- summarize.em(object, thresholds = thresholds)\n        out.agg <- summarize.agg(out, num.comparisons = num.comparisons, weighted = weighted)\n    } \n\n    if("fastLink.agg" %in% class(object) & "across.geo" %in% names(object)){\n        tab <- as.data.frame(\n            rbind(c(out.agg$pooled$matchcount), c(out.agg$within$matchcount),\n                  c(out.agg$across$matchcount),\n                  round.pct(out.agg$pooled$matches), round.pct(out.agg$within$matches),\n                  round.pct(out.agg$across$matches),\n                  c(round.pct(out.agg$pooled$fdr), ""), c(round.pct(out.agg$within$fdr), ""),\n                  c(round.pct(out.agg$across$fdr), ""),\n                  c(round.pct(out.agg$pooled$fnr), ""), c(round.pct(out.agg$within$fnr), ""),\n                  c(round.pct(out.agg$across$fnr), ""))\n        )\n        tab <- cbind(rep(c("All", "Within-State", "Across-State"), 4), tab)\n        tab <- cbind(c("Match Count", "", "", "Match Rate", "", "", "FDR", "", "", "FNR", "", ""), tab)\n        colnames(tab) <- c("", "", paste0(thresholds * 100, "%"),  "Exact")\n    }else{\n      tab <- as.data.frame(\n        rbind(out.agg$matchcount, round.pct(out.agg$matches), c(round.pct(out.agg$fdr), ""), c(round.pct(out.agg$fnr), ""))\n      )\n      tab <- cbind(c("Match Count", "Match Rate", "FDR", "FNR"), tab)\n      colnames(tab) <- c("", paste0(thresholds * 100, "%"), "Exact")\n    }\n    #class(tab) <- "summary.fastLink"\n    \n    return(tab)\n}\n\n#\' Aggregate EM objects for use in `summary.fastLink()`\n#\'\n#\' \\code{aggregateEM} aggregates EM objects for easy processing by `summary.fastLink()`\n#\'\n#\' @usage aggregateEM(em.list, within.geo)\n#\' @param em.list A list of `fastLink` or `fastLink.EM` objects that should be aggregate\n#\' in `summary.fastLink()`\n#\' @param within.geo A vector of booleans corresponding to whether each object in `em.list`\n#\' is a within-geography match or an across-geography match. Should be of equal length to\n#\' `em.list`. Default is NULL (assumes all are within-geography matches).\n#\' \n#\' @export\naggregateEM <- function(em.list, within.geo = NULL){\n\n    if(is.null(within.geo)){\n        out <- em.list\n    }else{\n        if(length(within.geo) != length(em.list)){\n            stop("If provided, within.geo should be the same length as em.list.")\n        }\n\n        wg <- vector(mode = "list", length = sum(within.geo))\n        ag <- vector(mode = "list", length = length(within.geo) - sum(within.geo))\n        ind.within <- which(within.geo == TRUE)\n        ind.across <- which(within.geo == FALSE)\n        for(i in 1:length(ind.within)){\n            wg[[i]] <- em.list[[ind.within[i]]]\n        }\n        for(i in 1:length(ind.across)){\n            ag[[i]] <- em.list[[ind.across[i]]]\n        }\n        \n        out <- list(within.geo = wg, across.geo = ag)\n        \n    }\n    class(out) <- c("fastLink", "fastLink.agg")\n    \n    return(out)\n\n}\n\n\n'