b'// Copyright (c) 2022-2023 Manuel Schneider\n\n#include "albert/extensions/frontend.h"\n#include "albert/logging.h"\n#include "app.h"\n#include "pluginwidget.h"\n#include "settingswindow.h"\n#include "trayicon.h"\n#include "triggerwidget.h"\n#include <QCloseEvent>\n#include <QGuiApplication>\n#include <QStandardPaths>\n#include <QDesktopServices>\n#include <QKeySequenceEdit>\nusing namespace std;\n\n\nclass QHotKeyEdit : public QKeySequenceEdit\n{\npublic:\n    QHotKeyEdit(Hotkey &hk) : hotkey(hk)\n    {\n        if (!hotkey.isPlatformSupported()){\n            setToolTip("This platform does not support hotkeys.");\n            setEnabled(false);\n        }\n        else\n            setKeySequence(hotkey.hotkey());\n    }\n\n    bool event(QEvent *event) override\n    {\n        if (event->type() == QEvent::KeyPress){\n            auto *keyEvent = static_cast<QKeyEvent*>(event);\n\n            if (Qt::Key_Shift <= keyEvent->key() && keyEvent->key() <= Qt::Key_ScrollLock)\n                return true; // Filter mod keys\n\n            if (auto ckc = keyEvent->keyCombination(); hotkey.setHotkey(ckc))\n                setKeySequence(ckc);\n\n            return true;\n        }\n        return false;\n    }\n\n    Hotkey &hotkey;\n};\n\n\nSettingsWindow::SettingsWindow(App &app) : ui()\n{\n    ui.setupUi(this);\n    setAttribute(Qt::WA_DeleteOnClose);\n\n    ui.tabs->setStyleSheet("QTabWidget::pane { border-radius: 0px; }");\n\n    init_tab_general_hotkey(app.hotkey);\n    init_tab_general_frontend(app.plugin_provider);\n    init_tab_general_terminal(app.terminal_provider);\n    init_tab_general_trayIcon(app.tray_icon);\n    init_tab_general_autostart();\n    init_tab_general_search(app.query_engine);\n\n    ui.tabs->insertTab(ui.tabs->count()-1, new TriggerWidget(app.query_engine, app.extension_registry), "Triggers");\n    ui.tabs->insertTab(ui.tabs->count()-1, new PluginWidget(app.plugin_registry), "Plugins");\n\n    init_tab_about();\n\n    auto geometry = QGuiApplication::screenAt(QCursor::pos())->geometry();\n    move(geometry.center().x() - frameSize().width()/2,\n         geometry.top() + geometry.height() / 5);\n}\n\nvoid SettingsWindow::init_tab_general_hotkey(Hotkey &Hotkey)\n{\n    ui.formLayout_general->insertRow(0, "Hotkey", new QHotKeyEdit(Hotkey));\n}\n\nvoid SettingsWindow::init_tab_general_frontend(NativePluginProvider &plugin_provider)\n{\n    for (const auto *loader : plugin_provider.frontendPlugins()){\n        ui.comboBox_frontend->addItem(loader->metaData().name);\n        if (loader->metaData().id == plugin_provider.frontend()->id())\n            ui.comboBox_frontend->setCurrentIndex(ui.comboBox_frontend->count()-1);\n    }\n\n    connect(ui.comboBox_frontend, static_cast<void(QComboBox::*)(int)>(&QComboBox::currentIndexChanged),\n            this, [&plugin_provider](int index) { plugin_provider.setFrontend(index); });\n\n    ui.groupBox_window->layout()->addWidget(plugin_provider.frontend()->createFrontendConfigWidget());\n}\n\nvoid SettingsWindow::init_tab_general_terminal(TerminalProvider &terminal_provider)\n{\n    for (const auto &terminal : terminal_provider.terminals()){\n        ui.comboBox_term->addItem(terminal->name());\n        if (terminal.get() == &terminal_provider.terminal())\n            ui.comboBox_term->setCurrentIndex(ui.comboBox_term->count()-1);\n    }\n\n    connect(ui.comboBox_term, static_cast<void(QComboBox::*)(int)>(&QComboBox::currentIndexChanged),\n            this, [&terminal_provider](int index){ terminal_provider.setTerminal(index); });\n}\n\nvoid SettingsWindow::init_tab_general_trayIcon(TrayIcon &tray_icon)\n{\n    ui.checkBox_showTray->setChecked(tray_icon.isVisible());\n    QObject::connect(ui.checkBox_showTray, &QCheckBox::toggled,\n                     &tray_icon, &TrayIcon::setVisible);\n}\n\nvoid SettingsWindow::init_tab_general_autostart()\n{\n#if defined(Q_OS_LINUX) || defined(Q_OS_FREEBSD)\n    QString desktopfile_path = QStandardPaths::locate(QStandardPaths::ApplicationsLocation,\n                                                      "albert.desktop",\n                                                      QStandardPaths::LocateFile);\n    if (!desktopfile_path.isNull()) {\n        QString autostart_path = QDir(QStandardPaths::writableLocation(QStandardPaths::ConfigLocation)).filePath("autostart/albert.desktop");\n        ui.checkBox_autostart->setChecked(QFile::exists(autostart_path));\n        connect(ui.checkBox_autostart, &QCheckBox::toggled,\n                this, [=](bool toggled){\n            if (toggled)\n                QFile::link(desktopfile_path, autostart_path);\n            else\n                QFile::remove(autostart_path);\n        });\n    }\n    else\n        CRIT << "Deskop entry not found! Autostart option is nonfuctional";\n#else\n    ui.checkBox_autostart->setEnabled(false);\n    WARN << "Autostart not implemented on this platform!";\n#endif\n}\n\nvoid SettingsWindow::init_tab_general_search(QueryEngine &engine)\n{\n    ui.checkBox_fuzzy->setChecked(engine.fuzzy());\n    QObject::connect(ui.checkBox_fuzzy, &QCheckBox::toggled,\n                     [&engine](bool checked){ engine.setFuzzy(checked); });\n\n    ui.lineEdit_separators->setText(engine.separators());\n    QObject::connect(ui.lineEdit_separators, &QLineEdit::editingFinished,\n                     [&](){ engine.setSeparators(ui.lineEdit_separators->text()); });\n\n    ui.slider_decay->setValue((int)(engine.memoryDecay()*100));\n    QObject::connect(ui.slider_decay, &QSlider::valueChanged,\n                     [&](int val){ engine.setMemoryDecay((double)val/100.0); });\n\n    ui.checkBox_prioritizePerfectMatch->setChecked(engine.prioritizePerfectMatch());\n    QObject::connect(ui.checkBox_prioritizePerfectMatch, &QCheckBox::toggled,\n                     [&](bool val){ engine.setPrioritizePerfectMatch(val); });\n}\n\nvoid SettingsWindow::init_tab_about()\n{\n    auto open_link = [](const QString &link){\n        if( link == "aboutQt" ){\n            qApp->aboutQt();\n        } else\n            QDesktopServices::openUrl(QUrl(link));\n    };\n\n    QString about = ui.about_text->text();\n    about.replace("___versionstring___", qApp->applicationVersion());\n    ui.about_text->setText(about);\n    connect(ui.about_text, &QLabel::linkActivated, this, open_link);\n}\n\nvoid SettingsWindow::bringToFront()\n{\n    show();\n    raise();\n    activateWindow();\n}\n\nvoid SettingsWindow::keyPressEvent(QKeyEvent *event)\n{\n    if (event->modifiers() == Qt::NoModifier && event->key() == Qt::Key_Escape)\n        close();\n    else if (event->modifiers() == Qt::ControlModifier && event->key() == Qt::Key_W)\n        close();\n}\n'