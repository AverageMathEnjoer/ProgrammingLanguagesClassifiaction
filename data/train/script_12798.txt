b'// UVa1412 Fund Management\n// Rujia Liu\n#include<cstdio>\n#include<cstring>\n#include<vector>\n#include<map>\nusing namespace std;\n\nconst double INF = 1e30;\nconst int maxn = 8;\nconst int maxm = 100 + 5;\nconst int maxstate = 15000;\n\nint m, n, s[maxn], k[maxn], kk;\ndouble c, price[maxn][maxm];\nchar name[maxn][10];\n\ndouble d[maxm][maxstate];\nint opt[maxm][maxstate], prev[maxm][maxstate];\n\nint buy_next[maxstate][maxn], sell_next[maxstate][maxn];\nvector<vector<int> > states;\nmap<vector<int>, int> ID;\n\nvoid dfs(int stock, vector<int>& lots, int totlot) {\n  if(stock == n) {\n    ID[lots] = states.size();\n    states.push_back(lots);\n  }\n  else for(int i = 0; i <= k[stock] && totlot + i <= kk; i++) {\n    lots[stock] = i;\n    dfs(stock+1, lots, totlot + i);\n  }\n}\n\nvoid init() {\n  vector<int> lots(n);\n  states.clear();\n  ID.clear();\n  dfs(0, lots, 0);\n  for(int s = 0; s < states.size(); s++) {\n    int totlot = 0;\n    for(int i = 0; i < n; i++) totlot += states[s][i];\n    for(int i = 0; i < n; i++) {\n      buy_next[s][i] = sell_next[s][i] = -1;\n      if(states[s][i] < k[i] && totlot < kk) {\n        vector<int> newstate = states[s];\n        newstate[i]++;\n        buy_next[s][i] = ID[newstate];\n      }\n      if(states[s][i] > 0) {\n        vector<int> newstate = states[s];\n        newstate[i]--;\n        sell_next[s][i] = ID[newstate];\n      }\n    }\n  }\n}\n\nvoid update(int day, int s, int s2, double v, int o) {\n  if(v > d[day+1][s2]) {\n    d[day+1][s2] = v;\n    opt[day+1][s2] = o;\n    prev[day+1][s2] = s;\n  }\n}\n\ndouble dp() {\n  for(int day = 0; day <= m; day++)\n    for(int s = 0; s < states.size(); s++) d[day][s] = -INF;\n\n  d[0][0] = c;\n  for(int day = 0; day < m; day++)\n    for(int s = 0; s < states.size(); s++) {\n      double v = d[day][s];\n      if(v < -1) continue;\n\n      update(day, s, s, v, 0); // HOLD\n      for(int i = 0; i < n; i++) {\n        if(buy_next[s][i] >= 0 && v >= price[i][day] - 1e-3)\n          update(day, s, buy_next[s][i], v - price[i][day], i+1); // BUY\n        if(sell_next[s][i] >= 0)\n          update(day, s, sell_next[s][i], v + price[i][day], -i-1); // SELL\n      }\n    }\n  return d[m][0];\n}\n\nvoid print_ans(int day, int s) {\n  if(day == 0) return;\n  print_ans(day-1, prev[day][s]);\n  if(opt[day][s] == 0) printf("HOLD\\n");\n  else if(opt[day][s] > 0) printf("BUY %s\\n", name[opt[day][s]-1]);\n  else printf("SELL %s\\n", name[-opt[day][s]-1]);\n}\n\nint main() {\n  int kase = 0;\n  while(scanf("%lf%d%d%d", &c, &m, &n, &kk) == 4) {\n    if(kase++ > 0) printf("\\n");\n\n    for(int i = 0; i < n; i++) {\n      scanf("%s%d%d", name[i], &s[i], &k[i]);\n      for(int j = 0; j < m; j++) { scanf("%lf", &price[i][j]); price[i][j] *= s[i]; }\n    }\n    init();\n\n    double ans = dp();\n    printf("%.2lf\\n", ans);\n    print_ans(m, 0);\n  }\n  return 0;\n}\n'