b'module Rest.StringMap.Util\n  ( pickleStringMap\n  , pickleMap\n  , mapSchema\n  ) where\n\nimport Data.JSON.Schema (JSONSchema, Schema (Map), schema)\nimport Data.Proxy (Proxy)\nimport Data.String (IsString (..))\nimport Data.String.ToString (ToString (..))\nimport Text.XML.HXT.Arrow.Pickle (PU, XmlPickler, xpElem, xpList, xpPair, xpTextAttr, xpWrap, xpickle)\n\npickleStringMap :: XmlPickler b => ([(String, b)] -> m) -> (m -> [(String, b)]) -> PU m\npickleStringMap fromList toList =\n  xpElem "map"\n    $ xpWrap (fromList, toList)\n    $ xpList (xpElem "value" (xpPair (xpTextAttr "key") xpickle))\n\npickleMap :: (XmlPickler m, ToString k, IsString k) => ((String -> k) -> m -> m\') -> ((k -> String) -> m\' -> m) -> PU m\'\npickleMap mapKeys mapKeys\' = xpWrap (mapKeys fromString, mapKeys\' toString) xpickle\n\nmapSchema :: JSONSchema a => Proxy a -> Schema\nmapSchema = Map . schema\n'