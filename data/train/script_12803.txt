b'package com.codeest.geeknews.util;\r\n\r\nimport com.codeest.geeknews.model.http.exception.ApiException;\r\nimport com.codeest.geeknews.model.http.response.GankHttpResponse;\r\nimport com.codeest.geeknews.model.http.response.GoldHttpResponse;\r\nimport com.codeest.geeknews.model.http.response.MyHttpResponse;\r\nimport com.codeest.geeknews.model.http.response.WXHttpResponse;\r\n\r\nimport io.reactivex.BackpressureStrategy;\r\nimport io.reactivex.Flowable;\r\nimport io.reactivex.FlowableEmitter;\r\nimport io.reactivex.FlowableOnSubscribe;\r\nimport io.reactivex.FlowableTransformer;\r\nimport io.reactivex.android.schedulers.AndroidSchedulers;\r\nimport io.reactivex.functions.Function;\r\nimport io.reactivex.schedulers.Schedulers;\r\n\r\n/**\r\n * Created by codeest on 2016/8/3.\r\n */\r\npublic class RxUtil {\r\n\r\n    /**\r\n     * \xe7\xbb\x9f\xe4\xb8\x80\xe7\xba\xbf\xe7\xa8\x8b\xe5\xa4\x84\xe7\x90\x86\r\n     * @param <T>\r\n     * @return\r\n     */\r\n    public static <T> FlowableTransformer<T, T> rxSchedulerHelper() {    //compose\xe7\xae\x80\xe5\x8c\x96\xe7\xba\xbf\xe7\xa8\x8b\r\n        return new FlowableTransformer<T, T>() {\r\n            @Override\r\n            public Flowable<T> apply(Flowable<T> observable) {\r\n                return observable.subscribeOn(Schedulers.io())\r\n                        .observeOn(AndroidSchedulers.mainThread());\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * \xe7\xbb\x9f\xe4\xb8\x80\xe8\xbf\x94\xe5\x9b\x9e\xe7\xbb\x93\xe6\x9e\x9c\xe5\xa4\x84\xe7\x90\x86\r\n     * @param <T>\r\n     * @return\r\n     */\r\n    public static <T> FlowableTransformer<GankHttpResponse<T>, T> handleResult() {   //compose\xe5\x88\xa4\xe6\x96\xad\xe7\xbb\x93\xe6\x9e\x9c\r\n        return new FlowableTransformer<GankHttpResponse<T>, T>() {\r\n            @Override\r\n            public Flowable<T> apply(Flowable<GankHttpResponse<T>> httpResponseFlowable) {\r\n                return httpResponseFlowable.flatMap(new Function<GankHttpResponse<T>, Flowable<T>>() {\r\n                    @Override\r\n                    public Flowable<T> apply(GankHttpResponse<T> tGankHttpResponse) {\r\n                        if(!tGankHttpResponse.getError()) {\r\n                            return createData(tGankHttpResponse.getResults());\r\n                        } else {\r\n                            return Flowable.error(new ApiException("\xe6\x9c\x8d\xe5\x8a\xa1\xe5\x99\xa8\xe8\xbf\x94\xe5\x9b\x9eerror"));\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * \xe7\xbb\x9f\xe4\xb8\x80\xe8\xbf\x94\xe5\x9b\x9e\xe7\xbb\x93\xe6\x9e\x9c\xe5\xa4\x84\xe7\x90\x86\r\n     * @param <T>\r\n     * @return\r\n     */\r\n    public static <T> FlowableTransformer<WXHttpResponse<T>, T> handleWXResult() {   //compose\xe5\x88\xa4\xe6\x96\xad\xe7\xbb\x93\xe6\x9e\x9c\r\n        return new FlowableTransformer<WXHttpResponse<T>, T>() {\r\n            @Override\r\n            public Flowable<T> apply(Flowable<WXHttpResponse<T>> httpResponseFlowable) {\r\n                return httpResponseFlowable.flatMap(new Function<WXHttpResponse<T>, Flowable<T>>() {\r\n                    @Override\r\n                    public Flowable<T> apply(WXHttpResponse<T> tWXHttpResponse) {\r\n                        if(tWXHttpResponse.getCode() == 200) {\r\n                            return createData(tWXHttpResponse.getNewslist());\r\n                        } else {\r\n                            return Flowable.error(new ApiException(tWXHttpResponse.getMsg(), tWXHttpResponse.getCode()));\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * \xe7\xbb\x9f\xe4\xb8\x80\xe8\xbf\x94\xe5\x9b\x9e\xe7\xbb\x93\xe6\x9e\x9c\xe5\xa4\x84\xe7\x90\x86\r\n     * @param <T>\r\n     * @return\r\n     */\r\n    public static <T> FlowableTransformer<MyHttpResponse<T>, T> handleMyResult() {   //compose\xe5\x88\xa4\xe6\x96\xad\xe7\xbb\x93\xe6\x9e\x9c\r\n        return new FlowableTransformer<MyHttpResponse<T>, T>() {\r\n            @Override\r\n            public Flowable<T> apply(Flowable<MyHttpResponse<T>> httpResponseFlowable) {\r\n                return httpResponseFlowable.flatMap(new Function<MyHttpResponse<T>, Flowable<T>>() {\r\n                    @Override\r\n                    public Flowable<T> apply(MyHttpResponse<T> tMyHttpResponse) {\r\n                        if(tMyHttpResponse.getCode() == 200) {\r\n                            return createData(tMyHttpResponse.getData());\r\n                        } else {\r\n                            return Flowable.error(new ApiException(tMyHttpResponse.getMessage(), tMyHttpResponse.getCode()));\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * \xe7\xbb\x9f\xe4\xb8\x80\xe8\xbf\x94\xe5\x9b\x9e\xe7\xbb\x93\xe6\x9e\x9c\xe5\xa4\x84\xe7\x90\x86\r\n     * @param <T>\r\n     * @return\r\n     */\r\n    public static <T> FlowableTransformer<GoldHttpResponse<T>, T> handleGoldResult() {   //compose\xe5\x88\xa4\xe6\x96\xad\xe7\xbb\x93\xe6\x9e\x9c\r\n        return new FlowableTransformer<GoldHttpResponse<T>, T>() {\r\n            @Override\r\n            public Flowable<T> apply(Flowable<GoldHttpResponse<T>> httpResponseFlowable) {\r\n                return httpResponseFlowable.flatMap(new Function<GoldHttpResponse<T>, Flowable<T>>() {\r\n                    @Override\r\n                    public Flowable<T> apply(GoldHttpResponse<T> tGoldHttpResponse) {\r\n                        if(tGoldHttpResponse.getResults() != null) {\r\n                            return createData(tGoldHttpResponse.getResults());\r\n                        } else {\r\n                            return Flowable.error(new ApiException("\xe6\x9c\x8d\xe5\x8a\xa1\xe5\x99\xa8\xe8\xbf\x94\xe5\x9b\x9eerror"));\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * \xe7\x94\x9f\xe6\x88\x90Flowable\r\n     * @param <T>\r\n     * @return\r\n     */\r\n    public static <T> Flowable<T> createData(final T t) {\r\n        return Flowable.create(new FlowableOnSubscribe<T>() {\r\n            @Override\r\n            public void subscribe(FlowableEmitter<T> emitter) throws Exception {\r\n                try {\r\n                    emitter.onNext(t);\r\n                    emitter.onComplete();\r\n                } catch (Exception e) {\r\n                    emitter.onError(e);\r\n                }\r\n            }\r\n        }, BackpressureStrategy.BUFFER);\r\n    }\r\n}\r\n'