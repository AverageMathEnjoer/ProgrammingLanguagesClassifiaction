b'/*\n * Copyright (C) 2015 Naman Dwivedi\n *\n * Licensed under the GNU General Public License v3\n *\n * This is free software: you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n */\n\npackage com.naman14.timber.fragments;\n\nimport android.os.AsyncTask;\nimport android.os.Bundle;\nimport androidx.fragment.app.Fragment;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.recyclerview.widget.LinearLayoutManager;\n\nimport android.view.LayoutInflater;\nimport android.view.Menu;\nimport android.view.MenuInflater;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.view.ViewGroup;\n\nimport com.naman14.timber.R;\nimport com.naman14.timber.activities.BaseActivity;\nimport com.naman14.timber.adapters.SongsListAdapter;\nimport com.naman14.timber.dataloaders.SongLoader;\nimport com.naman14.timber.listeners.MusicStateListener;\nimport com.naman14.timber.models.Song;\nimport com.naman14.timber.utils.PreferencesUtility;\nimport com.naman14.timber.utils.SortOrder;\nimport com.naman14.timber.widgets.BaseRecyclerView;\nimport com.naman14.timber.widgets.DividerItemDecoration;\nimport com.naman14.timber.widgets.FastScroller;\n\nimport java.util.List;\n\npublic class SongsFragment extends Fragment implements MusicStateListener {\n\n    private SongsListAdapter mAdapter;\n    private BaseRecyclerView recyclerView;\n    private PreferencesUtility mPreferences;\n\n    @Override\n    public void onCreate(final Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        mPreferences = PreferencesUtility.getInstance(getActivity());\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        View rootView = inflater.inflate(\n                R.layout.fragment_recyclerview, container, false);\n\n        recyclerView = rootView.findViewById(R.id.recyclerview);\n        recyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));\n        recyclerView.setEmptyView(getActivity(), rootView.findViewById(R.id.list_empty), "No media found");\n        FastScroller fastScroller =  rootView.findViewById(R.id.fastscroller);\n        fastScroller.setRecyclerView(recyclerView);\n\n        new loadSongs().execute("");\n        ((BaseActivity) getActivity()).setMusicStateListenerListener(this);\n\n        return rootView;\n    }\n\n    public void restartLoader() {\n\n    }\n\n    public void onPlaylistChanged() {\n\n    }\n\n    public void onMetaChanged() {\n        if (mAdapter != null)\n            mAdapter.notifyDataSetChanged();\n    }\n\n    private void reloadAdapter() {\n        new AsyncTask<Void, Void, Void>() {\n            @Override\n            protected Void doInBackground(final Void... unused) {\n                List<Song> songList = SongLoader.getAllSongs(getActivity());\n                mAdapter.updateDataSet(songList);\n                return null;\n            }\n\n            @Override\n            protected void onPostExecute(Void aVoid) {\n                mAdapter.notifyDataSetChanged();\n            }\n        }.execute();\n    }\n\n    @Override\n    public void onActivityCreated(final Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n        setHasOptionsMenu(true);\n    }\n\n    @Override\n    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {\n        super.onCreateOptionsMenu(menu, inflater);\n        inflater.inflate(R.menu.song_sort_by, menu);\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        switch (item.getItemId()) {\n            case R.id.menu_sort_by_az:\n                mPreferences.setSongSortOrder(SortOrder.SongSortOrder.SONG_A_Z);\n                reloadAdapter();\n                return true;\n            case R.id.menu_sort_by_za:\n                mPreferences.setSongSortOrder(SortOrder.SongSortOrder.SONG_Z_A);\n                reloadAdapter();\n                return true;\n            case R.id.menu_sort_by_artist:\n                mPreferences.setSongSortOrder(SortOrder.SongSortOrder.SONG_ARTIST);\n                reloadAdapter();\n                return true;\n            case R.id.menu_sort_by_album:\n                mPreferences.setSongSortOrder(SortOrder.SongSortOrder.SONG_ALBUM);\n                reloadAdapter();\n                return true;\n            case R.id.menu_sort_by_year:\n                mPreferences.setSongSortOrder(SortOrder.SongSortOrder.SONG_YEAR);\n                reloadAdapter();\n                return true;\n            case R.id.menu_sort_by_duration:\n                mPreferences.setSongSortOrder(SortOrder.SongSortOrder.SONG_DURATION);\n                reloadAdapter();\n                return true;\n        }\n        return super.onOptionsItemSelected(item);\n    }\n\n    private class loadSongs extends AsyncTask<String, Void, String> {\n\n        @Override\n        protected String doInBackground(String... params) {\n            if (getActivity() != null)\n                mAdapter = new SongsListAdapter((AppCompatActivity) getActivity(), SongLoader.getAllSongs(getActivity()), false, false);\n            return "Executed";\n        }\n\n        @Override\n        protected void onPostExecute(String result) {\n            recyclerView.setAdapter(mAdapter);\n            if (getActivity() != null)\n                recyclerView.addItemDecoration(new DividerItemDecoration(getActivity(), DividerItemDecoration.VERTICAL_LIST));\n\n        }\n\n        @Override\n        protected void onPreExecute() {\n        }\n    }\n}\n'