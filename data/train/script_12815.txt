b'{-# LANGUAGE\n    DeriveDataTypeable\n  , DeriveGeneric\n  , GeneralizedNewtypeDeriving\n  , StandaloneDeriving\n  #-}\nmodule Rest.Types.Container.Resource\n  ( Resource (..)\n  , Resources (..)\n\n  , KeyValues\n  , Value (..)\n  ) where\n\nimport Data.Aeson hiding (Value)\nimport Data.CaseInsensitive (CI)\nimport Data.JSON.Schema (JSONSchema (..), gSchema)\nimport Data.Typeable\nimport GHC.Generics\nimport Generics.Generic.Aeson\nimport Generics.XmlPickler (gxpickle)\nimport Rest.StringMap.HashMap.Strict (StringHashMap)\nimport Rest.Types.Method\nimport Text.XML.HXT.Arrow.Pickle\nimport qualified Data.JSON.Schema.Combinators as Json\n\ntype KeyValues = StringHashMap String Value\ntype CaseInsensitiveKeyValues = StringHashMap (CI String) Value\n\nnewtype Value = Value { unValue :: String }\n  deriving (Show, Typeable)\n\nderiving instance ToJSON Value\nderiving instance FromJSON Value\ninstance JSONSchema Value where\n  schema _ = Json.value\n\ninstance XmlPickler Value where\n  xpickle = xpElem "value" $ xpWrap (Value, unValue) xpText0\n\ndata Resource = Resource\n  { uri        :: String\n  , method     :: Method\n  , headers    :: CaseInsensitiveKeyValues\n  , parameters :: KeyValues\n  , input      :: String\n  } deriving (Generic, Show, Typeable)\n\ninstance XmlPickler Resource where\n  xpickle = gxpickle\n\ninstance ToJSON     Resource where toJSON    = gtoJson\ninstance FromJSON   Resource where parseJSON = gparseJson\ninstance JSONSchema Resource where schema    = gSchema\n\n-------------------------------------------------------------------------------\n\nnewtype Resources = Resources [Resource] deriving (Generic, Typeable)\n\ninstance XmlPickler Resources where\n  xpickle = gxpickle\n\ninstance ToJSON     Resources where toJSON    = gtoJson\ninstance FromJSON   Resources where parseJSON = gparseJson\ninstance JSONSchema Resources where schema    = gSchema\n'