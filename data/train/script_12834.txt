b'module Hoodle.Type.Window where\n\nimport Hoodle.Type.Canvas (CanvasId)\n\n-- |\ndata WindowConfig\n  = Node CanvasId\n  | HSplit WindowConfig WindowConfig\n  | VSplit WindowConfig WindowConfig\n  deriving (Show, Eq)\n\ndata SplitType = SplitHorizontal | SplitVertical\n  deriving (Show)\n\n-- | split window in the place of cidold\nsplitWindow ::\n  -- | old window\n  CanvasId ->\n  -- | new additional window\n  (CanvasId, SplitType) ->\n  -- | old WindowConfig\n  WindowConfig ->\n  -- | new WindowConfig\n  Either WindowConfig WindowConfig\nsplitWindow cidold (cidnew, stype) (Node cid) =\n  if cid == cidold\n    then case stype of\n      SplitHorizontal -> Right (HSplit (Node cid) (Node cidnew))\n      SplitVertical -> Right (VSplit (Node cid) (Node cidnew))\n    else Left (Node cid)\nsplitWindow cidold (cidnew, stype) (HSplit wconf1 wconf2) =\n  let r1 = splitWindow cidold (cidnew, stype) wconf1\n      r2 = splitWindow cidold (cidnew, stype) wconf2\n   in case (r1, r2) of\n        (Left nwconf1, Left nwconf2) -> Left (HSplit nwconf1 nwconf2)\n        (Left nwconf1, Right nwconf2) -> Right (HSplit nwconf1 nwconf2)\n        (Right nwconf1, Left nwconf2) -> Right (HSplit nwconf1 nwconf2)\n        (Right _, Right _) -> error "such case cannot happen in splitWindow"\nsplitWindow cidold (cidnew, stype) (VSplit wconf1 wconf2) =\n  let r1 = splitWindow cidold (cidnew, stype) wconf1\n      r2 = splitWindow cidold (cidnew, stype) wconf2\n   in case (r1, r2) of\n        (Left nwconf1, Left nwconf2) -> Left (VSplit nwconf1 nwconf2)\n        (Left nwconf1, Right nwconf2) -> Right (VSplit nwconf1 nwconf2)\n        (Right nwconf1, Left nwconf2) -> Right (VSplit nwconf1 nwconf2)\n        (Right _, Right _) -> error "such case cannot happen in splitWindow"\n\nremoveWindow ::\n  -- | canvas id\n  CanvasId ->\n  WindowConfig ->\n  Either WindowConfig (Maybe WindowConfig)\nremoveWindow cid (Node cid\') =\n  if cid == cid\'\n    then Right Nothing\n    else Left (Node cid\')\nremoveWindow cid (HSplit wconf1 wconf2) =\n  let r1 = removeWindow cid wconf1\n      r2 = removeWindow cid wconf2\n   in case (r1, r2) of\n        (Left nwconf1, Left nwconf2) -> Left (HSplit nwconf1 nwconf2)\n        (Left nwconf1, Right mnwconf2) ->\n          case mnwconf2 of\n            Just nwconf2 -> Right (Just (HSplit nwconf1 nwconf2))\n            Nothing -> Right (Just nwconf1)\n        (Right mnwconf1, Left nwconf2) ->\n          case mnwconf1 of\n            Just nwconf1 -> Right (Just (HSplit nwconf1 nwconf2))\n            Nothing -> Right (Just nwconf2)\n        (Right _, Right _) -> error "such case cannot happen in removeWindow"\nremoveWindow cid (VSplit wconf1 wconf2) =\n  let r1 = removeWindow cid wconf1\n      r2 = removeWindow cid wconf2\n   in case (r1, r2) of\n        (Left nwconf1, Left nwconf2) -> Left (VSplit nwconf1 nwconf2)\n        (Left nwconf1, Right mnwconf2) ->\n          case mnwconf2 of\n            Just nwconf2 -> Right (Just (VSplit nwconf1 nwconf2))\n            Nothing -> Right (Just nwconf1)\n        (Right mnwconf1, Left nwconf2) ->\n          case mnwconf1 of\n            Just nwconf1 -> Right (Just (VSplit nwconf1 nwconf2))\n            Nothing -> Right (Just nwconf2)\n        (Right _, Right _) -> error "such case cannot happen in removeWindow"\n'