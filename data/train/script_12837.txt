b'module Rest.Gen.Base.JSON.Pretty (pp_value) where\n\nimport Prelude hiding ((<>))\n\nimport Control.Arrow (first)\nimport Data.Aeson.Types\nimport Data.Char\nimport Data.HashMap.Strict (HashMap)\nimport Data.Scientific (floatingOrInteger)\nimport Data.Text (Text, unpack)\nimport Numeric\nimport Text.PrettyPrint.HughesPJ hiding (first)\nimport qualified Data.HashMap.Strict as H\nimport qualified Data.Vector         as V\n\n{-# ANN module "Hlint: ignore Use camelCase" #-}\n\npp_value         :: Value -> Doc\npp_value v        = case v of\n    Null      -> pp_null\n    Bool x    -> pp_boolean x\n    Number x  -> pp_number . either Right Left . floatingOrInteger $ x\n    String x  -> pp_js_string (unpack x)\n    Array vs  -> pp_array $ V.toList vs\n    Object xs -> pp_js_object xs\n\npp_null          :: Doc\npp_null           = text "null"\n\npp_boolean       :: Bool -> Doc\npp_boolean True   = text "true"\npp_boolean False  = text "false"\n\npp_number        :: Either Integer Double -> Doc\npp_number        = either integer double\n\npp_array         :: [Value] -> Doc\npp_array xs       = vlist "[" "]" $ map pp_value xs\n\nvlist :: String -> String -> [Doc] -> Doc\nvlist o c [] = text o <+> text c\nvlist o c ls = vcat $ text o <+> head ls : map (comma <+>) (tail ls) ++ [text c]\n\npp_string        :: String -> Doc\npp_string x       = doubleQuotes $ hcat $ map pp_char x\n  where pp_char \'\\\\\'            = text "\\\\\\\\"\n        pp_char \'"\'             = text "\\\\\\""\n        pp_char c | isControl c || fromEnum c >= 0x7f = uni_esc c\n        pp_char c               = char c\n\n        uni_esc c = text "\\\\u" <> text (pad 4 (showHex (fromEnum c) ""))\n\n        pad n cs  | len < n   = replicate (n-len) \'0\' ++ cs\n                  | otherwise = cs\n          where len = length cs\n\npp_object        :: [(String,Value)] -> Doc\npp_object xs      = vlist "{" "}" $ map pp_field xs\n  where pp_field (k,v) = pp_string k <> colon <+> pp_value v\n\npp_js_string     :: String -> Doc\npp_js_string      = pp_string\n\npp_js_object     :: HashMap Text Value -> Doc\npp_js_object      = pp_object . map (first unpack) . H.toList\n'