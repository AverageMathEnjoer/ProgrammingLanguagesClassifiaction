b'package com.naman14.timber.adapters;\n\nimport android.app.Activity;\nimport android.graphics.Bitmap;\nimport androidx.palette.graphics.Palette;\nimport androidx.recyclerview.widget.RecyclerView;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.ImageView;\nimport android.widget.TextView;\n\nimport com.afollestad.appthemeengine.Config;\nimport com.naman14.timber.R;\nimport com.naman14.timber.dataloaders.LastAddedLoader;\nimport com.naman14.timber.dataloaders.PlaylistSongLoader;\nimport com.naman14.timber.dataloaders.SongLoader;\nimport com.naman14.timber.dataloaders.TopTracksLoader;\nimport com.naman14.timber.models.Playlist;\nimport com.naman14.timber.models.Song;\nimport com.naman14.timber.utils.Constants;\nimport com.naman14.timber.utils.Helpers;\nimport com.naman14.timber.utils.NavigationUtils;\nimport com.naman14.timber.utils.PreferencesUtility;\nimport com.naman14.timber.utils.TimberUtils;\nimport com.nostra13.universalimageloader.core.DisplayImageOptions;\nimport com.nostra13.universalimageloader.core.ImageLoader;\nimport com.nostra13.universalimageloader.core.assist.FailReason;\nimport com.nostra13.universalimageloader.core.listener.SimpleImageLoadingListener;\n\nimport java.util.List;\nimport java.util.Random;\n\n/**\n * Created by naman on 31/10/16.\n */\npublic class PlaylistAdapter extends RecyclerView.Adapter<PlaylistAdapter.ItemHolder> {\n\n    private List<Playlist> arraylist;\n    private Activity mContext;\n    private boolean isGrid;\n    private boolean showAuto;\n    private int songCountInt;\n    private long totalRuntime;\n    private long firstAlbumID = -1;\n    private int foregroundColor;\n    int[] foregroundColors = {R.color.pink_transparent, R.color.green_transparent, R.color.blue_transparent, R.color.red_transparent, R.color.purple_transparent};\n\n    public PlaylistAdapter(Activity context, List<Playlist> arraylist) {\n        this.arraylist = arraylist;\n        this.mContext = context;\n        this.isGrid = PreferencesUtility.getInstance(mContext).getPlaylistView() == Constants.PLAYLIST_VIEW_GRID;\n        this.showAuto = PreferencesUtility.getInstance(mContext).showAutoPlaylist();\n        Random random = new Random();\n        int rndInt = random.nextInt(foregroundColors.length);\n        foregroundColor = foregroundColors[rndInt];\n\n    }\n\n    @Override\n    public ItemHolder onCreateViewHolder(ViewGroup viewGroup, int i) {\n        if (isGrid) {\n            View v = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.item_album_grid, null);\n            ItemHolder ml = new ItemHolder(v);\n            return ml;\n        } else {\n            View v = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.item_album_list, null);\n            ItemHolder ml = new ItemHolder(v);\n            return ml;\n        }\n    }\n\n    @Override\n    public void onBindViewHolder(final ItemHolder itemHolder, int i) {\n        final Playlist localItem = arraylist.get(i);\n\n        itemHolder.title.setText(localItem.name);\n\n        String s = getAlbumArtUri(i, localItem.id);\n        itemHolder.albumArt.setTag(firstAlbumID);\n        ImageLoader.getInstance().displayImage(s, itemHolder.albumArt,\n                new DisplayImageOptions.Builder().cacheInMemory(true)\n                        .showImageOnFail(R.drawable.ic_empty_music2)\n                        .resetViewBeforeLoading(true)\n                        .build(), new SimpleImageLoadingListener() {\n                    @Override\n                    public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {\n                        if (isGrid) {\n                            new Palette.Builder(loadedImage).generate(new Palette.PaletteAsyncListener() {\n                                @Override\n                                public void onGenerated(Palette palette) {\n                                    Palette.Swatch swatch = palette.getVibrantSwatch();\n                                    if (swatch != null) {\n                                        int color = swatch.getRgb();\n                                        itemHolder.footer.setBackgroundColor(color);\n                                        int textColor = TimberUtils.getBlackWhiteColor(swatch.getTitleTextColor());\n                                        itemHolder.title.setTextColor(textColor);\n                                        itemHolder.artist.setTextColor(textColor);\n                                    } else {\n                                        Palette.Swatch mutedSwatch = palette.getMutedSwatch();\n                                        if (mutedSwatch != null) {\n                                            int color = mutedSwatch.getRgb();\n                                            itemHolder.footer.setBackgroundColor(color);\n                                            int textColor = TimberUtils.getBlackWhiteColor(mutedSwatch.getTitleTextColor());\n                                            itemHolder.title.setTextColor(textColor);\n                                            itemHolder.artist.setTextColor(textColor);\n                                        }\n                                    }\n\n\n                                }\n                            });\n                        }\n\n                    }\n\n                    @Override\n                    public void onLoadingFailed(String imageUri, View view, FailReason failReason) {\n                        if (isGrid) {\n                            itemHolder.footer.setBackgroundColor(0);\n                            if (mContext != null) {\n                                int textColorPrimary = Config.textColorPrimary(mContext, Helpers.getATEKey(mContext));\n                                itemHolder.title.setTextColor(textColorPrimary);\n                                itemHolder.artist.setTextColor(textColorPrimary);\n                            }\n                        }\n                    }\n                });\n        itemHolder.artist.setText(" " + String.valueOf(songCountInt) + " " + mContext.getString(R.string.songs) + " - " + TimberUtils.makeShortTimeString(mContext,totalRuntime));\n\n        if (TimberUtils.isLollipop())\n            itemHolder.albumArt.setTransitionName("transition_album_art" + i);\n\n    }\n\n    private String getAlbumArtUri(int position, long id) {\n        if (mContext != null) {\n            firstAlbumID = -1;\n            if (showAuto) {\n                switch (position) {\n                    case 0:\n                        List<Song> lastAddedSongs = LastAddedLoader.getLastAddedSongs(mContext);\n                        songCountInt = lastAddedSongs.size();\n                        totalRuntime = 0;\n                        for(Song song : lastAddedSongs){\n                                totalRuntime += song.duration / 1000; //for some reason default playlists have songs with durations 1000x larger than they should be\n                        }\n\n                        if (songCountInt != 0) {\n                            firstAlbumID = lastAddedSongs.get(0).albumId;\n                            return TimberUtils.getAlbumArtUri(firstAlbumID).toString();\n                        } else return "nosongs";\n                    case 1:\n                        TopTracksLoader recentloader = new TopTracksLoader(mContext, TopTracksLoader.QueryType.RecentSongs);\n                        List<Song> recentsongs = SongLoader.getSongsForCursor(TopTracksLoader.getCursor());\n                        songCountInt = recentsongs.size();\n                        totalRuntime = 0;\n                        for(Song song : recentsongs){\n                            totalRuntime += song.duration / 1000; //for some reason default playlists have songs with durations 1000x larger than they should be\n                        }\n\n                        if (songCountInt != 0) {\n                            firstAlbumID = recentsongs.get(0).albumId;\n                            return TimberUtils.getAlbumArtUri(firstAlbumID).toString();\n                        } else return "nosongs";\n                    case 2:\n                        TopTracksLoader topTracksLoader = new TopTracksLoader(mContext, TopTracksLoader.QueryType.TopTracks);\n                        List<Song> topsongs = SongLoader.getSongsForCursor(TopTracksLoader.getCursor());\n                        songCountInt = topsongs.size();\n                        totalRuntime = 0;\n                        for(Song song : topsongs){\n                            totalRuntime += song.duration / 1000; //for some reason default playlists have songs with durations 1000x larger than they should be\n                        }\n\n                        if (songCountInt != 0) {\n                            firstAlbumID = topsongs.get(0).albumId;\n                            return TimberUtils.getAlbumArtUri(firstAlbumID).toString();\n                        } else return "nosongs";\n                    default:\n                        List<Song> playlistsongs = PlaylistSongLoader.getSongsInPlaylist(mContext, id);\n                        songCountInt = playlistsongs.size();\n                        totalRuntime = 0;\n                        for(Song song : playlistsongs){\n                            totalRuntime += song.duration;\n                        }\n\n                        if (songCountInt != 0) {\n                            firstAlbumID = playlistsongs.get(0).albumId;\n                            return TimberUtils.getAlbumArtUri(firstAlbumID).toString();\n                        } else return "nosongs";\n\n                }\n            } else {\n                List<Song> playlistsongs = PlaylistSongLoader.getSongsInPlaylist(mContext, id);\n                songCountInt = playlistsongs.size();\n                totalRuntime = 0;\n                for(Song song : playlistsongs){\n                    totalRuntime += song.duration;\n                }\n\n                if (songCountInt != 0) {\n                    firstAlbumID = playlistsongs.get(0).albumId;\n                    return TimberUtils.getAlbumArtUri(firstAlbumID).toString();\n                } else return "nosongs";\n            }\n        }\n        return null;\n    }\n\n    @Override\n    public int getItemCount() {\n        return (null != arraylist ? arraylist.size() : 0);\n    }\n\n    public void updateDataSet(List<Playlist> arraylist) {\n        this.arraylist.clear();\n        this.arraylist.addAll(arraylist);\n        notifyDataSetChanged();\n    }\n\n    public class ItemHolder extends RecyclerView.ViewHolder implements View.OnClickListener {\n        protected TextView title, artist;\n        protected ImageView albumArt;\n        protected View footer;\n\n        public ItemHolder(View view) {\n            super(view);\n            this.title = (TextView) view.findViewById(R.id.album_title);\n            this.artist = (TextView) view.findViewById(R.id.album_artist);\n            this.albumArt = (ImageView) view.findViewById(R.id.album_art);\n            this.footer = view.findViewById(R.id.footer);\n            view.setOnClickListener(this);\n        }\n\n        @Override\n        public void onClick(View v) {\n            NavigationUtils.navigateToPlaylistDetail(mContext, getPlaylistType(getAdapterPosition()), (long) albumArt.getTag(), String.valueOf(title.getText()), foregroundColor, arraylist.get(getAdapterPosition()).id, null);\n\n        }\n\n    }\n\n    private String getPlaylistType(int position) {\n        if (showAuto) {\n            switch (position) {\n                case 0:\n                    return Constants.NAVIGATE_PLAYLIST_LASTADDED;\n                case 1:\n                    return Constants.NAVIGATE_PLAYLIST_RECENT;\n                case 2:\n                    return Constants.NAVIGATE_PLAYLIST_TOPTRACKS;\n                default:\n                    return Constants.NAVIGATE_PLAYLIST_USERCREATED;\n            }\n        } else return Constants.NAVIGATE_PLAYLIST_USERCREATED;\n    }\n\n\n}\n\n\n\n\n'