b'package effectivejava.chapter4.item18;\nimport java.util.*;\n\n// Wrapper class - uses composition in place of inheritance  (Page 90)\npublic class InstrumentedSet<E> extends ForwardingSet<E> {\n    private int addCount = 0;\n\n    public InstrumentedSet(Set<E> s) {\n        super(s);\n    }\n\n    @Override public boolean add(E e) {\n        addCount++;\n        return super.add(e);\n    }\n    @Override public boolean addAll(Collection<? extends E> c) {\n        addCount += c.size();\n        return super.addAll(c);\n    }\n    public int getAddCount() {\n        return addCount;\n    }\n\n    public static void main(String[] args) {\n        InstrumentedSet<String> s = new InstrumentedSet<>(new HashSet<>());\n        s.addAll(List.of("Snap", "Crackle", "Pop"));\n        System.out.println(s.getAddCount());\n    }\n}\n'