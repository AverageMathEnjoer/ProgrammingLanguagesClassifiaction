b'allcp xs = fst4 (until (done n) (step xs) ([n], 0, 0, 1))\r\n  where \r\n    n = length xs\r\n\r\ndone :: Eq a => a -> (t, t1, t2, a) -> Bool\r\ndone n (as, i, p, k) = k == n\r\n\r\nstep :: Eq a => [a] -> ([Int], Int, Int, Int) -> ([Int], Int, Int, Int)\r\nstep xs (as, i, p, k)\r\n    | k >= i + p    = (snoc as a, k, a, k + 1)\r\n    | q /= r        = (snoc as (min q r ), i, p, k + 1)\r\n    | q == r        = (snoc as b, k, b, k + 1)\r\n  where \r\n    q = as !! (k - i)\r\n    r = p - (k - i)\r\n    a = llcp xs (drop k xs)\r\n    b = q + llcp (drop q xs) (drop (q + k) xs)\r\n\r\nfst4 :: (a, b, c, d) -> a\r\nfst4 (a, b, c, d) = a\r\n\r\nsnoc :: [a] -> a -> [a]\r\nsnoc xs x = xs ++ [x]\r\n\r\nllcp :: Eq a => [a] -> [a] -> Int\r\nllcp xs [] = 0\r\nllcp [] ys = 0\r\nllcp (x:xs) (y:ys) = if x == y then 1 + llcp xs ys else 0\r\n'