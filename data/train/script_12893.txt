b'package effectivejava.chapter3.item11;\nimport java.util.*;\n\n// Shows the need for overriding hashcode when you override equals (Pages 50-53 )\npublic final class PhoneNumber {\n    private final short areaCode, prefix, lineNum;\n\n    public PhoneNumber(int areaCode, int prefix, int lineNum) {\n        this.areaCode = rangeCheck(areaCode, 999, "area code");\n        this.prefix   = rangeCheck(prefix,   999, "prefix");\n        this.lineNum  = rangeCheck(lineNum, 9999, "line num");\n    }\n\n    private static short rangeCheck(int val, int max, String arg) {\n        if (val < 0 || val > max)\n            throw new IllegalArgumentException(arg + ": " + val);\n        return (short) val;\n    }\n\n    @Override public boolean equals(Object o) {\n        if (o == this)\n            return true;\n        if (!(o instanceof PhoneNumber))\n            return false;\n        PhoneNumber pn = (PhoneNumber)o;\n        return pn.lineNum == lineNum && pn.prefix == prefix\n                && pn.areaCode == areaCode;\n    }\n\n\n    // Broken with no hashCode; works with any of the three below\n\n//    // Typical hashCode method (Page 52)\n//    @Override public int hashCode() {\n//        int result = Short.hashCode(areaCode);\n//        result = 31 * result + Short.hashCode(prefix);\n//        result = 31 * result + Short.hashCode(lineNum);\n//        return result;\n//    }\n\n//    // One-line hashCode method - mediocre performance  (page 53)\n//    @Override public int hashCode() {\n//        return Objects.hash(lineNum, prefix, areaCode);\n//    }\n\n//    // hashCode method with lazily initialized cached hash code  (page 53)\n//    private int hashCode; // Automatically initialized to 0\n//\n//    @Override public int hashCode() {\n//        int result = hashCode;\n//        if (result == 0) {\n//            result = Short.hashCode(areaCode);\n//            result = 31 * result + Short.hashCode(prefix);\n//            result = 31 * result + Short.hashCode(lineNum);\n//            hashCode = result;\n//        }\n//        return result;\n//    }\n\n    public static void main(String[] args) {\n        Map<PhoneNumber, String> m = new HashMap<>();\n        m.put(new PhoneNumber(707, 867, 5309), "Jenny");\n        System.out.println(m.get(new PhoneNumber(707, 867, 5309)));\n    }\n}\n'