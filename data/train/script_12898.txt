b'package effectivejava.chapter2.item2.hierarchicalbuilder;\nimport java.util.*;\n\n// Builder pattern for class hierarchies (Page 14)\n\n// Note that the underlying "simulated self-type" idiom  allows for arbitrary fluid hierarchies, not just builders\n\npublic abstract class Pizza {\n    public enum Topping { HAM, MUSHROOM, ONION, PEPPER, SAUSAGE }\n    final Set<Topping> toppings;\n\n    abstract static class Builder<T extends Builder<T>> {\n        EnumSet<Topping> toppings = EnumSet.noneOf(Topping.class);\n        public T addTopping(Topping topping) {\n            toppings.add(Objects.requireNonNull(topping));\n            return self();\n        }\n\n        abstract Pizza build();\n\n        // Subclasses must override this method to return "this"\n        protected abstract T self();\n    }\n    \n    Pizza(Builder<?> builder) {\n        toppings = builder.toppings.clone(); // See Item 50\n    }\n}\n'