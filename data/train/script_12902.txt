b'package id.zelory.compressor\n\nimport android.content.Context\nimport id.zelory.compressor.constraint.Compression\nimport id.zelory.compressor.constraint.default\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext\nimport java.io.File\nimport kotlin.coroutines.CoroutineContext\n\n/**\n * Created on : January 22, 2020\n * Author     : zetbaitsu\n * Name       : Zetra\n * GitHub     : https://github.com/zetbaitsu\n */\nobject Compressor {\n    suspend fun compress(\n            context: Context,\n            imageFile: File,\n            coroutineContext: CoroutineContext = Dispatchers.IO,\n            compressionPatch: Compression.() -> Unit = { default() }\n    ) = withContext(coroutineContext) {\n        val compression = Compression().apply(compressionPatch)\n        var result = copyToCache(context, imageFile)\n        compression.constraints.forEach { constraint ->\n            while (constraint.isSatisfied(result).not()) {\n                result = constraint.satisfy(result)\n            }\n        }\n        return@withContext result\n    }\n}'