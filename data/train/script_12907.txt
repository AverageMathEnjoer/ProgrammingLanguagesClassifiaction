b'package com.naman14.timber.nowplaying;\n\nimport android.graphics.Color;\nimport android.graphics.PorterDuff;\nimport android.graphics.PorterDuffColorFilter;\nimport android.os.Bundle;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.SeekBar;\nimport android.widget.TextView;\n\nimport com.naman14.timber.MusicPlayer;\nimport com.naman14.timber.MusicService;\nimport com.naman14.timber.R;\nimport com.naman14.timber.dataloaders.SongLoader;\nimport com.naman14.timber.models.Song;\nimport com.naman14.timber.utils.TimberUtils;\nimport com.naman14.timber.widgets.CircleImageView;\n\nimport net.steamcrafted.materialiconlib.MaterialDrawableBuilder;\n\n/**\n * Created by naman on 22/02/17.\n */\n\npublic class Timber6 extends BaseNowplayingFragment {\n\n    TextView nextSong;\n    CircleImageView nextArt;\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        View rootView = inflater.inflate(\n                R.layout.fragment_timber6, container, false);\n\n        setMusicStateListener();\n        setSongDetails(rootView);\n\n        initGestures(rootView.findViewById(R.id.album_art));\n\n        ((SeekBar) rootView.findViewById(R.id.song_progress)).getProgressDrawable().setColorFilter(new PorterDuffColorFilter(Color.WHITE, PorterDuff.Mode.MULTIPLY));\n        ((SeekBar) rootView.findViewById(R.id.song_progress)).getThumb().setColorFilter(new PorterDuffColorFilter(Color.WHITE, PorterDuff.Mode.SRC_ATOP));\n\n        nextSong = (TextView) rootView.findViewById(R.id.title_next);\n        nextArt = (CircleImageView) rootView.findViewById(R.id.album_art_next);\n\n        rootView.findViewById(R.id.nextView).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                MusicPlayer.next();\n            }\n        });\n\n        return rootView;\n    }\n\n    @Override\n    public void updateShuffleState() {\n        if (shuffle != null && getActivity() != null) {\n            MaterialDrawableBuilder builder = MaterialDrawableBuilder.with(getActivity())\n                    .setIcon(MaterialDrawableBuilder.IconValue.SHUFFLE)\n                    .setSizeDp(30);\n\n            if (MusicPlayer.getShuffleMode() == 0) {\n                builder.setColor(Color.WHITE);\n            } else builder.setColor(accentColor);\n\n            shuffle.setImageDrawable(builder.build());\n            shuffle.setOnClickListener(new View.OnClickListener() {\n                @Override\n                public void onClick(View view) {\n                    MusicPlayer.cycleShuffle();\n                    updateShuffleState();\n                    updateRepeatState();\n                }\n            });\n        }\n    }\n\n    @Override\n    public void updateRepeatState() {\n        if (repeat != null && getActivity() != null) {\n            MaterialDrawableBuilder builder = MaterialDrawableBuilder.with(getActivity())\n                    .setSizeDp(30);\n\n            if (MusicPlayer.getRepeatMode() == 0) {\n                builder.setColor(Color.WHITE);\n            } else builder.setColor(accentColor);\n\n            if (MusicPlayer.getRepeatMode() == MusicService.REPEAT_NONE) {\n                builder.setIcon(MaterialDrawableBuilder.IconValue.REPEAT);\n                builder.setColor(Color.WHITE);\n            } else if (MusicPlayer.getRepeatMode() == MusicService.REPEAT_CURRENT) {\n                builder.setIcon(MaterialDrawableBuilder.IconValue.REPEAT_ONCE);\n                builder.setColor(accentColor);\n            } else if (MusicPlayer.getRepeatMode() == MusicService.REPEAT_ALL) {\n                builder.setColor(accentColor);\n                builder.setIcon(MaterialDrawableBuilder.IconValue.REPEAT);\n            }\n\n            repeat.setImageDrawable(builder.build());\n            repeat.setOnClickListener(new View.OnClickListener() {\n                @Override\n                public void onClick(View view) {\n                    MusicPlayer.cycleRepeat();\n                    updateRepeatState();\n                    updateShuffleState();\n                }\n            });\n        }\n    }\n\n    @Override\n    public void onMetaChanged() {\n        super.onMetaChanged();\n        if (getActivity() != null) {\n            long nextId = MusicPlayer.getNextAudioId();\n            Song next = SongLoader.getSongForID(getActivity(), nextId);\n            nextSong.setText(next.title);\n            nextArt.setImageURI(TimberUtils.getAlbumArtUri(next.albumId));\n        }\n    }\n}\n'