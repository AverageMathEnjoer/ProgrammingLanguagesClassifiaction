b'module Network.OAuth.OAuth2.TokenRequestSpec where\n\nimport Data.Aeson qualified as Aeson\nimport Network.OAuth.OAuth2.TokenRequest\nimport Test.Hspec\n\nspec :: Spec\nspec =\n  describe "parseJSON TokenRequestErrorCode" $ do\n    it "invalid_request" $ do\n      Aeson.eitherDecode "\\"invalid_request\\"" `shouldBe` Right InvalidRequest\n    it "invalid_client" $ do\n      Aeson.eitherDecode "\\"invalid_client\\"" `shouldBe` Right InvalidClient\n    it "invalid_grant" $ do\n      Aeson.eitherDecode "\\"invalid_grant\\"" `shouldBe` Right InvalidGrant\n    it "unauthorized_client" $ do\n      Aeson.eitherDecode "\\"unauthorized_client\\"" `shouldBe` Right UnauthorizedClient\n    it "unsupported_grant_type" $ do\n      Aeson.eitherDecode "\\"unsupported_grant_type\\"" `shouldBe` Right UnsupportedGrantType\n    it "invalid_scope" $ do\n      Aeson.eitherDecode "\\"invalid_scope\\"" `shouldBe` Right InvalidScope\n    it "foo_code" $ do\n      Aeson.eitherDecode "\\"foo_code\\"" `shouldBe` Right (UnknownErrorCode "foo_code")\n'