b'/**\n * Copyright (C) 2020 Fernando Cejas Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.fernandocejas.sample.core.di\n\nimport com.fernandocejas.sample.BuildConfig\nimport com.fernandocejas.sample.features.movies.MoviesRepository\nimport dagger.Module\nimport dagger.Provides\nimport dagger.hilt.InstallIn\nimport dagger.hilt.components.SingletonComponent\nimport okhttp3.OkHttpClient\nimport okhttp3.logging.HttpLoggingInterceptor\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\nimport javax.inject.Singleton\n\n@Module\n@InstallIn(SingletonComponent::class)\nclass ApplicationModule {\n\n    @Provides\n    @Singleton\n    fun provideRetrofit(): Retrofit {\n        return Retrofit.Builder()\n            .baseUrl("https://raw.githubusercontent.com/android10/Sample-Data/master/Android-CleanArchitecture-Kotlin/")\n            .client(createClient())\n            .addConverterFactory(GsonConverterFactory.create())\n            .build()\n    }\n\n    private fun createClient(): OkHttpClient {\n        val okHttpClientBuilder: OkHttpClient.Builder = OkHttpClient.Builder()\n        if (BuildConfig.DEBUG) {\n            val loggingInterceptor =\n                HttpLoggingInterceptor().setLevel(HttpLoggingInterceptor.Level.BASIC)\n            okHttpClientBuilder.addInterceptor(loggingInterceptor)\n        }\n        return okHttpClientBuilder.build()\n    }\n\n    @Provides\n    @Singleton\n    fun provideMoviesRepository(dataSource: MoviesRepository.Network): MoviesRepository = dataSource\n}\n'