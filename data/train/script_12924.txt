b"module Hoodle.Web.Select where\n\nimport Control.Monad.IO.Class (MonadIO (liftIO))\nimport Control.Monad.State (MonadState (get), modify')\nimport Data.Foldable (toList, traverse_)\nimport Data.Sequence (Seq, ViewR (..), singleton, viewr, (|>))\nimport qualified Data.Sequence as Seq (fromList, length)\nimport Hoodle.Web.Default (nextevent)\nimport qualified Hoodle.Web.ForeignJS as J\nimport Hoodle.Web.Type.Coroutine (MainCoroutine)\nimport Hoodle.Web.Type.Event (UserEvent (..))\nimport Hoodle.Web.Type.State\n  ( docstateData,\n    hdlstateDocState,\n    hdlstateOverlayCanvas,\n    hdlstateOverlayOffCanvas,\n    hdlstateOverlayUpdated,\n    hdlstateSVGBox,\n  )\nimport Hoodle.Web.Util\n  ( enclosedStrokes,\n    stringifyStrokeId,\n    transformPathFromCanvasToSVG,\n  )\nimport Lens.Micro ((.~), (^.))\n\nlassoUpdatePeriod :: Int\nlassoUpdatePeriod = 10\n\nlassoMode :: Seq (Double, Double) -> Seq (Double, Double) -> MainCoroutine ()\nlassoMode lasso cxys = do\n  ev <- nextevent\n  case ev of\n    PointerMove cxy@(cx, cy) -> do\n      s <- get\n      let svg = s ^. hdlstateSVGBox\n          cvs = s ^. hdlstateOverlayCanvas\n          offcvs = s ^. hdlstateOverlayOffCanvas\n          strks = s ^. hdlstateDocState . docstateData\n      case viewr cxys of\n        _ :> (cx0, cy0) ->\n          if Seq.length cxys >= lassoUpdatePeriod\n            then do\n              liftIO $ J.js_overlay_point cvs offcvs cx0 cy0 cx cy\n              modify' (hdlstateOverlayUpdated .~ True)\n              dLasso <- liftIO $ transformPathFromCanvasToSVG svg (toList cxys)\n              let lasso' = lasso <> Seq.fromList dLasso\n                  hstrks = enclosedStrokes lasso' strks\n              liftIO $\n                traverse_ (J.strokeChangeColor svg . stringifyStrokeId) hstrks\n              lassoMode lasso' (singleton cxy)\n            else lassoMode lasso (cxys |> cxy)\n        _ -> pure () -- this should not happen.\n    PointerUp _ -> pure ()\n    _ -> lassoMode lasso cxys\n"