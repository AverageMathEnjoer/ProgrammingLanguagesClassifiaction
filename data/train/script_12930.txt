b'package id.zelory.compressor.constraint\n\nimport android.graphics.Bitmap\nimport com.natpryce.hamkrest.assertion.assertThat\nimport com.natpryce.hamkrest.equalTo\nimport com.natpryce.hamkrest.isA\nimport id.zelory.compressor.decodeSampledBitmapFromFile\nimport id.zelory.compressor.determineImageRotation\nimport id.zelory.compressor.overWrite\nimport io.mockk.every\nimport io.mockk.mockk\nimport io.mockk.mockkStatic\nimport io.mockk.unmockkAll\nimport io.mockk.verify\nimport org.junit.After\nimport org.junit.Test\nimport java.io.File\n\n/**\n * Created on : January 25, 2020\n * Author     : zetbaitsu\n * Name       : Zetra\n * GitHub     : https://github.com/zetbaitsu\n */\nclass DefaultConstraintTest {\n\n    @After\n    fun teardown() {\n        unmockkAll()\n    }\n\n    @Test\n    fun `when satisfy function not yet invoked, constraint should not satisfied`() {\n        // Given\n        val constraint = DefaultConstraint()\n\n        // When + Then\n        assertThat(constraint.isSatisfied(mockk()), equalTo(false))\n    }\n\n    @Test\n    fun `when satisfy function is invoked, constraint should satisfied`() {\n        // Given\n        mockkStatic("id.zelory.compressor.UtilKt")\n        every { decodeSampledBitmapFromFile(any(), any(), any()) } returns mockk(relaxed = true)\n        every { determineImageRotation(any(), any()) } returns mockk(relaxed = true)\n        every { overWrite(any(), any(), any(), any()) } returns mockk()\n\n        val constraint = DefaultConstraint()\n\n        // When\n        constraint.satisfy(mockk(relaxed = true))\n\n        // Then\n        assertThat(constraint.isSatisfied(mockk()), equalTo(true))\n    }\n\n    @Test\n    fun `when trying satisfy constraint, it should subsampling image and overwrite file`() {\n        // Given\n        mockkStatic("id.zelory.compressor.UtilKt")\n\n        val sampledBitmap = mockk<Bitmap>(relaxed = true)\n        every { decodeSampledBitmapFromFile(any(), any(), any()) } returns sampledBitmap\n\n        val rotatedBitmap = mockk<Bitmap>(relaxed = true)\n        every { determineImageRotation(any(), any()) } returns rotatedBitmap\n\n        every { overWrite(any(), any(), any(), any()) } returns mockk()\n\n        val imageFile = mockk<File>(relaxed = true)\n        val (width, height) = (1280 to 720)\n        val format = Bitmap.CompressFormat.JPEG\n        val quality = 80\n        val constraint = DefaultConstraint(width, height, format, quality)\n\n        // When\n        constraint.satisfy(imageFile)\n\n        // Then\n        verify {\n            decodeSampledBitmapFromFile(imageFile, width, height)\n            determineImageRotation(imageFile, sampledBitmap)\n            overWrite(imageFile, rotatedBitmap, format, quality)\n        }\n    }\n\n    @Test\n    fun `verify extension`() {\n        // Given\n        val compression = Compression()\n\n        // When\n        compression.default()\n\n        // Then\n        assertThat(compression.constraints.first(), isA<DefaultConstraint>())\n    }\n}'