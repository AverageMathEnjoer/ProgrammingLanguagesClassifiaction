b'\xef\xbb\xbfusing System;\r\nusing System.IO;\r\nusing System.Net;\r\nusing System.Text;\r\nusing System.Threading;\r\n\r\nnamespace build_qqzeng_dat_65536\r\n{\r\n\r\n    public class IPSearch3Big\r\n    {\r\n        private static readonly Lazy<IPSearch3Big> lazy = new Lazy<IPSearch3Big>(() => new IPSearch3Big());\r\n        public static IPSearch3Big Instance { get { return lazy.Value; } }\r\n        private IPSearch3Big()\r\n        {\r\n            LoadDat();\r\n        }\r\n\r\n        private string datPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, @"qqzeng-ip-big-3.0.dat");\r\n\r\n        private long[,] prefmap = new long[65536, 2];\r\n        private uint[] endArr;\r\n        private string[] addrArr;\r\n        private byte[] data;\r\n\r\n\r\n\r\n        /// <summary>\r\n        /// \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe4\xba\x8c\xe8\xbf\x9b\xe5\x88\xb6\xe6\x95\xb0\xe6\x8d\xae\r\n        /// </summary>\r\n\r\n        private void LoadDat()\r\n        {\r\n            data = File.ReadAllBytes(datPath);\r\n\r\n            for (int k = 0; k < 65536; k++)\r\n            {\r\n                int i = k * 8 + 4;\r\n                long startIndex = ReadLittleEndian32(data[i], data[i + 1], data[i + 2], data[i + 3]);\r\n                long endIndex = ReadLittleEndian32(data[i + 4], data[i + 5], data[i + 6], data[i + 7]);\r\n                prefmap[k, 0] = startIndex; prefmap[k, 1] = endIndex;\r\n            }\r\n\r\n            uint RecordSize = ReadLittleEndian32(data[0], data[1], data[2], data[3]);\r\n            endArr = new uint[RecordSize];\r\n            addrArr = new string[RecordSize];\r\n            for (int i = 0; i < RecordSize; i++)\r\n            {\r\n                long p = 4 + 65536 * 8 + (i * 9);\r\n                uint endipnum = ReadLittleEndian32(data[p], data[1 + p], data[2 + p], data[3 + p]);\r\n\r\n                uint offset = ReadLittleEndian32(data[4 + p], data[5 + p], data[6 + p], data[7 + p]);\r\n                int length = data[8 + p];\r\n\r\n                endArr[i] = endipnum;\r\n                addrArr[i] = Encoding.UTF8.GetString(data, (int)offset, length);\r\n            }\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n        /// <summary>\r\n        /// ip\xe5\xbf\xab\xe9\x80\x9f\xe6\x9f\xa5\xe8\xaf\xa2\xe6\x96\xb9\xe6\xb3\x95\r\n        /// </summary>\r\n        /// <param name="ip">1.1.1.1</param>\r\n        /// <returns></returns>\r\n        public string Find(string ip)\r\n        {\r\n            byte[] b = IPAddress.Parse(ip).GetAddressBytes();\r\n            int pref = b[0] * 256 + b[1];\r\n            long val = ReadBigEndian32(b[0], b[1], b[2], b[3]);\r\n            long low = prefmap[pref, 0], high = prefmap[pref, 1];\r\n            long cur = low == high ? low : BinarySearch(low, high, val);\r\n            return addrArr[cur];\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n        // \xe4\xba\x8c\xe5\x88\x86\xe9\x80\xbc\xe8\xbf\x91 O(logN)  \r\n        private long BinarySearch(long low, long high, long k)\r\n        {\r\n            long M = 0, mid = 0;\r\n            while (low <= high)\r\n            {\r\n                mid = (low + high) >> 1;\r\n                uint endipnum = endArr[mid];\r\n                if (endipnum >= k)\r\n                {\r\n                    M = mid;\r\n                    if (mid == 0)\r\n                    {\r\n                        break;   //\xe9\x98\xb2\xe6\xad\xa2\xe6\xba\xa2\xe5\x87\xba\r\n                    }\r\n                    high = mid - 1;\r\n                }\r\n                else\r\n                    low = mid + 1;\r\n            }\r\n            return M;\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n        private uint ReadBigEndian32(byte a, byte b, byte c, byte d)\r\n        {\r\n            return (uint)((a << 24) | (b << 16) | (c << 8) | d);\r\n        }\r\n\r\n\r\n        private uint ReadLittleEndian32(byte a, byte b, byte c, byte d)\r\n        {\r\n            return (uint)(a | (b << 8) | (c << 16) | (d << 24));\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    /*\r\n    \xef\xbc\x88\xe8\xb0\x83\xe7\x94\xa8\xe4\xbe\x8b\xe5\xad\x90\xef\xbc\x89\xef\xbc\x9a   \r\n    string result = IPSearch3Big.Instance.Find("1.2.3.4");\r\n   --> result="\xe4\xba\x9a\xe6\xb4\xb2|\xe4\xb8\xad\xe5\x9b\xbd|\xe9\xa6\x99\xe6\xb8\xaf|\xe4\xb9\x9d\xe9\xbe\x99|\xe6\xb2\xb9\xe5\xb0\x96\xe6\x97\xba|\xe6\x96\xb0\xe4\xb8\x96\xe7\x95\x8c\xe7\x94\xb5\xe8\xae\xaf|810200|Hong Kong|HK|114.17495|22.327115"\r\n    */\r\n}\r\n'