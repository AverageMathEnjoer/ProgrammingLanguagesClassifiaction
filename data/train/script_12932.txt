b'-- | Top-level module import for @beam-migrate@.\n--\n-- This is most often the only module you want to import, unless you\'re\n-- extending @beam-migrate@, implementing migrations support in a backend, or\n-- writing tooling. If you are doing any of these things, please see the\n-- Advanced features section below.\n--\n-- The key abstractions in @beam-migrate@ are the /checked database/ and the\n-- /migration/.\n--\n-- == Checked databases\n--\n-- A checked database is similar to the \'DatabaseSettings\' type from\n-- @beam-core@ except it comes with a set of /predicates/.\n-- Whereas a \'DatabaseSettings\' object consists of a set of\n-- database entities, a checked database (represented by the\n-- \'CheckedDatabaseSettings\' type) consists of a set of database entities along\n-- with a set of /predicates/ (represented by types implementing\n-- \'DatabasePredicate\'). The /predicates/ are facts about a given\n-- database schema. For example, a checked database with a table named\n-- "Customers", would have a \'TableExistsPredicate\' in its predicate set.\n--\n-- Predicates can be used to verify that a given beam schema is compatible with\n-- a backend database or to generate migrations from a schema satisfying one set\n-- of predicates to a schema satisfying another. Beam migrate provides a solver\n-- for figuring out the exact sequence of steps needed to accomplish this. Beam\n-- backends can provide additional predicates and solvers to implement\n-- backend-specific migrations. For example, the @beam-postgres@ backend\n-- provides predicates to assert that extensions have been loaded, and solvers\n-- for emitting proper @CREATE EXTENSION@ statements where appropriate.\n--\n-- Predicates may also be serialized to disk in JSON format, providing an easy\n-- means to detect significant changes in a beam schema.\n--\n-- As one final point, @beam-migrate@ can generate schemas in any beam-supported\n-- SQL DDL syntax. The @beam-migrate@ module provides a DDL syntax for Haskell\n-- in "Database.Beam.Haskell.Syntax". This allows @beam-migrate@ to translate\n-- predicate sets into the corresponding Haskell schema and the corresponding\n-- Haskell migration script. This reflection allows tools based off of\n-- @beam-migrate@ to support schema generation from an existing database.\n--\n-- For more information on checked databases, see the\n-- "Database.Beam.Migrate.Checks" module.\n--\n-- == Migrations\n--\n-- A migration is a value of type \'MigrationSteps a b\', where @a@ and @b@ are\n-- database types. Conceptually, a value of this type is a list of DDL commands\n-- which can be used to bring a database of type @a@ to a database of type @b@.\n-- For example, if @b@ is a database type containing all the tables as @a@, but\n-- with a new table added, a migration with type \'MigrationSteps a b\' may\n-- represent a SQL @CREATE TABLE@ statement. Migrations can sometimes be\n-- reversed to produce a value of type \'MigrationSteps b a\'. In our example, the\n-- corresponding reversed migration may be the appropriate @DROP TABLE@\n-- statement.\n--\n-- Migration steps can used to modify a database schema, generate a migration\n-- script in a given backend syntax, or generate an appropriate\n-- \'DatabaseSettings\' object for use with the rest of the beam ecosystem.\n--\n-- For more information in migrations see "Database.Beam.Migrate.Types"\n--\n-- == Syntax\n--\n-- For low-level access to the underlying SQL syntax builders, see\n-- "Database.Beam.Migrate.SQL.SQL92"\n--\n-- == Advanced features\n--\n-- If you are writing a new beam backend, you will need to construct a value of\n-- type \'BeamBackend\'. See that module for more information.\n--\n-- If you are writing tooling, you will likely need to consume \'BeamBackend\'.\n-- You will likely also be interested in the migration generation. See the\n-- documentation on \'heuristicSolver\'.\n\n\nmodule Database.Beam.Migrate\n ( module Database.Beam.Migrate.Actions\n , module Database.Beam.Migrate.Checks\n , module Database.Beam.Migrate.Generics\n , module Database.Beam.Migrate.SQL\n , module Database.Beam.Migrate.Types\n ) where\n\nimport Database.Beam.Migrate.Actions\nimport Database.Beam.Migrate.Checks\nimport Database.Beam.Migrate.Generics\nimport Database.Beam.Migrate.SQL\nimport Database.Beam.Migrate.Types\n'