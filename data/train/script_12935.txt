b'package org.sang.service;\n\nimport org.sang.bean.Role;\nimport org.sang.bean.User;\nimport org.sang.config.MyPasswordEncoder;\nimport org.sang.mapper.RolesMapper;\nimport org.sang.mapper.UserMapper;\nimport org.sang.utils.Util;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.util.DigestUtils;\n\nimport java.util.List;\n\n/**\n * Created by sang on 2017/12/17.\n */\n@Service\n@Transactional\npublic class UserService implements UserDetailsService {\n    @Autowired\n    UserMapper userMapper;\n    @Autowired\n    RolesMapper rolesMapper;\n    @Autowired\n    PasswordEncoder passwordEncoder;\n\n    @Override\n    public UserDetails loadUserByUsername(String s) throws UsernameNotFoundException {\n        User user = userMapper.loadUserByUsername(s);\n        if (user == null) {\n            //\xe9\x81\xbf\xe5\x85\x8d\xe8\xbf\x94\xe5\x9b\x9enull\xef\xbc\x8c\xe8\xbf\x99\xe9\x87\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe4\xb8\x80\xe4\xb8\xaa\xe4\xb8\x8d\xe5\x90\xab\xe6\x9c\x89\xe4\xbb\xbb\xe4\xbd\x95\xe5\x80\xbc\xe7\x9a\x84User\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe5\x9c\xa8\xe5\x90\x8e\xe6\x9c\x9f\xe7\x9a\x84\xe5\xaf\x86\xe7\xa0\x81\xe6\xaf\x94\xe5\xaf\xb9\xe8\xbf\x87\xe7\xa8\x8b\xe4\xb8\xad\xe4\xb8\x80\xe6\xa0\xb7\xe4\xbc\x9a\xe9\xaa\x8c\xe8\xaf\x81\xe5\xa4\xb1\xe8\xb4\xa5\n            return new User();\n        }\n        //\xe6\x9f\xa5\xe8\xaf\xa2\xe7\x94\xa8\xe6\x88\xb7\xe7\x9a\x84\xe8\xa7\x92\xe8\x89\xb2\xe4\xbf\xa1\xe6\x81\xaf\xef\xbc\x8c\xe5\xb9\xb6\xe8\xbf\x94\xe5\x9b\x9e\xe5\xad\x98\xe5\x85\xa5user\xe4\xb8\xad\n        List<Role> roles = rolesMapper.getRolesByUid(user.getId());\n        user.setRoles(roles);\n        return user;\n    }\n\n    /**\n     * @param user\n     * @return 0\xe8\xa1\xa8\xe7\xa4\xba\xe6\x88\x90\xe5\x8a\x9f\n     * 1\xe8\xa1\xa8\xe7\xa4\xba\xe7\x94\xa8\xe6\x88\xb7\xe5\x90\x8d\xe9\x87\x8d\xe5\xa4\x8d\n     * 2\xe8\xa1\xa8\xe7\xa4\xba\xe5\xa4\xb1\xe8\xb4\xa5\n     */\n    public int reg(User user) {\n        User loadUserByUsername = userMapper.loadUserByUsername(user.getUsername());\n        if (loadUserByUsername != null) {\n            return 1;\n        }\n        //\xe6\x8f\x92\xe5\x85\xa5\xe7\x94\xa8\xe6\x88\xb7,\xe6\x8f\x92\xe5\x85\xa5\xe4\xb9\x8b\xe5\x89\x8d\xe5\x85\x88\xe5\xaf\xb9\xe5\xaf\x86\xe7\xa0\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8a\xa0\xe5\xaf\x86\n        user.setPassword(passwordEncoder.encode(user.getPassword()));\n        user.setEnabled(true);//\xe7\x94\xa8\xe6\x88\xb7\xe5\x8f\xaf\xe7\x94\xa8\n        long result = userMapper.reg(user);\n        //\xe9\x85\x8d\xe7\xbd\xae\xe7\x94\xa8\xe6\x88\xb7\xe7\x9a\x84\xe8\xa7\x92\xe8\x89\xb2\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe9\x83\xbd\xe6\x98\xaf\xe6\x99\xae\xe9\x80\x9a\xe7\x94\xa8\xe6\x88\xb7\n        String[] roles = new String[]{"2"};\n        int i = rolesMapper.addRoles(roles, user.getId());\n        boolean b = i == roles.length && result == 1;\n        if (b) {\n            return 0;\n        } else {\n            return 2;\n        }\n    }\n\n    public int updateUserEmail(String email) {\n        return userMapper.updateUserEmail(email, Util.getCurrentUser().getId());\n    }\n\n    public List<User> getUserByNickname(String nickname) {\n        List<User> list = userMapper.getUserByNickname(nickname);\n        return list;\n    }\n\n    public List<Role> getAllRole() {\n        return userMapper.getAllRole();\n    }\n\n    public int updateUserEnabled(Boolean enabled, Long uid) {\n        return userMapper.updateUserEnabled(enabled, uid);\n    }\n\n    public int deleteUserById(Long uid) {\n        return userMapper.deleteUserById(uid);\n    }\n\n    public int updateUserRoles(Long[] rids, Long id) {\n        int i = userMapper.deleteUserRolesByUid(id);\n        return userMapper.setUserRoles(rids, id);\n    }\n\n    public User getUserById(Long id) {\n        return userMapper.getUserById(id);\n    }\n}\n'