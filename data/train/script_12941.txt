b'/*\n    SPDX-FileCopyrightText: 2015-2017 Milian Wolff <mail@milianw.de>\n\n    SPDX-License-Identifier: LGPL-2.1-or-later\n*/\n\n#include "chartwidget.h"\n\n#include <QApplication>\n#include <QCheckBox>\n#include <QFileDialog>\n#include <QLabel>\n#include <QMenu>\n#include <QPainter>\n#include <QPushButton>\n#include <QRubberBand>\n#include <QSpinBox>\n#include <QSvgGenerator>\n#include <QTextStream>\n#include <QToolBar>\n#include <QToolTip>\n#include <QVBoxLayout>\n\n#include <KChartChart>\n#include <KChartPlotter>\n\n#include <KChartBackgroundAttributes>\n#include <KChartCartesianCoordinatePlane>\n#include <KChartDataValueAttributes>\n#include <KChartFrameAttributes.h>\n#include <KChartGridAttributes>\n#include <KChartHeaderFooter>\n#include <KChartLegend>\n#include <KMessageBox>\n\n#include <KColorScheme>\n#include <KLocalizedString>\n\n#include "chartmodel.h"\n#include "chartproxy.h"\n#include "util.h"\n\n#include <cmath>\n#include <limits>\n\nusing namespace KChart;\n\nnamespace {\nKChart::TextAttributes fixupTextAttributes(KChart::TextAttributes attributes, const QPen& foreground, float pointSize)\n{\n    attributes.setPen(foreground);\n    auto fontSize = attributes.fontSize();\n    fontSize.setAbsoluteValue(pointSize);\n    attributes.setFontSize(fontSize);\n    return attributes;\n}\n\nclass TimeAxis : public CartesianAxis\n{\n    Q_OBJECT\npublic:\n    explicit TimeAxis(AbstractCartesianDiagram* diagram = nullptr)\n        : CartesianAxis(diagram)\n    {\n    }\n\n    const QString customizedLabel(const QString& label) const override\n    {\n        const auto time = label.toLongLong();\n        if (m_summaryData.filterParameters.isFilteredByTime(m_summaryData.totalTime)) {\n            return Util::formatTime(time) + QLatin1Char(\'\\n\')\n                + Util::formatTime(time - m_summaryData.filterParameters.minTime);\n        }\n        return Util::formatTime(time);\n    }\n\n    void setSummaryData(const SummaryData& summaryData)\n    {\n        m_summaryData = summaryData;\n        update();\n    }\n\nprivate:\n    SummaryData m_summaryData;\n};\n\nclass SizeAxis : public CartesianAxis\n{\n    Q_OBJECT\npublic:\n    explicit SizeAxis(AbstractCartesianDiagram* diagram = nullptr)\n        : CartesianAxis(diagram)\n    {\n    }\n\n    const QString customizedLabel(const QString& label) const override\n    {\n        return Util::formatBytes(label.toLongLong());\n    }\n};\n\n/// see also ProxyStyle which is responsible for unsetting SH_RubberBand_Mask\nclass ChartRubberBand : public QRubberBand\n{\n    Q_OBJECT\npublic:\n    explicit ChartRubberBand(QWidget* parent)\n        : QRubberBand(QRubberBand::Rectangle, parent)\n    {\n    }\n    ~ChartRubberBand() = default;\n\nprotected:\n    void paintEvent(QPaintEvent* event) override\n    {\n        auto brush = palette().highlight();\n        if (brush != m_lastBrush) {\n            auto color = brush.color();\n            color.setAlpha(128);\n            brush.setColor(color);\n            m_cachedBrush = brush;\n        } else {\n            brush = m_cachedBrush;\n        }\n\n        QPainter painter(this);\n        painter.fillRect(event->rect(), brush);\n    }\n\nprivate:\n    QBrush m_lastBrush;\n    QBrush m_cachedBrush;\n};\n}\n\nChartWidget::ChartWidget(QWidget* parent)\n    : QWidget(parent)\n    , m_chart(new Chart(this))\n    , m_legend(new Legend(m_chart))\n    , m_rubberBand(new ChartRubberBand(this))\n{\n    auto m_chartToolBar = new QToolBar(this);\n\n    auto m_exportAsButton = new QPushButton(i18n("Export As..."), this);\n    connect(m_exportAsButton, &QPushButton::released, this, &ChartWidget::saveAs);\n\n    auto m_showLegend = new QCheckBox(i18n("Show legend"), this);\n    m_showLegend->setChecked(false);\n    connect(m_showLegend, &QCheckBox::toggled, this, [=](bool show) {\n        m_legend->setVisible(show);\n        m_chart->update();\n    });\n\n    auto m_showTotal = new QCheckBox(i18n("Show total cost graph"), this);\n    m_showTotal->setChecked(true);\n    connect(m_showTotal, &QCheckBox::toggled, this, [=](bool show) {\n        m_totalPlotter->setHidden(!show);\n        m_chart->update();\n    });\n    m_legend->setVisible(m_showLegend->checkState());\n\n    auto m_showDetailed = new QCheckBox(i18n("Show detailed cost graph"), this);\n    m_showDetailed->setChecked(true);\n    connect(m_showDetailed, &QCheckBox::toggled, this, [=](bool show) {\n        m_detailedPlotter->setHidden(!show);\n        m_chart->update();\n    });\n\n    auto stackedLabel = new QLabel(i18n("Stacked diagrams:"));\n    m_stackedDiagrams = new QSpinBox(this);\n    m_stackedDiagrams->setMinimum(0);\n    m_stackedDiagrams->setMaximum(50);\n    connect(m_stackedDiagrams, qOverload<int>(&QSpinBox::valueChanged), this,\n            [=](int value) { m_model->setMaximumDatasetCount(value + 1); });\n\n    m_chartToolBar->addWidget(m_exportAsButton);\n    m_chartToolBar->addSeparator();\n    m_chartToolBar->addWidget(m_showLegend);\n    m_chartToolBar->addSeparator();\n    m_chartToolBar->addWidget(m_showTotal);\n    m_chartToolBar->addWidget(m_showDetailed);\n    m_chartToolBar->addSeparator();\n    m_chartToolBar->addWidget(stackedLabel);\n    m_chartToolBar->addWidget(m_stackedDiagrams);\n\n    auto layout = new QVBoxLayout(this);\n    layout->setContentsMargins(0, 0, 0, 0);\n    layout->setSpacing(0);\n    layout->addWidget(m_chartToolBar);\n    layout->addWidget(m_chart);\n    setLayout(layout);\n\n    auto* coordinatePlane = dynamic_cast<CartesianCoordinatePlane*>(m_chart->coordinatePlane());\n    Q_ASSERT(coordinatePlane);\n    coordinatePlane->setAutoAdjustGridToZoom(true);\n    connect(coordinatePlane, &CartesianCoordinatePlane::needUpdate, this, &ChartWidget::updateRubberBand);\n\n    m_chart->setCursor(Qt::IBeamCursor);\n    m_chart->setMouseTracking(true);\n    m_chart->installEventFilter(this);\n\n    m_chart->setContextMenuPolicy(Qt::CustomContextMenu);\n    connect(m_chart, &QWidget::customContextMenuRequested, this, [this](const QPoint& point) {\n        if (!m_model)\n            return;\n\n        const auto isFiltered = m_summaryData.filterParameters.isFilteredByTime(m_summaryData.totalTime);\n        if (!m_selection && !isFiltered)\n            return;\n\n        auto* menu = new QMenu(this);\n        menu->setAttribute(Qt::WA_DeleteOnClose, true);\n\n        if (m_selection) {\n            auto* reparse = menu->addAction(QIcon::fromTheme(QStringLiteral("timeline-use-zone-on")),\n                                            i18n("Filter In On Selection"));\n            connect(reparse, &QAction::triggered, this, [this]() {\n                const auto startTime = std::min(m_selection.start, m_selection.end);\n                const auto endTime = std::max(m_selection.start, m_selection.end);\n                emit filterRequested(startTime, endTime);\n            });\n        }\n\n        if (isFiltered) {\n            auto* reset =\n                menu->addAction(QIcon::fromTheme(QStringLiteral("timeline-use-zone-off")), i18n("Reset Filter"));\n            connect(reset, &QAction::triggered, this,\n                    [this]() { emit filterRequested(0, std::numeric_limits<int64_t>::max()); });\n        }\n\n        menu->popup(m_chart->mapToGlobal(point));\n    });\n}\n\nChartWidget::~ChartWidget() = default;\n\nvoid ChartWidget::setSummaryData(const SummaryData& summaryData)\n{\n    m_summaryData = summaryData;\n    updateAxesTitle();\n    if (m_bottomAxis) {\n        static_cast<TimeAxis*>(m_bottomAxis)->setSummaryData(summaryData);\n    }\n}\n\nvoid ChartWidget::setModel(ChartModel* model, bool minimalMode)\n{\n    if (m_model == model)\n        return;\n    m_model = model;\n\n    auto* coordinatePlane = dynamic_cast<CartesianCoordinatePlane*>(m_chart->coordinatePlane());\n    Q_ASSERT(coordinatePlane);\n    const auto diagrams = coordinatePlane->diagrams();\n    for (auto diagram : diagrams) {\n        coordinatePlane->takeDiagram(diagram);\n        delete diagram;\n    }\n\n    if (minimalMode) {\n        KChart::GridAttributes grid;\n        grid.setSubGridVisible(false);\n        coordinatePlane->setGlobalGridAttributes(grid);\n    }\n\n    KColorScheme scheme(QPalette::Active, KColorScheme::Window);\n    QPen foreground(scheme.foreground().color());\n\n    {\n        KChart::GridAttributes grid = coordinatePlane->gridAttributes(Qt::Horizontal);\n        // Do not align view on main grid line, stretch grid to match datasets\n        grid.setAdjustBoundsToGrid(false, false);\n        coordinatePlane->setGridAttributes(Qt::Horizontal, grid);\n\n        m_legend->setOrientation(Qt::Vertical);\n        m_legend->setTitleText(QString());\n        m_legend->setSortOrder(Qt::DescendingOrder);\n\n        RelativePosition relPos;\n        relPos.setReferenceArea(coordinatePlane);\n        relPos.setReferencePosition(Position::NorthWest);\n        relPos.setAlignment(Qt::AlignTop | Qt::AlignLeft | Qt::AlignAbsolute);\n        relPos.setHorizontalPadding(Measure(3.0, KChartEnums::MeasureCalculationModeAbsolute));\n        relPos.setVerticalPadding(Measure(3.0, KChartEnums::MeasureCalculationModeAbsolute));\n\n        m_legend->setFloatingPosition(relPos);\n        m_legend->setTextAlignment(Qt::AlignLeft | Qt::AlignAbsolute);\n\n        m_chart->addLegend(m_legend);\n\n        BackgroundAttributes bkgAtt = m_legend->backgroundAttributes();\n        QColor background = scheme.background(KColorScheme::AlternateBackground).color();\n        background.setAlpha(200);\n        bkgAtt.setBrush(QBrush(background));\n        bkgAtt.setVisible(true);\n\n        TextAttributes textAttr = fixupTextAttributes(m_legend->textAttributes(), foreground, font().pointSizeF() - 2);\n        QFont legendFont(QStringLiteral("monospace"));\n        legendFont.setStyleHint(QFont::TypeWriter);\n        textAttr.setFont(legendFont);\n\n        m_legend->setBackgroundAttributes(bkgAtt);\n        m_legend->setTextAttributes(textAttr);\n    }\n\n    {\n        m_totalPlotter = new Plotter(this);\n        m_totalPlotter->setAntiAliasing(true);\n        auto totalProxy = new ChartProxy(true, this);\n        totalProxy->setSourceModel(model);\n        m_totalPlotter->setModel(totalProxy);\n        m_totalPlotter->setType(Plotter::Stacked);\n\n        m_bottomAxis = new TimeAxis(m_totalPlotter);\n        const auto axisTextAttributes =\n            fixupTextAttributes(m_bottomAxis->textAttributes(), foreground, font().pointSizeF() - 2);\n        m_bottomAxis->setTextAttributes(axisTextAttributes);\n        const auto axisTitleTextAttributes = fixupTextAttributes(m_bottomAxis->titleTextAttributes(), foreground,\n                                                                 font().pointSizeF() + (minimalMode ? (-2) : (+2)));\n        m_bottomAxis->setTitleTextAttributes(axisTitleTextAttributes);\n        m_bottomAxis->setPosition(CartesianAxis::Bottom);\n        m_totalPlotter->addAxis(m_bottomAxis);\n\n        m_rightAxis = model->type() == ChartModel::Allocations || model->type() == ChartModel::Temporary\n            ? new CartesianAxis(m_totalPlotter)\n            : new SizeAxis(m_totalPlotter);\n        m_rightAxis->setTextAttributes(axisTextAttributes);\n        m_rightAxis->setTitleTextAttributes(axisTitleTextAttributes);\n        m_rightAxis->setPosition(CartesianAxis::Right);\n        m_totalPlotter->addAxis(m_rightAxis);\n\n        coordinatePlane->addDiagram(m_totalPlotter);\n\n        m_legend->addDiagram(m_totalPlotter);\n    }\n\n    {\n        m_detailedPlotter = new Plotter(this);\n        m_detailedPlotter->setAntiAliasing(true);\n        m_detailedPlotter->setType(Plotter::Stacked);\n\n        auto proxy = new ChartProxy(false, this);\n        proxy->setSourceModel(model);\n        m_detailedPlotter->setModel(proxy);\n        coordinatePlane->addDiagram(m_detailedPlotter);\n\n        m_legend->addDiagram(m_detailedPlotter);\n    }\n\n    m_legend->hide();\n\n    // If the dataset has 10 entries, one is for the total plot and the\n    // remaining ones are for the detailed plot. We want to only change\n    // the number of detailed plots, so we have to correct it.\n    int maximumDatasetCount = m_model->maximumDatasetCount();\n    m_stackedDiagrams->setValue(maximumDatasetCount - 1);\n\n    updateToolTip();\n    updateAxesTitle();\n}\n\nvoid ChartWidget::saveAs()\n{\n    const auto saveFilename =\n        QFileDialog::getSaveFileName(this, i18n("Save %1", windowTitle()), QString(),\n                                     i18n("Raster Image (*.png *.jpg *.tiff);;Vector Image (*.svg)"));\n\n    if (!saveFilename.isEmpty()) {\n        if (QFileInfo(saveFilename).suffix() == QLatin1String("svg")) {\n            // vector graphic format\n            QSvgGenerator generator;\n            generator.setFileName(saveFilename);\n            generator.setSize(m_chart->size());\n            generator.setViewBox(m_chart->rect());\n\n            QPainter painter;\n            painter.begin(&generator);\n            m_chart->paint(&painter, m_chart->rect());\n            painter.end();\n        } else if (!m_chart->grab().save(saveFilename)) {\n            // other format\n            KMessageBox::error(this, i18n("Failed to save the image to %1", saveFilename));\n        }\n    }\n}\n\nvoid ChartWidget::updateToolTip()\n{\n    if (!m_model)\n        return;\n\n    const auto startTime = std::min(m_selection.start, m_selection.end);\n    const auto endTime = std::max(m_selection.start, m_selection.end);\n\n    const auto startCost = m_model->totalCostAt(startTime);\n    const auto endCost = m_model->totalCostAt(endTime);\n\n    QString toolTip;\n    if (!qFuzzyCompare(startTime, endTime)) {\n        QTextStream stream(&toolTip);\n        stream << "<qt><table cellpadding=2>";\n        stream << i18n("<tr><th></th><th>Start</th><th>End</th><th>Delta</th></tr>");\n        stream << i18n("<tr><th>Time</th><td>%1</td><td>%2</td><td>%3</td></tr>", Util::formatTime(startTime),\n                       Util::formatTime(endTime), Util::formatTime(endTime - startTime));\n        switch (m_model->type()) {\n        case ChartModel::Consumed:\n            stream << i18n("<tr><th>Consumed</th><td>%1</td><td>%2</td><td>%3</td></tr>", Util::formatBytes(startCost),\n                           Util::formatBytes(endCost), Util::formatBytes(endCost - startCost));\n            break;\n        case ChartModel::Allocations:\n            stream << i18n("<tr><th>Allocations</th><td>%1</td><td>%2</td><td>%3</td></tr>", startCost, endCost,\n                           (endCost - startCost));\n            break;\n        case ChartModel::Temporary:\n            stream << i18n("<tr><th>Temporary Allocations</th><td>%1</td><td>%2</td><td>%3</td></tr>", startCost,\n                           endCost, (endCost - startCost));\n            break;\n        }\n        stream << "</table></qt>";\n    } else {\n        switch (m_model->type()) {\n        case ChartModel::Consumed:\n            toolTip = i18n("<qt>Shows the heap memory consumption over time.<br>Click and drag to select a time range "\n                           "for filtering.</qt>");\n            break;\n        case ChartModel::Allocations:\n            toolTip = i18n("<qt>Shows number of memory allocations over time.<br>Click and drag to select a time range "\n                           "for filtering.</qt>");\n            break;\n        case ChartModel::Temporary:\n            toolTip = i18n("<qt>Shows number of temporary memory allocations over time. "\n                           "A temporary allocation is one that is followed immediately by its "\n                           "corresponding deallocation, without other allocations happening "\n                           "in-between.<br>Click and drag to select a time range for filtering.</qt>");\n            break;\n        }\n    }\n\n    setToolTip(toolTip);\n}\n\nvoid ChartWidget::updateAxesTitle()\n{\n    if (!m_model)\n        return;\n\n    // m_bottomAxis is always time, so we can just write it here instead of in headerData().\n    m_bottomAxis->setTitleText(i18n("Elapsed Time"));\n    m_rightAxis->setTitleText(m_model->typeString());\n\n    if (m_summaryData.filterParameters.isFilteredByTime(m_summaryData.totalTime)) {\n        m_bottomAxis->setTitleText(\n            i18n("%1 (filtered from %2 to %3, \xce\x94%4)", m_bottomAxis->titleText(),\n                 Util::formatTime(m_summaryData.filterParameters.minTime),\n                 Util::formatTime(m_summaryData.filterParameters.maxTime),\n                 Util::formatTime(m_summaryData.filterParameters.maxTime - m_summaryData.filterParameters.minTime)));\n        m_rightAxis->setTitleText(i18n("%1 (filtered delta)", m_rightAxis->titleText()));\n    }\n}\n\nQSize ChartWidget::sizeHint() const\n{\n    return {400, 50};\n}\n\nvoid ChartWidget::setSelection(const Range& selection)\n{\n    if (selection == m_selection || !m_model)\n        return;\n\n    m_selection = selection;\n\n    updateToolTip();\n    updateRubberBand();\n\n    emit selectionChanged(m_selection);\n}\n\nvoid ChartWidget::updateRubberBand()\n{\n    if (!m_selection || !m_model) {\n        m_rubberBand->hide();\n        return;\n    }\n\n    auto* coordinatePlane = static_cast<CartesianCoordinatePlane*>(m_chart->coordinatePlane());\n    const auto delta = m_chart->pos().x();\n    const auto pixelStart = coordinatePlane->translate({m_selection.start, 0}).x() + delta;\n    const auto pixelEnd = coordinatePlane->translate({m_selection.end, 0}).x() + delta;\n    auto selectionRect = QRect(QPoint(pixelStart, 0), QPoint(pixelEnd, height() - 1));\n    m_rubberBand->setGeometry(selectionRect.normalized());\n    m_rubberBand->show();\n}\n\nbool ChartWidget::eventFilter(QObject* watched, QEvent* event)\n{\n    Q_ASSERT(watched == m_chart);\n\n    if (!m_model)\n        return false;\n\n    auto mapPosToTime = [this](const QPointF& pos) {\n        auto* coordinatePlane = static_cast<CartesianCoordinatePlane*>(m_chart->coordinatePlane());\n        return coordinatePlane->translateBack(pos).x();\n    };\n\n    if (auto* mouseEvent = dynamic_cast<QMouseEvent*>(event)) {\n        if (mouseEvent->button() == Qt::LeftButton || mouseEvent->buttons() == Qt::LeftButton) {\n            const auto time = mapPosToTime(mouseEvent->localPos());\n\n            auto selection = m_selection;\n            selection.end = time;\n            if (event->type() == QEvent::MouseButtonPress) {\n                selection.start = time;\n                m_chart->setCursor(Qt::SizeHorCursor);\n                m_cachedChart = m_chart->grab();\n            } else if (event->type() == QEvent::MouseButtonRelease) {\n                m_chart->setCursor(Qt::IBeamCursor);\n                m_cachedChart = {};\n            }\n\n            setSelection(selection);\n            QToolTip::showText(mouseEvent->globalPos(), toolTip(), this);\n            return true;\n        } else if (event->type() == QEvent::MouseMove && !mouseEvent->buttons()) {\n            updateStatusTip(mapPosToTime(mouseEvent->localPos()));\n        }\n    } else if (event->type() == QEvent::Paint && !m_cachedChart.isNull()) {\n        // use the cached chart while interacting with the rubber band\n        // otherwise, use the normal paint even as that one is required for\n        // the mouse mapping etc. to work correctly...\n        QPainter painter(m_chart);\n        painter.drawPixmap(m_chart->rect(), m_cachedChart);\n        return true;\n    }\n    return false;\n}\n\nvoid ChartWidget::updateStatusTip(qint64 time)\n{\n    if (!m_model)\n        return;\n\n    const auto text = [=]() {\n        if (time < 0 || time > m_summaryData.filterParameters.maxTime) {\n            return i18n("Click and drag to select time range for filtering.");\n        }\n\n        const auto cost = m_model->totalCostAt(time);\n        switch (m_model->type()) {\n        case ChartModel::Consumed:\n            return i18n("T = %1, Consumed: %2. Click and drag to select time range for filtering.",\n                        Util::formatTime(time), Util::formatBytes(cost));\n            break;\n        case ChartModel::Allocations:\n            return i18n("T = %1, Allocations: %2. Click and drag to select time range for filtering.",\n                        Util::formatTime(time), cost);\n            break;\n        case ChartModel::Temporary:\n            return i18n("T = %1, Temporary Allocations: %2. Click and drag to select time range for filtering.",\n                        Util::formatTime(time), cost);\n            break;\n        }\n        Q_UNREACHABLE();\n    }();\n    setStatusTip(text);\n\n    // force update\n    QStatusTipEvent event(text);\n    QApplication::sendEvent(this, &event);\n}\n\n#include "chartwidget.moc"\n'