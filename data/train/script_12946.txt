b'//http://agc002.contest.atcoder.jp/tasks/agc002_d\n#include <bits/stdc++.h>\nusing namespace std;\n#define gc getchar_unlocked\n#define fo(i,n) for(i=0;i<n;i++)\n#define Fo(i,k,n) for(i=k;i<n;i++)\n#define ll long long\n#define si(x)\tscanf("%d",&x)\n#define sl(x)\tscanf("%I64d",&x)\n#define ss(s)\tscanf("%s",s)\n#define pb push_back\n#define mp make_pair\n#define F first\n#define S second\n#define all(x) x.begin(), x.end()\n#define clr(x) memset(x, 0, sizeof(x))\n#define sortall(x) sort(all(x))\n#define tr(it, a) for(auto it = a.begin(); it != a.end(); it++)\n#define PI 3.1415926535897932384626\ntypedef pair<int, int>\tpii;\ntypedef pair<ll, ll>\tpll;\ntypedef vector<int>\t\tvi;\ntypedef vector<ll>\t\tvl;\ntypedef vector<pii>\t\tvpii;\ntypedef vector<pll>\t\tvpll;\ntypedef vector<vi>\t\tvvi;\ntypedef vector<vl>\t\tvvl;\nconst int mod = 1000000007;\nconst ll N = 3e5;\nvi g[N];\npii E[N];\nint mpow(int base, int exp); \nvoid ipgraph(int n, int m);\nvoid dfs(int u, int par);\nstruct node{\n\tint i, a, b, z;\n};\nint T, n, m, ans[N], rep[N], sz[N];\nvector<node> Q;\nint get(int x){\n\tif (x == rep[x]) return x;\n\treturn rep[x] = get(rep[x]);\n}\nvoid merge(int x, int y){\n\tx = get(x);\n\ty = get(y);\n\tif (x == y) return;\n\tif (sz[x] < sz[y]) rep[x] = y, sz[y] += sz[x];\n\telse if (sz[x] > sz[y]) rep[y] = x, sz[x] += sz[y];\n\telse rep[x] = y, sz[y]+=sz[x];\n}\nvoid init(){\n\tint i;\n\tT = 0;\n\tFo(i, 1, n+1) rep[i] = i, sz[i] = 1;\n}\nint go(int x, int y){\n\tx = get(x), y = get(y);\n\tif (x == y) return sz[x];\n\treturn sz[x] + sz[y];\n}\nvoid solve(){\n\tqueue< tuple<int, int, vector<node>> > q;\n\tvector<node> query;\n\tq.push(make_tuple(0, m, Q));\n\tint L, R, i;\n\twhile(!q.empty()){\n\t\t\n\t\ttie(L, R, query) = q.front(); q.pop();\n\t\tif (L+1 == R){\n\t\t\tfor(auto it: query)\n\t\t\t\tans[it.i] = R;\n\t\t\tcontinue;\n\t\t}\n\t\tint mid = (L+R)/2;\n\t\tvector<node> left, right; left.clear(); right.clear();\n\t\t//execute till mid\n\t\tif (T > mid){\n\t\t\tinit();\n\t\t\tT = 0;\n\t\t}\n\t\tFo(i, T+1, mid+1){\n\t\t\tmerge(E[i].F, E[i].S);\n\t\t}\n\t\tT = mid;\n\t\t//update range for each query\n\t\tfor(auto it: query){\n\t\t\tif (go(it.a, it.b) >= it.z) left.pb(it);\n\t\t\telse right.pb(it);\n\t\t}\n\t\t\n\t\tq.push(make_tuple(L, mid, left));\n\t\tq.push(make_tuple(mid, R, right));\n\t}\n\t\n}\nint main()\n{\n\tios_base::sync_with_stdio(false);\n\tcin.tie(NULL);\n\tint i,k,j,u,v,w;\n\tcin>>n>>m;\n\tfo(i, m){\n\t\tcin>>u>>v;\n\t\tg[u].pb(v);\n\t\tg[v].pb(u);\n\t\tE[i+1] = {u, v};\n\t}\n\tint q;\n\tcin>>q;\n\tFo(i, 1, q+1){\n\t\tcin>>u>>v>>w;\n\t\tQ.pb({i, u, v, w});\n\t}\n\tinit();\n\tsolve();\n        Fo(i, 1, q+1)\n\t\tcout<<ans[i]<<endl;\n\t\n\treturn 0;\n} \n'