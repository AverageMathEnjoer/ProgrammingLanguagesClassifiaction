b'/*\n * Copyright (C) 2015 Naman Dwivedi\n *\n * Licensed under the GNU General Public License v3\n *\n * This is free software: you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n */\n\npackage com.naman14.timber.adapters;\n\nimport android.app.Activity;\nimport android.os.Handler;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.recyclerview.widget.RecyclerView;\nimport android.view.LayoutInflater;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.ImageView;\nimport android.widget.PopupMenu;\nimport android.widget.TextView;\n\nimport com.naman14.timber.MusicPlayer;\nimport com.naman14.timber.R;\nimport com.naman14.timber.dialogs.AddPlaylistDialog;\nimport com.naman14.timber.models.Song;\nimport com.naman14.timber.utils.NavigationUtils;\nimport com.naman14.timber.utils.TimberUtils;\n\nimport java.util.List;\n\npublic class AlbumSongsAdapter extends BaseSongAdapter<AlbumSongsAdapter.ItemHolder> {\n\n    private List<Song> arraylist;\n    private Activity mContext;\n    private long albumID;\n    private long[] songIDs;\n\n    public AlbumSongsAdapter(Activity context, List<Song> arraylist, long albumID) {\n        this.arraylist = arraylist;\n        this.mContext = context;\n        this.songIDs = getSongIds();\n        this.albumID = albumID;\n    }\n\n    @Override\n    public ItemHolder onCreateViewHolder(ViewGroup viewGroup, int viewType) {\n\n        View v = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.item_album_song, null);\n        ItemHolder ml = new ItemHolder(v);\n        return ml;\n\n\n    }\n\n    @Override\n    public void onBindViewHolder(ItemHolder itemHolder, int i) {\n\n        Song localItem = arraylist.get(i);\n\n        itemHolder.title.setText(localItem.title);\n        itemHolder.duration.setText(TimberUtils.makeShortTimeString(mContext, (localItem.duration) / 1000));\n        int tracknumber = localItem.trackNumber;\n        if (tracknumber == 0) {\n            itemHolder.trackNumber.setText("-");\n        } else itemHolder.trackNumber.setText(String.valueOf(tracknumber));\n\n        setOnPopupMenuListener(itemHolder, i);\n\n\n    }\n\n    private void setOnPopupMenuListener(ItemHolder itemHolder, final int position) {\n\n        itemHolder.menu.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n\n                final PopupMenu menu = new PopupMenu(mContext, v);\n                menu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {\n                    @Override\n                    public boolean onMenuItemClick(MenuItem item) {\n                        switch (item.getItemId()) {\n                            case R.id.popup_song_play:\n                                MusicPlayer.playAll(mContext, songIDs, position, -1, TimberUtils.IdType.NA, false);\n                                break;\n                            case R.id.popup_song_play_next:\n                                long[] ids = new long[1];\n                                ids[0] = arraylist.get(position).id;\n                                MusicPlayer.playNext(mContext, ids, -1, TimberUtils.IdType.NA);\n                                break;\n                            case R.id.popup_song_goto_album:\n                                NavigationUtils.goToAlbum(mContext, arraylist.get(position).albumId);\n                                break;\n                            case R.id.popup_song_goto_artist:\n                                NavigationUtils.goToArtist(mContext, arraylist.get(position).artistId);\n                                break;\n                            case R.id.popup_song_addto_queue:\n                                long[] id = new long[1];\n                                id[0] = arraylist.get(position).id;\n                                MusicPlayer.addToQueue(mContext, id, -1, TimberUtils.IdType.NA);\n                                break;\n                            case R.id.popup_song_addto_playlist:\n                                AddPlaylistDialog.newInstance(arraylist.get(position)).show(((AppCompatActivity) mContext).getSupportFragmentManager(), "ADD_PLAYLIST");\n                                break;\n                            case R.id.popup_song_share:\n                                TimberUtils.shareTrack(mContext, arraylist.get(position).id);\n                                break;\n                            case R.id.popup_song_delete:\n                                long[] deleteIds = {arraylist.get(position).id};\n                                TimberUtils.showDeleteDialog(mContext,arraylist.get(position).title, deleteIds, AlbumSongsAdapter.this, position);\n                                break;\n                        }\n                        return false;\n                    }\n                });\n                menu.inflate(R.menu.popup_song);\n                menu.show();\n            }\n        });\n    }\n\n    @Override\n    public int getItemCount() {\n        return (null != arraylist ? arraylist.size() : 0);\n    }\n\n    public long[] getSongIds() {\n        long[] ret = new long[getItemCount()];\n        for (int i = 0; i < getItemCount(); i++) {\n            ret[i] = arraylist.get(i).id;\n        }\n\n        return ret;\n    }\n\n    @Override\n    public void updateDataSet(List<Song> arraylist) {\n        this.arraylist = arraylist;\n        this.songIDs = getSongIds();\n    }\n\n    @Override\n    public void removeSongAt(int i){\n        arraylist.remove(i);\n    }\n\n    public class ItemHolder extends RecyclerView.ViewHolder implements View.OnClickListener {\n        protected TextView title, duration, trackNumber;\n        protected ImageView menu;\n\n        public ItemHolder(View view) {\n            super(view);\n            this.title = (TextView) view.findViewById(R.id.song_title);\n            this.duration = (TextView) view.findViewById(R.id.song_duration);\n            this.trackNumber = (TextView) view.findViewById(R.id.trackNumber);\n            this.menu = (ImageView) view.findViewById(R.id.popup_menu);\n            view.setOnClickListener(this);\n        }\n\n        @Override\n        public void onClick(View v) {\n            Handler handler = new Handler();\n            handler.postDelayed(new Runnable() {\n                @Override\n                public void run() {\n                    playAll(mContext, songIDs, getAdapterPosition(), albumID,\n                            TimberUtils.IdType.Album, false,\n                            arraylist.get(getAdapterPosition()), true);\n                }\n            }, 100);\n\n        }\n\n    }\n\n}\n\n\n\n'