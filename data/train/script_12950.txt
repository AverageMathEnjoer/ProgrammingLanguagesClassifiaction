b'package io.github.javiewer.network.provider;\n\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Element;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport io.github.javiewer.adapter.item.DownloadLink;\nimport io.github.javiewer.adapter.item.MagnetLink;\nimport io.github.javiewer.network.TorrentKitty;\nimport okhttp3.ResponseBody;\nimport retrofit2.Call;\n\n/**\n * Project: JAViewer\n */\npublic class TorrentKittyLinkProvider extends DownloadLinkProvider {\n\n\n    @Override\n    public Call<ResponseBody> search(String keyword, int page) {\n        if (page == 1) {\n            return TorrentKitty.INSTANCE.search(keyword);\n        } else {\n            return null;\n        }\n    }\n\n    @Override\n    public List<DownloadLink> parseDownloadLinks(String htmlContent) {\n        ArrayList<DownloadLink> links = new ArrayList<>();\n        Element table = Jsoup.parse(htmlContent).getElementById("archiveResult");\n        for (Element tr : table.getElementsByTag("tr")) {\n            try {\n                links.add(DownloadLink.create(\n                        tr.getElementsByClass("name").first().text(),\n                        "",\n                        tr.getElementsByClass("date").first().text(),\n                        null,\n                        tr.getElementsByAttributeValue("rel", "magnet").first().attr("href")\n                ));\n            } catch (Exception ignored) {\n\n            }\n        }\n\n        return links;\n    }\n\n    @Override\n    public Call<ResponseBody> get(String url) {\n        return null;\n        //ABANDONED\n    }\n\n    @Override\n    public MagnetLink parseMagnetLink(String htmlContent) {\n        return null;\n        //ABANDONED\n    }\n}\n'