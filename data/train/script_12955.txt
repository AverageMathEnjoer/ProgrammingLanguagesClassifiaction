b'data Count = One | Two | Three | Huh\n           deriving (Eq, Ord, Show, Read, Enum)\n\ninstance Num Count where\n  One + One = Two\n  One + Two = Three\n  Two + One = Three\n  _   + _   = Huh\n\n  Three - One = Two\n  Three - Two = One\n  Two   - One = One\n  _     - _   = Huh\n\n  One * x   = x\n  x   * One = x\n  _   * _   = Huh\n\n  negate _ = Huh\n\n  abs x = x\n\n  signum Huh = Huh\n  signum _   = One\n\n  fromInteger 1 = One\n  fromInteger 2 = Two\n  fromInteger 3 = Three\n  fromInteger _ = Huh\n\nmain :: IO ()\nmain = do\n  print $ One + One\n  print $ One + Two\n  print $ One + Three\n  print $ One + 4\n  print $ [One ..]\n'