b'module Main where\nimport Prelude hiding (map)\nimport Data.List (foldl\')\nimport Data.Map (Map, map, fromDistinctAscList, toAscList, insertWith, empty)\nimport Data.Tuple (swap)\nimport Control.Applicative ((<$>))\n\n-- tiny, general utility functions that almost should\n-- have been in the libraries to begin with.\nenumerate :: [a] -> [(Int, a)]\nenumerate = zip [0..]\nunwind :: (a, [b]) -> [(a, b)]\nunwind (a, b) = ((,) a) <$> b\naggregate :: (Ord k) => Map k [a] -> (k, a) -> Map k [a]\naggregate m (k, a) = insertWith (++) k [a] m\n\n\ndata Corpus = Corpus (Map Int String) (Map String [Int])\n\n\nmain = do\n  -- Read the corpus file and chunk it into a Corpus\n  corpus <- chunk <$> readFile "corpus.txt"\n  -- So far, only chunks up a Corpus, doesn\'t generate anything.\n  sentence <- corpus `generate` 16\n  putStrLn sentence\n\n\nchunk :: String -> Corpus\nchunk str = Corpus chunks dictionary\n  where\n    chunks = fromDistinctAscList . enumerate $ lines str\n    dictionary = foldl\' aggregate empty $ swap <$> chunklist\n    chunklist = concatMap unwind . toAscList $ map words chunks\n\n\ngenerate :: Corpus -> Int -> IO String\ngenerate = undefined'