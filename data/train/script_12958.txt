b'\xef\xbb\xbfusing Rubeus.Kerberos.PAC;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Runtime.InteropServices;\nusing System.Text;\n\nnamespace Rubeus.Kerberos {\n\n    public class PACTYPE {        \n        public int cBuffers;\n        public int Version;\n        public List<PacInfoBuffer> PacInfoBuffers;\n\n        public PACTYPE(int version, List<PacInfoBuffer> piBuffers) {\n            Version = version;\n            cBuffers = piBuffers.Count;\n            PacInfoBuffers = piBuffers;\n        }\n\n        public PACTYPE(byte[] data, byte[] key) {\n\n            BinaryReader br = new BinaryReader(new MemoryStream(data));\n            cBuffers = br.ReadInt32();\n            Version = br.ReadInt32();\n            PacInfoBuffers = new List<PacInfoBuffer>();\n\n            for(int idx=0; idx<cBuffers; ++idx) {\n\n                var type = (PacInfoBufferType)br.ReadInt32();\n                var bufferSize = br.ReadInt32();\n                var offset = br.ReadInt64();\n\n                long oldPostion = br.BaseStream.Position;\n                br.BaseStream.Position = offset;\n                var pacData = br.ReadBytes(bufferSize);\n                br.BaseStream.Position = oldPostion;\n\n                switch (type) {\n                    case PacInfoBufferType.ClientName:\n                        PacInfoBuffers.Add(new ClientName(pacData));\n                        break;\n                    case PacInfoBufferType.UpnDns:\n                        PacInfoBuffers.Add(new UpnDns(pacData));\n                        break;\n                    case PacInfoBufferType.KDCChecksum:\n                    case PacInfoBufferType.ServerChecksum:\n                    case PacInfoBufferType.TicketChecksum:\n                        PacInfoBuffers.Add(new SignatureData(pacData, type));\n                        break;\n                    case PacInfoBufferType.LogonInfo:\n                        PacInfoBuffers.Add(new LogonInfo(pacData));\n                        break;\n                    case PacInfoBufferType.CredInfo:\n                        PacInfoBuffers.Add(new PacCredentialInfo(pacData, PacInfoBufferType.CredInfo, key));\n                        break;\n                    case PacInfoBufferType.S4U2Proxy:\n                        PacInfoBuffers.Add(new S4UDelegationInfo(pacData));\n                        break;\n                    case PacInfoBufferType.Attributes:\n                        PacInfoBuffers.Add(new Attributes(pacData));\n                        break;\n                    case PacInfoBufferType.Requestor:\n                        PacInfoBuffers.Add(new Requestor(pacData));\n                        break;\n                }                             \n            }\n        }\n        \n        public byte[] Encode() {\n\n            BinaryWriter bw = new BinaryWriter(new MemoryStream());\n            bw.Write(cBuffers);\n            bw.Write(Version);\n            long offset = 8 + (PacInfoBuffers.Count * 16);\n\n            foreach (var pacInfoBuffer in PacInfoBuffers) {\n\n                byte[] pacBuffer = pacInfoBuffer.Encode();\n                bw.Write((int)pacInfoBuffer.Type);\n                bw.Write((int)pacBuffer.Length);\n                bw.Write(offset);\n\n                long oldPosition = bw.BaseStream.Position;\n                bw.BaseStream.Position = offset;\n                bw.Write(pacBuffer);\n                bw.BaseStream.Position = oldPosition;\n                offset = (offset + pacBuffer.Length + 7) / 8 * 8;\n            }\n\n            bw.BaseStream.SetLength(offset);\n\n            return ((MemoryStream)bw.BaseStream).ToArray();\n        }\n    }\n}\n'