b'package com.loper7.date_time_picker.dialog\n\nimport android.content.Context\nimport android.graphics.Color\nimport android.os.Bundle\nimport android.util.Log\nimport android.view.View\nimport android.widget.FrameLayout\nimport android.widget.LinearLayout\nimport android.widget.TextView\nimport androidx.annotation.ColorInt\nimport androidx.core.content.ContextCompat\nimport com.google.android.material.bottomsheet.BottomSheetBehavior\nimport com.google.android.material.bottomsheet.BottomSheetDialog\nimport com.loper7.date_time_picker.R\nimport com.loper7.date_time_picker.ext.*\nimport com.loper7.date_time_picker.ext.getMaxWeekOfYear\nimport com.loper7.date_time_picker.ext.getWeekOfYear\nimport com.loper7.date_time_picker.ext.toFormatList\nimport com.loper7.date_time_picker.number_picker.NumberPicker\nimport com.loper7.date_time_picker.utils.StringUtils\nimport com.loper7.tab_expand.ext.dip2px\nimport java.util.*\n\n\n/**\n * \xe5\x8d\xa1\xe7\x89\x87 \xe5\x91\xa8\xe8\xa7\x86\xe5\x9b\xbe \xe9\x80\x89\xe6\x8b\xa9\xe5\x99\xa8\n */\nopen class CardWeekPickerDialog(context: Context) : BottomSheetDialog(context),\n    View.OnClickListener {\n    companion object {\n        const val CARD = 0 //\xe5\x8d\xa1\xe7\x89\x87\n        const val CUBE = 1 //\xe6\x96\xb9\xe5\xbd\xa2\n        const val STACK = 2 //\xe9\xa1\xb6\xe9\x83\xa8\xe5\x9c\x86\xe8\xa7\x92\n\n        fun builder(context: Context): Builder {\n            return lazy { Builder(context) }.value\n        }\n    }\n\n    private var builder: Builder? = null\n\n    private val np_week by lazy { delegate.findViewById<NumberPicker>(R.id.np_week) }\n    private val tv_cancel by lazy { delegate.findViewById<TextView>(R.id.dialog_cancel) }\n    private val tv_submit by lazy { delegate.findViewById<TextView>(R.id.dialog_submit) }\n    private val tv_title by lazy { delegate.findViewById<TextView>(R.id.tv_title) }\n    private val linear_bg by lazy { delegate.findViewById<LinearLayout>(R.id.linear_bg) }\n    private val divider_bottom by lazy { delegate.findViewById<View>(R.id.divider_bottom) }\n    private val divider_line by lazy { delegate.findViewById<View>(R.id.dialog_select_border) }\n\n    private var mBehavior: BottomSheetBehavior<FrameLayout>? = null\n\n    private val calendar by lazy { Calendar.getInstance() }\n    private var weeksData = mutableListOf<MutableList<Long>>()\n\n\n    constructor(context: Context, builder: Builder) : this(context) {\n        this.builder = builder\n    }\n\n    init {\n        builder = builder(context)\n    }\n\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        setContentView(R.layout.dt_dialog_week_picker)\n        super.onCreate(savedInstanceState)\n\n        val bottomSheet = delegate.findViewById<FrameLayout>(R.id.design_bottom_sheet)\n        bottomSheet!!.setBackgroundColor(Color.TRANSPARENT)\n\n        mBehavior = BottomSheetBehavior.from(bottomSheet)\n\n        weeksData = calendar.getWeeks()\n        builder?.apply {\n            weeksData =\n                calendar.getWeeks(startMillisecond, endMillisecond, startContain, endContain)\n            //\xe8\x83\x8c\xe6\x99\xaf\xe6\xa8\xa1\xe5\xbc\x8f\n            if (model != 0) {\n                val parmas = LinearLayout.LayoutParams(linear_bg!!.layoutParams)\n                when (model) {\n                    CARD -> {\n                        parmas.setMargins(\n                            context.dip2px(12f),\n                            context.dip2px(12f),\n                            context.dip2px(12f),\n                            context.dip2px(12f)\n                        )\n                        linear_bg!!.layoutParams = parmas\n                        linear_bg!!.setBackgroundResource(R.drawable.shape_bg_round_white_5)\n                    }\n                    CUBE -> {\n                        parmas.setMargins(0, 0, 0, 0)\n                        linear_bg!!.layoutParams = parmas\n                        linear_bg!!.setBackgroundColor(\n                            ContextCompat.getColor(\n                                context,\n                                R.color.colorTextWhite\n                            )\n                        )\n                    }\n                    STACK -> {\n                        parmas.setMargins(0, 0, 0, 0)\n                        linear_bg!!.layoutParams = parmas\n                        linear_bg!!.setBackgroundResource(R.drawable.shape_bg_top_round_white_15)\n                    }\n                    else -> {\n                        parmas.setMargins(0, 0, 0, 0)\n                        linear_bg!!.layoutParams = parmas\n                        linear_bg!!.setBackgroundResource(model)\n                    }\n                }\n            }\n\n            //\xe6\xa0\x87\xe9\xa2\x98\n            if (titleValue.isNullOrEmpty()) {\n                tv_title!!.visibility = View.GONE\n            } else {\n                tv_title?.text = titleValue\n                tv_title?.visibility = View.VISIBLE\n            }\n\n            //\xe6\x8c\x89\xe9\x92\xae\n            tv_cancel?.text = cancelText\n            tv_submit?.text = chooseText\n\n            //\xe4\xb8\xbb\xe9\xa2\x98\n            if (themeColor != 0) {\n                tv_submit!!.setTextColor(themeColor)\n                np_week!!.selectedTextColor = themeColor\n            }\n\n            if (builder!!.assistColor != 0) {\n                tv_title?.setTextColor(builder!!.assistColor)\n                tv_cancel?.setTextColor(builder!!.assistColor)\n                np_week!!.textColor = builder!!.assistColor\n\n\n            }\n            if (builder!!.dividerColor != 0) {\n                divider_bottom?.setBackgroundColor(builder!!.dividerColor)\n                divider_line?.setBackgroundColor(builder!!.dividerColor)\n                np_week!!.dividerColor = builder!!.dividerColor\n            }\n\n        }\n\n        //\xe8\xa7\x86\xe5\x9b\xbe\xe5\x91\xa8\n        np_week?.apply {\n            if (weeksData.isNullOrEmpty())\n                return\n\n            minValue = 1\n            maxValue = weeksData.size\n            value = weeksData.index(builder?.defaultMillisecond) + 1\n            isFocusable = true\n            isFocusableInTouchMode = true\n            descendantFocusability = NumberPicker.FOCUS_BLOCK_DESCENDANTS //\xe8\xae\xbe\xe7\xbd\xaeNumberPicker\xe4\xb8\x8d\xe5\x8f\xaf\xe7\xbc\x96\xe8\xbe\x91\n            wrapSelectorWheel = builder?.wrapSelectorWheel ?: true\n\n            formatter =\n                builder?.formatter?.invoke(weeksData) ?: NumberPicker.Formatter { value: Int ->\n                    var weekData = weeksData[value - 1].toFormatList("yyyy/MM/dd")\n                    var str = "${weekData.first()}  -  ${weekData.last()}"\n                    str\n                }\n        }\n\n        tv_cancel!!.setOnClickListener(this)\n        tv_submit!!.setOnClickListener(this)\n\n    }\n\n    override fun onStart() {\n        super.onStart()\n        mBehavior?.state = BottomSheetBehavior.STATE_EXPANDED\n    }\n\n    override fun onClick(v: View) {\n        this.dismiss()\n        when (v.id) {\n            R.id.dialog_submit -> {\n                np_week?.apply {\n                    builder?.onChooseListener?.invoke(weeksData[value - 1], formatter.format(value))\n                }\n            }\n            R.id.dialog_cancel -> {\n                builder?.onCancelListener?.invoke()\n            }\n        }\n        this.dismiss()\n    }\n\n\n    class Builder(private var context: Context) {\n\n        @JvmField\n        var cancelText: String = "\xe5\x8f\x96\xe6\xb6\x88"\n\n        @JvmField\n        var chooseText: String = "\xe7\xa1\xae\xe5\xae\x9a"\n\n        @JvmField\n        var titleValue: String? = null\n\n        @JvmField\n        var model: Int = CARD\n\n        @JvmField\n        var themeColor: Int = 0\n\n        @JvmField\n        var assistColor: Int = 0\n\n        @JvmField\n        var dividerColor: Int = 0\n\n        @JvmField\n        var wrapSelectorWheel: Boolean = true\n\n        @JvmField\n        var onChooseListener: ((MutableList<Long>, String) -> Unit)? = null\n\n        @JvmField\n        var onCancelListener: (() -> Unit)? = null\n\n        @JvmField\n        var defaultMillisecond: Long = 0\n\n        @JvmField\n        var startMillisecond: Long = 0\n\n        @JvmField\n        var startContain: Boolean = true\n\n        @JvmField\n        var endMillisecond: Long = 0\n\n        @JvmField\n        var endContain: Boolean = true\n\n        @JvmField\n        var formatter: ((MutableList<MutableList<Long>>) -> NumberPicker.Formatter?)? = null\n\n        /**\n         * \xe8\xae\xbe\xe7\xbd\xae\xe6\xa0\x87\xe9\xa2\x98\n         * @param value \xe6\xa0\x87\xe9\xa2\x98\n         * @return Builder\n         */\n        fun setTitle(value: String): Builder {\n            this.titleValue = value\n            return this\n        }\n\n        /**\n         * \xe6\x98\xbe\xe7\xa4\xba\xe6\xa8\xa1\xe5\xbc\x8f\n         * @param model  CARD,CUBE,STACK\n         * @return Builder\n         */\n        fun setBackGroundModel(model: Int): Builder {\n            this.model = model\n            return this\n        }\n\n        /**\n         * \xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xbb\xe9\xa2\x98\xe9\xa2\x9c\xe8\x89\xb2\n         * @param themeColor \xe4\xb8\xbb\xe9\xa2\x98\xe9\xa2\x9c\xe8\x89\xb2\n         * @return Builder\n         */\n        fun setThemeColor(@ColorInt themeColor: Int): Builder {\n            this.themeColor = themeColor\n            return this\n        }\n\n        /**\n         *\xe8\xae\xbe\xe7\xbd\xae\xe6\x98\xaf\xe5\x90\xa6\xe5\xbe\xaa\xe7\x8e\xaf\xe6\xbb\x9a\xe5\x8a\xa8\n         * @return Builder\n         */\n        fun setWrapSelectorWheel(wrapSelector: Boolean): Builder {\n            this.wrapSelectorWheel = wrapSelector\n            return this\n        }\n\n        /**\n         * \xe8\xae\xbe\xe7\xbd\xae\xe9\xbb\x98\xe8\xae\xa4\xe9\x80\x89\xe4\xb8\xad\xe5\x91\xa8\xe6\xac\xa1\xe6\x89\x80\xe5\x9c\xa8\xe7\x9a\x84\xe4\xbb\xbb\xe6\x84\x8f\xe6\x97\xb6\xe9\x97\xb4\n         * @param millisecond \xe9\xbb\x98\xe8\xae\xa4\xe6\x97\xb6\xe9\x97\xb4\n         * @return Builder\n         */\n        fun setDefaultMillisecond(millisecond: Long): Builder {\n            this.defaultMillisecond = millisecond\n            return this\n        }\n\n        /**\n         * \xe8\xae\xbe\xe7\xbd\xae\xe8\xb5\xb7\xe5\xa7\x8b\xe5\x91\xa8\xe6\x89\x80\xe5\x9c\xa8\xe6\x97\xb6\xe9\x97\xb4\n         * @param millisecond \xe8\xb5\xb7\xe5\xa7\x8b\xe6\x97\xb6\xe9\x97\xb4\n         * @param contain \xe8\xb5\xb7\xe5\xa7\x8b\xe5\x91\xa8\xe6\x98\xaf\xe5\x90\xa6\xe5\x8c\x85\xe5\x90\xab\xe8\xb5\xb7\xe5\xa7\x8b\xe6\x97\xb6\xe9\x97\xb4\n         * @return Builder\n         */\n        fun setStartMillisecond(millisecond: Long, contain: Boolean = true): Builder {\n            this.startMillisecond = millisecond\n            this.startContain = contain\n            return this\n        }\n\n        /**\n         * \xe8\xae\xbe\xe7\xbd\xae\xe7\xbb\x93\xe6\x9d\x9f\xe5\x91\xa8\xe6\x89\x80\xe5\x9c\xa8\xe6\x97\xb6\xe9\x97\xb4\n         * @param millisecond \xe7\xbb\x93\xe6\x9d\x9f\xe6\x97\xb6\xe9\x97\xb4\n         * @param contain \xe7\xbb\x93\xe6\x9d\x9f\xe5\x91\xa8\xe6\x98\xaf\xe5\x90\xa6\xe5\x8c\x85\xe5\x90\xab\xe7\xbb\x93\xe6\x9d\x9f\xe6\x97\xb6\xe9\x97\xb4\n         * @return Builder\n         */\n        fun setEndMillisecond(millisecond: Long, contain: Boolean = true): Builder {\n            this.endMillisecond = millisecond\n            this.endContain = contain\n            return this\n        }\n\n        /**\n         * \xe8\xae\xbe\xe7\xbd\xae\xe6\xa0\xbc\xe5\xbc\x8f\xe5\x8c\x96\n         * @param datas \xe6\x95\xb0\xe6\x8d\xae\n         * @return Builder\n         */\n        fun setFormatter(formatter: (MutableList<MutableList<Long>>) -> NumberPicker.Formatter?): Builder {\n            this.formatter = formatter\n            return this\n        }\n\n        /**\n         * \xe7\xbb\x91\xe5\xae\x9a\xe9\x80\x89\xe6\x8b\xa9\xe7\x9b\x91\xe5\x90\xac\n         * @param text \xe6\x8c\x89\xe9\x92\xae\xe6\x96\x87\xe5\xad\x97\n         * @param listener \xe9\x80\x89\xe6\x8b\xa9\xe7\x9b\x91\xe5\x90\xac\xe5\x87\xbd\xe6\x95\xb0 MutableList<Long> \xe9\x80\x89\xe6\x8b\xa9\xe5\x91\xa8\xe6\xac\xa1\xe6\x89\x80\xe5\x8c\x85\xe5\x90\xab\xe7\x9a\x84\xe5\xa4\xa9\xe6\x97\xb6\xe9\x97\xb4\xe6\x88\xb3 String \xe5\x91\xa8format\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\n         * @return Builder\n         */\n        fun setOnChoose(\n            text: String = "\xe7\xa1\xae\xe5\xae\x9a",\n            listener: ((MutableList<Long>, String) -> Unit)? = null\n        ): Builder {\n            this.onChooseListener = listener\n            this.chooseText = text\n            return this\n        }\n\n        /**\n         * \xe7\xbb\x91\xe5\xae\x9a\xe5\x8f\x96\xe6\xb6\x88\xe7\x9b\x91\xe5\x90\xac\n         * @param text \xe6\x8c\x89\xe9\x92\xae\xe6\x96\x87\xe5\xad\x97\n         * @param listener \xe5\x8f\x96\xe6\xb6\x88\xe7\x9b\x91\xe5\x90\xac\xe5\x87\xbd\xe6\x95\xb0\n         * @return Builder\n         */\n        fun setOnCancel(text: String = "\xe5\x8f\x96\xe6\xb6\x88", listener: (() -> Unit)? = null): Builder {\n            this.onCancelListener = listener\n            this.cancelText = text\n            return this\n        }\n\n        /**\n         * \xe8\xbf\x99\xe5\x8f\xaadialog\xe5\x86\x85\xe8\xbe\x85\xe5\x8a\xa9\xe6\x96\x87\xe5\xad\x97\xe7\x9a\x84\xe9\xa2\x9c\xe8\x89\xb2\n         * @return Builder\n         */\n        fun setAssistColor(@ColorInt value: Int): Builder {\n            this.assistColor = value\n            return this\n        }\n\n        /**\n         * \xe8\xbf\x99\xe5\x8f\xaadialog\xe5\x86\x85\xe5\x88\x86\xe5\x89\xb2\xe7\xba\xbf\xe9\xa2\x9c\xe8\x89\xb2\n         * @return Builder\n         */\n        fun setDividerColor(@ColorInt value: Int): Builder {\n            this.dividerColor = value\n            return this\n        }\n\n        fun build(): CardWeekPickerDialog {\n            return CardWeekPickerDialog(context, this)\n        }\n    }\n\n}'