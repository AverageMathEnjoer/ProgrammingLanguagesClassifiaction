b'/*\n * Copyright 2013 - 2016 Mario Arias\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.funktionale.either\n\nimport org.funktionale.either.Disjunction.Left\nimport org.funktionale.either.Disjunction.Right\nimport org.funktionale.option.Option\nimport org.testng.Assert.*\nimport org.testng.annotations.Test\n\n\nclass DisjunctionTest {\n\n\n    private val left = Disjunction.left(5)\n    private val right = Disjunction.right("kotlin")\n\n    @Test fun get() {\n        assertEquals(left.swap().get(), 5)\n        assertEquals(right.get(), "kotlin")\n    }\n\n    //[Test(expectedExceptions = array(javaClass<NoSuchElementException>()))]\n\n    @Test fun getWithException() {\n        try {\n            assertEquals(right.swap().get(), 5)\n            fail()\n        } catch(e: Exception) {\n            //expected\n        }\n        try {\n            assertEquals(left.get(), "kotlin")\n            fail()\n        } catch(e: Exception) {\n            //Expected\n        }\n    }\n\n    @Test fun forEach() {\n        left.swap().forEach {\n            assertEquals(it * 2, 10)\n        }\n\n        right.forEach {\n            assertEquals(it.length, 6)\n        }\n    }\n\n    @Test fun getOrElse() {\n        assertEquals(left.swap().getOrElse { 2 }, 5)\n        assertEquals(left.getOrElse { "java" }, "java")\n    }\n\n    @Test fun exists() {\n        assertTrue(left.swap().exists { it == 5 })\n        assertFalse(left.exists { it == "kotlin" })\n    }\n\n    @Test fun flatMap() {\n        assertEquals(left.swap().flatMap { Left<String, Int>(it.toString()) }.swap().get(), "5")\n        assertEquals(right.flatMap { Right<String, Int>(it.length) }.get(), 6)\n    }\n\n    @Test fun map() {\n        assertEquals(left.swap().map(Int::toString).get(), "5")\n        assertEquals(right.map { it.length }.get(), 6)\n    }\n\n    @Test fun filter() {\n        assertEquals(left.swap().filter { it == 5 }.get().get(), 5)\n        assertEquals(left.swap().filter { it == 6 }, Option.None)\n        assertEquals(right.filter { it.startsWith(\'k\') }.get().get(), "kotlin")\n        assertEquals(right.filter { it.startsWith(\'j\') }, Option.None)\n    }\n\n    @Test fun toList() {\n        assertEquals(left.swap().toList(), listOf(5))\n        assertEquals(left.toList(), listOf<Int>())\n    }\n\n    @Test fun toOption() {\n        assertEquals(left.swap().toOption().get(), 5)\n        assertEquals(left.toOption(), Option.None)\n    }\n\n    @Test fun fold() {\n        assertEquals(left.fold(Int::toString, { it }), "5")\n    }\n\n    @Test fun swap() {\n        assertEquals(left.swap().get(), 5)\n        assertEquals(right.swap().swap().get(), "kotlin")\n    }\n\n    @Test fun components() {\n        val (aInt, aNullString) = left\n        assertNotNull(aInt)\n        assertNull(aNullString)\n\n        val (aNullInt, aString) = right\n        assertNull(aNullInt)\n        assertNotNull(aString)\n    }\n\n    @Test fun merge() {\n        assertEquals(left.merge(), 5)\n        assertEquals(right.merge(), "kotlin")\n    }\n\n    @Test fun disjunctionTry() {\n        val e: Disjunction<Throwable, Nothing> = disjunctionTry {\n            throw RuntimeException()\n        }\n        assertTrue(e.isLeft())\n    }\n\n    @Test fun sequential() {\n        fun parseInts(ints: List<String>): Disjunction<Throwable, List<Int>> {\n            return ints.map { disjunctionTry { it.toInt() } }.disjunctionSequential()\n        }\n\n        assertEquals(parseInts(listOf("1", "2", "3")), Right<Exception, List<Int>>(listOf(1, 2, 3)))\n        assertTrue(parseInts(listOf("1", "foo", "3")) is Left)\n    }\n}\n'