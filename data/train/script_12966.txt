b'{-# LANGUAGE\n    FlexibleInstances\n  , TypeSynonymInstances\n  #-}\n-- | Module facilitating informative inspection of datatypes.\nmodule Rest.Types.Info (Info (..)) where\n\nimport Data.Text (Text)\nimport Data.Typeable\n\n-- | Type class representing information about the read/show function on a data\n-- type.\nclass Typeable a => Info a where\n  describe :: proxy a -> String\n  example  :: proxy a -> String\n  example _ = ""\n\ninstance Info String where\n  describe _ = "string"\n\ninstance Info Text where\n  describe _ = "string"\n\ninstance Info Int where\n  describe _ = "integer"\n\ninstance Info Integer where\n  describe _ = "integer"\n'