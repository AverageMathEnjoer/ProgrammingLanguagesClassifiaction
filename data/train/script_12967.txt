b'#r "packages/build/FAKE/tools/FakeLib.dll"\n\nopen System\nopen Fake\n\nlet run fileName args workingDir =\n    printfn "CWD: %s" workingDir\n    let fileName, args =\n        if EnvironmentHelper.isUnix\n        then fileName, args else "cmd", ("/C " + fileName + " " + args)\n    let ok =\n        execProcess (fun info ->\n            info.FileName <- fileName\n            info.WorkingDirectory <- workingDir\n            info.Arguments <- args) TimeSpan.MaxValue\n    if not ok then failwith (sprintf "\'%s> %s %s\' task failed" workingDir fileName args)\n\nlet dotnet = "dotnet"\nlet npm = "npm"\nlet projects =  [ "Server"; "Server.Tests"; "Client" </> "src" ]\n\nTarget "Clean" <| fun _ ->\n    projects \n    |> List.collect (fun proj -> [ proj </> "bin"; proj </> "obj" ])\n    |> List.iter CleanDir\n\nTarget "DotnetRestore" <| fun _ ->\n    projects\n    |> List.iter (run dotnet "restore --no-cache")\n\nTarget "ServerTests" <| fun _ ->\n    run dotnet "run" "Server.Tests"\n\nTarget "NpmInstall" <| fun _ ->\n    run "yarn" "install" "Client"\n\nTarget "Watch" <| fun () ->\n  [ async { run dotnet "watch run" "Server" }; \n    async { run dotnet "fable npm-run start" ("Client" </> "src") } ]\n  |> Async.Parallel\n  |> Async.RunSynchronously\n  |> ignore\n\nTarget "WatchInMemory" <| fun () ->\n  [ async { run dotnet "watch run --store in-memory" "Server" }; \n    async { run dotnet "fable npm-run start" ("Client" </> "src") } ]\n  |> Async.Parallel\n  |> Async.RunSynchronously\n  |> ignore\n\nTarget "Release" <| fun _ ->\n  CleanDir "dist"\n  [ async { run dotnet "build --configuration Release --output ../dist" "Server" }\n    async { \n        run dotnet "fable npm-run build" ("Client" </> "src") \n        CopyRecursive ("Client" </> "public") ("dist" </> "client") true |> ignore\n    } ]\n  |> Async.Parallel\n  |> Async.RunSynchronously\n  |> ignore\n\n"Clean" \n  ==> "DotnetRestore"\n  ==> "ServerTests"\n\n"Clean" \n  ==> "NpmInstall"\n  ==> "DotnetRestore"\n  ==> "Watch"\n\n"Clean" \n  ==> "NpmInstall"\n  ==> "DotnetRestore"\n  ==> "WatchInMemory"\n\n"Clean" \n  ==> "NpmInstall"\n  ==> "DotnetRestore"\n  ==> "Release"\n\nRunTargetOrDefault "Release"'