b"{-# LANGUAGE ExistentialQuantification, RankNTypes #-}\nmodule Rest.Driver.Types\n  ( Run\n  , RunnableHandler (..)\n  , Config (..)\n  , mapHandler\n\n  , module Rest.Types.Method\n  ) where\n\nimport Control.Monad.Trans.Except\nimport Network.Multipart (BodyPart)\n\nimport Rest.Api (Router)\nimport Rest.Error (Reason_)\nimport Rest.Handler (Handler)\nimport Rest.Types.Container.Resource (Resource)\nimport Rest.Types.Method (Method (..))\n\n\ntype Run m n = forall a. m a -> n a\n\ndata RunnableHandler n = forall m. RunnableHandler\n  (Run m n)   -- Runner to the base monad.\n  (Handler m) -- Actual handler to run.\n\nmapHandler :: Run m n -> RunnableHandler m -> RunnableHandler n\nmapHandler run (RunnableHandler run' h) = RunnableHandler (run . run') h\n\nnewtype Config m\n  = Config\n  { runMultiResources :: forall s. Config m -> Router m s -> [Resource] -> ExceptT Reason_ m [BodyPart]\n  }\n"