b'{-# LANGUAGE OverloadedStrings #-}\n\nmodule Test.Parser\n(\n  spec,\n)\nwhere\n\nimport Pdf.Core\nimport Pdf.Core.Exception\nimport Pdf.Content.Parser\nimport Pdf.Content.Ops\n\nimport qualified Data.Attoparsec.ByteString as Parser\nimport qualified System.IO.Streams as Streams\nimport Test.Hspec\n\nspec :: Spec\nspec = describe "Parser" $ do\n  parseContentSpec\n  readNextOperatorSpec\n\nparseContentSpec :: Spec\nparseContentSpec = describe "parseContent" $ do\n  it "should parse an object" $ do\n    let input = "(hello)"\n        res = Parser.parseOnly parseContent input\n    res `shouldBe` Right (Just $ Obj $ String "hello")\n\n  it "should parse an operator" $ do\n    let input = "T*"\n        res = Parser.parseOnly parseContent input\n    res `shouldBe` Right (Just $ Op Op_T_star)\n\n  it "should return Nothing when input is empty" $ do\n    let input = ""\n        res = Parser.parseOnly parseContent input\n    res `shouldBe` Right Nothing\n\n  it "should ignore comments at the beginning" $ do\n    let input = "% comments\\nTj"\n        res = Parser.parseOnly parseContent input\n    res `shouldBe` Right (Just $ Op Op_Tj)\n\n  it "should ignore multiple lines of comments at the beginning" $ do\n    let input = "% comments\\nTj"\n        res = Parser.parseOnly parseContent input\n    res `shouldBe` Right (Just $ Op Op_Tj)\n\nreadNextOperatorSpec :: Spec\nreadNextOperatorSpec = describe "readNextOperator" $ do\n  it "should return Nothing when there is no input" $ do\n    let input = []\n    is <- Streams.fromList input\n    next <- readNextOperator is\n    next `shouldBe` Nothing\n\n  it "should collect all objects until an operator" $ do\n    let input = [Obj o1, Obj o2, Op op]\n        o1 = String "o1"\n        o2 = String "o2"\n        op = Op_Tj\n    is <- Streams.fromList input\n    next <- readNextOperator is\n    next `shouldBe` Just (op, [o1, o2])\n\n  it "should throw when there is no operator after arguments" $ do\n    let input = [Obj o1, Obj o2]\n        o1 = String "o1"\n        o2 = String "o2"\n    is <- Streams.fromList input\n    readNextOperator is\n      `shouldThrow` \\Corrupted{} -> True\n'