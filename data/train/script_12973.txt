b'package io.github.javiewer.view;\n\nimport android.app.Activity;\nimport android.content.res.Resources;\nimport android.graphics.Bitmap;\nimport android.graphics.Canvas;\nimport android.graphics.Color;\nimport android.graphics.Matrix;\nimport android.graphics.Rect;\nimport android.os.Build;\nimport androidx.core.widget.NestedScrollView;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.view.ViewTreeObserver;\nimport android.view.Window;\nimport android.widget.ImageView;\n\n/**\n * Project: JAViewer\n */\n\npublic class ViewUtil {\n    @SuppressWarnings("deprecation")\n    public static void alignIconToView(final View icon, final View view) {\n        view.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {\n            @Override\n            public void onGlobalLayout() {\n\n                ViewGroup.MarginLayoutParams viewMargin = (ViewGroup.MarginLayoutParams) view.getLayoutParams();\n                ViewGroup.MarginLayoutParams iconMargin = (ViewGroup.MarginLayoutParams) icon.getLayoutParams();\n                int topMargin = viewMargin.topMargin;\n                topMargin += (view.getMeasuredHeight() - icon.getMeasuredHeight()) / 2;\n\n                iconMargin.topMargin = topMargin;\n                icon.setLayoutParams(iconMargin);\n\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {\n                    view.getViewTreeObserver().removeOnGlobalLayoutListener(this);\n                } else {\n                    view.getViewTreeObserver().removeGlobalOnLayoutListener(this);\n                }\n            }\n        });\n    }\n\n    public static int dpToPx(int dp) {\n        return (int) (dp * Resources.getSystem().getDisplayMetrics().density);\n    }\n\n    public static int pxToDp(int px) {\n        return (int) (px / Resources.getSystem().getDisplayMetrics().density);\n    }\n\n    public static void imageTopCrop(ImageView view) {\n        view.setScaleType(ImageView.ScaleType.MATRIX);\n        final Matrix matrix = view.getImageMatrix();\n\n        float scale;\n        final int viewWidth = view.getWidth() - view.getPaddingLeft() - view.getPaddingRight();\n        final int viewHeight = view.getHeight() - view.getPaddingTop() - view.getPaddingBottom();\n        final int drawableWidth = view.getDrawable().getIntrinsicWidth();\n        final int drawableHeight = view.getDrawable().getIntrinsicHeight();\n\n        if (drawableWidth * viewHeight > drawableHeight * viewWidth) {\n            scale = (float) viewHeight / (float) drawableHeight;\n        } else {\n            scale = (float) viewWidth / (float) drawableWidth;\n        }\n\n        matrix.setScale(scale, scale);\n        view.setImageMatrix(matrix);\n    }\n\n    public static Bitmap getBitmapByView(NestedScrollView scrollView) {\n        int h = 0;\n        Bitmap bitmap = null;\n        // \xe8\x8e\xb7\xe5\x8f\x96scrollview\xe5\xae\x9e\xe9\x99\x85\xe9\xab\x98\xe5\xba\xa6\n        for (int i = 0; i < scrollView.getChildCount(); i++) {\n            h += scrollView.getChildAt(i).getHeight();\n            scrollView.getChildAt(i).setBackgroundColor(\n                    Color.parseColor("#ffffff"));\n        }\n        // \xe5\x88\x9b\xe5\xbb\xba\xe5\xaf\xb9\xe5\xba\x94\xe5\xa4\xa7\xe5\xb0\x8f\xe7\x9a\x84bitmap\n        bitmap = Bitmap.createBitmap(scrollView.getWidth(), h,\n                Bitmap.Config.ARGB_8888);\n        final Canvas canvas = new Canvas(bitmap);\n        scrollView.draw(canvas);\n        return bitmap;\n    }\n\n    public static int getStatusBarHeight(Activity activity) {\n        Rect rectangle = new Rect();\n        Window window = activity.getWindow();\n        window.getDecorView().getWindowVisibleDisplayFrame(rectangle);\n        return rectangle.top;\n    }\n}\n'