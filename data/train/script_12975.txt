b'/*Copyright \xc2\xa9  2017 Lyons. All rights reserved. */\npackage lyons.core.shiro.token;\n\nimport java.util.Date;\n\nimport org.apache.shiro.SecurityUtils;\nimport org.apache.shiro.authc.AuthenticationException;\nimport org.apache.shiro.authc.AuthenticationInfo;\nimport org.apache.shiro.authc.AuthenticationToken;\nimport org.apache.shiro.authc.DisabledAccountException;\nimport org.apache.shiro.authc.IncorrectCredentialsException;\nimport org.apache.shiro.authc.SimpleAuthenticationInfo;\nimport org.apache.shiro.authc.UsernamePasswordToken;\nimport org.apache.shiro.authz.AuthorizationInfo;\nimport org.apache.shiro.realm.AuthorizingRealm;\nimport org.apache.shiro.subject.PrincipalCollection;\nimport org.apache.shiro.subject.SimplePrincipalCollection;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport lyons.common.exception.user.NonuniquenessException;\nimport lyons.common.exception.user.RepeatException;\nimport lyons.common.exception.user.UserException;\nimport lyons.common.model.user.UUser;\nimport lyons.common.service.user.UUserService;\nimport lyons.common.utils.MathUtil;\nimport lyons.common.utils.enums.AccountStaEnum;\n\n/**\n * @Description: \xe7\x99\xbb\xe5\xbd\x95\xe8\xae\xa4\xe8\xaf\x81+\xe6\x8e\x88\xe6\x9d\x83\n * @ClassName: ShiroDbRealm\n * @author: lyons<zhanglei>\n * @date: 2017\xe5\xb9\xb41\xe6\x9c\x8817\xe6\x97\xa5 \xe4\xb8\x8a\xe5\x8d\x8810:31:29\n * @version: [1.0]\n */\npublic class ShiroDbRealm extends AuthorizingRealm\n{\n    \n    @Autowired\n    private UUserService userService;\n    \n   /**\n    * \xe7\x94\xa8\xe6\x88\xb7\xe7\x99\xbb\xe5\xbd\x95\xe8\xae\xa4\xe8\xaf\x81\n    */\n    @Override\n    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authcToken)\n        throws AuthenticationException\n    {\n        UsernamePasswordToken token = (UsernamePasswordToken) authcToken;\n        UUser user = userService.login(token.getUsername(),new String(token.getPassword()));\n\n        if (user == null)\n        {\n            throw new IncorrectCredentialsException();\n        }else if (AccountStaEnum.disabled.getState() != user.getuState()) {\n            throw new DisabledAccountException();\n        }else {\n            //update last login time\n            user.setulastLoginTime(new Date());\n            userService.updateByPrimaryKeySelective(user);\n        }\n        return new SimpleAuthenticationInfo(user,user.getuPassword(),getName());\n    }\n    \n    /**\n     * @Title: regist\n     * @Description: \xe7\x94\xa8\xe6\x88\xb7\xe6\xb3\xa8\xe5\x86\x8c\n     * @return: void\n     * @throws UserException \n     */\n    public void registering(UUser uuser) throws UserException\n    {   \n        /*\n         * \xe6\xa3\x80\xe6\x9f\xa5\xe6\x98\xaf\xe5\x90\xa6\xe5\xb7\xb2\xe6\xb3\xa8\xe5\x86\x8c\n         */\n        if (userService.isRegister(uuser.getuName()))\n        {\n            throw new RepeatException(AccountStaEnum.registerRepeat.getInfo());\n        }\n        \n        uuser.setuPassword(MathUtil.getMd5(uuser.getuPassword()));\n        if (userService.register(uuser) != 1)\n        {\n            /*\n             * TODO\n             * \xe8\xaf\xa5\xe5\xbc\x82\xe5\xb8\xb8\xe4\xb8\x8d\xe6\x98\xaf\xe5\xbe\x88\xe5\x87\x86\xe7\xa1\xae\n             */\n            throw new NonuniquenessException(AccountStaEnum.registerExistence.getInfo());\n        }\n    }\n    \n    /* (non Javadoc)\n     * @Title: doGetAuthorizationInfo\n     * @Description: TODO\n     * @param arg0\n     * @return\n     * @see org.apache.shiro.realm.AuthorizingRealm#doGetAuthorizationInfo(org.apache.shiro.subject.PrincipalCollection)\n     */\n    @Override\n    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection arg0)\n    {\n        // TODO Auto-generated method stub\n        return null;\n    }\n    \n    /**\n     * \xe6\xb8\x85\xe7\xa9\xba\xe5\xbd\x93\xe5\x89\x8d\xe7\x94\xa8\xe6\x88\xb7\xe6\x9d\x83\xe9\x99\x90\xe4\xbf\xa1\xe6\x81\xaf\n     */\n    public  void clearCachedAuthorizationInfo() {\n        PrincipalCollection principalCollection = SecurityUtils.getSubject().getPrincipals();\n        SimplePrincipalCollection principals = new SimplePrincipalCollection(\n                principalCollection, getName());\n        super.clearCachedAuthorizationInfo(principals);\n    }\n    /**\n     * \xe6\x8c\x87\xe5\xae\x9aprincipalCollection \xe6\xb8\x85\xe9\x99\xa4\n     */\n    public void clearCachedAuthorizationInfo(PrincipalCollection principalCollection) {\n        SimplePrincipalCollection principals = new SimplePrincipalCollection(\n                principalCollection, getName());\n        super.clearCachedAuthorizationInfo(principals);\n    }\n}\n'