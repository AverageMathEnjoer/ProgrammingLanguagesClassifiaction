b'{-# LANGUAGE CPP #-}\n\nmodule Cachix.Client.NixVersion\n  ( assertNixVersion,\n    parseNixVersion,\n  )\nwhere\n\nimport Data.Text as T\nimport Data.Versions\nimport Protolude\nimport System.Process (readProcessWithExitCode)\n\nassertNixVersion :: IO (Either Text ())\nassertNixVersion = do\n  (exitcode, out, err) <- readProcessWithExitCode "nix-env" ["--version"] mempty\n  unless (err == "") $ putStrLn $ "nix-env stderr: " <> err\n  return $ case exitcode of\n    ExitFailure i -> Left $ "\'nix-env --version\' exited with " <> show i\n    ExitSuccess -> parseNixVersion $ toS out\n\nparseNixVersion :: Text -> Either Text ()\nparseNixVersion output =\n  let verStr = T.drop 14 $ T.strip output\n      err = "Couldn\'t parse \'nix-env --version\' output: " <> output\n   in case versioning verStr of\n        Left _ -> Left err\n        Right ver\n          | verStr == "" -> Left err\n          | ver < Ideal minimalVersion -> Left "Nix 2.0.2 or lower is not supported. Please upgrade: https://nixos.org/nix/"\n          | otherwise -> Right ()\n\nminimalVersion :: SemVer\nminimalVersion =\n  SemVer 2 0 1 []\n\n#if MIN_VERSION_versions(0,5,0)\n    Nothing\n#else\n    []\n#endif\n'