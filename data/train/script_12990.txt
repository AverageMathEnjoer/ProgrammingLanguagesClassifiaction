b'/*\nID:\t\tganeshk2\nlang:\tcpp\n*/\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long\t\tll;\ntypedef pair<int, int>\tii;\ntypedef pair<ll, ll>\tpll;\ntypedef vector<int>\t\tvi;\ntypedef vector<ll>\t\tvl;\ntypedef vector<ii>\t\tvii;\ntypedef vector<pll>\t\tvpll;\ntypedef vector<vi>\t\tvvi;\ntypedef vector<vl>\t\tvvl;\n#define si(x)\t\tscanf("%d",&x)\n#define sl(x)\t\tscanf("%I64d",&x)\n#define ss(s)\t\tscanf("%s",s)\n#define pb\t\t\tpush_back\n#define mp\t\t\tmake_pair\n#define rep(i,b,a)  for(i=a;i<b;i++)\n#define f(i,n)      rep(i,n,0)\n#define tr(it,container) for(auto it=container.begin();it!=container.end();++it)\n#define all(a)\t\ta.begin(),a.end()\n#define sortall(a)\tsort(all(a))\n#define mem(a,x)\tmemset(a,x,sizeof(a))\n#define MOD\t\t\t1000000007\n#define PI          3.1415926535897932384626\n#define F\t\t\tfirst\n#define S\t\t\tsecond\n#define endl\t\t\'\\n\'\n/*\nll powe(ll a,ll b) {ll res=1;for(;b;b>>=1){if(b&(1LL))res=(res*a)%MOD;a=a*a%MOD;}return res;}\nint scan_d(){\n\tint ip=getchar_unlocked(),ret=0,flag=1;for(;ip<\'0\'||ip>\'9\';ip=getchar_unlocked())\n\tif(ip==\'-\'){flag=-1;ip=getchar_unlocked();break;}\n\tfor(;ip>=\'0\'&&ip<=\'9\';ip=getchar_unlocked())ret=ret<<1+ret<<3+ip-\'0\';return flag*ret;}\nll scan_lld(){\n\tint ip=getchar_unlocked(),flag=1;ll ret=0;for(;ip<\'0\'||ip>\'9\';ip=getchar_unlocked())\n\tif(ip==\'-\'){flag=-1;ip=getchar_unlocked();break;}\n\tfor(;ip>=\'0\'&&ip<=\'9\';ip=getchar_unlocked())ret=ret<<1+ret<<3+ip-\'0\';return flag*ret;}\n*/\n\ndouble INF = 1e100;\ndouble EPS = 1e-12;\n\nstruct PT { \n  double x, y; \n  PT() {}\n  PT(double x, double y) : x(x), y(y) {}\n  PT(const PT &p) : x(p.x), y(p.y)    {}\n  PT operator + (const PT &p)  const { return PT(x+p.x, y+p.y); }\n  PT operator - (const PT &p)  const { return PT(x-p.x, y-p.y); }\n  PT operator * (double c)     const { return PT(x*c,   y*c  ); }\n  PT operator / (double c)     const { return PT(x/c,   y/c  ); }\n  bool operator <(const PT &p) const {\n    return x < p.x || (x == p.x && y < p.y);\n  }\n};\n\ndouble dot(PT p, PT q)     { return p.x*q.x+p.y*q.y; }\ndouble dist2(PT p, PT q)   { return dot(p-q,p-q); }\ndouble cross(PT p, PT q)   { return p.x*q.y-p.y*q.x; }\nostream &operator<<(ostream &os, const PT &p) {\n  os << "(" << p.x << "," << p.y << ")"; \n}\n\n// rotate a point CCW or CW around the origin\nPT RotateCCW90(PT p)   { return PT(-p.y,p.x); }\nPT RotateCW90(PT p)    { return PT(p.y,-p.x); }\nPT RotateCCW(PT p, double t) { \n  return PT(p.x*cos(t)-p.y*sin(t), p.x*sin(t)+p.y*cos(t)); \n}\n\n// project point c onto line through a and b\n// assuming a != b\nPT ProjectPointLine(PT a, PT b, PT c) {\n  return a + (b-a)*dot(c-a, b-a)/dot(b-a, b-a);\n}\n\n// project point c onto line segment through a and b\nPT ProjectPointSegment(PT a, PT b, PT c) {\n  double r = dot(b-a,b-a);\n  if (fabs(r) < EPS) return a;\n  r = dot(c-a, b-a)/r;\n  if (r < 0) return a;\n  if (r > 1) return b;\n  return a + (b-a)*r;\n}\n\n// compute distance from c to segment between a and b\ndouble DistancePointSegment(PT a, PT b, PT c) {\n  return sqrt(dist2(c, ProjectPointSegment(a, b, c)));\n}\n\n// compute distance between point (x,y,z) and plane ax+by+cz=d\ndouble DistancePointPlane(double x, double y, double z,\n                          double a, double b, double c, double d)\n{\n  return fabs(a*x+b*y+c*z-d)/sqrt(a*a+b*b+c*c);\n}\n\n// determine if lines from a to b and c to d are parallel or collinear\nbool LinesParallel(PT a, PT b, PT c, PT d) { \n  return fabs(cross(b-a, c-d)) < EPS; \n}\n\nbool LinesCollinear(PT a, PT b, PT c, PT d) { \n  return LinesParallel(a, b, c, d)\n      && fabs(cross(a-b, a-c)) < EPS\n      && fabs(cross(c-d, c-a)) < EPS; \n}\n\n// determine if line segment from a to b intersects with \n// line segment from c to d\nbool SegmentsIntersect(PT a, PT b, PT c, PT d) {\n  if (LinesCollinear(a, b, c, d)) {\n    if (dist2(a, c) < EPS || dist2(a, d) < EPS ||\n      dist2(b, c) < EPS || dist2(b, d) < EPS) return true;\n    if (dot(c-a, c-b) > 0 && dot(d-a, d-b) > 0 && dot(c-b, d-b) > 0)\n      return false;\n    return true;\n  }\n  if (cross(d-a, b-a) * cross(c-a, b-a) > 0) return false;\n  if (cross(a-c, d-c) * cross(b-c, d-c) > 0) return false;\n  return true;\n}\n\n// compute intersection of line passing through a and b\n// with line passing through c and d, assuming that unique\n// intersection exists; for segment intersection, check if\n// segments intersect first\nPT ComputeLineIntersection(PT a, PT b, PT c, PT d) {\n  b=b-a; d=c-d; c=c-a;\n  assert(dot(b, b) > EPS && dot(d, d) > EPS);\n  return a + b*cross(c, d)/cross(b, d);\n}\n\n// compute center of circle given three points\nPT ComputeCircleCenter(PT a, PT b, PT c) {\n  b=(a+b)/2;\n  c=(a+c)/2;\n  return ComputeLineIntersection(b, b+RotateCW90(a-b), c, c+RotateCW90(a-c));\n}\n\n// determine if point is in a possibly non-convex polygon (by William\n// Randolph Franklin); returns 1 for strictly interior points, 0 for\n// strictly exterior points, and 0 or 1 for the remaining points.\n// Note that it is possible to convert this into an *exact* test using\n// integer arithmetic by taking care of the division appropriately\n// (making sure to deal with signs properly) and then by writing exact\n// tests for checking point on polygon boundary\nbool PointInPolygon(const vector<PT> &p, PT q) {\n  bool c = 0;\n  for (int i = 0; i < p.size(); i++){\n    int j = (i+1)%p.size();\n    if ((p[i].y <= q.y && q.y < p[j].y || \n      p[j].y <= q.y && q.y < p[i].y) &&\n      q.x < p[i].x + (p[j].x - p[i].x) * (q.y - p[i].y) / (p[j].y - p[i].y))\n      c = !c;\n  }\n  return c;\n}\n\n// determine if point is on the boundary of a polygon\nbool PointOnPolygon(const vector<PT> &p, PT q) {\n  for (int i = 0; i < p.size(); i++)\n    if (dist2(ProjectPointSegment(p[i], p[(i+1)%p.size()], q), q) < EPS)\n      return true;\n    return false;\n}\n\n// compute intersection of line through points a and b with\n// circle centered at c with radius r > 0\nvector<PT> CircleLineIntersection(PT a, PT b, PT c, double r) {\n  vector<PT> ret;\n  b = b-a;\n  a = a-c;\n  double A = dot(b, b);\n  double B = dot(a, b);\n  double C = dot(a, a) - r*r;\n  double D = B*B - A*C;\n  if (D < -EPS) return ret;\n  ret.push_back(c+a+b*(-B+sqrt(D+EPS))/A);\n  if (D > EPS)\n    ret.push_back(c+a+b*(-B-sqrt(D))/A);\n  return ret;\n}\n\n// compute intersection of circle centered at a with radius r\n// with circle centered at b with radius R\nvector<PT> CircleCircleIntersection(PT a, PT b, double r, double R) {\n  vector<PT> ret;\n  double d = sqrt(dist2(a, b));\n  if (d > r+R || d+min(r, R) < max(r, R)) return ret;\n  double x = (d*d-R*R+r*r)/(2*d);\n  double y = sqrt(r*r-x*x);\n  PT v = (b-a)/d;\n  ret.push_back(a+v*x + RotateCCW90(v)*y);\n  if (y > 0)\n    ret.push_back(a+v*x - RotateCCW90(v)*y);\n  return ret;\n}\n\n// This code computes the area or centroid of a (possibly nonconvex)\n// polygon, assuming that the coordinates are listed in a clockwise or\n// counterclockwise fashion.  Note that the centroid is often known as\n// the "center of gravity" or "center of mass".\ndouble ComputeSignedArea(const vector<PT> &p) {\n  double area = 0;\n  for(int i = 0; i < p.size(); i++) {\n    int j = (i+1) % p.size();\n    area += p[i].x*p[j].y - p[j].x*p[i].y;\n  }\n  return area / 2.0;\n}\n\ndouble ComputeArea(const vector<PT> &p) {\n  return fabs(ComputeSignedArea(p));\n}\n\nPT ComputeCentroid(const vector<PT> &p) {\n  PT c(0,0);\n  double scale = 6.0 * ComputeSignedArea(p);\n  for (int i = 0; i < p.size(); i++){\n    int j = (i+1) % p.size();\n    c = c + (p[i]+p[j])*(p[i].x*p[j].y - p[j].x*p[i].y);\n  }\n  return c / scale;\n}\n\n// tests whether or not a given polygon (in CW or CCW order) is simple\nbool IsSimple(const vector<PT> &p) {\n  for (int i = 0; i < p.size(); i++) {\n    for (int k = i+1; k < p.size(); k++) {\n      int j = (i+1) % p.size();\n      int l = (k+1) % p.size();\n      if (i == l || j == k) continue;\n      if (SegmentsIntersect(p[i], p[j], p[k], p[l])) \n        return false;\n    }\n  }\n  return true;\n}\n\n// 2D cross product of OA and OB vectors, i.e. z-component of their 3D cross product.\n// Returns a positive value, if OAB makes a counter-clockwise turn,\n// negative for clockwise turn, and zero if the points are collinear.\ndouble cross(const PT &O, const PT &A, const PT &B)\n{\n  return (long)(A.x - O.x) * (B.y - O.y) - (long)(A.y - O.y) * (B.x - O.x);\n}\n\n// Returns a list of points on the convex hull in counter-clockwise order.\n// Note: the last point in the returned list is the same as the first one.\nvector<PT> convex_hull(vector<PT> P)\n{\n  int n = P.size(), k = 0;\n  vector<PT> H(2*n);\n\n  // Sort points lexicographically\n  sort(P.begin(), P.end());\n\n  // Build lower hull\n  for (int i = 0; i < n; ++i) {\n    while (k >= 2 && cross(H[k-2], H[k-1], P[i]) <= 0) k--;\n    H[k++] = P[i];\n  }\n\n  // Build upper hull\n  for (int i = n-2, t = k+1; i >= 0; i--) {\n    while (k >= t && cross(H[k-2], H[k-1], P[i]) <= 0) k--;\n    H[k++] = P[i];\n  }\n\n  H.resize(k);\n  return H;\n}\n\n\nint main() {\n  \n  // expected: (-5,2)\n  cerr << RotateCCW90(PT(2,5)) << endl;\n  \n  // expected: (5,-2)\n  cerr << RotateCW90(PT(2,5)) << endl;\n  \n  // expected: (-5,2)\n  cerr << RotateCCW(PT(2,5),M_PI/2) << endl;\n  \n  // expected: (5,2)\n  cerr << ProjectPointLine(PT(-5,-2), PT(10,4), PT(3,7)) << endl;\n  \n  // expected: (5,2) (7.5,3) (2.5,1)\n  cerr << ProjectPointSegment(PT(-5,-2), PT(10,4), PT(3,7)) << " "\n       << ProjectPointSegment(PT(7.5,3), PT(10,4), PT(3,7)) << " "\n       << ProjectPointSegment(PT(-5,-2), PT(2.5,1), PT(3,7)) << endl;\n  \n  // expected: 6.78903\n  cerr << DistancePointPlane(4,-4,3,2,-2,5,-8) << endl;\n  \n  // expected: 1 0 1\n  cerr << LinesParallel(PT(1,1), PT(3,5), PT(2,1), PT(4,5)) << " "\n       << LinesParallel(PT(1,1), PT(3,5), PT(2,0), PT(4,5)) << " "\n       << LinesParallel(PT(1,1), PT(3,5), PT(5,9), PT(7,13)) << endl;\n  \n  // expected: 0 0 1\n  cerr << LinesCollinear(PT(1,1), PT(3,5), PT(2,1), PT(4,5)) << " "\n       << LinesCollinear(PT(1,1), PT(3,5), PT(2,0), PT(4,5)) << " "\n       << LinesCollinear(PT(1,1), PT(3,5), PT(5,9), PT(7,13)) << endl;\n  \n  // expected: 1 1 1 0\n  cerr << SegmentsIntersect(PT(0,0), PT(2,4), PT(3,1), PT(-1,3)) << " "\n       << SegmentsIntersect(PT(0,0), PT(2,4), PT(4,3), PT(0,5)) << " "\n       << SegmentsIntersect(PT(0,0), PT(2,4), PT(2,-1), PT(-2,1)) << " "\n       << SegmentsIntersect(PT(0,0), PT(2,4), PT(5,5), PT(1,7)) << endl;\n  \n  // expected: (1,2)\n  cerr << ComputeLineIntersection(PT(0,0), PT(2,4), PT(3,1), PT(-1,3)) << endl;\n  \n  // expected: (1,1)\n  cerr << ComputeCircleCenter(PT(-3,4), PT(6,1), PT(4,5)) << endl;\n  \n  vector<PT> v; \n  v.push_back(PT(0,0));\n  v.push_back(PT(5,0));\n  v.push_back(PT(5,5));\n  v.push_back(PT(0,5));\n  \n  // expected: 1 1 1 0 0\n  cerr << PointInPolygon(v, PT(2,2)) << " "\n       << PointInPolygon(v, PT(2,0)) << " "\n       << PointInPolygon(v, PT(0,2)) << " "\n       << PointInPolygon(v, PT(5,2)) << " "\n       << PointInPolygon(v, PT(2,5)) << endl;\n  \n  // expected: 0 1 1 1 1\n  cerr << PointOnPolygon(v, PT(2,2)) << " "\n       << PointOnPolygon(v, PT(2,0)) << " "\n       << PointOnPolygon(v, PT(0,2)) << " "\n       << PointOnPolygon(v, PT(5,2)) << " "\n       << PointOnPolygon(v, PT(2,5)) << endl;\n  \n  // expected: (1,6)\n  //           (5,4) (4,5)\n  //           blank line\n  //           (4,5) (5,4)\n  //           blank line\n  //           (4,5) (5,4)\n  vector<PT> u = CircleLineIntersection(PT(0,6), PT(2,6), PT(1,1), 5);\n  for (int i = 0; i < u.size(); i++) cerr << u[i] << " "; cerr << endl;\n  u = CircleLineIntersection(PT(0,9), PT(9,0), PT(1,1), 5);\n  for (int i = 0; i < u.size(); i++) cerr << u[i] << " "; cerr << endl;\n  u = CircleCircleIntersection(PT(1,1), PT(10,10), 5, 5);\n  for (int i = 0; i < u.size(); i++) cerr << u[i] << " "; cerr << endl;\n  u = CircleCircleIntersection(PT(1,1), PT(8,8), 5, 5);\n  for (int i = 0; i < u.size(); i++) cerr << u[i] << " "; cerr << endl;\n  u = CircleCircleIntersection(PT(1,1), PT(4.5,4.5), 10, sqrt(2.0)/2.0);\n  for (int i = 0; i < u.size(); i++) cerr << u[i] << " "; cerr << endl;\n  u = CircleCircleIntersection(PT(1,1), PT(4.5,4.5), 5, sqrt(2.0)/2.0);\n  for (int i = 0; i < u.size(); i++) cerr << u[i] << " "; cerr << endl;\n  \n  // area should be 5.0\n  // centroid should be (1.1666666, 1.166666)\n  PT pa[] = { PT(0,0), PT(5,0), PT(1,1), PT(0,5) };\n  vector<PT> p(pa, pa+4);\n  PT c = ComputeCentroid(p);\n  cerr << "Area: " << ComputeArea(p) << endl;\n  cerr << "Centroid: " << c << endl;\n  \n  return 0;\n}\n\n'