b'/**\n * Copyright (C) 2020 Fernando Cejas Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.fernandocejas.sample.features.movies\n\nimport com.fernandocejas.sample.core.exception.Failure\nimport com.fernandocejas.sample.core.exception.Failure.NetworkConnection\nimport com.fernandocejas.sample.core.exception.Failure.ServerError\nimport com.fernandocejas.sample.core.functional.Either\nimport com.fernandocejas.sample.core.functional.Either.Left\nimport com.fernandocejas.sample.core.functional.Either.Right\nimport com.fernandocejas.sample.core.platform.NetworkHandler\nimport retrofit2.Call\nimport javax.inject.Inject\n\ninterface MoviesRepository {\n    fun movies(): Either<Failure, List<Movie>>\n    fun movieDetails(movieId: Int): Either<Failure, MovieDetails>\n\n    class Network\n    @Inject constructor(\n        private val networkHandler: NetworkHandler,\n        private val service: MoviesService\n    ) : MoviesRepository {\n\n        override fun movies(): Either<Failure, List<Movie>> {\n            return when (networkHandler.isNetworkAvailable()) {\n                true -> request(\n                    service.movies(),\n                    { it.map { movieEntity -> movieEntity.toMovie() } },\n                    emptyList()\n                )\n                false -> Left(NetworkConnection)\n            }\n        }\n\n        override fun movieDetails(movieId: Int): Either<Failure, MovieDetails> {\n            return when (networkHandler.isNetworkAvailable()) {\n                true -> request(\n                    service.movieDetails(movieId),\n                    { it.toMovieDetails() },\n                    MovieDetailsEntity.empty\n                )\n                false -> Left(NetworkConnection)\n            }\n        }\n\n        private fun <T, R> request(\n            call: Call<T>,\n            transform: (T) -> R,\n            default: T\n        ): Either<Failure, R> {\n            return try {\n                val response = call.execute()\n                when (response.isSuccessful) {\n                    true -> Right(transform((response.body() ?: default)))\n                    false -> Left(ServerError)\n                }\n            } catch (exception: Throwable) {\n                Left(ServerError)\n            }\n        }\n    }\n}\n'