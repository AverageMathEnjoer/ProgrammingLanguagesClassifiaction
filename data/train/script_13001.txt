b'{-# LANGUAGE\n    CPP\n  , FlexibleContexts\n  #-}\n#if MIN_VERSION_base(4,9,0)\n{-# OPTIONS_GHC -Wno-redundant-constraints #-}\n#endif\nmodule Rest.Driver.Happstack.Docs (apiDocsHandler) where\n\nimport Control.Monad\nimport Control.Monad.Trans\nimport Happstack.Server\nimport Rest.Api\nimport Rest.Gen.Base\nimport Rest.Gen.Docs\n\n-- | Web interface for documentation\napiDocsHandler :: (ServerMonad m, MonadPlus m, FilterMonad Response m, MonadIO m) => String -> String -> Api a -> m Response\napiDocsHandler rootURL tmpls api =\n  let mkCtx v ct = DocsContext (rootURL ++ ct ++ "/") v tmpls\n      serve ctx = serveDocs ctx . sortTree . noPrivate . (\\(Some1 r) -> apiSubtrees r)\n  in path $ \\i -> withVersion i api mzero $ \\v -> serve (mkCtx v i)\n\nserveDocs :: (ServerMonad m, MonadPlus m, FilterMonad Response m, MonadIO m) => DocsContext -> ApiResource -> m Response\nserveDocs ctx tree =\n  msum\n    [ nullDir >> allDocsHandler ctx tree\n    , docHandlers ctx tree\n    ]\n\nallDocsHandler :: (ServerMonad m, MonadPlus m, FilterMonad Response m, MonadIO m) => DocsContext -> ApiResource -> m Response\nallDocsHandler ctx tree =\n  do pg <- liftIO $ mkAllResources ctx tree\n     setHeaderM "Content-Type" "text/html"\n     return $ toResponse pg\n\ndocHandlers :: (ServerMonad m, MonadPlus m, FilterMonad Response m, MonadIO m) => DocsContext -> ApiResource -> m Response\ndocHandlers ctx = foldTreeChildren msum $ \\it subs ->\n  dir (resName it) $ msum $\n       (nullDir >> do pg <- liftIO $ mkSingleResource ctx it\n                      setHeaderM "Content-Type" "text/html"\n                      return $ toResponse pg\n       )\n     : subs\n'