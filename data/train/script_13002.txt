b'package id.zelory.compressor\n\nimport android.content.Context\nimport android.graphics.Bitmap\nimport android.graphics.BitmapFactory\nimport com.natpryce.hamkrest.assertion.assertThat\nimport com.natpryce.hamkrest.equalTo\nimport io.mockk.Runs\nimport io.mockk.every\nimport io.mockk.just\nimport io.mockk.mockk\nimport io.mockk.mockkStatic\nimport io.mockk.unmockkAll\nimport io.mockk.verify\nimport org.junit.After\nimport org.junit.Test\nimport java.io.File\n\n/**\n * Created on : January 25, 2020\n * Author     : zetbaitsu\n * Name       : Zetra\n * GitHub     : https://github.com/zetbaitsu\n */\nclass UtilTest {\n\n    @After\n    fun teardown() {\n        unmockkAll()\n    }\n\n    @Test\n    fun `get compress format from file should return correct format`() {\n        assertThat(File("a_file.png").compressFormat(), equalTo(Bitmap.CompressFormat.PNG))\n        assertThat(File("a_file.webp").compressFormat(), equalTo(Bitmap.CompressFormat.WEBP))\n        assertThat(File("a_file.jpg").compressFormat(), equalTo(Bitmap.CompressFormat.JPEG))\n        assertThat(File("a_file.jpeg").compressFormat(), equalTo(Bitmap.CompressFormat.JPEG))\n    }\n\n    @Test\n    fun `get extension from compress format should return correct extension`() {\n        assertThat(Bitmap.CompressFormat.PNG.extension(), equalTo("png"))\n        assertThat(Bitmap.CompressFormat.WEBP.extension(), equalTo("webp"))\n        assertThat(Bitmap.CompressFormat.JPEG.extension(), equalTo("jpg"))\n    }\n\n    @Test\n    fun `load bitmap should determine image rotation`() {\n        // Given\n        mockkStatic(BitmapFactory::class)\n        every { BitmapFactory.decodeFile(any()) } returns mockk()\n        mockkStatic("id.zelory.compressor.UtilKt")\n        every { determineImageRotation(any(), any()) } returns mockk()\n\n        // When\n        loadBitmap(mockk(relaxed = true))\n\n        // Then\n        verify { determineImageRotation(any(), any()) }\n    }\n\n    @Test\n    fun `decode sampled bitmap should decode with subsampling`() {\n        // Given\n        mockkStatic(BitmapFactory::class)\n        every { BitmapFactory.decodeFile(any(), any()) } returns mockk()\n        mockkStatic("id.zelory.compressor.UtilKt")\n        val inSampleSize = 2\n        every { calculateInSampleSize(any(), any(), any()) } returns inSampleSize\n\n        // When\n        decodeSampledBitmapFromFile(mockk(relaxed = true), 100, 100)\n\n        // Then\n        verify {\n            BitmapFactory.decodeFile(any(), match {\n                it.inSampleSize == inSampleSize\n            })\n        }\n    }\n\n    @Test\n    fun `when request half of resolution, it should return 2 in sample size`() {\n        // Given\n        val options = BitmapFactory.Options().apply {\n            outWidth = 800\n            outHeight = 800\n        }\n\n        // When + Then\n        assertThat(calculateInSampleSize(options, 400, 400), equalTo(2))\n    }\n\n    @Test\n    fun `when resolution requested greater than actual resolution, it should return 1 in sample size`() {\n        // Given\n        val options = BitmapFactory.Options().apply {\n            outWidth = 800\n            outHeight = 800\n        }\n\n        // When + Then\n        assertThat(calculateInSampleSize(options, 1000, 1000), equalTo(1))\n    }\n\n    @Test\n    fun `when partial resolution requested greater than actual resolution, it should return 1 in sample size`() {\n        // Given\n        val options = BitmapFactory.Options().apply {\n            outWidth = 800\n            outHeight = 800\n        }\n\n        // When + Then\n        assertThat(calculateInSampleSize(options, 1000, 500), equalTo(1))\n    }\n\n    @Test\n    fun `when resolution requested less than actual resolution but greater than of half it, it should return 1 in sample size`() {\n        // Given\n        val options = BitmapFactory.Options().apply {\n            outWidth = 800\n            outHeight = 800\n        }\n\n        // When + Then\n        assertThat(calculateInSampleSize(options, 500, 500), equalTo(1))\n    }\n\n    @Test\n    fun `when request 25% of resolution, it should return 4 in sample size`() {\n        // Given\n        val options = BitmapFactory.Options().apply {\n            outWidth = 800\n            outHeight = 800\n        }\n\n        // When + Then\n        assertThat(calculateInSampleSize(options, 200, 200), equalTo(4))\n    }\n\n    @Test\n    fun `when width 25% and height 50% of resolution, it should return min sample size (height)`() {\n        // Given\n        val options = BitmapFactory.Options().apply {\n            outWidth = 800\n            outHeight = 800\n        }\n\n        // When + Then\n        assertThat(calculateInSampleSize(options, 200, 400), equalTo(2))\n    }\n\n    @Test\n    fun `copy to cache should copy file to right folder`() {\n        // Given\n        val context = mockk<Context>(relaxed = true)\n        every { context.cacheDir.path } returns "folder/"\n\n        mockkStatic("kotlin.io.FilesKt__UtilsKt")\n        every { any<File>().copyTo(any(), any(), any()) } returns mockk(relaxed = true)\n\n        val source = File("image.jpg")\n\n        // When\n        copyToCache(context, File("image.jpg"))\n\n        // Then\n        verify {\n            source.copyTo(File("folder/compressor/image.jpg"), true, any())\n        }\n    }\n\n    @Test\n    fun `overwrite should delete old file and save new bitmap`() {\n        // Given\n        mockkStatic("id.zelory.compressor.UtilKt")\n        every { saveBitmap(any(), any(), any(), any()) } just Runs\n\n        val imageFile = mockk<File>(relaxed = true)\n        val bitmap = mockk<Bitmap>(relaxed = true)\n\n        // When\n        overWrite(imageFile, bitmap)\n\n        // Then\n        verify {\n            imageFile.delete()\n            saveBitmap(bitmap, imageFile, any(), any())\n        }\n    }\n\n    @Test\n    fun `overwrite with different format should save image with new format extension`() {\n        // Given\n        mockkStatic("id.zelory.compressor.UtilKt")\n        every { saveBitmap(any(), any(), any(), any()) } just Runs\n\n        val imageFile = File("image.jpg")\n        val bitmap = mockk<Bitmap>(relaxed = true)\n\n        // When\n        val result = overWrite(imageFile, bitmap, Bitmap.CompressFormat.PNG)\n\n        // Then\n        assertThat(result.extension, equalTo("png"))\n    }\n}'