b'\xef\xbb\xbf// UVa506 System Dependencies\n// Rujia Liu\n// \xe6\xb3\xa8\xe6\x84\x8f\xef\xbc\x9a\xe6\x98\xbe\xe5\xbc\x8f\xe5\xae\x89\xe8\xa3\x85\xe7\x9a\x84\xe5\xbf\x85\xe9\xa1\xbb\xe6\x98\xbe\xe5\xbc\x8f\xe5\x88\xa0\xe9\x99\xa4\n#include<iostream>\n#include<cstring>\n#include<string>\n#include<sstream>\n#include<vector>\n#include<algorithm>\n#include<map>\nusing namespace std;\n\nconst int maxn = 10000;\n\nint cnt = 0;\nmap<string, int> name2id;\nstring name[maxn];\n\nvector<int> depend[maxn], depend2[maxn];\nint status[maxn]; // 0-not installed, 1-explicitly installed, 2-implicitly installed\nvector<int> installed;\n\nint ID(const string& item) {\n  if(!name2id.count(item)) {\n    name[++cnt] = item;\n    name2id[item] = cnt;\n  }\n  return name2id[item];\n}\n\nbool needed(int item) {\n  for(int i = 0; i < depend2[item].size(); i++)\n    if(status[depend2[item][i]]) return true;\n  return false;\n}\n\nvoid install(int item, bool toplevel) {\n  if(!status[item]) {\n    for(int i = 0; i < depend[item].size(); i++)\n      install(depend[item][i], false);\n    cout << "   Installing " << name[item] << "\\n";\n    status[item] = toplevel ? 1 : 2;\n    installed.push_back(item);\n  }\n}\n\nvoid remove(int item, bool toplevel) {\n  if((toplevel || status[item] == 2) && !needed(item)) {\n    status[item] = 0;\n    installed.erase(remove(installed.begin(), installed.end(), item), installed.end());\n    cout << "   Removing " << name[item] << "\\n";\n    for(int i = 0; i < depend[item].size(); i++)\n      remove(depend[item][i], false);\n  }\n}\n\n// \xe6\x8c\x89\xe7\x85\xa7\xe5\xae\x89\xe8\xa3\x85\xe9\xa1\xba\xe5\xba\x8f\xe8\xbe\x93\xe5\x87\xba\nvoid list() {\n  for(int i = 0; i < installed.size(); i++)\n    cout << "   " << name[installed[i]] << "\\n";\n}\n\nint main() {\n  string line, cmd;\n  memset(status, 0, sizeof(status));\n  while(getline(cin, line)) {\n    cout << line << "\\n";\n    stringstream ss(line);\n    ss >> cmd;\n    if(cmd[0] == \'E\') break;    \n    string item1, item2;\n    if(cmd[0] == \'L\') list();\n    else {\n      ss >> item1;\n      int i1 = ID(item1);\n      if(cmd[0] == \'D\') {\n        while(ss >> item2) {\n          int i2 = ID(item2);\n          depend[i1].push_back(i2);\n          depend2[i2].push_back(i1);\n        }\n      }\n      else if(cmd[0] == \'I\') {\n        if(status[i1]) cout << "   " << item1 << " is already installed.\\n";\n        else install(i1, true);\n      }\n      else {\n        if(!status[i1]) cout << "   " << item1 << " is not installed.\\n";\n        else if(needed(i1)) cout << "   " << item1 << " is still needed.\\n";\n        else remove(i1, true);\n      }\n    }\n  }\n  return 0;\n}\n'