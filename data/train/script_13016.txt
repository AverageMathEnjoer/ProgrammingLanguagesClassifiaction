b'/*\n    SPDX-FileCopyrightText: 2020 Milian Wolff <mail@milianw.de>\n\n    SPDX-License-Identifier: LGPL-2.1-or-later\n*/\n\n#include "costheaderview.h"\n\n#include <QDebug>\n#include <QEvent>\n#include <QMenu>\n#include <QPainter>\n#include <QScopedValueRollback>\n\n#include <cmath>\n\nCostHeaderView::CostHeaderView(QWidget* parent)\n    : QHeaderView(Qt::Horizontal, parent)\n{\n#if QT_VERSION >= QT_VERSION_CHECK(5, 11, 0)\n    setSectionsMovable(true);\n    setFirstSectionMovable(false);\n#endif\n    setDefaultSectionSize(100);\n    setStretchLastSection(false);\n    connect(this, &QHeaderView::sectionCountChanged, this, [this]() { resizeColumns(false); });\n    connect(this, &QHeaderView::sectionResized, this, [this](int index, int oldSize, int newSize) {\n        if (m_isResizing)\n            return;\n        QScopedValueRollback<bool> guard(m_isResizing, true);\n        if (index != 0) {\n            // give/take space from first column\n            resizeSection(0, sectionSize(0) - (newSize - oldSize));\n        } else {\n            // distribute space across all columns\n            // use actual width as oldSize/newSize isn\'t reliable here\n            const auto numSections = count();\n            int usedWidth = 0;\n            for (int i = 0; i < numSections; ++i)\n                usedWidth += sectionSize(i);\n            const auto diff = usedWidth - width();\n            const auto numVisibleSections = numSections - hiddenSectionCount();\n            if (numVisibleSections == 0)\n                return;\n\n            const auto diffPerSection = diff / numVisibleSections;\n            const auto extraDiff = diff % numVisibleSections;\n            for (int i = 1; i < numSections; ++i) {\n                if (isSectionHidden(i)) {\n                    continue;\n                }\n                auto newSize = sectionSize(i) - diffPerSection;\n                if (i == numSections - 1)\n                    newSize -= extraDiff;\n                resizeSection(i, newSize);\n            }\n        }\n    });\n\n    setContextMenuPolicy(Qt::CustomContextMenu);\n    connect(this, &QHeaderView::customContextMenuRequested, this, [this](const QPoint& pos) {\n        const auto numSections = count();\n\n        QMenu menu;\n        auto resetSizes = menu.addAction(tr("Reset Column Sizes"));\n        connect(resetSizes, &QAction::triggered, this, [this]() { resizeColumns(true); });\n\n        if (numSections > 1) {\n            auto* subMenu = menu.addMenu(tr("Visible Columns"));\n            for (int i = 1; i < numSections; ++i) {\n                auto* action = subMenu->addAction(model()->headerData(i, Qt::Horizontal).toString());\n                action->setCheckable(true);\n                action->setChecked(!isSectionHidden(i));\n                connect(action, &QAction::toggled, this, [this, i](bool visible) { setSectionHidden(i, !visible); });\n            }\n        }\n\n        menu.exec(mapToGlobal(pos));\n    });\n}\n\nCostHeaderView::~CostHeaderView() = default;\n\nvoid CostHeaderView::resizeEvent(QResizeEvent* event)\n{\n    QHeaderView::resizeEvent(event);\n    resizeColumns(false);\n}\n\nvoid CostHeaderView::resizeColumns(bool reset)\n{\n    const auto numColumns = count();\n    if (!numColumns) {\n        return;\n    }\n\n    QScopedValueRollback<bool> guard(m_isResizing, true);\n    auto availableWidth = width();\n    const auto defaultSize = defaultSectionSize();\n\n    for (int i = numColumns - 1; i >= 0; --i) {\n        if (i == 0) {\n            resizeSection(i, std::max(availableWidth, defaultSize));\n        } else if (reset) {\n            resizeSection(i, defaultSize);\n        }\n        if (!isSectionHidden(i)) {\n            availableWidth -= sectionSize(i);\n        }\n    }\n}\n'