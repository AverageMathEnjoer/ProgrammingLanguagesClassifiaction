b'package com.quyunshuo.androidbaseframemvvm.base.utils\n\nimport java.text.ParseException\nimport java.text.SimpleDateFormat\nimport java.util.*\n\n/**\n * \xe6\x97\xb6\xe9\x97\xb4\xe5\xb7\xa5\xe5\x85\xb7\xe7\xb1\xbb\n * ________________________________________________________________________________________\n * |\xe5\xad\x97\xe6\xaf\x8d\t|\xe6\x97\xa5\xe6\x9c\x9f\xe6\x88\x96\xe6\x97\xb6\xe9\x97\xb4\xe5\x85\x83\xe7\xb4\xa0\t       | \xe8\xa1\xa8\xe7\xa4\xba\t           | \xe7\xa4\xba\xe4\xbe\x8b                                  |\n * |:--:|:--------------------:|:-----------------:|:------------------------------------:|\n * |G\t|Era \xe6\xa0\x87\xe5\xbf\x97\xe7\xac\xa6\t           | Text\t           | AD                                   |\n * |y\t|\xe5\xb9\xb4\t                   | Year              | 1996; 96                             |\n * |M\t|\xe5\xb9\xb4\xe4\xb8\xad\xe7\x9a\x84\xe6\x9c\x88\xe4\xbb\xbd\t           | Month\t           | July; Jul; 07                        |\n * |w\t|\xe5\xb9\xb4\xe4\xb8\xad\xe7\x9a\x84\xe5\x91\xa8\xe6\x95\xb0\t           | Number            | 27                                   |\n * |W\t|\xe6\x9c\x88\xe4\xbb\xbd\xe4\xb8\xad\xe7\x9a\x84\xe5\x91\xa8\xe6\x95\xb0\t           | Number            | 2                                    |\n * |D\t|\xe5\xb9\xb4\xe4\xb8\xad\xe7\x9a\x84\xe5\xa4\xa9\xe6\x95\xb0\t           | Number            | 189                                  |\n * |d\t|\xe6\x9c\x88\xe4\xbb\xbd\xe4\xb8\xad\xe7\x9a\x84\xe5\xa4\xa9\xe6\x95\xb0\t           | Number            | 10                                   |\n * |F\t|\xe6\x9c\x88\xe4\xbb\xbd\xe4\xb8\xad\xe7\x9a\x84\xe6\x98\x9f\xe6\x9c\x9f\t           | Number            | 2                                    |\n * |E\t|\xe6\x98\x9f\xe6\x9c\x9f\xe4\xb8\xad\xe7\x9a\x84\xe5\xa4\xa9\xe6\x95\xb0\t           | Text\t           | Tuesday; Tue                         |\n * |a\t|Am/pm \xe6\xa0\x87\xe8\xae\xb0\t           | Text\t           | PM                                   |\n * |H\t|\xe4\xb8\x80\xe5\xa4\xa9\xe4\xb8\xad\xe7\x9a\x84\xe5\xb0\x8f\xe6\x97\xb6\xe6\x95\xb0(0-23)    |  Number            | 0                                    |\n * |k\t|\xe4\xb8\x80\xe5\xa4\xa9\xe4\xb8\xad\xe7\x9a\x84\xe5\xb0\x8f\xe6\x97\xb6\xe6\x95\xb0(1-24\xef\xbc\x89   |  Number            | 24                                   |\n * |K\t|am/pm \xe4\xb8\xad\xe7\x9a\x84\xe5\xb0\x8f\xe6\x97\xb6\xe6\x95\xb0(0-11) |  Number            | 0                                    |\n * |h\t|am/pm \xe4\xb8\xad\xe7\x9a\x84\xe5\xb0\x8f\xe6\x97\xb6\xe6\x95\xb0(1-12) |  Number            | 12                                   |\n * |m\t|\xe5\xb0\x8f\xe6\x97\xb6\xe4\xb8\xad\xe7\x9a\x84\xe5\x88\x86\xe9\x92\x9f\xe6\x95\xb0\t       | Number            | 30                                   |\n * |s\t|\xe5\x88\x86\xe9\x92\x9f\xe4\xb8\xad\xe7\x9a\x84\xe7\xa7\x92\xe6\x95\xb0\t           | Number            | 55                                   |\n * |S\t|\xe6\xaf\xab\xe7\xa7\x92\xe6\x95\xb0\t               | Number            | 978                                  |\n * |z\t|\xe6\x97\xb6\xe5\x8c\xba\t               | General time zone | Pacific Standard Time; PST; GMT-08:00|\n * |Z\t|\xe6\x97\xb6\xe5\x8c\xba\t               | RFC 822 time zone | -0800                                |\n * \xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\xef\xbf\xa3\n * @author Qu Yunshuo\n * @since 2020/9/8\n */\nobject DateUtils {\n\n    /**\n     * \xe8\x8e\xb7\xe5\x8f\x96\xe6\x97\xb6\xe9\x97\xb4\xe6\xa0\xbc\xe5\xbc\x8f\xe5\x8c\x96String\n     * @param timestamp \xe6\x97\xb6\xe9\x97\xb4\xe6\x88\xb3\n     * @param dateFormat \xe6\x97\xa5\xe6\x9c\x9f\xe6\xa0\xbc\xe5\xbc\x8f\n     * @return \xe6\xa0\xbc\xe5\xbc\x8f\xe5\x8c\x96\xe5\x90\x8e\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\n     */\n    fun getDateFormatString(timestamp: Long, dateFormat: String): String =\n        SimpleDateFormat(dateFormat, Locale.CHINESE).format(Date(timestamp))\n\n    /**\n     * \xe5\xb0\x86\xe5\x9b\xba\xe5\xae\x9a\xe6\xa0\xbc\xe5\xbc\x8f[dateFormat]\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2[dateString]\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xba\xe6\x97\xb6\xe9\x97\xb4\xe5\x80\xbc\n     */\n    fun getDateStringToDate(dateString: String, dateFormat: String): Long? {\n        val simpleDateFormat = SimpleDateFormat(dateFormat, Locale.CHINESE)\n        var date: Date? = null\n        try {\n            date = simpleDateFormat.parse(dateString)\n        } catch (e: ParseException) {\n            e.printStackTrace()\n        }\n        return date?.time\n    }\n\n    /**\n     * \xe5\xb0\x86\xe8\xae\xa1\xe6\x97\xb6\xe6\xaf\xab\xe7\xa7\x92\xe5\x80\xbc[millisecond]\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xba\xe6\x97\xb6\xe5\x88\x86\xe7\xa7\x92\n     */\n    fun getGapTime(millisecond: Long): String {\n        val hours = millisecond / (1000 * 60 * 60)\n        val minutes = (millisecond - hours * (1000 * 60 * 60)) / (1000 * 60)\n        val second = (millisecond - hours * (1000 * 60 * 60) - minutes * (1000 * 60)) / 1000\n        var diffTime: String\n        diffTime = if (minutes < 10) {\n            "$hours:0$minutes"\n        } else {\n            "$hours:$minutes"\n        }\n        diffTime = if (second < 10) {\n            "$diffTime:0$second"\n        } else {\n            "$diffTime:$second"\n        }\n        return diffTime\n    }\n\n    /**\n     * \xe8\x8e\xb7\xe5\x8f\x96\xe4\xbb\xa5\xe5\xbd\x93\xe5\x89\x8d\xe6\x97\xa5\xe6\x9c\x9f\xe4\xb8\xba\xe5\x9f\xba\xe5\x87\x86\xe7\x9a\x84\xe6\x9f\x90\xe4\xb8\x80\xe6\x97\xb6\xe9\x97\xb4\xe6\xae\xb5\xe7\x9a\x84\xe6\x97\xa5\xe6\x9c\x9f\n     * @param isFuture Boolean \xe7\x9c\x9f\xe4\xb8\xba\xe6\x9c\xaa\xe6\x9d\xa5\xe6\x97\xb6\xe9\x97\xb4 \xe5\x81\x87\xe4\xb8\xba\xe4\xbb\xa5\xe5\x89\x8d\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\n     * @param interval Int \xe9\x97\xb4\xe9\x9a\x94\xe6\x97\xb6\xe9\x97\xb4 \xe4\xbb\xa5\xe5\xbd\x93\xe5\x89\x8d\xe6\x97\xb6\xe9\x97\xb4\xe4\xb8\xba\xe5\x9f\xba\xe5\x87\x86 \xe8\xb7\x9d\xe4\xbb\x8a\xe5\xa4\xa9\xe5\x89\x8dn\xe5\xa4\xa9\xe6\x88\x96\xe5\x90\x8en\xe5\xa4\xa9\xe5\xbc\x80\xe5\xa7\x8b \xe5\xb0\xb1\xe6\x98\xafn 0\xe6\x98\xaf\xe5\xbd\x93\xe5\x89\x8d\xe6\x97\xa5\xe6\x9c\x9f\n     * @param size String \xe6\x97\xb6\xe9\x97\xb4\xe5\x8c\xba\xe9\x97\xb4\xe9\x95\xbf\xe5\xba\xa6  \xe6\xaf\x94\xe5\xa6\x82\xe8\x8e\xb7\xe5\x8f\x96\xe4\xba\x94\xe5\xa4\xa9\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4 \xe5\xb0\xb1\xe6\x98\xaf5 \xe5\xbd\x93\xe5\x89\x8d\xe6\x97\xa5\xe6\x9c\x9f\xe4\xb9\x9f\xe7\xae\x97\xe4\xb8\x80\xe5\xa4\xa9\n     * @return List<String> \xe6\x97\xa5\xe6\x9c\x9f\xe9\x9b\x86\xe5\x90\x88 \xe9\xa1\xba\xe5\xba\x8f\xe4\xb8\xba\xe6\x97\xa5\xe6\x9c\x9f\xe7\x9a\x84\xe6\x96\xb0\xe6\x97\xa7\xe7\xa8\x8b\xe5\xba\xa6\n     * @throws RuntimeException \xe5\xa6\x82\xe6\x9e\x9c[interval]\xe5\xb0\x8f\xe4\xba\x8e0\xe6\x88\x96\xe8\x80\x85[size]\xe5\xb0\x8f\xe4\xba\x8e1\xe4\xbc\x9a\xe6\x8a\x9b\xe5\x87\xba[RuntimeException]\n     *\n     * \xe7\xa4\xba\xe4\xbe\x8b\xef\xbc\x9a\xe8\x8e\xb7\xe5\x8f\x96\xe5\x90\x8e\xe5\xa4\xa9\xe5\xbc\x80\xe5\xa7\x8b \xe4\xb8\xba\xe6\x9c\x9f\xe4\xb8\x83\xe5\xa4\xa9\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe5\xb0\xb1\xe6\x98\xaf getExcerptDate(true, 2, 7)\n     *      \xe8\x8e\xb7\xe5\x8f\x96\xe6\x98\xa8\xe5\xa4\xa9\xe5\xbc\x80\xe5\xa7\x8b\xe5\x86\x8d\xe5\xbe\x80\xe5\x89\x8d7\xe5\xa4\xa9\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4 getExcerptDate(false, 1, 7)\n     */\n    fun getExcerptDate(\n        isFuture: Boolean,\n        interval: Int,\n        size: Int,\n        dateFormat: String\n    ): List<String> {\n        if (interval < 0) throw RuntimeException("\\"interval\\" it can\'t be less than 0")\n        if (size < 1) throw RuntimeException("\\"size\\" it can\'t be less than 1")\n        val simpleDateFormat = SimpleDateFormat(dateFormat, Locale.CHINESE)\n        val calendar = Calendar.getInstance()\n        val currentDayOfYear = calendar.get(Calendar.DAY_OF_YEAR)\n        val currentYear = calendar.get(Calendar.YEAR)\n        val dateList = mutableListOf<String>()\n        if (isFuture) {\n            (interval until interval + size).forEach {\n                val timestamp = getSomedayDate(it, calendar, currentDayOfYear, currentYear)\n                dateList.add(simpleDateFormat.format(timestamp))\n            }\n        } else {\n            (-interval downTo -interval - size + 1).forEach {\n                val timestamp = getSomedayDate(it, calendar, currentDayOfYear, currentYear)\n                dateList.add(simpleDateFormat.format(timestamp))\n            }\n        }\n        return dateList\n    }\n\n    /**\n     * \xe8\x8e\xb7\xe5\x8f\x96\xe8\xb7\x9d\xe7\xa6\xbb\xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84\xe6\x9f\x90\xe4\xb8\x80\xe5\xa4\xa9\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe6\x88\xb3\n     * @param numberOfDaysBetween Int \xe9\x97\xb4\xe9\x9a\x94\xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84\xe5\xa4\xa9\xe6\x95\xb0 \xe6\xad\xa3\xe6\x95\xb0\xe4\xb8\xba\xe6\x9c\xaa\xe6\x9d\xa5\xe6\x97\xb6\xe9\x97\xb4 \xe8\xb4\x9f\xe6\x95\xb0\xe4\xb8\xba\xe4\xbb\xa5\xe5\x89\x8d\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\n     * @param calendar Calendar Calendar\xe5\xaf\xb9\xe8\xb1\xa1 \xe4\xbd\xbf\xe7\x94\xa8\xe4\xbe\x9d\xe8\xb5\x96\xe6\xb3\xa8\xe5\x85\xa5\xe6\x96\xb9\xe5\xbc\x8f \xe6\x8f\x90\xe9\xab\x98\xe5\xaf\xb9\xe8\xb1\xa1\xe7\x9a\x84\xe5\xa4\x8d\xe7\x94\xa8\xe6\x80\xa7\n     * @param currentDayOfYear Int \xe5\xbd\x93\xe5\x89\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\x9c\xa8\xe5\xbd\x93\xe5\xb9\xb4\xe7\x9a\x84\xe5\xa4\xa9 \xe4\xbd\xbf\xe7\x94\xa8Calendar\xe8\x8e\xb7\xe5\x8f\x96\n     * @param currentYear Int \xe5\xbd\x93\xe5\x89\x8d\xe5\xb9\xb4 \xe4\xbd\xbf\xe7\x94\xa8Calendar\xe8\x8e\xb7\xe5\x8f\x96\n     * @return Long \xe6\x97\xb6\xe9\x97\xb4\xe6\x88\xb3\n     */\n    fun getSomedayDate(\n        numberOfDaysBetween: Int,\n        calendar: Calendar,\n        currentDayOfYear: Int,\n        currentYear: Int\n    ): Long {\n        calendar.set(Calendar.DAY_OF_YEAR, currentDayOfYear)\n        calendar.set(Calendar.YEAR, currentYear)\n        calendar.set(\n            Calendar.DAY_OF_YEAR,\n            calendar.get(Calendar.DAY_OF_YEAR) + numberOfDaysBetween\n        )\n        return calendar.time.time\n    }\n\n    /**\n     * String \xe8\xbd\xac\xe5\x8c\x96 Calendar\n     * @param string String\n     * @param format String\n     */\n    fun stringToCalendar(string: String, format: String): Calendar? {\n        val sdf = SimpleDateFormat(format, Locale.CHINESE)\n        var calendar: Calendar\n        try {\n            val date: Date = sdf.parse(string) ?: return null\n            calendar = Calendar.getInstance()\n            calendar.time = date\n        } catch (e: ParseException) {\n            e.printStackTrace()\n            calendar = Calendar.getInstance()\n        }\n        return calendar\n    }\n\n    /**\n     * String \xe8\xbd\xac\xe5\x8c\x96Date\n     * @param str String\n     * @param format String\n     * @return Date\n     */\n    fun strToDate(str: String, format: String): Date? {\n        val sdf = SimpleDateFormat(format, Locale.CHINESE)\n        return try {\n            sdf.parse(str)\n        } catch (e: ParseException) {\n            e.printStackTrace()\n            null\n        }\n    }\n\n    /**\n     * \xe5\x88\xa4\xe6\x96\xad\xe4\xb8\xa4\xe4\xb8\xaa\xe6\x97\xb6\xe9\x97\xb4\xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xaf\xe5\x90\x8c\xe4\xb8\x80\xe5\xa4\xa9\n     * @param cal1 Calendar\n     * @param cal2 Calendar\n     * @return Boolean\n     */\n    fun isSameDay(cal1: Calendar, cal2: Calendar): Boolean {\n        return cal1[0] == cal2[0] && cal1[1] == cal2[1] && cal1[6] == cal2[6]\n    }\n}'