b'-- | Core options, i.e. the options used by tasty itself\n{-# LANGUAGE CPP, DeriveDataTypeable, GeneralizedNewtypeDeriving #-}\n{-# OPTIONS_GHC -fno-warn-type-defaults #-} -- for (^)\nmodule Test.Tasty.Options.Core\n  ( NumThreads(..)\n  , Timeout(..)\n  , mkTimeout\n  , coreOptions\n  )\n  where\n\nimport Control.Monad (mfilter)\nimport Data.Proxy\nimport Data.Typeable\nimport Data.Fixed\nimport Options.Applicative hiding (str)\nimport GHC.Conc\n#if !MIN_VERSION_base(4,11,0)\nimport Data.Monoid\n#endif\n\nimport Test.Tasty.Options\nimport Test.Tasty.Patterns\n\n-- | Number of parallel threads to use for running tests.\n--\n-- Note that this is /not/ included in \'coreOptions\'.\n-- Instead, it\'s automatically included in the options for any\n-- \'Test.Tasty.Ingredients.TestReporter\' ingredient by\n-- \'Test.Tasty.Ingredients.ingredientOptions\', because the way test\n-- reporters are handled already involves parallelism. Other ingredients\n-- may also choose to include this option.\n--\n-- @since 0.1\nnewtype NumThreads = NumThreads { getNumThreads :: Int }\n  deriving (Eq, Ord, Num, Typeable)\ninstance IsOption NumThreads where\n  defaultValue = NumThreads numCapabilities\n  parseValue = mfilter onlyPositive . fmap NumThreads . safeRead\n  optionName = return "num-threads"\n  optionHelp = return "Number of threads to use for tests execution"\n  optionCLParser = mkOptionCLParser (short \'j\' <> metavar "NUMBER")\n  showDefaultValue _ = Just "# of cores/capabilities"\n\n-- | Filtering function to prevent non-positive number of threads\nonlyPositive :: NumThreads -> Bool\nonlyPositive (NumThreads x) = x > 0\n\n-- | Timeout to be applied to individual tests.\n--\n-- @since 0.8\ndata Timeout\n  = Timeout Integer String\n    -- ^ \'String\' is the original representation of the timeout (such as\n    -- @\\"0.5m\\"@), so that we can print it back. \'Integer\' is the number of\n    -- microseconds.\n  | NoTimeout\n  deriving (Show, Typeable)\n\ninstance IsOption Timeout where\n  defaultValue = NoTimeout\n  parseValue str =\n    Timeout\n      <$> parseTimeout str\n      <*> pure str\n  optionName = return "timeout"\n  optionHelp = return "Timeout for individual tests (suffixes: ms,s,m,h; default: s)"\n  optionCLParser = mkOptionCLParser (short \'t\' <> metavar "DURATION")\n\nparseTimeout :: String -> Maybe Integer\nparseTimeout str =\n  -- it sucks that there\'s no more direct way to convert to a number of\n  -- microseconds\n  (round :: Micro -> Integer) . (* 10^6) <$>\n  case reads str of\n    [(n, suffix)] ->\n      case suffix of\n        "ms" -> Just (n / 10^3)\n        "" -> Just n\n        "s" -> Just n\n        "m" -> Just (n * 60)\n        "h" -> Just (n * 60^2)\n        _ -> Nothing\n    _ -> Nothing\n\n-- | A shortcut for creating \'Timeout\' values.\n--\n-- @since 0.8\nmkTimeout\n  :: Integer -- ^ microseconds\n  -> Timeout\nmkTimeout n =\n  Timeout n $\n    showFixed True (fromInteger n / (10^6) :: Micro) ++ "s"\n\n-- | The list of all core options, i.e. the options not specific to any\n-- provider or ingredient, but to tasty itself. Currently contains\n-- \'TestPattern\' and \'Timeout\'.\n--\n-- @since 0.1\ncoreOptions :: [OptionDescription]\ncoreOptions =\n  [ Option (Proxy :: Proxy TestPattern)\n  , Option (Proxy :: Proxy Timeout)\n  ]\n'