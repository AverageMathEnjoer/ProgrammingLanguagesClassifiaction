b'{-# LANGUAGE ScopedTypeVariables #-}\nmodule Api.Post.Comment (resource) where\n\nimport Control.Concurrent.STM (atomically, modifyTVar\', readTVar)\nimport Control.Monad.Reader\nimport Control.Monad.Trans.Except\nimport Data.List\nimport Data.Monoid\nimport Data.Ord\nimport Data.Time\nimport qualified Data.HashMap.Strict as H\nimport qualified Data.Set            as Set\n\nimport Rest\nimport qualified Rest.Resource as R\n\nimport Api.Post (WithPost, postFromIdentifier)\nimport ApiTypes\nimport Type.Comment (Comment (Comment))\nimport Type.UserComment (UserComment (UserComment))\nimport qualified Type.Comment as Comment\nimport qualified Type.Post    as Post\nimport qualified Type.User    as User\n\ntype Identifier = String\n\ntype WithComment = ReaderT Identifier WithPost\n\nresource :: Resource WithPost WithComment Identifier () Void\nresource = mkResourceReader\n  { R.name   = "comment"\n  , R.schema = withListing () $ named [("id", singleRead id)]\n  , R.list   = const list\n  , R.create = Just create -- PUT /post to create a new Post.\n  }\n\nlist :: ListHandler WithPost\nlist = mkListing xmlJsonO handler\n  where\n    handler :: Range -> ExceptT Reason_ WithPost [Comment]\n    handler r = do\n      postId <- getPostId `orThrow` NotFound\n      comms <- liftIO . atomically . readTVar\n           =<< (lift . lift) (asks comments)\n      return . take (count r) . drop (offset r)\n             . sortBy (flip $ comparing Comment.createdTime)\n             . maybe [] Set.toList . H.lookup postId $ comms\n\ncreate :: Handler WithPost\ncreate = mkInputHandler xmlJson handler\n  where\n    handler :: UserComment -> ExceptT Reason_ WithPost Comment\n    handler ucomm = do\n      postId <- getPostId `orThrow` NotFound\n      comm   <- liftIO $ userCommentToComment ucomm\n      comms  <- lift . lift $ asks comments\n      liftIO . atomically $\n        modifyTVar\' comms (H.insertWith (<>) postId (Set.singleton comm))\n      return comm\n\ngetPostId :: ExceptT Reason_ WithPost (Maybe Post.Id)\ngetPostId = do\n  postIdent <- ask\n  return . fmap Post.id\n        =<< liftIO . atomically . postFromIdentifier postIdent\n        =<< (lift . lift) (asks posts)\n{-# ANN getPostId "HLint: ignore Use fmap" #-}\n\nuserCommentToComment :: UserComment -> IO Comment\nuserCommentToComment (UserComment u content) = do\n  t <- getCurrentTime\n  return $ Comment (User.name u) t content\n'