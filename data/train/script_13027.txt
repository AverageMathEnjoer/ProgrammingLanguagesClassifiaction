b'package id.zelory.compressor\n\nimport android.graphics.Bitmap\nimport id.zelory.compressor.constraint.DefaultConstraint\nimport id.zelory.compressor.constraint.FormatConstraint\nimport id.zelory.compressor.constraint.QualityConstraint\nimport id.zelory.compressor.constraint.ResolutionConstraint\nimport id.zelory.compressor.constraint.format\nimport id.zelory.compressor.constraint.quality\nimport id.zelory.compressor.constraint.resolution\nimport io.mockk.every\nimport io.mockk.mockk\nimport io.mockk.mockkConstructor\nimport io.mockk.mockkStatic\nimport io.mockk.verify\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.test.TestCoroutineDispatcher\nimport kotlinx.coroutines.test.resetMain\nimport kotlinx.coroutines.test.runBlockingTest\nimport kotlinx.coroutines.test.setMain\nimport org.junit.After\nimport org.junit.Before\nimport org.junit.Test\n\n/**\n * Created on : January 25, 2020\n * Author     : zetbaitsu\n * Name       : Zetra\n * GitHub     : https://github.com/zetbaitsu\n */\nclass CompressorTest {\n\n    private val testDispatcher = TestCoroutineDispatcher()\n\n    @Before\n    fun setup() {\n        Dispatchers.setMain(testDispatcher)\n        mockkStatic("id.zelory.compressor.UtilKt")\n        every { copyToCache(any(), any()) } returns mockk(relaxed = true)\n    }\n\n    @After\n    fun cleanUp() {\n        Dispatchers.resetMain()\n        testDispatcher.cleanupTestCoroutines()\n    }\n\n    @Test\n    fun `compress with default specs should execute default constraint`() = testDispatcher.runBlockingTest {\n        // Given\n        mockkConstructor(DefaultConstraint::class)\n        var executedConstraint = 0\n        every { anyConstructed<DefaultConstraint>().isSatisfied(any()) } answers {\n            executedConstraint > 0\n        }\n        every { anyConstructed<DefaultConstraint>().satisfy(any()) } answers {\n            executedConstraint++\n            mockk(relaxed = true)\n        }\n\n        // When\n        Compressor.compress(mockk(relaxed = true), mockk(relaxed = true), testDispatcher)\n\n        // Then\n        verify {\n            anyConstructed<DefaultConstraint>().isSatisfied(any())\n            anyConstructed<DefaultConstraint>().satisfy(any())\n        }\n    }\n\n    @Test\n    fun `compress with custom specs should execute all constraint provided`() = testDispatcher.runBlockingTest {\n        // Given\n        mockkConstructor(ResolutionConstraint::class)\n        mockkConstructor(QualityConstraint::class)\n        mockkConstructor(FormatConstraint::class)\n\n        var executedConstraint = 0\n        every { anyConstructed<ResolutionConstraint>().isSatisfied(any()) } answers {\n            executedConstraint > 0\n        }\n        every { anyConstructed<ResolutionConstraint>().satisfy(any()) } answers {\n            executedConstraint++\n            mockk(relaxed = true)\n        }\n\n        every { anyConstructed<QualityConstraint>().isSatisfied(any()) } answers {\n            executedConstraint > 1\n        }\n        every { anyConstructed<QualityConstraint>().satisfy(any()) } answers {\n            executedConstraint++\n            mockk(relaxed = true)\n        }\n\n        every { anyConstructed<FormatConstraint>().isSatisfied(any()) } answers {\n            executedConstraint > 2\n        }\n        every { anyConstructed<FormatConstraint>().satisfy(any()) } answers {\n            executedConstraint++\n            mockk(relaxed = true)\n        }\n\n        // When\n        Compressor.compress(mockk(relaxed = true), mockk(relaxed = true), testDispatcher) {\n            resolution(100, 100)\n            quality(75)\n            format(Bitmap.CompressFormat.PNG)\n        }\n\n        // Then\n        verify {\n            anyConstructed<ResolutionConstraint>().isSatisfied(any())\n            anyConstructed<ResolutionConstraint>().satisfy(any())\n            anyConstructed<QualityConstraint>().isSatisfied(any())\n            anyConstructed<QualityConstraint>().satisfy(any())\n            anyConstructed<FormatConstraint>().isSatisfied(any())\n            anyConstructed<FormatConstraint>().satisfy(any())\n        }\n    }\n}'