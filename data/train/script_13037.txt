b'{-# LANGUAGE NamedFieldPuns #-}\n\nmodule Main where\n\nimport Database.Beam.Migrate.Tool.Branch\nimport Database.Beam.Migrate.Tool.CmdLine\nimport Database.Beam.Migrate.Tool.Database\nimport Database.Beam.Migrate.Tool.Diff\nimport Database.Beam.Migrate.Tool.Init\nimport Database.Beam.Migrate.Tool.Log\nimport Database.Beam.Migrate.Tool.Migrate\nimport Database.Beam.Migrate.Tool.Registry\nimport Database.Beam.Migrate.Tool.Schema\nimport Database.Beam.Migrate.Tool.MigrationCmd\nimport Database.Beam.Migrate.Tool.Status\n\nimport Data.Maybe\n\nimport Options.Applicative\n\nmain :: IO ()\nmain = do\n  cmdLine@MigrateCmdLine { migrateSubcommand } <- execParser migrationCliOptions\n\n  case migrateSubcommand of\n    MigrateCommandDatabases DatabaseCommandList ->\n      listDatabases cmdLine\n    MigrateCommandDatabases (DatabaseCommandAdd dbName beName url) ->\n      initDatabase cmdLine dbName beName url\n    MigrateCommandDatabases (DatabaseCommandRename from to) ->\n      renameDatabase cmdLine from to\n    MigrateCommandDatabases (DatabaseCommandShow dbName) ->\n      showDatabase cmdLine dbName\n\n    MigrateCommandInit initCommand ->\n      initBeamMigrate cmdLine initCommand\n\n    MigrateCommandClean _ -> fail "Unimplemented"\n--      cleanBeamMigrate cmdLine cleanCommand\n\n    MigrateCommandLog ->\n      displayLog cmdLine\n\n    MigrateCommandStatus ->\n      displayStatus cmdLine\n\n    MigrateCommandDiff autogen expActual ->\n      let (actual, expected) =\n            maybe ("HEAD", "DB!")\n                  (\\(actualSrc, expSrc) -> (actualSrc,) . fromMaybe "HEAD" $ expSrc) expActual\n      in displayDiff cmdLine expected actual autogen\n\n    MigrateCommandBranch BranchCommandList ->\n      listBranches cmdLine\n    MigrateCommandBranch (BranchCommandDelete branchNm) ->\n      deleteBranch cmdLine branchNm\n    MigrateCommandBranch (BranchCommandNew dontSwitch branchNm) ->\n      newBranch cmdLine dontSwitch branchNm\n\n    MigrateCommandSchema (SchemaCommandImport _ dbName branchName doCommit doAutoMigrate) ->\n      importDb cmdLine dbName branchName doCommit doAutoMigrate\n    MigrateCommandSchema (SchemaCommandNew tmplSrc tmpFile) ->\n      beginNewSchema cmdLine tmplSrc tmpFile\n    MigrateCommandSchema (SchemaCommandCommit force overwrite commitMsg) ->\n      commitSchema cmdLine force overwrite commitMsg\n\n    MigrateCommandMigration (MigrationCommandNew fromCommit toCommit autoGen leaveOpen fmts) ->\n      newMigrationCmd cmdLine fromCommit toCommit autoGen leaveOpen fmts\n\n    MigrateCommandAbort force ->\n      abortEdits cmdLine force\n\n    MigrateCommandSimple (SimpleCommandSchema backend connStr schemaKind) ->\n      showSimpleSchema cmdLine backend connStr schemaKind\n\n    MigrateCommandMigrate ->\n      doMigrateDatabase cmdLine False\n'