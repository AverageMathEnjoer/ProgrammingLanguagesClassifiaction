b'package com.loper7.date_time_picker.utils.lunar\n\nimport android.util.Log\nimport com.loper7.date_time_picker.ext.getMaxDayAtYear\nimport com.loper7.date_time_picker.utils.lunar.LunarConstants.LUNAR_DAY_NAMES\nimport com.loper7.date_time_picker.utils.lunar.LunarConstants.LUNAR_DZ\nimport com.loper7.date_time_picker.utils.lunar.LunarConstants.LUNAR_MONTH_NAMES\nimport com.loper7.date_time_picker.utils.lunar.LunarConstants.LUNAR_TABLE\nimport com.loper7.date_time_picker.utils.lunar.LunarConstants.LUNAR_TG\nimport com.loper7.date_time_picker.utils.lunar.LunarConstants.MIN_LUNAR_YEAR\nimport java.util.*\n\nopen class Lunar(\n    var year: Int,\n    var month: Int,\n    var isLeapMonth: Boolean,\n    var day: Int,\n    var hour: Int,\n    var minute: Int,\n    var seconds: Int\n\n) {\n\n\n    companion object {\n\n\n        fun getInstance(timeInMillis: Long): Lunar? {\n            var calendar = Calendar.getInstance()\n            calendar.timeInMillis = timeInMillis\n            return getInstance(calendar)\n        }\n\n        fun getInstance(calendar: Calendar = Calendar.getInstance()): Lunar? {\n\n            //\xe4\xbc\xa0\xe5\x85\xa5\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe8\xb6\x85\xe5\x87\xba\xe4\xba\x86\xe8\xae\xa1\xe7\xae\x97\xe8\x8c\x83\xe5\x9b\xb4\n            if (!hasLunarInfo(calendar)) return null\n\n            var lunarYear: Int = calendar[Calendar.YEAR]\n            var lunarMonth = 0\n            var lunarDay = 0\n            val lunarHour = calendar[Calendar.HOUR_OF_DAY]\n            val lunarLeapMonth: Int\n            var isLeap = false\n\n            var doffset = calendar[Calendar.DAY_OF_YEAR] - 1\n            var hexvalue = LUNAR_TABLE[lunarYear - MIN_LUNAR_YEAR]\n            //\xe5\x86\x9c\xe5\x8e\x86\xe6\xad\xa3\xe6\x9c\x88\xe7\x9a\x84\xe5\x81\x8f\xe7\xa7\xbb\n            var loffset = hexvalue and 0xFF\n            //\xe5\xa6\x82\xe6\x9e\x9c\xe5\xbd\x93\xe5\x89\x8d\xe7\xa6\xbb1\xe6\x9c\x881\xe5\x8f\xb7\xe7\x9a\x84\xe5\xa4\xa9\xe6\x95\xb0\xe6\xaf\x94\xe6\xad\xa3\xe6\x9c\x88\xe7\xa6\xbb\xe5\x85\x83\xe6\x9c\x88\xe7\x9a\x84\xe5\xa4\xa9\xe6\x95\xb0\xe8\xbf\x98\xe5\xb0\x8f\xe9\x82\xa3\xe4\xb9\x88\xe5\x88\x99\xe5\xba\x94\xe8\xaf\xa5\xe6\x98\xaf\xe4\xb8\x8a\xe4\xb8\x80\xe4\xb8\xaa\xe5\x86\x9c\xe5\x8e\x86\xe5\xb9\xb4\n            if (loffset > doffset) {\n                lunarYear--\n                doffset += GregorianCalendar().getMaxDayAtYear(lunarYear)\n                hexvalue = LUNAR_TABLE[lunarYear - MIN_LUNAR_YEAR]\n                loffset = hexvalue and 0xFF\n            }\n            var days = doffset - loffset + 1\n            //\xe5\x86\x9c\xe5\x8e\x86\xe9\x97\xb0\xe6\x9c\x88\n            lunarLeapMonth = hexvalue shr 8 and 0xF\n            val len = if (lunarLeapMonth > 0) 13 else 12\n            //\xe5\xbc\x80\xe5\xa7\x8b\xe5\xbe\xaa\xe7\x8e\xaf\xe5\x8f\x96\n            var v = 0\n            var cd = 0\n            for (i in 0 until len) {\n                v = if (lunarLeapMonth in 1..i) {\n                    if (i == lunarLeapMonth) {\n                        hexvalue shr 12 and 0x1\n                    } else {\n                        hexvalue shr 24 - i + 1 and 0x1\n                    }\n                } else {\n                    hexvalue shr 24 - i and 0x1\n                }\n                cd = 29 + v\n                days -= cd\n                if (days <= 0) {\n                    lunarDay = days + cd\n                    lunarMonth = i + 1\n                    if (lunarLeapMonth in 1..i) {\n                        isLeap = i == lunarLeapMonth\n                        --lunarMonth\n                    }\n                    break\n                }\n            }\n\n            return Lunar(\n                lunarYear,\n                lunarMonth,\n                isLeap,\n                lunarDay,\n                lunarHour,\n                calendar[Calendar.MINUTE],\n                calendar[Calendar.SECOND]\n            )\n        }\n\n        /**\n         * \xe6\x98\xaf\xe5\x90\xa6\xe6\x9c\x89\xe5\x86\x9c\xe5\x8e\x86\xe4\xbf\xa1\xe6\x81\xaf\n         *\n         * @param calendar\n         * @return\n         */\n        fun hasLunarInfo(calendar: Calendar): Boolean {\n            return try {\n                val syear = calendar[Calendar.YEAR]\n                val dayoffset = calendar[Calendar.DAY_OF_YEAR] - 1\n                val lindex = syear - MIN_LUNAR_YEAR\n                if (lindex < 0 || lindex >= LUNAR_TABLE.size) {\n                    return false\n                }\n                var lyear = syear\n                val hexValue = LUNAR_TABLE[lindex]\n                val ldayoffset = hexValue and 0xFF\n                if (ldayoffset > dayoffset) {\n                    lyear--\n                }\n                lyear >= MIN_LUNAR_YEAR\n            } catch (e: Throwable) {\n                e.printStackTrace()\n                false\n            }\n        }\n    }\n\n\n    /**\n     * \xe8\x8e\xb7\xe5\x8f\x96\xe5\x86\x9c\xe5\x8e\x86\xe5\xb9\xb2\xe6\x94\xaf\xe7\xba\xaa\xe5\xb9\xb4\n     *\n     * @return\n     */\n    val yearName: String\n        get() {\n            var tg = LUNAR_TG[(year - 4) % 10]\n            var dz = LUNAR_DZ[(year - 4) % 12]\n            return "${tg}${dz}\xe5\xb9\xb4"\n        }\n\n    /**\n     * \xe8\x8e\xb7\xe5\x8f\x96\xe5\x86\x9c\xe5\x8e\x86\xe6\x9c\x88\xe5\x90\x8d\xe7\xa7\xb0\n     *\n     * @return\n     */\n    val monthName: String\n        get() = (if (isLeapMonth) "\xe9\x97\xb0" else "") + LUNAR_MONTH_NAMES[month - 1]\n\n    /**\n     * \xe8\x8e\xb7\xe5\x8f\x96\xe5\x86\x9c\xe5\x8e\x86\xe6\x97\xa5\xe5\x90\x8d\xe7\xa7\xb0\n     *\n     * @return\n     */\n    val dayName: String\n        get() = LUNAR_DAY_NAMES[day - 1]\n\n    /**\n     * \xe8\x8e\xb7\xe5\x8f\x96\xe5\x86\x9c\xe5\x8e\x86\xe6\x97\xb6\xe8\xbe\xb0\xe5\x90\x8d\xe7\xa7\xb0\n     */\n    val hourName: String\n        get() = "${LUNAR_DZ[(hour + 1) / 2 % 12]}\xe6\x97\xb6"\n\n\n    /**\n     * \xe8\x8e\xb7\xe5\x8f\x96\xe5\x86\x9c\xe5\x8e\x86\xe5\xb9\xb4\xe6\x9c\x88\xe4\xb8\xad\xe6\x9c\x80\xe5\xa4\x9a\xe7\x9a\x84\xe5\xa4\xa9\xe6\x95\xb0\n     */\n    fun getMaxDayInMonth(): Int {\n        val index: Int = year - MIN_LUNAR_YEAR\n        val hexValue: Int = LUNAR_TABLE[index]\n        return if (isLeapMonth) {\n            (hexValue shr 12 and 0x1) + 29\n        } else (hexValue shr 24 - month + 1 and 0x1) + 29\n    }\n\n\n    override fun equals(o: Any?): Boolean {\n        if (o == null || o !is Lunar) return false\n        return o.year == year && o.month == month && o.isLeapMonth == isLeapMonth\n    }\n\n    override fun toString(): String {\n        var map = mutableMapOf<String, Any>()\n        map["year"] = year\n        map["month"] = month\n        map["day"] = day\n        map["hour"] = hour\n        map["minute"] = minute\n        map["seconds"] = seconds\n        map["isLeapMonth"] = isLeapMonth\n        map["yearName"] = yearName\n        map["monthName"] = monthName\n        map["dayName"] = dayName\n        map["hourName"] = hourName\n        return map.toString()\n\n    }\n\n\n}'