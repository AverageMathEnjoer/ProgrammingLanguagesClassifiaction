b'package id.zelory.compressor.constraint\n\nimport com.natpryce.hamkrest.assertion.assertThat\nimport com.natpryce.hamkrest.equalTo\nimport com.natpryce.hamkrest.isA\nimport io.mockk.every\nimport io.mockk.mockk\nimport io.mockk.mockkStatic\nimport io.mockk.unmockkAll\nimport io.mockk.verify\nimport org.junit.After\nimport org.junit.Test\nimport java.io.File\n\n/**\n * Created on : January 25, 2020\n * Author     : zetbaitsu\n * Name       : Zetra\n * GitHub     : https://github.com/zetbaitsu\n */\nclass DestinationConstraintTest {\n\n    @After\n    fun teardown() {\n        unmockkAll()\n    }\n\n    @Test\n    fun `when destination is not equal with image file, constraint should not satisfied`() {\n        // Given\n        val constraint = DestinationConstraint(File("a_file.webp"))\n\n        // When + Then\n        assertThat(constraint.isSatisfied(File("another_file.png")), equalTo(false))\n    }\n\n    @Test\n    fun `when destination is equal with image file, constraint should satisfied`() {\n        // Given\n        val constraint = DestinationConstraint(File("a_file.jpg"))\n\n        // When + Then\n        assertThat(constraint.isSatisfied(File("a_file.jpg")), equalTo(true))\n    }\n\n    @Test\n    fun `when trying satisfy constraint, it should copy image to destination`() {\n        // Given\n        mockkStatic("kotlin.io.FilesKt__UtilsKt")\n        every { any<File>().copyTo(any(), any(), any()) } returns mockk(relaxed = true)\n\n        val imageFile = File("source.jpg")\n        val destination = File("destination.jpg")\n        val constraint = DestinationConstraint(destination)\n\n        // When\n        constraint.satisfy(imageFile)\n\n        // Then\n        verify { imageFile.copyTo(destination, true, any()) }\n    }\n\n    @Test\n    fun `verify extension`() {\n        // Given\n        val compression = Compression()\n\n        // When\n        compression.destination(mockk())\n\n        // Then\n        assertThat(compression.constraints.first(), isA<DestinationConstraint>())\n    }\n}'