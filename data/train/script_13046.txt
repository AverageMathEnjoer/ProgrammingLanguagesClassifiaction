b'package io.github.javiewer.util;\n\nimport android.content.Context;\nimport android.media.AudioManager;\nimport android.provider.Settings;\nimport android.util.AttributeSet;\nimport android.util.Log;\nimport android.view.LayoutInflater;\nimport android.view.MotionEvent;\nimport android.view.View;\nimport android.view.WindowManager;\n\nimport cn.jzvd.JZMediaManager;\nimport cn.jzvd.JZUserAction;\nimport cn.jzvd.JZUserActionStandard;\nimport cn.jzvd.JZUtils;\nimport cn.jzvd.JZVideoPlayerStandard;\nimport io.github.javiewer.R;\n\n/**\n * Project: JAViewer\n */\npublic class SimpleVideoPlayer extends JZVideoPlayerStandard {\n\n    public static final int THRESHOLD = 10;\n\n    public SimpleVideoPlayer(Context context) {\n        this(context, null);\n    }\n\n    public SimpleVideoPlayer(Context context, AttributeSet attrs) {\n        super(context, attrs);\n    }\n\n    @Override\n    public int getLayoutId() {\n        return R.layout.layout_video_player;\n    }\n\n    @Override\n    public void updateStartImage() {\n        if (currentState == CURRENT_STATE_PLAYING) {\n            startButton.setVisibility(VISIBLE);\n            startButton.setImageResource(R.drawable.selector_pause);\n            replayTextView.setVisibility(INVISIBLE);\n        } else if (currentState == CURRENT_STATE_ERROR) {\n            startButton.setVisibility(INVISIBLE);\n            replayTextView.setVisibility(INVISIBLE);\n        } else if (currentState == CURRENT_STATE_AUTO_COMPLETE) {\n            startButton.setVisibility(VISIBLE);\n            startButton.setImageResource(R.drawable.selector_replay);\n            replayTextView.setVisibility(VISIBLE);\n        } else {\n            startButton.setImageResource(R.drawable.selector_play);\n            replayTextView.setVisibility(INVISIBLE);\n        }\n    }\n\n    @Override\n    public void showVolumeDialog(float deltaY, int volumePercent) {\n        if (mVolumeDialog == null) {\n            View localView = LayoutInflater.from(getContext()).inflate(R.layout.dialog_player_volume, null);\n            mDialogVolumeImageView = localView.findViewById(R.id.volume_image_tip);\n            mDialogVolumeTextView = localView.findViewById(R.id.tv_volume);\n            mDialogVolumeProgressBar = localView.findViewById(R.id.volume_progressbar);\n            mVolumeDialog = createDialogWithView(localView);\n        }\n        if (!mVolumeDialog.isShowing()) {\n            mVolumeDialog.show();\n        }\n        if (volumePercent <= 0) {\n            mDialogVolumeImageView.setBackgroundResource(R.drawable.ic_player_volume_off);\n        } else if (-deltaY <= 0) {\n            mDialogVolumeImageView.setBackgroundResource(R.drawable.ic_player_volume_down);\n        } else {\n            mDialogVolumeImageView.setBackgroundResource(R.drawable.ic_player_volume_up);\n        }\n        if (volumePercent > 100) {\n            volumePercent = 100;\n        } else if (volumePercent < 0) {\n            volumePercent = 0;\n        }\n        mDialogVolumeTextView.setText(volumePercent + "%");\n        mDialogVolumeProgressBar.setProgress(volumePercent);\n        onCLickUiToggleToClear();\n    }\n\n    @Override\n    public void showProgressDialog(float deltaX, String seekTime, long seekTimePosition, String totalTime, long totalTimeDuration) {\n        if (mProgressDialog == null) {\n            View localView = LayoutInflater.from(getContext()).inflate(R.layout.dialog_player_progress, null);\n            mDialogProgressBar = localView.findViewById(R.id.duration_progressbar);\n            mDialogSeekTime = localView.findViewById(R.id.tv_current);\n            mDialogTotalTime = localView.findViewById(R.id.tv_duration);\n            mDialogIcon = localView.findViewById(R.id.duration_image_tip);\n            mProgressDialog = createDialogWithView(localView);\n        }\n        if (!mProgressDialog.isShowing()) {\n            mProgressDialog.show();\n        }\n\n        mDialogSeekTime.setText(seekTime);\n        mDialogTotalTime.setText(" / " + totalTime);\n        mDialogProgressBar.setProgress(totalTimeDuration <= 0 ? 0 : (int) (seekTimePosition * 100 / totalTimeDuration));\n        if (deltaX > 0) {\n            mDialogIcon.setBackgroundResource(R.drawable.ic_player_fast_forward);\n        } else {\n            mDialogIcon.setBackgroundResource(R.drawable.ic_player_fast_rewind);\n        }\n        onCLickUiToggleToClear();\n    }\n\n    @Override\n    public boolean onTouch(View v, MotionEvent event) {\n        int id = v.getId();\n        if (id == cn.jzvd.R.id.surface_container) {\n            switch (event.getAction()) {\n                case MotionEvent.ACTION_DOWN:\n                    break;\n                case MotionEvent.ACTION_MOVE:\n                    break;\n                case MotionEvent.ACTION_UP:\n                    startDismissControlViewTimer();\n                    if (mChangePosition) {\n                        long duration = getDuration();\n                        int progress = (int) (mSeekTimePosition * 100 / (duration == 0 ? 1 : duration));\n                        bottomProgressBar.setProgress(progress);\n                    }\n                    if (!mChangePosition && !mChangeVolume) {\n                        onEvent(JZUserActionStandard.ON_CLICK_BLANK);\n                        onClickUiToggle();\n                    }\n                    break;\n            }\n        } else if (id == cn.jzvd.R.id.bottom_seek_progress) {\n            switch (event.getAction()) {\n                case MotionEvent.ACTION_DOWN:\n                    cancelDismissControlViewTimer();\n                    break;\n                case MotionEvent.ACTION_UP:\n                    startDismissControlViewTimer();\n                    break;\n            }\n        }\n        return onTouch0(v, event);\n    }\n\n    public boolean onTouch0(View v, MotionEvent event) {\n        float x = event.getX();\n        float y = event.getY();\n        int id = v.getId();\n        if (id == cn.jzvd.R.id.surface_container) {\n            switch (event.getAction()) {\n                case MotionEvent.ACTION_DOWN:\n                    Log.i(TAG, "onTouch surfaceContainer actionDown [" + this.hashCode() + "] ");\n                    mTouchingProgressBar = true;\n\n                    mDownX = x;\n                    mDownY = y;\n                    mChangeVolume = false;\n                    mChangePosition = false;\n                    mChangeBrightness = false;\n                    break;\n                case MotionEvent.ACTION_MOVE:\n                    Log.i(TAG, "onTouch surfaceContainer actionMove [" + this.hashCode() + "] ");\n                    float deltaX = x - mDownX;\n                    float deltaY = y - mDownY;\n                    float absDeltaX = Math.abs(deltaX);\n                    float absDeltaY = Math.abs(deltaY);\n                    if (currentScreen == SCREEN_WINDOW_FULLSCREEN) {\n                        if (!mChangePosition && !mChangeVolume && !mChangeBrightness) {\n                            if (absDeltaX > THRESHOLD || absDeltaY > THRESHOLD) {\n                                cancelProgressTimer();\n                                if (absDeltaX >= THRESHOLD) {\n                                    // \xe5\x85\xa8\xe5\xb1\x8f\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\x8b\xe7\x9a\x84CURRENT_STATE_ERROR\xe7\x8a\xb6\xe6\x80\x81\xe4\xb8\x8b,\xe4\xb8\x8d\xe5\x93\x8d\xe5\xba\x94\xe8\xbf\x9b\xe5\xba\xa6\xe6\x8b\x96\xe5\x8a\xa8\xe4\xba\x8b\xe4\xbb\xb6.\n                                    // \xe5\x90\xa6\xe5\x88\x99\xe4\xbc\x9a\xe5\x9b\xa0\xe4\xb8\xbamediaplayer\xe7\x9a\x84\xe7\x8a\xb6\xe6\x80\x81\xe9\x9d\x9e\xe6\xb3\x95\xe5\xaf\xbc\xe8\x87\xb4App Crash\n                                    if (currentState != CURRENT_STATE_ERROR) {\n                                        mChangePosition = true;\n                                        mGestureDownPosition = getCurrentPositionWhenPlaying();\n                                    }\n                                } else {\n                                    //\xe5\xa6\x82\xe6\x9e\x9cy\xe8\xbd\xb4\xe6\xbb\x91\xe5\x8a\xa8\xe8\xb7\x9d\xe7\xa6\xbb\xe8\xb6\x85\xe8\xbf\x87\xe8\xae\xbe\xe7\xbd\xae\xe7\x9a\x84\xe5\xa4\x84\xe7\x90\x86\xe8\x8c\x83\xe5\x9b\xb4\xef\xbc\x8c\xe9\x82\xa3\xe4\xb9\x88\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xbb\x91\xe5\x8a\xa8\xe4\xba\x8b\xe4\xbb\xb6\xe5\xa4\x84\xe7\x90\x86\n                                    if (mDownX < mScreenWidth * 0.5f) {//\xe5\xb7\xa6\xe4\xbe\xa7\xe6\x94\xb9\xe5\x8f\x98\xe4\xba\xae\xe5\xba\xa6\n                                        mChangeBrightness = true;\n                                        WindowManager.LayoutParams lp = JZUtils.getWindow(getContext()).getAttributes();\n                                        if (lp.screenBrightness < 0) {\n                                            try {\n                                                mGestureDownBrightness = Settings.System.getInt(getContext().getContentResolver(), Settings.System.SCREEN_BRIGHTNESS);\n                                                Log.i(TAG, "current system brightness: " + mGestureDownBrightness);\n                                            } catch (Settings.SettingNotFoundException e) {\n                                                e.printStackTrace();\n                                            }\n                                        } else {\n                                            mGestureDownBrightness = lp.screenBrightness * 255;\n                                            Log.i(TAG, "current activity brightness: " + mGestureDownBrightness);\n                                        }\n                                    } else {//\xe5\x8f\xb3\xe4\xbe\xa7\xe6\x94\xb9\xe5\x8f\x98\xe5\xa3\xb0\xe9\x9f\xb3\n                                        mChangeVolume = true;\n                                        mGestureDownVolume = mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (mChangePosition) {\n                        long totalTimeDuration = getDuration();\n                        //mSeekTimePosition = (int) (mGestureDownPosition + deltaX * totalTimeDuration / mScreenWidth);\n                        mSeekTimePosition = (int) (mGestureDownPosition + deltaX * 90000 / mScreenWidth);\n                        if (mSeekTimePosition > totalTimeDuration) {\n                            mSeekTimePosition = totalTimeDuration;\n                        }\n                        String seekTime = JZUtils.stringForTime(mSeekTimePosition);\n                        String totalTime = JZUtils.stringForTime(totalTimeDuration);\n\n                        showProgressDialog(deltaX, seekTime, mSeekTimePosition, totalTime, totalTimeDuration);\n                    }\n                    if (mChangeVolume) {\n                        deltaY = -deltaY;\n                        int max = mAudioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC);\n                        int deltaV = (int) (max * deltaY * 3 / mScreenHeight);\n                        mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC, mGestureDownVolume + deltaV, 0);\n                        //dialog\xe4\xb8\xad\xe6\x98\xbe\xe7\xa4\xba\xe7\x99\xbe\xe5\x88\x86\xe6\xaf\x94\n                        int volumePercent = (int) (mGestureDownVolume * 100 / max + deltaY * 3 * 100 / mScreenHeight);\n                        showVolumeDialog(-deltaY, volumePercent);\n                    }\n\n                    if (mChangeBrightness) {\n                        deltaY = -deltaY;\n                        int deltaV = (int) (255 * deltaY * 3 / mScreenHeight);\n                        WindowManager.LayoutParams params = JZUtils.getWindow(getContext()).getAttributes();\n                        if (((mGestureDownBrightness + deltaV) / 255) >= 1) {//\xe8\xbf\x99\xe5\x92\x8c\xe5\xa3\xb0\xe9\x9f\xb3\xe6\x9c\x89\xe5\x8c\xba\xe5\x88\xab\xef\xbc\x8c\xe5\xbf\x85\xe9\xa1\xbb\xe8\x87\xaa\xe5\xb7\xb1\xe8\xbf\x87\xe6\xbb\xa4\xe4\xb8\x80\xe4\xb8\x8b\xe8\xb4\x9f\xe5\x80\xbc\n                            params.screenBrightness = 1;\n                        } else if (((mGestureDownBrightness + deltaV) / 255) <= 0) {\n                            params.screenBrightness = 0.01f;\n                        } else {\n                            params.screenBrightness = (mGestureDownBrightness + deltaV) / 255;\n                        }\n                        JZUtils.getWindow(getContext()).setAttributes(params);\n                        //dialog\xe4\xb8\xad\xe6\x98\xbe\xe7\xa4\xba\xe7\x99\xbe\xe5\x88\x86\xe6\xaf\x94\n                        int brightnessPercent = (int) (mGestureDownBrightness * 100 / 255 + deltaY * 3 * 100 / mScreenHeight);\n                        showBrightnessDialog(brightnessPercent);\n//                        mDownY = y;\n                    }\n                    break;\n                case MotionEvent.ACTION_UP:\n                    Log.i(TAG, "onTouch surfaceContainer actionUp [" + this.hashCode() + "] ");\n                    mTouchingProgressBar = false;\n                    dismissProgressDialog();\n                    dismissVolumeDialog();\n                    dismissBrightnessDialog();\n                    if (mChangePosition) {\n                        onEvent(JZUserAction.ON_TOUCH_SCREEN_SEEK_POSITION);\n                        JZMediaManager.seekTo(mSeekTimePosition);\n                        long duration = getDuration();\n                        int progress = (int) (mSeekTimePosition * 100 / (duration == 0 ? 1 : duration));\n                        progressBar.setProgress(progress);\n                    }\n                    if (mChangeVolume) {\n                        onEvent(JZUserAction.ON_TOUCH_SCREEN_SEEK_VOLUME);\n                    }\n                    startProgressTimer();\n                    break;\n            }\n        }\n        return false;\n    }\n}\n'