b'package com.bennyhuo.kotlin.scheduledtask\n\nimport android.os.Handler\nimport android.os.HandlerThread\nimport android.os.Message\nimport com.bennyhuo.kotlin.api.Config\nimport com.bennyhuo.kotlin.api.updateApi\nimport retrofit2.Call\nimport retrofit2.Callback\nimport retrofit2.Response\n\nclass HandlerUpdateTask : UpdateTask {\n\n    private var handlerThread: HandlerThread? = null\n    private var handler: Handler? = null\n\n    private fun Handler.triggerUpdateNext(delay: Long) {\n        val message = Message.obtain(handler) {\n            updateApi.getConfig().enqueue(object : Callback<List<Config>> {\n                override fun onResponse(\n                    call: Call<List<Config>>,\n                    response: Response<List<Config>>\n                ) {\n                    println(response.body())\n                }\n\n                override fun onFailure(call: Call<List<Config>>, t: Throwable) {\n                    t.printStackTrace()\n                }\n            })\n            triggerUpdateNext(delay)\n        }\n        message.obj = this@HandlerUpdateTask\n        sendMessageDelayed(message, delay)\n    }\n\n    override fun scheduleUpdate(interval: Long) {\n        cancel()\n\n        val handlerThread = HandlerThread("handler-thread")\n        handlerThread.start()\n        val handler = Handler(handlerThread.looper)\n        handler.triggerUpdateNext(interval)\n\n        this.handlerThread = handlerThread\n        this.handler = handler\n    }\n\n    override fun cancel() {\n        handler?.removeCallbacksAndMessages(this)\n        handler = null\n        handlerThread?.quit()\n        handlerThread = null\n    }\n}'