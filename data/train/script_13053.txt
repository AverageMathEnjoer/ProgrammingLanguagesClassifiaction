b'-- |\n-- Module      : Hoodle.ModelAction.Clipboard\n-- Copyright   : (c) 2011-2013 Ian-Woo Kim\n--\n-- License     : BSD3\n-- Maintainer  : Ian-Woo Kim <ianwookim@gmail.com>\n-- Stability   : experimental\n-- Portability : GHC\n--\n-- Clipboard io actions\nmodule Hoodle.ModelAction.Clipboard where\n\nimport Control.Lens (view)\nimport Control.Monad.Trans (liftIO)\nimport qualified Data.ByteString.Base64 as B64\nimport qualified Data.ByteString.Char8 as C8\nimport Data.Hoodle.Simple (Item)\nimport qualified Data.Serialize as Se\nimport qualified Graphics.UI.Gtk as Gtk\nimport Hoodle.ModelAction.Select (togglePaste)\nimport Hoodle.Script.Hook (afterUpdateClipboardHook)\nimport Hoodle.Type.Event\n  ( AllEvent (UsrEv),\n    UserEvent (GotClipboardContent),\n  )\nimport Hoodle.Type.HoodleState\n  ( HoodleState,\n    gtkUIManager,\n    hookSet,\n  )\n\n-- |\nupdateClipboard :: HoodleState -> [Item] -> IO HoodleState\nupdateClipboard xstate itms\n  | null itms = return xstate\n  | otherwise = do\n    let ui = view gtkUIManager xstate\n    hdltag <- Gtk.atomNew "hoodle"\n    clipbd <- Gtk.clipboardGet hdltag\n    let bstr = C8.unpack . B64.encode . Se.encode $ itms\n    Gtk.clipboardSetText clipbd bstr\n    togglePaste ui True\n    case view hookSet xstate of\n      Nothing -> return ()\n      Just hset -> case afterUpdateClipboardHook hset of\n        Nothing -> return ()\n        Just uchook -> liftIO $ uchook itms\n    return xstate\n\n-- |\ncallback4Clip :: (AllEvent -> IO ()) -> Maybe String -> IO ()\ncallback4Clip callbk Nothing = callbk (UsrEv (GotClipboardContent Nothing))\ncallback4Clip callbk (Just str) = do\n  let r = do\n        let bstr = C8.pack str\n        bstr\' <- B64.decode bstr\n        Se.decode bstr\'\n  case r of\n    Left _err -> callbk (UsrEv (GotClipboardContent Nothing))\n    Right cnt -> callbk (UsrEv (GotClipboardContent (Just cnt)))\n'