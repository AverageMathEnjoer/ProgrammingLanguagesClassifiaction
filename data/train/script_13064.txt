b'package com.github.eprendre.sources_by_eprendre\n\nimport com.github.eprendre.tingshu.extensions.config\nimport com.github.eprendre.tingshu.sources.AudioUrlExtraHeaders\nimport com.github.eprendre.tingshu.sources.AudioUrlExtractor\nimport com.github.eprendre.tingshu.sources.AudioUrlJsoupExtractor\nimport com.github.eprendre.tingshu.sources.TingShu\nimport com.github.eprendre.tingshu.utils.*\nimport org.jsoup.Jsoup\nimport java.net.URL\nimport java.net.URLDecoder\nimport java.net.URLEncoder\n\nobject HuanTingWang : TingShu(), AudioUrlExtraHeaders {\n    override fun getSourceId(): String {\n        return "63bbe587eae94cedb15e80d2c8689805"\n    }\n\n    override fun getUrl(): String {\n        return "http://m.ting89.com"\n    }\n\n    override fun getName(): String {\n        return "\xe5\xb9\xbb\xe5\x90\xac\xe7\xbd\x91"\n    }\n\n    override fun isSearchable(): Boolean {\n        return false\n    }\n\n    override fun isDiscoverable(): Boolean {\n        return false\n    }\n\n    override fun getDesc(): String {\n        return "\xe6\x8e\xa8\xe8\x8d\x90\xe6\x8c\x87\xe6\x95\xb0:5\xe6\x98\x9f \xe2\xad\x90\xe2\xad\x90\xe2\xad\x90\xe2\xad\x90\xe2\xad\x90\\n\xe7\xbd\x91\xe7\xab\x99\xe5\xb7\xb2\xe5\x85\xb3\xe9\x97\xad\xef\xbc\x8c\xe6\xad\xa4\xe6\xba\x90\xe6\x97\xa0\xe6\xb3\x95\xe4\xbd\xbf\xe7\x94\xa8\xe3\x80\x82"\n    }\n\n    override fun isWebViewNotRequired(): Boolean {\n        return true\n    }\n\n    override fun search(keywords: String, page: Int): Pair<List<Book>, Int> {\n        val encodedKeywords = URLEncoder.encode(keywords, "gb2312")\n        val url = "http://m.ting89.com/search.asp?searchword=$encodedKeywords&page=$page"\n        val doc = Jsoup.connect(url).config().get()\n\n        val totalPage = doc.selectFirst(".page").ownText().split("/")[1].toInt()\n\n        val list = ArrayList<Book>()\n        val elementList = doc.select("#cateList_wap .bookbox")\n        elementList.forEach { element ->\n            var coverUrl = element.selectFirst(".bookimg img").attr("orgsrc")\n            if (coverUrl.startsWith("//")) {\n                coverUrl = "http:$coverUrl"\n            }\n            val bookUrl = "${getUrl()}/book/?${element.attr("bookid")}.html"\n            val bookInfo = element.selectFirst(".bookinfo")\n            val title = bookInfo.selectFirst(".bookname").text()\n            val (author, artist) = bookInfo.selectFirst(".author").text().split(" ").let {\n                Pair(it[0], it[1])\n            }\n            val intro = bookInfo.selectFirst(".intro_line").text()\n            val status = bookInfo.selectFirst(".update").text()\n            list.add(Book(coverUrl, bookUrl, title, author, artist).apply {\n                this.intro = intro\n                this.status = status\n                this.sourceId = getSourceId()\n            })\n        }\n        return Pair(list, totalPage)\n    }\n\n    override fun getBookDetailInfo(bookUrl: String, loadEpisodes: Boolean, loadFullPages: Boolean): BookDetail {\n        val doc = Jsoup.connect(bookUrl).config().get()\n        val episodes = doc.select("#playlist li a").map {\n            Episode(it.text(), it.attr("abs:href"))\n        }\n        val intro = doc.selectFirst(".book_intro").text()\n\n        return BookDetail(episodes, intro)\n    }\n\n    override fun getAudioUrlExtractor(): AudioUrlExtractor {\n        AudioUrlJsoupExtractor.setUp { doc ->\n            val result = doc.getElementsByTag("script")\n                .first { !it.hasAttr("src") && !it.hasAttr("type") }\n                .html()\n                .let {\n                    Regex("datas=\\\\(\\"(.*)\\"\\\\.split")\n                        .find(it)?.groupValues?.get(1)\n                }\n            if (result == null) {\n                return@setUp ""\n            } else {\n                val list = URLDecoder.decode(result, "gb2312").split("&")\n                return@setUp list[0]\n            }\n        }\n        return AudioUrlJsoupExtractor\n    }\n\n    override fun getCategoryMenus(): List<CategoryMenu> {\n        val menu1 = CategoryMenu(\n            "\xe5\xb0\x8f\xe8\xaf\xb4", listOf(\n                CategoryTab("\xe7\x8e\x84\xe5\xb9\xbb\xe7\x8e\x84\xe5\xb9\xbb", "http://m.ting89.com/booklist/?1.html"),\n                CategoryTab("\xe6\xad\xa6\xe4\xbe\xa0\xe4\xbb\x99\xe4\xbe\xa0", "http://m.ting89.com/booklist/?2.html"),\n                CategoryTab("\xe7\xa7\x91\xe5\xb9\xbb\xe4\xb8\x96\xe7\x95\x8c", "http://m.ting89.com/booklist/?5.html"),\n                CategoryTab("\xe7\xbd\x91\xe7\xbb\x9c\xe6\xb8\xb8\xe6\x88\x8f", "http://m.ting89.com/booklist/?11.html"),\n                CategoryTab("\xe7\x8e\xb0\xe4\xbb\xa3\xe9\x83\xbd\xe5\xb8\x82", "http://m.ting89.com/booklist/?3.html"),\n                CategoryTab("\xe5\xa5\xb3\xe7\x94\x9f\xe8\xa8\x80\xe6\x83\x85", "http://m.ting89.com/booklist/?4.html"),\n                CategoryTab("\xe5\xa5\xb3\xe7\x94\x9f\xe7\xa9\xbf\xe8\xb6\x8a", "http://m.ting89.com/booklist/?38.html"),\n                CategoryTab("\xe6\x8e\xa8\xe7\x90\x86\xe6\x82\xac\xe5\xbf\xb5", "http://m.ting89.com/booklist/?6.html"),\n                CategoryTab("\xe6\x81\x90\xe6\x80\x96\xe6\x95\x85\xe4\xba\x8b", "http://m.ting89.com/booklist/?7.html"),\n                CategoryTab("\xe6\x82\xac\xe7\x96\x91\xe6\x83\x8a\xe6\x82\x9a", "http://m.ting89.com/booklist/?8.html")\n            )\n        )\n\n        val menu2 = CategoryMenu(\n            "\xe5\x85\xb6\xe5\xae\x83", listOf(\n                CategoryTab("\xe5\x8e\x86\xe5\x8f\xb2\xe4\xbc\xa0\xe8\xae\xb0", "http://m.ting89.com/booklist/?9.html"),\n                CategoryTab("\xe9\x93\x81\xe8\xa1\x80\xe5\x86\x9b\xe9\xad\x82", "http://m.ting89.com/booklist/?10.html"),\n                CategoryTab("\xe7\xbb\x8f\xe5\x85\xb8\xe4\xbc\xa0\xe8\xae\xb0", "http://m.ting89.com/booklist/?35.html"),\n                CategoryTab("\xe7\x99\xbe\xe5\xae\xb6\xe8\xae\xb2\xe5\x9d\x9b", "http://m.ting89.com/booklist/?36.html"),\n                CategoryTab("\xe7\xb2\xa4\xe8\xaf\xad", "http://m.ting89.com/booklist/?40.html"),\n                CategoryTab("\xe5\x84\xbf\xe7\xab\xa5\xe6\x95\x85\xe4\xba\x8b", "http://m.ting89.com/booklist/?16.html"),\n                CategoryTab("\xe7\x9b\xb8\xe5\xa3\xb0", "http://m.ting89.com/booklist/?34.html"),\n                CategoryTab("\xe8\xaf\x84\xe4\xb9\xa6", "http://m.ting89.com/booklist/?13.html")\n            )\n        )\n        return listOf(menu1, menu2)\n    }\n\n    override fun getCategoryList(url: String): Category {\n        val doc = Jsoup.connect(url).config().get()\n        val nextUrl = doc.select(".page a").firstOrNull { it.text().contains("\xe4\xb8\x8b\xe9\xa1\xb5") }?.attr("abs:href") ?: ""\n        val pages = doc.selectFirst(".page").ownText().let { text ->\n            Regex("(\\\\d+)/(\\\\d+)").find(text)!!.groupValues\n        }\n        val currentPage = pages[1].toInt()\n        val totalPage = pages[2].toInt()\n\n        val list = ArrayList<Book>()\n        val elementList = doc.select("#cateList_wap .bookbox")\n        elementList.forEach { element ->\n            var coverUrl = element.selectFirst(".bookimg img").attr("orgsrc")\n            if (coverUrl.startsWith("//")) {\n                coverUrl = "http:$coverUrl"\n            }\n            val bookUrl = "${getUrl()}/book/?${element.attr("bookid")}.html"\n            val bookInfo = element.selectFirst(".bookinfo")\n            val title = bookInfo.selectFirst(".bookname").text()\n            val (author, artist) = bookInfo.selectFirst(".author").text().split(" ").let {\n                Pair(it[0], it[1])\n            }\n            val intro = bookInfo.selectFirst(".intro_line").text()\n            val status = bookInfo.selectFirst(".update").text()\n            list.add(Book(coverUrl, bookUrl, title, author, artist).apply {\n                this.intro = intro\n                this.status = status\n                this.sourceId = getSourceId()\n            })\n        }\n        return Category(list, currentPage, totalPage, url, nextUrl)\n    }\n\n    override fun headers(audioUrl: String): Map<String, String> {\n        val hashMap = hashMapOf<String, String>()\n        if (audioUrl.contains("ting89.com")) {//\xe5\x88\xa4\xe6\x96\xad\xe4\xb8\x80\xe4\xb8\x8b\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe4\xb8\x80\xe4\xb8\xaa\xe7\xbd\x91\xe7\xab\x99\xe5\x8f\xaf\xe8\x83\xbd\xe4\xbc\x9a\xe7\x88\xac\xe5\x8f\x96\xe5\xa4\x9a\xe5\xae\xb6\xe8\xb5\x84\xe6\xba\x90\n            hashMap["Referer"] = "http://m.ting89.com/"\n        }\n        return hashMap\n    }\n}'