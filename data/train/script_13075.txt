b'/*\n * Copyright (C) 2015 tyrantgit\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage tyrantgit.explosionfield;\n\nimport android.animation.Animator;\nimport android.animation.AnimatorListenerAdapter;\nimport android.animation.ValueAnimator;\nimport android.app.Activity;\nimport android.content.Context;\nimport android.graphics.Bitmap;\nimport android.graphics.Canvas;\nimport android.graphics.Rect;\nimport android.util.AttributeSet;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.view.Window;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Random;\n\n\npublic class ExplosionField extends View {\n\n    private List<ExplosionAnimator> mExplosions = new ArrayList<>();\n    private int[] mExpandInset = new int[2];\n\n    public ExplosionField(Context context) {\n        super(context);\n        init();\n    }\n\n    public ExplosionField(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        init();\n    }\n\n    public ExplosionField(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        init();\n    }\n\n    private void init() {\n        Arrays.fill(mExpandInset, Utils.dp2Px(32));\n    }\n\n    @Override\n    protected void onDraw(Canvas canvas) {\n        super.onDraw(canvas);\n        for (ExplosionAnimator explosion : mExplosions) {\n            explosion.draw(canvas);\n        }\n    }\n\n    public void expandExplosionBound(int dx, int dy) {\n        mExpandInset[0] = dx;\n        mExpandInset[1] = dy;\n    }\n\n    public void explode(Bitmap bitmap, Rect bound, long startDelay, long duration) {\n        final ExplosionAnimator explosion = new ExplosionAnimator(this, bitmap, bound);\n        explosion.addListener(new AnimatorListenerAdapter() {\n            @Override\n            public void onAnimationEnd(Animator animation) {\n                mExplosions.remove(animation);\n            }\n        });\n        explosion.setStartDelay(startDelay);\n        explosion.setDuration(duration);\n        mExplosions.add(explosion);\n        explosion.start();\n    }\n\n    public void explode(final View view) {\n        Rect r = new Rect();\n        view.getGlobalVisibleRect(r);\n        int[] location = new int[2];\n        getLocationOnScreen(location);\n        r.offset(-location[0], -location[1]);\n        r.inset(-mExpandInset[0], -mExpandInset[1]);\n        int startDelay = 100;\n        ValueAnimator animator = ValueAnimator.ofFloat(0f, 1f).setDuration(150);\n        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n\n            Random random = new Random();\n\n            @Override\n            public void onAnimationUpdate(ValueAnimator animation) {\n                view.setTranslationX((random.nextFloat() - 0.5f) * view.getWidth() * 0.05f);\n                view.setTranslationY((random.nextFloat() - 0.5f) * view.getHeight() * 0.05f);\n\n            }\n        });\n        animator.start();\n        view.animate().setDuration(150).setStartDelay(startDelay).scaleX(0f).scaleY(0f).alpha(0f).start();\n        explode(Utils.createBitmapFromView(view), r, startDelay, ExplosionAnimator.DEFAULT_DURATION);\n    }\n\n    public void clear() {\n        mExplosions.clear();\n        invalidate();\n    }\n\n    public static ExplosionField attach2Window(Activity activity) {\n        ViewGroup rootView = (ViewGroup) activity.findViewById(Window.ID_ANDROID_CONTENT);\n        ExplosionField explosionField = new ExplosionField(activity);\n        rootView.addView(explosionField, new ViewGroup.LayoutParams(\n                ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));\n        return explosionField;\n    }\n\n}\n'