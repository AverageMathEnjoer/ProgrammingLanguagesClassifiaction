b'package droidninja.filepicker.adapters\n\nimport android.content.Context\nimport android.net.Uri\nimport androidx.recyclerview.widget.RecyclerView\nimport android.util.DisplayMetrics\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.view.WindowManager\nimport android.widget.ImageView\n\nimport com.bumptech.glide.RequestManager\nimport com.bumptech.glide.request.RequestOptions\n\nimport java.io.File\nimport java.util.ArrayList\n\nimport droidninja.filepicker.FilePickerConst\nimport droidninja.filepicker.PickerManager\nimport droidninja.filepicker.R\nimport droidninja.filepicker.models.Media\nimport droidninja.filepicker.utils.AndroidLifecycleUtils\nimport droidninja.filepicker.views.SmoothCheckBox\n\nclass PhotoGridAdapter(private val context: Context,\n                       private val glide: RequestManager,\n                       medias: List<Media>,\n                       selectedPaths: MutableList<Uri>,\n                       private val showCamera: Boolean,\n                       private val mListener: FileAdapterListener?) : SelectableAdapter<PhotoGridAdapter.PhotoViewHolder, Media>(medias, selectedPaths) {\n    private var imageSize: Int = 0\n    private var cameraOnClickListener: View.OnClickListener? = null\n\n    init {\n        setColumnNumber(context, 3)\n    }\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): PhotoViewHolder {\n        val itemView = LayoutInflater.from(context).inflate(R.layout.item_photo_layout, parent, false)\n\n        return PhotoViewHolder(itemView)\n    }\n\n    override fun getItemViewType(position: Int): Int {\n        return if (showCamera)\n            if (position == 0) ITEM_TYPE_CAMERA else ITEM_TYPE_PHOTO\n        else\n            ITEM_TYPE_PHOTO\n    }\n\n    override fun onBindViewHolder(holder: PhotoViewHolder, position: Int) {\n        if (getItemViewType(position) == ITEM_TYPE_PHOTO) {\n\n            val media = items[if (showCamera) position - 1 else position]\n\n            if (AndroidLifecycleUtils.canLoadImage(holder.imageView.context)) {\n                glide.load(media.path)\n                        .apply(RequestOptions\n                                .centerCropTransform()\n                                .override(imageSize, imageSize)\n                                .placeholder(R.drawable.image_placeholder))\n                        .thumbnail(0.5f)\n                        .into(holder.imageView)\n            }\n\n\n            if (media.mediaType == FilePickerConst.MEDIA_TYPE_VIDEO)\n                holder.videoIcon.visibility = View.VISIBLE\n            else\n                holder.videoIcon.visibility = View.GONE\n\n            holder.itemView.setOnClickListener { onItemClicked(holder, media) }\n\n            //in some cases, it will prevent unwanted situations\n            holder.checkBox.visibility = View.GONE\n            holder.checkBox.setOnCheckedChangeListener(null)\n            holder.checkBox.setOnClickListener { onItemClicked(holder, media) }\n\n            //if true, your checkbox will be selected, else unselected\n            holder.checkBox.isChecked = isSelected(media)\n\n            holder.selectBg.visibility = if (isSelected(media)) View.VISIBLE else View.GONE\n            holder.checkBox.visibility = if (isSelected(media)) View.VISIBLE else View.GONE\n\n            holder.checkBox.setOnCheckedChangeListener(object : SmoothCheckBox.OnCheckedChangeListener {\n                override fun onCheckedChanged(checkBox: SmoothCheckBox, isChecked: Boolean) {\n                    toggleSelection(media)\n                    holder.selectBg.visibility = if (isChecked) View.VISIBLE else View.GONE\n\n                    if (isChecked) {\n                        holder.checkBox.visibility = View.VISIBLE\n                        PickerManager.add(media.path, FilePickerConst.FILE_TYPE_MEDIA)\n                    } else {\n                        holder.checkBox.visibility = View.GONE\n                        PickerManager.remove(media.path, FilePickerConst.FILE_TYPE_MEDIA)\n                    }\n\n                    mListener?.onItemSelected()\n                }\n            })\n\n        } else {\n            holder.imageView.setImageResource(PickerManager.cameraDrawable)\n            holder.checkBox.visibility = View.GONE\n            holder.itemView.setOnClickListener(cameraOnClickListener)\n            holder.videoIcon.visibility = View.GONE\n        }\n    }\n\n    private fun onItemClicked(holder: PhotoViewHolder, media: Media) {\n        if (PickerManager.getMaxCount() == 1) {\n            PickerManager.add(media.path, FilePickerConst.FILE_TYPE_MEDIA)\n            mListener?.onItemSelected()\n        } else if (holder.checkBox.isChecked || PickerManager.shouldAdd()) {\n            holder.checkBox.setChecked(!holder.checkBox.isChecked, true)\n        }\n    }\n\n    private fun setColumnNumber(context: Context, columnNum: Int) {\n        val wm = context.getSystemService(Context.WINDOW_SERVICE) as WindowManager\n        val metrics = DisplayMetrics()\n        wm.defaultDisplay.getMetrics(metrics)\n        val widthPixels = metrics.widthPixels\n        imageSize = widthPixels / columnNum\n    }\n\n    override fun getItemCount(): Int {\n        return if (showCamera) items.size + 1 else items.size\n    }\n\n    fun setCameraListener(onClickListener: View.OnClickListener) {\n        this.cameraOnClickListener = onClickListener\n    }\n\n    class PhotoViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n\n        var checkBox: SmoothCheckBox\n\n        var imageView: ImageView\n\n        var videoIcon: ImageView\n\n        var selectBg: View\n\n        init {\n            checkBox = itemView.findViewById<View>(R.id.checkbox) as SmoothCheckBox\n            imageView = itemView.findViewById<View>(R.id.iv_photo) as ImageView\n            videoIcon = itemView.findViewById<View>(R.id.video_icon) as ImageView\n            selectBg = itemView.findViewById(R.id.transparent_bg)\n        }\n    }\n\n    companion object {\n\n        val ITEM_TYPE_CAMERA = 100\n        val ITEM_TYPE_PHOTO = 101\n    }\n}\n'