b'class Solution {\npublic:\n    int countSubstrings(string s) {\n        int n = s.size();\n        vector<vector<bool>> dp(n, vector<bool>(n, 0));\n        for(int i = 0; i < n; i++)\n            dp[i][i] = 1;\n        \n        // fill this dp\n        for(int len = 2; len <= n; len++) {\n            for(int i = 0; i + len - 1 < n; i++) {\n                // starting from i, and length len\n                int j = i + len - 1;\n                if (i+1 == j) {\n                    dp[i][j] = s[i] == s[j];\n                }\n                else {\n                    dp[i][j] = s[i] == s[j] && dp[i+1][j-1];\n                }\n            }\n        }\n        \n        int ans = 0;\n        for(int i = 0; i < n; i++)\n        for(int j = 0; j < n; j++)\n            ans += dp[i][j];\n        return ans;\n    }\n};\n/*\nfor substring in all_subtrings;\n    if palindrome(substring)\n        ans++;\n\n\ndp[i][j] = substring(i, i+1, ..., j) = is this a palindrome\n\ns[i] == s[j] && dp[i+1][j-1] should be true\n*/'