b'{-# LANGUAGE OverloadedStrings #-}\n\n-- | Postgres-specific types, functions, and operators\nmodule Database.Beam.Sqlite.SqliteSpecific\n    ( -- * Sqlite functions and aggregates\n      sqliteGroupConcat\n    , sqliteGroupConcatOver\n    )\nwhere\n\nimport           Database.Beam\nimport           Database.Beam.Backend.SQL\nimport           Database.Beam.Query.Internal\nimport           Database.Beam.Sqlite.Connection\nimport           Database.Beam.Sqlite.Syntax\n#if !MIN_VERSION_base(4, 11, 0)\nimport           Data.Semigroup\n#endif\n\n-- | The SQLite @group_concat@ function.\n-- Joins the value in each row of the first argument, using the second\n-- argument as a delimiter. See \'sqliteGroupConcatOver\' if you want to provide\n-- explicit quantification.\nsqliteGroupConcat\n    :: ( BeamSqlBackendCanSerialize Sqlite a\n       , BeamSqlBackendIsString Sqlite str\n       , BeamSqlBackendIsString Sqlite str2 )\n    => QExpr Sqlite s a\n    -> QExpr Sqlite s str\n    -> QAgg Sqlite s (Maybe str2)\nsqliteGroupConcat v delim = _sqliteGroupConcatOver allInGroup_ v (Just delim)\n\n\n-- | The SQLite @group_concat@ function.\n-- Joins the value in each row of the first argument using \',\'.\n-- See \'sqliteGroupConcat\' if you want to change the delimiter.\n-- Choosing a custom delimiter and quantification isn\'t allowed by SQLite.\nsqliteGroupConcatOver\n    :: ( BeamSqlBackendCanSerialize Sqlite a\n       , BeamSqlBackendIsString Sqlite str )\n    => Maybe SqliteAggregationSetQuantifierSyntax\n    -> QExpr Sqlite s a\n    -> QAgg Sqlite s (Maybe str)\nsqliteGroupConcatOver quantifier v = _sqliteGroupConcatOver quantifier v Nothing\n\n-- SQLite doesn\'t allow DISTINCT and a custom delimiter\n_sqliteGroupConcatOver\n    :: ( BeamSqlBackendCanSerialize Sqlite a\n       , BeamSqlBackendIsString Sqlite str )\n    => Maybe SqliteAggregationSetQuantifierSyntax\n    -> QExpr Sqlite s a\n    -> Maybe (QExpr Sqlite s str2)\n    -> QAgg Sqlite s (Maybe str)\n_sqliteGroupConcatOver quantifier (QExpr v) delim =\n    QExpr $ \\tbl -> SqliteExpressionSyntax $\n    emit "group_concat" <>\n    parens ( maybe mempty (\\q -> fromSqliteAggregationSetQuantifier q <> emit " ") quantifier <>\n             fromSqliteExpression (v tbl) <>\n             maybe mempty (\\(QExpr d) -> emit ", " <> fromSqliteExpression (d tbl)) delim)\n'