b'/*\n * Copyright 2013 - 2016 Mario Arias\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.funktionale.partials\n\nimport org.testng.Assert.assertEquals\nimport org.testng.annotations.Test\n\n\nclass PartialsTest {\n    @Test fun partially() {\n        val sum5ints = { a: Int, b: Int, c: Int, d: Int, e: Int -> a + b + c + d + e }\n\n        val sum4intsTo10 = sum5ints.partially5(10)\n\n        val sum3intsTo15 = sum4intsTo10.partially4(5)\n\n        val sum2intsTo17 = sum3intsTo15.partially3(2)\n\n        assertEquals(sum2intsTo17(1, 2), 20)\n\n        val prefixAndPostfix = { prefix: String, x: String, postfix: String -> "$prefix$x$postfix" }\n\n        val helloX = prefixAndPostfix.partially1("Hello, ").partially2("!")\n\n        assertEquals(helloX("funKTionale"), "Hello, funKTionale!")\n    }\n\n    @Test fun partials() {\n        val sum5ints = { a: Int, b: Int, c: Int, d: Int, e: Int -> a + b + c + d + e }\n\n        val sum4intsTo10: (Int, Int, Int, Int) -> Int = sum5ints(p5 = 10)\n\n        val sum3intsTo15: (Int, Int, Int) -> Int = sum4intsTo10(p4 = 5)\n\n        val sum2intsTo17: (Int, Int) -> Int = sum3intsTo15(p3 = 2)\n\n        assertEquals(sum2intsTo17(1, 2), 20)\n\n        val prefixAndPostfix = { prefix: String, x: String, postfix: String -> "$prefix$x$postfix" }\n\n        val helloX: (String) -> String = prefixAndPostfix(p1 = "Hello, ")(p2 = "!")\n\n        assertEquals(helloX("funKTionale"), "Hello, funKTionale!")\n    }\n\n    @Test fun bind() {\n        var i = 0\n        fun inc(a: Int) {\n            i += a\n        }\n\n        val binded = ::inc.bind(5)\n\n        assertEquals(i, 0)\n\n        binded()\n\n        assertEquals(i, 5)\n    }\n}'