b'{-# OPTIONS_GHC -fno-warn-type-defaults #-}\n{-# LANGUAGE NoImplicitPrelude   #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n\nmodule Course.FunctorSpec where\n\nimport           Test.Hspec               (Spec, describe, it, shouldBe)\nimport           Test.Hspec.QuickCheck    (prop)\nimport           Test.QuickCheck.Function (Fun (..))\n\nimport           Course.Core\nimport           Course.ExactlyOne        (ExactlyOne (..))\nimport           Course.Functor           (void, (<$), (<$>))\nimport           Course.List              (List (..))\nimport           Course.Optional          (Optional (..))\n\nspec :: Spec\nspec = do\n  it "ExactlyOne" $ (+1) <$> ExactlyOne 2 `shouldBe` ExactlyOne 3\n\n  describe "List" $ do\n    it "empty list" $\n      (+1) <$> Nil `shouldBe` Nil\n    it "increment" $\n      (+1) <$> (1 :. 2 :. 3 :. Nil) `shouldBe` (2 :. 3 :. 4 :. Nil)\n\n  describe "Optional" $ do\n    it "Empty" $ (+1) <$> Empty `shouldBe` Empty\n    it "Full"  $ (+1) <$> Full 2 `shouldBe` Full 3\n\n  describe "Function" $ do\n    it "(->)" $ ((+1) <$> (*2)) 8 `shouldBe` 17\n\n  describe "(<$)" $ do\n    it "Map 7" $ 7 <$ (1 :. 2 :. 3 :. Nil) `shouldBe` (7 :. 7 :. 7 :. Nil)\n    prop "Always maps a constant value over List" $\n      \\x a b c -> (x :: Integer) <$ ((a :. b :. c :. Nil) :: List Integer) == (x :. x :. x :. Nil)\n    prop "Always maps a constant value over Full (Optional)" $\n      \\(x :: Integer) (q :: Integer) -> x <$ Full q == Full x\n\n  describe "void" $ do\n    it "List"  $ void (1 :. 2 :. 3 :. Nil) `shouldBe` () :. () :. () :. Nil\n    it "Full"  $ void (Full 7) `shouldBe` Full ()\n    it "Empty" $ void Empty `shouldBe` Empty\n    it "(->)"  $ void (+10) 5 `shouldBe` ()\n'