b'\xef\xbb\xbfusing System;\nusing System.IO;\nusing System.IO.Compression;\nusing System.Linq;\nusing System.Net;\nusing System.Net.Security;\nusing System.Security.Cryptography.X509Certificates;\nusing System.Text;\nusing System.Text.RegularExpressions;\n\nnamespace DMSkin.Core\n{\n    public class HTTP\n    {\n        public static HTTP New\n        {\n            get\n            {\n                return new HTTP();\n            }\n        }\n\n        #region \xe9\xa2\x84\xe5\xae\x9a\xe4\xb9\x89\xe6\x96\xb9\xe5\x8f\x98\xe9\x87\x8f\n\n        //\xe9\xbb\x98\xe8\xae\xa4\xe7\x9a\x84\xe7\xbc\x96\xe7\xa0\x81\n        private Encoding encoding = Encoding.Default;\n\n        //Post\xe6\x95\xb0\xe6\x8d\xae\xe7\xbc\x96\xe7\xa0\x81\n        private Encoding postencoding = Encoding.Default;\n\n        //HttpWebRequest\xe5\xaf\xb9\xe8\xb1\xa1\xe7\x94\xa8\xe6\x9d\xa5\xe5\x8f\x91\xe8\xb5\xb7\xe8\xaf\xb7\xe6\xb1\x82\n        private HttpWebRequest request = null;\n\n        //\xe8\x8e\xb7\xe5\x8f\x96\xe5\xbd\xb1\xe5\x93\x8d\xe6\xb5\x81\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe5\xaf\xb9\xe8\xb1\xa1\n        private HttpWebResponse response = null;\n\n        //\xe8\xae\xbe\xe7\xbd\xae\xe6\x9c\xac\xe5\x9c\xb0\xe7\x9a\x84\xe5\x87\xba\xe5\x8f\xa3ip\xe5\x92\x8c\xe7\xab\xaf\xe5\x8f\xa3\n        private IPEndPoint _IPEndPoint = null;\n\n        #endregion \xe9\xa2\x84\xe5\xae\x9a\xe4\xb9\x89\xe6\x96\xb9\xe5\x8f\x98\xe9\x87\x8f\n\n        #region Public\n\n        /// <summary>\n        /// \xe6\xa0\xb9\xe6\x8d\xae\xe7\x9b\xb8\xe4\xbc\xa0\xe5\x85\xa5\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe5\xbe\x97\xe5\x88\xb0\xe7\x9b\xb8\xe5\xba\x94\xe9\xa1\xb5\xe9\x9d\xa2\xe6\x95\xb0\xe6\x8d\xae\n        /// </summary>\n        /// <param name="item">\xe5\x8f\x82\xe6\x95\xb0\xe7\xb1\xbb\xe5\xaf\xb9\xe8\xb1\xa1</param>\n        /// <returns>\xe8\xbf\x94\xe5\x9b\x9eHttpResult\xe7\xb1\xbb\xe5\x9e\x8b</returns>\n        public HttpResult GetHtml(HttpItem item)\n        {\n            //\xe8\xbf\x94\xe5\x9b\x9e\xe5\x8f\x82\xe6\x95\xb0\n            HttpResult result = new HttpResult();\n            try\n            {\n                //\xe5\x87\x86\xe5\xa4\x87\xe5\x8f\x82\xe6\x95\xb0\n                SetRequest(item);\n            }\n            catch (Exception ex)\n            {\n                //\xe9\x85\x8d\xe7\xbd\xae\xe5\x8f\x82\xe6\x95\xb0\xe6\x97\xb6\xe5\x87\xba\xe9\x94\x99\n                return new HttpResult() { Cookie = string.Empty, Header = null, Html = ex.Message, StatusDescription = "\xe9\x85\x8d\xe7\xbd\xae\xe5\x8f\x82\xe6\x95\xb0\xe6\x97\xb6\xe5\x87\xba\xe9\x94\x99\xef\xbc\x9a" + ex.Message };\n            }\n            try\n            {\n                //\xe8\xaf\xb7\xe6\xb1\x82\xe6\x95\xb0\xe6\x8d\xae\n                using (response = (HttpWebResponse)request.GetResponse())\n                {\n                    GetData(item, result);\n                }\n            }\n            catch (WebException ex)\n            {\n                if (ex.Response != null)\n                {\n                    using (response = (HttpWebResponse)ex.Response)\n                    {\n                        GetData(item, result);\n                    }\n                }\n                else\n                {\n                    result.Html = ex.Message;\n                }\n            }\n            catch (Exception ex)\n            {\n                result.Html = ex.Message;\n            }\n            if (item.IsToLower) result.Html = result.Html.ToLower();\n            //\xe9\x87\x8d\xe7\xbd\xaerequest\xef\xbc\x8cresponse\xe4\xb8\xba\xe7\xa9\xba\n            if (item.IsReset)\n            {\n                request = null;\n                response = null;\n            }\n            return result;\n        }\n\n        public HttpResult GetResponseURL(HttpItem item)\n        {\n            //\xe8\xbf\x94\xe5\x9b\x9e\xe5\x8f\x82\xe6\x95\xb0\n            HttpResult result = new HttpResult();\n            try\n            {\n                //\xe5\x87\x86\xe5\xa4\x87\xe5\x8f\x82\xe6\x95\xb0\n                SetRequest(item);\n            }\n            catch (Exception ex)\n            {\n                //\xe9\x85\x8d\xe7\xbd\xae\xe5\x8f\x82\xe6\x95\xb0\xe6\x97\xb6\xe5\x87\xba\xe9\x94\x99\n                return new HttpResult() { Cookie = string.Empty, Header = null, Html = ex.Message, StatusDescription = "\xe9\x85\x8d\xe7\xbd\xae\xe5\x8f\x82\xe6\x95\xb0\xe6\x97\xb6\xe5\x87\xba\xe9\x94\x99\xef\xbc\x9a" + ex.Message };\n            }\n            try\n            {\n                //\xe8\xaf\xb7\xe6\xb1\x82\xe6\x95\xb0\xe6\x8d\xae\n                using (response = (HttpWebResponse)request.GetResponse())\n                {\n                    result.ResponseUri = response.ResponseUri.ToString();\n                }\n            }\n            catch (Exception ex)\n            {\n                result.Html = ex.Message;\n            }\n            return result;\n        }\n        #endregion Public\n\n        #region GetData\n\n        /// <summary>\n        /// \xe8\x8e\xb7\xe5\x8f\x96\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe5\xb9\xb6\xe8\xa7\xa3\xe6\x9e\x90\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\n        /// </summary>\n        /// <param name="item"></param>\n        /// <param name="result"></param>\n        private void GetData(HttpItem item, HttpResult result)\n        {\n            if (response == null)\n            {\n                return;\n            }\n\n            #region base\n\n            //\xe8\x8e\xb7\xe5\x8f\x96StatusCode\n            result.StatusCode = response.StatusCode;\n            //\xe8\x8e\xb7\xe5\x8f\x96StatusDescription\n            result.StatusDescription = response.StatusDescription;\n            //\xe8\x8e\xb7\xe5\x8f\x96Headers\n            result.Header = response.Headers;\n            //\xe8\x8e\xb7\xe5\x8f\x96\xe6\x9c\x80\xe5\x90\x8e\xe8\xae\xbf\xe9\x97\xae\xe7\x9a\x84URl\n            result.ResponseUri = response.ResponseUri.ToString();\n            //\xe8\x8e\xb7\xe5\x8f\x96CookieCollection\n            if (response.Cookies != null) result.CookieCollection = response.Cookies;\n            //\xe8\x8e\xb7\xe5\x8f\x96set-cookie\n            if (response.Headers["set-cookie"] != null) result.Cookie = response.Headers["set-cookie"];\n\n            #endregion base\n\n            #region byte\n\n            //\xe5\xa4\x84\xe7\x90\x86\xe7\xbd\x91\xe9\xa1\xb5Byte\n            byte[] ResponseByte = GetByte();\n\n            #endregion byte\n\n            #region Html\n\n            if (ResponseByte != null && ResponseByte.Length > 0)\n            {\n                //\xe8\xae\xbe\xe7\xbd\xae\xe7\xbc\x96\xe7\xa0\x81\n                SetEncoding(item, result, ResponseByte);\n                //\xe5\xbe\x97\xe5\x88\xb0\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84HTML\n                result.Html = encoding.GetString(ResponseByte);\n            }\n            else\n            {\n                //\xe6\xb2\xa1\xe6\x9c\x89\xe8\xbf\x94\xe5\x9b\x9e\xe4\xbb\xbb\xe4\xbd\x95Html\xe4\xbb\xa3\xe7\xa0\x81\n                result.Html = string.Empty;\n            }\n\n            #endregion Html\n        }\n\n        /// <summary>\n        /// \xe8\xae\xbe\xe7\xbd\xae\xe7\xbc\x96\xe7\xa0\x81\n        /// </summary>\n        /// <param name="item">HttpItem</param>\n        /// <param name="result">HttpResult</param>\n        /// <param name="ResponseByte">byte[]</param>\n        private void SetEncoding(HttpItem item, HttpResult result, byte[] ResponseByte)\n        {\n            //\xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x94\xe5\x9b\x9eByte\xe7\xb1\xbb\xe5\x9e\x8b\xe6\x95\xb0\xe6\x8d\xae\n            if (item.ResultType == ResultType.Byte) result.ResultByte = ResponseByte;\n            //\xe4\xbb\x8e\xe8\xbf\x99\xe9\x87\x8c\xe5\xbc\x80\xe5\xa7\x8b\xe6\x88\x91\xe4\xbb\xac\xe8\xa6\x81\xe6\x97\xa0\xe8\xa7\x86\xe7\xbc\x96\xe7\xa0\x81\xe4\xba\x86\n            if (encoding == null)\n            {\n                Match meta = Regex.Match(Encoding.Default.GetString(ResponseByte), "<meta[^<]*charset=([^<]*)[\\"\']", RegexOptions.IgnoreCase);\n                string c = string.Empty;\n                if (meta != null && meta.Groups.Count > 0)\n                {\n                    c = meta.Groups[1].Value.ToLower().Trim();\n                }\n                if (c.Length > 2)\n                {\n                    try\n                    {\n                        encoding = Encoding.GetEncoding(c.Replace("\\"", string.Empty).Replace("\'", "").Replace(";", "").Replace("iso-8859-1", "gbk").Trim());\n                    }\n                    catch\n                    {\n                        if (string.IsNullOrEmpty(response.CharacterSet))\n                        {\n                            encoding = Encoding.UTF8;\n                        }\n                        else\n                        {\n                            encoding = Encoding.GetEncoding(response.CharacterSet);\n                        }\n                    }\n                }\n                else\n                {\n                    if (string.IsNullOrEmpty(response.CharacterSet))\n                    {\n                        encoding = Encoding.UTF8;\n                    }\n                    else\n                    {\n                        encoding = Encoding.GetEncoding(response.CharacterSet);\n                    }\n                }\n            }\n        }\n\n        /// <summary>\n        /// \xe6\x8f\x90\xe5\x8f\x96\xe7\xbd\x91\xe9\xa1\xb5Byte\n        /// </summary>\n        /// <returns></returns>\n        private byte[] GetByte()\n        {\n            byte[] ResponseByte = null;\n            using (MemoryStream _stream = new MemoryStream())\n            {\n                //GZIIP\xe5\xa4\x84\xe7\x90\x86\n                if (response.ContentEncoding != null && response.ContentEncoding.Equals("gzip", StringComparison.InvariantCultureIgnoreCase))\n                {\n                    //\xe5\xbc\x80\xe5\xa7\x8b\xe8\xaf\xbb\xe5\x8f\x96\xe6\xb5\x81\xe5\xb9\xb6\xe8\xae\xbe\xe7\xbd\xae\xe7\xbc\x96\xe7\xa0\x81\xe6\x96\xb9\xe5\xbc\x8f\n                    new GZipStream(response.GetResponseStream(), CompressionMode.Decompress).CopyTo(_stream, 10240);\n                }\n                else\n                {\n                    //\xe5\xbc\x80\xe5\xa7\x8b\xe8\xaf\xbb\xe5\x8f\x96\xe6\xb5\x81\xe5\xb9\xb6\xe8\xae\xbe\xe7\xbd\xae\xe7\xbc\x96\xe7\xa0\x81\xe6\x96\xb9\xe5\xbc\x8f\n                    response.GetResponseStream().CopyTo(_stream, 10240);\n                }\n                //\xe8\x8e\xb7\xe5\x8f\x96Byte\n                ResponseByte = _stream.ToArray();\n            }\n            return ResponseByte;\n        }\n\n        #endregion GetData\n\n        #region SetRequest\n\n        /// <summary>\n        /// \xe4\xb8\xba\xe8\xaf\xb7\xe6\xb1\x82\xe5\x87\x86\xe5\xa4\x87\xe5\x8f\x82\xe6\x95\xb0\n        /// </summary>\n        ///<param name="item">\xe5\x8f\x82\xe6\x95\xb0\xe5\x88\x97\xe8\xa1\xa8</param>\n        private void SetRequest(HttpItem item)\n        {\n            // \xe9\xaa\x8c\xe8\xaf\x81\xe8\xaf\x81\xe4\xb9\xa6\n            SetCer(item);\n            if (item.IPEndPoint != null)\n            {\n                _IPEndPoint = item.IPEndPoint;\n                //\xe8\xae\xbe\xe7\xbd\xae\xe6\x9c\xac\xe5\x9c\xb0\xe7\x9a\x84\xe5\x87\xba\xe5\x8f\xa3ip\xe5\x92\x8c\xe7\xab\xaf\xe5\x8f\xa3\n                request.ServicePoint.BindIPEndPointDelegate = new BindIPEndPoint(BindIPEndPointCallback);\n            }\n            //\xe8\xae\xbe\xe7\xbd\xaeHeader\xe5\x8f\x82\xe6\x95\xb0\n            if (item.Header != null && item.Header.Count > 0) foreach (string key in item.Header.AllKeys)\n                {\n                    request.Headers.Add(key, item.Header[key]);\n                }\n            // \xe8\xae\xbe\xe7\xbd\xae\xe4\xbb\xa3\xe7\x90\x86\n            SetProxy(item);\n            if (item.ProtocolVersion != null) request.ProtocolVersion = item.ProtocolVersion;\n            request.ServicePoint.Expect100Continue = item.Expect100Continue;\n            //\xe8\xaf\xb7\xe6\xb1\x82\xe6\x96\xb9\xe5\xbc\x8fGet\xe6\x88\x96\xe8\x80\x85Post\n            request.Method = item.Method;\n            request.Timeout = item.Timeout;\n            request.KeepAlive = item.KeepAlive;\n            request.ReadWriteTimeout = item.ReadWriteTimeout;\n            if (!string.IsNullOrWhiteSpace(item.Host))\n            {\n                request.Host = item.Host;\n            }\n            if (item.IfModifiedSince != null) request.IfModifiedSince = Convert.ToDateTime(item.IfModifiedSince);\n            //Accept\n            request.Accept = item.Accept;\n            //ContentType\xe8\xbf\x94\xe5\x9b\x9e\xe7\xb1\xbb\xe5\x9e\x8b\n            request.ContentType = item.ContentType;\n            //UserAgent\xe5\xae\xa2\xe6\x88\xb7\xe7\xab\xaf\xe7\x9a\x84\xe8\xae\xbf\xe9\x97\xae\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8c\xe5\x8c\x85\xe6\x8b\xac\xe6\xb5\x8f\xe8\xa7\x88\xe5\x99\xa8\xe7\x89\x88\xe6\x9c\xac\xe5\x92\x8c\xe6\x93\x8d\xe4\xbd\x9c\xe7\xb3\xbb\xe7\xbb\x9f\xe4\xbf\xa1\xe6\x81\xaf\n            request.UserAgent = item.UserAgent;\n            // \xe7\xbc\x96\xe7\xa0\x81\n            encoding = item.Encoding;\n            //\xe8\xae\xbe\xe7\xbd\xae\xe5\xae\x89\xe5\x85\xa8\xe5\x87\xad\xe8\xaf\x81\n            request.Credentials = item.ICredentials;\n            //\xe8\xae\xbe\xe7\xbd\xaeCookie\n            SetCookie(item);\n            //\xe6\x9d\xa5\xe6\xba\x90\xe5\x9c\xb0\xe5\x9d\x80\n            request.Referer = item.Referer;\n            //\xe6\x98\xaf\xe5\x90\xa6\xe6\x89\xa7\xe8\xa1\x8c\xe8\xb7\xb3\xe8\xbd\xac\xe5\x8a\x9f\xe8\x83\xbd\n            request.AllowAutoRedirect = item.Allowautoredirect;\n            if (item.MaximumAutomaticRedirections > 0)\n            {\n                request.MaximumAutomaticRedirections = item.MaximumAutomaticRedirections;\n            }\n            //\xe8\xae\xbe\xe7\xbd\xaePost\xe6\x95\xb0\xe6\x8d\xae\n            SetPostData(item);\n            //\xe8\xae\xbe\xe7\xbd\xae\xe6\x9c\x80\xe5\xa4\xa7\xe8\xbf\x9e\xe6\x8e\xa5\n            if (item.Connectionlimit > 0) request.ServicePoint.ConnectionLimit = item.Connectionlimit;\n        }\n\n        /// <summary>\n        /// \xe8\xae\xbe\xe7\xbd\xae\xe8\xaf\x81\xe4\xb9\xa6\n        /// </summary>\n        /// <param name="item"></param>\n        private void SetCer(HttpItem item)\n        {\n            if (!string.IsNullOrWhiteSpace(item.CerPath))\n            {\n                //\xe8\xbf\x99\xe4\xb8\x80\xe5\x8f\xa5\xe4\xb8\x80\xe5\xae\x9a\xe8\xa6\x81\xe5\x86\x99\xe5\x9c\xa8\xe5\x88\x9b\xe5\xbb\xba\xe8\xbf\x9e\xe6\x8e\xa5\xe7\x9a\x84\xe5\x89\x8d\xe9\x9d\xa2\xe3\x80\x82\xe4\xbd\xbf\xe7\x94\xa8\xe5\x9b\x9e\xe8\xb0\x83\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xaf\x81\xe4\xb9\xa6\xe9\xaa\x8c\xe8\xaf\x81\xe3\x80\x82\n                ServicePointManager.ServerCertificateValidationCallback = new System.Net.Security.RemoteCertificateValidationCallback(CheckValidationResult);\n                //\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe5\xaf\xb9\xe5\x83\x8f\xef\xbc\x8c\xe5\xb9\xb6\xe8\xae\xbe\xe7\xbd\xae\xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84URL\xe5\x9c\xb0\xe5\x9d\x80\n                request = (HttpWebRequest)WebRequest.Create(item.URL);\n                SetCerList(item);\n                //\xe5\xb0\x86\xe8\xaf\x81\xe4\xb9\xa6\xe6\xb7\xbb\xe5\x8a\xa0\xe5\x88\xb0\xe8\xaf\xb7\xe6\xb1\x82\xe9\x87\x8c\n                request.ClientCertificates.Add(new X509Certificate(item.CerPath));\n            }\n            else\n            {\n                //\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe5\xaf\xb9\xe5\x83\x8f\xef\xbc\x8c\xe5\xb9\xb6\xe8\xae\xbe\xe7\xbd\xae\xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84URL\xe5\x9c\xb0\xe5\x9d\x80\n                request = (HttpWebRequest)WebRequest.Create(item.URL);\n                SetCerList(item);\n            }\n        }\n\n        /// <summary>\n        /// \xe8\xae\xbe\xe7\xbd\xae\xe5\xa4\x9a\xe4\xb8\xaa\xe8\xaf\x81\xe4\xb9\xa6\n        /// </summary>\n        /// <param name="item"></param>\n        private void SetCerList(HttpItem item)\n        {\n            if (item.ClentCertificates != null && item.ClentCertificates.Count > 0)\n            {\n                foreach (X509Certificate c in item.ClentCertificates)\n                {\n                    request.ClientCertificates.Add(c);\n                }\n            }\n        }\n\n        /// <summary>\n        /// \xe8\xae\xbe\xe7\xbd\xaeCookie\n        /// </summary>\n        /// <param name="item">Http\xe5\x8f\x82\xe6\x95\xb0</param>\n        private void SetCookie(HttpItem item)\n        {\n            if (!string.IsNullOrEmpty(item.Cookie)) request.Headers[HttpRequestHeader.Cookie] = item.Cookie;\n            //\xe8\xae\xbe\xe7\xbd\xaeCookieCollection\n            if (item.ResultCookieType == ResultCookieType.CookieCollection)\n            {\n                request.CookieContainer = new CookieContainer();\n                if (item.CookieCollection != null && item.CookieCollection.Count > 0)\n                    request.CookieContainer.Add(item.CookieCollection);\n            }\n        }\n\n        /// <summary>\n        /// \xe8\xae\xbe\xe7\xbd\xaePost\xe6\x95\xb0\xe6\x8d\xae\n        /// </summary>\n        /// <param name="item">Http\xe5\x8f\x82\xe6\x95\xb0</param>\n        private void SetPostData(HttpItem item)\n        {\n            //\xe9\xaa\x8c\xe8\xaf\x81\xe5\x9c\xa8\xe5\xbe\x97\xe5\x88\xb0\xe7\xbb\x93\xe6\x9e\x9c\xe6\x97\xb6\xe6\x98\xaf\xe5\x90\xa6\xe6\x9c\x89\xe4\xbc\xa0\xe5\x85\xa5\xe6\x95\xb0\xe6\x8d\xae\n            if (!request.Method.Trim().ToLower().Contains("get"))\n            {\n                if (item.PostEncoding != null)\n                {\n                    postencoding = item.PostEncoding;\n                }\n                byte[] buffer = null;\n                //\xe5\x86\x99\xe5\x85\xa5Byte\xe7\xb1\xbb\xe5\x9e\x8b\n                if (item.PostDataType == PostDataType.Byte && item.PostdataByte != null && item.PostdataByte.Length > 0)\n                {\n                    //\xe9\xaa\x8c\xe8\xaf\x81\xe5\x9c\xa8\xe5\xbe\x97\xe5\x88\xb0\xe7\xbb\x93\xe6\x9e\x9c\xe6\x97\xb6\xe6\x98\xaf\xe5\x90\xa6\xe6\x9c\x89\xe4\xbc\xa0\xe5\x85\xa5\xe6\x95\xb0\xe6\x8d\xae\n                    buffer = item.PostdataByte;\n                }//\xe5\x86\x99\xe5\x85\xa5\xe6\x96\x87\xe4\xbb\xb6\n                else if (item.PostDataType == PostDataType.FilePath && !string.IsNullOrWhiteSpace(item.Postdata))\n                {\n                    StreamReader r = new StreamReader(item.Postdata, postencoding);\n                    buffer = postencoding.GetBytes(r.ReadToEnd());\n                    r.Close();\n                } //\xe5\x86\x99\xe5\x85\xa5\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\n                else if (!string.IsNullOrWhiteSpace(item.Postdata))\n                {\n                    buffer = postencoding.GetBytes(item.Postdata);\n                }\n                if (buffer != null)\n                {\n                    request.ContentLength = buffer.Length;\n                    request.GetRequestStream().Write(buffer, 0, buffer.Length);\n                }\n                else\n                {\n                    request.ContentLength = 0;\n                }\n            }\n        }\n\n        /// <summary>\n        /// \xe8\xae\xbe\xe7\xbd\xae\xe4\xbb\xa3\xe7\x90\x86\n        /// </summary>\n        /// <param name="item">\xe5\x8f\x82\xe6\x95\xb0\xe5\xaf\xb9\xe8\xb1\xa1</param>\n        private void SetProxy(HttpItem item)\n        {\n            bool isIeProxy = false;\n            if (!string.IsNullOrWhiteSpace(item.ProxyIp))\n            {\n                isIeProxy = item.ProxyIp.ToLower().Contains("ieproxy");\n            }\n            if (!string.IsNullOrWhiteSpace(item.ProxyIp) && !isIeProxy)\n            {\n                //\xe8\xae\xbe\xe7\xbd\xae\xe4\xbb\xa3\xe7\x90\x86\xe6\x9c\x8d\xe5\x8a\xa1\xe5\x99\xa8\n                if (item.ProxyIp.Contains(":"))\n                {\n                    string[] plist = item.ProxyIp.Split(\':\');\n                    WebProxy myProxy = new WebProxy(plist[0].Trim(), Convert.ToInt32(plist[1].Trim()));\n                    //\xe5\xbb\xba\xe8\xae\xae\xe8\xbf\x9e\xe6\x8e\xa5\n                    myProxy.Credentials = new NetworkCredential(item.ProxyUserName, item.ProxyPwd);\n                    //\xe7\xbb\x99\xe5\xbd\x93\xe5\x89\x8d\xe8\xaf\xb7\xe6\xb1\x82\xe5\xaf\xb9\xe8\xb1\xa1\n                    request.Proxy = myProxy;\n                }\n                else\n                {\n                    WebProxy myProxy = new WebProxy(item.ProxyIp, false);\n                    //\xe5\xbb\xba\xe8\xae\xae\xe8\xbf\x9e\xe6\x8e\xa5\n                    myProxy.Credentials = new NetworkCredential(item.ProxyUserName, item.ProxyPwd);\n                    //\xe7\xbb\x99\xe5\xbd\x93\xe5\x89\x8d\xe8\xaf\xb7\xe6\xb1\x82\xe5\xaf\xb9\xe8\xb1\xa1\n                    request.Proxy = myProxy;\n                }\n            }\n            else if (isIeProxy)\n            {\n                //\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xbaIE\xe4\xbb\xa3\xe7\x90\x86\n            }\n            else\n            {\n                request.Proxy = item.WebProxy;\n            }\n        }\n\n        #endregion SetRequest\n\n        #region private main\n\n        /// <summary>\n        /// \xe5\x9b\x9e\xe8\xb0\x83\xe9\xaa\x8c\xe8\xaf\x81\xe8\xaf\x81\xe4\xb9\xa6\xe9\x97\xae\xe9\xa2\x98\n        /// </summary>\n        /// <param name="sender">\xe6\xb5\x81\xe5\xaf\xb9\xe8\xb1\xa1</param>\n        /// <param name="certificate">\xe8\xaf\x81\xe4\xb9\xa6</param>\n        /// <param name="chain">X509Chain</param>\n        /// <param name="errors">SslPolicyErrors</param>\n        /// <returns>bool</returns>\n        private bool CheckValidationResult(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors errors) { return true; }\n\n        /// <summary>\n        /// \xe9\x80\x9a\xe8\xbf\x87\xe8\xae\xbe\xe7\xbd\xae\xe8\xbf\x99\xe4\xb8\xaa\xe5\xb1\x9e\xe6\x80\xa7\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe5\x9c\xa8\xe5\x8f\x91\xe5\x87\xba\xe8\xbf\x9e\xe6\x8e\xa5\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99\xe7\xbb\x91\xe5\xae\x9a\xe5\xae\xa2\xe6\x88\xb7\xe7\xab\xaf\xe5\x8f\x91\xe5\x87\xba\xe8\xbf\x9e\xe6\x8e\xa5\xe6\x89\x80\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84IP\xe5\x9c\xb0\xe5\x9d\x80\xe3\x80\x82\n        /// </summary>\n        /// <param name="servicePoint"></param>\n        /// <param name="remoteEndPoint"></param>\n        /// <param name="retryCount"></param>\n        /// <returns></returns>\n        private IPEndPoint BindIPEndPointCallback(ServicePoint servicePoint, IPEndPoint remoteEndPoint, int retryCount)\n        {\n            return _IPEndPoint;//\xe7\xab\xaf\xe5\x8f\xa3\xe5\x8f\xb7\n        }\n\n        #endregion private main\n    }\n\n    #region public calss\n\n    /// <summary>\n    /// Http\xe8\xaf\xb7\xe6\xb1\x82\xe5\x8f\x82\xe8\x80\x83\xe7\xb1\xbb\n    /// </summary>\n    public class HttpItem\n    {\n        /// <summary>\n        /// \xe8\xaf\xb7\xe6\xb1\x82URL\xe5\xbf\x85\xe9\xa1\xbb\xe5\xa1\xab\xe5\x86\x99\n        /// </summary>\n        public string URL { get; set; }\n\n        private string _Method = "GET";\n\n        /// <summary>\n        /// \xe8\xaf\xb7\xe6\xb1\x82\xe6\x96\xb9\xe5\xbc\x8f\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xbaGET\xe6\x96\xb9\xe5\xbc\x8f,\xe5\xbd\x93\xe4\xb8\xbaPOST\xe6\x96\xb9\xe5\xbc\x8f\xe6\x97\xb6\xe5\xbf\x85\xe9\xa1\xbb\xe8\xae\xbe\xe7\xbd\xaePostdata\xe7\x9a\x84\xe5\x80\xbc\n        /// </summary>\n        public string Method\n        {\n            get { return _Method; }\n            set { _Method = value; }\n        }\n\n        private int _Timeout = 20000;\n\n        /// <summary>\n        /// \xe9\xbb\x98\xe8\xae\xa4\xe8\xaf\xb7\xe6\xb1\x82\xe8\xb6\x85\xe6\x97\xb6\xe6\x97\xb6\xe9\x97\xb4\n        /// </summary>\n        public int Timeout\n        {\n            get { return _Timeout; }\n            set { _Timeout = value; }\n        }\n\n        private int _ReadWriteTimeout = 30000;\n\n        /// <summary>\n        /// \xe9\xbb\x98\xe8\xae\xa4\xe5\x86\x99\xe5\x85\xa5Post\xe6\x95\xb0\xe6\x8d\xae\xe8\xb6\x85\xe6\x97\xb6\xe9\x97\xb4\n        /// </summary>\n        public int ReadWriteTimeout\n        {\n            get { return _ReadWriteTimeout; }\n            set { _ReadWriteTimeout = value; }\n        }\n\n        /// <summary>\n        /// \xe8\xae\xbe\xe7\xbd\xaeHost\xe7\x9a\x84\xe6\xa0\x87\xe5\xa4\xb4\xe4\xbf\xa1\xe6\x81\xaf\n        /// </summary>\n        public string Host { get; set; }\n\n        private Boolean _KeepAlive = true;\n\n        /// <summary>\n        ///  \xe8\x8e\xb7\xe5\x8f\x96\xe6\x88\x96\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\x80\xe4\xb8\xaa\xe5\x80\xbc\xef\xbc\x8c\xe8\xaf\xa5\xe5\x80\xbc\xe6\x8c\x87\xe7\xa4\xba\xe6\x98\xaf\xe5\x90\xa6\xe4\xb8\x8e Internet \xe8\xb5\x84\xe6\xba\x90\xe5\xbb\xba\xe7\xab\x8b\xe6\x8c\x81\xe4\xb9\x85\xe6\x80\xa7\xe8\xbf\x9e\xe6\x8e\xa5\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xbatrue\xe3\x80\x82\n        /// </summary>\n        public Boolean KeepAlive\n        {\n            get { return _KeepAlive; }\n            set { _KeepAlive = value; }\n        }\n\n        private string _Accept = "text/html, application/xhtml+xml, */*";\n\n        /// <summary>\n        /// \xe8\xaf\xb7\xe6\xb1\x82\xe6\xa0\x87\xe5\xa4\xb4\xe5\x80\xbc \xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xbatext/html, application/xhtml+xml, */*\n        /// </summary>\n        public string Accept\n        {\n            get { return _Accept; }\n            set { _Accept = value; }\n        }\n\n        private string _ContentType = "text/html";\n\n        /// <summary>\n        /// \xe8\xaf\xb7\xe6\xb1\x82\xe8\xbf\x94\xe5\x9b\x9e\xe7\xb1\xbb\xe5\x9e\x8b\xe9\xbb\x98\xe8\xae\xa4 text/html\n        /// </summary>\n        public string ContentType\n        {\n            get { return _ContentType; }\n            set { _ContentType = value; }\n        }\n\n        private string _UserAgent = "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36";\n\n        /// <summary>\n        /// \xe5\xae\xa2\xe6\x88\xb7\xe7\xab\xaf\xe8\xae\xbf\xe9\x97\xae\xe4\xbf\xa1\xe6\x81\xaf\xe9\xbb\x98\xe8\xae\xa4Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)\n        /// </summary>\n        public string UserAgent\n        {\n            get { return _UserAgent; }\n            set { _UserAgent = value; }\n        }\n\n        /// <summary>\n        /// \xe8\xbf\x94\xe5\x9b\x9e\xe6\x95\xb0\xe6\x8d\xae\xe7\xbc\x96\xe7\xa0\x81\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xbaNUll,\xe5\x8f\xaf\xe4\xbb\xa5\xe8\x87\xaa\xe5\x8a\xa8\xe8\xaf\x86\xe5\x88\xab,\xe4\xb8\x80\xe8\x88\xac\xe4\xb8\xbautf-8,gbk,gb2312\n        /// </summary>\n        public Encoding Encoding { get; set; }\n\n        private PostDataType _PostDataType = PostDataType.String;\n\n        /// <summary>\n        /// Post\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe7\xb1\xbb\xe5\x9e\x8b\n        /// </summary>\n        public PostDataType PostDataType\n        {\n            get { return _PostDataType; }\n            set { _PostDataType = value; }\n        }\n\n        /// <summary>\n        /// Post\xe8\xaf\xb7\xe6\xb1\x82\xe6\x97\xb6\xe8\xa6\x81\xe5\x8f\x91\xe9\x80\x81\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2Post\xe6\x95\xb0\xe6\x8d\xae\n        /// </summary>\n        public string Postdata { get; set; }\n\n        /// <summary>\n        /// Post\xe8\xaf\xb7\xe6\xb1\x82\xe6\x97\xb6\xe8\xa6\x81\xe5\x8f\x91\xe9\x80\x81\xe7\x9a\x84Byte\xe7\xb1\xbb\xe5\x9e\x8b\xe7\x9a\x84Post\xe6\x95\xb0\xe6\x8d\xae\n        /// </summary>\n        public byte[] PostdataByte { get; set; }\n\n        /// <summary>\n        /// Cookie\xe5\xaf\xb9\xe8\xb1\xa1\xe9\x9b\x86\xe5\x90\x88\n        /// </summary>\n        public CookieCollection CookieCollection { get; set; }\n\n        /// <summary>\n        /// \xe8\xaf\xb7\xe6\xb1\x82\xe6\x97\xb6\xe7\x9a\x84Cookie\n        /// </summary>\n        public string Cookie { get; set; }\n\n        /// <summary>\n        /// \xe6\x9d\xa5\xe6\xba\x90\xe5\x9c\xb0\xe5\x9d\x80\xef\xbc\x8c\xe4\xb8\x8a\xe6\xac\xa1\xe8\xae\xbf\xe9\x97\xae\xe5\x9c\xb0\xe5\x9d\x80\n        /// </summary>\n        public string Referer { get; set; }\n\n        /// <summary>\n        /// \xe8\xaf\x81\xe4\xb9\xa6\xe7\xbb\x9d\xe5\xaf\xb9\xe8\xb7\xaf\xe5\xbe\x84\n        /// </summary>\n        public string CerPath { get; set; }\n\n        /// <summary>\n        /// \xe8\xae\xbe\xe7\xbd\xae\xe4\xbb\xa3\xe7\x90\x86\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe4\xb8\x8d\xe6\x83\xb3\xe4\xbd\xbf\xe7\x94\xa8IE\xe9\xbb\x98\xe8\xae\xa4\xe9\x85\x8d\xe7\xbd\xae\xe5\xb0\xb1\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xbaNull\xef\xbc\x8c\xe8\x80\x8c\xe4\xb8\x94\xe4\xb8\x8d\xe8\xa6\x81\xe8\xae\xbe\xe7\xbd\xaeProxyIp\n        /// </summary>\n        public WebProxy WebProxy { get; set; }\n\n        private Boolean isToLower = false;\n\n        /// <summary>\n        /// \xe6\x98\xaf\xe5\x90\xa6\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xba\xe5\x85\xa8\xe6\x96\x87\xe5\xb0\x8f\xe5\x86\x99\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xba\xe4\xb8\x8d\xe8\xbd\xac\xe5\x8c\x96\n        /// </summary>\n        public Boolean IsToLower\n        {\n            get { return isToLower; }\n            set { isToLower = value; }\n        }\n\n        private Boolean allowautoredirect = false;\n\n        /// <summary>\n        /// \xe6\x94\xaf\xe6\x8c\x81\xe8\xb7\xb3\xe8\xbd\xac\xe9\xa1\xb5\xe9\x9d\xa2\xef\xbc\x8c\xe6\x9f\xa5\xe8\xaf\xa2\xe7\xbb\x93\xe6\x9e\x9c\xe5\xb0\x86\xe6\x98\xaf\xe8\xb7\xb3\xe8\xbd\xac\xe5\x90\x8e\xe7\x9a\x84\xe9\xa1\xb5\xe9\x9d\xa2\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe6\x98\xaf\xe4\xb8\x8d\xe8\xb7\xb3\xe8\xbd\xac\n        /// </summary>\n        public Boolean Allowautoredirect\n        {\n            get { return allowautoredirect; }\n            set { allowautoredirect = value; }\n        }\n\n        private int connectionlimit = 1024;\n\n        /// <summary>\n        /// \xe6\x9c\x80\xe5\xa4\xa7\xe8\xbf\x9e\xe6\x8e\xa5\xe6\x95\xb0\n        /// </summary>\n        public int Connectionlimit\n        {\n            get { return connectionlimit; }\n            set { connectionlimit = value; }\n        }\n\n        /// <summary>\n        /// \xe4\xbb\xa3\xe7\x90\x86Proxy \xe6\x9c\x8d\xe5\x8a\xa1\xe5\x99\xa8\xe7\x94\xa8\xe6\x88\xb7\xe5\x90\x8d\n        /// </summary>\n        public string ProxyUserName { get; set; }\n\n        /// <summary>\n        /// \xe4\xbb\xa3\xe7\x90\x86 \xe6\x9c\x8d\xe5\x8a\xa1\xe5\x99\xa8\xe5\xaf\x86\xe7\xa0\x81\n        /// </summary>\n        public string ProxyPwd { get; set; }\n\n        /// <summary>\n        /// \xe4\xbb\xa3\xe7\x90\x86 \xe6\x9c\x8d\xe5\x8a\xa1IP,\xe5\xa6\x82\xe6\x9e\x9c\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8IE\xe4\xbb\xa3\xe7\x90\x86\xe5\xb0\xb1\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xbaieproxy\n        /// </summary>\n        public string ProxyIp { get; set; }\n\n        private ResultType resulttype = ResultType.String;\n\n        /// <summary>\n        /// \xe8\xae\xbe\xe7\xbd\xae\xe8\xbf\x94\xe5\x9b\x9e\xe7\xb1\xbb\xe5\x9e\x8bString\xe5\x92\x8cByte\n        /// </summary>\n        public ResultType ResultType\n        {\n            get { return resulttype; }\n            set { resulttype = value; }\n        }\n\n        private WebHeaderCollection header = new WebHeaderCollection();\n\n        /// <summary>\n        /// header\xe5\xaf\xb9\xe8\xb1\xa1\n        /// </summary>\n        public WebHeaderCollection Header\n        {\n            get { return header; }\n            set { header = value; }\n        }\n\n        /// <summary>\n        //     \xe8\x8e\xb7\xe5\x8f\x96\xe6\x88\x96\xe8\xae\xbe\xe7\xbd\xae\xe7\x94\xa8\xe4\xba\x8e\xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84 HTTP \xe7\x89\x88\xe6\x9c\xac\xe3\x80\x82\xe8\xbf\x94\xe5\x9b\x9e\xe7\xbb\x93\xe6\x9e\x9c:\xe7\x94\xa8\xe4\xba\x8e\xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84 HTTP \xe7\x89\x88\xe6\x9c\xac\xe3\x80\x82\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xba System.Net.HttpVersion.Version11\xe3\x80\x82\n        /// </summary>\n        public Version ProtocolVersion { get; set; }\n\n        private Boolean _expect100continue = false;\n\n        /// <summary>\n        ///  \xe8\x8e\xb7\xe5\x8f\x96\xe6\x88\x96\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\x80\xe4\xb8\xaa System.Boolean \xe5\x80\xbc\xef\xbc\x8c\xe8\xaf\xa5\xe5\x80\xbc\xe7\xa1\xae\xe5\xae\x9a\xe6\x98\xaf\xe5\x90\xa6\xe4\xbd\xbf\xe7\x94\xa8 100-Continue \xe8\xa1\x8c\xe4\xb8\xba\xe3\x80\x82\xe5\xa6\x82\xe6\x9e\x9c POST \xe8\xaf\xb7\xe6\xb1\x82\xe9\x9c\x80\xe8\xa6\x81 100-Continue \xe5\x93\x8d\xe5\xba\x94\xef\xbc\x8c\xe5\x88\x99\xe4\xb8\xba true\xef\xbc\x9b\xe5\x90\xa6\xe5\x88\x99\xe4\xb8\xba false\xe3\x80\x82\xe9\xbb\x98\xe8\xae\xa4\xe5\x80\xbc\xe4\xb8\xba true\xe3\x80\x82\n        /// </summary>\n        public Boolean Expect100Continue\n        {\n            get { return _expect100continue; }\n            set { _expect100continue = value; }\n        }\n\n        /// <summary>\n        /// \xe8\xae\xbe\xe7\xbd\xae509\xe8\xaf\x81\xe4\xb9\xa6\xe9\x9b\x86\xe5\x90\x88\n        /// </summary>\n        public X509CertificateCollection ClentCertificates { get; set; }\n\n        /// <summary>\n        /// \xe8\xae\xbe\xe7\xbd\xae\xe6\x88\x96\xe8\x8e\xb7\xe5\x8f\x96Post\xe5\x8f\x82\xe6\x95\xb0\xe7\xbc\x96\xe7\xa0\x81,\xe9\xbb\x98\xe8\xae\xa4\xe7\x9a\x84\xe4\xb8\xbaDefault\xe7\xbc\x96\xe7\xa0\x81\n        /// </summary>\n        public Encoding PostEncoding { get; set; }\n\n        private ResultCookieType _ResultCookieType = ResultCookieType.String;\n\n        /// <summary>\n        /// Cookie\xe8\xbf\x94\xe5\x9b\x9e\xe7\xb1\xbb\xe5\x9e\x8b,\xe9\xbb\x98\xe8\xae\xa4\xe7\x9a\x84\xe6\x98\xaf\xe5\x8f\xaa\xe8\xbf\x94\xe5\x9b\x9e\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe7\xb1\xbb\xe5\x9e\x8b\n        /// </summary>\n        public ResultCookieType ResultCookieType\n        {\n            get { return _ResultCookieType; }\n            set { _ResultCookieType = value; }\n        }\n\n        private ICredentials _ICredentials = CredentialCache.DefaultCredentials;\n\n        /// <summary>\n        /// \xe8\x8e\xb7\xe5\x8f\x96\xe6\x88\x96\xe8\xae\xbe\xe7\xbd\xae\xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84\xe8\xba\xab\xe4\xbb\xbd\xe9\xaa\x8c\xe8\xaf\x81\xe4\xbf\xa1\xe6\x81\xaf\xe3\x80\x82\n        /// </summary>\n        public ICredentials ICredentials\n        {\n            get { return _ICredentials; }\n            set { _ICredentials = value; }\n        }\n\n        /// <summary>\n        /// \xe8\xae\xbe\xe7\xbd\xae\xe8\xaf\xb7\xe6\xb1\x82\xe5\xb0\x86\xe8\xb7\x9f\xe9\x9a\x8f\xe7\x9a\x84\xe9\x87\x8d\xe5\xae\x9a\xe5\x90\x91\xe7\x9a\x84\xe6\x9c\x80\xe5\xa4\xa7\xe6\x95\xb0\xe7\x9b\xae\n        /// </summary>\n        public int MaximumAutomaticRedirections { get; set; }\n\n        private DateTime? _IfModifiedSince = null;\n\n        /// <summary>\n        /// \xe8\x8e\xb7\xe5\x8f\x96\xe5\x92\x8c\xe8\xae\xbe\xe7\xbd\xaeIfModifiedSince\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xba\xe5\xbd\x93\xe5\x89\x8d\xe6\x97\xa5\xe6\x9c\x9f\xe5\x92\x8c\xe6\x97\xb6\xe9\x97\xb4\n        /// </summary>\n        public DateTime? IfModifiedSince\n        {\n            get { return _IfModifiedSince; }\n            set { _IfModifiedSince = value; }\n        }\n\n        #region ip-port\n\n        private IPEndPoint _IPEndPoint = null;\n\n        /// <summary>\n        /// \xe8\xae\xbe\xe7\xbd\xae\xe6\x9c\xac\xe5\x9c\xb0\xe7\x9a\x84\xe5\x87\xba\xe5\x8f\xa3ip\xe5\x92\x8c\xe7\xab\xaf\xe5\x8f\xa3\n        /// </summary>]\n        /// <example>\n        ///item.IPEndPoint = new IPEndPoint(IPAddress.Parse("192.168.1.1"),80);\n        /// </example>\n        public IPEndPoint IPEndPoint\n        {\n            get { return _IPEndPoint; }\n            set { _IPEndPoint = value; }\n        }\n\n        #endregion ip-port\n\n        private bool _isReset = false;\n\n        /// <summary>\n        /// \xe6\x98\xaf\xe5\x90\xa6\xe9\x87\x8d\xe7\xbd\xaerequest,response\xe7\x9a\x84\xe5\x80\xbc\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\x8d\xe9\x87\x8d\xe7\xbd\xae\xef\xbc\x8c\xe5\xbd\x93\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xbaTrue\xe6\x97\xb6request,response\xe5\xb0\x86\xe8\xa2\xab\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xbaNull\n        /// </summary>\n        public bool IsReset\n        {\n            get { return _isReset; }\n            set { _isReset = value; }\n        }\n    }\n\n    /// <summary>\n    /// Http\xe8\xbf\x94\xe5\x9b\x9e\xe5\x8f\x82\xe6\x95\xb0\xe7\xb1\xbb\n    /// </summary>\n    public class HttpResult\n    {\n        /// <summary>\n        /// Http\xe8\xaf\xb7\xe6\xb1\x82\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84Cookie\n        /// </summary>\n        public string Cookie { get; set; }\n\n        /// <summary>\n        /// Cookie\xe5\xaf\xb9\xe8\xb1\xa1\xe9\x9b\x86\xe5\x90\x88\n        /// </summary>\n        public CookieCollection CookieCollection { get; set; }\n\n        private string _html = string.Empty;\n\n        /// <summary>\n        /// \xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84String\xe7\xb1\xbb\xe5\x9e\x8b\xe6\x95\xb0\xe6\x8d\xae \xe5\x8f\xaa\xe6\x9c\x89ResultType.String\xe6\x97\xb6\xe6\x89\x8d\xe8\xbf\x94\xe5\x9b\x9e\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe5\x85\xb6\xe5\xae\x83\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\xba\xe7\xa9\xba\n        /// </summary>\n        public string Html\n        {\n            get { return _html; }\n            set { _html = value; }\n        }\n\n        /// <summary>\n        /// \xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84Byte\xe6\x95\xb0\xe7\xbb\x84 \xe5\x8f\xaa\xe6\x9c\x89ResultType.Byte\xe6\x97\xb6\xe6\x89\x8d\xe8\xbf\x94\xe5\x9b\x9e\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe5\x85\xb6\xe5\xae\x83\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\xba\xe7\xa9\xba\n        /// </summary>\n        public byte[] ResultByte { get; set; }\n\n        /// <summary>\n        /// header\xe5\xaf\xb9\xe8\xb1\xa1\n        /// </summary>\n        public WebHeaderCollection Header { get; set; }\n\n        /// <summary>\n        /// \xe8\xbf\x94\xe5\x9b\x9e\xe7\x8a\xb6\xe6\x80\x81\xe8\xaf\xb4\xe6\x98\x8e\n        /// </summary>\n        public string StatusDescription { get; set; }\n\n        /// <summary>\n        /// \xe8\xbf\x94\xe5\x9b\x9e\xe7\x8a\xb6\xe6\x80\x81\xe7\xa0\x81,\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xbaOK\n        /// </summary>\n        public HttpStatusCode StatusCode { get; set; }\n\n        /// <summary>\n        /// \xe6\x9c\x80\xe5\x90\x8e\xe8\xae\xbf\xe9\x97\xae\xe7\x9a\x84URl\n        /// </summary>\n        public string ResponseUri { get; set; }\n\n        /// <summary>\n        /// \xe8\x8e\xb7\xe5\x8f\x96\xe9\x87\x8d\xe5\xae\x9a\xe5\x90\x91\xe7\x9a\x84URl\n        /// </summary>\n        public string RedirectUrl\n        {\n            get\n            {\n                try\n                {\n                    if (Header != null && Header.Count > 0)\n                    {\n                        if (Header.AllKeys.Any(k => k.ToLower().Contains("location")))\n                        {\n                            string baseurl = Header["location"].ToString().Trim();\n                            string locationurl = baseurl.ToLower();\n                            if (!string.IsNullOrWhiteSpace(locationurl))\n                            {\n                                bool b = locationurl.StartsWith("http://") || locationurl.StartsWith("https://");\n                                if (!b)\n                                {\n                                    baseurl = new Uri(new Uri(ResponseUri), baseurl).AbsoluteUri;\n                                }\n                            }\n                            return baseurl;\n                        }\n                    }\n                }\n                catch { }\n                return string.Empty;\n            }\n        }\n    }\n\n    /// <summary>\n    /// \xe8\xbf\x94\xe5\x9b\x9e\xe7\xb1\xbb\xe5\x9e\x8b\n    /// </summary>\n    public enum ResultType\n    {\n        /// <summary>\n        /// \xe8\xa1\xa8\xe7\xa4\xba\xe5\x8f\xaa\xe8\xbf\x94\xe5\x9b\x9e\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2 \xe5\x8f\xaa\xe6\x9c\x89Html\xe6\x9c\x89\xe6\x95\xb0\xe6\x8d\xae\n        /// </summary>\n        String,\n\n        /// <summary>\n        /// \xe8\xa1\xa8\xe7\xa4\xba\xe8\xbf\x94\xe5\x9b\x9e\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe5\x92\x8c\xe5\xad\x97\xe8\x8a\x82\xe6\xb5\x81 ResultByte\xe5\x92\x8cHtml\xe9\x83\xbd\xe6\x9c\x89\xe6\x95\xb0\xe6\x8d\xae\xe8\xbf\x94\xe5\x9b\x9e\n        /// </summary>\n        Byte\n    }\n\n    /// <summary>\n    /// Post\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe6\xa0\xbc\xe5\xbc\x8f\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xbastring\n    /// </summary>\n    public enum PostDataType\n    {\n        /// <summary>\n        /// \xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8c\xe8\xbf\x99\xe6\x97\xb6\xe7\xbc\x96\xe7\xa0\x81Encoding\xe5\x8f\xaf\xe4\xb8\x8d\xe8\xae\xbe\xe7\xbd\xae\n        /// </summary>\n        String,\n\n        /// <summary>\n        /// Byte\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe8\xae\xbe\xe7\xbd\xaePostdataByte\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84\xe5\x80\xbc\xe7\xbc\x96\xe7\xa0\x81Encoding\xe5\x8f\xaf\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xba\xe7\xa9\xba\n        /// </summary>\n        Byte,\n\n        /// <summary>\n        /// \xe4\xbc\xa0\xe6\x96\x87\xe4\xbb\xb6\xef\xbc\x8cPostdata\xe5\xbf\x85\xe9\xa1\xbb\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xba\xe6\x96\x87\xe4\xbb\xb6\xe7\x9a\x84\xe7\xbb\x9d\xe5\xaf\xb9\xe8\xb7\xaf\xe5\xbe\x84\xef\xbc\x8c\xe5\xbf\x85\xe9\xa1\xbb\xe8\xae\xbe\xe7\xbd\xaeEncoding\xe7\x9a\x84\xe5\x80\xbc\n        /// </summary>\n        FilePath\n    }\n\n    /// <summary>\n    /// Cookie\xe8\xbf\x94\xe5\x9b\x9e\xe7\xb1\xbb\xe5\x9e\x8b\n    /// </summary>\n    public enum ResultCookieType\n    {\n        /// <summary>\n        /// \xe5\x8f\xaa\xe8\xbf\x94\xe5\x9b\x9e\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe7\xb1\xbb\xe5\x9e\x8b\xe7\x9a\x84Cookie\n        /// </summary>\n        String,\n\n        /// <summary>\n        /// CookieCollection\xe6\xa0\xbc\xe5\xbc\x8f\xe7\x9a\x84Cookie\xe9\x9b\x86\xe5\x90\x88\xe5\x90\x8c\xe6\x97\xb6\xe4\xb9\x9f\xe8\xbf\x94\xe5\x9b\x9eString\xe7\xb1\xbb\xe5\x9e\x8b\xe7\x9a\x84cookie\n        /// </summary>\n        CookieCollection\n    }\n\n    #endregion public calss\n}\n'