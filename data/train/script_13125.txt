b'package com.ethanhua.skeleton;\n\nimport android.support.annotation.IntRange;\nimport android.support.v7.widget.RecyclerView;\nimport android.view.LayoutInflater;\nimport android.view.ViewGroup;\n\nimport io.supercharge.shimmerlayout.ShimmerLayout;\n\n/**\n * Created by ethanhua on 2017/7/29.\n */\n\npublic class SkeletonAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> {\n\n    private int mItemCount;\n    private int mLayoutReference;\n    private int[] mLayoutArrayReferences;\n    private int mColor;\n    private boolean mShimmer;\n    private int mShimmerDuration;\n    private int mShimmerAngle;\n\n    @Override\n    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n        LayoutInflater inflater = LayoutInflater.from(parent.getContext());\n        if (doesArrayOfLayoutsExist()) {\n            mLayoutReference = viewType;\n        }\n        if (mShimmer) {\n            return new ShimmerViewHolder(inflater, parent, mLayoutReference);\n        }\n\n        return new RecyclerView.ViewHolder(inflater.inflate(mLayoutReference, parent, false)) {\n        };\n    }\n\n    @Override\n    public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {\n        if (mShimmer) {\n            ShimmerLayout layout = (ShimmerLayout) holder.itemView;\n            layout.setShimmerAnimationDuration(mShimmerDuration);\n            layout.setShimmerAngle(mShimmerAngle);\n            layout.setShimmerColor(mColor);\n            layout.startShimmerAnimation();\n        }\n    }\n\n    @Override\n    public int getItemViewType(int position) {\n        if(doesArrayOfLayoutsExist()) {\n            return getCorrectLayoutItem(position);\n        }\n        return super.getItemViewType(position);\n    }\n\n    @Override\n    public long getItemId(int position) {\n        return position;\n    }\n\n    @Override\n    public int getItemCount() {\n        return mItemCount;\n    }\n\n    public void setLayoutReference(int layoutReference) {\n        this.mLayoutReference = layoutReference;\n    }\n\n    public void setArrayOfLayoutReferences(int[] layoutReferences) {\n        this.mLayoutArrayReferences = layoutReferences;\n    }\n\n    public void setItemCount(int itemCount) {\n        this.mItemCount = itemCount;\n    }\n\n    public void setShimmerColor(int color) {\n        this.mColor = color;\n    }\n\n    public void shimmer(boolean shimmer) {\n        this.mShimmer = shimmer;\n    }\n\n    public void setShimmerDuration(int shimmerDuration) {\n        this.mShimmerDuration = shimmerDuration;\n    }\n\n    public void setShimmerAngle(@IntRange(from = 0, to = 30) int shimmerAngle) {\n        this.mShimmerAngle = shimmerAngle;\n    }\n\n    public int getCorrectLayoutItem(int position) {\n        if(doesArrayOfLayoutsExist()) {\n            return mLayoutArrayReferences[position % mLayoutArrayReferences.length];\n        }\n        return mLayoutReference;\n    }\n\n    private boolean doesArrayOfLayoutsExist() {\n        return mLayoutArrayReferences != null && mLayoutArrayReferences.length != 0;\n    }\n}\n'