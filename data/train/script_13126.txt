b'-- |\n-- Module      : Hoodle.ModelAction.Eraser\n-- Copyright   : (c) 2011, 2012 Ian-Woo Kim\n--\n-- License     : BSD3\n-- Maintainer  : Ian-Woo Kim <ianwookim@gmail.com>\n-- Stability   : experimental\n-- Portability : GHC\nmodule Hoodle.ModelAction.Eraser where\n\nimport Control.Monad.State (State)\nimport Data.Hoodle.BBox\n  ( BBox,\n    GetBBoxable,\n  )\nimport Graphics.Hoodle.Render.Type.HitTest\n  ( AlterList (..),\n    Hitted (..),\n    NotHitted (..),\n  )\nimport Graphics.Hoodle.Render.Util.HitTest (elimHitted)\n\n-- |\neraseHitted ::\n  (GetBBoxable a) =>\n  AlterList (NotHitted a) (AlterList (NotHitted a) (Hitted a)) ->\n  State (Maybe BBox) [a]\neraseHitted Empty = error "something wrong in eraseHitted"\neraseHitted (n :- Empty) = return (unNotHitted n)\neraseHitted (n :- h :- rest) = do\n  mid <- elimHitted h\n  (unNotHitted n ++) . (mid ++) <$> eraseHitted rest\n'