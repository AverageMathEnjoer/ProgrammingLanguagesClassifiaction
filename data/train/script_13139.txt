b'// Copyright (c) 2022 Manuel Schneider\n\n#include "albert/logging.h"\n#include "iconprovider.h"\n#include "xdg/iconlookup.h"\n#include <QApplication>\n#include <QIcon>\n#include <QMetaEnum>\n#include <QStyle>\n#include <QStyle>\n\nstatic const char * XDG_SCHEME = "xdg:";  // https://specifications.freedesktop.org/icon-theme-spec/icon-theme-spec-latest.html\nstatic const size_t XDG_SCHEME_LEN = strlen(XDG_SCHEME);\nstatic const char * QFIP_SCHEME = "qfip:";  // https://doc.qt.io/qt-6/qfileiconprovider.html\nstatic const size_t QFIP_SCHEME_LEN = strlen(QFIP_SCHEME);\nstatic const char * QSP_SCHEME = "qsp:";  // https://doc.qt.io/qt-6/qstyle.html#StandardPixmap-enum\nstatic const size_t QSP_SCHEME_LEN = strlen(QSP_SCHEME);\n\nQIcon IconProvider::getIcon(const QStringList &urls) const\n{\n    for (const auto &url : urls)\n        if (auto icon = getIcon(url); !icon.isNull())\n            return icon;\n    return {};\n}\n\nQIcon IconProvider::getIcon(const QString &url) const\n{\n    if (url.startsWith(XDG_SCHEME))\n        return QIcon(XDG::IconLookup::iconPath(url.mid((qsizetype)XDG_SCHEME_LEN)));\n\n    if (url.startsWith(QFIP_SCHEME))\n        return file_icon_provider.icon(QFileInfo(url.mid((qsizetype)QFIP_SCHEME_LEN)));\n\n    if (url.startsWith(QSP_SCHEME)){\n        auto meta_enum = QMetaEnum::fromType<QStyle::StandardPixmap>();\n        auto name = url.mid((qsizetype)QSP_SCHEME_LEN);\n        for (int i = 0; i < meta_enum.keyCount(); ++i)\n            if (name == meta_enum.key(i))\n                return QApplication::style()->standardIcon(static_cast<QStyle::StandardPixmap>(meta_enum.value(i)));\n        WARN << "No such StandardPixmap found:" << name;\n        return QIcon();\n    }\n    else\n        return QIcon(url);\n}\n'