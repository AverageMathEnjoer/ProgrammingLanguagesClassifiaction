b'// Copyright (c) 2022 Manuel Schneider\n\n#include "albert/logging.h"\n#include "include/albert/util/timeprinter.hpp"\n#include "usagedatabase.h"\n#include <QDir>\n#include <QSqlDriver>\n#include <QSqlError>\n#include <QSqlQuery>\n#include <QStandardPaths>\nusing namespace std;\n\n\nstatic const char* db_name = "usagehistory";\n\nActivation::Activation(QString q, QString e, QString i, QString a):\n    query(std::move(q)),extension_id(std::move(e)),item_id(std::move(i)),action_id(std::move(a)){}\n\nvoid UsageDatabase::initializeDatabase()\n{\n    auto db = QSqlDatabase::addDatabase("QSQLITE", db_name);\n    if (!db.isValid())\n        qFatal("No sqlite available");\n\n    if (!db.driver()->hasFeature(QSqlDriver::Transactions))\n        qFatal("QSqlDriver::Transactions not available.");\n\n    db.setDatabaseName(QDir(QStandardPaths::writableLocation(QStandardPaths::AppConfigLocation)).filePath("albert.db"));\n\n    if (!db.open())\n        qFatal("Unable to establish a database connection.");\n\n    DEBG << "Initializing database\xe2\x80\xa6";\n    QSqlQuery sql(db);\n    sql.exec("CREATE TABLE IF NOT EXISTS activation ( "\n             "    timestamp INTEGER DEFAULT CURRENT_TIMESTAMP, "\n             "    query TEXT, "\n             "    extension_id, "\n             "    item_id TEXT, "\n             "    action_id TEXT "\n             "); ");\n    if (!sql.isActive())\n        qFatal("Unable to create table \'activation\': %s", sql.lastError().text().toUtf8().constData());\n}\n\nvoid UsageDatabase::clearActivations()\n{\n    QSqlDatabase::database(db_name).exec("DROP TABLE activation;");\n    initializeDatabase();\n}\n\nvoid UsageDatabase::addActivation(const QString &q, const QString &e, const QString &i, const QString &a)\n{\n    albert::TimePrinter tp("UsageHistory::addActivation %1 \xc2\xb5s");\n\n    QSqlQuery sql(QSqlDatabase::database(db_name));\n    sql.prepare("INSERT INTO activation (query, extension_id, item_id, action_id) "\n                "VALUES (:query, :extension_id, :item_id, :action_id);");\n    sql.bindValue(":query", q);\n    sql.bindValue(":extension_id", e);\n    sql.bindValue(":item_id", i);\n    sql.bindValue(":action_id", a);\n    if (!sql.exec())\n        qFatal("SQL ERROR: %s %s", qPrintable(sql.executedQuery()), qPrintable(sql.lastError().text()));\n}\n\nstd::vector<Activation> UsageDatabase::activations()\n{\n    albert::TimePrinter tp("UsageHistory::mruScores %1 \xc2\xb5s");\n\n    QSqlQuery sql(QSqlDatabase::database(db_name));\n    sql.exec("SELECT query, extension_id, item_id, action_id "\n             "FROM activation WHERE item_id<>\'\'");\n\n    if (!sql.isActive())\n        qFatal("SQL ERROR: %s %s", qPrintable(sql.executedQuery()), qPrintable(sql.lastError().text()));\n\n    std::vector<Activation> activations;\n    while (sql.next())\n        activations.emplace_back(sql.value(0).toString(), sql.value(1).toString(),\n                                 sql.value(2).toString(), sql.value(3).toString());\n    return activations;\n}'