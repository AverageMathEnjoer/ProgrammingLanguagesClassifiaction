b'package com.github.eprendre.sources_by_eprendre\n\nimport com.github.eprendre.tingshu.extensions.config\nimport com.github.eprendre.tingshu.sources.AudioUrlDirectExtractor\nimport com.github.eprendre.tingshu.sources.AudioUrlExtractor\nimport com.github.eprendre.tingshu.sources.TingShu\nimport com.github.eprendre.tingshu.utils.*\nimport org.jsoup.Jsoup\n\nobject IFish : TingShu() {\n    override fun getSourceId(): String {\n        return "e342700214a9450791c32f55d1f9fb78"\n    }\n\n    override fun getUrl(): String {\n        return "https://ifish.fun"\n    }\n\n    override fun getName(): String {\n        return "\xe6\xb4\x9b\xe5\xa5\x87Town"\n    }\n\n    override fun getDesc(): String {\n        return "\xe6\x8e\xa8\xe8\x8d\x90\xe6\x8c\x87\xe6\x95\xb0:4\xe6\x98\x9f \xe2\xad\x90\xe2\xad\x90\xe2\xad\x90\xe2\xad\x90\\n\xe6\xaf\x8f\xe5\xa4\xa9\xe7\xb2\xbe\xe9\x80\x89\xe4\xb8\x80\xe7\xaf\x87\xe7\xbe\x8e\xe6\x96\x87\xe4\xbb\xa5\xe5\x8f\x8a\xe4\xb8\xa4\xe9\xa6\x96\xe7\xba\xaf\xe9\x9f\xb3\xe4\xb9\x90\xef\xbc\x8c\xe6\x96\x87\xe7\xab\xa0\xe7\x9a\x84\xe4\xb8\xbb\xe8\xa6\x81\xe6\x9d\xa5\xe6\xba\x90\xe4\xb8\xba\xe3\x80\x8a\xe6\xaf\x8f\xe6\x97\xa5\xe4\xb8\x80\xe6\x96\x87\xe3\x80\x8b\xe3\x80\x82\xe7\xba\xaf\xe9\x9f\xb3\xe4\xb9\x90\xe9\xa3\x8e\xe6\xa0\xbc\xe5\x80\xbe\xe5\x90\x91\xe5\x90\x8e\xe6\x91\x87\xe3\x80\x81\xe7\x94\xb5\xe5\xad\x90\xe3\x80\x81\xe5\x8f\xa4\xe5\x85\xb8\xe3\x80\x81\xe6\x96\xb0\xe4\xb8\x96\xe7\xba\xaa\xe3\x80\x81\xe5\xb0\x8f\xe6\xb8\x85\xe6\x96\xb0\xe7\xad\x89\xef\xbc\x8c\xe6\xba\x90\xe8\x87\xaa\xe4\xb8\xaa\xe4\xba\xba\xe6\x97\xa5\xe5\xb8\xb8\xe6\x90\x9c\xe8\x97\x8f\xef\xbc\x8c\xe6\xac\xa2\xe8\xbf\x8e\xe5\x85\xb3\xe6\xb3\xa8\xe5\x85\xac\xe4\xbc\x97\xe5\x8f\xb7\xef\xbc\x9a\xe9\xb1\xbc\xe5\xa3\xb0\xe9\x9f\xb3\xe4\xb9\x90\xe7\xb2\xbe\xe9\x80\x89\xe3\x80\x82"\n    }\n\n    override fun isWebViewNotRequired(): Boolean {\n        return true\n    }\n\n    /**\n     * \xe6\xb2\xa1\xe6\x9c\x89\xe6\x90\x9c\xe7\xb4\xa2\n     */\n    override fun isSearchable(): Boolean {\n        return false\n    }\n\n    override fun search(keywords: String, page: Int): Pair<List<Book>, Int> {\n        return Pair(emptyList(), 1)\n    }\n\n    override fun getAudioUrlExtractor(): AudioUrlExtractor {\n        return AudioUrlDirectExtractor\n    }\n\n    override fun getCategoryMenus(): List<CategoryMenu> {\n        val menu = CategoryMenu(\n                "\xe9\x9f\xb3\xe4\xb9\x90", listOf(\n                CategoryTab("\xe9\xb1\xbc\xe5\xa3\xb0\xe9\x9f\xb3\xe4\xb9\x90\xe7\xb2\xbe\xe9\x80\x89", "https://ifish.fun/music/fish"),\n                CategoryTab("\xe8\x90\xbd\xe7\xbd\x91\xe9\x9f\xb3\xe4\xb9\x90\xe7\xb2\xbe\xe9\x80\x89", "https://ifish.fun/music/luoo"),\n                CategoryTab("\xe5\x8f\x91\xe7\x8e\xb0\xe9\x9f\xb3\xe4\xb9\x90", "daily"))\n        )\n        return listOf(menu)\n    }\n\n    override fun getCategoryList(url: String): Category {\n        if (url == "daily") {\n            val list = ArrayList<Book>()\n            val book1 = Book("", "https://ifish.fun/music/daily?t=wy", "\xe4\xba\x91\xe6\x9d\x91\xe9\x83\xa8\xe8\x90\xbd", "", "").apply {\n                this.sourceId = getSourceId()\n            }\n            val book2 = Book("", "https://ifish.fun/music/daily?t=xm", "\xe5\xa4\xa7\xe8\x99\xbe\xe4\xb8\x96\xe7\x95\x8c", "", "").apply {\n                this.sourceId = getSourceId()\n            }\n            val book3 = Book("", "https://ifish.fun/music/daily?t=qq", "\xe6\x9d\x82\xe9\xa3\x9f\xe5\xa4\xa9\xe4\xb8\x8b", "", "").apply {\n                this.sourceId = getSourceId()\n            }\n            list.add(book1)\n            list.add(book2)\n            list.add(book3)\n            return Category(list, 1, 1, url, "")\n        } else {\n            val doc = Jsoup.connect(url).config(false).get()\n            val pages = doc.select(".page-navigator > li > a")\n            val nextPage = pages.first { it.text().contains("\xe4\xb8\x8b\xe4\xb8\x80\xe9\xa1\xb5") }\n            var nextUrl = nextPage.absUrl("href")\n            if (nextPage.hasClass("disabled")) {\n                nextUrl = ""\n            }\n            val currentPage = pages.first { it.hasClass("current") }.text().toInt()\n            val totalPage = pages.last().absUrl("href").split("p=")[1].toInt()\n\n            val list = ArrayList<Book>()\n            val elementList = doc.select(".daily-list > div > div")\n            elementList.forEach { element ->\n                val bookUrl = element.selectFirst("a").absUrl("href")\n                val coverStyle = element.selectFirst("a > .item-thumb").attr("style")\n                val coverUrl = Regex("url\\\\((.+)\\\\);").find(coverStyle)!!.groupValues[1]\n                val children = element.selectFirst("a > .item-title").children()\n                val title = children.first().text()\n                var status = ""\n                if (children.size > 1) {\n                    status = children[1].text()\n                }\n                var intro = ""\n                element.selectFirst(".item-summary")?.let {\n                    intro = it.text()\n                }\n                list.add(Book(coverUrl, bookUrl, title, "", "").apply {\n                    this.intro = intro\n                    this.status = status\n                    this.sourceId = getSourceId()\n                })\n            }\n            return Category(list, currentPage, totalPage, url, nextUrl)\n        }\n    }\n\n    override fun getBookDetailInfo(bookUrl: String, loadEpisodes: Boolean, loadFullPages: Boolean): BookDetail {\n        val episodes = ArrayList<Episode>()\n        var intro = ""\n        if (loadEpisodes) {\n            val doc = Jsoup.connect(bookUrl).config(false).get()\n            doc.select(".player-list > ol > li").forEach {\n                var url = it.selectFirst(".player-list-url").text()\n                url = "https://ifish.fun${url}"\n                val title = it.selectFirst(".player-list-name").text() + " - " + it.selectFirst(".player-list-author").text()\n                episodes.add(Episode(title, url))\n            }\n            if (!bookUrl.contains("/daily")) {\n                intro = doc.selectFirst(".text-center")?.outerHtml() ?: ""\n            }\n        }\n        return BookDetail(episodes, intro = intro)\n    }\n}'