b'/*\n * Copyright 2013 - 2016 Mario Arias\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.funktionale.either\n\nimport org.funktionale.either.Either.Left\nimport org.funktionale.either.Either.Right\nimport org.funktionale.option.Option\nimport org.funktionale.option.Option.None\nimport org.funktionale.option.Option.Some\nimport java.util.*\n\nclass LeftProjection<out L, out R>(val e: Either<L, R>) {\n\n    fun get(): L = when (e) {\n        is Left -> e.l\n        is Right -> throw NoSuchElementException("Either.left.value on Right")\n    }\n\n    fun forEach(f: (L) -> Unit) {\n        when (e) {\n            is Left<L, R> -> f(e.l)\n        }\n    }\n\n\n    fun exists(predicate: (L) -> Boolean): Boolean = when (e) {\n        is Left -> predicate(e.l)\n        is Right -> false\n    }\n\n\n    fun <X> map(f: (L) -> X): Either<X, R> = flatMap { Left<X, R>(f(it)) }\n\n    fun filter(predicate: (L) -> Boolean): Option<Either<L, R>> = when (e) {\n        is Left -> {\n            if (predicate(e.l)) {\n                Some(e)\n            } else {\n                None\n            }\n        }\n        is Right -> None\n    }\n\n    fun toList(): List<L> = when (e) {\n        is Left -> listOf(e.l)\n        is Right -> listOf()\n    }\n\n    fun toOption(): Option<L> = when (e) {\n        is Left -> Some(e.l)\n        is Right -> None\n    }\n\n}\n\nfun <L, R, X> LeftProjection<L, R>.flatMap(f: (L) -> Either<X, R>): Either<X, R> = when (e) {\n    is Left -> f(e.l)\n    is Right -> Right(e.r)\n}\n\nfun <L, R, X, Y> LeftProjection<L, R>.map(x: Either<X, R>, f: (L, X) -> Y): Either<Y, R> = flatMap { l -> x.left().map { xx -> f(l, xx) } }\n\nfun <L, R> LeftProjection<L, R>.getOrElse(default: () -> L): L = when (e) {\n    is Left -> e.l\n    is Right -> default()\n}\n'