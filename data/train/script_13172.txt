b'\xef\xbb\xbfusing Asn1;\nusing System;\n\nnamespace Rubeus\n{\n    //  KERB-AD-RESTRICTION-ENTRY ::= SEQUENCE {\n    // restriction-type[0] Int32,\n    // restriction[1] OCTET STRING\n    // }\n    public class ADRestrictionEntry : AuthorizationData\n    {\n        public ADRestrictionEntry()\n        {\n            ad_type = Interop.AuthorizationDataType.KERB_AUTH_DATA_TOKEN_RESTRICTIONS;\n\n            restriction_type = 0;\n\n            Interop.LSAP_TOKEN_INFO_INTEGRITY_FLAGS flags = Interop.LSAP_TOKEN_INFO_INTEGRITY_FLAGS.UAC_RESTRICTED;\n            Interop.LSAP_TOKEN_INFO_INTEGRITY_TOKENIL tokenIL = Interop.LSAP_TOKEN_INFO_INTEGRITY_TOKENIL.MEDIUM;\n\n            restriction = buildTokenStruct(flags, tokenIL);\n\n\n        }\n\n        public ADRestrictionEntry(byte[] data)\n        {\n            ad_type = Interop.AuthorizationDataType.KERB_AUTH_DATA_TOKEN_RESTRICTIONS;\n\n            restriction_type = 0;\n\n            restriction = data;\n        }\n\n        public ADRestrictionEntry(Interop.LSAP_TOKEN_INFO_INTEGRITY_FLAGS flags, Interop.LSAP_TOKEN_INFO_INTEGRITY_TOKENIL tokenIL)\n        {\n            ad_type = Interop.AuthorizationDataType.KERB_AUTH_DATA_TOKEN_RESTRICTIONS;\n\n            restriction_type = 0;\n\n            restriction = buildTokenStruct(flags, tokenIL);\n        }\n\n        public ADRestrictionEntry(AsnElt data)\n        {\n            Decode(data);\n        }\n\n        private byte[] buildTokenStruct(Interop.LSAP_TOKEN_INFO_INTEGRITY_FLAGS flags, Interop.LSAP_TOKEN_INFO_INTEGRITY_TOKENIL tokenIL)\n        {\n            // LSAP_TOKEN_INFO_INTEGRITY struct\n            Interop.LSAP_TOKEN_INFO_INTEGRITY tokenInfo;\n            tokenInfo.Flags = flags;\n            tokenInfo.TokenIL = tokenIL;\n\n            // random machine ID\n            var rand = new Random();\n            tokenInfo.machineID = new byte[32];\n            rand.NextBytes(tokenInfo.machineID);\n\n            // get struct bytes\n            byte[] data = new byte[40];\n            data[0] = (byte)((int)tokenInfo.Flags >> 24);\n            data[1] = (byte)((int)tokenInfo.Flags >> 16);\n            data[2] = (byte)((int)tokenInfo.Flags >> 8);\n            data[3] = (byte)((int)tokenInfo.Flags);\n            data[4] = (byte)((int)tokenInfo.TokenIL >> 24);\n            data[5] = (byte)((int)tokenInfo.TokenIL >> 16);\n            data[6] = (byte)((int)tokenInfo.TokenIL >> 8);\n            data[7] = (byte)((int)tokenInfo.TokenIL);\n            for (int j = 0; j < 32; ++j)\n            {\n                data[j + 8] = tokenInfo.machineID[j];\n            }\n\n            return data;\n        }\n\n        protected override void Decode(AsnElt data, byte[] junk = null)\n        {\n            Decode(data);\n        }\n\n        protected override void Decode(AsnElt data)\n        {\n            ad_type = Interop.AuthorizationDataType.KERB_AUTH_DATA_TOKEN_RESTRICTIONS;\n            foreach (AsnElt s in data.Sub)\n            {\n                switch (s.TagValue)\n                {\n                    case 0:\n                        restriction_type = s.Sub[0].GetInteger();\n                        break;\n                    case 1:\n                        restriction = s.Sub[0].CopyValue();\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }\n\n        public override AsnElt Encode()\n        {\n            // KERB-AD-RESTRICTION-ENTRY encoding\n            // restriction-type       [0] Int32\n            AsnElt adRestrictionEntryElt = AsnElt.MakeInteger(restriction_type);\n            AsnElt adRestrictionEntrySeq = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] { adRestrictionEntryElt });\n            adRestrictionEntrySeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 0, adRestrictionEntrySeq);\n\n            // restriction            [1] OCTET STRING\n            AsnElt adRestrictionEntryDataElt = AsnElt.MakeBlob(restriction);\n            AsnElt adRestrictionEntryDataSeq = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] { adRestrictionEntryDataElt });\n            adRestrictionEntryDataSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 1, adRestrictionEntryDataSeq);\n\n            AsnElt seq = AsnElt.Make(AsnElt.SEQUENCE, new[] { adRestrictionEntrySeq, adRestrictionEntryDataSeq });\n            AsnElt seq2 = AsnElt.Make(AsnElt.SEQUENCE, seq);\n\n            ad_data = seq2.Encode();\n\n            return ADEncode();\n        }\n\n        public long restriction_type { get; set; }\n\n        public byte[] restriction { get; set; }\n    }\n}\n'