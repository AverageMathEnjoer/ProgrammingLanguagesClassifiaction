b'package com.zzg.mybatis.generator.util;\n\nimport com.jcraft.jsch.JSch;\nimport com.jcraft.jsch.JSchException;\nimport com.jcraft.jsch.Session;\nimport com.zzg.mybatis.generator.exception.DbDriverLoadingException;\nimport com.zzg.mybatis.generator.model.DatabaseConfig;\nimport com.zzg.mybatis.generator.model.DbType;\nimport com.zzg.mybatis.generator.model.UITableColumnVO;\nimport com.zzg.mybatis.generator.view.AlertUtil;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.math.NumberUtils;\nimport org.mybatis.generator.internal.util.ClassloaderUtility;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.sql.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport java.util.concurrent.atomic.AtomicInteger;\n\n/**\n * Created by Owen on 6/12/16.\n */\npublic class DbUtil {\n\n    private static final Logger _LOG = LoggerFactory.getLogger(DbUtil.class);\n    private static final int DB_CONNECTION_TIMEOUTS_SECONDS = 1;\n\n    private static Map<DbType, Driver> drivers = new HashMap<>();\n\n\tprivate static ExecutorService executorService = Executors.newSingleThreadExecutor();\n\tprivate static volatile boolean portForwaring = false;\n\tprivate static Map<Integer, Session> portForwardingSession = new ConcurrentHashMap<>();\n\n    public static Session getSSHSession(DatabaseConfig databaseConfig) {\n\t\tif (StringUtils.isBlank(databaseConfig.getSshHost())\n\t\t\t\t|| StringUtils.isBlank(databaseConfig.getSshPort())\n\t\t\t\t|| StringUtils.isBlank(databaseConfig.getSshUser())\n\t\t\t\t|| (StringUtils.isBlank(databaseConfig.getPrivateKey()) && StringUtils.isBlank(databaseConfig.getSshPassword()))\n\t\t) {\n\t\t\treturn null;\n\t\t}\n\n\t\tSession session = null;\n\t\ttry {\n\t\t\t//Set StrictHostKeyChecking property to no to avoid UnknownHostKey issue\n\t\t\tjava.util.Properties config = new java.util.Properties();\n\t\t\tconfig.put("StrictHostKeyChecking", "no");\n\t\t\tJSch jsch = new JSch();\n\t\t\tInteger sshPort = NumberUtils.createInteger(databaseConfig.getSshPort());\n\t\t\tint port = sshPort == null ? 22 : sshPort;\n\t\t\tsession = jsch.getSession(databaseConfig.getSshUser(), databaseConfig.getSshHost(), port);\n\t\t\tif (StringUtils.isNotBlank(databaseConfig.getPrivateKey())) {\n\t\t\t\t//\xe4\xbd\xbf\xe7\x94\xa8\xe7\xa7\x98\xe9\x92\xa5\xe6\x96\xb9\xe5\xbc\x8f\xe8\xae\xa4\xe8\xaf\x81\n\t\t\t\tjsch.addIdentity(databaseConfig.getPrivateKey(), StringUtils.defaultIfBlank(databaseConfig.getPrivateKeyPassword(), null));\n\t\t\t}else {\n\t\t\t\tsession.setPassword(databaseConfig.getSshPassword());\n\t\t\t}\n\t\t\tsession.setConfig(config);\n\t\t}catch (JSchException e) {\n\t\t\t//Ignore\n\t\t}\n\t\treturn session;\n\t}\n\n\tpublic static void engagePortForwarding(Session sshSession, DatabaseConfig config) {\n\t\tif (sshSession != null) {\n\t\t\tAtomicInteger assinged_port = new AtomicInteger();\n\t\t\tFuture<?> result = executorService.submit(() -> {\n\t\t\t\ttry {\n\t\t\t\t\tInteger localPort = NumberUtils.createInteger(config.getLport());\n\t\t\t\t\tInteger RemotePort = NumberUtils.createInteger(config.getRport());\n\t\t\t\t\tint lport = localPort == null ? Integer.parseInt(config.getPort()) : localPort;\n\t\t\t\t\tint rport = RemotePort == null ? Integer.parseInt(config.getPort()) : RemotePort;\n\t\t\t\t\tSession session = portForwardingSession.get(lport);\n\t\t\t\t\tif (session != null && session.isConnected()) {\n\t\t\t\t\t\tString s = session.getPortForwardingL()[0];\n\t\t\t\t\t\tString[] split = StringUtils.split(s, ":");\n\t\t\t\t\t\tboolean portForwarding = String.format("%s:%s", split[0], split[1]).equals(lport + ":" + config.getHost());\n\t\t\t\t\t\tif (portForwarding) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tsshSession.connect();\n\t\t\t\t\tassinged_port.set(sshSession.setPortForwardingL(lport, config.getHost(), rport));\n\t\t\t\t\tportForwardingSession.put(lport, sshSession);\n\t\t\t\t\tportForwaring = true;\n\t\t\t\t\t_LOG.info("portForwarding Enabled, {}", assinged_port);\n\t\t\t\t} catch (JSchException e) {\n\t\t\t\t\t_LOG.error("Connect Over SSH failed", e);\n\t\t\t\t\tif (e.getCause() != null && e.getCause().getMessage().equals("Address already in use: JVM_Bind")) {\n\t\t\t\t\t\tthrow new RuntimeException("Address already in use: JVM_Bind");\n\t\t\t\t\t}\n\t\t\t\t\tthrow new RuntimeException(e.getMessage());\n\t\t\t\t}\n\t\t\t});\n\t\t\ttry {\n\t\t\t\tresult.get(5, TimeUnit.SECONDS);\n\t\t\t}catch (Exception e) {\n\t\t\t\tshutdownPortForwarding(sshSession);\n\t\t\t\tif (e.getCause() instanceof RuntimeException) {\n\t\t\t\t\tthrow (RuntimeException)e.getCause();\n\t\t\t\t}\n\t\t\t\tif (e instanceof TimeoutException) {\n\t\t\t\t\tthrow new RuntimeException("OverSSH \xe8\xbf\x9e\xe6\x8e\xa5\xe8\xb6\x85\xe6\x97\xb6\xef\xbc\x9a\xe8\xb6\x85\xe8\xbf\x875\xe7\xa7\x92");\n\t\t\t\t}\n\n\t\t\t\t_LOG.info("executorService isShutdown:{}", executorService.isShutdown());\n\t\t\t\tAlertUtil.showErrorAlert("OverSSH \xe5\xa4\xb1\xe8\xb4\xa5\xef\xbc\x8c\xe8\xaf\xb7\xe6\xa3\x80\xe6\x9f\xa5\xe8\xbf\x9e\xe6\x8e\xa5\xe8\xae\xbe\xe7\xbd\xae:" + e.getMessage());\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic static void shutdownPortForwarding(Session session) {\n\t\tportForwaring = false;\n\t\tif (session != null && session.isConnected()) {\n\t\t\tsession.disconnect();\n\t\t\t_LOG.info("portForwarding turn OFF");\n\t\t}\n//\t\texecutorService.shutdown();\n\t}\n\n    public static Connection getConnection(DatabaseConfig config) throws ClassNotFoundException, SQLException {\n\t\tDbType dbType = DbType.valueOf(config.getDbType());\n\t\tif (drivers.get(dbType) == null){\n\t\t\tloadDbDriver(dbType);\n\t\t}\n\n\t\tString url = getConnectionUrlWithSchema(config);\n\t    Properties props = new Properties();\n\n\t    props.setProperty("user", config.getUsername()); //$NON-NLS-1$\n\t    props.setProperty("password", config.getPassword()); //$NON-NLS-1$\n\n\t\tDriverManager.setLoginTimeout(DB_CONNECTION_TIMEOUTS_SECONDS);\n\t    Connection connection = drivers.get(dbType).connect(url, props);\n        _LOG.info("getConnection, connection url: {}", connection);\n        return connection;\n    }\n\n    public static List<String> getTableNames(DatabaseConfig config, String filter) throws Exception {\n\t\tSession sshSession = getSSHSession(config);\n\t\tengagePortForwarding(sshSession, config);\n\t\ttry (Connection connection = getConnection(config)) {\n\t\t\tList<String> tables = new ArrayList<>();\n\t\t\tDatabaseMetaData md = connection.getMetaData();\n\t\t\tResultSet rs;\n\t\t\tif (DbType.valueOf(config.getDbType()) == DbType.SQL_Server) {\n\t\t\t\tString sql = "select name from sysobjects  where xtype=\'u\' or xtype=\'v\' order by name";\n\t\t\t\trs = connection.createStatement().executeQuery(sql);\n\t\t\t\twhile (rs.next()) {\n\t\t\t\t\ttables.add(rs.getString("name"));\n\t\t\t\t}\n\t\t\t} else if (DbType.valueOf(config.getDbType()) == DbType.Oracle) {\n\t\t\t\trs = md.getTables(null, config.getUsername().toUpperCase(), null, new String[]{"TABLE", "VIEW"});\n\t\t\t} else if (DbType.valueOf(config.getDbType()) == DbType.Sqlite) {\n\t\t\t\tString sql = "Select name from sqlite_master;";\n\t\t\t\trs = connection.createStatement().executeQuery(sql);\n\t\t\t\twhile (rs.next()) {\n\t\t\t\t\ttables.add(rs.getString("name"));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// rs = md.getTables(null, config.getUsername().toUpperCase(), null, null);\n\t\t\t\trs = md.getTables(config.getSchema(), null, "%", new String[]{"TABLE", "VIEW"});//\xe9\x92\x88\xe5\xaf\xb9 postgresql \xe7\x9a\x84\xe5\xb7\xa6\xe4\xbe\xa7\xe6\x95\xb0\xe6\x8d\xae\xe8\xa1\xa8\xe6\x98\xbe\xe7\xa4\xba\n\t\t\t}\n\t\t\twhile (rs.next()) {\n\t\t\t\ttables.add(rs.getString(3));\n\t\t\t}\n\t\t\tif (StringUtils.isNotBlank(filter)) {\n\t\t\t\ttables.removeIf(x -> !x.contains(filter) && !(x.replaceAll("_", "").contains(filter)));;\n\t\t\t}\n\t\t\tif (tables.size() > 1) {\n\t\t\t\tCollections.sort(tables);\n\t\t\t}\n\t\t\treturn tables;\n\t\t} finally {\n\t\t\tshutdownPortForwarding(sshSession);\n\t\t}\n\t}\n\n    public static List<UITableColumnVO> getTableColumns(DatabaseConfig dbConfig, String tableName) throws Exception {\n        String url = getConnectionUrlWithSchema(dbConfig);\n        _LOG.info("getTableColumns, connection url: {}", url);\n\t\tSession sshSession = getSSHSession(dbConfig);\n\t\tengagePortForwarding(sshSession, dbConfig);\n\t\tConnection conn = getConnection(dbConfig);\n\t\ttry {\n\t\t\tDatabaseMetaData md = conn.getMetaData();\n\t\t\tResultSet rs = md.getColumns(dbConfig.getSchema(), null, tableName, null);\n\t\t\tList<UITableColumnVO> columns = new ArrayList<>();\n\t\t\twhile (rs.next()) {\n\t\t\t\tUITableColumnVO columnVO = new UITableColumnVO();\n\t\t\t\tString columnName = rs.getString("COLUMN_NAME");\n\t\t\t\tcolumnVO.setColumnName(columnName);\n\t\t\t\tcolumnVO.setJdbcType(rs.getString("TYPE_NAME"));\n\t\t\t\tcolumns.add(columnVO);\n\t\t\t}\n\t\t\treturn columns;\n\t\t} finally {\n\t\t\tconn.close();\n\t\t\tshutdownPortForwarding(sshSession);\n\t\t}\n\t}\n\n    public static String getConnectionUrlWithSchema(DatabaseConfig dbConfig) throws ClassNotFoundException {\n\t\tDbType dbType = DbType.valueOf(dbConfig.getDbType());\n\t\tString connectionUrl = String.format(dbType.getConnectionUrlPattern(),\n\t\t\t\tportForwaring ? "127.0.0.1" : dbConfig.getHost(), portForwaring ? dbConfig.getLport() : dbConfig.getPort(), dbConfig.getSchema(), dbConfig.getEncoding());\n        _LOG.info("getConnectionUrlWithSchema, connection url: {}", connectionUrl);\n        return connectionUrl;\n    }\n\n\t/**\n\t * \xe5\x8a\xa0\xe8\xbd\xbd\xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x93\xe9\xa9\xb1\xe5\x8a\xa8\n\t * @param dbType \xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x93\xe7\xb1\xbb\xe5\x9e\x8b\n\t */\n\tprivate static void loadDbDriver(DbType dbType){\n\t\tList<String> driverJars = ConfigHelper.getAllJDBCDriverJarPaths();\n\t\tClassLoader classloader = ClassloaderUtility.getCustomClassloader(driverJars);\n\t\ttry {\n\t\t\tClass clazz = Class.forName(dbType.getDriverClass(), true, classloader);\n\t\t\tDriver driver = (Driver) clazz.newInstance();\n\t\t\t_LOG.info("load driver class: {}", driver);\n\t\t\tdrivers.put(dbType, driver);\n\t\t} catch (Exception e) {\n\t\t\t_LOG.error("load driver error", e);\n\t\t\tthrow new DbDriverLoadingException("\xe6\x89\xbe\xe4\xb8\x8d\xe5\x88\xb0"+dbType.getConnectorJarFile()+"\xe9\xa9\xb1\xe5\x8a\xa8");\n\t\t}\n\t}\n}\n'