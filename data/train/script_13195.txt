b'\xef\xbb\xbfusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Reflection;\nusing System.Text;\nusing System.Text.RegularExpressions;\n\n// Copyright (c) 2013 Khalid Abuhakmeh, The MIT License (MIT)\n// Source: https://github.com/khalidabuhakmeh/ConsoleTables\n\n// Changes:\n//      Restricted values to strings\n//      Removed divider from between each row\n//      Removed additional formatting logic\n\nnamespace ConsoleTables\n{\n    public class ConsoleTable\n    {\n        public IList<string> Columns { get; set; }\n        public IList<string[]> Rows { get; protected set; }\n\n        public ConsoleTableOptions Options { get; protected set; }\n\n        public ConsoleTable(params string[] columns)\n            :this(new ConsoleTableOptions { Columns = new List<string>(columns) })\n        {          \n        }\n\n        public ConsoleTable(ConsoleTableOptions options)\n        {\n            Options = options;\n            Rows = new List<string[]>();\n            Columns = new List<string>(options.Columns);\n        }\n\n        public ConsoleTable AddColumn(IEnumerable<string> names)\n        {\n            foreach (var name in names)\n                Columns.Add(name);\n            return this;\n        }\n\n        public ConsoleTable AddRow(params string[] values)\n        {\n            if (values == null)\n                throw new ArgumentNullException(nameof(values));\n\n            if (!Columns.Any())\n                throw new Exception("Please set the columns first");\n\n            if (Columns.Count != values.Length)\n                throw new Exception(\n                    $"The number columns in the row ({Columns.Count}) does not match the values ({values.Length}");\n\n            Rows.Add(values);\n            return this;\n        }\n\n        public override string ToString()\n        {\n            var builder = new StringBuilder();\n\n            // find the longest column by searching each row\n            var columnLengths = ColumnLengths();\n\n            // create the string format with padding\n            var format = Enumerable.Range(0, Columns.Count)\n                .Select(i => " | {" + i + ",-" + columnLengths[i] + "}")\n                .Aggregate((s, a) => s + a) + " |";\n\n            // find the longest formatted line\n            var maxRowLength = Math.Max(0, Rows.Any() ? Rows.Max(row => string.Format(format, row).Length) : 0);\n            var columnHeaders = string.Format(format, Columns.ToArray());\n\n            // longest line is greater of formatted columnHeader and longest row\n            var longestLine = Math.Max(maxRowLength, columnHeaders.Length);\n\n            // add each row\n            var results = Rows.Select(row => string.Format(format, row)).ToList();\n\n            // create the divider\n            var divider = String.Format(" {0} ", new String(\'-\', longestLine - 1));\n\n            builder.AppendLine(divider);\n            builder.AppendLine(columnHeaders);\n            builder.AppendLine(divider);\n\n            foreach (var row in results)\n            {\n                //builder.AppendLine(divider);\n                builder.AppendLine(row);\n            }\n\n            builder.AppendLine(divider);\n\n            return builder.ToString();\n        }\n\n        private string Format(List<int> columnLengths, char delimiter = \'|\')\n        {\n            var delimiterStr = delimiter == char.MinValue ? string.Empty : delimiter.ToString();\n            var format = (Enumerable.Range(0, Columns.Count)\n                .Select(i => " "+ delimiterStr + " {" + i + ",-" + columnLengths[i] + "}")\n                .Aggregate((s, a) => s + a) + " " + delimiterStr).Trim();\n            return format;\n        }\n\n        private List<int> ColumnLengths()\n        {\n            var columnLengths = Columns\n                .Select((t, i) => Rows.Select(x => x[i])\n                    .Union(new[] { Columns[i] })\n                    .Where(x => x != null)\n                    .Select(x => x.ToString().Length).Max())\n                .ToList();\n            return columnLengths;\n        }\n\n        public void Write(Format format = ConsoleTables.Format.Default)\n        {\n            switch (format)\n            {\n                case ConsoleTables.Format.Default:\n                    Console.WriteLine(ToString());\n                    break;\n\n                default:\n                    throw new ArgumentOutOfRangeException(nameof(format), format, null);\n            }\n        }\n\n        private static IEnumerable<string> GetColumns<T>()\n        {  \n            return typeof(T).GetProperties().Select(x => x.Name).ToArray();\n        }\n\n        private static object GetColumnValue<T>(object target, string column)\n        {\n            return typeof(T).GetProperty(column).GetValue(target, null);\n        }\n    }\n\n    public class ConsoleTableOptions\n    {\n        public IEnumerable<string> Columns { get; set; } = new List<string>();\n        public bool EnableCount { get; set; } = true;\n    }\n\n    public enum Format\n    {\n        Default = 0,\n        MarkDown = 1,\n        Alternative = 2,\n        Minimal = 3\n    }\n}\n'