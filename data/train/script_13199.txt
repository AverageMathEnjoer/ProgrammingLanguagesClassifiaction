b'package effectivejava.chapter7.item45.anagrams;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.Arrays;\nimport java.util.stream.Stream;\n\nimport static java.util.stream.Collectors.groupingBy;\n\n// Tasteful use of streams enhances clarity and conciseness (Page 205)\npublic class HybridAnagrams {\n    public static void main(String[] args) throws IOException {\n        Path dictionary = Paths.get(args[0]);\n        int minGroupSize = Integer.parseInt(args[1]);\n\n        try (Stream<String> words = Files.lines(dictionary)) {\n            words.collect(groupingBy(word -> alphabetize(word)))\n                    .values().stream()\n                    .filter(group -> group.size() >= minGroupSize)\n                    .forEach(g -> System.out.println(g.size() + ": " + g));\n        }\n    }\n\n    private static String alphabetize(String s) {\n        char[] a = s.toCharArray();\n        Arrays.sort(a);\n        return new String(a);\n    }\n}\n'