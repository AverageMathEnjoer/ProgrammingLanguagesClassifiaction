b'\xef\xbb\xbfusing Asn1;\nusing System;\nusing System.Text;\n\nnamespace Rubeus\n{\n    public class TGS_REP\n    {\n        //TGS-REP         ::= [APPLICATION 13] KDC-REP\n\n        //KDC-REP         ::= SEQUENCE {\n        //        pvno            [0] INTEGER (5),\n        //        msg-type        [1] INTEGER (13 -- TGS),\n        //        padata          [2] SEQUENCE OF PA-DATA OPTIONAL\n        //                                -- NOTE: not empty --,\n        //        crealm          [3] Realm,\n        //        cname           [4] PrincipalName,\n        //        ticket          [5] Ticket,\n        //        enc-part        [6] EncryptedData\n        //                                -- EncTGSRepPart\n        //}\n\n        public TGS_REP(byte[] data)\n        {\n            // decode the supplied bytes to an AsnElt object\n            //  false == ignore trailing garbage\n            AsnElt asn_TGS_REP = AsnElt.Decode(data, false);\n\n            this.Decode(asn_TGS_REP);\n        }\n\n        public TGS_REP(AsnElt asn_TGS_REP)\n        {\n            this.Decode(asn_TGS_REP);\n        }\n\n        private void Decode(AsnElt asn_TGS_REP)\n        {\n            // TGS - REP::= [APPLICATION 13] KDC - REP\n            if (asn_TGS_REP.TagValue != (int)Interop.KERB_MESSAGE_TYPE.TGS_REP)\n            {\n                throw new System.Exception("TGS-REP tag value should be 13");\n            }\n\n            if ((asn_TGS_REP.Sub.Length != 1) || (asn_TGS_REP.Sub[0].TagValue != 16))\n            {\n                throw new System.Exception("First TGS-REP sub should be a sequence");\n            }\n\n            // extract the KDC-REP out\n            AsnElt[] kdc_rep = asn_TGS_REP.Sub[0].Sub;\n\n            foreach (AsnElt s in kdc_rep)\n            {\n                switch (s.TagValue)\n                {\n                    case 0:\n                        pvno = s.Sub[0].GetInteger();\n                        break;\n                    case 1:\n                        msg_type = s.Sub[0].GetInteger();\n                        break;\n                    case 2:\n                        // sequence of pa-data\n                        padata = new PA_DATA(s.Sub[0]);\n                        break;\n                    case 3:\n                        crealm = Encoding.ASCII.GetString(s.Sub[0].GetOctetString());\n                        break;\n                    case 4:\n                        cname = new PrincipalName(s.Sub[0]);\n                        break;\n                    case 5:\n                        ticket = new Ticket(s.Sub[0].Sub[0]);\n                        break;\n                    case 6:\n                        enc_part = new EncryptedData(s.Sub[0]);\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }\n\n        // won\'t really every need to *create* a TGS reply, so no encode\n\n        public long pvno { get; set; }\n\n        public long msg_type { get; set; }\n\n        public PA_DATA padata { get; set; }\n\n        public string crealm { get; set; }\n\n        public PrincipalName cname { get; set; }\n\n        public Ticket ticket { get; set; }\n\n        public EncryptedData enc_part { get; set; }\n    }\n}\n'