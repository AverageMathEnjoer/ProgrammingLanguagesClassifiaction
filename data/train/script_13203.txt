b'// UVa1439 Exclusive Access 2\n// Rujia Liu\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\n\n// This is different from problem statement\n// Here n is the number of resources, m is the number of processes (n in the problem statement)\nconst int maxn = 15;\nconst int maxm = 100 + 5;\nint n, m, u[maxm], v[maxm], G[maxn][maxn];\nint ind[1<<maxn], d[1<<maxn], best[1<<maxn], label[maxn];\n\nbool independent(int mask) {\n  for(int i = 0; i < maxn; i++) if(mask & (1<<i))\n    for(int j = 0; j < maxn; j++) if(mask & (1<<j))\n      if(i != j && G[i][j]) return false;\n  return true;\n}\n\n// How many colors are needed to color the set \'mask\'\nint dp(int mask) {\n  int& ans = d[mask];\n  if(ans >= 0) return ans;\n  if(mask == 0) return 0;\n  ans = maxn+1;\n  for(int s = mask; s; s = (s-1)&mask)\n    if(ind[s]) {\n      int v = dp(mask^s) + 1;\n      if(v < ans) { ans = v; best[mask] = s; }\n    }\n  return ans;\n}\n\n// mark the set \'mask\' with color c\nvoid mark(int mask, int c) {\n  for(int i = 0; i < maxn; i++)\n    if(mask & (1<<i)) label[i] = c;\n}\n\nint main() {\n  while(scanf("%d", &m) == 1) {\n    memset(G, 0, sizeof(G));\n    int useful = 0;\n    for(int i = 0; i < m; i++) {\n      char r1[9], r2[9];\n      scanf("%s%s", r1, r2);\n      u[i] = r1[0]-\'L\', v[i] = r2[0]-\'L\';\n      G[u[i]][v[i]] = 1;\n      useful |= (1<<u[i]);\n      useful |= (1<<v[i]);\n    }\n\n    // find the independent sets\n    memset(ind, 0, sizeof(ind));\n    for(int s = useful; s; s = (s-1)&useful)\n      if(independent(s)) ind[s] = true;\n\n    // dp\n    memset(d, -1, sizeof(d));\n    int ans = dp(useful);\n    printf("%d\\n", ans-2);\n\n    // construct the answer\n    int s = useful, k = 0;\n    while(s) {\n      mark(s, k++);\n      s ^= best[s];\n    }\n    for(int i = 0; i < m; i++) {\n      if(label[u[i]] < label[v[i]]) swap(u[i], v[i]);\n      printf("%c %c\\n", \'L\'+u[i], \'L\'+v[i]);\n    }    \n  }\n  return 0;\n}\n'