b'package co.joebirch.composeplayground.material\n\nimport androidx.compose.material.Text\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.material.Checkbox\nimport androidx.compose.material.CheckboxDefaults.colors\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.dp\nimport co.joebirch.composeplayground.ComposableLayout\n\nobject CheckboxView: ComposableLayout {\n\n    @Composable\n    override fun build() {\n        Column(\n            modifier = Modifier.fillMaxSize().padding(32.dp),\n            verticalArrangement = Arrangement.SpaceEvenly,\n            horizontalAlignment = Alignment.CenterHorizontally\n        ) {\n            val state = remember { mutableStateOf(TriStateFormState()) }\n           // TriStateCheckboxComponent(state)\n        }\n    }\n\n}\n\nclass FormState(var optionChecked: Boolean = false)\n\n@Composable\nfun CheckboxComponent(formState: FormState) {\n    val isChecked = remember { mutableStateOf(false) }\n    Checkbox(\n        checked = isChecked.value,\n        onCheckedChange = { checked ->\n            isChecked.value = checked\n        }\n    )\n}\n\n@Preview\n@Composable\nfun CheckedColorCheckboxComponent() {\n    val isChecked = remember { mutableStateOf(false) }\n    Checkbox(\n        checked = isChecked.value,\n        onCheckedChange = { checked ->\n            isChecked.value = checked\n        },\n        colors = colors(\n            checkedColor = Color.Red\n        )\n    )\n}\n\n@Preview\n@Composable\nfun UncheckedColorCheckboxComponent() {\n    val isChecked = remember { mutableStateOf(false) }\n    Checkbox(\n        checked = isChecked.value,\n        onCheckedChange = { checked ->\n            isChecked.value = checked\n        },\n        colors = colors(\n            uncheckedColor = Color.Gray\n        )\n    )\n}\n\n@Preview\n@Composable\nfun CheckmarkColorCheckboxComponent() {\n    val isChecked = remember { mutableStateOf(false) }\n    Checkbox(\n        checked = isChecked.value,\n        onCheckedChange = { checked ->\n            isChecked.value = checked\n        },\n        colors = colors(\n            checkmarkColor = Color.White\n        )\n    )\n}\n\n@Preview\n@Composable\nfun DisabledColorCheckboxComponent() {\n    val isChecked = remember { mutableStateOf(false) }\n    Checkbox(\n        enabled = false,\n        checked = isChecked.value,\n        onCheckedChange = { checked ->\n            isChecked.value = checked\n        },\n        colors = colors(\n            disabledColor = Color.LightGray\n        )\n    )\n}\n\n@Preview\n@Composable\nfun DisabledIndeterminateColorCheckboxComponent() {\n    val isChecked = remember { mutableStateOf(false) }\n    Checkbox(\n        enabled = false,\n        checked = isChecked.value,\n        onCheckedChange = { checked ->\n            isChecked.value = checked\n        },\n        colors = colors(\n            disabledIndeterminateColor = Color.Gray\n        )\n    )\n}\n\n@Composable\nfun DisabledCheckboxComponent(formState: FormState) {\n    val isChecked = remember { mutableStateOf(false) }\n    Checkbox(\n        checked = isChecked.value,\n        onCheckedChange = { checked ->\n            isChecked.value = checked\n        },\n        enabled = false\n    )\n}\n\n@Composable\nfun CheckboxWithLabel(formState: FormState) {\n    val isChecked = remember { mutableStateOf(false) }\n    Row (modifier = Modifier.clickable(onClick = {\n        isChecked.value = !isChecked.value\n    })) {\n        Checkbox(\n            checked = formState.optionChecked,\n            onCheckedChange = { checked ->\n                isChecked.value = checked\n            }\n        )\n        Text(\n            text = "Notify me of updates",\n            modifier = Modifier.padding(start = 8.dp)\n        )\n    }\n}'