b'package wendu.jsbdemo;\n\nimport java.net.CookieManager;\nimport org.json.JSONObject;\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.HttpCookie;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\n\n\nimport javax.net.ssl.HostnameVerifier;\nimport javax.net.ssl.HttpsURLConnection;\nimport javax.net.ssl.SSLSession;\n\n/**\n * Created by du on 2017/9/16.\n */\n\npublic class NetUtils {\n    public static CookieManager cookieManager=new CookieManager();\n    public static Map<String, Object> request(String method, String url, String param, JSONObject headers) throws Exception {\n        URL uri = new URL(url);\n        method = method.toUpperCase();\n        HttpURLConnection urlCon = (HttpURLConnection) uri.openConnection();\n        urlCon.setRequestMethod(method);\n        urlCon.setConnectTimeout(10000);\n        handleRequestHeaders(urlCon,headers);\n        if (urlCon instanceof HttpsURLConnection) {\n            addCertVerifier((HttpsURLConnection) urlCon);\n        }\n        if (method.equals("POST")) {\n            urlCon.setDoOutput(true);\n            urlCon.setDoInput(true);\n            if (!param.trim().isEmpty()) {\n                PrintWriter pw = new PrintWriter(urlCon.getOutputStream());\n                pw.print(param);\n                pw.flush();\n                pw.close();\n            }\n        }\n        Map<String, Object> response=new HashMap<>();\n        response.put("responseText",inputStream2String(urlCon.getInputStream()));\n        response.put("statusCode",urlCon.getResponseCode());\n        Map<String, List<String>> responseHeaders= new HashMap<>(urlCon.getHeaderFields());\n        responseHeaders.remove(null);\n        responseHeaders=handleResponseHeaders(urlCon,responseHeaders);\n        response.put("headers",responseHeaders);\n        return response;\n\n    }\n\n    //\xe5\xaf\xb9\xe4\xba\x8ehttps\xe8\xaf\xb7\xe6\xb1\x82\xef\xbc\x8c\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xaf\x81\xe4\xb9\xa6\xe6\xa0\xa1\xe9\xaa\x8c\n    private static void   addCertVerifier(HttpsURLConnection urlCon) throws Exception {\n       // \xe5\x9c\xa8\xe6\xad\xa4\xe5\x81\x9a\xe8\xaf\x81\xe4\xb9\xa6\xe6\xa0\xa1\xe9\xaa\x8c\n       // urlCon.setSSLSocketFactory(getSSLSocketFactory());\n        urlCon.setHostnameVerifier(new HostnameVerifier() {\n            @Override\n            public boolean verify(String hostname, SSLSession session) {\n                //return "api.dtworkroom.com".equals(hostname);\n               HostnameVerifier hv=HttpsURLConnection.getDefaultHostnameVerifier();\n               return hv.verify("*.dtworkroom.com",session);\n            }\n        });\n    }\n\n    //\xe9\xa2\x84\xe5\xa4\x84\xe7\x90\x86\xe8\xaf\xb7\xe6\xb1\x82\xe5\xa4\xb4\n    private static  void handleRequestHeaders(HttpURLConnection connection,JSONObject headers) throws Exception {\n\n        Iterator iterator = headers.keys();\n        while(iterator.hasNext()){\n            String  key = (String) iterator.next();\n            String value = headers.getString(key);\n            if(!key.toLowerCase().equals("cookie")){\n                //\xe8\xaf\xb7\xe6\xb1\x82cookie\n                connection.setRequestProperty(key, value);\n            }\n        }\n        List<HttpCookie> cookies= cookieManager.getCookieStore().get(connection.getURL().toURI());\n        cookies.toString();\n    }\n\n    private static  Map<String, List<String>> handleResponseHeaders(HttpURLConnection connection, Map<String, List<String>> responseHeaders) throws Exception {\n        //\xe8\x8e\xb7\xe5\x8f\x96\xe5\x93\x8d\xe5\xba\x94\xe5\xa4\xb4\xe4\xb8\xad\xe7\x9a\x84cookies\xef\xbc\x8c\xe7\xab\xaf\xe4\xb8\x8a\xe7\xbb\x9f\xe4\xb8\x80\xe7\xae\xa1\xe7\x90\x86cookie\n        cookieManager.put(connection.getURL().toURI(),responseHeaders);\n        responseHeaders.remove("set-cookie");\n        return responseHeaders;\n    }\n\n\n    private static String inputStream2String(InputStream is) {\n        String result = "";\n        String line;\n        InputStreamReader inputReader = new InputStreamReader(is);\n        BufferedReader bufReader = new BufferedReader(inputReader);\n        try {\n            while ((line = bufReader.readLine()) != null)\n                result += line + "\\r\\n";\n            bufReader.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return result;\n    }\n}\n'