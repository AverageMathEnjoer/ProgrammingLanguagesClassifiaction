b"\xef\xbb\xbfusing System;\nusing Asn1;\nusing System.Text;\nusing System.Collections.Generic;\n\nnamespace Rubeus\n{\n    public class EncKDCRepPart\n    {\n        //EncKDCRepPart::= SEQUENCE {\n        //        key[0] EncryptionKey,\n        //        last-req[1] LastReq,\n        //        nonce[2] UInt32,\n        //        key-expiration[3] KerberosTime OPTIONAL,\n        //        flags[4] TicketFlags,\n        //        authtime[5] KerberosTime,\n        //        starttime[6] KerberosTime OPTIONAL,\n        //        endtime[7] KerberosTime,\n        //        renew-till[8] KerberosTime OPTIONAL,\n        //        srealm[9] Realm,\n        //        sname[10] PrincipalName,\n        //        caddr[11] HostAddresses OPTIONAL,\n        //  encrypted-pa-data[12] SEQUENCE OF PA-DATA OPTIONAL\n        //}\n\n        public EncKDCRepPart(AsnElt body)\n        {\n            foreach (AsnElt s in body.Sub)\n            {\n                switch (s.TagValue)\n                {\n                    case 0:\n                        key = new EncryptionKey(s);\n                        break;\n                    case 1:\n                        lastReq = new LastReq(s.Sub[0]);\n                        break;\n                    case 2:\n                        nonce = Convert.ToUInt32(s.Sub[0].GetInteger());\n                        break;\n                    case 3:\n                        key_expiration = s.Sub[0].GetTime();\n                        break;\n                    case 4:\n                        UInt32 temp = Convert.ToUInt32(s.Sub[0].GetInteger());\n                        byte[] tempBytes = BitConverter.GetBytes(temp);\n                        flags = (Interop.TicketFlags)BitConverter.ToInt32(tempBytes, 0);\n                        break;\n                    case 5:\n                        authtime = s.Sub[0].GetTime();\n                        break;\n                    case 6:\n                        starttime = s.Sub[0].GetTime();\n                        break;\n                    case 7:\n                        endtime = s.Sub[0].GetTime();\n                        break;\n                    case 8:\n                        renew_till = s.Sub[0].GetTime();\n                        break;\n                    case 9:\n                        realm = Encoding.ASCII.GetString(s.Sub[0].GetOctetString());\n                        break;\n                    case 10:\n                        // sname (optional)\n                        sname = new PrincipalName(s.Sub[0]);\n                        break;\n                    case 11:\n                        // HostAddresses, skipped for now\n                        break;\n                    case 12:\n                        // encrypted-pa-data, skipped for now\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }\n\n        // won't really ever need to *create* a KDC reply, so no Encode()\n\n        public EncryptionKey key { get; set; }\n\n        public LastReq lastReq { get; set; }\n\n        public UInt32 nonce { get; set; }\n\n        public DateTime key_expiration { get; set; }\n\n        public Interop.TicketFlags flags { get; set; }\n\n        public DateTime authtime { get; set; }\n\n        public DateTime starttime { get; set; }\n\n        public DateTime endtime { get; set; }\n\n        public DateTime renew_till { get; set; }\n\n        public string realm { get; set; }\n\n        public PrincipalName sname { get; set; }\n\n        // caddr (optional) - skip for now\n        \n        // encrypted-pa-data (optional) - skip for now\n    }\n}"