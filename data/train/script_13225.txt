b'package co.joebirch.composeplayground\n\nimport androidx.compose.material.Text\nimport androidx.compose.material.MaterialTheme\nimport androidx.compose.material.Surface\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.platform.testTag\nimport androidx.compose.ui.semantics.SemanticsProperties.TestTag\nimport androidx.compose.ui.test.*\nimport androidx.compose.ui.test.junit4.createComposeRule\nimport androidx.compose.ui.text.input.ImeAction\nimport androidx.test.ext.junit.runners.AndroidJUnit4\nimport org.junit.Before\nimport org.junit.Rule\nimport org.junit.Test\nimport org.junit.runner.RunWith\n\n@RunWith(AndroidJUnit4::class)\nclass FindByTests {\n\n    @get:Rule\n    val composeTestRule = createComposeRule()\n\n    @Before\n    fun launchContent() {\n        composeTestRule.setContent {\n            MaterialTheme {\n                Surface {\n                    Text(\n                        text = "Hello",\n                        modifier = Modifier.testTag("MyTag")\n                    )\n                }\n            }\n        }\n    }\n\n    @Test\n    fun testOnNodeWithText() {\n        composeTestRule.onNodeWithText("Hello")\n    }\n\n    @Test\n    fun testFindAllByText() {\n        composeTestRule.onAllNodesWithText("Hello").first().assertIsDisplayed()\n    }\n\n    @Test\n    fun testFindBySubstring() {\n        composeTestRule.onNodeWithSubstring("Hello")\n    }\n\n    @Test\n    fun testFindAllNoesHasTestTag() {\n        composeTestRule.onAllNodes(hasTestTag("Hello")).first().assertIsDisplayed()\n    }\n\n    @Test\n    fun testFindAllNoesHasText() {\n        composeTestRule.onAllNodes(hasText("Hello")).first().assertIsDisplayed()\n    }\n\n    @Test\n    fun testFindAllNoesHasClickAction() {\n        composeTestRule.onAllNodes(hasClickAction()).first().assertIsDisplayed()\n    }\n\n    @Test\n    fun testFindAllNoesHasNoClickAction() {\n        composeTestRule.onAllNodes(hasNoClickAction()).first().assertIsDisplayed()\n    }\n\n    @Test\n    fun testFindAllNodesHasScrollAction() {\n        composeTestRule.onAllNodes(hasScrollAction()).first().assertIsDisplayed()\n    }\n\n    @Test\n    fun testFindAllNodesHasNoScrollAction() {\n        composeTestRule.onAllNodes(hasNoScrollAction()).first().assertIsDisplayed()\n    }\n\n    @Test\n    fun testFindAllNodesHasImeAction() {\n        composeTestRule.onAllNodes(hasImeAction(ImeAction.Done)).first().assertIsDisplayed()\n    }\n\n    @Test\n    fun testFindAllNodesHasValue() {\n        composeTestRule.onAllNodes(hasValue("some_value")).first().assertIsDisplayed()\n    }\n\n    @Test\n    fun testFindAllNodesHasAnyChild() {\n        composeTestRule.onAllNodes(hasAnyChild(isEnabled())).first().assertIsDisplayed()\n    }\n\n    @Test\n    fun testFindAllNodesHasAnyAncestor() {\n        composeTestRule.onAllNodes(hasAnyAncestor(isEnabled())).first().assertIsDisplayed()\n    }\n\n    @Test\n    fun testFindAllNodesHasAnyDescendant() {\n        composeTestRule.onAllNodes(hasAnyDescendant(isEnabled())).first().assertIsDisplayed()\n    }\n\n    @Test\n    fun testFindAllNodesHasAnySibling() {\n        composeTestRule.onAllNodes(hasAnySibling(isEnabled())).first().assertIsDisplayed()\n    }\n\n    @Test\n    fun testFindAllNodesHasParent() {\n        composeTestRule.onAllNodes(hasParent(isEnabled())).first().assertIsDisplayed()\n    }\n\n    @Test\n    fun testFindByTag() {\n        composeTestRule.onNodeWithTag("MyTag").assertIsDisplayed()\n    }\n\n    @Test\n    fun testFindAllByTag() {\n        composeTestRule.onAllNodesWithTag("MyTag").first().assertIsDisplayed()\n    }\n\n    @Test\n    fun testFindByLabel() {\n        composeTestRule.onNodeWithLabel("Hello")\n    }\n\n    @Test\n    fun testFindAllByLabel() {\n        composeTestRule.onAllNodesWithLabel("Hello").first().assertIsDisplayed()\n    }\n}'