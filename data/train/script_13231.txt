b'// this is to allow method names to be with natural language\n@file:Suppress("IllegalIdentifier")\n\npackage com.droidcba.kedditbysteps\n\nimport android.arch.core.executor.testing.InstantTaskExecutorRule\nimport com.droidcba.kedditbysteps.api.*\nimport com.droidcba.kedditbysteps.features.news.NewsState\nimport com.droidcba.kedditbysteps.features.news.NewsViewModel\nimport io.mockk.coEvery\nimport io.mockk.mockk\nimport junit.framework.Assert.*\nimport kotlinx.coroutines.experimental.Deferred\nimport org.junit.Before\nimport org.junit.Rule\nimport org.junit.Test\nimport org.junit.rules.TestRule\nimport java.util.*\n\n/**\n * Unit Tests for NewsViewModel\n *\n * @author juancho.\n */\nclass NewsViewModelTest {\n\n    /**\n     * This rule will allow LiveDataMutable to propagate the postValue so we can use it.\n     */\n    @get:Rule\n    var rule: TestRule = InstantTaskExecutorRule()\n\n    /**\n     * CoroutineContext that will trigger all jobs executions in the same thread.\n     */\n    private val coroutineContext = TestDirectContext()\n\n    private var apiMock = mockk<NewsAPI>()\n    private val deferredMock = mockk<Deferred<RedditNewsResponse>>()\n    private var newsViewModel = NewsViewModel(apiMock, coroutineContext)\n\n    @Before\n    fun setup() {\n        coEvery { apiMock.getNews(any(), any()) } returns deferredMock\n    }\n\n    @Test\n    fun `Success - check response is not null`() {\n        // prepare\n        val news = RedditNewsResponse(RedditDataResponse(listOf(), null, null))\n        coEvery { deferredMock.await() } returns news\n\n        // call\n        newsViewModel.fetchNews("")\n\n        // assert\n        val actualValue = newsViewModel.newsState.value\n        assertNotNull(actualValue)\n        assertTrue(actualValue is NewsState)\n    }\n\n    @Test\n    fun `Success - checks received one news`() {\n        // prepare\n        val newsData = RedditNewsDataResponse(\n                "author",\n                "title",\n                10,\n                Date().time,\n                "thumbnail",\n                "url"\n        )\n        val newsResponse = RedditChildrenResponse(newsData)\n        val news = RedditNewsResponse(RedditDataResponse(listOf(newsResponse), null, null))\n        coEvery { deferredMock.await() } returns news\n\n        // call\n        newsViewModel.fetchNews("")\n\n        // assert\n        val actualValue = newsViewModel.newsState.value\n        assertNotNull(actualValue)\n        assertTrue(actualValue is NewsState.Success)\n\n        val state = actualValue as NewsState.Success\n        assertEquals(newsData.author, state.redditNews.news[0].author)\n        assertEquals(newsData.title, state.redditNews.news[0].title)\n    }\n\n    @Test\n    fun `Error - Exception received from service call`() {\n        // prepare\n        coEvery { apiMock.getNews(any(), any()) } throws Throwable()\n\n        // call\n        newsViewModel.fetchNews("")\n\n        // assert\n        val actualValue = newsViewModel.newsState.value\n        assertNotNull(actualValue)\n        assertTrue(actualValue is NewsState.Error)\n    }\n}'