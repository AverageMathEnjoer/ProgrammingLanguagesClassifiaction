b'\xef\xbb\xbfusing System;\nusing Asn1;\nusing System.Text;\nusing System.Collections.Generic;\n\nnamespace Rubeus\n{\n    public class Authenticator\n    {\n        //Authenticator   ::= [APPLICATION 2] SEQUENCE  {\n        //        authenticator-vno       [0] INTEGER (5),\n        //        crealm                  [1] Realm,\n        //        cname                   [2] PrincipalName,\n        //        cksum                   [3] Checksum OPTIONAL,\n        //        cusec                   [4] Microseconds,\n        //        ctime                   [5] KerberosTime,\n        //        subkey                  [6] EncryptionKey OPTIONAL,\n        //        seq-number              [7] UInt32 OPTIONAL,\n        //        authorization-data      [8] AuthorizationData OPTIONAL\n        //}\n\n        // NOTE: we\'re only using:\n        //  authenticator-vno   [0]\n        //  crealm              [1]\n        //  cname               [2]\n        //  cusec               [4]\n        //  ctime               [5]\n\n        public Authenticator()\n        {\n            authenticator_vno = 5;\n\n            crealm = "";\n\n            cksum = null;\n\n            cname = new PrincipalName();\n\n            cusec = 0;\n\n            ctime = DateTime.UtcNow;\n\n            subkey = null;\n\n            seq_number = 0;\n        }\n\n        public AsnElt Encode()\n        {\n            List<AsnElt> allNodes = new List<AsnElt>();\n\n\n            // authenticator-vno       [0] INTEGER (5)\n            AsnElt pvnoAsn = AsnElt.MakeInteger(authenticator_vno);\n            AsnElt pvnoSeq = AsnElt.Make(AsnElt.SEQUENCE, new[] { pvnoAsn });\n            pvnoSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 0, pvnoSeq);\n            allNodes.Add(pvnoSeq);\n\n\n            // crealm                  [1] Realm\n            AsnElt realmAsn = AsnElt.MakeString(AsnElt.IA5String, crealm);\n            realmAsn = AsnElt.MakeImplicit(AsnElt.UNIVERSAL, AsnElt.GeneralString, realmAsn);\n            AsnElt realmSeq = AsnElt.Make(AsnElt.SEQUENCE, new[] { realmAsn });\n            realmSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 1, realmSeq);\n            allNodes.Add(realmSeq);\n\n\n            // cname                   [2] PrincipalName\n            AsnElt snameElt = cname.Encode();\n            snameElt = AsnElt.MakeImplicit(AsnElt.CONTEXT, 2, snameElt);\n            allNodes.Add(snameElt);\n\n            // cksum                    [3] Checksum\n            if (cksum != null)\n            {\n                AsnElt checksumAsn = cksum.Encode();\n                checksumAsn = AsnElt.MakeImplicit(AsnElt.CONTEXT, 3, checksumAsn);\n                allNodes.Add(checksumAsn);\n            }\n\n\n            // TODO: correct format (UInt32)?\n            // cusec                   [4] Microseconds\n            AsnElt nonceAsn = AsnElt.MakeInteger(cusec);\n            AsnElt nonceSeq = AsnElt.Make(AsnElt.SEQUENCE, new[] { nonceAsn });\n            nonceSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 4, nonceSeq);\n            allNodes.Add(nonceSeq);\n\n\n            // ctime                   [5] KerberosTime\n            AsnElt tillAsn = AsnElt.MakeString(AsnElt.GeneralizedTime, ctime.ToString("yyyyMMddHHmmssZ"));\n            AsnElt tillSeq = AsnElt.Make(AsnElt.SEQUENCE, new[] { tillAsn });\n            tillSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 5, tillSeq);\n            allNodes.Add(tillSeq);\n\n            if (subkey != null)\n            {\n                // subkey                  [6] EncryptionKey OPTIONAL\n                AsnElt keyAsn = subkey.Encode();\n                keyAsn = AsnElt.MakeImplicit(AsnElt.CONTEXT, 6, keyAsn);\n                allNodes.Add(keyAsn);\n            }\n\n            if(seq_number != 0)\n            {\n                // seq-number              [7] UInt32 OPTIONAL\n                AsnElt seq_numberASN = AsnElt.MakeInteger(seq_number);\n                AsnElt seq_numberSeq = AsnElt.Make(AsnElt.SEQUENCE, new[] { seq_numberASN });\n                seq_numberSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 7, seq_numberSeq);\n                allNodes.Add(seq_numberSeq);\n            }\n\n            // package it all up\n            AsnElt seq = AsnElt.Make(AsnElt.SEQUENCE, allNodes.ToArray());\n\n\n            // tag the final total\n            AsnElt final = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] { seq });\n            final = AsnElt.MakeImplicit(AsnElt.APPLICATION, 2, final);\n\n            return final;\n        }\n\n\n        public long authenticator_vno { get; set; }\n\n        public string crealm { get; set; }\n\n        public Checksum cksum { get; set; }\n\n        public PrincipalName cname { get; set; }\n\n        public long cusec { get; set; }\n\n        public DateTime ctime { get; set; }\n\n        public EncryptionKey subkey { get; set; }\n\n        public UInt32 seq_number { get; set; }\n    }\n}'