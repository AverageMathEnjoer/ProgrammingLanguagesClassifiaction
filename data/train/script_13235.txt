b'\xef\xbb\xbfusing System;\nusing Asn1;\nusing System.Text;\nusing System.Collections.Generic;\n\nnamespace Rubeus\n{\n    public class EncryptionKey\n    {\n        //EncryptionKey::= SEQUENCE {\n        //    keytype[0] Int32 -- actually encryption type --,\n        //    keyvalue[1] OCTET STRING\n        //}\n\n        public EncryptionKey()\n        {\n            keytype = 0;\n\n            keyvalue = null;\n        }\n\n        public EncryptionKey(AsnElt body)\n        {\n            foreach (AsnElt s in body.Sub[0].Sub)\n            {\n                switch (s.TagValue)\n                {\n                    case 0:\n                        keytype = Convert.ToInt32(s.Sub[0].GetInteger());\n                        break;\n                    case 1:\n                        keyvalue = s.Sub[0].GetOctetString();\n                        break;\n                    case 2:\n                        keyvalue = s.Sub[0].GetOctetString();\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }\n\n        public AsnElt Encode()\n        {\n            // keytype[0] Int32 -- actually encryption type --\n            AsnElt keyTypeElt = AsnElt.MakeInteger(keytype);\n            AsnElt keyTypeSeq = AsnElt.Make(AsnElt.SEQUENCE, new AsnElt[] { keyTypeElt });\n            keyTypeSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 0, keyTypeSeq);\n\n\n            // keyvalue[1] OCTET STRING\n            AsnElt blob = AsnElt.MakeBlob(keyvalue);\n            AsnElt blobSeq = AsnElt.Make(AsnElt.SEQUENCE, new[] { blob });\n            blobSeq = AsnElt.MakeImplicit(AsnElt.CONTEXT, 1, blobSeq);\n\n\n            // build the final sequences (s)\n            AsnElt seq = AsnElt.Make(AsnElt.SEQUENCE, new[] { keyTypeSeq, blobSeq });\n            AsnElt seq2 = AsnElt.Make(AsnElt.SEQUENCE, new[] { seq });\n\n            return seq2;\n        }\n\n        public Int32 keytype { get; set; }\n\n        public byte[] keyvalue { get; set; }\n    }\n}'