b'package effectivejava.chapter6.item39.repeatableannotation;\n\nimport effectivejava.chapter6.item39.markerannotation.Test;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\n\n// Program to process marker annotations and repeatable annotations (Page 187)\npublic class RunTests {\n    public static void main(String[] args) throws Exception {\n        int tests = 0;\n        int passed = 0;\n        Class testClass = Class.forName(args[0]);\n        for (Method m : testClass.getDeclaredMethods()) {\n            if (m.isAnnotationPresent(Test.class)) {\n                tests++;\n                try {\n                    m.invoke(null);\n                    passed++;\n                } catch (InvocationTargetException wrappedExc) {\n                    Throwable exc = wrappedExc.getCause();\n                    System.out.println(m + " failed: " + exc);\n                } catch (Exception exc) {\n                    System.out.println("INVALID @Test: " + m);\n                }\n            }\n\n            // Processing repeatable annotations (Page 187)\n            if (m.isAnnotationPresent(ExceptionTest.class)\n                    || m.isAnnotationPresent(ExceptionTestContainer.class)) {\n                tests++;\n                try {\n                    m.invoke(null);\n                    System.out.printf("Test %s failed: no exception%n", m);\n                } catch (Throwable wrappedExc) {\n                    Throwable exc = wrappedExc.getCause();\n                    int oldPassed = passed;\n                    ExceptionTest[] excTests =\n                            m.getAnnotationsByType(ExceptionTest.class);\n                    for (ExceptionTest excTest : excTests) {\n                        if (excTest.value().isInstance(exc)) {\n                            passed++;\n                            break;\n                        }\n                    }\n                    if (passed == oldPassed)\n                        System.out.printf("Test %s failed: %s %n", m, exc);\n                }\n            }\n        }\n        System.out.printf("Passed: %d, Failed: %d%n",\n                          passed, tests - passed);\n    }\n}\n'