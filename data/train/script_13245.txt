b'/*\n * Copyright 2013 - 2016 Mario Arias\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.funktionale.utils\n\nclass PartialFunction<in P1, out R>(private val definetAt: (P1) -> Boolean, private val f: (P1) -> R) :(P1) -> R {\n    override fun invoke(p1: P1): R {\n        if(definetAt(p1)) {\n            return f(p1)\n        } else {\n            throw IllegalArgumentException("Value: ($p1) isn\'t supported by this function")\n        }\n    }\n\n    fun isDefinedAt(p1: P1) = definetAt(p1)\n}\n\nfun <P1, R> PartialFunction<P1, R>.invokeOrElse(p1: P1, default: R): R {\n    return if (this.isDefinedAt(p1)) {\n        this(p1)\n    } else {\n        default\n    }\n}\n\ninfix fun <P1, R> PartialFunction<P1, R>.orElse(that: PartialFunction<P1, R>): PartialFunction<P1, R> {\n    return PartialFunction({ this.isDefinedAt(it) || that.isDefinedAt(it) }) {\n        when {\n            this.isDefinedAt(it) -> this(it)\n            that.isDefinedAt(it) -> that(it)\n            else -> throw IllegalArgumentException("function not definet for parameter ($it)")\n        }\n    }\n}\n\nfun <P1, R> ((P1) -> R).toPartialFunction(definedAt: (P1) -> Boolean): PartialFunction<P1, R> {\n    return PartialFunction(definedAt, this)\n}'