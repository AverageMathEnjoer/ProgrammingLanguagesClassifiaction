b'mnss :: [Int] -> Int\r\nmnss = maximum . map sum . nonsegs\r\n\r\ntestData :: [Int]\r\ntestData = [-4, -3, -7, 2, 1, -2, -1, -4]\r\n\r\nmarkings :: [a] -> [[(a, Bool)]]\r\nmarkings xs = [zip xs bs | bs <- booleans (length xs)]\r\n\r\nbooleans :: Int -> [[Bool]]\r\nbooleans 0 = [[]]\r\nbooleans n = [b : bs | b <- [True, False], bs <- booleans (n - 1)]\r\n\r\nnonsegs :: [a] -> [[a]]\r\nnonsegs = extract . filter nonseg . markings\r\n\r\nextract :: [[(a, Bool)]] -> [[a]]\r\nextract = map (map fst . filter snd)\r\n\r\ndata State = E | S | M | N\r\n    deriving(Eq, Show)\r\n\r\nnonseg :: [(a, Bool)] -> Bool\r\nnonseg = (== N) . foldl step E . map snd\r\n\r\nstep :: State -> Bool -> State\r\nstep E False = E \r\nstep E True = S \r\nstep S False = M \r\nstep S True = S \r\nstep M False = M\r\nstep M True = N\r\nstep N False = N\r\nstep N True = N\r\n\r\n'