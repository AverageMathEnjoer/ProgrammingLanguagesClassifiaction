b'package com.github.eprendre.sources_by_eprendre\n\nimport com.github.eprendre.tingshu.extensions.getDesktopUA\nimport com.github.eprendre.tingshu.sources.AudioUrlExtractor\nimport com.github.eprendre.tingshu.sources.AudioUrlWebViewExtractor\nimport com.github.eprendre.tingshu.sources.TingShu\nimport com.github.eprendre.tingshu.utils.*\nimport org.jsoup.Jsoup\nimport org.jsoup.nodes.Document\nimport java.net.URLEncoder\nimport kotlin.collections.ArrayList\n\nobject TingShu74 : TingShu(){\n\n    override fun getSourceId(): String {\n        return "e23e50167d0847278320a7204adb088c"\n    }\n\n    override fun getDesc(): String {\n        return "\xe6\x8e\xa8\xe8\x8d\x90\xe6\x8c\x87\xe6\x95\xb0:3\xe6\x98\x9f \xe2\xad\x90\xe2\xad\x90\xe2\xad\x90\\n" +\n                "\xe8\xb5\x84\xe6\xba\x90\xe6\xaf\x94\xe8\xbe\x83\xe5\xa4\x9a\xef\xbc\x8c\xe4\xbd\x86\xe6\x98\xaf\xe5\xa4\xa7\xe5\xa4\x9a\xe6\x95\xb0\xe9\x83\xbd\xe6\x9d\xa5\xe8\x87\xaa\xe4\xba\x8e\xe5\x90\xac\xe4\xb8\xad\xe5\x9b\xbd"\n    }\n\n    override fun getUrl(): String {\n        return "http://www.ting74.com/"\n    }\n\n    override fun getName(): String {\n        return "74\xe5\x90\xac\xe4\xb9\xa6"\n    }\n\n    override fun search(keywords: String, page: Int): Pair<List<Book>, Int> {\n        val url = "http://www.ting74.com/search.html"\n        val encodedKeywords = URLEncoder.encode(keywords, "utf8")\n        val geturl = "$url?searchtype=name&searchword=$encodedKeywords&page=$page"\n        val doc = getUrl(geturl)\n        val list = ArrayList<Book>()\n        doc.select(".list-works > li").forEach {\n            val coverUrl = it.selectFirst("div > a > img").absUrl("data-original")\n            val bookUrl = it.selectFirst("div > a").absUrl("href")\n            val title = it.selectFirst(".list-book-dt > a").text()\n            val info = it.selectFirst(".list-book-des").text()\n            var author = it.select(".list-book-cs > span").first().text()\n            var artist = it.select(".list-book-cs > span")[1].text()\n            var status = it.select(".list-book-cs > span")[2].text()\n            list.add(Book(coverUrl, bookUrl, title, author, artist).apply {\n                this.status = status\n                this.sourceId = getSourceId()\n                this.intro = info\n            })\n        }\n        return if(list.count() == 0) {\n            Pair(list, page)\n        }else{\n            val uiPage = doc.selectFirst(".fanye")\n            val nextUrl = uiPage.select("a").last().absUrl("href")\n            var currentPage = uiPage.selectFirst("strong").text()\n            val totoalPage = nextUrl.substringAfterLast("=")\n            println("$nextUrl,$currentPage,$totoalPage")\n            Pair(list, totoalPage.toInt())\n        }\n    }\n\n    override fun getAudioUrlExtractor(): AudioUrlExtractor {\n        AudioUrlWebViewExtractor.setUp(script = "(function() { return (\'<html>\'+document.getElementById(\\"play\\").contentDocument.documentElement.innerHTML+\'</html>\'); })();") { html ->\n            val doc = Jsoup.parse(html)\n            val audioElement = doc.getElementById("jp_audio_0")\n            audioElement?.attr("src")\n        }\n        return AudioUrlWebViewExtractor\n    }\n\n    override fun getCategoryMenus(): List<CategoryMenu> {\n        val url = "http://www.ting74.com/"\n        val doc = getUrl(url)\n        val list = ArrayList<CategoryMenu>()\n        val menus = ArrayList<CategoryTab>()\n        doc.select(".nav-ol > li").map{\n            val title = it.text()\n            if(title != "\xe9\xa6\x96\xe9\xa1\xb5" && title != "\xe6\x8e\x92\xe8\xa1\x8c\xe6\xa6\x9c" && title != "\xe5\xae\x8c\xe6\x9c\xac\xe6\xa6\x9c"){\n                menus.add( CategoryTab(title, it.selectFirst("a").absUrl("href")) )\n            }\n        }\n        return listOf(CategoryMenu("\xe5\x88\x97\xe8\xa1\xa8",menus))\n    }\n\n    override fun getCategoryList(url: String): Category {\n        val doc = getUrl(url)\n        val list = ArrayList<Book>()\n        doc.select(".list-works > li").forEach {\n            val coverUrl = it.selectFirst("div > a > img").absUrl("data-original")\n            val bookUrl = it.selectFirst("div > a").absUrl("href")\n            val title = it.selectFirst(".list-book-dt > a").text()\n            val info = it.selectFirst(".list-book-des").text()\n\n            var author = it.select(".list-book-cs > span").first().text()\n            var artist = it.select(".list-book-cs > span")[1].text()\n            var status = it.select(".list-book-cs > span")[2].text()\n\n            list.add(Book(coverUrl, bookUrl, title, author, artist).apply {\n                this.status = status\n                this.sourceId = getSourceId()\n                this.intro = info\n            })\n        }\n        val uiPage = doc.selectFirst(".fanye")\n        val nextUrl = uiPage.select("a").last().absUrl("href")\n        var currentPage = uiPage.selectFirst("strong").text()\n        val totoalPage = nextUrl.substringAfterLast("/").substringBeforeLast(".")\n        return Category(list,currentPage.toInt(),totoalPage.toInt(),url,nextUrl)\n    }\n\n    override fun getBookDetailInfo(bookUrl: String, loadEpisodes: Boolean, loadFullPages: Boolean): BookDetail {\n        val episodes = ArrayList<Episode>()\n        var info = ""\n        if(loadEpisodes) {\n            val doc = getUrl(bookUrl)\n            doc.select(".playlist > ul > li").forEach {\n                episodes.add(Episode(it.text(), it.select("a").first().absUrl("href")))\n            }\n            info = doc.selectFirst(".book-des").text()\n        }\n        return BookDetail(episodes, info)\n    }\n\n    private fun getUrl(url:String): Document {\n        val conn = Jsoup.connect(url)\n//        conn.header("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36 Edg/87.0.664.41")\n        conn.header("User-Agent", getDesktopUA())\n        return conn.get()\n    }\n\n}'