b'{-# LANGUAGE NumDecimals, ParallelListComp, TypeApplications, DerivingStrategies,\n    GeneralizedNewtypeDeriving #-}\nimport Prelude hiding (EQ)\nimport Test.Tasty\nimport Test.Tasty.Options\nimport Test.Tasty.HUnit\nimport Text.Printf\nimport Test.Tasty.Patterns.Types\nimport Data.Proxy\n\nnewtype NumTests = NumTests Int\n  deriving newtype (Show, Read)\n\ninstance IsOption NumTests where\n  defaultValue = NumTests 1\n  parseValue = safeRead\n  optionName = return "num-tests"\n  optionHelp = return "Number of tests"\n\nnewtype Mode = Mode String\n  deriving newtype (Show, Read)\n\ninstance IsOption Mode where\n  defaultValue = Mode "control"\n  parseValue = Just . Mode\n  optionName = return "mode"\n  optionHelp = return "forward, backward, or control"\n\nnames (NumTests n) = [ printf "%.5d" i | i <- [1..n] ]\n\nmain = defaultMainWithIngredients\n  (defaultIngredients ++ [includingOptions [Option (Proxy @NumTests), Option (Proxy @Mode)]]) $\n  askOption $ \\nt ->\n  askOption $ \\(Mode mode) -> testGroup "Tests" $\n  [ case mode of\n      "forward" ->\n        after_ AllFinish (Field NF `EQ` StringLit name) $\n          testCase next_name (return ())\n      "backward" ->\n        after_ AllFinish (Field NF `EQ` StringLit next_name) $\n          testCase name (return ())\n      "control" ->\n          testCase name (return ())\n  | name <- names nt\n  | next_name <- tail $ names nt\n  ]\n'