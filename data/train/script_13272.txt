b'package co.joebirch.composeplayground.window\n\nimport androidx.compose.material.Text\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material.Button\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.unit.IntOffset\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.window.Popup\nimport androidx.compose.ui.window.PopupProperties\nimport co.joebirch.composeplayground.ComposableLayout\n\nobject PopupView : ComposableLayout {\n\n    @Composable\n    override fun build() {\n        val showingStandardPopup = remember { mutableStateOf(false) }\n        val showingStandardPopupWithProperties = remember { mutableStateOf(false) }\n        val showingDropdownPopup = remember { mutableStateOf(false) }\n        Box(\n            modifier = Modifier.fillMaxSize().padding(32.dp)\n        ) {\n            Column(modifier = Modifier.align(Alignment.Center)) {\n\n                Button(onClick = {\n                    showingStandardPopup.value = !showingStandardPopup.value\n                }) {\n                    Text(text = "Standard Popup")\n                }\n\n                Spacer(modifier = Modifier.height(16.dp))\n\n                Button(onClick = {\n                    showingStandardPopupWithProperties.value =\n                        !showingStandardPopupWithProperties.value\n                }) {\n                    Text(text = "Standard Popup with Properties")\n                }\n\n                Spacer(modifier = Modifier.height(16.dp))\n\n                Spacer(modifier = Modifier.height(16.dp))\n            }\n\n            when {\n                showingStandardPopup.value -> StandardPopup()\n                showingStandardPopupWithProperties.value -> {\n                    StandardPopupWithProperties(onDismiss = {\n                        showingStandardPopupWithProperties.value = false\n                    })\n                }\n            }\n        }\n    }\n\n}\n\n@Composable\nfun StandardPopup() {\n    Popup(\n        alignment = Alignment.Center\n    ) {\n        Box(modifier = Modifier.size(200.dp, 50.dp)\n            .background(\n                shape = RoundedCornerShape(16.dp),\n                color = Color.Black\n            )\n        ) {\n            Text(\n                text = "Pop up!",\n                modifier = Modifier.align(Alignment.Center),\n                color = Color.White\n            )\n        }\n    }\n}\n\n@Composable\nfun AlignPopup() {\n    Popup(\n        alignment = Alignment.Center\n    ) {\n        Box(modifier = Modifier.size(200.dp, 50.dp)\n            .background(\n                shape = RoundedCornerShape(16.dp),\n                color = Color.Black\n            )\n        ) {\n            Text(\n                text = "Pop up!",\n                modifier = Modifier.align(Alignment.Center),\n                color = Color.White\n            )\n        }\n    }\n}\n\n@Composable\nfun OffsetPopup() {\n    Popup(\n        offset = IntOffset(16, 0)\n    ) {\n        Box(modifier = Modifier.size(200.dp, 50.dp)\n            .background(\n                shape = RoundedCornerShape(16.dp),\n                color = Color.Black\n            )\n        ) {\n            Text(\n                text = "Pop up!",\n                modifier = Modifier.align(Alignment.Center),\n                color = Color.White\n            )\n        }\n    }\n}\n\n@Composable\nfun StandardPopupWithProperties(onDismiss: () -> Unit) {\n    Box {\n        Popup(properties = PopupProperties(focusable = true), onDismissRequest = {\n            onDismiss()\n        }) {\n            Box {\n                Box(\n                    Modifier.size(200.dp, 50.dp)\n                        .background(\n                            Color.Black,\n                            shape = RoundedCornerShape(16.dp)\n                        )\n                )\n                Text(\n                    text = "Click to dismiss!", modifier = Modifier.align(Alignment.Center),\n                    color = Color.White\n                )\n            }\n        }\n    }\n}\n'