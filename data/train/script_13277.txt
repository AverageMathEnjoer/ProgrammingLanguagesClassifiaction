b'package com.naman14.timber.nowplaying;\n\nimport android.graphics.Bitmap;\nimport android.graphics.Color;\nimport android.graphics.drawable.Drawable;\nimport android.graphics.drawable.TransitionDrawable;\nimport android.os.AsyncTask;\nimport android.os.Bundle;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.recyclerview.widget.LinearLayoutManager;\nimport androidx.recyclerview.widget.RecyclerView;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.ImageView;\n\nimport com.naman14.timber.MusicPlayer;\nimport com.naman14.timber.MusicService;\nimport com.naman14.timber.R;\nimport com.naman14.timber.adapters.SlidingQueueAdapter;\nimport com.naman14.timber.dataloaders.QueueLoader;\nimport com.naman14.timber.utils.ImageUtils;\n\nimport net.steamcrafted.materialiconlib.MaterialDrawableBuilder;\n\n/**\n * Created by naman on 22/02/17.\n */\n\npublic class Timber5 extends BaseNowplayingFragment {\n\n    ImageView mBlurredArt;\n    RecyclerView recyclerView;\n    SlidingQueueAdapter adapter;\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        View rootView = inflater.inflate(\n                R.layout.fragment_timber5, container, false);\n\n        setMusicStateListener();\n        setSongDetails(rootView);\n\n        mBlurredArt = (ImageView) rootView.findViewById(R.id.album_art_blurred);\n        recyclerView = (RecyclerView) rootView.findViewById(R.id.queue_recyclerview_horizontal) ;\n        initGestures(mBlurredArt);\n        setupSlidingQueue();\n\n        return rootView;\n    }\n\n    @Override\n    public void updateShuffleState() {\n        if (shuffle != null && getActivity() != null) {\n            MaterialDrawableBuilder builder = MaterialDrawableBuilder.with(getActivity())\n                    .setIcon(MaterialDrawableBuilder.IconValue.SHUFFLE)\n                    .setSizeDp(30);\n\n            if (MusicPlayer.getShuffleMode() == 0) {\n                builder.setColor(Color.WHITE);\n            } else builder.setColor(accentColor);\n\n            shuffle.setImageDrawable(builder.build());\n            shuffle.setOnClickListener(new View.OnClickListener() {\n                @Override\n                public void onClick(View view) {\n                    MusicPlayer.cycleShuffle();\n                    updateShuffleState();\n                    updateRepeatState();\n                }\n            });\n        }\n    }\n\n    @Override\n    public void updateRepeatState() {\n        if (repeat != null && getActivity() != null) {\n            MaterialDrawableBuilder builder = MaterialDrawableBuilder.with(getActivity())\n                    .setSizeDp(30);\n\n            if (MusicPlayer.getRepeatMode() == 0) {\n                builder.setColor(Color.WHITE);\n            } else builder.setColor(accentColor);\n\n            if (MusicPlayer.getRepeatMode() == MusicService.REPEAT_NONE) {\n                builder.setIcon(MaterialDrawableBuilder.IconValue.REPEAT);\n                builder.setColor(Color.WHITE);\n            } else if (MusicPlayer.getRepeatMode() == MusicService.REPEAT_CURRENT) {\n                builder.setIcon(MaterialDrawableBuilder.IconValue.REPEAT_ONCE);\n                builder.setColor(accentColor);\n            } else if (MusicPlayer.getRepeatMode() == MusicService.REPEAT_ALL) {\n                builder.setColor(accentColor);\n                builder.setIcon(MaterialDrawableBuilder.IconValue.REPEAT);\n            }\n\n            repeat.setImageDrawable(builder.build());\n            repeat.setOnClickListener(new View.OnClickListener() {\n                @Override\n                public void onClick(View view) {\n                    MusicPlayer.cycleRepeat();\n                    updateRepeatState();\n                    updateShuffleState();\n                }\n            });\n        }\n    }\n\n    @Override\n    public void doAlbumArtStuff(Bitmap loadedImage) {\n        setBlurredAlbumArt blurredAlbumArt = new setBlurredAlbumArt();\n        blurredAlbumArt.execute(loadedImage);\n    }\n\n    private void setupSlidingQueue() {\n        recyclerView.setLayoutManager(new LinearLayoutManager(getActivity(), LinearLayoutManager.HORIZONTAL, false));\n        adapter = new SlidingQueueAdapter((AppCompatActivity) getActivity(), QueueLoader.getQueueSongs(getActivity()));\n        recyclerView.setAdapter(adapter);\n        recyclerView.scrollToPosition(MusicPlayer.getQueuePosition() - 3);\n    }\n\n\n    private class setBlurredAlbumArt extends AsyncTask<Bitmap, Void, Drawable> {\n\n        @Override\n        protected Drawable doInBackground(Bitmap... loadedImage) {\n            Drawable drawable = null;\n            try {\n                drawable = ImageUtils.createBlurredImageFromBitmap(loadedImage[0], getActivity(), 12);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n            return drawable;\n        }\n\n        @Override\n        protected void onPostExecute(Drawable result) {\n            if (result != null) {\n                if (mBlurredArt.getDrawable() != null) {\n                    final TransitionDrawable td =\n                            new TransitionDrawable(new Drawable[]{\n                                    mBlurredArt.getDrawable(),\n                                    result\n                            });\n                    mBlurredArt.setImageDrawable(td);\n                    td.startTransition(200);\n\n                } else {\n                    mBlurredArt.setImageDrawable(result);\n                }\n            }\n        }\n\n        @Override\n        protected void onPreExecute() {\n        }\n    }\n\n}\n'