b'\n-- | 2d affine transform\n\nmodule Pdf.Content.Transform\n(\n  Transform(..),\n  Vector(..),\n  identity,\n  translation,\n  scale,\n  transform,\n  translate,\n  multiply\n)\nwhere\n\n-- | Affine transform\ndata Transform a = Transform a a a a a a\n  deriving Show\n\n-- | 2d vector/point\ndata Vector a = Vector a a\n  deriving Show\n\n-- | Identity transform\nidentity :: Num a => Transform a\nidentity = Transform 1 0 0 1 0 0\n\n-- | Translation\ntranslation :: Num a => a -> a -> Transform a\ntranslation tx ty = Transform 1 0 0 1 tx ty\n\n-- | Scale\nscale :: Num a => a -> a -> Transform a\nscale sx sy = Transform sx 0 0 sy 0 0\n\n-- | Apply transformation to vector\ntransform :: Num a => Transform a -> Vector a -> Vector a\ntransform (Transform a b c d e f) (Vector x y) =\n  Vector (a * x + c * y + e) (b * x + d * y + f)\n\n-- | Translate\ntranslate :: Num a => a -> a -> Transform a -> Transform a\ntranslate tx ty t = translation tx ty `multiply` t\n\n-- | Combine two transformations\nmultiply :: Num a => Transform a -> Transform a -> Transform a\nmultiply (Transform a1 b1 c1 d1 e1 f1) (Transform a2 b2 c2 d2 e2 f2) =\n  Transform a b c d e f\n  where\n  a = a1 * a2 + b1 * c2\n  b = a1 * b2 + b1 * d2\n  c = c1 * a2 + d1 * c2\n  d = c1 * b2 + d1 * d2\n  e = e1 * a2 + f1 * c2 + e2\n  f = e1 * b2 + f1 * d2 + f2\n'