b'context("outlier")\ntest_that("outlier filtering and replacement works as expected", {\n  # test filtering and replacement\n  set.seed(1)\n  dds <- makeExampleDESeqDataSet(n=100, m=12, dispMeanRel = function(x) 4/x + .5)\n  counts(dds)[1,] <- rep(0L, 12)\n  counts(dds)[2,] <- c(100000L, rep(10L, 11))\n  counts(dds)[3,] <- c(100000L, rep(0L, 11))\n  dds0 <- DESeq(dds, minReplicatesForReplace=Inf)\n  dds1 <- DESeq(dds, minReplicatesForReplace=6)\n  pval0 <- results(dds0)[1:3,"pvalue"]\n  pval <- results(dds1)[1:3,"pvalue"]\n  LFC0 <- results(dds0)[1:3,"log2FoldChange"]\n  LFC <- results(dds1)[1:3,"log2FoldChange"]\n\n  # filtered\n  expect_true(all(is.na(pval0)))\n  # not filtered\n  expect_true(all(!is.na(pval[2:3])))\n  # counts still the same\n  expect_true(all(counts(dds1)==counts(dds)))\n  # first is NA\n  expect_true(is.na(LFC[1]))\n  # replaced, reduced LFC\n  expect_true(abs(LFC[2]) < abs(LFC0[2]))\n  # replaced, LFC now zero\n  expect_true(LFC[3] == 0)\n  idx <- which(!mcols(dds1)$replace)\n  # the pvalue for those not replaced is equal\n  expect_equal(results(dds1)$pvalue[idx], results(dds0)$pvalue[idx])\n\n  # check that outlier filtering catches throughout range of mu\n  beta0 <- seq(from=1,to=16,length=100)\n  idx <- rep(rep(c(TRUE,FALSE),c(1,9)),10)\n  set.seed(1)\n  #par(mfrow=c(2,3))\n  for (disp0 in c(.01,.1)) {\n    for (m in c(10,20,80)) {\n      dds <- makeExampleDESeqDataSet(n=100, m=m, interceptMean=beta0, interceptSD=0,\n                                     dispMeanRel=function(x) disp0)\n      counts(dds)[idx,1] <- as.integer(1000 * 2^beta0[idx])\n      dds <- DESeq(dds, minReplicatesForReplace=Inf, quiet=TRUE, fitType="mean")\n      res <- results(dds)\n      cutoff <- qf(.99, 2, m-2)\n      outlierCooks <- assays(dds)[["cooks"]][idx,1] > cutoff\n      nonoutlierCooks <- mcols(dds)$maxCooks[!idx] < cutoff\n      expect_true(all(is.na(res$pvalue[idx])))\n      expect_true(all(outlierCooks))\n      expect_true(all(nonoutlierCooks))\n      col <- rep("black", 100)\n      col[idx] <- "blue"\n      #plot(2^beta0, mcols(dds)$maxCooks, col=col, log="xy",\n      #     main=paste(m,"-",disp0), xlab="mean", ylab="cooks")\n      #abline(h=qf(.99,2,m-2))\n    }\n  }\n\n  dds <- makeExampleDESeqDataSet(n=100)\n  counts(dds)[1,1] <- 1000000L\n  dds <- DESeq(dds, test="LRT", reduced=~1, minReplicatesForReplace=6)\n\n  # test replace function\n  dds <- makeExampleDESeqDataSet(n=100,m=4)\n  expect_error(replaceOutliers(dds))\n  dds <- DESeq(dds)\n  expect_error(replaceOutliers(dds, minReplicates=2))\n\n  # check model matrix standard bug\n  set.seed(1)\n  dds <- makeExampleDESeqDataSet(n=100, m=20)\n  counts(dds)[1,] <- c(100000L, rep(0L, 19))\n  dds <- DESeq(dds, modelMatrixType="standard")\n})\n\ntest_that("outlier filtering doesn\'t flag small counts", {\n  set.seed(1)\n  dds <- makeExampleDESeqDataSet(n=100, m=8, dispMeanRel=function(x) 0.01)\n  counts(dds)[1,] <- c(0L, 0L, 0L, 100L, 2100L, 2200L, 2300L, 2400L)\n  counts(dds)[2:3,1] <- 100000L\n  counts(dds)[4,] <- rep(0L, 8)\n  dds <- DESeq(dds, fitType="mean")\n  res <- results(dds)\n  expect_true(!is.na(res$pvalue[1]))\n  expect_true(all(is.na(res$pvalue[2:3])))\n})\n'